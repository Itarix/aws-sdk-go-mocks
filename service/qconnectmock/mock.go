// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/qconnect/qconnectiface (interfaces: QConnectAPI)

// Package qconnectmock is a generated GoMock package.
package qconnectmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	qconnect "github.com/aws/aws-sdk-go/service/qconnect"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQConnectAPI is a mock of QConnectAPI interface
type MockQConnectAPI struct {
	ctrl     *gomock.Controller
	recorder *MockQConnectAPIMockRecorder
}

// MockQConnectAPIMockRecorder is the mock recorder for MockQConnectAPI
type MockQConnectAPIMockRecorder struct {
	mock *MockQConnectAPI
}

// NewMockQConnectAPI creates a new mock instance
func NewMockQConnectAPI(ctrl *gomock.Controller) *MockQConnectAPI {
	mock := &MockQConnectAPI{ctrl: ctrl}
	mock.recorder = &MockQConnectAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQConnectAPI) EXPECT() *MockQConnectAPIMockRecorder {
	return m.recorder
}

// CreateAssistant mocks base method
func (m *MockQConnectAPI) CreateAssistant(arg0 *qconnect.CreateAssistantInput) (*qconnect.CreateAssistantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssistant", arg0)
	ret0, _ := ret[0].(*qconnect.CreateAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssistant indicates an expected call of CreateAssistant
func (mr *MockQConnectAPIMockRecorder) CreateAssistant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistant", reflect.TypeOf((*MockQConnectAPI)(nil).CreateAssistant), arg0)
}

// CreateAssistantAssociation mocks base method
func (m *MockQConnectAPI) CreateAssistantAssociation(arg0 *qconnect.CreateAssistantAssociationInput) (*qconnect.CreateAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssistantAssociation", arg0)
	ret0, _ := ret[0].(*qconnect.CreateAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssistantAssociation indicates an expected call of CreateAssistantAssociation
func (mr *MockQConnectAPIMockRecorder) CreateAssistantAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistantAssociation", reflect.TypeOf((*MockQConnectAPI)(nil).CreateAssistantAssociation), arg0)
}

// CreateAssistantAssociationRequest mocks base method
func (m *MockQConnectAPI) CreateAssistantAssociationRequest(arg0 *qconnect.CreateAssistantAssociationInput) (*request.Request, *qconnect.CreateAssistantAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssistantAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.CreateAssistantAssociationOutput)
	return ret0, ret1
}

// CreateAssistantAssociationRequest indicates an expected call of CreateAssistantAssociationRequest
func (mr *MockQConnectAPIMockRecorder) CreateAssistantAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistantAssociationRequest", reflect.TypeOf((*MockQConnectAPI)(nil).CreateAssistantAssociationRequest), arg0)
}

// CreateAssistantAssociationWithContext mocks base method
func (m *MockQConnectAPI) CreateAssistantAssociationWithContext(arg0 context.Context, arg1 *qconnect.CreateAssistantAssociationInput, arg2 ...request.Option) (*qconnect.CreateAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssistantAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.CreateAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssistantAssociationWithContext indicates an expected call of CreateAssistantAssociationWithContext
func (mr *MockQConnectAPIMockRecorder) CreateAssistantAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistantAssociationWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).CreateAssistantAssociationWithContext), varargs...)
}

// CreateAssistantRequest mocks base method
func (m *MockQConnectAPI) CreateAssistantRequest(arg0 *qconnect.CreateAssistantInput) (*request.Request, *qconnect.CreateAssistantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssistantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.CreateAssistantOutput)
	return ret0, ret1
}

// CreateAssistantRequest indicates an expected call of CreateAssistantRequest
func (mr *MockQConnectAPIMockRecorder) CreateAssistantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistantRequest", reflect.TypeOf((*MockQConnectAPI)(nil).CreateAssistantRequest), arg0)
}

// CreateAssistantWithContext mocks base method
func (m *MockQConnectAPI) CreateAssistantWithContext(arg0 context.Context, arg1 *qconnect.CreateAssistantInput, arg2 ...request.Option) (*qconnect.CreateAssistantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssistantWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.CreateAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssistantWithContext indicates an expected call of CreateAssistantWithContext
func (mr *MockQConnectAPIMockRecorder) CreateAssistantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistantWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).CreateAssistantWithContext), varargs...)
}

// CreateContent mocks base method
func (m *MockQConnectAPI) CreateContent(arg0 *qconnect.CreateContentInput) (*qconnect.CreateContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContent", arg0)
	ret0, _ := ret[0].(*qconnect.CreateContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContent indicates an expected call of CreateContent
func (mr *MockQConnectAPIMockRecorder) CreateContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContent", reflect.TypeOf((*MockQConnectAPI)(nil).CreateContent), arg0)
}

// CreateContentAssociation mocks base method
func (m *MockQConnectAPI) CreateContentAssociation(arg0 *qconnect.CreateContentAssociationInput) (*qconnect.CreateContentAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContentAssociation", arg0)
	ret0, _ := ret[0].(*qconnect.CreateContentAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContentAssociation indicates an expected call of CreateContentAssociation
func (mr *MockQConnectAPIMockRecorder) CreateContentAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContentAssociation", reflect.TypeOf((*MockQConnectAPI)(nil).CreateContentAssociation), arg0)
}

// CreateContentAssociationRequest mocks base method
func (m *MockQConnectAPI) CreateContentAssociationRequest(arg0 *qconnect.CreateContentAssociationInput) (*request.Request, *qconnect.CreateContentAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContentAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.CreateContentAssociationOutput)
	return ret0, ret1
}

// CreateContentAssociationRequest indicates an expected call of CreateContentAssociationRequest
func (mr *MockQConnectAPIMockRecorder) CreateContentAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContentAssociationRequest", reflect.TypeOf((*MockQConnectAPI)(nil).CreateContentAssociationRequest), arg0)
}

// CreateContentAssociationWithContext mocks base method
func (m *MockQConnectAPI) CreateContentAssociationWithContext(arg0 context.Context, arg1 *qconnect.CreateContentAssociationInput, arg2 ...request.Option) (*qconnect.CreateContentAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContentAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.CreateContentAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContentAssociationWithContext indicates an expected call of CreateContentAssociationWithContext
func (mr *MockQConnectAPIMockRecorder) CreateContentAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContentAssociationWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).CreateContentAssociationWithContext), varargs...)
}

// CreateContentRequest mocks base method
func (m *MockQConnectAPI) CreateContentRequest(arg0 *qconnect.CreateContentInput) (*request.Request, *qconnect.CreateContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.CreateContentOutput)
	return ret0, ret1
}

// CreateContentRequest indicates an expected call of CreateContentRequest
func (mr *MockQConnectAPIMockRecorder) CreateContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContentRequest", reflect.TypeOf((*MockQConnectAPI)(nil).CreateContentRequest), arg0)
}

// CreateContentWithContext mocks base method
func (m *MockQConnectAPI) CreateContentWithContext(arg0 context.Context, arg1 *qconnect.CreateContentInput, arg2 ...request.Option) (*qconnect.CreateContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContentWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.CreateContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContentWithContext indicates an expected call of CreateContentWithContext
func (mr *MockQConnectAPIMockRecorder) CreateContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContentWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).CreateContentWithContext), varargs...)
}

// CreateKnowledgeBase mocks base method
func (m *MockQConnectAPI) CreateKnowledgeBase(arg0 *qconnect.CreateKnowledgeBaseInput) (*qconnect.CreateKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKnowledgeBase", arg0)
	ret0, _ := ret[0].(*qconnect.CreateKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKnowledgeBase indicates an expected call of CreateKnowledgeBase
func (mr *MockQConnectAPIMockRecorder) CreateKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeBase", reflect.TypeOf((*MockQConnectAPI)(nil).CreateKnowledgeBase), arg0)
}

// CreateKnowledgeBaseRequest mocks base method
func (m *MockQConnectAPI) CreateKnowledgeBaseRequest(arg0 *qconnect.CreateKnowledgeBaseInput) (*request.Request, *qconnect.CreateKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.CreateKnowledgeBaseOutput)
	return ret0, ret1
}

// CreateKnowledgeBaseRequest indicates an expected call of CreateKnowledgeBaseRequest
func (mr *MockQConnectAPIMockRecorder) CreateKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeBaseRequest", reflect.TypeOf((*MockQConnectAPI)(nil).CreateKnowledgeBaseRequest), arg0)
}

// CreateKnowledgeBaseWithContext mocks base method
func (m *MockQConnectAPI) CreateKnowledgeBaseWithContext(arg0 context.Context, arg1 *qconnect.CreateKnowledgeBaseInput, arg2 ...request.Option) (*qconnect.CreateKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.CreateKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKnowledgeBaseWithContext indicates an expected call of CreateKnowledgeBaseWithContext
func (mr *MockQConnectAPIMockRecorder) CreateKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeBaseWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).CreateKnowledgeBaseWithContext), varargs...)
}

// CreateQuickResponse mocks base method
func (m *MockQConnectAPI) CreateQuickResponse(arg0 *qconnect.CreateQuickResponseInput) (*qconnect.CreateQuickResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuickResponse", arg0)
	ret0, _ := ret[0].(*qconnect.CreateQuickResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuickResponse indicates an expected call of CreateQuickResponse
func (mr *MockQConnectAPIMockRecorder) CreateQuickResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuickResponse", reflect.TypeOf((*MockQConnectAPI)(nil).CreateQuickResponse), arg0)
}

// CreateQuickResponseRequest mocks base method
func (m *MockQConnectAPI) CreateQuickResponseRequest(arg0 *qconnect.CreateQuickResponseInput) (*request.Request, *qconnect.CreateQuickResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuickResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.CreateQuickResponseOutput)
	return ret0, ret1
}

// CreateQuickResponseRequest indicates an expected call of CreateQuickResponseRequest
func (mr *MockQConnectAPIMockRecorder) CreateQuickResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuickResponseRequest", reflect.TypeOf((*MockQConnectAPI)(nil).CreateQuickResponseRequest), arg0)
}

// CreateQuickResponseWithContext mocks base method
func (m *MockQConnectAPI) CreateQuickResponseWithContext(arg0 context.Context, arg1 *qconnect.CreateQuickResponseInput, arg2 ...request.Option) (*qconnect.CreateQuickResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQuickResponseWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.CreateQuickResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuickResponseWithContext indicates an expected call of CreateQuickResponseWithContext
func (mr *MockQConnectAPIMockRecorder) CreateQuickResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuickResponseWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).CreateQuickResponseWithContext), varargs...)
}

// CreateSession mocks base method
func (m *MockQConnectAPI) CreateSession(arg0 *qconnect.CreateSessionInput) (*qconnect.CreateSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0)
	ret0, _ := ret[0].(*qconnect.CreateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockQConnectAPIMockRecorder) CreateSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockQConnectAPI)(nil).CreateSession), arg0)
}

// CreateSessionRequest mocks base method
func (m *MockQConnectAPI) CreateSessionRequest(arg0 *qconnect.CreateSessionInput) (*request.Request, *qconnect.CreateSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.CreateSessionOutput)
	return ret0, ret1
}

// CreateSessionRequest indicates an expected call of CreateSessionRequest
func (mr *MockQConnectAPIMockRecorder) CreateSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionRequest", reflect.TypeOf((*MockQConnectAPI)(nil).CreateSessionRequest), arg0)
}

// CreateSessionWithContext mocks base method
func (m *MockQConnectAPI) CreateSessionWithContext(arg0 context.Context, arg1 *qconnect.CreateSessionInput, arg2 ...request.Option) (*qconnect.CreateSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSessionWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.CreateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSessionWithContext indicates an expected call of CreateSessionWithContext
func (mr *MockQConnectAPIMockRecorder) CreateSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).CreateSessionWithContext), varargs...)
}

// DeleteAssistant mocks base method
func (m *MockQConnectAPI) DeleteAssistant(arg0 *qconnect.DeleteAssistantInput) (*qconnect.DeleteAssistantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssistant", arg0)
	ret0, _ := ret[0].(*qconnect.DeleteAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssistant indicates an expected call of DeleteAssistant
func (mr *MockQConnectAPIMockRecorder) DeleteAssistant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistant", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteAssistant), arg0)
}

// DeleteAssistantAssociation mocks base method
func (m *MockQConnectAPI) DeleteAssistantAssociation(arg0 *qconnect.DeleteAssistantAssociationInput) (*qconnect.DeleteAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssistantAssociation", arg0)
	ret0, _ := ret[0].(*qconnect.DeleteAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssistantAssociation indicates an expected call of DeleteAssistantAssociation
func (mr *MockQConnectAPIMockRecorder) DeleteAssistantAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistantAssociation", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteAssistantAssociation), arg0)
}

// DeleteAssistantAssociationRequest mocks base method
func (m *MockQConnectAPI) DeleteAssistantAssociationRequest(arg0 *qconnect.DeleteAssistantAssociationInput) (*request.Request, *qconnect.DeleteAssistantAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssistantAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.DeleteAssistantAssociationOutput)
	return ret0, ret1
}

// DeleteAssistantAssociationRequest indicates an expected call of DeleteAssistantAssociationRequest
func (mr *MockQConnectAPIMockRecorder) DeleteAssistantAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistantAssociationRequest", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteAssistantAssociationRequest), arg0)
}

// DeleteAssistantAssociationWithContext mocks base method
func (m *MockQConnectAPI) DeleteAssistantAssociationWithContext(arg0 context.Context, arg1 *qconnect.DeleteAssistantAssociationInput, arg2 ...request.Option) (*qconnect.DeleteAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssistantAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.DeleteAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssistantAssociationWithContext indicates an expected call of DeleteAssistantAssociationWithContext
func (mr *MockQConnectAPIMockRecorder) DeleteAssistantAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistantAssociationWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteAssistantAssociationWithContext), varargs...)
}

// DeleteAssistantRequest mocks base method
func (m *MockQConnectAPI) DeleteAssistantRequest(arg0 *qconnect.DeleteAssistantInput) (*request.Request, *qconnect.DeleteAssistantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssistantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.DeleteAssistantOutput)
	return ret0, ret1
}

// DeleteAssistantRequest indicates an expected call of DeleteAssistantRequest
func (mr *MockQConnectAPIMockRecorder) DeleteAssistantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistantRequest", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteAssistantRequest), arg0)
}

// DeleteAssistantWithContext mocks base method
func (m *MockQConnectAPI) DeleteAssistantWithContext(arg0 context.Context, arg1 *qconnect.DeleteAssistantInput, arg2 ...request.Option) (*qconnect.DeleteAssistantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssistantWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.DeleteAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssistantWithContext indicates an expected call of DeleteAssistantWithContext
func (mr *MockQConnectAPIMockRecorder) DeleteAssistantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistantWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteAssistantWithContext), varargs...)
}

// DeleteContent mocks base method
func (m *MockQConnectAPI) DeleteContent(arg0 *qconnect.DeleteContentInput) (*qconnect.DeleteContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContent", arg0)
	ret0, _ := ret[0].(*qconnect.DeleteContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContent indicates an expected call of DeleteContent
func (mr *MockQConnectAPIMockRecorder) DeleteContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContent", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteContent), arg0)
}

// DeleteContentAssociation mocks base method
func (m *MockQConnectAPI) DeleteContentAssociation(arg0 *qconnect.DeleteContentAssociationInput) (*qconnect.DeleteContentAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContentAssociation", arg0)
	ret0, _ := ret[0].(*qconnect.DeleteContentAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContentAssociation indicates an expected call of DeleteContentAssociation
func (mr *MockQConnectAPIMockRecorder) DeleteContentAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentAssociation", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteContentAssociation), arg0)
}

// DeleteContentAssociationRequest mocks base method
func (m *MockQConnectAPI) DeleteContentAssociationRequest(arg0 *qconnect.DeleteContentAssociationInput) (*request.Request, *qconnect.DeleteContentAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContentAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.DeleteContentAssociationOutput)
	return ret0, ret1
}

// DeleteContentAssociationRequest indicates an expected call of DeleteContentAssociationRequest
func (mr *MockQConnectAPIMockRecorder) DeleteContentAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentAssociationRequest", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteContentAssociationRequest), arg0)
}

// DeleteContentAssociationWithContext mocks base method
func (m *MockQConnectAPI) DeleteContentAssociationWithContext(arg0 context.Context, arg1 *qconnect.DeleteContentAssociationInput, arg2 ...request.Option) (*qconnect.DeleteContentAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteContentAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.DeleteContentAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContentAssociationWithContext indicates an expected call of DeleteContentAssociationWithContext
func (mr *MockQConnectAPIMockRecorder) DeleteContentAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentAssociationWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteContentAssociationWithContext), varargs...)
}

// DeleteContentRequest mocks base method
func (m *MockQConnectAPI) DeleteContentRequest(arg0 *qconnect.DeleteContentInput) (*request.Request, *qconnect.DeleteContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.DeleteContentOutput)
	return ret0, ret1
}

// DeleteContentRequest indicates an expected call of DeleteContentRequest
func (mr *MockQConnectAPIMockRecorder) DeleteContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentRequest", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteContentRequest), arg0)
}

// DeleteContentWithContext mocks base method
func (m *MockQConnectAPI) DeleteContentWithContext(arg0 context.Context, arg1 *qconnect.DeleteContentInput, arg2 ...request.Option) (*qconnect.DeleteContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteContentWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.DeleteContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContentWithContext indicates an expected call of DeleteContentWithContext
func (mr *MockQConnectAPIMockRecorder) DeleteContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteContentWithContext), varargs...)
}

// DeleteImportJob mocks base method
func (m *MockQConnectAPI) DeleteImportJob(arg0 *qconnect.DeleteImportJobInput) (*qconnect.DeleteImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImportJob", arg0)
	ret0, _ := ret[0].(*qconnect.DeleteImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImportJob indicates an expected call of DeleteImportJob
func (mr *MockQConnectAPIMockRecorder) DeleteImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImportJob", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteImportJob), arg0)
}

// DeleteImportJobRequest mocks base method
func (m *MockQConnectAPI) DeleteImportJobRequest(arg0 *qconnect.DeleteImportJobInput) (*request.Request, *qconnect.DeleteImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.DeleteImportJobOutput)
	return ret0, ret1
}

// DeleteImportJobRequest indicates an expected call of DeleteImportJobRequest
func (mr *MockQConnectAPIMockRecorder) DeleteImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImportJobRequest", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteImportJobRequest), arg0)
}

// DeleteImportJobWithContext mocks base method
func (m *MockQConnectAPI) DeleteImportJobWithContext(arg0 context.Context, arg1 *qconnect.DeleteImportJobInput, arg2 ...request.Option) (*qconnect.DeleteImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.DeleteImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImportJobWithContext indicates an expected call of DeleteImportJobWithContext
func (mr *MockQConnectAPIMockRecorder) DeleteImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImportJobWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteImportJobWithContext), varargs...)
}

// DeleteKnowledgeBase mocks base method
func (m *MockQConnectAPI) DeleteKnowledgeBase(arg0 *qconnect.DeleteKnowledgeBaseInput) (*qconnect.DeleteKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledgeBase", arg0)
	ret0, _ := ret[0].(*qconnect.DeleteKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKnowledgeBase indicates an expected call of DeleteKnowledgeBase
func (mr *MockQConnectAPIMockRecorder) DeleteKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeBase", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteKnowledgeBase), arg0)
}

// DeleteKnowledgeBaseRequest mocks base method
func (m *MockQConnectAPI) DeleteKnowledgeBaseRequest(arg0 *qconnect.DeleteKnowledgeBaseInput) (*request.Request, *qconnect.DeleteKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.DeleteKnowledgeBaseOutput)
	return ret0, ret1
}

// DeleteKnowledgeBaseRequest indicates an expected call of DeleteKnowledgeBaseRequest
func (mr *MockQConnectAPIMockRecorder) DeleteKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeBaseRequest", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteKnowledgeBaseRequest), arg0)
}

// DeleteKnowledgeBaseWithContext mocks base method
func (m *MockQConnectAPI) DeleteKnowledgeBaseWithContext(arg0 context.Context, arg1 *qconnect.DeleteKnowledgeBaseInput, arg2 ...request.Option) (*qconnect.DeleteKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.DeleteKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKnowledgeBaseWithContext indicates an expected call of DeleteKnowledgeBaseWithContext
func (mr *MockQConnectAPIMockRecorder) DeleteKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeBaseWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteKnowledgeBaseWithContext), varargs...)
}

// DeleteQuickResponse mocks base method
func (m *MockQConnectAPI) DeleteQuickResponse(arg0 *qconnect.DeleteQuickResponseInput) (*qconnect.DeleteQuickResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuickResponse", arg0)
	ret0, _ := ret[0].(*qconnect.DeleteQuickResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuickResponse indicates an expected call of DeleteQuickResponse
func (mr *MockQConnectAPIMockRecorder) DeleteQuickResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuickResponse", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteQuickResponse), arg0)
}

// DeleteQuickResponseRequest mocks base method
func (m *MockQConnectAPI) DeleteQuickResponseRequest(arg0 *qconnect.DeleteQuickResponseInput) (*request.Request, *qconnect.DeleteQuickResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuickResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.DeleteQuickResponseOutput)
	return ret0, ret1
}

// DeleteQuickResponseRequest indicates an expected call of DeleteQuickResponseRequest
func (mr *MockQConnectAPIMockRecorder) DeleteQuickResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuickResponseRequest", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteQuickResponseRequest), arg0)
}

// DeleteQuickResponseWithContext mocks base method
func (m *MockQConnectAPI) DeleteQuickResponseWithContext(arg0 context.Context, arg1 *qconnect.DeleteQuickResponseInput, arg2 ...request.Option) (*qconnect.DeleteQuickResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQuickResponseWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.DeleteQuickResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuickResponseWithContext indicates an expected call of DeleteQuickResponseWithContext
func (mr *MockQConnectAPIMockRecorder) DeleteQuickResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuickResponseWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).DeleteQuickResponseWithContext), varargs...)
}

// GetAssistant mocks base method
func (m *MockQConnectAPI) GetAssistant(arg0 *qconnect.GetAssistantInput) (*qconnect.GetAssistantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssistant", arg0)
	ret0, _ := ret[0].(*qconnect.GetAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssistant indicates an expected call of GetAssistant
func (mr *MockQConnectAPIMockRecorder) GetAssistant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistant", reflect.TypeOf((*MockQConnectAPI)(nil).GetAssistant), arg0)
}

// GetAssistantAssociation mocks base method
func (m *MockQConnectAPI) GetAssistantAssociation(arg0 *qconnect.GetAssistantAssociationInput) (*qconnect.GetAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssistantAssociation", arg0)
	ret0, _ := ret[0].(*qconnect.GetAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssistantAssociation indicates an expected call of GetAssistantAssociation
func (mr *MockQConnectAPIMockRecorder) GetAssistantAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistantAssociation", reflect.TypeOf((*MockQConnectAPI)(nil).GetAssistantAssociation), arg0)
}

// GetAssistantAssociationRequest mocks base method
func (m *MockQConnectAPI) GetAssistantAssociationRequest(arg0 *qconnect.GetAssistantAssociationInput) (*request.Request, *qconnect.GetAssistantAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssistantAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.GetAssistantAssociationOutput)
	return ret0, ret1
}

// GetAssistantAssociationRequest indicates an expected call of GetAssistantAssociationRequest
func (mr *MockQConnectAPIMockRecorder) GetAssistantAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistantAssociationRequest", reflect.TypeOf((*MockQConnectAPI)(nil).GetAssistantAssociationRequest), arg0)
}

// GetAssistantAssociationWithContext mocks base method
func (m *MockQConnectAPI) GetAssistantAssociationWithContext(arg0 context.Context, arg1 *qconnect.GetAssistantAssociationInput, arg2 ...request.Option) (*qconnect.GetAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssistantAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.GetAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssistantAssociationWithContext indicates an expected call of GetAssistantAssociationWithContext
func (mr *MockQConnectAPIMockRecorder) GetAssistantAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistantAssociationWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).GetAssistantAssociationWithContext), varargs...)
}

// GetAssistantRequest mocks base method
func (m *MockQConnectAPI) GetAssistantRequest(arg0 *qconnect.GetAssistantInput) (*request.Request, *qconnect.GetAssistantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssistantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.GetAssistantOutput)
	return ret0, ret1
}

// GetAssistantRequest indicates an expected call of GetAssistantRequest
func (mr *MockQConnectAPIMockRecorder) GetAssistantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistantRequest", reflect.TypeOf((*MockQConnectAPI)(nil).GetAssistantRequest), arg0)
}

// GetAssistantWithContext mocks base method
func (m *MockQConnectAPI) GetAssistantWithContext(arg0 context.Context, arg1 *qconnect.GetAssistantInput, arg2 ...request.Option) (*qconnect.GetAssistantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssistantWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.GetAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssistantWithContext indicates an expected call of GetAssistantWithContext
func (mr *MockQConnectAPIMockRecorder) GetAssistantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistantWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).GetAssistantWithContext), varargs...)
}

// GetContent mocks base method
func (m *MockQConnectAPI) GetContent(arg0 *qconnect.GetContentInput) (*qconnect.GetContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", arg0)
	ret0, _ := ret[0].(*qconnect.GetContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent
func (mr *MockQConnectAPIMockRecorder) GetContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockQConnectAPI)(nil).GetContent), arg0)
}

// GetContentAssociation mocks base method
func (m *MockQConnectAPI) GetContentAssociation(arg0 *qconnect.GetContentAssociationInput) (*qconnect.GetContentAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentAssociation", arg0)
	ret0, _ := ret[0].(*qconnect.GetContentAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentAssociation indicates an expected call of GetContentAssociation
func (mr *MockQConnectAPIMockRecorder) GetContentAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentAssociation", reflect.TypeOf((*MockQConnectAPI)(nil).GetContentAssociation), arg0)
}

// GetContentAssociationRequest mocks base method
func (m *MockQConnectAPI) GetContentAssociationRequest(arg0 *qconnect.GetContentAssociationInput) (*request.Request, *qconnect.GetContentAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.GetContentAssociationOutput)
	return ret0, ret1
}

// GetContentAssociationRequest indicates an expected call of GetContentAssociationRequest
func (mr *MockQConnectAPIMockRecorder) GetContentAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentAssociationRequest", reflect.TypeOf((*MockQConnectAPI)(nil).GetContentAssociationRequest), arg0)
}

// GetContentAssociationWithContext mocks base method
func (m *MockQConnectAPI) GetContentAssociationWithContext(arg0 context.Context, arg1 *qconnect.GetContentAssociationInput, arg2 ...request.Option) (*qconnect.GetContentAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContentAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.GetContentAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentAssociationWithContext indicates an expected call of GetContentAssociationWithContext
func (mr *MockQConnectAPIMockRecorder) GetContentAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentAssociationWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).GetContentAssociationWithContext), varargs...)
}

// GetContentRequest mocks base method
func (m *MockQConnectAPI) GetContentRequest(arg0 *qconnect.GetContentInput) (*request.Request, *qconnect.GetContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.GetContentOutput)
	return ret0, ret1
}

// GetContentRequest indicates an expected call of GetContentRequest
func (mr *MockQConnectAPIMockRecorder) GetContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentRequest", reflect.TypeOf((*MockQConnectAPI)(nil).GetContentRequest), arg0)
}

// GetContentSummary mocks base method
func (m *MockQConnectAPI) GetContentSummary(arg0 *qconnect.GetContentSummaryInput) (*qconnect.GetContentSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentSummary", arg0)
	ret0, _ := ret[0].(*qconnect.GetContentSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentSummary indicates an expected call of GetContentSummary
func (mr *MockQConnectAPIMockRecorder) GetContentSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentSummary", reflect.TypeOf((*MockQConnectAPI)(nil).GetContentSummary), arg0)
}

// GetContentSummaryRequest mocks base method
func (m *MockQConnectAPI) GetContentSummaryRequest(arg0 *qconnect.GetContentSummaryInput) (*request.Request, *qconnect.GetContentSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.GetContentSummaryOutput)
	return ret0, ret1
}

// GetContentSummaryRequest indicates an expected call of GetContentSummaryRequest
func (mr *MockQConnectAPIMockRecorder) GetContentSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentSummaryRequest", reflect.TypeOf((*MockQConnectAPI)(nil).GetContentSummaryRequest), arg0)
}

// GetContentSummaryWithContext mocks base method
func (m *MockQConnectAPI) GetContentSummaryWithContext(arg0 context.Context, arg1 *qconnect.GetContentSummaryInput, arg2 ...request.Option) (*qconnect.GetContentSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContentSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.GetContentSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentSummaryWithContext indicates an expected call of GetContentSummaryWithContext
func (mr *MockQConnectAPIMockRecorder) GetContentSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentSummaryWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).GetContentSummaryWithContext), varargs...)
}

// GetContentWithContext mocks base method
func (m *MockQConnectAPI) GetContentWithContext(arg0 context.Context, arg1 *qconnect.GetContentInput, arg2 ...request.Option) (*qconnect.GetContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContentWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.GetContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentWithContext indicates an expected call of GetContentWithContext
func (mr *MockQConnectAPIMockRecorder) GetContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).GetContentWithContext), varargs...)
}

// GetImportJob mocks base method
func (m *MockQConnectAPI) GetImportJob(arg0 *qconnect.GetImportJobInput) (*qconnect.GetImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportJob", arg0)
	ret0, _ := ret[0].(*qconnect.GetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportJob indicates an expected call of GetImportJob
func (mr *MockQConnectAPIMockRecorder) GetImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportJob", reflect.TypeOf((*MockQConnectAPI)(nil).GetImportJob), arg0)
}

// GetImportJobRequest mocks base method
func (m *MockQConnectAPI) GetImportJobRequest(arg0 *qconnect.GetImportJobInput) (*request.Request, *qconnect.GetImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.GetImportJobOutput)
	return ret0, ret1
}

// GetImportJobRequest indicates an expected call of GetImportJobRequest
func (mr *MockQConnectAPIMockRecorder) GetImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportJobRequest", reflect.TypeOf((*MockQConnectAPI)(nil).GetImportJobRequest), arg0)
}

// GetImportJobWithContext mocks base method
func (m *MockQConnectAPI) GetImportJobWithContext(arg0 context.Context, arg1 *qconnect.GetImportJobInput, arg2 ...request.Option) (*qconnect.GetImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.GetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportJobWithContext indicates an expected call of GetImportJobWithContext
func (mr *MockQConnectAPIMockRecorder) GetImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportJobWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).GetImportJobWithContext), varargs...)
}

// GetKnowledgeBase mocks base method
func (m *MockQConnectAPI) GetKnowledgeBase(arg0 *qconnect.GetKnowledgeBaseInput) (*qconnect.GetKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnowledgeBase", arg0)
	ret0, _ := ret[0].(*qconnect.GetKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnowledgeBase indicates an expected call of GetKnowledgeBase
func (mr *MockQConnectAPIMockRecorder) GetKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeBase", reflect.TypeOf((*MockQConnectAPI)(nil).GetKnowledgeBase), arg0)
}

// GetKnowledgeBaseRequest mocks base method
func (m *MockQConnectAPI) GetKnowledgeBaseRequest(arg0 *qconnect.GetKnowledgeBaseInput) (*request.Request, *qconnect.GetKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.GetKnowledgeBaseOutput)
	return ret0, ret1
}

// GetKnowledgeBaseRequest indicates an expected call of GetKnowledgeBaseRequest
func (mr *MockQConnectAPIMockRecorder) GetKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeBaseRequest", reflect.TypeOf((*MockQConnectAPI)(nil).GetKnowledgeBaseRequest), arg0)
}

// GetKnowledgeBaseWithContext mocks base method
func (m *MockQConnectAPI) GetKnowledgeBaseWithContext(arg0 context.Context, arg1 *qconnect.GetKnowledgeBaseInput, arg2 ...request.Option) (*qconnect.GetKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.GetKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnowledgeBaseWithContext indicates an expected call of GetKnowledgeBaseWithContext
func (mr *MockQConnectAPIMockRecorder) GetKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeBaseWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).GetKnowledgeBaseWithContext), varargs...)
}

// GetQuickResponse mocks base method
func (m *MockQConnectAPI) GetQuickResponse(arg0 *qconnect.GetQuickResponseInput) (*qconnect.GetQuickResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuickResponse", arg0)
	ret0, _ := ret[0].(*qconnect.GetQuickResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuickResponse indicates an expected call of GetQuickResponse
func (mr *MockQConnectAPIMockRecorder) GetQuickResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuickResponse", reflect.TypeOf((*MockQConnectAPI)(nil).GetQuickResponse), arg0)
}

// GetQuickResponseRequest mocks base method
func (m *MockQConnectAPI) GetQuickResponseRequest(arg0 *qconnect.GetQuickResponseInput) (*request.Request, *qconnect.GetQuickResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuickResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.GetQuickResponseOutput)
	return ret0, ret1
}

// GetQuickResponseRequest indicates an expected call of GetQuickResponseRequest
func (mr *MockQConnectAPIMockRecorder) GetQuickResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuickResponseRequest", reflect.TypeOf((*MockQConnectAPI)(nil).GetQuickResponseRequest), arg0)
}

// GetQuickResponseWithContext mocks base method
func (m *MockQConnectAPI) GetQuickResponseWithContext(arg0 context.Context, arg1 *qconnect.GetQuickResponseInput, arg2 ...request.Option) (*qconnect.GetQuickResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQuickResponseWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.GetQuickResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuickResponseWithContext indicates an expected call of GetQuickResponseWithContext
func (mr *MockQConnectAPIMockRecorder) GetQuickResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuickResponseWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).GetQuickResponseWithContext), varargs...)
}

// GetRecommendations mocks base method
func (m *MockQConnectAPI) GetRecommendations(arg0 *qconnect.GetRecommendationsInput) (*qconnect.GetRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendations", arg0)
	ret0, _ := ret[0].(*qconnect.GetRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendations indicates an expected call of GetRecommendations
func (mr *MockQConnectAPIMockRecorder) GetRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendations", reflect.TypeOf((*MockQConnectAPI)(nil).GetRecommendations), arg0)
}

// GetRecommendationsRequest mocks base method
func (m *MockQConnectAPI) GetRecommendationsRequest(arg0 *qconnect.GetRecommendationsInput) (*request.Request, *qconnect.GetRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.GetRecommendationsOutput)
	return ret0, ret1
}

// GetRecommendationsRequest indicates an expected call of GetRecommendationsRequest
func (mr *MockQConnectAPIMockRecorder) GetRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationsRequest", reflect.TypeOf((*MockQConnectAPI)(nil).GetRecommendationsRequest), arg0)
}

// GetRecommendationsWithContext mocks base method
func (m *MockQConnectAPI) GetRecommendationsWithContext(arg0 context.Context, arg1 *qconnect.GetRecommendationsInput, arg2 ...request.Option) (*qconnect.GetRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.GetRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationsWithContext indicates an expected call of GetRecommendationsWithContext
func (mr *MockQConnectAPIMockRecorder) GetRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationsWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).GetRecommendationsWithContext), varargs...)
}

// GetSession mocks base method
func (m *MockQConnectAPI) GetSession(arg0 *qconnect.GetSessionInput) (*qconnect.GetSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0)
	ret0, _ := ret[0].(*qconnect.GetSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession
func (mr *MockQConnectAPIMockRecorder) GetSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockQConnectAPI)(nil).GetSession), arg0)
}

// GetSessionRequest mocks base method
func (m *MockQConnectAPI) GetSessionRequest(arg0 *qconnect.GetSessionInput) (*request.Request, *qconnect.GetSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.GetSessionOutput)
	return ret0, ret1
}

// GetSessionRequest indicates an expected call of GetSessionRequest
func (mr *MockQConnectAPIMockRecorder) GetSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionRequest", reflect.TypeOf((*MockQConnectAPI)(nil).GetSessionRequest), arg0)
}

// GetSessionWithContext mocks base method
func (m *MockQConnectAPI) GetSessionWithContext(arg0 context.Context, arg1 *qconnect.GetSessionInput, arg2 ...request.Option) (*qconnect.GetSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSessionWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.GetSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionWithContext indicates an expected call of GetSessionWithContext
func (mr *MockQConnectAPIMockRecorder) GetSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).GetSessionWithContext), varargs...)
}

// ListAssistantAssociations mocks base method
func (m *MockQConnectAPI) ListAssistantAssociations(arg0 *qconnect.ListAssistantAssociationsInput) (*qconnect.ListAssistantAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistantAssociations", arg0)
	ret0, _ := ret[0].(*qconnect.ListAssistantAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssistantAssociations indicates an expected call of ListAssistantAssociations
func (mr *MockQConnectAPIMockRecorder) ListAssistantAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantAssociations", reflect.TypeOf((*MockQConnectAPI)(nil).ListAssistantAssociations), arg0)
}

// ListAssistantAssociationsPages mocks base method
func (m *MockQConnectAPI) ListAssistantAssociationsPages(arg0 *qconnect.ListAssistantAssociationsInput, arg1 func(*qconnect.ListAssistantAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistantAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssistantAssociationsPages indicates an expected call of ListAssistantAssociationsPages
func (mr *MockQConnectAPIMockRecorder) ListAssistantAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantAssociationsPages", reflect.TypeOf((*MockQConnectAPI)(nil).ListAssistantAssociationsPages), arg0, arg1)
}

// ListAssistantAssociationsPagesWithContext mocks base method
func (m *MockQConnectAPI) ListAssistantAssociationsPagesWithContext(arg0 context.Context, arg1 *qconnect.ListAssistantAssociationsInput, arg2 func(*qconnect.ListAssistantAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssistantAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssistantAssociationsPagesWithContext indicates an expected call of ListAssistantAssociationsPagesWithContext
func (mr *MockQConnectAPIMockRecorder) ListAssistantAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantAssociationsPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListAssistantAssociationsPagesWithContext), varargs...)
}

// ListAssistantAssociationsRequest mocks base method
func (m *MockQConnectAPI) ListAssistantAssociationsRequest(arg0 *qconnect.ListAssistantAssociationsInput) (*request.Request, *qconnect.ListAssistantAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistantAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.ListAssistantAssociationsOutput)
	return ret0, ret1
}

// ListAssistantAssociationsRequest indicates an expected call of ListAssistantAssociationsRequest
func (mr *MockQConnectAPIMockRecorder) ListAssistantAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantAssociationsRequest", reflect.TypeOf((*MockQConnectAPI)(nil).ListAssistantAssociationsRequest), arg0)
}

// ListAssistantAssociationsWithContext mocks base method
func (m *MockQConnectAPI) ListAssistantAssociationsWithContext(arg0 context.Context, arg1 *qconnect.ListAssistantAssociationsInput, arg2 ...request.Option) (*qconnect.ListAssistantAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssistantAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.ListAssistantAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssistantAssociationsWithContext indicates an expected call of ListAssistantAssociationsWithContext
func (mr *MockQConnectAPIMockRecorder) ListAssistantAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantAssociationsWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListAssistantAssociationsWithContext), varargs...)
}

// ListAssistants mocks base method
func (m *MockQConnectAPI) ListAssistants(arg0 *qconnect.ListAssistantsInput) (*qconnect.ListAssistantsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistants", arg0)
	ret0, _ := ret[0].(*qconnect.ListAssistantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssistants indicates an expected call of ListAssistants
func (mr *MockQConnectAPIMockRecorder) ListAssistants(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistants", reflect.TypeOf((*MockQConnectAPI)(nil).ListAssistants), arg0)
}

// ListAssistantsPages mocks base method
func (m *MockQConnectAPI) ListAssistantsPages(arg0 *qconnect.ListAssistantsInput, arg1 func(*qconnect.ListAssistantsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistantsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssistantsPages indicates an expected call of ListAssistantsPages
func (mr *MockQConnectAPIMockRecorder) ListAssistantsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantsPages", reflect.TypeOf((*MockQConnectAPI)(nil).ListAssistantsPages), arg0, arg1)
}

// ListAssistantsPagesWithContext mocks base method
func (m *MockQConnectAPI) ListAssistantsPagesWithContext(arg0 context.Context, arg1 *qconnect.ListAssistantsInput, arg2 func(*qconnect.ListAssistantsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssistantsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssistantsPagesWithContext indicates an expected call of ListAssistantsPagesWithContext
func (mr *MockQConnectAPIMockRecorder) ListAssistantsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantsPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListAssistantsPagesWithContext), varargs...)
}

// ListAssistantsRequest mocks base method
func (m *MockQConnectAPI) ListAssistantsRequest(arg0 *qconnect.ListAssistantsInput) (*request.Request, *qconnect.ListAssistantsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistantsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.ListAssistantsOutput)
	return ret0, ret1
}

// ListAssistantsRequest indicates an expected call of ListAssistantsRequest
func (mr *MockQConnectAPIMockRecorder) ListAssistantsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantsRequest", reflect.TypeOf((*MockQConnectAPI)(nil).ListAssistantsRequest), arg0)
}

// ListAssistantsWithContext mocks base method
func (m *MockQConnectAPI) ListAssistantsWithContext(arg0 context.Context, arg1 *qconnect.ListAssistantsInput, arg2 ...request.Option) (*qconnect.ListAssistantsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssistantsWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.ListAssistantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssistantsWithContext indicates an expected call of ListAssistantsWithContext
func (mr *MockQConnectAPIMockRecorder) ListAssistantsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantsWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListAssistantsWithContext), varargs...)
}

// ListContentAssociations mocks base method
func (m *MockQConnectAPI) ListContentAssociations(arg0 *qconnect.ListContentAssociationsInput) (*qconnect.ListContentAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContentAssociations", arg0)
	ret0, _ := ret[0].(*qconnect.ListContentAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContentAssociations indicates an expected call of ListContentAssociations
func (mr *MockQConnectAPIMockRecorder) ListContentAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentAssociations", reflect.TypeOf((*MockQConnectAPI)(nil).ListContentAssociations), arg0)
}

// ListContentAssociationsPages mocks base method
func (m *MockQConnectAPI) ListContentAssociationsPages(arg0 *qconnect.ListContentAssociationsInput, arg1 func(*qconnect.ListContentAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContentAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContentAssociationsPages indicates an expected call of ListContentAssociationsPages
func (mr *MockQConnectAPIMockRecorder) ListContentAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentAssociationsPages", reflect.TypeOf((*MockQConnectAPI)(nil).ListContentAssociationsPages), arg0, arg1)
}

// ListContentAssociationsPagesWithContext mocks base method
func (m *MockQConnectAPI) ListContentAssociationsPagesWithContext(arg0 context.Context, arg1 *qconnect.ListContentAssociationsInput, arg2 func(*qconnect.ListContentAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContentAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContentAssociationsPagesWithContext indicates an expected call of ListContentAssociationsPagesWithContext
func (mr *MockQConnectAPIMockRecorder) ListContentAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentAssociationsPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListContentAssociationsPagesWithContext), varargs...)
}

// ListContentAssociationsRequest mocks base method
func (m *MockQConnectAPI) ListContentAssociationsRequest(arg0 *qconnect.ListContentAssociationsInput) (*request.Request, *qconnect.ListContentAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContentAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.ListContentAssociationsOutput)
	return ret0, ret1
}

// ListContentAssociationsRequest indicates an expected call of ListContentAssociationsRequest
func (mr *MockQConnectAPIMockRecorder) ListContentAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentAssociationsRequest", reflect.TypeOf((*MockQConnectAPI)(nil).ListContentAssociationsRequest), arg0)
}

// ListContentAssociationsWithContext mocks base method
func (m *MockQConnectAPI) ListContentAssociationsWithContext(arg0 context.Context, arg1 *qconnect.ListContentAssociationsInput, arg2 ...request.Option) (*qconnect.ListContentAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContentAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.ListContentAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContentAssociationsWithContext indicates an expected call of ListContentAssociationsWithContext
func (mr *MockQConnectAPIMockRecorder) ListContentAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentAssociationsWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListContentAssociationsWithContext), varargs...)
}

// ListContents mocks base method
func (m *MockQConnectAPI) ListContents(arg0 *qconnect.ListContentsInput) (*qconnect.ListContentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContents", arg0)
	ret0, _ := ret[0].(*qconnect.ListContentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContents indicates an expected call of ListContents
func (mr *MockQConnectAPIMockRecorder) ListContents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContents", reflect.TypeOf((*MockQConnectAPI)(nil).ListContents), arg0)
}

// ListContentsPages mocks base method
func (m *MockQConnectAPI) ListContentsPages(arg0 *qconnect.ListContentsInput, arg1 func(*qconnect.ListContentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContentsPages indicates an expected call of ListContentsPages
func (mr *MockQConnectAPIMockRecorder) ListContentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentsPages", reflect.TypeOf((*MockQConnectAPI)(nil).ListContentsPages), arg0, arg1)
}

// ListContentsPagesWithContext mocks base method
func (m *MockQConnectAPI) ListContentsPagesWithContext(arg0 context.Context, arg1 *qconnect.ListContentsInput, arg2 func(*qconnect.ListContentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContentsPagesWithContext indicates an expected call of ListContentsPagesWithContext
func (mr *MockQConnectAPIMockRecorder) ListContentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentsPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListContentsPagesWithContext), varargs...)
}

// ListContentsRequest mocks base method
func (m *MockQConnectAPI) ListContentsRequest(arg0 *qconnect.ListContentsInput) (*request.Request, *qconnect.ListContentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.ListContentsOutput)
	return ret0, ret1
}

// ListContentsRequest indicates an expected call of ListContentsRequest
func (mr *MockQConnectAPIMockRecorder) ListContentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentsRequest", reflect.TypeOf((*MockQConnectAPI)(nil).ListContentsRequest), arg0)
}

// ListContentsWithContext mocks base method
func (m *MockQConnectAPI) ListContentsWithContext(arg0 context.Context, arg1 *qconnect.ListContentsInput, arg2 ...request.Option) (*qconnect.ListContentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContentsWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.ListContentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContentsWithContext indicates an expected call of ListContentsWithContext
func (mr *MockQConnectAPIMockRecorder) ListContentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentsWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListContentsWithContext), varargs...)
}

// ListImportJobs mocks base method
func (m *MockQConnectAPI) ListImportJobs(arg0 *qconnect.ListImportJobsInput) (*qconnect.ListImportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImportJobs", arg0)
	ret0, _ := ret[0].(*qconnect.ListImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImportJobs indicates an expected call of ListImportJobs
func (mr *MockQConnectAPIMockRecorder) ListImportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportJobs", reflect.TypeOf((*MockQConnectAPI)(nil).ListImportJobs), arg0)
}

// ListImportJobsPages mocks base method
func (m *MockQConnectAPI) ListImportJobsPages(arg0 *qconnect.ListImportJobsInput, arg1 func(*qconnect.ListImportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListImportJobsPages indicates an expected call of ListImportJobsPages
func (mr *MockQConnectAPIMockRecorder) ListImportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportJobsPages", reflect.TypeOf((*MockQConnectAPI)(nil).ListImportJobsPages), arg0, arg1)
}

// ListImportJobsPagesWithContext mocks base method
func (m *MockQConnectAPI) ListImportJobsPagesWithContext(arg0 context.Context, arg1 *qconnect.ListImportJobsInput, arg2 func(*qconnect.ListImportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListImportJobsPagesWithContext indicates an expected call of ListImportJobsPagesWithContext
func (mr *MockQConnectAPIMockRecorder) ListImportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportJobsPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListImportJobsPagesWithContext), varargs...)
}

// ListImportJobsRequest mocks base method
func (m *MockQConnectAPI) ListImportJobsRequest(arg0 *qconnect.ListImportJobsInput) (*request.Request, *qconnect.ListImportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.ListImportJobsOutput)
	return ret0, ret1
}

// ListImportJobsRequest indicates an expected call of ListImportJobsRequest
func (mr *MockQConnectAPIMockRecorder) ListImportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportJobsRequest", reflect.TypeOf((*MockQConnectAPI)(nil).ListImportJobsRequest), arg0)
}

// ListImportJobsWithContext mocks base method
func (m *MockQConnectAPI) ListImportJobsWithContext(arg0 context.Context, arg1 *qconnect.ListImportJobsInput, arg2 ...request.Option) (*qconnect.ListImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.ListImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImportJobsWithContext indicates an expected call of ListImportJobsWithContext
func (mr *MockQConnectAPIMockRecorder) ListImportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportJobsWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListImportJobsWithContext), varargs...)
}

// ListKnowledgeBases mocks base method
func (m *MockQConnectAPI) ListKnowledgeBases(arg0 *qconnect.ListKnowledgeBasesInput) (*qconnect.ListKnowledgeBasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBases", arg0)
	ret0, _ := ret[0].(*qconnect.ListKnowledgeBasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledgeBases indicates an expected call of ListKnowledgeBases
func (mr *MockQConnectAPIMockRecorder) ListKnowledgeBases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBases", reflect.TypeOf((*MockQConnectAPI)(nil).ListKnowledgeBases), arg0)
}

// ListKnowledgeBasesPages mocks base method
func (m *MockQConnectAPI) ListKnowledgeBasesPages(arg0 *qconnect.ListKnowledgeBasesInput, arg1 func(*qconnect.ListKnowledgeBasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKnowledgeBasesPages indicates an expected call of ListKnowledgeBasesPages
func (mr *MockQConnectAPIMockRecorder) ListKnowledgeBasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesPages", reflect.TypeOf((*MockQConnectAPI)(nil).ListKnowledgeBasesPages), arg0, arg1)
}

// ListKnowledgeBasesPagesWithContext mocks base method
func (m *MockQConnectAPI) ListKnowledgeBasesPagesWithContext(arg0 context.Context, arg1 *qconnect.ListKnowledgeBasesInput, arg2 func(*qconnect.ListKnowledgeBasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKnowledgeBasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKnowledgeBasesPagesWithContext indicates an expected call of ListKnowledgeBasesPagesWithContext
func (mr *MockQConnectAPIMockRecorder) ListKnowledgeBasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListKnowledgeBasesPagesWithContext), varargs...)
}

// ListKnowledgeBasesRequest mocks base method
func (m *MockQConnectAPI) ListKnowledgeBasesRequest(arg0 *qconnect.ListKnowledgeBasesInput) (*request.Request, *qconnect.ListKnowledgeBasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.ListKnowledgeBasesOutput)
	return ret0, ret1
}

// ListKnowledgeBasesRequest indicates an expected call of ListKnowledgeBasesRequest
func (mr *MockQConnectAPIMockRecorder) ListKnowledgeBasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesRequest", reflect.TypeOf((*MockQConnectAPI)(nil).ListKnowledgeBasesRequest), arg0)
}

// ListKnowledgeBasesWithContext mocks base method
func (m *MockQConnectAPI) ListKnowledgeBasesWithContext(arg0 context.Context, arg1 *qconnect.ListKnowledgeBasesInput, arg2 ...request.Option) (*qconnect.ListKnowledgeBasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKnowledgeBasesWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.ListKnowledgeBasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledgeBasesWithContext indicates an expected call of ListKnowledgeBasesWithContext
func (mr *MockQConnectAPIMockRecorder) ListKnowledgeBasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListKnowledgeBasesWithContext), varargs...)
}

// ListQuickResponses mocks base method
func (m *MockQConnectAPI) ListQuickResponses(arg0 *qconnect.ListQuickResponsesInput) (*qconnect.ListQuickResponsesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuickResponses", arg0)
	ret0, _ := ret[0].(*qconnect.ListQuickResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuickResponses indicates an expected call of ListQuickResponses
func (mr *MockQConnectAPIMockRecorder) ListQuickResponses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuickResponses", reflect.TypeOf((*MockQConnectAPI)(nil).ListQuickResponses), arg0)
}

// ListQuickResponsesPages mocks base method
func (m *MockQConnectAPI) ListQuickResponsesPages(arg0 *qconnect.ListQuickResponsesInput, arg1 func(*qconnect.ListQuickResponsesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuickResponsesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQuickResponsesPages indicates an expected call of ListQuickResponsesPages
func (mr *MockQConnectAPIMockRecorder) ListQuickResponsesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuickResponsesPages", reflect.TypeOf((*MockQConnectAPI)(nil).ListQuickResponsesPages), arg0, arg1)
}

// ListQuickResponsesPagesWithContext mocks base method
func (m *MockQConnectAPI) ListQuickResponsesPagesWithContext(arg0 context.Context, arg1 *qconnect.ListQuickResponsesInput, arg2 func(*qconnect.ListQuickResponsesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQuickResponsesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQuickResponsesPagesWithContext indicates an expected call of ListQuickResponsesPagesWithContext
func (mr *MockQConnectAPIMockRecorder) ListQuickResponsesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuickResponsesPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListQuickResponsesPagesWithContext), varargs...)
}

// ListQuickResponsesRequest mocks base method
func (m *MockQConnectAPI) ListQuickResponsesRequest(arg0 *qconnect.ListQuickResponsesInput) (*request.Request, *qconnect.ListQuickResponsesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuickResponsesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.ListQuickResponsesOutput)
	return ret0, ret1
}

// ListQuickResponsesRequest indicates an expected call of ListQuickResponsesRequest
func (mr *MockQConnectAPIMockRecorder) ListQuickResponsesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuickResponsesRequest", reflect.TypeOf((*MockQConnectAPI)(nil).ListQuickResponsesRequest), arg0)
}

// ListQuickResponsesWithContext mocks base method
func (m *MockQConnectAPI) ListQuickResponsesWithContext(arg0 context.Context, arg1 *qconnect.ListQuickResponsesInput, arg2 ...request.Option) (*qconnect.ListQuickResponsesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQuickResponsesWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.ListQuickResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuickResponsesWithContext indicates an expected call of ListQuickResponsesWithContext
func (mr *MockQConnectAPIMockRecorder) ListQuickResponsesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuickResponsesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListQuickResponsesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockQConnectAPI) ListTagsForResource(arg0 *qconnect.ListTagsForResourceInput) (*qconnect.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*qconnect.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockQConnectAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockQConnectAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockQConnectAPI) ListTagsForResourceRequest(arg0 *qconnect.ListTagsForResourceInput) (*request.Request, *qconnect.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockQConnectAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockQConnectAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockQConnectAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *qconnect.ListTagsForResourceInput, arg2 ...request.Option) (*qconnect.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockQConnectAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// NotifyRecommendationsReceived mocks base method
func (m *MockQConnectAPI) NotifyRecommendationsReceived(arg0 *qconnect.NotifyRecommendationsReceivedInput) (*qconnect.NotifyRecommendationsReceivedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRecommendationsReceived", arg0)
	ret0, _ := ret[0].(*qconnect.NotifyRecommendationsReceivedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyRecommendationsReceived indicates an expected call of NotifyRecommendationsReceived
func (mr *MockQConnectAPIMockRecorder) NotifyRecommendationsReceived(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRecommendationsReceived", reflect.TypeOf((*MockQConnectAPI)(nil).NotifyRecommendationsReceived), arg0)
}

// NotifyRecommendationsReceivedRequest mocks base method
func (m *MockQConnectAPI) NotifyRecommendationsReceivedRequest(arg0 *qconnect.NotifyRecommendationsReceivedInput) (*request.Request, *qconnect.NotifyRecommendationsReceivedOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRecommendationsReceivedRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.NotifyRecommendationsReceivedOutput)
	return ret0, ret1
}

// NotifyRecommendationsReceivedRequest indicates an expected call of NotifyRecommendationsReceivedRequest
func (mr *MockQConnectAPIMockRecorder) NotifyRecommendationsReceivedRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRecommendationsReceivedRequest", reflect.TypeOf((*MockQConnectAPI)(nil).NotifyRecommendationsReceivedRequest), arg0)
}

// NotifyRecommendationsReceivedWithContext mocks base method
func (m *MockQConnectAPI) NotifyRecommendationsReceivedWithContext(arg0 context.Context, arg1 *qconnect.NotifyRecommendationsReceivedInput, arg2 ...request.Option) (*qconnect.NotifyRecommendationsReceivedOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotifyRecommendationsReceivedWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.NotifyRecommendationsReceivedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyRecommendationsReceivedWithContext indicates an expected call of NotifyRecommendationsReceivedWithContext
func (mr *MockQConnectAPIMockRecorder) NotifyRecommendationsReceivedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRecommendationsReceivedWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).NotifyRecommendationsReceivedWithContext), varargs...)
}

// PutFeedback mocks base method
func (m *MockQConnectAPI) PutFeedback(arg0 *qconnect.PutFeedbackInput) (*qconnect.PutFeedbackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFeedback", arg0)
	ret0, _ := ret[0].(*qconnect.PutFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFeedback indicates an expected call of PutFeedback
func (mr *MockQConnectAPIMockRecorder) PutFeedback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeedback", reflect.TypeOf((*MockQConnectAPI)(nil).PutFeedback), arg0)
}

// PutFeedbackRequest mocks base method
func (m *MockQConnectAPI) PutFeedbackRequest(arg0 *qconnect.PutFeedbackInput) (*request.Request, *qconnect.PutFeedbackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFeedbackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.PutFeedbackOutput)
	return ret0, ret1
}

// PutFeedbackRequest indicates an expected call of PutFeedbackRequest
func (mr *MockQConnectAPIMockRecorder) PutFeedbackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeedbackRequest", reflect.TypeOf((*MockQConnectAPI)(nil).PutFeedbackRequest), arg0)
}

// PutFeedbackWithContext mocks base method
func (m *MockQConnectAPI) PutFeedbackWithContext(arg0 context.Context, arg1 *qconnect.PutFeedbackInput, arg2 ...request.Option) (*qconnect.PutFeedbackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutFeedbackWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.PutFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFeedbackWithContext indicates an expected call of PutFeedbackWithContext
func (mr *MockQConnectAPIMockRecorder) PutFeedbackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeedbackWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).PutFeedbackWithContext), varargs...)
}

// QueryAssistant mocks base method
func (m *MockQConnectAPI) QueryAssistant(arg0 *qconnect.QueryAssistantInput) (*qconnect.QueryAssistantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssistant", arg0)
	ret0, _ := ret[0].(*qconnect.QueryAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAssistant indicates an expected call of QueryAssistant
func (mr *MockQConnectAPIMockRecorder) QueryAssistant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssistant", reflect.TypeOf((*MockQConnectAPI)(nil).QueryAssistant), arg0)
}

// QueryAssistantPages mocks base method
func (m *MockQConnectAPI) QueryAssistantPages(arg0 *qconnect.QueryAssistantInput, arg1 func(*qconnect.QueryAssistantOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssistantPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryAssistantPages indicates an expected call of QueryAssistantPages
func (mr *MockQConnectAPIMockRecorder) QueryAssistantPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssistantPages", reflect.TypeOf((*MockQConnectAPI)(nil).QueryAssistantPages), arg0, arg1)
}

// QueryAssistantPagesWithContext mocks base method
func (m *MockQConnectAPI) QueryAssistantPagesWithContext(arg0 context.Context, arg1 *qconnect.QueryAssistantInput, arg2 func(*qconnect.QueryAssistantOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAssistantPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryAssistantPagesWithContext indicates an expected call of QueryAssistantPagesWithContext
func (mr *MockQConnectAPIMockRecorder) QueryAssistantPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssistantPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).QueryAssistantPagesWithContext), varargs...)
}

// QueryAssistantRequest mocks base method
func (m *MockQConnectAPI) QueryAssistantRequest(arg0 *qconnect.QueryAssistantInput) (*request.Request, *qconnect.QueryAssistantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssistantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.QueryAssistantOutput)
	return ret0, ret1
}

// QueryAssistantRequest indicates an expected call of QueryAssistantRequest
func (mr *MockQConnectAPIMockRecorder) QueryAssistantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssistantRequest", reflect.TypeOf((*MockQConnectAPI)(nil).QueryAssistantRequest), arg0)
}

// QueryAssistantWithContext mocks base method
func (m *MockQConnectAPI) QueryAssistantWithContext(arg0 context.Context, arg1 *qconnect.QueryAssistantInput, arg2 ...request.Option) (*qconnect.QueryAssistantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAssistantWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.QueryAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAssistantWithContext indicates an expected call of QueryAssistantWithContext
func (mr *MockQConnectAPIMockRecorder) QueryAssistantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssistantWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).QueryAssistantWithContext), varargs...)
}

// RemoveKnowledgeBaseTemplateUri mocks base method
func (m *MockQConnectAPI) RemoveKnowledgeBaseTemplateUri(arg0 *qconnect.RemoveKnowledgeBaseTemplateUriInput) (*qconnect.RemoveKnowledgeBaseTemplateUriOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKnowledgeBaseTemplateUri", arg0)
	ret0, _ := ret[0].(*qconnect.RemoveKnowledgeBaseTemplateUriOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKnowledgeBaseTemplateUri indicates an expected call of RemoveKnowledgeBaseTemplateUri
func (mr *MockQConnectAPIMockRecorder) RemoveKnowledgeBaseTemplateUri(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKnowledgeBaseTemplateUri", reflect.TypeOf((*MockQConnectAPI)(nil).RemoveKnowledgeBaseTemplateUri), arg0)
}

// RemoveKnowledgeBaseTemplateUriRequest mocks base method
func (m *MockQConnectAPI) RemoveKnowledgeBaseTemplateUriRequest(arg0 *qconnect.RemoveKnowledgeBaseTemplateUriInput) (*request.Request, *qconnect.RemoveKnowledgeBaseTemplateUriOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKnowledgeBaseTemplateUriRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.RemoveKnowledgeBaseTemplateUriOutput)
	return ret0, ret1
}

// RemoveKnowledgeBaseTemplateUriRequest indicates an expected call of RemoveKnowledgeBaseTemplateUriRequest
func (mr *MockQConnectAPIMockRecorder) RemoveKnowledgeBaseTemplateUriRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKnowledgeBaseTemplateUriRequest", reflect.TypeOf((*MockQConnectAPI)(nil).RemoveKnowledgeBaseTemplateUriRequest), arg0)
}

// RemoveKnowledgeBaseTemplateUriWithContext mocks base method
func (m *MockQConnectAPI) RemoveKnowledgeBaseTemplateUriWithContext(arg0 context.Context, arg1 *qconnect.RemoveKnowledgeBaseTemplateUriInput, arg2 ...request.Option) (*qconnect.RemoveKnowledgeBaseTemplateUriOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveKnowledgeBaseTemplateUriWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.RemoveKnowledgeBaseTemplateUriOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKnowledgeBaseTemplateUriWithContext indicates an expected call of RemoveKnowledgeBaseTemplateUriWithContext
func (mr *MockQConnectAPIMockRecorder) RemoveKnowledgeBaseTemplateUriWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKnowledgeBaseTemplateUriWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).RemoveKnowledgeBaseTemplateUriWithContext), varargs...)
}

// SearchContent mocks base method
func (m *MockQConnectAPI) SearchContent(arg0 *qconnect.SearchContentInput) (*qconnect.SearchContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContent", arg0)
	ret0, _ := ret[0].(*qconnect.SearchContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContent indicates an expected call of SearchContent
func (mr *MockQConnectAPIMockRecorder) SearchContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContent", reflect.TypeOf((*MockQConnectAPI)(nil).SearchContent), arg0)
}

// SearchContentPages mocks base method
func (m *MockQConnectAPI) SearchContentPages(arg0 *qconnect.SearchContentInput, arg1 func(*qconnect.SearchContentOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContentPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchContentPages indicates an expected call of SearchContentPages
func (mr *MockQConnectAPIMockRecorder) SearchContentPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContentPages", reflect.TypeOf((*MockQConnectAPI)(nil).SearchContentPages), arg0, arg1)
}

// SearchContentPagesWithContext mocks base method
func (m *MockQConnectAPI) SearchContentPagesWithContext(arg0 context.Context, arg1 *qconnect.SearchContentInput, arg2 func(*qconnect.SearchContentOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchContentPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchContentPagesWithContext indicates an expected call of SearchContentPagesWithContext
func (mr *MockQConnectAPIMockRecorder) SearchContentPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContentPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).SearchContentPagesWithContext), varargs...)
}

// SearchContentRequest mocks base method
func (m *MockQConnectAPI) SearchContentRequest(arg0 *qconnect.SearchContentInput) (*request.Request, *qconnect.SearchContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.SearchContentOutput)
	return ret0, ret1
}

// SearchContentRequest indicates an expected call of SearchContentRequest
func (mr *MockQConnectAPIMockRecorder) SearchContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContentRequest", reflect.TypeOf((*MockQConnectAPI)(nil).SearchContentRequest), arg0)
}

// SearchContentWithContext mocks base method
func (m *MockQConnectAPI) SearchContentWithContext(arg0 context.Context, arg1 *qconnect.SearchContentInput, arg2 ...request.Option) (*qconnect.SearchContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchContentWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.SearchContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContentWithContext indicates an expected call of SearchContentWithContext
func (mr *MockQConnectAPIMockRecorder) SearchContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContentWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).SearchContentWithContext), varargs...)
}

// SearchQuickResponses mocks base method
func (m *MockQConnectAPI) SearchQuickResponses(arg0 *qconnect.SearchQuickResponsesInput) (*qconnect.SearchQuickResponsesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchQuickResponses", arg0)
	ret0, _ := ret[0].(*qconnect.SearchQuickResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchQuickResponses indicates an expected call of SearchQuickResponses
func (mr *MockQConnectAPIMockRecorder) SearchQuickResponses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuickResponses", reflect.TypeOf((*MockQConnectAPI)(nil).SearchQuickResponses), arg0)
}

// SearchQuickResponsesPages mocks base method
func (m *MockQConnectAPI) SearchQuickResponsesPages(arg0 *qconnect.SearchQuickResponsesInput, arg1 func(*qconnect.SearchQuickResponsesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchQuickResponsesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchQuickResponsesPages indicates an expected call of SearchQuickResponsesPages
func (mr *MockQConnectAPIMockRecorder) SearchQuickResponsesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuickResponsesPages", reflect.TypeOf((*MockQConnectAPI)(nil).SearchQuickResponsesPages), arg0, arg1)
}

// SearchQuickResponsesPagesWithContext mocks base method
func (m *MockQConnectAPI) SearchQuickResponsesPagesWithContext(arg0 context.Context, arg1 *qconnect.SearchQuickResponsesInput, arg2 func(*qconnect.SearchQuickResponsesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchQuickResponsesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchQuickResponsesPagesWithContext indicates an expected call of SearchQuickResponsesPagesWithContext
func (mr *MockQConnectAPIMockRecorder) SearchQuickResponsesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuickResponsesPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).SearchQuickResponsesPagesWithContext), varargs...)
}

// SearchQuickResponsesRequest mocks base method
func (m *MockQConnectAPI) SearchQuickResponsesRequest(arg0 *qconnect.SearchQuickResponsesInput) (*request.Request, *qconnect.SearchQuickResponsesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchQuickResponsesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.SearchQuickResponsesOutput)
	return ret0, ret1
}

// SearchQuickResponsesRequest indicates an expected call of SearchQuickResponsesRequest
func (mr *MockQConnectAPIMockRecorder) SearchQuickResponsesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuickResponsesRequest", reflect.TypeOf((*MockQConnectAPI)(nil).SearchQuickResponsesRequest), arg0)
}

// SearchQuickResponsesWithContext mocks base method
func (m *MockQConnectAPI) SearchQuickResponsesWithContext(arg0 context.Context, arg1 *qconnect.SearchQuickResponsesInput, arg2 ...request.Option) (*qconnect.SearchQuickResponsesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchQuickResponsesWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.SearchQuickResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchQuickResponsesWithContext indicates an expected call of SearchQuickResponsesWithContext
func (mr *MockQConnectAPIMockRecorder) SearchQuickResponsesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuickResponsesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).SearchQuickResponsesWithContext), varargs...)
}

// SearchSessions mocks base method
func (m *MockQConnectAPI) SearchSessions(arg0 *qconnect.SearchSessionsInput) (*qconnect.SearchSessionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSessions", arg0)
	ret0, _ := ret[0].(*qconnect.SearchSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSessions indicates an expected call of SearchSessions
func (mr *MockQConnectAPIMockRecorder) SearchSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSessions", reflect.TypeOf((*MockQConnectAPI)(nil).SearchSessions), arg0)
}

// SearchSessionsPages mocks base method
func (m *MockQConnectAPI) SearchSessionsPages(arg0 *qconnect.SearchSessionsInput, arg1 func(*qconnect.SearchSessionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSessionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchSessionsPages indicates an expected call of SearchSessionsPages
func (mr *MockQConnectAPIMockRecorder) SearchSessionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSessionsPages", reflect.TypeOf((*MockQConnectAPI)(nil).SearchSessionsPages), arg0, arg1)
}

// SearchSessionsPagesWithContext mocks base method
func (m *MockQConnectAPI) SearchSessionsPagesWithContext(arg0 context.Context, arg1 *qconnect.SearchSessionsInput, arg2 func(*qconnect.SearchSessionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSessionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchSessionsPagesWithContext indicates an expected call of SearchSessionsPagesWithContext
func (mr *MockQConnectAPIMockRecorder) SearchSessionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSessionsPagesWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).SearchSessionsPagesWithContext), varargs...)
}

// SearchSessionsRequest mocks base method
func (m *MockQConnectAPI) SearchSessionsRequest(arg0 *qconnect.SearchSessionsInput) (*request.Request, *qconnect.SearchSessionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSessionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.SearchSessionsOutput)
	return ret0, ret1
}

// SearchSessionsRequest indicates an expected call of SearchSessionsRequest
func (mr *MockQConnectAPIMockRecorder) SearchSessionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSessionsRequest", reflect.TypeOf((*MockQConnectAPI)(nil).SearchSessionsRequest), arg0)
}

// SearchSessionsWithContext mocks base method
func (m *MockQConnectAPI) SearchSessionsWithContext(arg0 context.Context, arg1 *qconnect.SearchSessionsInput, arg2 ...request.Option) (*qconnect.SearchSessionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSessionsWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.SearchSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSessionsWithContext indicates an expected call of SearchSessionsWithContext
func (mr *MockQConnectAPIMockRecorder) SearchSessionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSessionsWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).SearchSessionsWithContext), varargs...)
}

// StartContentUpload mocks base method
func (m *MockQConnectAPI) StartContentUpload(arg0 *qconnect.StartContentUploadInput) (*qconnect.StartContentUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContentUpload", arg0)
	ret0, _ := ret[0].(*qconnect.StartContentUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContentUpload indicates an expected call of StartContentUpload
func (mr *MockQConnectAPIMockRecorder) StartContentUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContentUpload", reflect.TypeOf((*MockQConnectAPI)(nil).StartContentUpload), arg0)
}

// StartContentUploadRequest mocks base method
func (m *MockQConnectAPI) StartContentUploadRequest(arg0 *qconnect.StartContentUploadInput) (*request.Request, *qconnect.StartContentUploadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContentUploadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.StartContentUploadOutput)
	return ret0, ret1
}

// StartContentUploadRequest indicates an expected call of StartContentUploadRequest
func (mr *MockQConnectAPIMockRecorder) StartContentUploadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContentUploadRequest", reflect.TypeOf((*MockQConnectAPI)(nil).StartContentUploadRequest), arg0)
}

// StartContentUploadWithContext mocks base method
func (m *MockQConnectAPI) StartContentUploadWithContext(arg0 context.Context, arg1 *qconnect.StartContentUploadInput, arg2 ...request.Option) (*qconnect.StartContentUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartContentUploadWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.StartContentUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContentUploadWithContext indicates an expected call of StartContentUploadWithContext
func (mr *MockQConnectAPIMockRecorder) StartContentUploadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContentUploadWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).StartContentUploadWithContext), varargs...)
}

// StartImportJob mocks base method
func (m *MockQConnectAPI) StartImportJob(arg0 *qconnect.StartImportJobInput) (*qconnect.StartImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartImportJob", arg0)
	ret0, _ := ret[0].(*qconnect.StartImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartImportJob indicates an expected call of StartImportJob
func (mr *MockQConnectAPIMockRecorder) StartImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImportJob", reflect.TypeOf((*MockQConnectAPI)(nil).StartImportJob), arg0)
}

// StartImportJobRequest mocks base method
func (m *MockQConnectAPI) StartImportJobRequest(arg0 *qconnect.StartImportJobInput) (*request.Request, *qconnect.StartImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.StartImportJobOutput)
	return ret0, ret1
}

// StartImportJobRequest indicates an expected call of StartImportJobRequest
func (mr *MockQConnectAPIMockRecorder) StartImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImportJobRequest", reflect.TypeOf((*MockQConnectAPI)(nil).StartImportJobRequest), arg0)
}

// StartImportJobWithContext mocks base method
func (m *MockQConnectAPI) StartImportJobWithContext(arg0 context.Context, arg1 *qconnect.StartImportJobInput, arg2 ...request.Option) (*qconnect.StartImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.StartImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartImportJobWithContext indicates an expected call of StartImportJobWithContext
func (mr *MockQConnectAPIMockRecorder) StartImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImportJobWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).StartImportJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockQConnectAPI) TagResource(arg0 *qconnect.TagResourceInput) (*qconnect.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*qconnect.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockQConnectAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockQConnectAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockQConnectAPI) TagResourceRequest(arg0 *qconnect.TagResourceInput) (*request.Request, *qconnect.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockQConnectAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockQConnectAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockQConnectAPI) TagResourceWithContext(arg0 context.Context, arg1 *qconnect.TagResourceInput, arg2 ...request.Option) (*qconnect.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockQConnectAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockQConnectAPI) UntagResource(arg0 *qconnect.UntagResourceInput) (*qconnect.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*qconnect.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockQConnectAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockQConnectAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockQConnectAPI) UntagResourceRequest(arg0 *qconnect.UntagResourceInput) (*request.Request, *qconnect.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockQConnectAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockQConnectAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockQConnectAPI) UntagResourceWithContext(arg0 context.Context, arg1 *qconnect.UntagResourceInput, arg2 ...request.Option) (*qconnect.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockQConnectAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateContent mocks base method
func (m *MockQConnectAPI) UpdateContent(arg0 *qconnect.UpdateContentInput) (*qconnect.UpdateContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContent", arg0)
	ret0, _ := ret[0].(*qconnect.UpdateContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContent indicates an expected call of UpdateContent
func (mr *MockQConnectAPIMockRecorder) UpdateContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContent", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateContent), arg0)
}

// UpdateContentRequest mocks base method
func (m *MockQConnectAPI) UpdateContentRequest(arg0 *qconnect.UpdateContentInput) (*request.Request, *qconnect.UpdateContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.UpdateContentOutput)
	return ret0, ret1
}

// UpdateContentRequest indicates an expected call of UpdateContentRequest
func (mr *MockQConnectAPIMockRecorder) UpdateContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContentRequest", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateContentRequest), arg0)
}

// UpdateContentWithContext mocks base method
func (m *MockQConnectAPI) UpdateContentWithContext(arg0 context.Context, arg1 *qconnect.UpdateContentInput, arg2 ...request.Option) (*qconnect.UpdateContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContentWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.UpdateContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContentWithContext indicates an expected call of UpdateContentWithContext
func (mr *MockQConnectAPIMockRecorder) UpdateContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContentWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateContentWithContext), varargs...)
}

// UpdateKnowledgeBaseTemplateUri mocks base method
func (m *MockQConnectAPI) UpdateKnowledgeBaseTemplateUri(arg0 *qconnect.UpdateKnowledgeBaseTemplateUriInput) (*qconnect.UpdateKnowledgeBaseTemplateUriOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKnowledgeBaseTemplateUri", arg0)
	ret0, _ := ret[0].(*qconnect.UpdateKnowledgeBaseTemplateUriOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKnowledgeBaseTemplateUri indicates an expected call of UpdateKnowledgeBaseTemplateUri
func (mr *MockQConnectAPIMockRecorder) UpdateKnowledgeBaseTemplateUri(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgeBaseTemplateUri", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateKnowledgeBaseTemplateUri), arg0)
}

// UpdateKnowledgeBaseTemplateUriRequest mocks base method
func (m *MockQConnectAPI) UpdateKnowledgeBaseTemplateUriRequest(arg0 *qconnect.UpdateKnowledgeBaseTemplateUriInput) (*request.Request, *qconnect.UpdateKnowledgeBaseTemplateUriOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKnowledgeBaseTemplateUriRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.UpdateKnowledgeBaseTemplateUriOutput)
	return ret0, ret1
}

// UpdateKnowledgeBaseTemplateUriRequest indicates an expected call of UpdateKnowledgeBaseTemplateUriRequest
func (mr *MockQConnectAPIMockRecorder) UpdateKnowledgeBaseTemplateUriRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgeBaseTemplateUriRequest", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateKnowledgeBaseTemplateUriRequest), arg0)
}

// UpdateKnowledgeBaseTemplateUriWithContext mocks base method
func (m *MockQConnectAPI) UpdateKnowledgeBaseTemplateUriWithContext(arg0 context.Context, arg1 *qconnect.UpdateKnowledgeBaseTemplateUriInput, arg2 ...request.Option) (*qconnect.UpdateKnowledgeBaseTemplateUriOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKnowledgeBaseTemplateUriWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.UpdateKnowledgeBaseTemplateUriOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKnowledgeBaseTemplateUriWithContext indicates an expected call of UpdateKnowledgeBaseTemplateUriWithContext
func (mr *MockQConnectAPIMockRecorder) UpdateKnowledgeBaseTemplateUriWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgeBaseTemplateUriWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateKnowledgeBaseTemplateUriWithContext), varargs...)
}

// UpdateQuickResponse mocks base method
func (m *MockQConnectAPI) UpdateQuickResponse(arg0 *qconnect.UpdateQuickResponseInput) (*qconnect.UpdateQuickResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuickResponse", arg0)
	ret0, _ := ret[0].(*qconnect.UpdateQuickResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuickResponse indicates an expected call of UpdateQuickResponse
func (mr *MockQConnectAPIMockRecorder) UpdateQuickResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuickResponse", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateQuickResponse), arg0)
}

// UpdateQuickResponseRequest mocks base method
func (m *MockQConnectAPI) UpdateQuickResponseRequest(arg0 *qconnect.UpdateQuickResponseInput) (*request.Request, *qconnect.UpdateQuickResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuickResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.UpdateQuickResponseOutput)
	return ret0, ret1
}

// UpdateQuickResponseRequest indicates an expected call of UpdateQuickResponseRequest
func (mr *MockQConnectAPIMockRecorder) UpdateQuickResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuickResponseRequest", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateQuickResponseRequest), arg0)
}

// UpdateQuickResponseWithContext mocks base method
func (m *MockQConnectAPI) UpdateQuickResponseWithContext(arg0 context.Context, arg1 *qconnect.UpdateQuickResponseInput, arg2 ...request.Option) (*qconnect.UpdateQuickResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQuickResponseWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.UpdateQuickResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuickResponseWithContext indicates an expected call of UpdateQuickResponseWithContext
func (mr *MockQConnectAPIMockRecorder) UpdateQuickResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuickResponseWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateQuickResponseWithContext), varargs...)
}

// UpdateSession mocks base method
func (m *MockQConnectAPI) UpdateSession(arg0 *qconnect.UpdateSessionInput) (*qconnect.UpdateSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", arg0)
	ret0, _ := ret[0].(*qconnect.UpdateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSession indicates an expected call of UpdateSession
func (mr *MockQConnectAPIMockRecorder) UpdateSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateSession), arg0)
}

// UpdateSessionRequest mocks base method
func (m *MockQConnectAPI) UpdateSessionRequest(arg0 *qconnect.UpdateSessionInput) (*request.Request, *qconnect.UpdateSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qconnect.UpdateSessionOutput)
	return ret0, ret1
}

// UpdateSessionRequest indicates an expected call of UpdateSessionRequest
func (mr *MockQConnectAPIMockRecorder) UpdateSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionRequest", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateSessionRequest), arg0)
}

// UpdateSessionWithContext mocks base method
func (m *MockQConnectAPI) UpdateSessionWithContext(arg0 context.Context, arg1 *qconnect.UpdateSessionInput, arg2 ...request.Option) (*qconnect.UpdateSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSessionWithContext", varargs...)
	ret0, _ := ret[0].(*qconnect.UpdateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSessionWithContext indicates an expected call of UpdateSessionWithContext
func (mr *MockQConnectAPIMockRecorder) UpdateSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionWithContext", reflect.TypeOf((*MockQConnectAPI)(nil).UpdateSessionWithContext), varargs...)
}
