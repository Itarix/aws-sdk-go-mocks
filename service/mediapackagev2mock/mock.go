// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/mediapackagev2/mediapackagev2iface (interfaces: MediaPackageV2API)

// Package mediapackagev2mock is a generated GoMock package.
package mediapackagev2mock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	mediapackagev2 "github.com/aws/aws-sdk-go/service/mediapackagev2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMediaPackageV2API is a mock of MediaPackageV2API interface
type MockMediaPackageV2API struct {
	ctrl     *gomock.Controller
	recorder *MockMediaPackageV2APIMockRecorder
}

// MockMediaPackageV2APIMockRecorder is the mock recorder for MockMediaPackageV2API
type MockMediaPackageV2APIMockRecorder struct {
	mock *MockMediaPackageV2API
}

// NewMockMediaPackageV2API creates a new mock instance
func NewMockMediaPackageV2API(ctrl *gomock.Controller) *MockMediaPackageV2API {
	mock := &MockMediaPackageV2API{ctrl: ctrl}
	mock.recorder = &MockMediaPackageV2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMediaPackageV2API) EXPECT() *MockMediaPackageV2APIMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method
func (m *MockMediaPackageV2API) CreateChannel(arg0 *mediapackagev2.CreateChannelInput) (*mediapackagev2.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(*mediapackagev2.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockMediaPackageV2APIMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockMediaPackageV2API)(nil).CreateChannel), arg0)
}

// CreateChannelGroup mocks base method
func (m *MockMediaPackageV2API) CreateChannelGroup(arg0 *mediapackagev2.CreateChannelGroupInput) (*mediapackagev2.CreateChannelGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelGroup", arg0)
	ret0, _ := ret[0].(*mediapackagev2.CreateChannelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelGroup indicates an expected call of CreateChannelGroup
func (mr *MockMediaPackageV2APIMockRecorder) CreateChannelGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelGroup", reflect.TypeOf((*MockMediaPackageV2API)(nil).CreateChannelGroup), arg0)
}

// CreateChannelGroupRequest mocks base method
func (m *MockMediaPackageV2API) CreateChannelGroupRequest(arg0 *mediapackagev2.CreateChannelGroupInput) (*request.Request, *mediapackagev2.CreateChannelGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.CreateChannelGroupOutput)
	return ret0, ret1
}

// CreateChannelGroupRequest indicates an expected call of CreateChannelGroupRequest
func (mr *MockMediaPackageV2APIMockRecorder) CreateChannelGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelGroupRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).CreateChannelGroupRequest), arg0)
}

// CreateChannelGroupWithContext mocks base method
func (m *MockMediaPackageV2API) CreateChannelGroupWithContext(arg0 context.Context, arg1 *mediapackagev2.CreateChannelGroupInput, arg2 ...request.Option) (*mediapackagev2.CreateChannelGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelGroupWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.CreateChannelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelGroupWithContext indicates an expected call of CreateChannelGroupWithContext
func (mr *MockMediaPackageV2APIMockRecorder) CreateChannelGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelGroupWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).CreateChannelGroupWithContext), varargs...)
}

// CreateChannelRequest mocks base method
func (m *MockMediaPackageV2API) CreateChannelRequest(arg0 *mediapackagev2.CreateChannelInput) (*request.Request, *mediapackagev2.CreateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.CreateChannelOutput)
	return ret0, ret1
}

// CreateChannelRequest indicates an expected call of CreateChannelRequest
func (mr *MockMediaPackageV2APIMockRecorder) CreateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).CreateChannelRequest), arg0)
}

// CreateChannelWithContext mocks base method
func (m *MockMediaPackageV2API) CreateChannelWithContext(arg0 context.Context, arg1 *mediapackagev2.CreateChannelInput, arg2 ...request.Option) (*mediapackagev2.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelWithContext indicates an expected call of CreateChannelWithContext
func (mr *MockMediaPackageV2APIMockRecorder) CreateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).CreateChannelWithContext), varargs...)
}

// CreateOriginEndpoint mocks base method
func (m *MockMediaPackageV2API) CreateOriginEndpoint(arg0 *mediapackagev2.CreateOriginEndpointInput) (*mediapackagev2.CreateOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOriginEndpoint", arg0)
	ret0, _ := ret[0].(*mediapackagev2.CreateOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOriginEndpoint indicates an expected call of CreateOriginEndpoint
func (mr *MockMediaPackageV2APIMockRecorder) CreateOriginEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOriginEndpoint", reflect.TypeOf((*MockMediaPackageV2API)(nil).CreateOriginEndpoint), arg0)
}

// CreateOriginEndpointRequest mocks base method
func (m *MockMediaPackageV2API) CreateOriginEndpointRequest(arg0 *mediapackagev2.CreateOriginEndpointInput) (*request.Request, *mediapackagev2.CreateOriginEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOriginEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.CreateOriginEndpointOutput)
	return ret0, ret1
}

// CreateOriginEndpointRequest indicates an expected call of CreateOriginEndpointRequest
func (mr *MockMediaPackageV2APIMockRecorder) CreateOriginEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOriginEndpointRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).CreateOriginEndpointRequest), arg0)
}

// CreateOriginEndpointWithContext mocks base method
func (m *MockMediaPackageV2API) CreateOriginEndpointWithContext(arg0 context.Context, arg1 *mediapackagev2.CreateOriginEndpointInput, arg2 ...request.Option) (*mediapackagev2.CreateOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOriginEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.CreateOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOriginEndpointWithContext indicates an expected call of CreateOriginEndpointWithContext
func (mr *MockMediaPackageV2APIMockRecorder) CreateOriginEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOriginEndpointWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).CreateOriginEndpointWithContext), varargs...)
}

// DeleteChannel mocks base method
func (m *MockMediaPackageV2API) DeleteChannel(arg0 *mediapackagev2.DeleteChannelInput) (*mediapackagev2.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(*mediapackagev2.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel
func (mr *MockMediaPackageV2APIMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteChannel), arg0)
}

// DeleteChannelGroup mocks base method
func (m *MockMediaPackageV2API) DeleteChannelGroup(arg0 *mediapackagev2.DeleteChannelGroupInput) (*mediapackagev2.DeleteChannelGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelGroup", arg0)
	ret0, _ := ret[0].(*mediapackagev2.DeleteChannelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelGroup indicates an expected call of DeleteChannelGroup
func (mr *MockMediaPackageV2APIMockRecorder) DeleteChannelGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelGroup", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteChannelGroup), arg0)
}

// DeleteChannelGroupRequest mocks base method
func (m *MockMediaPackageV2API) DeleteChannelGroupRequest(arg0 *mediapackagev2.DeleteChannelGroupInput) (*request.Request, *mediapackagev2.DeleteChannelGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.DeleteChannelGroupOutput)
	return ret0, ret1
}

// DeleteChannelGroupRequest indicates an expected call of DeleteChannelGroupRequest
func (mr *MockMediaPackageV2APIMockRecorder) DeleteChannelGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelGroupRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteChannelGroupRequest), arg0)
}

// DeleteChannelGroupWithContext mocks base method
func (m *MockMediaPackageV2API) DeleteChannelGroupWithContext(arg0 context.Context, arg1 *mediapackagev2.DeleteChannelGroupInput, arg2 ...request.Option) (*mediapackagev2.DeleteChannelGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelGroupWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.DeleteChannelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelGroupWithContext indicates an expected call of DeleteChannelGroupWithContext
func (mr *MockMediaPackageV2APIMockRecorder) DeleteChannelGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelGroupWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteChannelGroupWithContext), varargs...)
}

// DeleteChannelPolicy mocks base method
func (m *MockMediaPackageV2API) DeleteChannelPolicy(arg0 *mediapackagev2.DeleteChannelPolicyInput) (*mediapackagev2.DeleteChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelPolicy", arg0)
	ret0, _ := ret[0].(*mediapackagev2.DeleteChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelPolicy indicates an expected call of DeleteChannelPolicy
func (mr *MockMediaPackageV2APIMockRecorder) DeleteChannelPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelPolicy", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteChannelPolicy), arg0)
}

// DeleteChannelPolicyRequest mocks base method
func (m *MockMediaPackageV2API) DeleteChannelPolicyRequest(arg0 *mediapackagev2.DeleteChannelPolicyInput) (*request.Request, *mediapackagev2.DeleteChannelPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.DeleteChannelPolicyOutput)
	return ret0, ret1
}

// DeleteChannelPolicyRequest indicates an expected call of DeleteChannelPolicyRequest
func (mr *MockMediaPackageV2APIMockRecorder) DeleteChannelPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelPolicyRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteChannelPolicyRequest), arg0)
}

// DeleteChannelPolicyWithContext mocks base method
func (m *MockMediaPackageV2API) DeleteChannelPolicyWithContext(arg0 context.Context, arg1 *mediapackagev2.DeleteChannelPolicyInput, arg2 ...request.Option) (*mediapackagev2.DeleteChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.DeleteChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelPolicyWithContext indicates an expected call of DeleteChannelPolicyWithContext
func (mr *MockMediaPackageV2APIMockRecorder) DeleteChannelPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelPolicyWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteChannelPolicyWithContext), varargs...)
}

// DeleteChannelRequest mocks base method
func (m *MockMediaPackageV2API) DeleteChannelRequest(arg0 *mediapackagev2.DeleteChannelInput) (*request.Request, *mediapackagev2.DeleteChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.DeleteChannelOutput)
	return ret0, ret1
}

// DeleteChannelRequest indicates an expected call of DeleteChannelRequest
func (mr *MockMediaPackageV2APIMockRecorder) DeleteChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteChannelRequest), arg0)
}

// DeleteChannelWithContext mocks base method
func (m *MockMediaPackageV2API) DeleteChannelWithContext(arg0 context.Context, arg1 *mediapackagev2.DeleteChannelInput, arg2 ...request.Option) (*mediapackagev2.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelWithContext indicates an expected call of DeleteChannelWithContext
func (mr *MockMediaPackageV2APIMockRecorder) DeleteChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteChannelWithContext), varargs...)
}

// DeleteOriginEndpoint mocks base method
func (m *MockMediaPackageV2API) DeleteOriginEndpoint(arg0 *mediapackagev2.DeleteOriginEndpointInput) (*mediapackagev2.DeleteOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOriginEndpoint", arg0)
	ret0, _ := ret[0].(*mediapackagev2.DeleteOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOriginEndpoint indicates an expected call of DeleteOriginEndpoint
func (mr *MockMediaPackageV2APIMockRecorder) DeleteOriginEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginEndpoint", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteOriginEndpoint), arg0)
}

// DeleteOriginEndpointPolicy mocks base method
func (m *MockMediaPackageV2API) DeleteOriginEndpointPolicy(arg0 *mediapackagev2.DeleteOriginEndpointPolicyInput) (*mediapackagev2.DeleteOriginEndpointPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOriginEndpointPolicy", arg0)
	ret0, _ := ret[0].(*mediapackagev2.DeleteOriginEndpointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOriginEndpointPolicy indicates an expected call of DeleteOriginEndpointPolicy
func (mr *MockMediaPackageV2APIMockRecorder) DeleteOriginEndpointPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginEndpointPolicy", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteOriginEndpointPolicy), arg0)
}

// DeleteOriginEndpointPolicyRequest mocks base method
func (m *MockMediaPackageV2API) DeleteOriginEndpointPolicyRequest(arg0 *mediapackagev2.DeleteOriginEndpointPolicyInput) (*request.Request, *mediapackagev2.DeleteOriginEndpointPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOriginEndpointPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.DeleteOriginEndpointPolicyOutput)
	return ret0, ret1
}

// DeleteOriginEndpointPolicyRequest indicates an expected call of DeleteOriginEndpointPolicyRequest
func (mr *MockMediaPackageV2APIMockRecorder) DeleteOriginEndpointPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginEndpointPolicyRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteOriginEndpointPolicyRequest), arg0)
}

// DeleteOriginEndpointPolicyWithContext mocks base method
func (m *MockMediaPackageV2API) DeleteOriginEndpointPolicyWithContext(arg0 context.Context, arg1 *mediapackagev2.DeleteOriginEndpointPolicyInput, arg2 ...request.Option) (*mediapackagev2.DeleteOriginEndpointPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOriginEndpointPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.DeleteOriginEndpointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOriginEndpointPolicyWithContext indicates an expected call of DeleteOriginEndpointPolicyWithContext
func (mr *MockMediaPackageV2APIMockRecorder) DeleteOriginEndpointPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginEndpointPolicyWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteOriginEndpointPolicyWithContext), varargs...)
}

// DeleteOriginEndpointRequest mocks base method
func (m *MockMediaPackageV2API) DeleteOriginEndpointRequest(arg0 *mediapackagev2.DeleteOriginEndpointInput) (*request.Request, *mediapackagev2.DeleteOriginEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOriginEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.DeleteOriginEndpointOutput)
	return ret0, ret1
}

// DeleteOriginEndpointRequest indicates an expected call of DeleteOriginEndpointRequest
func (mr *MockMediaPackageV2APIMockRecorder) DeleteOriginEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginEndpointRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteOriginEndpointRequest), arg0)
}

// DeleteOriginEndpointWithContext mocks base method
func (m *MockMediaPackageV2API) DeleteOriginEndpointWithContext(arg0 context.Context, arg1 *mediapackagev2.DeleteOriginEndpointInput, arg2 ...request.Option) (*mediapackagev2.DeleteOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOriginEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.DeleteOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOriginEndpointWithContext indicates an expected call of DeleteOriginEndpointWithContext
func (mr *MockMediaPackageV2APIMockRecorder) DeleteOriginEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginEndpointWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).DeleteOriginEndpointWithContext), varargs...)
}

// GetChannel mocks base method
func (m *MockMediaPackageV2API) GetChannel(arg0 *mediapackagev2.GetChannelInput) (*mediapackagev2.GetChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", arg0)
	ret0, _ := ret[0].(*mediapackagev2.GetChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel
func (mr *MockMediaPackageV2APIMockRecorder) GetChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetChannel), arg0)
}

// GetChannelGroup mocks base method
func (m *MockMediaPackageV2API) GetChannelGroup(arg0 *mediapackagev2.GetChannelGroupInput) (*mediapackagev2.GetChannelGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelGroup", arg0)
	ret0, _ := ret[0].(*mediapackagev2.GetChannelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelGroup indicates an expected call of GetChannelGroup
func (mr *MockMediaPackageV2APIMockRecorder) GetChannelGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelGroup", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetChannelGroup), arg0)
}

// GetChannelGroupRequest mocks base method
func (m *MockMediaPackageV2API) GetChannelGroupRequest(arg0 *mediapackagev2.GetChannelGroupInput) (*request.Request, *mediapackagev2.GetChannelGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.GetChannelGroupOutput)
	return ret0, ret1
}

// GetChannelGroupRequest indicates an expected call of GetChannelGroupRequest
func (mr *MockMediaPackageV2APIMockRecorder) GetChannelGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelGroupRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetChannelGroupRequest), arg0)
}

// GetChannelGroupWithContext mocks base method
func (m *MockMediaPackageV2API) GetChannelGroupWithContext(arg0 context.Context, arg1 *mediapackagev2.GetChannelGroupInput, arg2 ...request.Option) (*mediapackagev2.GetChannelGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelGroupWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.GetChannelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelGroupWithContext indicates an expected call of GetChannelGroupWithContext
func (mr *MockMediaPackageV2APIMockRecorder) GetChannelGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelGroupWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetChannelGroupWithContext), varargs...)
}

// GetChannelPolicy mocks base method
func (m *MockMediaPackageV2API) GetChannelPolicy(arg0 *mediapackagev2.GetChannelPolicyInput) (*mediapackagev2.GetChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelPolicy", arg0)
	ret0, _ := ret[0].(*mediapackagev2.GetChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelPolicy indicates an expected call of GetChannelPolicy
func (mr *MockMediaPackageV2APIMockRecorder) GetChannelPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelPolicy", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetChannelPolicy), arg0)
}

// GetChannelPolicyRequest mocks base method
func (m *MockMediaPackageV2API) GetChannelPolicyRequest(arg0 *mediapackagev2.GetChannelPolicyInput) (*request.Request, *mediapackagev2.GetChannelPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.GetChannelPolicyOutput)
	return ret0, ret1
}

// GetChannelPolicyRequest indicates an expected call of GetChannelPolicyRequest
func (mr *MockMediaPackageV2APIMockRecorder) GetChannelPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelPolicyRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetChannelPolicyRequest), arg0)
}

// GetChannelPolicyWithContext mocks base method
func (m *MockMediaPackageV2API) GetChannelPolicyWithContext(arg0 context.Context, arg1 *mediapackagev2.GetChannelPolicyInput, arg2 ...request.Option) (*mediapackagev2.GetChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.GetChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelPolicyWithContext indicates an expected call of GetChannelPolicyWithContext
func (mr *MockMediaPackageV2APIMockRecorder) GetChannelPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelPolicyWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetChannelPolicyWithContext), varargs...)
}

// GetChannelRequest mocks base method
func (m *MockMediaPackageV2API) GetChannelRequest(arg0 *mediapackagev2.GetChannelInput) (*request.Request, *mediapackagev2.GetChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.GetChannelOutput)
	return ret0, ret1
}

// GetChannelRequest indicates an expected call of GetChannelRequest
func (mr *MockMediaPackageV2APIMockRecorder) GetChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetChannelRequest), arg0)
}

// GetChannelWithContext mocks base method
func (m *MockMediaPackageV2API) GetChannelWithContext(arg0 context.Context, arg1 *mediapackagev2.GetChannelInput, arg2 ...request.Option) (*mediapackagev2.GetChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.GetChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelWithContext indicates an expected call of GetChannelWithContext
func (mr *MockMediaPackageV2APIMockRecorder) GetChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetChannelWithContext), varargs...)
}

// GetOriginEndpoint mocks base method
func (m *MockMediaPackageV2API) GetOriginEndpoint(arg0 *mediapackagev2.GetOriginEndpointInput) (*mediapackagev2.GetOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginEndpoint", arg0)
	ret0, _ := ret[0].(*mediapackagev2.GetOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginEndpoint indicates an expected call of GetOriginEndpoint
func (mr *MockMediaPackageV2APIMockRecorder) GetOriginEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginEndpoint", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetOriginEndpoint), arg0)
}

// GetOriginEndpointPolicy mocks base method
func (m *MockMediaPackageV2API) GetOriginEndpointPolicy(arg0 *mediapackagev2.GetOriginEndpointPolicyInput) (*mediapackagev2.GetOriginEndpointPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginEndpointPolicy", arg0)
	ret0, _ := ret[0].(*mediapackagev2.GetOriginEndpointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginEndpointPolicy indicates an expected call of GetOriginEndpointPolicy
func (mr *MockMediaPackageV2APIMockRecorder) GetOriginEndpointPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginEndpointPolicy", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetOriginEndpointPolicy), arg0)
}

// GetOriginEndpointPolicyRequest mocks base method
func (m *MockMediaPackageV2API) GetOriginEndpointPolicyRequest(arg0 *mediapackagev2.GetOriginEndpointPolicyInput) (*request.Request, *mediapackagev2.GetOriginEndpointPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginEndpointPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.GetOriginEndpointPolicyOutput)
	return ret0, ret1
}

// GetOriginEndpointPolicyRequest indicates an expected call of GetOriginEndpointPolicyRequest
func (mr *MockMediaPackageV2APIMockRecorder) GetOriginEndpointPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginEndpointPolicyRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetOriginEndpointPolicyRequest), arg0)
}

// GetOriginEndpointPolicyWithContext mocks base method
func (m *MockMediaPackageV2API) GetOriginEndpointPolicyWithContext(arg0 context.Context, arg1 *mediapackagev2.GetOriginEndpointPolicyInput, arg2 ...request.Option) (*mediapackagev2.GetOriginEndpointPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOriginEndpointPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.GetOriginEndpointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginEndpointPolicyWithContext indicates an expected call of GetOriginEndpointPolicyWithContext
func (mr *MockMediaPackageV2APIMockRecorder) GetOriginEndpointPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginEndpointPolicyWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetOriginEndpointPolicyWithContext), varargs...)
}

// GetOriginEndpointRequest mocks base method
func (m *MockMediaPackageV2API) GetOriginEndpointRequest(arg0 *mediapackagev2.GetOriginEndpointInput) (*request.Request, *mediapackagev2.GetOriginEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.GetOriginEndpointOutput)
	return ret0, ret1
}

// GetOriginEndpointRequest indicates an expected call of GetOriginEndpointRequest
func (mr *MockMediaPackageV2APIMockRecorder) GetOriginEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginEndpointRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetOriginEndpointRequest), arg0)
}

// GetOriginEndpointWithContext mocks base method
func (m *MockMediaPackageV2API) GetOriginEndpointWithContext(arg0 context.Context, arg1 *mediapackagev2.GetOriginEndpointInput, arg2 ...request.Option) (*mediapackagev2.GetOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOriginEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.GetOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginEndpointWithContext indicates an expected call of GetOriginEndpointWithContext
func (mr *MockMediaPackageV2APIMockRecorder) GetOriginEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginEndpointWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).GetOriginEndpointWithContext), varargs...)
}

// ListChannelGroups mocks base method
func (m *MockMediaPackageV2API) ListChannelGroups(arg0 *mediapackagev2.ListChannelGroupsInput) (*mediapackagev2.ListChannelGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelGroups", arg0)
	ret0, _ := ret[0].(*mediapackagev2.ListChannelGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelGroups indicates an expected call of ListChannelGroups
func (mr *MockMediaPackageV2APIMockRecorder) ListChannelGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelGroups", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListChannelGroups), arg0)
}

// ListChannelGroupsPages mocks base method
func (m *MockMediaPackageV2API) ListChannelGroupsPages(arg0 *mediapackagev2.ListChannelGroupsInput, arg1 func(*mediapackagev2.ListChannelGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelGroupsPages indicates an expected call of ListChannelGroupsPages
func (mr *MockMediaPackageV2APIMockRecorder) ListChannelGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelGroupsPages", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListChannelGroupsPages), arg0, arg1)
}

// ListChannelGroupsPagesWithContext mocks base method
func (m *MockMediaPackageV2API) ListChannelGroupsPagesWithContext(arg0 context.Context, arg1 *mediapackagev2.ListChannelGroupsInput, arg2 func(*mediapackagev2.ListChannelGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelGroupsPagesWithContext indicates an expected call of ListChannelGroupsPagesWithContext
func (mr *MockMediaPackageV2APIMockRecorder) ListChannelGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelGroupsPagesWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListChannelGroupsPagesWithContext), varargs...)
}

// ListChannelGroupsRequest mocks base method
func (m *MockMediaPackageV2API) ListChannelGroupsRequest(arg0 *mediapackagev2.ListChannelGroupsInput) (*request.Request, *mediapackagev2.ListChannelGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.ListChannelGroupsOutput)
	return ret0, ret1
}

// ListChannelGroupsRequest indicates an expected call of ListChannelGroupsRequest
func (mr *MockMediaPackageV2APIMockRecorder) ListChannelGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelGroupsRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListChannelGroupsRequest), arg0)
}

// ListChannelGroupsWithContext mocks base method
func (m *MockMediaPackageV2API) ListChannelGroupsWithContext(arg0 context.Context, arg1 *mediapackagev2.ListChannelGroupsInput, arg2 ...request.Option) (*mediapackagev2.ListChannelGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.ListChannelGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelGroupsWithContext indicates an expected call of ListChannelGroupsWithContext
func (mr *MockMediaPackageV2APIMockRecorder) ListChannelGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelGroupsWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListChannelGroupsWithContext), varargs...)
}

// ListChannels mocks base method
func (m *MockMediaPackageV2API) ListChannels(arg0 *mediapackagev2.ListChannelsInput) (*mediapackagev2.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", arg0)
	ret0, _ := ret[0].(*mediapackagev2.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels
func (mr *MockMediaPackageV2APIMockRecorder) ListChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListChannels), arg0)
}

// ListChannelsPages mocks base method
func (m *MockMediaPackageV2API) ListChannelsPages(arg0 *mediapackagev2.ListChannelsInput, arg1 func(*mediapackagev2.ListChannelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPages indicates an expected call of ListChannelsPages
func (mr *MockMediaPackageV2APIMockRecorder) ListChannelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPages", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListChannelsPages), arg0, arg1)
}

// ListChannelsPagesWithContext mocks base method
func (m *MockMediaPackageV2API) ListChannelsPagesWithContext(arg0 context.Context, arg1 *mediapackagev2.ListChannelsInput, arg2 func(*mediapackagev2.ListChannelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPagesWithContext indicates an expected call of ListChannelsPagesWithContext
func (mr *MockMediaPackageV2APIMockRecorder) ListChannelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPagesWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListChannelsPagesWithContext), varargs...)
}

// ListChannelsRequest mocks base method
func (m *MockMediaPackageV2API) ListChannelsRequest(arg0 *mediapackagev2.ListChannelsInput) (*request.Request, *mediapackagev2.ListChannelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.ListChannelsOutput)
	return ret0, ret1
}

// ListChannelsRequest indicates an expected call of ListChannelsRequest
func (mr *MockMediaPackageV2APIMockRecorder) ListChannelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListChannelsRequest), arg0)
}

// ListChannelsWithContext mocks base method
func (m *MockMediaPackageV2API) ListChannelsWithContext(arg0 context.Context, arg1 *mediapackagev2.ListChannelsInput, arg2 ...request.Option) (*mediapackagev2.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelsWithContext indicates an expected call of ListChannelsWithContext
func (mr *MockMediaPackageV2APIMockRecorder) ListChannelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListChannelsWithContext), varargs...)
}

// ListOriginEndpoints mocks base method
func (m *MockMediaPackageV2API) ListOriginEndpoints(arg0 *mediapackagev2.ListOriginEndpointsInput) (*mediapackagev2.ListOriginEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginEndpoints", arg0)
	ret0, _ := ret[0].(*mediapackagev2.ListOriginEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginEndpoints indicates an expected call of ListOriginEndpoints
func (mr *MockMediaPackageV2APIMockRecorder) ListOriginEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginEndpoints", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListOriginEndpoints), arg0)
}

// ListOriginEndpointsPages mocks base method
func (m *MockMediaPackageV2API) ListOriginEndpointsPages(arg0 *mediapackagev2.ListOriginEndpointsInput, arg1 func(*mediapackagev2.ListOriginEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOriginEndpointsPages indicates an expected call of ListOriginEndpointsPages
func (mr *MockMediaPackageV2APIMockRecorder) ListOriginEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginEndpointsPages", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListOriginEndpointsPages), arg0, arg1)
}

// ListOriginEndpointsPagesWithContext mocks base method
func (m *MockMediaPackageV2API) ListOriginEndpointsPagesWithContext(arg0 context.Context, arg1 *mediapackagev2.ListOriginEndpointsInput, arg2 func(*mediapackagev2.ListOriginEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOriginEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOriginEndpointsPagesWithContext indicates an expected call of ListOriginEndpointsPagesWithContext
func (mr *MockMediaPackageV2APIMockRecorder) ListOriginEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginEndpointsPagesWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListOriginEndpointsPagesWithContext), varargs...)
}

// ListOriginEndpointsRequest mocks base method
func (m *MockMediaPackageV2API) ListOriginEndpointsRequest(arg0 *mediapackagev2.ListOriginEndpointsInput) (*request.Request, *mediapackagev2.ListOriginEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.ListOriginEndpointsOutput)
	return ret0, ret1
}

// ListOriginEndpointsRequest indicates an expected call of ListOriginEndpointsRequest
func (mr *MockMediaPackageV2APIMockRecorder) ListOriginEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginEndpointsRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListOriginEndpointsRequest), arg0)
}

// ListOriginEndpointsWithContext mocks base method
func (m *MockMediaPackageV2API) ListOriginEndpointsWithContext(arg0 context.Context, arg1 *mediapackagev2.ListOriginEndpointsInput, arg2 ...request.Option) (*mediapackagev2.ListOriginEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOriginEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.ListOriginEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginEndpointsWithContext indicates an expected call of ListOriginEndpointsWithContext
func (mr *MockMediaPackageV2APIMockRecorder) ListOriginEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginEndpointsWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListOriginEndpointsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockMediaPackageV2API) ListTagsForResource(arg0 *mediapackagev2.ListTagsForResourceInput) (*mediapackagev2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*mediapackagev2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockMediaPackageV2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockMediaPackageV2API) ListTagsForResourceRequest(arg0 *mediapackagev2.ListTagsForResourceInput) (*request.Request, *mediapackagev2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockMediaPackageV2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockMediaPackageV2API) ListTagsForResourceWithContext(arg0 context.Context, arg1 *mediapackagev2.ListTagsForResourceInput, arg2 ...request.Option) (*mediapackagev2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockMediaPackageV2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutChannelPolicy mocks base method
func (m *MockMediaPackageV2API) PutChannelPolicy(arg0 *mediapackagev2.PutChannelPolicyInput) (*mediapackagev2.PutChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutChannelPolicy", arg0)
	ret0, _ := ret[0].(*mediapackagev2.PutChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutChannelPolicy indicates an expected call of PutChannelPolicy
func (mr *MockMediaPackageV2APIMockRecorder) PutChannelPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutChannelPolicy", reflect.TypeOf((*MockMediaPackageV2API)(nil).PutChannelPolicy), arg0)
}

// PutChannelPolicyRequest mocks base method
func (m *MockMediaPackageV2API) PutChannelPolicyRequest(arg0 *mediapackagev2.PutChannelPolicyInput) (*request.Request, *mediapackagev2.PutChannelPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutChannelPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.PutChannelPolicyOutput)
	return ret0, ret1
}

// PutChannelPolicyRequest indicates an expected call of PutChannelPolicyRequest
func (mr *MockMediaPackageV2APIMockRecorder) PutChannelPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutChannelPolicyRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).PutChannelPolicyRequest), arg0)
}

// PutChannelPolicyWithContext mocks base method
func (m *MockMediaPackageV2API) PutChannelPolicyWithContext(arg0 context.Context, arg1 *mediapackagev2.PutChannelPolicyInput, arg2 ...request.Option) (*mediapackagev2.PutChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutChannelPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.PutChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutChannelPolicyWithContext indicates an expected call of PutChannelPolicyWithContext
func (mr *MockMediaPackageV2APIMockRecorder) PutChannelPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutChannelPolicyWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).PutChannelPolicyWithContext), varargs...)
}

// PutOriginEndpointPolicy mocks base method
func (m *MockMediaPackageV2API) PutOriginEndpointPolicy(arg0 *mediapackagev2.PutOriginEndpointPolicyInput) (*mediapackagev2.PutOriginEndpointPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOriginEndpointPolicy", arg0)
	ret0, _ := ret[0].(*mediapackagev2.PutOriginEndpointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutOriginEndpointPolicy indicates an expected call of PutOriginEndpointPolicy
func (mr *MockMediaPackageV2APIMockRecorder) PutOriginEndpointPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOriginEndpointPolicy", reflect.TypeOf((*MockMediaPackageV2API)(nil).PutOriginEndpointPolicy), arg0)
}

// PutOriginEndpointPolicyRequest mocks base method
func (m *MockMediaPackageV2API) PutOriginEndpointPolicyRequest(arg0 *mediapackagev2.PutOriginEndpointPolicyInput) (*request.Request, *mediapackagev2.PutOriginEndpointPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOriginEndpointPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.PutOriginEndpointPolicyOutput)
	return ret0, ret1
}

// PutOriginEndpointPolicyRequest indicates an expected call of PutOriginEndpointPolicyRequest
func (mr *MockMediaPackageV2APIMockRecorder) PutOriginEndpointPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOriginEndpointPolicyRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).PutOriginEndpointPolicyRequest), arg0)
}

// PutOriginEndpointPolicyWithContext mocks base method
func (m *MockMediaPackageV2API) PutOriginEndpointPolicyWithContext(arg0 context.Context, arg1 *mediapackagev2.PutOriginEndpointPolicyInput, arg2 ...request.Option) (*mediapackagev2.PutOriginEndpointPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutOriginEndpointPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.PutOriginEndpointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutOriginEndpointPolicyWithContext indicates an expected call of PutOriginEndpointPolicyWithContext
func (mr *MockMediaPackageV2APIMockRecorder) PutOriginEndpointPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOriginEndpointPolicyWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).PutOriginEndpointPolicyWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockMediaPackageV2API) TagResource(arg0 *mediapackagev2.TagResourceInput) (*mediapackagev2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*mediapackagev2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockMediaPackageV2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMediaPackageV2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockMediaPackageV2API) TagResourceRequest(arg0 *mediapackagev2.TagResourceInput) (*request.Request, *mediapackagev2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockMediaPackageV2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockMediaPackageV2API) TagResourceWithContext(arg0 context.Context, arg1 *mediapackagev2.TagResourceInput, arg2 ...request.Option) (*mediapackagev2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockMediaPackageV2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockMediaPackageV2API) UntagResource(arg0 *mediapackagev2.UntagResourceInput) (*mediapackagev2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*mediapackagev2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockMediaPackageV2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMediaPackageV2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockMediaPackageV2API) UntagResourceRequest(arg0 *mediapackagev2.UntagResourceInput) (*request.Request, *mediapackagev2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockMediaPackageV2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockMediaPackageV2API) UntagResourceWithContext(arg0 context.Context, arg1 *mediapackagev2.UntagResourceInput, arg2 ...request.Option) (*mediapackagev2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockMediaPackageV2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateChannel mocks base method
func (m *MockMediaPackageV2API) UpdateChannel(arg0 *mediapackagev2.UpdateChannelInput) (*mediapackagev2.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0)
	ret0, _ := ret[0].(*mediapackagev2.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel
func (mr *MockMediaPackageV2APIMockRecorder) UpdateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockMediaPackageV2API)(nil).UpdateChannel), arg0)
}

// UpdateChannelGroup mocks base method
func (m *MockMediaPackageV2API) UpdateChannelGroup(arg0 *mediapackagev2.UpdateChannelGroupInput) (*mediapackagev2.UpdateChannelGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelGroup", arg0)
	ret0, _ := ret[0].(*mediapackagev2.UpdateChannelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelGroup indicates an expected call of UpdateChannelGroup
func (mr *MockMediaPackageV2APIMockRecorder) UpdateChannelGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelGroup", reflect.TypeOf((*MockMediaPackageV2API)(nil).UpdateChannelGroup), arg0)
}

// UpdateChannelGroupRequest mocks base method
func (m *MockMediaPackageV2API) UpdateChannelGroupRequest(arg0 *mediapackagev2.UpdateChannelGroupInput) (*request.Request, *mediapackagev2.UpdateChannelGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.UpdateChannelGroupOutput)
	return ret0, ret1
}

// UpdateChannelGroupRequest indicates an expected call of UpdateChannelGroupRequest
func (mr *MockMediaPackageV2APIMockRecorder) UpdateChannelGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelGroupRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).UpdateChannelGroupRequest), arg0)
}

// UpdateChannelGroupWithContext mocks base method
func (m *MockMediaPackageV2API) UpdateChannelGroupWithContext(arg0 context.Context, arg1 *mediapackagev2.UpdateChannelGroupInput, arg2 ...request.Option) (*mediapackagev2.UpdateChannelGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChannelGroupWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.UpdateChannelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelGroupWithContext indicates an expected call of UpdateChannelGroupWithContext
func (mr *MockMediaPackageV2APIMockRecorder) UpdateChannelGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelGroupWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).UpdateChannelGroupWithContext), varargs...)
}

// UpdateChannelRequest mocks base method
func (m *MockMediaPackageV2API) UpdateChannelRequest(arg0 *mediapackagev2.UpdateChannelInput) (*request.Request, *mediapackagev2.UpdateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.UpdateChannelOutput)
	return ret0, ret1
}

// UpdateChannelRequest indicates an expected call of UpdateChannelRequest
func (mr *MockMediaPackageV2APIMockRecorder) UpdateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).UpdateChannelRequest), arg0)
}

// UpdateChannelWithContext mocks base method
func (m *MockMediaPackageV2API) UpdateChannelWithContext(arg0 context.Context, arg1 *mediapackagev2.UpdateChannelInput, arg2 ...request.Option) (*mediapackagev2.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelWithContext indicates an expected call of UpdateChannelWithContext
func (mr *MockMediaPackageV2APIMockRecorder) UpdateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).UpdateChannelWithContext), varargs...)
}

// UpdateOriginEndpoint mocks base method
func (m *MockMediaPackageV2API) UpdateOriginEndpoint(arg0 *mediapackagev2.UpdateOriginEndpointInput) (*mediapackagev2.UpdateOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOriginEndpoint", arg0)
	ret0, _ := ret[0].(*mediapackagev2.UpdateOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOriginEndpoint indicates an expected call of UpdateOriginEndpoint
func (mr *MockMediaPackageV2APIMockRecorder) UpdateOriginEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOriginEndpoint", reflect.TypeOf((*MockMediaPackageV2API)(nil).UpdateOriginEndpoint), arg0)
}

// UpdateOriginEndpointRequest mocks base method
func (m *MockMediaPackageV2API) UpdateOriginEndpointRequest(arg0 *mediapackagev2.UpdateOriginEndpointInput) (*request.Request, *mediapackagev2.UpdateOriginEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOriginEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackagev2.UpdateOriginEndpointOutput)
	return ret0, ret1
}

// UpdateOriginEndpointRequest indicates an expected call of UpdateOriginEndpointRequest
func (mr *MockMediaPackageV2APIMockRecorder) UpdateOriginEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOriginEndpointRequest", reflect.TypeOf((*MockMediaPackageV2API)(nil).UpdateOriginEndpointRequest), arg0)
}

// UpdateOriginEndpointWithContext mocks base method
func (m *MockMediaPackageV2API) UpdateOriginEndpointWithContext(arg0 context.Context, arg1 *mediapackagev2.UpdateOriginEndpointInput, arg2 ...request.Option) (*mediapackagev2.UpdateOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOriginEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackagev2.UpdateOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOriginEndpointWithContext indicates an expected call of UpdateOriginEndpointWithContext
func (mr *MockMediaPackageV2APIMockRecorder) UpdateOriginEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOriginEndpointWithContext", reflect.TypeOf((*MockMediaPackageV2API)(nil).UpdateOriginEndpointWithContext), varargs...)
}
