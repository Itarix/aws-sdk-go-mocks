// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/amplify/amplifyiface (interfaces: AmplifyAPI)

// Package amplifymock is a generated GoMock package.
package amplifymock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	amplify "github.com/aws/aws-sdk-go/service/amplify"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAmplifyAPI is a mock of AmplifyAPI interface
type MockAmplifyAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAmplifyAPIMockRecorder
}

// MockAmplifyAPIMockRecorder is the mock recorder for MockAmplifyAPI
type MockAmplifyAPIMockRecorder struct {
	mock *MockAmplifyAPI
}

// NewMockAmplifyAPI creates a new mock instance
func NewMockAmplifyAPI(ctrl *gomock.Controller) *MockAmplifyAPI {
	mock := &MockAmplifyAPI{ctrl: ctrl}
	mock.recorder = &MockAmplifyAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAmplifyAPI) EXPECT() *MockAmplifyAPIMockRecorder {
	return m.recorder
}

// CreateApp mocks base method
func (m *MockAmplifyAPI) CreateApp(arg0 *amplify.CreateAppInput) (*amplify.CreateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", arg0)
	ret0, _ := ret[0].(*amplify.CreateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp
func (mr *MockAmplifyAPIMockRecorder) CreateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateApp), arg0)
}

// CreateAppRequest mocks base method
func (m *MockAmplifyAPI) CreateAppRequest(arg0 *amplify.CreateAppInput) (*request.Request, *amplify.CreateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.CreateAppOutput)
	return ret0, ret1
}

// CreateAppRequest indicates an expected call of CreateAppRequest
func (mr *MockAmplifyAPIMockRecorder) CreateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateAppRequest), arg0)
}

// CreateAppWithContext mocks base method
func (m *MockAmplifyAPI) CreateAppWithContext(arg0 aws.Context, arg1 *amplify.CreateAppInput, arg2 ...request.Option) (*amplify.CreateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.CreateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppWithContext indicates an expected call of CreateAppWithContext
func (mr *MockAmplifyAPIMockRecorder) CreateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateAppWithContext), varargs...)
}

// CreateBranch mocks base method
func (m *MockAmplifyAPI) CreateBranch(arg0 *amplify.CreateBranchInput) (*amplify.CreateBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0)
	ret0, _ := ret[0].(*amplify.CreateBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch
func (mr *MockAmplifyAPIMockRecorder) CreateBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateBranch), arg0)
}

// CreateBranchRequest mocks base method
func (m *MockAmplifyAPI) CreateBranchRequest(arg0 *amplify.CreateBranchInput) (*request.Request, *amplify.CreateBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.CreateBranchOutput)
	return ret0, ret1
}

// CreateBranchRequest indicates an expected call of CreateBranchRequest
func (mr *MockAmplifyAPIMockRecorder) CreateBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranchRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateBranchRequest), arg0)
}

// CreateBranchWithContext mocks base method
func (m *MockAmplifyAPI) CreateBranchWithContext(arg0 aws.Context, arg1 *amplify.CreateBranchInput, arg2 ...request.Option) (*amplify.CreateBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBranchWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.CreateBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranchWithContext indicates an expected call of CreateBranchWithContext
func (mr *MockAmplifyAPIMockRecorder) CreateBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranchWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateBranchWithContext), varargs...)
}

// CreateDomainAssociation mocks base method
func (m *MockAmplifyAPI) CreateDomainAssociation(arg0 *amplify.CreateDomainAssociationInput) (*amplify.CreateDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainAssociation", arg0)
	ret0, _ := ret[0].(*amplify.CreateDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainAssociation indicates an expected call of CreateDomainAssociation
func (mr *MockAmplifyAPIMockRecorder) CreateDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainAssociation", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateDomainAssociation), arg0)
}

// CreateDomainAssociationRequest mocks base method
func (m *MockAmplifyAPI) CreateDomainAssociationRequest(arg0 *amplify.CreateDomainAssociationInput) (*request.Request, *amplify.CreateDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.CreateDomainAssociationOutput)
	return ret0, ret1
}

// CreateDomainAssociationRequest indicates an expected call of CreateDomainAssociationRequest
func (mr *MockAmplifyAPIMockRecorder) CreateDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainAssociationRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateDomainAssociationRequest), arg0)
}

// CreateDomainAssociationWithContext mocks base method
func (m *MockAmplifyAPI) CreateDomainAssociationWithContext(arg0 aws.Context, arg1 *amplify.CreateDomainAssociationInput, arg2 ...request.Option) (*amplify.CreateDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.CreateDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainAssociationWithContext indicates an expected call of CreateDomainAssociationWithContext
func (mr *MockAmplifyAPIMockRecorder) CreateDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainAssociationWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateDomainAssociationWithContext), varargs...)
}

// DeleteApp mocks base method
func (m *MockAmplifyAPI) DeleteApp(arg0 *amplify.DeleteAppInput) (*amplify.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", arg0)
	ret0, _ := ret[0].(*amplify.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockAmplifyAPIMockRecorder) DeleteApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteApp), arg0)
}

// DeleteAppRequest mocks base method
func (m *MockAmplifyAPI) DeleteAppRequest(arg0 *amplify.DeleteAppInput) (*request.Request, *amplify.DeleteAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.DeleteAppOutput)
	return ret0, ret1
}

// DeleteAppRequest indicates an expected call of DeleteAppRequest
func (mr *MockAmplifyAPIMockRecorder) DeleteAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteAppRequest), arg0)
}

// DeleteAppWithContext mocks base method
func (m *MockAmplifyAPI) DeleteAppWithContext(arg0 aws.Context, arg1 *amplify.DeleteAppInput, arg2 ...request.Option) (*amplify.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppWithContext indicates an expected call of DeleteAppWithContext
func (mr *MockAmplifyAPIMockRecorder) DeleteAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteAppWithContext), varargs...)
}

// DeleteBranch mocks base method
func (m *MockAmplifyAPI) DeleteBranch(arg0 *amplify.DeleteBranchInput) (*amplify.DeleteBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", arg0)
	ret0, _ := ret[0].(*amplify.DeleteBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranch indicates an expected call of DeleteBranch
func (mr *MockAmplifyAPIMockRecorder) DeleteBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteBranch), arg0)
}

// DeleteBranchRequest mocks base method
func (m *MockAmplifyAPI) DeleteBranchRequest(arg0 *amplify.DeleteBranchInput) (*request.Request, *amplify.DeleteBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.DeleteBranchOutput)
	return ret0, ret1
}

// DeleteBranchRequest indicates an expected call of DeleteBranchRequest
func (mr *MockAmplifyAPIMockRecorder) DeleteBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranchRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteBranchRequest), arg0)
}

// DeleteBranchWithContext mocks base method
func (m *MockAmplifyAPI) DeleteBranchWithContext(arg0 aws.Context, arg1 *amplify.DeleteBranchInput, arg2 ...request.Option) (*amplify.DeleteBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBranchWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.DeleteBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranchWithContext indicates an expected call of DeleteBranchWithContext
func (mr *MockAmplifyAPIMockRecorder) DeleteBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranchWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteBranchWithContext), varargs...)
}

// DeleteDomainAssociation mocks base method
func (m *MockAmplifyAPI) DeleteDomainAssociation(arg0 *amplify.DeleteDomainAssociationInput) (*amplify.DeleteDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainAssociation", arg0)
	ret0, _ := ret[0].(*amplify.DeleteDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainAssociation indicates an expected call of DeleteDomainAssociation
func (mr *MockAmplifyAPIMockRecorder) DeleteDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainAssociation", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteDomainAssociation), arg0)
}

// DeleteDomainAssociationRequest mocks base method
func (m *MockAmplifyAPI) DeleteDomainAssociationRequest(arg0 *amplify.DeleteDomainAssociationInput) (*request.Request, *amplify.DeleteDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.DeleteDomainAssociationOutput)
	return ret0, ret1
}

// DeleteDomainAssociationRequest indicates an expected call of DeleteDomainAssociationRequest
func (mr *MockAmplifyAPIMockRecorder) DeleteDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainAssociationRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteDomainAssociationRequest), arg0)
}

// DeleteDomainAssociationWithContext mocks base method
func (m *MockAmplifyAPI) DeleteDomainAssociationWithContext(arg0 aws.Context, arg1 *amplify.DeleteDomainAssociationInput, arg2 ...request.Option) (*amplify.DeleteDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.DeleteDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainAssociationWithContext indicates an expected call of DeleteDomainAssociationWithContext
func (mr *MockAmplifyAPIMockRecorder) DeleteDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainAssociationWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteDomainAssociationWithContext), varargs...)
}

// DeleteJob mocks base method
func (m *MockAmplifyAPI) DeleteJob(arg0 *amplify.DeleteJobInput) (*amplify.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(*amplify.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob
func (mr *MockAmplifyAPIMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteJob), arg0)
}

// DeleteJobRequest mocks base method
func (m *MockAmplifyAPI) DeleteJobRequest(arg0 *amplify.DeleteJobInput) (*request.Request, *amplify.DeleteJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.DeleteJobOutput)
	return ret0, ret1
}

// DeleteJobRequest indicates an expected call of DeleteJobRequest
func (mr *MockAmplifyAPIMockRecorder) DeleteJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteJobRequest), arg0)
}

// DeleteJobWithContext mocks base method
func (m *MockAmplifyAPI) DeleteJobWithContext(arg0 aws.Context, arg1 *amplify.DeleteJobInput, arg2 ...request.Option) (*amplify.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobWithContext indicates an expected call of DeleteJobWithContext
func (mr *MockAmplifyAPIMockRecorder) DeleteJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteJobWithContext), varargs...)
}

// GetApp mocks base method
func (m *MockAmplifyAPI) GetApp(arg0 *amplify.GetAppInput) (*amplify.GetAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", arg0)
	ret0, _ := ret[0].(*amplify.GetAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp
func (mr *MockAmplifyAPIMockRecorder) GetApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockAmplifyAPI)(nil).GetApp), arg0)
}

// GetAppRequest mocks base method
func (m *MockAmplifyAPI) GetAppRequest(arg0 *amplify.GetAppInput) (*request.Request, *amplify.GetAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetAppOutput)
	return ret0, ret1
}

// GetAppRequest indicates an expected call of GetAppRequest
func (mr *MockAmplifyAPIMockRecorder) GetAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetAppRequest), arg0)
}

// GetAppWithContext mocks base method
func (m *MockAmplifyAPI) GetAppWithContext(arg0 aws.Context, arg1 *amplify.GetAppInput, arg2 ...request.Option) (*amplify.GetAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppWithContext indicates an expected call of GetAppWithContext
func (mr *MockAmplifyAPIMockRecorder) GetAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetAppWithContext), varargs...)
}

// GetBranch mocks base method
func (m *MockAmplifyAPI) GetBranch(arg0 *amplify.GetBranchInput) (*amplify.GetBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", arg0)
	ret0, _ := ret[0].(*amplify.GetBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch
func (mr *MockAmplifyAPIMockRecorder) GetBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockAmplifyAPI)(nil).GetBranch), arg0)
}

// GetBranchRequest mocks base method
func (m *MockAmplifyAPI) GetBranchRequest(arg0 *amplify.GetBranchInput) (*request.Request, *amplify.GetBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetBranchOutput)
	return ret0, ret1
}

// GetBranchRequest indicates an expected call of GetBranchRequest
func (mr *MockAmplifyAPIMockRecorder) GetBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetBranchRequest), arg0)
}

// GetBranchWithContext mocks base method
func (m *MockAmplifyAPI) GetBranchWithContext(arg0 aws.Context, arg1 *amplify.GetBranchInput, arg2 ...request.Option) (*amplify.GetBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBranchWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchWithContext indicates an expected call of GetBranchWithContext
func (mr *MockAmplifyAPIMockRecorder) GetBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetBranchWithContext), varargs...)
}

// GetDomainAssociation mocks base method
func (m *MockAmplifyAPI) GetDomainAssociation(arg0 *amplify.GetDomainAssociationInput) (*amplify.GetDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainAssociation", arg0)
	ret0, _ := ret[0].(*amplify.GetDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainAssociation indicates an expected call of GetDomainAssociation
func (mr *MockAmplifyAPIMockRecorder) GetDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainAssociation", reflect.TypeOf((*MockAmplifyAPI)(nil).GetDomainAssociation), arg0)
}

// GetDomainAssociationRequest mocks base method
func (m *MockAmplifyAPI) GetDomainAssociationRequest(arg0 *amplify.GetDomainAssociationInput) (*request.Request, *amplify.GetDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetDomainAssociationOutput)
	return ret0, ret1
}

// GetDomainAssociationRequest indicates an expected call of GetDomainAssociationRequest
func (mr *MockAmplifyAPIMockRecorder) GetDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainAssociationRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetDomainAssociationRequest), arg0)
}

// GetDomainAssociationWithContext mocks base method
func (m *MockAmplifyAPI) GetDomainAssociationWithContext(arg0 aws.Context, arg1 *amplify.GetDomainAssociationInput, arg2 ...request.Option) (*amplify.GetDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainAssociationWithContext indicates an expected call of GetDomainAssociationWithContext
func (mr *MockAmplifyAPIMockRecorder) GetDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainAssociationWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetDomainAssociationWithContext), varargs...)
}

// GetJob mocks base method
func (m *MockAmplifyAPI) GetJob(arg0 *amplify.GetJobInput) (*amplify.GetJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*amplify.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob
func (mr *MockAmplifyAPIMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockAmplifyAPI)(nil).GetJob), arg0)
}

// GetJobRequest mocks base method
func (m *MockAmplifyAPI) GetJobRequest(arg0 *amplify.GetJobInput) (*request.Request, *amplify.GetJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetJobOutput)
	return ret0, ret1
}

// GetJobRequest indicates an expected call of GetJobRequest
func (mr *MockAmplifyAPIMockRecorder) GetJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetJobRequest), arg0)
}

// GetJobWithContext mocks base method
func (m *MockAmplifyAPI) GetJobWithContext(arg0 aws.Context, arg1 *amplify.GetJobInput, arg2 ...request.Option) (*amplify.GetJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobWithContext indicates an expected call of GetJobWithContext
func (mr *MockAmplifyAPIMockRecorder) GetJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetJobWithContext), varargs...)
}

// ListApps mocks base method
func (m *MockAmplifyAPI) ListApps(arg0 *amplify.ListAppsInput) (*amplify.ListAppsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", arg0)
	ret0, _ := ret[0].(*amplify.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApps indicates an expected call of ListApps
func (mr *MockAmplifyAPIMockRecorder) ListApps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockAmplifyAPI)(nil).ListApps), arg0)
}

// ListAppsRequest mocks base method
func (m *MockAmplifyAPI) ListAppsRequest(arg0 *amplify.ListAppsInput) (*request.Request, *amplify.ListAppsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListAppsOutput)
	return ret0, ret1
}

// ListAppsRequest indicates an expected call of ListAppsRequest
func (mr *MockAmplifyAPIMockRecorder) ListAppsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListAppsRequest), arg0)
}

// ListAppsWithContext mocks base method
func (m *MockAmplifyAPI) ListAppsWithContext(arg0 aws.Context, arg1 *amplify.ListAppsInput, arg2 ...request.Option) (*amplify.ListAppsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppsWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppsWithContext indicates an expected call of ListAppsWithContext
func (mr *MockAmplifyAPIMockRecorder) ListAppsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListAppsWithContext), varargs...)
}

// ListBranches mocks base method
func (m *MockAmplifyAPI) ListBranches(arg0 *amplify.ListBranchesInput) (*amplify.ListBranchesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", arg0)
	ret0, _ := ret[0].(*amplify.ListBranchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches
func (mr *MockAmplifyAPIMockRecorder) ListBranches(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockAmplifyAPI)(nil).ListBranches), arg0)
}

// ListBranchesRequest mocks base method
func (m *MockAmplifyAPI) ListBranchesRequest(arg0 *amplify.ListBranchesInput) (*request.Request, *amplify.ListBranchesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranchesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListBranchesOutput)
	return ret0, ret1
}

// ListBranchesRequest indicates an expected call of ListBranchesRequest
func (mr *MockAmplifyAPIMockRecorder) ListBranchesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListBranchesRequest), arg0)
}

// ListBranchesWithContext mocks base method
func (m *MockAmplifyAPI) ListBranchesWithContext(arg0 aws.Context, arg1 *amplify.ListBranchesInput, arg2 ...request.Option) (*amplify.ListBranchesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBranchesWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListBranchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranchesWithContext indicates an expected call of ListBranchesWithContext
func (mr *MockAmplifyAPIMockRecorder) ListBranchesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListBranchesWithContext), varargs...)
}

// ListDomainAssociations mocks base method
func (m *MockAmplifyAPI) ListDomainAssociations(arg0 *amplify.ListDomainAssociationsInput) (*amplify.ListDomainAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainAssociations", arg0)
	ret0, _ := ret[0].(*amplify.ListDomainAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainAssociations indicates an expected call of ListDomainAssociations
func (mr *MockAmplifyAPIMockRecorder) ListDomainAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainAssociations", reflect.TypeOf((*MockAmplifyAPI)(nil).ListDomainAssociations), arg0)
}

// ListDomainAssociationsRequest mocks base method
func (m *MockAmplifyAPI) ListDomainAssociationsRequest(arg0 *amplify.ListDomainAssociationsInput) (*request.Request, *amplify.ListDomainAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListDomainAssociationsOutput)
	return ret0, ret1
}

// ListDomainAssociationsRequest indicates an expected call of ListDomainAssociationsRequest
func (mr *MockAmplifyAPIMockRecorder) ListDomainAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainAssociationsRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListDomainAssociationsRequest), arg0)
}

// ListDomainAssociationsWithContext mocks base method
func (m *MockAmplifyAPI) ListDomainAssociationsWithContext(arg0 aws.Context, arg1 *amplify.ListDomainAssociationsInput, arg2 ...request.Option) (*amplify.ListDomainAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListDomainAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainAssociationsWithContext indicates an expected call of ListDomainAssociationsWithContext
func (mr *MockAmplifyAPIMockRecorder) ListDomainAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainAssociationsWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListDomainAssociationsWithContext), varargs...)
}

// ListJobs mocks base method
func (m *MockAmplifyAPI) ListJobs(arg0 *amplify.ListJobsInput) (*amplify.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*amplify.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs
func (mr *MockAmplifyAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockAmplifyAPI)(nil).ListJobs), arg0)
}

// ListJobsRequest mocks base method
func (m *MockAmplifyAPI) ListJobsRequest(arg0 *amplify.ListJobsInput) (*request.Request, *amplify.ListJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest
func (mr *MockAmplifyAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method
func (m *MockAmplifyAPI) ListJobsWithContext(arg0 aws.Context, arg1 *amplify.ListJobsInput, arg2 ...request.Option) (*amplify.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext
func (mr *MockAmplifyAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListJobsWithContext), varargs...)
}

// StartJob mocks base method
func (m *MockAmplifyAPI) StartJob(arg0 *amplify.StartJobInput) (*amplify.StartJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob", arg0)
	ret0, _ := ret[0].(*amplify.StartJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob indicates an expected call of StartJob
func (mr *MockAmplifyAPIMockRecorder) StartJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockAmplifyAPI)(nil).StartJob), arg0)
}

// StartJobRequest mocks base method
func (m *MockAmplifyAPI) StartJobRequest(arg0 *amplify.StartJobInput) (*request.Request, *amplify.StartJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.StartJobOutput)
	return ret0, ret1
}

// StartJobRequest indicates an expected call of StartJobRequest
func (mr *MockAmplifyAPIMockRecorder) StartJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).StartJobRequest), arg0)
}

// StartJobWithContext mocks base method
func (m *MockAmplifyAPI) StartJobWithContext(arg0 aws.Context, arg1 *amplify.StartJobInput, arg2 ...request.Option) (*amplify.StartJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJobWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.StartJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobWithContext indicates an expected call of StartJobWithContext
func (mr *MockAmplifyAPIMockRecorder) StartJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).StartJobWithContext), varargs...)
}

// StopJob mocks base method
func (m *MockAmplifyAPI) StopJob(arg0 *amplify.StopJobInput) (*amplify.StopJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopJob", arg0)
	ret0, _ := ret[0].(*amplify.StopJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopJob indicates an expected call of StopJob
func (mr *MockAmplifyAPIMockRecorder) StopJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJob", reflect.TypeOf((*MockAmplifyAPI)(nil).StopJob), arg0)
}

// StopJobRequest mocks base method
func (m *MockAmplifyAPI) StopJobRequest(arg0 *amplify.StopJobInput) (*request.Request, *amplify.StopJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.StopJobOutput)
	return ret0, ret1
}

// StopJobRequest indicates an expected call of StopJobRequest
func (mr *MockAmplifyAPIMockRecorder) StopJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJobRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).StopJobRequest), arg0)
}

// StopJobWithContext mocks base method
func (m *MockAmplifyAPI) StopJobWithContext(arg0 aws.Context, arg1 *amplify.StopJobInput, arg2 ...request.Option) (*amplify.StopJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopJobWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.StopJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopJobWithContext indicates an expected call of StopJobWithContext
func (mr *MockAmplifyAPIMockRecorder) StopJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJobWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).StopJobWithContext), varargs...)
}

// UpdateApp mocks base method
func (m *MockAmplifyAPI) UpdateApp(arg0 *amplify.UpdateAppInput) (*amplify.UpdateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", arg0)
	ret0, _ := ret[0].(*amplify.UpdateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp
func (mr *MockAmplifyAPIMockRecorder) UpdateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateApp), arg0)
}

// UpdateAppRequest mocks base method
func (m *MockAmplifyAPI) UpdateAppRequest(arg0 *amplify.UpdateAppInput) (*request.Request, *amplify.UpdateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.UpdateAppOutput)
	return ret0, ret1
}

// UpdateAppRequest indicates an expected call of UpdateAppRequest
func (mr *MockAmplifyAPIMockRecorder) UpdateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateAppRequest), arg0)
}

// UpdateAppWithContext mocks base method
func (m *MockAmplifyAPI) UpdateAppWithContext(arg0 aws.Context, arg1 *amplify.UpdateAppInput, arg2 ...request.Option) (*amplify.UpdateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.UpdateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppWithContext indicates an expected call of UpdateAppWithContext
func (mr *MockAmplifyAPIMockRecorder) UpdateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateAppWithContext), varargs...)
}

// UpdateBranch mocks base method
func (m *MockAmplifyAPI) UpdateBranch(arg0 *amplify.UpdateBranchInput) (*amplify.UpdateBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranch", arg0)
	ret0, _ := ret[0].(*amplify.UpdateBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBranch indicates an expected call of UpdateBranch
func (mr *MockAmplifyAPIMockRecorder) UpdateBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranch", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateBranch), arg0)
}

// UpdateBranchRequest mocks base method
func (m *MockAmplifyAPI) UpdateBranchRequest(arg0 *amplify.UpdateBranchInput) (*request.Request, *amplify.UpdateBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.UpdateBranchOutput)
	return ret0, ret1
}

// UpdateBranchRequest indicates an expected call of UpdateBranchRequest
func (mr *MockAmplifyAPIMockRecorder) UpdateBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateBranchRequest), arg0)
}

// UpdateBranchWithContext mocks base method
func (m *MockAmplifyAPI) UpdateBranchWithContext(arg0 aws.Context, arg1 *amplify.UpdateBranchInput, arg2 ...request.Option) (*amplify.UpdateBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBranchWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.UpdateBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBranchWithContext indicates an expected call of UpdateBranchWithContext
func (mr *MockAmplifyAPIMockRecorder) UpdateBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateBranchWithContext), varargs...)
}

// UpdateDomainAssociation mocks base method
func (m *MockAmplifyAPI) UpdateDomainAssociation(arg0 *amplify.UpdateDomainAssociationInput) (*amplify.UpdateDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainAssociation", arg0)
	ret0, _ := ret[0].(*amplify.UpdateDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainAssociation indicates an expected call of UpdateDomainAssociation
func (mr *MockAmplifyAPIMockRecorder) UpdateDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainAssociation", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateDomainAssociation), arg0)
}

// UpdateDomainAssociationRequest mocks base method
func (m *MockAmplifyAPI) UpdateDomainAssociationRequest(arg0 *amplify.UpdateDomainAssociationInput) (*request.Request, *amplify.UpdateDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.UpdateDomainAssociationOutput)
	return ret0, ret1
}

// UpdateDomainAssociationRequest indicates an expected call of UpdateDomainAssociationRequest
func (mr *MockAmplifyAPIMockRecorder) UpdateDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainAssociationRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateDomainAssociationRequest), arg0)
}

// UpdateDomainAssociationWithContext mocks base method
func (m *MockAmplifyAPI) UpdateDomainAssociationWithContext(arg0 aws.Context, arg1 *amplify.UpdateDomainAssociationInput, arg2 ...request.Option) (*amplify.UpdateDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.UpdateDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainAssociationWithContext indicates an expected call of UpdateDomainAssociationWithContext
func (mr *MockAmplifyAPIMockRecorder) UpdateDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainAssociationWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateDomainAssociationWithContext), varargs...)
}
