// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/applicationsignals/applicationsignalsiface (interfaces: ApplicationSignalsAPI)

// Package applicationsignalsmock is a generated GoMock package.
package applicationsignalsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	applicationsignals "github.com/aws/aws-sdk-go/service/applicationsignals"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockApplicationSignalsAPI is a mock of ApplicationSignalsAPI interface
type MockApplicationSignalsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationSignalsAPIMockRecorder
}

// MockApplicationSignalsAPIMockRecorder is the mock recorder for MockApplicationSignalsAPI
type MockApplicationSignalsAPIMockRecorder struct {
	mock *MockApplicationSignalsAPI
}

// NewMockApplicationSignalsAPI creates a new mock instance
func NewMockApplicationSignalsAPI(ctrl *gomock.Controller) *MockApplicationSignalsAPI {
	mock := &MockApplicationSignalsAPI{ctrl: ctrl}
	mock.recorder = &MockApplicationSignalsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationSignalsAPI) EXPECT() *MockApplicationSignalsAPIMockRecorder {
	return m.recorder
}

// BatchGetServiceLevelObjectiveBudgetReport mocks base method
func (m *MockApplicationSignalsAPI) BatchGetServiceLevelObjectiveBudgetReport(arg0 *applicationsignals.BatchGetServiceLevelObjectiveBudgetReportInput) (*applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetServiceLevelObjectiveBudgetReport", arg0)
	ret0, _ := ret[0].(*applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetServiceLevelObjectiveBudgetReport indicates an expected call of BatchGetServiceLevelObjectiveBudgetReport
func (mr *MockApplicationSignalsAPIMockRecorder) BatchGetServiceLevelObjectiveBudgetReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetServiceLevelObjectiveBudgetReport", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).BatchGetServiceLevelObjectiveBudgetReport), arg0)
}

// BatchGetServiceLevelObjectiveBudgetReportRequest mocks base method
func (m *MockApplicationSignalsAPI) BatchGetServiceLevelObjectiveBudgetReportRequest(arg0 *applicationsignals.BatchGetServiceLevelObjectiveBudgetReportInput) (*request.Request, *applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetServiceLevelObjectiveBudgetReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput)
	return ret0, ret1
}

// BatchGetServiceLevelObjectiveBudgetReportRequest indicates an expected call of BatchGetServiceLevelObjectiveBudgetReportRequest
func (mr *MockApplicationSignalsAPIMockRecorder) BatchGetServiceLevelObjectiveBudgetReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetServiceLevelObjectiveBudgetReportRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).BatchGetServiceLevelObjectiveBudgetReportRequest), arg0)
}

// BatchGetServiceLevelObjectiveBudgetReportWithContext mocks base method
func (m *MockApplicationSignalsAPI) BatchGetServiceLevelObjectiveBudgetReportWithContext(arg0 context.Context, arg1 *applicationsignals.BatchGetServiceLevelObjectiveBudgetReportInput, arg2 ...request.Option) (*applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetServiceLevelObjectiveBudgetReportWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetServiceLevelObjectiveBudgetReportWithContext indicates an expected call of BatchGetServiceLevelObjectiveBudgetReportWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) BatchGetServiceLevelObjectiveBudgetReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetServiceLevelObjectiveBudgetReportWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).BatchGetServiceLevelObjectiveBudgetReportWithContext), varargs...)
}

// CreateServiceLevelObjective mocks base method
func (m *MockApplicationSignalsAPI) CreateServiceLevelObjective(arg0 *applicationsignals.CreateServiceLevelObjectiveInput) (*applicationsignals.CreateServiceLevelObjectiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceLevelObjective", arg0)
	ret0, _ := ret[0].(*applicationsignals.CreateServiceLevelObjectiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceLevelObjective indicates an expected call of CreateServiceLevelObjective
func (mr *MockApplicationSignalsAPIMockRecorder) CreateServiceLevelObjective(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceLevelObjective", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).CreateServiceLevelObjective), arg0)
}

// CreateServiceLevelObjectiveRequest mocks base method
func (m *MockApplicationSignalsAPI) CreateServiceLevelObjectiveRequest(arg0 *applicationsignals.CreateServiceLevelObjectiveInput) (*request.Request, *applicationsignals.CreateServiceLevelObjectiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceLevelObjectiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.CreateServiceLevelObjectiveOutput)
	return ret0, ret1
}

// CreateServiceLevelObjectiveRequest indicates an expected call of CreateServiceLevelObjectiveRequest
func (mr *MockApplicationSignalsAPIMockRecorder) CreateServiceLevelObjectiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceLevelObjectiveRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).CreateServiceLevelObjectiveRequest), arg0)
}

// CreateServiceLevelObjectiveWithContext mocks base method
func (m *MockApplicationSignalsAPI) CreateServiceLevelObjectiveWithContext(arg0 context.Context, arg1 *applicationsignals.CreateServiceLevelObjectiveInput, arg2 ...request.Option) (*applicationsignals.CreateServiceLevelObjectiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceLevelObjectiveWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.CreateServiceLevelObjectiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceLevelObjectiveWithContext indicates an expected call of CreateServiceLevelObjectiveWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) CreateServiceLevelObjectiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceLevelObjectiveWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).CreateServiceLevelObjectiveWithContext), varargs...)
}

// DeleteServiceLevelObjective mocks base method
func (m *MockApplicationSignalsAPI) DeleteServiceLevelObjective(arg0 *applicationsignals.DeleteServiceLevelObjectiveInput) (*applicationsignals.DeleteServiceLevelObjectiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceLevelObjective", arg0)
	ret0, _ := ret[0].(*applicationsignals.DeleteServiceLevelObjectiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceLevelObjective indicates an expected call of DeleteServiceLevelObjective
func (mr *MockApplicationSignalsAPIMockRecorder) DeleteServiceLevelObjective(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceLevelObjective", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).DeleteServiceLevelObjective), arg0)
}

// DeleteServiceLevelObjectiveRequest mocks base method
func (m *MockApplicationSignalsAPI) DeleteServiceLevelObjectiveRequest(arg0 *applicationsignals.DeleteServiceLevelObjectiveInput) (*request.Request, *applicationsignals.DeleteServiceLevelObjectiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceLevelObjectiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.DeleteServiceLevelObjectiveOutput)
	return ret0, ret1
}

// DeleteServiceLevelObjectiveRequest indicates an expected call of DeleteServiceLevelObjectiveRequest
func (mr *MockApplicationSignalsAPIMockRecorder) DeleteServiceLevelObjectiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceLevelObjectiveRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).DeleteServiceLevelObjectiveRequest), arg0)
}

// DeleteServiceLevelObjectiveWithContext mocks base method
func (m *MockApplicationSignalsAPI) DeleteServiceLevelObjectiveWithContext(arg0 context.Context, arg1 *applicationsignals.DeleteServiceLevelObjectiveInput, arg2 ...request.Option) (*applicationsignals.DeleteServiceLevelObjectiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceLevelObjectiveWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.DeleteServiceLevelObjectiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceLevelObjectiveWithContext indicates an expected call of DeleteServiceLevelObjectiveWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) DeleteServiceLevelObjectiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceLevelObjectiveWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).DeleteServiceLevelObjectiveWithContext), varargs...)
}

// GetService mocks base method
func (m *MockApplicationSignalsAPI) GetService(arg0 *applicationsignals.GetServiceInput) (*applicationsignals.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].(*applicationsignals.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockApplicationSignalsAPIMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).GetService), arg0)
}

// GetServiceLevelObjective mocks base method
func (m *MockApplicationSignalsAPI) GetServiceLevelObjective(arg0 *applicationsignals.GetServiceLevelObjectiveInput) (*applicationsignals.GetServiceLevelObjectiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceLevelObjective", arg0)
	ret0, _ := ret[0].(*applicationsignals.GetServiceLevelObjectiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceLevelObjective indicates an expected call of GetServiceLevelObjective
func (mr *MockApplicationSignalsAPIMockRecorder) GetServiceLevelObjective(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceLevelObjective", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).GetServiceLevelObjective), arg0)
}

// GetServiceLevelObjectiveRequest mocks base method
func (m *MockApplicationSignalsAPI) GetServiceLevelObjectiveRequest(arg0 *applicationsignals.GetServiceLevelObjectiveInput) (*request.Request, *applicationsignals.GetServiceLevelObjectiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceLevelObjectiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.GetServiceLevelObjectiveOutput)
	return ret0, ret1
}

// GetServiceLevelObjectiveRequest indicates an expected call of GetServiceLevelObjectiveRequest
func (mr *MockApplicationSignalsAPIMockRecorder) GetServiceLevelObjectiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceLevelObjectiveRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).GetServiceLevelObjectiveRequest), arg0)
}

// GetServiceLevelObjectiveWithContext mocks base method
func (m *MockApplicationSignalsAPI) GetServiceLevelObjectiveWithContext(arg0 context.Context, arg1 *applicationsignals.GetServiceLevelObjectiveInput, arg2 ...request.Option) (*applicationsignals.GetServiceLevelObjectiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceLevelObjectiveWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.GetServiceLevelObjectiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceLevelObjectiveWithContext indicates an expected call of GetServiceLevelObjectiveWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) GetServiceLevelObjectiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceLevelObjectiveWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).GetServiceLevelObjectiveWithContext), varargs...)
}

// GetServiceRequest mocks base method
func (m *MockApplicationSignalsAPI) GetServiceRequest(arg0 *applicationsignals.GetServiceInput) (*request.Request, *applicationsignals.GetServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.GetServiceOutput)
	return ret0, ret1
}

// GetServiceRequest indicates an expected call of GetServiceRequest
func (mr *MockApplicationSignalsAPIMockRecorder) GetServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).GetServiceRequest), arg0)
}

// GetServiceWithContext mocks base method
func (m *MockApplicationSignalsAPI) GetServiceWithContext(arg0 context.Context, arg1 *applicationsignals.GetServiceInput, arg2 ...request.Option) (*applicationsignals.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceWithContext indicates an expected call of GetServiceWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) GetServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).GetServiceWithContext), varargs...)
}

// ListServiceDependencies mocks base method
func (m *MockApplicationSignalsAPI) ListServiceDependencies(arg0 *applicationsignals.ListServiceDependenciesInput) (*applicationsignals.ListServiceDependenciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceDependencies", arg0)
	ret0, _ := ret[0].(*applicationsignals.ListServiceDependenciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceDependencies indicates an expected call of ListServiceDependencies
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceDependencies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDependencies", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceDependencies), arg0)
}

// ListServiceDependenciesPages mocks base method
func (m *MockApplicationSignalsAPI) ListServiceDependenciesPages(arg0 *applicationsignals.ListServiceDependenciesInput, arg1 func(*applicationsignals.ListServiceDependenciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceDependenciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceDependenciesPages indicates an expected call of ListServiceDependenciesPages
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceDependenciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDependenciesPages", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceDependenciesPages), arg0, arg1)
}

// ListServiceDependenciesPagesWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListServiceDependenciesPagesWithContext(arg0 context.Context, arg1 *applicationsignals.ListServiceDependenciesInput, arg2 func(*applicationsignals.ListServiceDependenciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceDependenciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceDependenciesPagesWithContext indicates an expected call of ListServiceDependenciesPagesWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceDependenciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDependenciesPagesWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceDependenciesPagesWithContext), varargs...)
}

// ListServiceDependenciesRequest mocks base method
func (m *MockApplicationSignalsAPI) ListServiceDependenciesRequest(arg0 *applicationsignals.ListServiceDependenciesInput) (*request.Request, *applicationsignals.ListServiceDependenciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceDependenciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.ListServiceDependenciesOutput)
	return ret0, ret1
}

// ListServiceDependenciesRequest indicates an expected call of ListServiceDependenciesRequest
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceDependenciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDependenciesRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceDependenciesRequest), arg0)
}

// ListServiceDependenciesWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListServiceDependenciesWithContext(arg0 context.Context, arg1 *applicationsignals.ListServiceDependenciesInput, arg2 ...request.Option) (*applicationsignals.ListServiceDependenciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceDependenciesWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.ListServiceDependenciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceDependenciesWithContext indicates an expected call of ListServiceDependenciesWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceDependenciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDependenciesWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceDependenciesWithContext), varargs...)
}

// ListServiceDependents mocks base method
func (m *MockApplicationSignalsAPI) ListServiceDependents(arg0 *applicationsignals.ListServiceDependentsInput) (*applicationsignals.ListServiceDependentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceDependents", arg0)
	ret0, _ := ret[0].(*applicationsignals.ListServiceDependentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceDependents indicates an expected call of ListServiceDependents
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceDependents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDependents", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceDependents), arg0)
}

// ListServiceDependentsPages mocks base method
func (m *MockApplicationSignalsAPI) ListServiceDependentsPages(arg0 *applicationsignals.ListServiceDependentsInput, arg1 func(*applicationsignals.ListServiceDependentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceDependentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceDependentsPages indicates an expected call of ListServiceDependentsPages
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceDependentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDependentsPages", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceDependentsPages), arg0, arg1)
}

// ListServiceDependentsPagesWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListServiceDependentsPagesWithContext(arg0 context.Context, arg1 *applicationsignals.ListServiceDependentsInput, arg2 func(*applicationsignals.ListServiceDependentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceDependentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceDependentsPagesWithContext indicates an expected call of ListServiceDependentsPagesWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceDependentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDependentsPagesWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceDependentsPagesWithContext), varargs...)
}

// ListServiceDependentsRequest mocks base method
func (m *MockApplicationSignalsAPI) ListServiceDependentsRequest(arg0 *applicationsignals.ListServiceDependentsInput) (*request.Request, *applicationsignals.ListServiceDependentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceDependentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.ListServiceDependentsOutput)
	return ret0, ret1
}

// ListServiceDependentsRequest indicates an expected call of ListServiceDependentsRequest
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceDependentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDependentsRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceDependentsRequest), arg0)
}

// ListServiceDependentsWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListServiceDependentsWithContext(arg0 context.Context, arg1 *applicationsignals.ListServiceDependentsInput, arg2 ...request.Option) (*applicationsignals.ListServiceDependentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceDependentsWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.ListServiceDependentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceDependentsWithContext indicates an expected call of ListServiceDependentsWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceDependentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDependentsWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceDependentsWithContext), varargs...)
}

// ListServiceLevelObjectives mocks base method
func (m *MockApplicationSignalsAPI) ListServiceLevelObjectives(arg0 *applicationsignals.ListServiceLevelObjectivesInput) (*applicationsignals.ListServiceLevelObjectivesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceLevelObjectives", arg0)
	ret0, _ := ret[0].(*applicationsignals.ListServiceLevelObjectivesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceLevelObjectives indicates an expected call of ListServiceLevelObjectives
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceLevelObjectives(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceLevelObjectives", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceLevelObjectives), arg0)
}

// ListServiceLevelObjectivesPages mocks base method
func (m *MockApplicationSignalsAPI) ListServiceLevelObjectivesPages(arg0 *applicationsignals.ListServiceLevelObjectivesInput, arg1 func(*applicationsignals.ListServiceLevelObjectivesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceLevelObjectivesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceLevelObjectivesPages indicates an expected call of ListServiceLevelObjectivesPages
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceLevelObjectivesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceLevelObjectivesPages", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceLevelObjectivesPages), arg0, arg1)
}

// ListServiceLevelObjectivesPagesWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListServiceLevelObjectivesPagesWithContext(arg0 context.Context, arg1 *applicationsignals.ListServiceLevelObjectivesInput, arg2 func(*applicationsignals.ListServiceLevelObjectivesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceLevelObjectivesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceLevelObjectivesPagesWithContext indicates an expected call of ListServiceLevelObjectivesPagesWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceLevelObjectivesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceLevelObjectivesPagesWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceLevelObjectivesPagesWithContext), varargs...)
}

// ListServiceLevelObjectivesRequest mocks base method
func (m *MockApplicationSignalsAPI) ListServiceLevelObjectivesRequest(arg0 *applicationsignals.ListServiceLevelObjectivesInput) (*request.Request, *applicationsignals.ListServiceLevelObjectivesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceLevelObjectivesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.ListServiceLevelObjectivesOutput)
	return ret0, ret1
}

// ListServiceLevelObjectivesRequest indicates an expected call of ListServiceLevelObjectivesRequest
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceLevelObjectivesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceLevelObjectivesRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceLevelObjectivesRequest), arg0)
}

// ListServiceLevelObjectivesWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListServiceLevelObjectivesWithContext(arg0 context.Context, arg1 *applicationsignals.ListServiceLevelObjectivesInput, arg2 ...request.Option) (*applicationsignals.ListServiceLevelObjectivesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceLevelObjectivesWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.ListServiceLevelObjectivesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceLevelObjectivesWithContext indicates an expected call of ListServiceLevelObjectivesWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceLevelObjectivesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceLevelObjectivesWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceLevelObjectivesWithContext), varargs...)
}

// ListServiceOperations mocks base method
func (m *MockApplicationSignalsAPI) ListServiceOperations(arg0 *applicationsignals.ListServiceOperationsInput) (*applicationsignals.ListServiceOperationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceOperations", arg0)
	ret0, _ := ret[0].(*applicationsignals.ListServiceOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceOperations indicates an expected call of ListServiceOperations
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceOperations", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceOperations), arg0)
}

// ListServiceOperationsPages mocks base method
func (m *MockApplicationSignalsAPI) ListServiceOperationsPages(arg0 *applicationsignals.ListServiceOperationsInput, arg1 func(*applicationsignals.ListServiceOperationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceOperationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceOperationsPages indicates an expected call of ListServiceOperationsPages
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceOperationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceOperationsPages", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceOperationsPages), arg0, arg1)
}

// ListServiceOperationsPagesWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListServiceOperationsPagesWithContext(arg0 context.Context, arg1 *applicationsignals.ListServiceOperationsInput, arg2 func(*applicationsignals.ListServiceOperationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceOperationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceOperationsPagesWithContext indicates an expected call of ListServiceOperationsPagesWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceOperationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceOperationsPagesWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceOperationsPagesWithContext), varargs...)
}

// ListServiceOperationsRequest mocks base method
func (m *MockApplicationSignalsAPI) ListServiceOperationsRequest(arg0 *applicationsignals.ListServiceOperationsInput) (*request.Request, *applicationsignals.ListServiceOperationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceOperationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.ListServiceOperationsOutput)
	return ret0, ret1
}

// ListServiceOperationsRequest indicates an expected call of ListServiceOperationsRequest
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceOperationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceOperationsRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceOperationsRequest), arg0)
}

// ListServiceOperationsWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListServiceOperationsWithContext(arg0 context.Context, arg1 *applicationsignals.ListServiceOperationsInput, arg2 ...request.Option) (*applicationsignals.ListServiceOperationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceOperationsWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.ListServiceOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceOperationsWithContext indicates an expected call of ListServiceOperationsWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListServiceOperationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceOperationsWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServiceOperationsWithContext), varargs...)
}

// ListServices mocks base method
func (m *MockApplicationSignalsAPI) ListServices(arg0 *applicationsignals.ListServicesInput) (*applicationsignals.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0)
	ret0, _ := ret[0].(*applicationsignals.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockApplicationSignalsAPIMockRecorder) ListServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServices), arg0)
}

// ListServicesPages mocks base method
func (m *MockApplicationSignalsAPI) ListServicesPages(arg0 *applicationsignals.ListServicesInput, arg1 func(*applicationsignals.ListServicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPages indicates an expected call of ListServicesPages
func (mr *MockApplicationSignalsAPIMockRecorder) ListServicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPages", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServicesPages), arg0, arg1)
}

// ListServicesPagesWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListServicesPagesWithContext(arg0 context.Context, arg1 *applicationsignals.ListServicesInput, arg2 func(*applicationsignals.ListServicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPagesWithContext indicates an expected call of ListServicesPagesWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListServicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPagesWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServicesPagesWithContext), varargs...)
}

// ListServicesRequest mocks base method
func (m *MockApplicationSignalsAPI) ListServicesRequest(arg0 *applicationsignals.ListServicesInput) (*request.Request, *applicationsignals.ListServicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.ListServicesOutput)
	return ret0, ret1
}

// ListServicesRequest indicates an expected call of ListServicesRequest
func (mr *MockApplicationSignalsAPIMockRecorder) ListServicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServicesRequest), arg0)
}

// ListServicesWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListServicesWithContext(arg0 context.Context, arg1 *applicationsignals.ListServicesInput, arg2 ...request.Option) (*applicationsignals.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesWithContext indicates an expected call of ListServicesWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListServicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListServicesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockApplicationSignalsAPI) ListTagsForResource(arg0 *applicationsignals.ListTagsForResourceInput) (*applicationsignals.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*applicationsignals.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockApplicationSignalsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockApplicationSignalsAPI) ListTagsForResourceRequest(arg0 *applicationsignals.ListTagsForResourceInput) (*request.Request, *applicationsignals.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockApplicationSignalsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockApplicationSignalsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *applicationsignals.ListTagsForResourceInput, arg2 ...request.Option) (*applicationsignals.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartDiscovery mocks base method
func (m *MockApplicationSignalsAPI) StartDiscovery(arg0 *applicationsignals.StartDiscoveryInput) (*applicationsignals.StartDiscoveryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDiscovery", arg0)
	ret0, _ := ret[0].(*applicationsignals.StartDiscoveryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDiscovery indicates an expected call of StartDiscovery
func (mr *MockApplicationSignalsAPIMockRecorder) StartDiscovery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiscovery", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).StartDiscovery), arg0)
}

// StartDiscoveryRequest mocks base method
func (m *MockApplicationSignalsAPI) StartDiscoveryRequest(arg0 *applicationsignals.StartDiscoveryInput) (*request.Request, *applicationsignals.StartDiscoveryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDiscoveryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.StartDiscoveryOutput)
	return ret0, ret1
}

// StartDiscoveryRequest indicates an expected call of StartDiscoveryRequest
func (mr *MockApplicationSignalsAPIMockRecorder) StartDiscoveryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiscoveryRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).StartDiscoveryRequest), arg0)
}

// StartDiscoveryWithContext mocks base method
func (m *MockApplicationSignalsAPI) StartDiscoveryWithContext(arg0 context.Context, arg1 *applicationsignals.StartDiscoveryInput, arg2 ...request.Option) (*applicationsignals.StartDiscoveryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDiscoveryWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.StartDiscoveryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDiscoveryWithContext indicates an expected call of StartDiscoveryWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) StartDiscoveryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiscoveryWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).StartDiscoveryWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockApplicationSignalsAPI) TagResource(arg0 *applicationsignals.TagResourceInput) (*applicationsignals.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*applicationsignals.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockApplicationSignalsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockApplicationSignalsAPI) TagResourceRequest(arg0 *applicationsignals.TagResourceInput) (*request.Request, *applicationsignals.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockApplicationSignalsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockApplicationSignalsAPI) TagResourceWithContext(arg0 context.Context, arg1 *applicationsignals.TagResourceInput, arg2 ...request.Option) (*applicationsignals.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockApplicationSignalsAPI) UntagResource(arg0 *applicationsignals.UntagResourceInput) (*applicationsignals.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*applicationsignals.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockApplicationSignalsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockApplicationSignalsAPI) UntagResourceRequest(arg0 *applicationsignals.UntagResourceInput) (*request.Request, *applicationsignals.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockApplicationSignalsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockApplicationSignalsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *applicationsignals.UntagResourceInput, arg2 ...request.Option) (*applicationsignals.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateServiceLevelObjective mocks base method
func (m *MockApplicationSignalsAPI) UpdateServiceLevelObjective(arg0 *applicationsignals.UpdateServiceLevelObjectiveInput) (*applicationsignals.UpdateServiceLevelObjectiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceLevelObjective", arg0)
	ret0, _ := ret[0].(*applicationsignals.UpdateServiceLevelObjectiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceLevelObjective indicates an expected call of UpdateServiceLevelObjective
func (mr *MockApplicationSignalsAPIMockRecorder) UpdateServiceLevelObjective(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceLevelObjective", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).UpdateServiceLevelObjective), arg0)
}

// UpdateServiceLevelObjectiveRequest mocks base method
func (m *MockApplicationSignalsAPI) UpdateServiceLevelObjectiveRequest(arg0 *applicationsignals.UpdateServiceLevelObjectiveInput) (*request.Request, *applicationsignals.UpdateServiceLevelObjectiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceLevelObjectiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*applicationsignals.UpdateServiceLevelObjectiveOutput)
	return ret0, ret1
}

// UpdateServiceLevelObjectiveRequest indicates an expected call of UpdateServiceLevelObjectiveRequest
func (mr *MockApplicationSignalsAPIMockRecorder) UpdateServiceLevelObjectiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceLevelObjectiveRequest", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).UpdateServiceLevelObjectiveRequest), arg0)
}

// UpdateServiceLevelObjectiveWithContext mocks base method
func (m *MockApplicationSignalsAPI) UpdateServiceLevelObjectiveWithContext(arg0 context.Context, arg1 *applicationsignals.UpdateServiceLevelObjectiveInput, arg2 ...request.Option) (*applicationsignals.UpdateServiceLevelObjectiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceLevelObjectiveWithContext", varargs...)
	ret0, _ := ret[0].(*applicationsignals.UpdateServiceLevelObjectiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceLevelObjectiveWithContext indicates an expected call of UpdateServiceLevelObjectiveWithContext
func (mr *MockApplicationSignalsAPIMockRecorder) UpdateServiceLevelObjectiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceLevelObjectiveWithContext", reflect.TypeOf((*MockApplicationSignalsAPI)(nil).UpdateServiceLevelObjectiveWithContext), varargs...)
}
