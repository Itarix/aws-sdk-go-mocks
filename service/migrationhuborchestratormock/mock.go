// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/migrationhuborchestrator/migrationhuborchestratoriface (interfaces: MigrationHubOrchestratorAPI)

// Package migrationhuborchestratormock is a generated GoMock package.
package migrationhuborchestratormock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	migrationhuborchestrator "github.com/aws/aws-sdk-go/service/migrationhuborchestrator"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMigrationHubOrchestratorAPI is a mock of MigrationHubOrchestratorAPI interface
type MockMigrationHubOrchestratorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationHubOrchestratorAPIMockRecorder
}

// MockMigrationHubOrchestratorAPIMockRecorder is the mock recorder for MockMigrationHubOrchestratorAPI
type MockMigrationHubOrchestratorAPIMockRecorder struct {
	mock *MockMigrationHubOrchestratorAPI
}

// NewMockMigrationHubOrchestratorAPI creates a new mock instance
func NewMockMigrationHubOrchestratorAPI(ctrl *gomock.Controller) *MockMigrationHubOrchestratorAPI {
	mock := &MockMigrationHubOrchestratorAPI{ctrl: ctrl}
	mock.recorder = &MockMigrationHubOrchestratorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMigrationHubOrchestratorAPI) EXPECT() *MockMigrationHubOrchestratorAPIMockRecorder {
	return m.recorder
}

// CreateTemplate mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateTemplate(arg0 *migrationhuborchestrator.CreateTemplateInput) (*migrationhuborchestrator.CreateTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.CreateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateTemplate), arg0)
}

// CreateTemplateRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateTemplateRequest(arg0 *migrationhuborchestrator.CreateTemplateInput) (*request.Request, *migrationhuborchestrator.CreateTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.CreateTemplateOutput)
	return ret0, ret1
}

// CreateTemplateRequest indicates an expected call of CreateTemplateRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateTemplateRequest), arg0)
}

// CreateTemplateWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateTemplateWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.CreateTemplateInput, arg2 ...request.Option) (*migrationhuborchestrator.CreateTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.CreateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplateWithContext indicates an expected call of CreateTemplateWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateTemplateWithContext), varargs...)
}

// CreateWorkflow mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateWorkflow(arg0 *migrationhuborchestrator.CreateWorkflowInput) (*migrationhuborchestrator.CreateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.CreateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflow indicates an expected call of CreateWorkflow
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateWorkflow), arg0)
}

// CreateWorkflowRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateWorkflowRequest(arg0 *migrationhuborchestrator.CreateWorkflowInput) (*request.Request, *migrationhuborchestrator.CreateWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.CreateWorkflowOutput)
	return ret0, ret1
}

// CreateWorkflowRequest indicates an expected call of CreateWorkflowRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateWorkflowRequest), arg0)
}

// CreateWorkflowStep mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateWorkflowStep(arg0 *migrationhuborchestrator.CreateWorkflowStepInput) (*migrationhuborchestrator.CreateWorkflowStepOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowStep", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.CreateWorkflowStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowStep indicates an expected call of CreateWorkflowStep
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateWorkflowStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowStep", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateWorkflowStep), arg0)
}

// CreateWorkflowStepGroup mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateWorkflowStepGroup(arg0 *migrationhuborchestrator.CreateWorkflowStepGroupInput) (*migrationhuborchestrator.CreateWorkflowStepGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowStepGroup", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.CreateWorkflowStepGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowStepGroup indicates an expected call of CreateWorkflowStepGroup
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateWorkflowStepGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowStepGroup", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateWorkflowStepGroup), arg0)
}

// CreateWorkflowStepGroupRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateWorkflowStepGroupRequest(arg0 *migrationhuborchestrator.CreateWorkflowStepGroupInput) (*request.Request, *migrationhuborchestrator.CreateWorkflowStepGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowStepGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.CreateWorkflowStepGroupOutput)
	return ret0, ret1
}

// CreateWorkflowStepGroupRequest indicates an expected call of CreateWorkflowStepGroupRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateWorkflowStepGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowStepGroupRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateWorkflowStepGroupRequest), arg0)
}

// CreateWorkflowStepGroupWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateWorkflowStepGroupWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.CreateWorkflowStepGroupInput, arg2 ...request.Option) (*migrationhuborchestrator.CreateWorkflowStepGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflowStepGroupWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.CreateWorkflowStepGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowStepGroupWithContext indicates an expected call of CreateWorkflowStepGroupWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateWorkflowStepGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowStepGroupWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateWorkflowStepGroupWithContext), varargs...)
}

// CreateWorkflowStepRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateWorkflowStepRequest(arg0 *migrationhuborchestrator.CreateWorkflowStepInput) (*request.Request, *migrationhuborchestrator.CreateWorkflowStepOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowStepRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.CreateWorkflowStepOutput)
	return ret0, ret1
}

// CreateWorkflowStepRequest indicates an expected call of CreateWorkflowStepRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateWorkflowStepRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowStepRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateWorkflowStepRequest), arg0)
}

// CreateWorkflowStepWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateWorkflowStepWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.CreateWorkflowStepInput, arg2 ...request.Option) (*migrationhuborchestrator.CreateWorkflowStepOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflowStepWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.CreateWorkflowStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowStepWithContext indicates an expected call of CreateWorkflowStepWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateWorkflowStepWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowStepWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateWorkflowStepWithContext), varargs...)
}

// CreateWorkflowWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) CreateWorkflowWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.CreateWorkflowInput, arg2 ...request.Option) (*migrationhuborchestrator.CreateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.CreateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowWithContext indicates an expected call of CreateWorkflowWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) CreateWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).CreateWorkflowWithContext), varargs...)
}

// DeleteTemplate mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteTemplate(arg0 *migrationhuborchestrator.DeleteTemplateInput) (*migrationhuborchestrator.DeleteTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.DeleteTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplate indicates an expected call of DeleteTemplate
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteTemplate), arg0)
}

// DeleteTemplateRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteTemplateRequest(arg0 *migrationhuborchestrator.DeleteTemplateInput) (*request.Request, *migrationhuborchestrator.DeleteTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.DeleteTemplateOutput)
	return ret0, ret1
}

// DeleteTemplateRequest indicates an expected call of DeleteTemplateRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteTemplateRequest), arg0)
}

// DeleteTemplateWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteTemplateWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.DeleteTemplateInput, arg2 ...request.Option) (*migrationhuborchestrator.DeleteTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.DeleteTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplateWithContext indicates an expected call of DeleteTemplateWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteTemplateWithContext), varargs...)
}

// DeleteWorkflow mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteWorkflow(arg0 *migrationhuborchestrator.DeleteWorkflowInput) (*migrationhuborchestrator.DeleteWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.DeleteWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteWorkflow), arg0)
}

// DeleteWorkflowRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteWorkflowRequest(arg0 *migrationhuborchestrator.DeleteWorkflowInput) (*request.Request, *migrationhuborchestrator.DeleteWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.DeleteWorkflowOutput)
	return ret0, ret1
}

// DeleteWorkflowRequest indicates an expected call of DeleteWorkflowRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteWorkflowRequest), arg0)
}

// DeleteWorkflowStep mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteWorkflowStep(arg0 *migrationhuborchestrator.DeleteWorkflowStepInput) (*migrationhuborchestrator.DeleteWorkflowStepOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowStep", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.DeleteWorkflowStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowStep indicates an expected call of DeleteWorkflowStep
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteWorkflowStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowStep", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteWorkflowStep), arg0)
}

// DeleteWorkflowStepGroup mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteWorkflowStepGroup(arg0 *migrationhuborchestrator.DeleteWorkflowStepGroupInput) (*migrationhuborchestrator.DeleteWorkflowStepGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowStepGroup", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.DeleteWorkflowStepGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowStepGroup indicates an expected call of DeleteWorkflowStepGroup
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteWorkflowStepGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowStepGroup", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteWorkflowStepGroup), arg0)
}

// DeleteWorkflowStepGroupRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteWorkflowStepGroupRequest(arg0 *migrationhuborchestrator.DeleteWorkflowStepGroupInput) (*request.Request, *migrationhuborchestrator.DeleteWorkflowStepGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowStepGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.DeleteWorkflowStepGroupOutput)
	return ret0, ret1
}

// DeleteWorkflowStepGroupRequest indicates an expected call of DeleteWorkflowStepGroupRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteWorkflowStepGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowStepGroupRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteWorkflowStepGroupRequest), arg0)
}

// DeleteWorkflowStepGroupWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteWorkflowStepGroupWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.DeleteWorkflowStepGroupInput, arg2 ...request.Option) (*migrationhuborchestrator.DeleteWorkflowStepGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkflowStepGroupWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.DeleteWorkflowStepGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowStepGroupWithContext indicates an expected call of DeleteWorkflowStepGroupWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteWorkflowStepGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowStepGroupWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteWorkflowStepGroupWithContext), varargs...)
}

// DeleteWorkflowStepRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteWorkflowStepRequest(arg0 *migrationhuborchestrator.DeleteWorkflowStepInput) (*request.Request, *migrationhuborchestrator.DeleteWorkflowStepOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowStepRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.DeleteWorkflowStepOutput)
	return ret0, ret1
}

// DeleteWorkflowStepRequest indicates an expected call of DeleteWorkflowStepRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteWorkflowStepRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowStepRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteWorkflowStepRequest), arg0)
}

// DeleteWorkflowStepWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteWorkflowStepWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.DeleteWorkflowStepInput, arg2 ...request.Option) (*migrationhuborchestrator.DeleteWorkflowStepOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkflowStepWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.DeleteWorkflowStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowStepWithContext indicates an expected call of DeleteWorkflowStepWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteWorkflowStepWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowStepWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteWorkflowStepWithContext), varargs...)
}

// DeleteWorkflowWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) DeleteWorkflowWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.DeleteWorkflowInput, arg2 ...request.Option) (*migrationhuborchestrator.DeleteWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.DeleteWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowWithContext indicates an expected call of DeleteWorkflowWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) DeleteWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).DeleteWorkflowWithContext), varargs...)
}

// GetTemplate mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetTemplate(arg0 *migrationhuborchestrator.GetTemplateInput) (*migrationhuborchestrator.GetTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetTemplate), arg0)
}

// GetTemplateRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetTemplateRequest(arg0 *migrationhuborchestrator.GetTemplateInput) (*request.Request, *migrationhuborchestrator.GetTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.GetTemplateOutput)
	return ret0, ret1
}

// GetTemplateRequest indicates an expected call of GetTemplateRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetTemplateRequest), arg0)
}

// GetTemplateStep mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetTemplateStep(arg0 *migrationhuborchestrator.GetTemplateStepInput) (*migrationhuborchestrator.GetTemplateStepOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateStep", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetTemplateStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateStep indicates an expected call of GetTemplateStep
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetTemplateStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateStep", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetTemplateStep), arg0)
}

// GetTemplateStepGroup mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetTemplateStepGroup(arg0 *migrationhuborchestrator.GetTemplateStepGroupInput) (*migrationhuborchestrator.GetTemplateStepGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateStepGroup", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetTemplateStepGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateStepGroup indicates an expected call of GetTemplateStepGroup
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetTemplateStepGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateStepGroup", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetTemplateStepGroup), arg0)
}

// GetTemplateStepGroupRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetTemplateStepGroupRequest(arg0 *migrationhuborchestrator.GetTemplateStepGroupInput) (*request.Request, *migrationhuborchestrator.GetTemplateStepGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateStepGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.GetTemplateStepGroupOutput)
	return ret0, ret1
}

// GetTemplateStepGroupRequest indicates an expected call of GetTemplateStepGroupRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetTemplateStepGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateStepGroupRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetTemplateStepGroupRequest), arg0)
}

// GetTemplateStepGroupWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetTemplateStepGroupWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.GetTemplateStepGroupInput, arg2 ...request.Option) (*migrationhuborchestrator.GetTemplateStepGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplateStepGroupWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetTemplateStepGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateStepGroupWithContext indicates an expected call of GetTemplateStepGroupWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetTemplateStepGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateStepGroupWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetTemplateStepGroupWithContext), varargs...)
}

// GetTemplateStepRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetTemplateStepRequest(arg0 *migrationhuborchestrator.GetTemplateStepInput) (*request.Request, *migrationhuborchestrator.GetTemplateStepOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateStepRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.GetTemplateStepOutput)
	return ret0, ret1
}

// GetTemplateStepRequest indicates an expected call of GetTemplateStepRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetTemplateStepRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateStepRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetTemplateStepRequest), arg0)
}

// GetTemplateStepWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetTemplateStepWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.GetTemplateStepInput, arg2 ...request.Option) (*migrationhuborchestrator.GetTemplateStepOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplateStepWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetTemplateStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateStepWithContext indicates an expected call of GetTemplateStepWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetTemplateStepWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateStepWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetTemplateStepWithContext), varargs...)
}

// GetTemplateWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetTemplateWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.GetTemplateInput, arg2 ...request.Option) (*migrationhuborchestrator.GetTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateWithContext indicates an expected call of GetTemplateWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetTemplateWithContext), varargs...)
}

// GetWorkflow mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetWorkflow(arg0 *migrationhuborchestrator.GetWorkflowInput) (*migrationhuborchestrator.GetWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetWorkflow), arg0)
}

// GetWorkflowRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetWorkflowRequest(arg0 *migrationhuborchestrator.GetWorkflowInput) (*request.Request, *migrationhuborchestrator.GetWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.GetWorkflowOutput)
	return ret0, ret1
}

// GetWorkflowRequest indicates an expected call of GetWorkflowRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetWorkflowRequest), arg0)
}

// GetWorkflowStep mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetWorkflowStep(arg0 *migrationhuborchestrator.GetWorkflowStepInput) (*migrationhuborchestrator.GetWorkflowStepOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowStep", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetWorkflowStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowStep indicates an expected call of GetWorkflowStep
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetWorkflowStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowStep", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetWorkflowStep), arg0)
}

// GetWorkflowStepGroup mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetWorkflowStepGroup(arg0 *migrationhuborchestrator.GetWorkflowStepGroupInput) (*migrationhuborchestrator.GetWorkflowStepGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowStepGroup", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetWorkflowStepGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowStepGroup indicates an expected call of GetWorkflowStepGroup
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetWorkflowStepGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowStepGroup", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetWorkflowStepGroup), arg0)
}

// GetWorkflowStepGroupRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetWorkflowStepGroupRequest(arg0 *migrationhuborchestrator.GetWorkflowStepGroupInput) (*request.Request, *migrationhuborchestrator.GetWorkflowStepGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowStepGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.GetWorkflowStepGroupOutput)
	return ret0, ret1
}

// GetWorkflowStepGroupRequest indicates an expected call of GetWorkflowStepGroupRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetWorkflowStepGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowStepGroupRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetWorkflowStepGroupRequest), arg0)
}

// GetWorkflowStepGroupWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetWorkflowStepGroupWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.GetWorkflowStepGroupInput, arg2 ...request.Option) (*migrationhuborchestrator.GetWorkflowStepGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflowStepGroupWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetWorkflowStepGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowStepGroupWithContext indicates an expected call of GetWorkflowStepGroupWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetWorkflowStepGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowStepGroupWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetWorkflowStepGroupWithContext), varargs...)
}

// GetWorkflowStepRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetWorkflowStepRequest(arg0 *migrationhuborchestrator.GetWorkflowStepInput) (*request.Request, *migrationhuborchestrator.GetWorkflowStepOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowStepRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.GetWorkflowStepOutput)
	return ret0, ret1
}

// GetWorkflowStepRequest indicates an expected call of GetWorkflowStepRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetWorkflowStepRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowStepRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetWorkflowStepRequest), arg0)
}

// GetWorkflowStepWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetWorkflowStepWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.GetWorkflowStepInput, arg2 ...request.Option) (*migrationhuborchestrator.GetWorkflowStepOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflowStepWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetWorkflowStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowStepWithContext indicates an expected call of GetWorkflowStepWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetWorkflowStepWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowStepWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetWorkflowStepWithContext), varargs...)
}

// GetWorkflowWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) GetWorkflowWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.GetWorkflowInput, arg2 ...request.Option) (*migrationhuborchestrator.GetWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.GetWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowWithContext indicates an expected call of GetWorkflowWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) GetWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).GetWorkflowWithContext), varargs...)
}

// ListPlugins mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListPlugins(arg0 *migrationhuborchestrator.ListPluginsInput) (*migrationhuborchestrator.ListPluginsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlugins", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListPluginsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlugins indicates an expected call of ListPlugins
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListPlugins(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlugins", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListPlugins), arg0)
}

// ListPluginsPages mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListPluginsPages(arg0 *migrationhuborchestrator.ListPluginsInput, arg1 func(*migrationhuborchestrator.ListPluginsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPluginsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPluginsPages indicates an expected call of ListPluginsPages
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListPluginsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPluginsPages", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListPluginsPages), arg0, arg1)
}

// ListPluginsPagesWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListPluginsPagesWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListPluginsInput, arg2 func(*migrationhuborchestrator.ListPluginsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPluginsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPluginsPagesWithContext indicates an expected call of ListPluginsPagesWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListPluginsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPluginsPagesWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListPluginsPagesWithContext), varargs...)
}

// ListPluginsRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListPluginsRequest(arg0 *migrationhuborchestrator.ListPluginsInput) (*request.Request, *migrationhuborchestrator.ListPluginsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPluginsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.ListPluginsOutput)
	return ret0, ret1
}

// ListPluginsRequest indicates an expected call of ListPluginsRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListPluginsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPluginsRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListPluginsRequest), arg0)
}

// ListPluginsWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListPluginsWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListPluginsInput, arg2 ...request.Option) (*migrationhuborchestrator.ListPluginsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPluginsWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListPluginsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPluginsWithContext indicates an expected call of ListPluginsWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListPluginsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPluginsWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListPluginsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTagsForResource(arg0 *migrationhuborchestrator.ListTagsForResourceInput) (*migrationhuborchestrator.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTagsForResourceRequest(arg0 *migrationhuborchestrator.ListTagsForResourceInput) (*request.Request, *migrationhuborchestrator.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListTagsForResourceInput, arg2 ...request.Option) (*migrationhuborchestrator.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTemplateStepGroups mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplateStepGroups(arg0 *migrationhuborchestrator.ListTemplateStepGroupsInput) (*migrationhuborchestrator.ListTemplateStepGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateStepGroups", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListTemplateStepGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateStepGroups indicates an expected call of ListTemplateStepGroups
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplateStepGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateStepGroups", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplateStepGroups), arg0)
}

// ListTemplateStepGroupsPages mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplateStepGroupsPages(arg0 *migrationhuborchestrator.ListTemplateStepGroupsInput, arg1 func(*migrationhuborchestrator.ListTemplateStepGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateStepGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplateStepGroupsPages indicates an expected call of ListTemplateStepGroupsPages
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplateStepGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateStepGroupsPages", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplateStepGroupsPages), arg0, arg1)
}

// ListTemplateStepGroupsPagesWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplateStepGroupsPagesWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListTemplateStepGroupsInput, arg2 func(*migrationhuborchestrator.ListTemplateStepGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplateStepGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplateStepGroupsPagesWithContext indicates an expected call of ListTemplateStepGroupsPagesWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplateStepGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateStepGroupsPagesWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplateStepGroupsPagesWithContext), varargs...)
}

// ListTemplateStepGroupsRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplateStepGroupsRequest(arg0 *migrationhuborchestrator.ListTemplateStepGroupsInput) (*request.Request, *migrationhuborchestrator.ListTemplateStepGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateStepGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.ListTemplateStepGroupsOutput)
	return ret0, ret1
}

// ListTemplateStepGroupsRequest indicates an expected call of ListTemplateStepGroupsRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplateStepGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateStepGroupsRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplateStepGroupsRequest), arg0)
}

// ListTemplateStepGroupsWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplateStepGroupsWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListTemplateStepGroupsInput, arg2 ...request.Option) (*migrationhuborchestrator.ListTemplateStepGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplateStepGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListTemplateStepGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateStepGroupsWithContext indicates an expected call of ListTemplateStepGroupsWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplateStepGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateStepGroupsWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplateStepGroupsWithContext), varargs...)
}

// ListTemplateSteps mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplateSteps(arg0 *migrationhuborchestrator.ListTemplateStepsInput) (*migrationhuborchestrator.ListTemplateStepsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateSteps", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListTemplateStepsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateSteps indicates an expected call of ListTemplateSteps
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplateSteps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateSteps", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplateSteps), arg0)
}

// ListTemplateStepsPages mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplateStepsPages(arg0 *migrationhuborchestrator.ListTemplateStepsInput, arg1 func(*migrationhuborchestrator.ListTemplateStepsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateStepsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplateStepsPages indicates an expected call of ListTemplateStepsPages
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplateStepsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateStepsPages", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplateStepsPages), arg0, arg1)
}

// ListTemplateStepsPagesWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplateStepsPagesWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListTemplateStepsInput, arg2 func(*migrationhuborchestrator.ListTemplateStepsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplateStepsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplateStepsPagesWithContext indicates an expected call of ListTemplateStepsPagesWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplateStepsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateStepsPagesWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplateStepsPagesWithContext), varargs...)
}

// ListTemplateStepsRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplateStepsRequest(arg0 *migrationhuborchestrator.ListTemplateStepsInput) (*request.Request, *migrationhuborchestrator.ListTemplateStepsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateStepsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.ListTemplateStepsOutput)
	return ret0, ret1
}

// ListTemplateStepsRequest indicates an expected call of ListTemplateStepsRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplateStepsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateStepsRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplateStepsRequest), arg0)
}

// ListTemplateStepsWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplateStepsWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListTemplateStepsInput, arg2 ...request.Option) (*migrationhuborchestrator.ListTemplateStepsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplateStepsWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListTemplateStepsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateStepsWithContext indicates an expected call of ListTemplateStepsWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplateStepsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateStepsWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplateStepsWithContext), varargs...)
}

// ListTemplates mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplates(arg0 *migrationhuborchestrator.ListTemplatesInput) (*migrationhuborchestrator.ListTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplates", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplates indicates an expected call of ListTemplates
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplates), arg0)
}

// ListTemplatesPages mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplatesPages(arg0 *migrationhuborchestrator.ListTemplatesInput, arg1 func(*migrationhuborchestrator.ListTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplatesPages indicates an expected call of ListTemplatesPages
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesPages", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplatesPages), arg0, arg1)
}

// ListTemplatesPagesWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplatesPagesWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListTemplatesInput, arg2 func(*migrationhuborchestrator.ListTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplatesPagesWithContext indicates an expected call of ListTemplatesPagesWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesPagesWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplatesPagesWithContext), varargs...)
}

// ListTemplatesRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplatesRequest(arg0 *migrationhuborchestrator.ListTemplatesInput) (*request.Request, *migrationhuborchestrator.ListTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.ListTemplatesOutput)
	return ret0, ret1
}

// ListTemplatesRequest indicates an expected call of ListTemplatesRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplatesRequest), arg0)
}

// ListTemplatesWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListTemplatesWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListTemplatesInput, arg2 ...request.Option) (*migrationhuborchestrator.ListTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplatesWithContext indicates an expected call of ListTemplatesWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListTemplatesWithContext), varargs...)
}

// ListWorkflowStepGroups mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowStepGroups(arg0 *migrationhuborchestrator.ListWorkflowStepGroupsInput) (*migrationhuborchestrator.ListWorkflowStepGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowStepGroups", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListWorkflowStepGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowStepGroups indicates an expected call of ListWorkflowStepGroups
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowStepGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowStepGroups", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowStepGroups), arg0)
}

// ListWorkflowStepGroupsPages mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowStepGroupsPages(arg0 *migrationhuborchestrator.ListWorkflowStepGroupsInput, arg1 func(*migrationhuborchestrator.ListWorkflowStepGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowStepGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowStepGroupsPages indicates an expected call of ListWorkflowStepGroupsPages
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowStepGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowStepGroupsPages", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowStepGroupsPages), arg0, arg1)
}

// ListWorkflowStepGroupsPagesWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowStepGroupsPagesWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListWorkflowStepGroupsInput, arg2 func(*migrationhuborchestrator.ListWorkflowStepGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowStepGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowStepGroupsPagesWithContext indicates an expected call of ListWorkflowStepGroupsPagesWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowStepGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowStepGroupsPagesWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowStepGroupsPagesWithContext), varargs...)
}

// ListWorkflowStepGroupsRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowStepGroupsRequest(arg0 *migrationhuborchestrator.ListWorkflowStepGroupsInput) (*request.Request, *migrationhuborchestrator.ListWorkflowStepGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowStepGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.ListWorkflowStepGroupsOutput)
	return ret0, ret1
}

// ListWorkflowStepGroupsRequest indicates an expected call of ListWorkflowStepGroupsRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowStepGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowStepGroupsRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowStepGroupsRequest), arg0)
}

// ListWorkflowStepGroupsWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowStepGroupsWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListWorkflowStepGroupsInput, arg2 ...request.Option) (*migrationhuborchestrator.ListWorkflowStepGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowStepGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListWorkflowStepGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowStepGroupsWithContext indicates an expected call of ListWorkflowStepGroupsWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowStepGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowStepGroupsWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowStepGroupsWithContext), varargs...)
}

// ListWorkflowSteps mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowSteps(arg0 *migrationhuborchestrator.ListWorkflowStepsInput) (*migrationhuborchestrator.ListWorkflowStepsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowSteps", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListWorkflowStepsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowSteps indicates an expected call of ListWorkflowSteps
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowSteps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowSteps", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowSteps), arg0)
}

// ListWorkflowStepsPages mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowStepsPages(arg0 *migrationhuborchestrator.ListWorkflowStepsInput, arg1 func(*migrationhuborchestrator.ListWorkflowStepsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowStepsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowStepsPages indicates an expected call of ListWorkflowStepsPages
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowStepsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowStepsPages", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowStepsPages), arg0, arg1)
}

// ListWorkflowStepsPagesWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowStepsPagesWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListWorkflowStepsInput, arg2 func(*migrationhuborchestrator.ListWorkflowStepsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowStepsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowStepsPagesWithContext indicates an expected call of ListWorkflowStepsPagesWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowStepsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowStepsPagesWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowStepsPagesWithContext), varargs...)
}

// ListWorkflowStepsRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowStepsRequest(arg0 *migrationhuborchestrator.ListWorkflowStepsInput) (*request.Request, *migrationhuborchestrator.ListWorkflowStepsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowStepsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.ListWorkflowStepsOutput)
	return ret0, ret1
}

// ListWorkflowStepsRequest indicates an expected call of ListWorkflowStepsRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowStepsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowStepsRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowStepsRequest), arg0)
}

// ListWorkflowStepsWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowStepsWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListWorkflowStepsInput, arg2 ...request.Option) (*migrationhuborchestrator.ListWorkflowStepsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowStepsWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListWorkflowStepsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowStepsWithContext indicates an expected call of ListWorkflowStepsWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowStepsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowStepsWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowStepsWithContext), varargs...)
}

// ListWorkflows mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflows(arg0 *migrationhuborchestrator.ListWorkflowsInput) (*migrationhuborchestrator.ListWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflows), arg0)
}

// ListWorkflowsPages mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowsPages(arg0 *migrationhuborchestrator.ListWorkflowsInput, arg1 func(*migrationhuborchestrator.ListWorkflowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowsPages indicates an expected call of ListWorkflowsPages
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsPages", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowsPages), arg0, arg1)
}

// ListWorkflowsPagesWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowsPagesWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListWorkflowsInput, arg2 func(*migrationhuborchestrator.ListWorkflowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowsPagesWithContext indicates an expected call of ListWorkflowsPagesWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsPagesWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowsPagesWithContext), varargs...)
}

// ListWorkflowsRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowsRequest(arg0 *migrationhuborchestrator.ListWorkflowsInput) (*request.Request, *migrationhuborchestrator.ListWorkflowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.ListWorkflowsOutput)
	return ret0, ret1
}

// ListWorkflowsRequest indicates an expected call of ListWorkflowsRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowsRequest), arg0)
}

// ListWorkflowsWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) ListWorkflowsWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.ListWorkflowsInput, arg2 ...request.Option) (*migrationhuborchestrator.ListWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowsWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.ListWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowsWithContext indicates an expected call of ListWorkflowsWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) ListWorkflowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).ListWorkflowsWithContext), varargs...)
}

// RetryWorkflowStep mocks base method
func (m *MockMigrationHubOrchestratorAPI) RetryWorkflowStep(arg0 *migrationhuborchestrator.RetryWorkflowStepInput) (*migrationhuborchestrator.RetryWorkflowStepOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryWorkflowStep", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.RetryWorkflowStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryWorkflowStep indicates an expected call of RetryWorkflowStep
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) RetryWorkflowStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryWorkflowStep", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).RetryWorkflowStep), arg0)
}

// RetryWorkflowStepRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) RetryWorkflowStepRequest(arg0 *migrationhuborchestrator.RetryWorkflowStepInput) (*request.Request, *migrationhuborchestrator.RetryWorkflowStepOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryWorkflowStepRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.RetryWorkflowStepOutput)
	return ret0, ret1
}

// RetryWorkflowStepRequest indicates an expected call of RetryWorkflowStepRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) RetryWorkflowStepRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryWorkflowStepRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).RetryWorkflowStepRequest), arg0)
}

// RetryWorkflowStepWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) RetryWorkflowStepWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.RetryWorkflowStepInput, arg2 ...request.Option) (*migrationhuborchestrator.RetryWorkflowStepOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryWorkflowStepWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.RetryWorkflowStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryWorkflowStepWithContext indicates an expected call of RetryWorkflowStepWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) RetryWorkflowStepWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryWorkflowStepWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).RetryWorkflowStepWithContext), varargs...)
}

// StartWorkflow mocks base method
func (m *MockMigrationHubOrchestratorAPI) StartWorkflow(arg0 *migrationhuborchestrator.StartWorkflowInput) (*migrationhuborchestrator.StartWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkflow", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.StartWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkflow indicates an expected call of StartWorkflow
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) StartWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflow", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).StartWorkflow), arg0)
}

// StartWorkflowRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) StartWorkflowRequest(arg0 *migrationhuborchestrator.StartWorkflowInput) (*request.Request, *migrationhuborchestrator.StartWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.StartWorkflowOutput)
	return ret0, ret1
}

// StartWorkflowRequest indicates an expected call of StartWorkflowRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) StartWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflowRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).StartWorkflowRequest), arg0)
}

// StartWorkflowWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) StartWorkflowWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.StartWorkflowInput, arg2 ...request.Option) (*migrationhuborchestrator.StartWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.StartWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkflowWithContext indicates an expected call of StartWorkflowWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) StartWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflowWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).StartWorkflowWithContext), varargs...)
}

// StopWorkflow mocks base method
func (m *MockMigrationHubOrchestratorAPI) StopWorkflow(arg0 *migrationhuborchestrator.StopWorkflowInput) (*migrationhuborchestrator.StopWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkflow", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.StopWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopWorkflow indicates an expected call of StopWorkflow
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) StopWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflow", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).StopWorkflow), arg0)
}

// StopWorkflowRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) StopWorkflowRequest(arg0 *migrationhuborchestrator.StopWorkflowInput) (*request.Request, *migrationhuborchestrator.StopWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.StopWorkflowOutput)
	return ret0, ret1
}

// StopWorkflowRequest indicates an expected call of StopWorkflowRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) StopWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflowRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).StopWorkflowRequest), arg0)
}

// StopWorkflowWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) StopWorkflowWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.StopWorkflowInput, arg2 ...request.Option) (*migrationhuborchestrator.StopWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.StopWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopWorkflowWithContext indicates an expected call of StopWorkflowWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) StopWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflowWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).StopWorkflowWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockMigrationHubOrchestratorAPI) TagResource(arg0 *migrationhuborchestrator.TagResourceInput) (*migrationhuborchestrator.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) TagResourceRequest(arg0 *migrationhuborchestrator.TagResourceInput) (*request.Request, *migrationhuborchestrator.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) TagResourceWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.TagResourceInput, arg2 ...request.Option) (*migrationhuborchestrator.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockMigrationHubOrchestratorAPI) UntagResource(arg0 *migrationhuborchestrator.UntagResourceInput) (*migrationhuborchestrator.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) UntagResourceRequest(arg0 *migrationhuborchestrator.UntagResourceInput) (*request.Request, *migrationhuborchestrator.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) UntagResourceWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.UntagResourceInput, arg2 ...request.Option) (*migrationhuborchestrator.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateTemplate mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateTemplate(arg0 *migrationhuborchestrator.UpdateTemplateInput) (*migrationhuborchestrator.UpdateTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplate", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.UpdateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplate indicates an expected call of UpdateTemplate
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateTemplate), arg0)
}

// UpdateTemplateRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateTemplateRequest(arg0 *migrationhuborchestrator.UpdateTemplateInput) (*request.Request, *migrationhuborchestrator.UpdateTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.UpdateTemplateOutput)
	return ret0, ret1
}

// UpdateTemplateRequest indicates an expected call of UpdateTemplateRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateTemplateRequest), arg0)
}

// UpdateTemplateWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateTemplateWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.UpdateTemplateInput, arg2 ...request.Option) (*migrationhuborchestrator.UpdateTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.UpdateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplateWithContext indicates an expected call of UpdateTemplateWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateTemplateWithContext), varargs...)
}

// UpdateWorkflow mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateWorkflow(arg0 *migrationhuborchestrator.UpdateWorkflowInput) (*migrationhuborchestrator.UpdateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.UpdateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateWorkflow), arg0)
}

// UpdateWorkflowRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateWorkflowRequest(arg0 *migrationhuborchestrator.UpdateWorkflowInput) (*request.Request, *migrationhuborchestrator.UpdateWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.UpdateWorkflowOutput)
	return ret0, ret1
}

// UpdateWorkflowRequest indicates an expected call of UpdateWorkflowRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateWorkflowRequest), arg0)
}

// UpdateWorkflowStep mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateWorkflowStep(arg0 *migrationhuborchestrator.UpdateWorkflowStepInput) (*migrationhuborchestrator.UpdateWorkflowStepOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowStep", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.UpdateWorkflowStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflowStep indicates an expected call of UpdateWorkflowStep
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateWorkflowStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowStep", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateWorkflowStep), arg0)
}

// UpdateWorkflowStepGroup mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateWorkflowStepGroup(arg0 *migrationhuborchestrator.UpdateWorkflowStepGroupInput) (*migrationhuborchestrator.UpdateWorkflowStepGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowStepGroup", arg0)
	ret0, _ := ret[0].(*migrationhuborchestrator.UpdateWorkflowStepGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflowStepGroup indicates an expected call of UpdateWorkflowStepGroup
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateWorkflowStepGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowStepGroup", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateWorkflowStepGroup), arg0)
}

// UpdateWorkflowStepGroupRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateWorkflowStepGroupRequest(arg0 *migrationhuborchestrator.UpdateWorkflowStepGroupInput) (*request.Request, *migrationhuborchestrator.UpdateWorkflowStepGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowStepGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.UpdateWorkflowStepGroupOutput)
	return ret0, ret1
}

// UpdateWorkflowStepGroupRequest indicates an expected call of UpdateWorkflowStepGroupRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateWorkflowStepGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowStepGroupRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateWorkflowStepGroupRequest), arg0)
}

// UpdateWorkflowStepGroupWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateWorkflowStepGroupWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.UpdateWorkflowStepGroupInput, arg2 ...request.Option) (*migrationhuborchestrator.UpdateWorkflowStepGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkflowStepGroupWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.UpdateWorkflowStepGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflowStepGroupWithContext indicates an expected call of UpdateWorkflowStepGroupWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateWorkflowStepGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowStepGroupWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateWorkflowStepGroupWithContext), varargs...)
}

// UpdateWorkflowStepRequest mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateWorkflowStepRequest(arg0 *migrationhuborchestrator.UpdateWorkflowStepInput) (*request.Request, *migrationhuborchestrator.UpdateWorkflowStepOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowStepRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhuborchestrator.UpdateWorkflowStepOutput)
	return ret0, ret1
}

// UpdateWorkflowStepRequest indicates an expected call of UpdateWorkflowStepRequest
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateWorkflowStepRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowStepRequest", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateWorkflowStepRequest), arg0)
}

// UpdateWorkflowStepWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateWorkflowStepWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.UpdateWorkflowStepInput, arg2 ...request.Option) (*migrationhuborchestrator.UpdateWorkflowStepOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkflowStepWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.UpdateWorkflowStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflowStepWithContext indicates an expected call of UpdateWorkflowStepWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateWorkflowStepWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowStepWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateWorkflowStepWithContext), varargs...)
}

// UpdateWorkflowWithContext mocks base method
func (m *MockMigrationHubOrchestratorAPI) UpdateWorkflowWithContext(arg0 context.Context, arg1 *migrationhuborchestrator.UpdateWorkflowInput, arg2 ...request.Option) (*migrationhuborchestrator.UpdateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhuborchestrator.UpdateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflowWithContext indicates an expected call of UpdateWorkflowWithContext
func (mr *MockMigrationHubOrchestratorAPIMockRecorder) UpdateWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowWithContext", reflect.TypeOf((*MockMigrationHubOrchestratorAPI)(nil).UpdateWorkflowWithContext), varargs...)
}
