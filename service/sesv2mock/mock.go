// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/sesv2/sesv2iface (interfaces: SESV2API)

// Package sesv2mock is a generated GoMock package.
package sesv2mock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	sesv2 "github.com/aws/aws-sdk-go/service/sesv2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSESV2API is a mock of SESV2API interface
type MockSESV2API struct {
	ctrl     *gomock.Controller
	recorder *MockSESV2APIMockRecorder
}

// MockSESV2APIMockRecorder is the mock recorder for MockSESV2API
type MockSESV2APIMockRecorder struct {
	mock *MockSESV2API
}

// NewMockSESV2API creates a new mock instance
func NewMockSESV2API(ctrl *gomock.Controller) *MockSESV2API {
	mock := &MockSESV2API{ctrl: ctrl}
	mock.recorder = &MockSESV2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSESV2API) EXPECT() *MockSESV2APIMockRecorder {
	return m.recorder
}

// CreateConfigurationSet mocks base method
func (m *MockSESV2API) CreateConfigurationSet(arg0 *sesv2.CreateConfigurationSetInput) (*sesv2.CreateConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSet", arg0)
	ret0, _ := ret[0].(*sesv2.CreateConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSet indicates an expected call of CreateConfigurationSet
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSet", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSet), arg0)
}

// CreateConfigurationSetEventDestination mocks base method
func (m *MockSESV2API) CreateConfigurationSetEventDestination(arg0 *sesv2.CreateConfigurationSetEventDestinationInput) (*sesv2.CreateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSetEventDestination", arg0)
	ret0, _ := ret[0].(*sesv2.CreateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSetEventDestination indicates an expected call of CreateConfigurationSetEventDestination
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSetEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetEventDestination", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSetEventDestination), arg0)
}

// CreateConfigurationSetEventDestinationRequest mocks base method
func (m *MockSESV2API) CreateConfigurationSetEventDestinationRequest(arg0 *sesv2.CreateConfigurationSetEventDestinationInput) (*request.Request, *sesv2.CreateConfigurationSetEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSetEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateConfigurationSetEventDestinationOutput)
	return ret0, ret1
}

// CreateConfigurationSetEventDestinationRequest indicates an expected call of CreateConfigurationSetEventDestinationRequest
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSetEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetEventDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSetEventDestinationRequest), arg0)
}

// CreateConfigurationSetEventDestinationWithContext mocks base method
func (m *MockSESV2API) CreateConfigurationSetEventDestinationWithContext(arg0 context.Context, arg1 *sesv2.CreateConfigurationSetEventDestinationInput, arg2 ...request.Option) (*sesv2.CreateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigurationSetEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSetEventDestinationWithContext indicates an expected call of CreateConfigurationSetEventDestinationWithContext
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSetEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetEventDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSetEventDestinationWithContext), varargs...)
}

// CreateConfigurationSetRequest mocks base method
func (m *MockSESV2API) CreateConfigurationSetRequest(arg0 *sesv2.CreateConfigurationSetInput) (*request.Request, *sesv2.CreateConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateConfigurationSetOutput)
	return ret0, ret1
}

// CreateConfigurationSetRequest indicates an expected call of CreateConfigurationSetRequest
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSetRequest), arg0)
}

// CreateConfigurationSetWithContext mocks base method
func (m *MockSESV2API) CreateConfigurationSetWithContext(arg0 context.Context, arg1 *sesv2.CreateConfigurationSetInput, arg2 ...request.Option) (*sesv2.CreateConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSetWithContext indicates an expected call of CreateConfigurationSetWithContext
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSetWithContext), varargs...)
}

// CreateDedicatedIpPool mocks base method
func (m *MockSESV2API) CreateDedicatedIpPool(arg0 *sesv2.CreateDedicatedIpPoolInput) (*sesv2.CreateDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDedicatedIpPool", arg0)
	ret0, _ := ret[0].(*sesv2.CreateDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDedicatedIpPool indicates an expected call of CreateDedicatedIpPool
func (mr *MockSESV2APIMockRecorder) CreateDedicatedIpPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDedicatedIpPool", reflect.TypeOf((*MockSESV2API)(nil).CreateDedicatedIpPool), arg0)
}

// CreateDedicatedIpPoolRequest mocks base method
func (m *MockSESV2API) CreateDedicatedIpPoolRequest(arg0 *sesv2.CreateDedicatedIpPoolInput) (*request.Request, *sesv2.CreateDedicatedIpPoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDedicatedIpPoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateDedicatedIpPoolOutput)
	return ret0, ret1
}

// CreateDedicatedIpPoolRequest indicates an expected call of CreateDedicatedIpPoolRequest
func (mr *MockSESV2APIMockRecorder) CreateDedicatedIpPoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDedicatedIpPoolRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateDedicatedIpPoolRequest), arg0)
}

// CreateDedicatedIpPoolWithContext mocks base method
func (m *MockSESV2API) CreateDedicatedIpPoolWithContext(arg0 context.Context, arg1 *sesv2.CreateDedicatedIpPoolInput, arg2 ...request.Option) (*sesv2.CreateDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDedicatedIpPoolWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDedicatedIpPoolWithContext indicates an expected call of CreateDedicatedIpPoolWithContext
func (mr *MockSESV2APIMockRecorder) CreateDedicatedIpPoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDedicatedIpPoolWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateDedicatedIpPoolWithContext), varargs...)
}

// CreateDeliverabilityTestReport mocks base method
func (m *MockSESV2API) CreateDeliverabilityTestReport(arg0 *sesv2.CreateDeliverabilityTestReportInput) (*sesv2.CreateDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeliverabilityTestReport", arg0)
	ret0, _ := ret[0].(*sesv2.CreateDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeliverabilityTestReport indicates an expected call of CreateDeliverabilityTestReport
func (mr *MockSESV2APIMockRecorder) CreateDeliverabilityTestReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliverabilityTestReport", reflect.TypeOf((*MockSESV2API)(nil).CreateDeliverabilityTestReport), arg0)
}

// CreateDeliverabilityTestReportRequest mocks base method
func (m *MockSESV2API) CreateDeliverabilityTestReportRequest(arg0 *sesv2.CreateDeliverabilityTestReportInput) (*request.Request, *sesv2.CreateDeliverabilityTestReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeliverabilityTestReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateDeliverabilityTestReportOutput)
	return ret0, ret1
}

// CreateDeliverabilityTestReportRequest indicates an expected call of CreateDeliverabilityTestReportRequest
func (mr *MockSESV2APIMockRecorder) CreateDeliverabilityTestReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliverabilityTestReportRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateDeliverabilityTestReportRequest), arg0)
}

// CreateDeliverabilityTestReportWithContext mocks base method
func (m *MockSESV2API) CreateDeliverabilityTestReportWithContext(arg0 context.Context, arg1 *sesv2.CreateDeliverabilityTestReportInput, arg2 ...request.Option) (*sesv2.CreateDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeliverabilityTestReportWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeliverabilityTestReportWithContext indicates an expected call of CreateDeliverabilityTestReportWithContext
func (mr *MockSESV2APIMockRecorder) CreateDeliverabilityTestReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliverabilityTestReportWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateDeliverabilityTestReportWithContext), varargs...)
}

// CreateEmailIdentity mocks base method
func (m *MockSESV2API) CreateEmailIdentity(arg0 *sesv2.CreateEmailIdentityInput) (*sesv2.CreateEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailIdentity", arg0)
	ret0, _ := ret[0].(*sesv2.CreateEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailIdentity indicates an expected call of CreateEmailIdentity
func (mr *MockSESV2APIMockRecorder) CreateEmailIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentity", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailIdentity), arg0)
}

// CreateEmailIdentityRequest mocks base method
func (m *MockSESV2API) CreateEmailIdentityRequest(arg0 *sesv2.CreateEmailIdentityInput) (*request.Request, *sesv2.CreateEmailIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateEmailIdentityOutput)
	return ret0, ret1
}

// CreateEmailIdentityRequest indicates an expected call of CreateEmailIdentityRequest
func (mr *MockSESV2APIMockRecorder) CreateEmailIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentityRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailIdentityRequest), arg0)
}

// CreateEmailIdentityWithContext mocks base method
func (m *MockSESV2API) CreateEmailIdentityWithContext(arg0 context.Context, arg1 *sesv2.CreateEmailIdentityInput, arg2 ...request.Option) (*sesv2.CreateEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmailIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailIdentityWithContext indicates an expected call of CreateEmailIdentityWithContext
func (mr *MockSESV2APIMockRecorder) CreateEmailIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentityWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailIdentityWithContext), varargs...)
}

// DeleteConfigurationSet mocks base method
func (m *MockSESV2API) DeleteConfigurationSet(arg0 *sesv2.DeleteConfigurationSetInput) (*sesv2.DeleteConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSet", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSet indicates an expected call of DeleteConfigurationSet
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSet", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSet), arg0)
}

// DeleteConfigurationSetEventDestination mocks base method
func (m *MockSESV2API) DeleteConfigurationSetEventDestination(arg0 *sesv2.DeleteConfigurationSetEventDestinationInput) (*sesv2.DeleteConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSetEventDestination", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSetEventDestination indicates an expected call of DeleteConfigurationSetEventDestination
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSetEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetEventDestination", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSetEventDestination), arg0)
}

// DeleteConfigurationSetEventDestinationRequest mocks base method
func (m *MockSESV2API) DeleteConfigurationSetEventDestinationRequest(arg0 *sesv2.DeleteConfigurationSetEventDestinationInput) (*request.Request, *sesv2.DeleteConfigurationSetEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSetEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteConfigurationSetEventDestinationOutput)
	return ret0, ret1
}

// DeleteConfigurationSetEventDestinationRequest indicates an expected call of DeleteConfigurationSetEventDestinationRequest
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSetEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetEventDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSetEventDestinationRequest), arg0)
}

// DeleteConfigurationSetEventDestinationWithContext mocks base method
func (m *MockSESV2API) DeleteConfigurationSetEventDestinationWithContext(arg0 context.Context, arg1 *sesv2.DeleteConfigurationSetEventDestinationInput, arg2 ...request.Option) (*sesv2.DeleteConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationSetEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSetEventDestinationWithContext indicates an expected call of DeleteConfigurationSetEventDestinationWithContext
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSetEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetEventDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSetEventDestinationWithContext), varargs...)
}

// DeleteConfigurationSetRequest mocks base method
func (m *MockSESV2API) DeleteConfigurationSetRequest(arg0 *sesv2.DeleteConfigurationSetInput) (*request.Request, *sesv2.DeleteConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteConfigurationSetOutput)
	return ret0, ret1
}

// DeleteConfigurationSetRequest indicates an expected call of DeleteConfigurationSetRequest
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSetRequest), arg0)
}

// DeleteConfigurationSetWithContext mocks base method
func (m *MockSESV2API) DeleteConfigurationSetWithContext(arg0 context.Context, arg1 *sesv2.DeleteConfigurationSetInput, arg2 ...request.Option) (*sesv2.DeleteConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSetWithContext indicates an expected call of DeleteConfigurationSetWithContext
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSetWithContext), varargs...)
}

// DeleteDedicatedIpPool mocks base method
func (m *MockSESV2API) DeleteDedicatedIpPool(arg0 *sesv2.DeleteDedicatedIpPoolInput) (*sesv2.DeleteDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDedicatedIpPool", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDedicatedIpPool indicates an expected call of DeleteDedicatedIpPool
func (mr *MockSESV2APIMockRecorder) DeleteDedicatedIpPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDedicatedIpPool", reflect.TypeOf((*MockSESV2API)(nil).DeleteDedicatedIpPool), arg0)
}

// DeleteDedicatedIpPoolRequest mocks base method
func (m *MockSESV2API) DeleteDedicatedIpPoolRequest(arg0 *sesv2.DeleteDedicatedIpPoolInput) (*request.Request, *sesv2.DeleteDedicatedIpPoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDedicatedIpPoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteDedicatedIpPoolOutput)
	return ret0, ret1
}

// DeleteDedicatedIpPoolRequest indicates an expected call of DeleteDedicatedIpPoolRequest
func (mr *MockSESV2APIMockRecorder) DeleteDedicatedIpPoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDedicatedIpPoolRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteDedicatedIpPoolRequest), arg0)
}

// DeleteDedicatedIpPoolWithContext mocks base method
func (m *MockSESV2API) DeleteDedicatedIpPoolWithContext(arg0 context.Context, arg1 *sesv2.DeleteDedicatedIpPoolInput, arg2 ...request.Option) (*sesv2.DeleteDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDedicatedIpPoolWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDedicatedIpPoolWithContext indicates an expected call of DeleteDedicatedIpPoolWithContext
func (mr *MockSESV2APIMockRecorder) DeleteDedicatedIpPoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDedicatedIpPoolWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteDedicatedIpPoolWithContext), varargs...)
}

// DeleteEmailIdentity mocks base method
func (m *MockSESV2API) DeleteEmailIdentity(arg0 *sesv2.DeleteEmailIdentityInput) (*sesv2.DeleteEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailIdentity", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailIdentity indicates an expected call of DeleteEmailIdentity
func (mr *MockSESV2APIMockRecorder) DeleteEmailIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentity", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailIdentity), arg0)
}

// DeleteEmailIdentityRequest mocks base method
func (m *MockSESV2API) DeleteEmailIdentityRequest(arg0 *sesv2.DeleteEmailIdentityInput) (*request.Request, *sesv2.DeleteEmailIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteEmailIdentityOutput)
	return ret0, ret1
}

// DeleteEmailIdentityRequest indicates an expected call of DeleteEmailIdentityRequest
func (mr *MockSESV2APIMockRecorder) DeleteEmailIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentityRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailIdentityRequest), arg0)
}

// DeleteEmailIdentityWithContext mocks base method
func (m *MockSESV2API) DeleteEmailIdentityWithContext(arg0 context.Context, arg1 *sesv2.DeleteEmailIdentityInput, arg2 ...request.Option) (*sesv2.DeleteEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailIdentityWithContext indicates an expected call of DeleteEmailIdentityWithContext
func (mr *MockSESV2APIMockRecorder) DeleteEmailIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentityWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailIdentityWithContext), varargs...)
}

// DeleteSuppressedDestination mocks base method
func (m *MockSESV2API) DeleteSuppressedDestination(arg0 *sesv2.DeleteSuppressedDestinationInput) (*sesv2.DeleteSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSuppressedDestination", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSuppressedDestination indicates an expected call of DeleteSuppressedDestination
func (mr *MockSESV2APIMockRecorder) DeleteSuppressedDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuppressedDestination", reflect.TypeOf((*MockSESV2API)(nil).DeleteSuppressedDestination), arg0)
}

// DeleteSuppressedDestinationRequest mocks base method
func (m *MockSESV2API) DeleteSuppressedDestinationRequest(arg0 *sesv2.DeleteSuppressedDestinationInput) (*request.Request, *sesv2.DeleteSuppressedDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSuppressedDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteSuppressedDestinationOutput)
	return ret0, ret1
}

// DeleteSuppressedDestinationRequest indicates an expected call of DeleteSuppressedDestinationRequest
func (mr *MockSESV2APIMockRecorder) DeleteSuppressedDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuppressedDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteSuppressedDestinationRequest), arg0)
}

// DeleteSuppressedDestinationWithContext mocks base method
func (m *MockSESV2API) DeleteSuppressedDestinationWithContext(arg0 context.Context, arg1 *sesv2.DeleteSuppressedDestinationInput, arg2 ...request.Option) (*sesv2.DeleteSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSuppressedDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSuppressedDestinationWithContext indicates an expected call of DeleteSuppressedDestinationWithContext
func (mr *MockSESV2APIMockRecorder) DeleteSuppressedDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuppressedDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteSuppressedDestinationWithContext), varargs...)
}

// GetAccount mocks base method
func (m *MockSESV2API) GetAccount(arg0 *sesv2.GetAccountInput) (*sesv2.GetAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(*sesv2.GetAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockSESV2APIMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockSESV2API)(nil).GetAccount), arg0)
}

// GetAccountRequest mocks base method
func (m *MockSESV2API) GetAccountRequest(arg0 *sesv2.GetAccountInput) (*request.Request, *sesv2.GetAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetAccountOutput)
	return ret0, ret1
}

// GetAccountRequest indicates an expected call of GetAccountRequest
func (mr *MockSESV2APIMockRecorder) GetAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountRequest", reflect.TypeOf((*MockSESV2API)(nil).GetAccountRequest), arg0)
}

// GetAccountWithContext mocks base method
func (m *MockSESV2API) GetAccountWithContext(arg0 context.Context, arg1 *sesv2.GetAccountInput, arg2 ...request.Option) (*sesv2.GetAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountWithContext indicates an expected call of GetAccountWithContext
func (mr *MockSESV2APIMockRecorder) GetAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetAccountWithContext), varargs...)
}

// GetBlacklistReports mocks base method
func (m *MockSESV2API) GetBlacklistReports(arg0 *sesv2.GetBlacklistReportsInput) (*sesv2.GetBlacklistReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlacklistReports", arg0)
	ret0, _ := ret[0].(*sesv2.GetBlacklistReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlacklistReports indicates an expected call of GetBlacklistReports
func (mr *MockSESV2APIMockRecorder) GetBlacklistReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklistReports", reflect.TypeOf((*MockSESV2API)(nil).GetBlacklistReports), arg0)
}

// GetBlacklistReportsRequest mocks base method
func (m *MockSESV2API) GetBlacklistReportsRequest(arg0 *sesv2.GetBlacklistReportsInput) (*request.Request, *sesv2.GetBlacklistReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlacklistReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetBlacklistReportsOutput)
	return ret0, ret1
}

// GetBlacklistReportsRequest indicates an expected call of GetBlacklistReportsRequest
func (mr *MockSESV2APIMockRecorder) GetBlacklistReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklistReportsRequest", reflect.TypeOf((*MockSESV2API)(nil).GetBlacklistReportsRequest), arg0)
}

// GetBlacklistReportsWithContext mocks base method
func (m *MockSESV2API) GetBlacklistReportsWithContext(arg0 context.Context, arg1 *sesv2.GetBlacklistReportsInput, arg2 ...request.Option) (*sesv2.GetBlacklistReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlacklistReportsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetBlacklistReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlacklistReportsWithContext indicates an expected call of GetBlacklistReportsWithContext
func (mr *MockSESV2APIMockRecorder) GetBlacklistReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklistReportsWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetBlacklistReportsWithContext), varargs...)
}

// GetConfigurationSet mocks base method
func (m *MockSESV2API) GetConfigurationSet(arg0 *sesv2.GetConfigurationSetInput) (*sesv2.GetConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSet", arg0)
	ret0, _ := ret[0].(*sesv2.GetConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSet indicates an expected call of GetConfigurationSet
func (mr *MockSESV2APIMockRecorder) GetConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSet", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSet), arg0)
}

// GetConfigurationSetEventDestinations mocks base method
func (m *MockSESV2API) GetConfigurationSetEventDestinations(arg0 *sesv2.GetConfigurationSetEventDestinationsInput) (*sesv2.GetConfigurationSetEventDestinationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSetEventDestinations", arg0)
	ret0, _ := ret[0].(*sesv2.GetConfigurationSetEventDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSetEventDestinations indicates an expected call of GetConfigurationSetEventDestinations
func (mr *MockSESV2APIMockRecorder) GetConfigurationSetEventDestinations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetEventDestinations", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSetEventDestinations), arg0)
}

// GetConfigurationSetEventDestinationsRequest mocks base method
func (m *MockSESV2API) GetConfigurationSetEventDestinationsRequest(arg0 *sesv2.GetConfigurationSetEventDestinationsInput) (*request.Request, *sesv2.GetConfigurationSetEventDestinationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSetEventDestinationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetConfigurationSetEventDestinationsOutput)
	return ret0, ret1
}

// GetConfigurationSetEventDestinationsRequest indicates an expected call of GetConfigurationSetEventDestinationsRequest
func (mr *MockSESV2APIMockRecorder) GetConfigurationSetEventDestinationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetEventDestinationsRequest", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSetEventDestinationsRequest), arg0)
}

// GetConfigurationSetEventDestinationsWithContext mocks base method
func (m *MockSESV2API) GetConfigurationSetEventDestinationsWithContext(arg0 context.Context, arg1 *sesv2.GetConfigurationSetEventDestinationsInput, arg2 ...request.Option) (*sesv2.GetConfigurationSetEventDestinationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationSetEventDestinationsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetConfigurationSetEventDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSetEventDestinationsWithContext indicates an expected call of GetConfigurationSetEventDestinationsWithContext
func (mr *MockSESV2APIMockRecorder) GetConfigurationSetEventDestinationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetEventDestinationsWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSetEventDestinationsWithContext), varargs...)
}

// GetConfigurationSetRequest mocks base method
func (m *MockSESV2API) GetConfigurationSetRequest(arg0 *sesv2.GetConfigurationSetInput) (*request.Request, *sesv2.GetConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetConfigurationSetOutput)
	return ret0, ret1
}

// GetConfigurationSetRequest indicates an expected call of GetConfigurationSetRequest
func (mr *MockSESV2APIMockRecorder) GetConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetRequest", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSetRequest), arg0)
}

// GetConfigurationSetWithContext mocks base method
func (m *MockSESV2API) GetConfigurationSetWithContext(arg0 context.Context, arg1 *sesv2.GetConfigurationSetInput, arg2 ...request.Option) (*sesv2.GetConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSetWithContext indicates an expected call of GetConfigurationSetWithContext
func (mr *MockSESV2APIMockRecorder) GetConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSetWithContext), varargs...)
}

// GetDedicatedIp mocks base method
func (m *MockSESV2API) GetDedicatedIp(arg0 *sesv2.GetDedicatedIpInput) (*sesv2.GetDedicatedIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIp", arg0)
	ret0, _ := ret[0].(*sesv2.GetDedicatedIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIp indicates an expected call of GetDedicatedIp
func (mr *MockSESV2APIMockRecorder) GetDedicatedIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIp", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIp), arg0)
}

// GetDedicatedIpRequest mocks base method
func (m *MockSESV2API) GetDedicatedIpRequest(arg0 *sesv2.GetDedicatedIpInput) (*request.Request, *sesv2.GetDedicatedIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDedicatedIpOutput)
	return ret0, ret1
}

// GetDedicatedIpRequest indicates an expected call of GetDedicatedIpRequest
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpRequest), arg0)
}

// GetDedicatedIpWithContext mocks base method
func (m *MockSESV2API) GetDedicatedIpWithContext(arg0 context.Context, arg1 *sesv2.GetDedicatedIpInput, arg2 ...request.Option) (*sesv2.GetDedicatedIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDedicatedIpWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDedicatedIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIpWithContext indicates an expected call of GetDedicatedIpWithContext
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpWithContext), varargs...)
}

// GetDedicatedIps mocks base method
func (m *MockSESV2API) GetDedicatedIps(arg0 *sesv2.GetDedicatedIpsInput) (*sesv2.GetDedicatedIpsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIps", arg0)
	ret0, _ := ret[0].(*sesv2.GetDedicatedIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIps indicates an expected call of GetDedicatedIps
func (mr *MockSESV2APIMockRecorder) GetDedicatedIps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIps", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIps), arg0)
}

// GetDedicatedIpsPages mocks base method
func (m *MockSESV2API) GetDedicatedIpsPages(arg0 *sesv2.GetDedicatedIpsInput, arg1 func(*sesv2.GetDedicatedIpsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIpsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDedicatedIpsPages indicates an expected call of GetDedicatedIpsPages
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsPages", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpsPages), arg0, arg1)
}

// GetDedicatedIpsPagesWithContext mocks base method
func (m *MockSESV2API) GetDedicatedIpsPagesWithContext(arg0 context.Context, arg1 *sesv2.GetDedicatedIpsInput, arg2 func(*sesv2.GetDedicatedIpsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDedicatedIpsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDedicatedIpsPagesWithContext indicates an expected call of GetDedicatedIpsPagesWithContext
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpsPagesWithContext), varargs...)
}

// GetDedicatedIpsRequest mocks base method
func (m *MockSESV2API) GetDedicatedIpsRequest(arg0 *sesv2.GetDedicatedIpsInput) (*request.Request, *sesv2.GetDedicatedIpsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIpsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDedicatedIpsOutput)
	return ret0, ret1
}

// GetDedicatedIpsRequest indicates an expected call of GetDedicatedIpsRequest
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpsRequest), arg0)
}

// GetDedicatedIpsWithContext mocks base method
func (m *MockSESV2API) GetDedicatedIpsWithContext(arg0 context.Context, arg1 *sesv2.GetDedicatedIpsInput, arg2 ...request.Option) (*sesv2.GetDedicatedIpsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDedicatedIpsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDedicatedIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIpsWithContext indicates an expected call of GetDedicatedIpsWithContext
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpsWithContext), varargs...)
}

// GetDeliverabilityDashboardOptions mocks base method
func (m *MockSESV2API) GetDeliverabilityDashboardOptions(arg0 *sesv2.GetDeliverabilityDashboardOptionsInput) (*sesv2.GetDeliverabilityDashboardOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityDashboardOptions", arg0)
	ret0, _ := ret[0].(*sesv2.GetDeliverabilityDashboardOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityDashboardOptions indicates an expected call of GetDeliverabilityDashboardOptions
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityDashboardOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityDashboardOptions", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityDashboardOptions), arg0)
}

// GetDeliverabilityDashboardOptionsRequest mocks base method
func (m *MockSESV2API) GetDeliverabilityDashboardOptionsRequest(arg0 *sesv2.GetDeliverabilityDashboardOptionsInput) (*request.Request, *sesv2.GetDeliverabilityDashboardOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityDashboardOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDeliverabilityDashboardOptionsOutput)
	return ret0, ret1
}

// GetDeliverabilityDashboardOptionsRequest indicates an expected call of GetDeliverabilityDashboardOptionsRequest
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityDashboardOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityDashboardOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityDashboardOptionsRequest), arg0)
}

// GetDeliverabilityDashboardOptionsWithContext mocks base method
func (m *MockSESV2API) GetDeliverabilityDashboardOptionsWithContext(arg0 context.Context, arg1 *sesv2.GetDeliverabilityDashboardOptionsInput, arg2 ...request.Option) (*sesv2.GetDeliverabilityDashboardOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeliverabilityDashboardOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDeliverabilityDashboardOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityDashboardOptionsWithContext indicates an expected call of GetDeliverabilityDashboardOptionsWithContext
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityDashboardOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityDashboardOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityDashboardOptionsWithContext), varargs...)
}

// GetDeliverabilityTestReport mocks base method
func (m *MockSESV2API) GetDeliverabilityTestReport(arg0 *sesv2.GetDeliverabilityTestReportInput) (*sesv2.GetDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityTestReport", arg0)
	ret0, _ := ret[0].(*sesv2.GetDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityTestReport indicates an expected call of GetDeliverabilityTestReport
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityTestReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityTestReport", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityTestReport), arg0)
}

// GetDeliverabilityTestReportRequest mocks base method
func (m *MockSESV2API) GetDeliverabilityTestReportRequest(arg0 *sesv2.GetDeliverabilityTestReportInput) (*request.Request, *sesv2.GetDeliverabilityTestReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityTestReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDeliverabilityTestReportOutput)
	return ret0, ret1
}

// GetDeliverabilityTestReportRequest indicates an expected call of GetDeliverabilityTestReportRequest
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityTestReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityTestReportRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityTestReportRequest), arg0)
}

// GetDeliverabilityTestReportWithContext mocks base method
func (m *MockSESV2API) GetDeliverabilityTestReportWithContext(arg0 context.Context, arg1 *sesv2.GetDeliverabilityTestReportInput, arg2 ...request.Option) (*sesv2.GetDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeliverabilityTestReportWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityTestReportWithContext indicates an expected call of GetDeliverabilityTestReportWithContext
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityTestReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityTestReportWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityTestReportWithContext), varargs...)
}

// GetDomainDeliverabilityCampaign mocks base method
func (m *MockSESV2API) GetDomainDeliverabilityCampaign(arg0 *sesv2.GetDomainDeliverabilityCampaignInput) (*sesv2.GetDomainDeliverabilityCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainDeliverabilityCampaign", arg0)
	ret0, _ := ret[0].(*sesv2.GetDomainDeliverabilityCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainDeliverabilityCampaign indicates an expected call of GetDomainDeliverabilityCampaign
func (mr *MockSESV2APIMockRecorder) GetDomainDeliverabilityCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDeliverabilityCampaign", reflect.TypeOf((*MockSESV2API)(nil).GetDomainDeliverabilityCampaign), arg0)
}

// GetDomainDeliverabilityCampaignRequest mocks base method
func (m *MockSESV2API) GetDomainDeliverabilityCampaignRequest(arg0 *sesv2.GetDomainDeliverabilityCampaignInput) (*request.Request, *sesv2.GetDomainDeliverabilityCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainDeliverabilityCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDomainDeliverabilityCampaignOutput)
	return ret0, ret1
}

// GetDomainDeliverabilityCampaignRequest indicates an expected call of GetDomainDeliverabilityCampaignRequest
func (mr *MockSESV2APIMockRecorder) GetDomainDeliverabilityCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDeliverabilityCampaignRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDomainDeliverabilityCampaignRequest), arg0)
}

// GetDomainDeliverabilityCampaignWithContext mocks base method
func (m *MockSESV2API) GetDomainDeliverabilityCampaignWithContext(arg0 context.Context, arg1 *sesv2.GetDomainDeliverabilityCampaignInput, arg2 ...request.Option) (*sesv2.GetDomainDeliverabilityCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainDeliverabilityCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDomainDeliverabilityCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainDeliverabilityCampaignWithContext indicates an expected call of GetDomainDeliverabilityCampaignWithContext
func (mr *MockSESV2APIMockRecorder) GetDomainDeliverabilityCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDeliverabilityCampaignWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDomainDeliverabilityCampaignWithContext), varargs...)
}

// GetDomainStatisticsReport mocks base method
func (m *MockSESV2API) GetDomainStatisticsReport(arg0 *sesv2.GetDomainStatisticsReportInput) (*sesv2.GetDomainStatisticsReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainStatisticsReport", arg0)
	ret0, _ := ret[0].(*sesv2.GetDomainStatisticsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainStatisticsReport indicates an expected call of GetDomainStatisticsReport
func (mr *MockSESV2APIMockRecorder) GetDomainStatisticsReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStatisticsReport", reflect.TypeOf((*MockSESV2API)(nil).GetDomainStatisticsReport), arg0)
}

// GetDomainStatisticsReportRequest mocks base method
func (m *MockSESV2API) GetDomainStatisticsReportRequest(arg0 *sesv2.GetDomainStatisticsReportInput) (*request.Request, *sesv2.GetDomainStatisticsReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainStatisticsReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDomainStatisticsReportOutput)
	return ret0, ret1
}

// GetDomainStatisticsReportRequest indicates an expected call of GetDomainStatisticsReportRequest
func (mr *MockSESV2APIMockRecorder) GetDomainStatisticsReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStatisticsReportRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDomainStatisticsReportRequest), arg0)
}

// GetDomainStatisticsReportWithContext mocks base method
func (m *MockSESV2API) GetDomainStatisticsReportWithContext(arg0 context.Context, arg1 *sesv2.GetDomainStatisticsReportInput, arg2 ...request.Option) (*sesv2.GetDomainStatisticsReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainStatisticsReportWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDomainStatisticsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainStatisticsReportWithContext indicates an expected call of GetDomainStatisticsReportWithContext
func (mr *MockSESV2APIMockRecorder) GetDomainStatisticsReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStatisticsReportWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDomainStatisticsReportWithContext), varargs...)
}

// GetEmailIdentity mocks base method
func (m *MockSESV2API) GetEmailIdentity(arg0 *sesv2.GetEmailIdentityInput) (*sesv2.GetEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailIdentity", arg0)
	ret0, _ := ret[0].(*sesv2.GetEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailIdentity indicates an expected call of GetEmailIdentity
func (mr *MockSESV2APIMockRecorder) GetEmailIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentity", reflect.TypeOf((*MockSESV2API)(nil).GetEmailIdentity), arg0)
}

// GetEmailIdentityRequest mocks base method
func (m *MockSESV2API) GetEmailIdentityRequest(arg0 *sesv2.GetEmailIdentityInput) (*request.Request, *sesv2.GetEmailIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetEmailIdentityOutput)
	return ret0, ret1
}

// GetEmailIdentityRequest indicates an expected call of GetEmailIdentityRequest
func (mr *MockSESV2APIMockRecorder) GetEmailIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentityRequest", reflect.TypeOf((*MockSESV2API)(nil).GetEmailIdentityRequest), arg0)
}

// GetEmailIdentityWithContext mocks base method
func (m *MockSESV2API) GetEmailIdentityWithContext(arg0 context.Context, arg1 *sesv2.GetEmailIdentityInput, arg2 ...request.Option) (*sesv2.GetEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailIdentityWithContext indicates an expected call of GetEmailIdentityWithContext
func (mr *MockSESV2APIMockRecorder) GetEmailIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentityWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetEmailIdentityWithContext), varargs...)
}

// GetSuppressedDestination mocks base method
func (m *MockSESV2API) GetSuppressedDestination(arg0 *sesv2.GetSuppressedDestinationInput) (*sesv2.GetSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuppressedDestination", arg0)
	ret0, _ := ret[0].(*sesv2.GetSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuppressedDestination indicates an expected call of GetSuppressedDestination
func (mr *MockSESV2APIMockRecorder) GetSuppressedDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuppressedDestination", reflect.TypeOf((*MockSESV2API)(nil).GetSuppressedDestination), arg0)
}

// GetSuppressedDestinationRequest mocks base method
func (m *MockSESV2API) GetSuppressedDestinationRequest(arg0 *sesv2.GetSuppressedDestinationInput) (*request.Request, *sesv2.GetSuppressedDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuppressedDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetSuppressedDestinationOutput)
	return ret0, ret1
}

// GetSuppressedDestinationRequest indicates an expected call of GetSuppressedDestinationRequest
func (mr *MockSESV2APIMockRecorder) GetSuppressedDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuppressedDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).GetSuppressedDestinationRequest), arg0)
}

// GetSuppressedDestinationWithContext mocks base method
func (m *MockSESV2API) GetSuppressedDestinationWithContext(arg0 context.Context, arg1 *sesv2.GetSuppressedDestinationInput, arg2 ...request.Option) (*sesv2.GetSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuppressedDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuppressedDestinationWithContext indicates an expected call of GetSuppressedDestinationWithContext
func (mr *MockSESV2APIMockRecorder) GetSuppressedDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuppressedDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetSuppressedDestinationWithContext), varargs...)
}

// ListConfigurationSets mocks base method
func (m *MockSESV2API) ListConfigurationSets(arg0 *sesv2.ListConfigurationSetsInput) (*sesv2.ListConfigurationSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationSets", arg0)
	ret0, _ := ret[0].(*sesv2.ListConfigurationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationSets indicates an expected call of ListConfigurationSets
func (mr *MockSESV2APIMockRecorder) ListConfigurationSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSets", reflect.TypeOf((*MockSESV2API)(nil).ListConfigurationSets), arg0)
}

// ListConfigurationSetsPages mocks base method
func (m *MockSESV2API) ListConfigurationSetsPages(arg0 *sesv2.ListConfigurationSetsInput, arg1 func(*sesv2.ListConfigurationSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationSetsPages indicates an expected call of ListConfigurationSetsPages
func (mr *MockSESV2APIMockRecorder) ListConfigurationSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsPages", reflect.TypeOf((*MockSESV2API)(nil).ListConfigurationSetsPages), arg0, arg1)
}

// ListConfigurationSetsPagesWithContext mocks base method
func (m *MockSESV2API) ListConfigurationSetsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListConfigurationSetsInput, arg2 func(*sesv2.ListConfigurationSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationSetsPagesWithContext indicates an expected call of ListConfigurationSetsPagesWithContext
func (mr *MockSESV2APIMockRecorder) ListConfigurationSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListConfigurationSetsPagesWithContext), varargs...)
}

// ListConfigurationSetsRequest mocks base method
func (m *MockSESV2API) ListConfigurationSetsRequest(arg0 *sesv2.ListConfigurationSetsInput) (*request.Request, *sesv2.ListConfigurationSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListConfigurationSetsOutput)
	return ret0, ret1
}

// ListConfigurationSetsRequest indicates an expected call of ListConfigurationSetsRequest
func (mr *MockSESV2APIMockRecorder) ListConfigurationSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListConfigurationSetsRequest), arg0)
}

// ListConfigurationSetsWithContext mocks base method
func (m *MockSESV2API) ListConfigurationSetsWithContext(arg0 context.Context, arg1 *sesv2.ListConfigurationSetsInput, arg2 ...request.Option) (*sesv2.ListConfigurationSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationSetsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListConfigurationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationSetsWithContext indicates an expected call of ListConfigurationSetsWithContext
func (mr *MockSESV2APIMockRecorder) ListConfigurationSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListConfigurationSetsWithContext), varargs...)
}

// ListDedicatedIpPools mocks base method
func (m *MockSESV2API) ListDedicatedIpPools(arg0 *sesv2.ListDedicatedIpPoolsInput) (*sesv2.ListDedicatedIpPoolsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDedicatedIpPools", arg0)
	ret0, _ := ret[0].(*sesv2.ListDedicatedIpPoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDedicatedIpPools indicates an expected call of ListDedicatedIpPools
func (mr *MockSESV2APIMockRecorder) ListDedicatedIpPools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPools", reflect.TypeOf((*MockSESV2API)(nil).ListDedicatedIpPools), arg0)
}

// ListDedicatedIpPoolsPages mocks base method
func (m *MockSESV2API) ListDedicatedIpPoolsPages(arg0 *sesv2.ListDedicatedIpPoolsInput, arg1 func(*sesv2.ListDedicatedIpPoolsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDedicatedIpPoolsPages indicates an expected call of ListDedicatedIpPoolsPages
func (mr *MockSESV2APIMockRecorder) ListDedicatedIpPoolsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsPages", reflect.TypeOf((*MockSESV2API)(nil).ListDedicatedIpPoolsPages), arg0, arg1)
}

// ListDedicatedIpPoolsPagesWithContext mocks base method
func (m *MockSESV2API) ListDedicatedIpPoolsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListDedicatedIpPoolsInput, arg2 func(*sesv2.ListDedicatedIpPoolsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDedicatedIpPoolsPagesWithContext indicates an expected call of ListDedicatedIpPoolsPagesWithContext
func (mr *MockSESV2APIMockRecorder) ListDedicatedIpPoolsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDedicatedIpPoolsPagesWithContext), varargs...)
}

// ListDedicatedIpPoolsRequest mocks base method
func (m *MockSESV2API) ListDedicatedIpPoolsRequest(arg0 *sesv2.ListDedicatedIpPoolsInput) (*request.Request, *sesv2.ListDedicatedIpPoolsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListDedicatedIpPoolsOutput)
	return ret0, ret1
}

// ListDedicatedIpPoolsRequest indicates an expected call of ListDedicatedIpPoolsRequest
func (mr *MockSESV2APIMockRecorder) ListDedicatedIpPoolsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListDedicatedIpPoolsRequest), arg0)
}

// ListDedicatedIpPoolsWithContext mocks base method
func (m *MockSESV2API) ListDedicatedIpPoolsWithContext(arg0 context.Context, arg1 *sesv2.ListDedicatedIpPoolsInput, arg2 ...request.Option) (*sesv2.ListDedicatedIpPoolsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListDedicatedIpPoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDedicatedIpPoolsWithContext indicates an expected call of ListDedicatedIpPoolsWithContext
func (mr *MockSESV2APIMockRecorder) ListDedicatedIpPoolsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDedicatedIpPoolsWithContext), varargs...)
}

// ListDeliverabilityTestReports mocks base method
func (m *MockSESV2API) ListDeliverabilityTestReports(arg0 *sesv2.ListDeliverabilityTestReportsInput) (*sesv2.ListDeliverabilityTestReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReports", arg0)
	ret0, _ := ret[0].(*sesv2.ListDeliverabilityTestReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeliverabilityTestReports indicates an expected call of ListDeliverabilityTestReports
func (mr *MockSESV2APIMockRecorder) ListDeliverabilityTestReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReports", reflect.TypeOf((*MockSESV2API)(nil).ListDeliverabilityTestReports), arg0)
}

// ListDeliverabilityTestReportsPages mocks base method
func (m *MockSESV2API) ListDeliverabilityTestReportsPages(arg0 *sesv2.ListDeliverabilityTestReportsInput, arg1 func(*sesv2.ListDeliverabilityTestReportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeliverabilityTestReportsPages indicates an expected call of ListDeliverabilityTestReportsPages
func (mr *MockSESV2APIMockRecorder) ListDeliverabilityTestReportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsPages", reflect.TypeOf((*MockSESV2API)(nil).ListDeliverabilityTestReportsPages), arg0, arg1)
}

// ListDeliverabilityTestReportsPagesWithContext mocks base method
func (m *MockSESV2API) ListDeliverabilityTestReportsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListDeliverabilityTestReportsInput, arg2 func(*sesv2.ListDeliverabilityTestReportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeliverabilityTestReportsPagesWithContext indicates an expected call of ListDeliverabilityTestReportsPagesWithContext
func (mr *MockSESV2APIMockRecorder) ListDeliverabilityTestReportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDeliverabilityTestReportsPagesWithContext), varargs...)
}

// ListDeliverabilityTestReportsRequest mocks base method
func (m *MockSESV2API) ListDeliverabilityTestReportsRequest(arg0 *sesv2.ListDeliverabilityTestReportsInput) (*request.Request, *sesv2.ListDeliverabilityTestReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListDeliverabilityTestReportsOutput)
	return ret0, ret1
}

// ListDeliverabilityTestReportsRequest indicates an expected call of ListDeliverabilityTestReportsRequest
func (mr *MockSESV2APIMockRecorder) ListDeliverabilityTestReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListDeliverabilityTestReportsRequest), arg0)
}

// ListDeliverabilityTestReportsWithContext mocks base method
func (m *MockSESV2API) ListDeliverabilityTestReportsWithContext(arg0 context.Context, arg1 *sesv2.ListDeliverabilityTestReportsInput, arg2 ...request.Option) (*sesv2.ListDeliverabilityTestReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListDeliverabilityTestReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeliverabilityTestReportsWithContext indicates an expected call of ListDeliverabilityTestReportsWithContext
func (mr *MockSESV2APIMockRecorder) ListDeliverabilityTestReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDeliverabilityTestReportsWithContext), varargs...)
}

// ListDomainDeliverabilityCampaigns mocks base method
func (m *MockSESV2API) ListDomainDeliverabilityCampaigns(arg0 *sesv2.ListDomainDeliverabilityCampaignsInput) (*sesv2.ListDomainDeliverabilityCampaignsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaigns", arg0)
	ret0, _ := ret[0].(*sesv2.ListDomainDeliverabilityCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainDeliverabilityCampaigns indicates an expected call of ListDomainDeliverabilityCampaigns
func (mr *MockSESV2APIMockRecorder) ListDomainDeliverabilityCampaigns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaigns", reflect.TypeOf((*MockSESV2API)(nil).ListDomainDeliverabilityCampaigns), arg0)
}

// ListDomainDeliverabilityCampaignsPages mocks base method
func (m *MockSESV2API) ListDomainDeliverabilityCampaignsPages(arg0 *sesv2.ListDomainDeliverabilityCampaignsInput, arg1 func(*sesv2.ListDomainDeliverabilityCampaignsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainDeliverabilityCampaignsPages indicates an expected call of ListDomainDeliverabilityCampaignsPages
func (mr *MockSESV2APIMockRecorder) ListDomainDeliverabilityCampaignsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsPages", reflect.TypeOf((*MockSESV2API)(nil).ListDomainDeliverabilityCampaignsPages), arg0, arg1)
}

// ListDomainDeliverabilityCampaignsPagesWithContext mocks base method
func (m *MockSESV2API) ListDomainDeliverabilityCampaignsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListDomainDeliverabilityCampaignsInput, arg2 func(*sesv2.ListDomainDeliverabilityCampaignsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainDeliverabilityCampaignsPagesWithContext indicates an expected call of ListDomainDeliverabilityCampaignsPagesWithContext
func (mr *MockSESV2APIMockRecorder) ListDomainDeliverabilityCampaignsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDomainDeliverabilityCampaignsPagesWithContext), varargs...)
}

// ListDomainDeliverabilityCampaignsRequest mocks base method
func (m *MockSESV2API) ListDomainDeliverabilityCampaignsRequest(arg0 *sesv2.ListDomainDeliverabilityCampaignsInput) (*request.Request, *sesv2.ListDomainDeliverabilityCampaignsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListDomainDeliverabilityCampaignsOutput)
	return ret0, ret1
}

// ListDomainDeliverabilityCampaignsRequest indicates an expected call of ListDomainDeliverabilityCampaignsRequest
func (mr *MockSESV2APIMockRecorder) ListDomainDeliverabilityCampaignsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListDomainDeliverabilityCampaignsRequest), arg0)
}

// ListDomainDeliverabilityCampaignsWithContext mocks base method
func (m *MockSESV2API) ListDomainDeliverabilityCampaignsWithContext(arg0 context.Context, arg1 *sesv2.ListDomainDeliverabilityCampaignsInput, arg2 ...request.Option) (*sesv2.ListDomainDeliverabilityCampaignsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListDomainDeliverabilityCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainDeliverabilityCampaignsWithContext indicates an expected call of ListDomainDeliverabilityCampaignsWithContext
func (mr *MockSESV2APIMockRecorder) ListDomainDeliverabilityCampaignsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDomainDeliverabilityCampaignsWithContext), varargs...)
}

// ListEmailIdentities mocks base method
func (m *MockSESV2API) ListEmailIdentities(arg0 *sesv2.ListEmailIdentitiesInput) (*sesv2.ListEmailIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailIdentities", arg0)
	ret0, _ := ret[0].(*sesv2.ListEmailIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailIdentities indicates an expected call of ListEmailIdentities
func (mr *MockSESV2APIMockRecorder) ListEmailIdentities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentities", reflect.TypeOf((*MockSESV2API)(nil).ListEmailIdentities), arg0)
}

// ListEmailIdentitiesPages mocks base method
func (m *MockSESV2API) ListEmailIdentitiesPages(arg0 *sesv2.ListEmailIdentitiesInput, arg1 func(*sesv2.ListEmailIdentitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailIdentitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEmailIdentitiesPages indicates an expected call of ListEmailIdentitiesPages
func (mr *MockSESV2APIMockRecorder) ListEmailIdentitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesPages", reflect.TypeOf((*MockSESV2API)(nil).ListEmailIdentitiesPages), arg0, arg1)
}

// ListEmailIdentitiesPagesWithContext mocks base method
func (m *MockSESV2API) ListEmailIdentitiesPagesWithContext(arg0 context.Context, arg1 *sesv2.ListEmailIdentitiesInput, arg2 func(*sesv2.ListEmailIdentitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailIdentitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEmailIdentitiesPagesWithContext indicates an expected call of ListEmailIdentitiesPagesWithContext
func (mr *MockSESV2APIMockRecorder) ListEmailIdentitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListEmailIdentitiesPagesWithContext), varargs...)
}

// ListEmailIdentitiesRequest mocks base method
func (m *MockSESV2API) ListEmailIdentitiesRequest(arg0 *sesv2.ListEmailIdentitiesInput) (*request.Request, *sesv2.ListEmailIdentitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailIdentitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListEmailIdentitiesOutput)
	return ret0, ret1
}

// ListEmailIdentitiesRequest indicates an expected call of ListEmailIdentitiesRequest
func (mr *MockSESV2APIMockRecorder) ListEmailIdentitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesRequest", reflect.TypeOf((*MockSESV2API)(nil).ListEmailIdentitiesRequest), arg0)
}

// ListEmailIdentitiesWithContext mocks base method
func (m *MockSESV2API) ListEmailIdentitiesWithContext(arg0 context.Context, arg1 *sesv2.ListEmailIdentitiesInput, arg2 ...request.Option) (*sesv2.ListEmailIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailIdentitiesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListEmailIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailIdentitiesWithContext indicates an expected call of ListEmailIdentitiesWithContext
func (mr *MockSESV2APIMockRecorder) ListEmailIdentitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListEmailIdentitiesWithContext), varargs...)
}

// ListSuppressedDestinations mocks base method
func (m *MockSESV2API) ListSuppressedDestinations(arg0 *sesv2.ListSuppressedDestinationsInput) (*sesv2.ListSuppressedDestinationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuppressedDestinations", arg0)
	ret0, _ := ret[0].(*sesv2.ListSuppressedDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuppressedDestinations indicates an expected call of ListSuppressedDestinations
func (mr *MockSESV2APIMockRecorder) ListSuppressedDestinations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuppressedDestinations", reflect.TypeOf((*MockSESV2API)(nil).ListSuppressedDestinations), arg0)
}

// ListSuppressedDestinationsPages mocks base method
func (m *MockSESV2API) ListSuppressedDestinationsPages(arg0 *sesv2.ListSuppressedDestinationsInput, arg1 func(*sesv2.ListSuppressedDestinationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuppressedDestinationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSuppressedDestinationsPages indicates an expected call of ListSuppressedDestinationsPages
func (mr *MockSESV2APIMockRecorder) ListSuppressedDestinationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuppressedDestinationsPages", reflect.TypeOf((*MockSESV2API)(nil).ListSuppressedDestinationsPages), arg0, arg1)
}

// ListSuppressedDestinationsPagesWithContext mocks base method
func (m *MockSESV2API) ListSuppressedDestinationsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListSuppressedDestinationsInput, arg2 func(*sesv2.ListSuppressedDestinationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuppressedDestinationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSuppressedDestinationsPagesWithContext indicates an expected call of ListSuppressedDestinationsPagesWithContext
func (mr *MockSESV2APIMockRecorder) ListSuppressedDestinationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuppressedDestinationsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListSuppressedDestinationsPagesWithContext), varargs...)
}

// ListSuppressedDestinationsRequest mocks base method
func (m *MockSESV2API) ListSuppressedDestinationsRequest(arg0 *sesv2.ListSuppressedDestinationsInput) (*request.Request, *sesv2.ListSuppressedDestinationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuppressedDestinationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListSuppressedDestinationsOutput)
	return ret0, ret1
}

// ListSuppressedDestinationsRequest indicates an expected call of ListSuppressedDestinationsRequest
func (mr *MockSESV2APIMockRecorder) ListSuppressedDestinationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuppressedDestinationsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListSuppressedDestinationsRequest), arg0)
}

// ListSuppressedDestinationsWithContext mocks base method
func (m *MockSESV2API) ListSuppressedDestinationsWithContext(arg0 context.Context, arg1 *sesv2.ListSuppressedDestinationsInput, arg2 ...request.Option) (*sesv2.ListSuppressedDestinationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuppressedDestinationsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListSuppressedDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuppressedDestinationsWithContext indicates an expected call of ListSuppressedDestinationsWithContext
func (mr *MockSESV2APIMockRecorder) ListSuppressedDestinationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuppressedDestinationsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListSuppressedDestinationsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockSESV2API) ListTagsForResource(arg0 *sesv2.ListTagsForResourceInput) (*sesv2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*sesv2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockSESV2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSESV2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockSESV2API) ListTagsForResourceRequest(arg0 *sesv2.ListTagsForResourceInput) (*request.Request, *sesv2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockSESV2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSESV2API)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockSESV2API) ListTagsForResourceWithContext(arg0 context.Context, arg1 *sesv2.ListTagsForResourceInput, arg2 ...request.Option) (*sesv2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockSESV2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutAccountDedicatedIpWarmupAttributes mocks base method
func (m *MockSESV2API) PutAccountDedicatedIpWarmupAttributes(arg0 *sesv2.PutAccountDedicatedIpWarmupAttributesInput) (*sesv2.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountDedicatedIpWarmupAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutAccountDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountDedicatedIpWarmupAttributes indicates an expected call of PutAccountDedicatedIpWarmupAttributes
func (mr *MockSESV2APIMockRecorder) PutAccountDedicatedIpWarmupAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDedicatedIpWarmupAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutAccountDedicatedIpWarmupAttributes), arg0)
}

// PutAccountDedicatedIpWarmupAttributesRequest mocks base method
func (m *MockSESV2API) PutAccountDedicatedIpWarmupAttributesRequest(arg0 *sesv2.PutAccountDedicatedIpWarmupAttributesInput) (*request.Request, *sesv2.PutAccountDedicatedIpWarmupAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountDedicatedIpWarmupAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutAccountDedicatedIpWarmupAttributesOutput)
	return ret0, ret1
}

// PutAccountDedicatedIpWarmupAttributesRequest indicates an expected call of PutAccountDedicatedIpWarmupAttributesRequest
func (mr *MockSESV2APIMockRecorder) PutAccountDedicatedIpWarmupAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDedicatedIpWarmupAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutAccountDedicatedIpWarmupAttributesRequest), arg0)
}

// PutAccountDedicatedIpWarmupAttributesWithContext mocks base method
func (m *MockSESV2API) PutAccountDedicatedIpWarmupAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutAccountDedicatedIpWarmupAttributesInput, arg2 ...request.Option) (*sesv2.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountDedicatedIpWarmupAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutAccountDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountDedicatedIpWarmupAttributesWithContext indicates an expected call of PutAccountDedicatedIpWarmupAttributesWithContext
func (mr *MockSESV2APIMockRecorder) PutAccountDedicatedIpWarmupAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDedicatedIpWarmupAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutAccountDedicatedIpWarmupAttributesWithContext), varargs...)
}

// PutAccountSendingAttributes mocks base method
func (m *MockSESV2API) PutAccountSendingAttributes(arg0 *sesv2.PutAccountSendingAttributesInput) (*sesv2.PutAccountSendingAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSendingAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutAccountSendingAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSendingAttributes indicates an expected call of PutAccountSendingAttributes
func (mr *MockSESV2APIMockRecorder) PutAccountSendingAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSendingAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSendingAttributes), arg0)
}

// PutAccountSendingAttributesRequest mocks base method
func (m *MockSESV2API) PutAccountSendingAttributesRequest(arg0 *sesv2.PutAccountSendingAttributesInput) (*request.Request, *sesv2.PutAccountSendingAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSendingAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutAccountSendingAttributesOutput)
	return ret0, ret1
}

// PutAccountSendingAttributesRequest indicates an expected call of PutAccountSendingAttributesRequest
func (mr *MockSESV2APIMockRecorder) PutAccountSendingAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSendingAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSendingAttributesRequest), arg0)
}

// PutAccountSendingAttributesWithContext mocks base method
func (m *MockSESV2API) PutAccountSendingAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutAccountSendingAttributesInput, arg2 ...request.Option) (*sesv2.PutAccountSendingAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountSendingAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutAccountSendingAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSendingAttributesWithContext indicates an expected call of PutAccountSendingAttributesWithContext
func (mr *MockSESV2APIMockRecorder) PutAccountSendingAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSendingAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSendingAttributesWithContext), varargs...)
}

// PutAccountSuppressionAttributes mocks base method
func (m *MockSESV2API) PutAccountSuppressionAttributes(arg0 *sesv2.PutAccountSuppressionAttributesInput) (*sesv2.PutAccountSuppressionAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSuppressionAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutAccountSuppressionAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSuppressionAttributes indicates an expected call of PutAccountSuppressionAttributes
func (mr *MockSESV2APIMockRecorder) PutAccountSuppressionAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSuppressionAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSuppressionAttributes), arg0)
}

// PutAccountSuppressionAttributesRequest mocks base method
func (m *MockSESV2API) PutAccountSuppressionAttributesRequest(arg0 *sesv2.PutAccountSuppressionAttributesInput) (*request.Request, *sesv2.PutAccountSuppressionAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSuppressionAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutAccountSuppressionAttributesOutput)
	return ret0, ret1
}

// PutAccountSuppressionAttributesRequest indicates an expected call of PutAccountSuppressionAttributesRequest
func (mr *MockSESV2APIMockRecorder) PutAccountSuppressionAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSuppressionAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSuppressionAttributesRequest), arg0)
}

// PutAccountSuppressionAttributesWithContext mocks base method
func (m *MockSESV2API) PutAccountSuppressionAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutAccountSuppressionAttributesInput, arg2 ...request.Option) (*sesv2.PutAccountSuppressionAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountSuppressionAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutAccountSuppressionAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSuppressionAttributesWithContext indicates an expected call of PutAccountSuppressionAttributesWithContext
func (mr *MockSESV2APIMockRecorder) PutAccountSuppressionAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSuppressionAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSuppressionAttributesWithContext), varargs...)
}

// PutConfigurationSetDeliveryOptions mocks base method
func (m *MockSESV2API) PutConfigurationSetDeliveryOptions(arg0 *sesv2.PutConfigurationSetDeliveryOptionsInput) (*sesv2.PutConfigurationSetDeliveryOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetDeliveryOptions", arg0)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetDeliveryOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetDeliveryOptions indicates an expected call of PutConfigurationSetDeliveryOptions
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetDeliveryOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetDeliveryOptions", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetDeliveryOptions), arg0)
}

// PutConfigurationSetDeliveryOptionsRequest mocks base method
func (m *MockSESV2API) PutConfigurationSetDeliveryOptionsRequest(arg0 *sesv2.PutConfigurationSetDeliveryOptionsInput) (*request.Request, *sesv2.PutConfigurationSetDeliveryOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetDeliveryOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutConfigurationSetDeliveryOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetDeliveryOptionsRequest indicates an expected call of PutConfigurationSetDeliveryOptionsRequest
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetDeliveryOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetDeliveryOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetDeliveryOptionsRequest), arg0)
}

// PutConfigurationSetDeliveryOptionsWithContext mocks base method
func (m *MockSESV2API) PutConfigurationSetDeliveryOptionsWithContext(arg0 context.Context, arg1 *sesv2.PutConfigurationSetDeliveryOptionsInput, arg2 ...request.Option) (*sesv2.PutConfigurationSetDeliveryOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetDeliveryOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetDeliveryOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetDeliveryOptionsWithContext indicates an expected call of PutConfigurationSetDeliveryOptionsWithContext
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetDeliveryOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetDeliveryOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetDeliveryOptionsWithContext), varargs...)
}

// PutConfigurationSetReputationOptions mocks base method
func (m *MockSESV2API) PutConfigurationSetReputationOptions(arg0 *sesv2.PutConfigurationSetReputationOptionsInput) (*sesv2.PutConfigurationSetReputationOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetReputationOptions", arg0)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetReputationOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetReputationOptions indicates an expected call of PutConfigurationSetReputationOptions
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetReputationOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetReputationOptions", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetReputationOptions), arg0)
}

// PutConfigurationSetReputationOptionsRequest mocks base method
func (m *MockSESV2API) PutConfigurationSetReputationOptionsRequest(arg0 *sesv2.PutConfigurationSetReputationOptionsInput) (*request.Request, *sesv2.PutConfigurationSetReputationOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetReputationOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutConfigurationSetReputationOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetReputationOptionsRequest indicates an expected call of PutConfigurationSetReputationOptionsRequest
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetReputationOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetReputationOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetReputationOptionsRequest), arg0)
}

// PutConfigurationSetReputationOptionsWithContext mocks base method
func (m *MockSESV2API) PutConfigurationSetReputationOptionsWithContext(arg0 context.Context, arg1 *sesv2.PutConfigurationSetReputationOptionsInput, arg2 ...request.Option) (*sesv2.PutConfigurationSetReputationOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetReputationOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetReputationOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetReputationOptionsWithContext indicates an expected call of PutConfigurationSetReputationOptionsWithContext
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetReputationOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetReputationOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetReputationOptionsWithContext), varargs...)
}

// PutConfigurationSetSendingOptions mocks base method
func (m *MockSESV2API) PutConfigurationSetSendingOptions(arg0 *sesv2.PutConfigurationSetSendingOptionsInput) (*sesv2.PutConfigurationSetSendingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetSendingOptions", arg0)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetSendingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetSendingOptions indicates an expected call of PutConfigurationSetSendingOptions
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSendingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSendingOptions", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSendingOptions), arg0)
}

// PutConfigurationSetSendingOptionsRequest mocks base method
func (m *MockSESV2API) PutConfigurationSetSendingOptionsRequest(arg0 *sesv2.PutConfigurationSetSendingOptionsInput) (*request.Request, *sesv2.PutConfigurationSetSendingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetSendingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutConfigurationSetSendingOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetSendingOptionsRequest indicates an expected call of PutConfigurationSetSendingOptionsRequest
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSendingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSendingOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSendingOptionsRequest), arg0)
}

// PutConfigurationSetSendingOptionsWithContext mocks base method
func (m *MockSESV2API) PutConfigurationSetSendingOptionsWithContext(arg0 context.Context, arg1 *sesv2.PutConfigurationSetSendingOptionsInput, arg2 ...request.Option) (*sesv2.PutConfigurationSetSendingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetSendingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetSendingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetSendingOptionsWithContext indicates an expected call of PutConfigurationSetSendingOptionsWithContext
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSendingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSendingOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSendingOptionsWithContext), varargs...)
}

// PutConfigurationSetSuppressionOptions mocks base method
func (m *MockSESV2API) PutConfigurationSetSuppressionOptions(arg0 *sesv2.PutConfigurationSetSuppressionOptionsInput) (*sesv2.PutConfigurationSetSuppressionOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetSuppressionOptions", arg0)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetSuppressionOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetSuppressionOptions indicates an expected call of PutConfigurationSetSuppressionOptions
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSuppressionOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSuppressionOptions", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSuppressionOptions), arg0)
}

// PutConfigurationSetSuppressionOptionsRequest mocks base method
func (m *MockSESV2API) PutConfigurationSetSuppressionOptionsRequest(arg0 *sesv2.PutConfigurationSetSuppressionOptionsInput) (*request.Request, *sesv2.PutConfigurationSetSuppressionOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetSuppressionOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutConfigurationSetSuppressionOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetSuppressionOptionsRequest indicates an expected call of PutConfigurationSetSuppressionOptionsRequest
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSuppressionOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSuppressionOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSuppressionOptionsRequest), arg0)
}

// PutConfigurationSetSuppressionOptionsWithContext mocks base method
func (m *MockSESV2API) PutConfigurationSetSuppressionOptionsWithContext(arg0 context.Context, arg1 *sesv2.PutConfigurationSetSuppressionOptionsInput, arg2 ...request.Option) (*sesv2.PutConfigurationSetSuppressionOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetSuppressionOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetSuppressionOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetSuppressionOptionsWithContext indicates an expected call of PutConfigurationSetSuppressionOptionsWithContext
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSuppressionOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSuppressionOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSuppressionOptionsWithContext), varargs...)
}

// PutConfigurationSetTrackingOptions mocks base method
func (m *MockSESV2API) PutConfigurationSetTrackingOptions(arg0 *sesv2.PutConfigurationSetTrackingOptionsInput) (*sesv2.PutConfigurationSetTrackingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetTrackingOptions", arg0)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetTrackingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetTrackingOptions indicates an expected call of PutConfigurationSetTrackingOptions
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetTrackingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetTrackingOptions", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetTrackingOptions), arg0)
}

// PutConfigurationSetTrackingOptionsRequest mocks base method
func (m *MockSESV2API) PutConfigurationSetTrackingOptionsRequest(arg0 *sesv2.PutConfigurationSetTrackingOptionsInput) (*request.Request, *sesv2.PutConfigurationSetTrackingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetTrackingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutConfigurationSetTrackingOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetTrackingOptionsRequest indicates an expected call of PutConfigurationSetTrackingOptionsRequest
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetTrackingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetTrackingOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetTrackingOptionsRequest), arg0)
}

// PutConfigurationSetTrackingOptionsWithContext mocks base method
func (m *MockSESV2API) PutConfigurationSetTrackingOptionsWithContext(arg0 context.Context, arg1 *sesv2.PutConfigurationSetTrackingOptionsInput, arg2 ...request.Option) (*sesv2.PutConfigurationSetTrackingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetTrackingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetTrackingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetTrackingOptionsWithContext indicates an expected call of PutConfigurationSetTrackingOptionsWithContext
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetTrackingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetTrackingOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetTrackingOptionsWithContext), varargs...)
}

// PutDedicatedIpInPool mocks base method
func (m *MockSESV2API) PutDedicatedIpInPool(arg0 *sesv2.PutDedicatedIpInPoolInput) (*sesv2.PutDedicatedIpInPoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpInPool", arg0)
	ret0, _ := ret[0].(*sesv2.PutDedicatedIpInPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpInPool indicates an expected call of PutDedicatedIpInPool
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpInPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpInPool", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpInPool), arg0)
}

// PutDedicatedIpInPoolRequest mocks base method
func (m *MockSESV2API) PutDedicatedIpInPoolRequest(arg0 *sesv2.PutDedicatedIpInPoolInput) (*request.Request, *sesv2.PutDedicatedIpInPoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpInPoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutDedicatedIpInPoolOutput)
	return ret0, ret1
}

// PutDedicatedIpInPoolRequest indicates an expected call of PutDedicatedIpInPoolRequest
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpInPoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpInPoolRequest", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpInPoolRequest), arg0)
}

// PutDedicatedIpInPoolWithContext mocks base method
func (m *MockSESV2API) PutDedicatedIpInPoolWithContext(arg0 context.Context, arg1 *sesv2.PutDedicatedIpInPoolInput, arg2 ...request.Option) (*sesv2.PutDedicatedIpInPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDedicatedIpInPoolWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutDedicatedIpInPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpInPoolWithContext indicates an expected call of PutDedicatedIpInPoolWithContext
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpInPoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpInPoolWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpInPoolWithContext), varargs...)
}

// PutDedicatedIpWarmupAttributes mocks base method
func (m *MockSESV2API) PutDedicatedIpWarmupAttributes(arg0 *sesv2.PutDedicatedIpWarmupAttributesInput) (*sesv2.PutDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpWarmupAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpWarmupAttributes indicates an expected call of PutDedicatedIpWarmupAttributes
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpWarmupAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpWarmupAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpWarmupAttributes), arg0)
}

// PutDedicatedIpWarmupAttributesRequest mocks base method
func (m *MockSESV2API) PutDedicatedIpWarmupAttributesRequest(arg0 *sesv2.PutDedicatedIpWarmupAttributesInput) (*request.Request, *sesv2.PutDedicatedIpWarmupAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpWarmupAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutDedicatedIpWarmupAttributesOutput)
	return ret0, ret1
}

// PutDedicatedIpWarmupAttributesRequest indicates an expected call of PutDedicatedIpWarmupAttributesRequest
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpWarmupAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpWarmupAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpWarmupAttributesRequest), arg0)
}

// PutDedicatedIpWarmupAttributesWithContext mocks base method
func (m *MockSESV2API) PutDedicatedIpWarmupAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutDedicatedIpWarmupAttributesInput, arg2 ...request.Option) (*sesv2.PutDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDedicatedIpWarmupAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpWarmupAttributesWithContext indicates an expected call of PutDedicatedIpWarmupAttributesWithContext
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpWarmupAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpWarmupAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpWarmupAttributesWithContext), varargs...)
}

// PutDeliverabilityDashboardOption mocks base method
func (m *MockSESV2API) PutDeliverabilityDashboardOption(arg0 *sesv2.PutDeliverabilityDashboardOptionInput) (*sesv2.PutDeliverabilityDashboardOptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeliverabilityDashboardOption", arg0)
	ret0, _ := ret[0].(*sesv2.PutDeliverabilityDashboardOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeliverabilityDashboardOption indicates an expected call of PutDeliverabilityDashboardOption
func (mr *MockSESV2APIMockRecorder) PutDeliverabilityDashboardOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliverabilityDashboardOption", reflect.TypeOf((*MockSESV2API)(nil).PutDeliverabilityDashboardOption), arg0)
}

// PutDeliverabilityDashboardOptionRequest mocks base method
func (m *MockSESV2API) PutDeliverabilityDashboardOptionRequest(arg0 *sesv2.PutDeliverabilityDashboardOptionInput) (*request.Request, *sesv2.PutDeliverabilityDashboardOptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeliverabilityDashboardOptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutDeliverabilityDashboardOptionOutput)
	return ret0, ret1
}

// PutDeliverabilityDashboardOptionRequest indicates an expected call of PutDeliverabilityDashboardOptionRequest
func (mr *MockSESV2APIMockRecorder) PutDeliverabilityDashboardOptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliverabilityDashboardOptionRequest", reflect.TypeOf((*MockSESV2API)(nil).PutDeliverabilityDashboardOptionRequest), arg0)
}

// PutDeliverabilityDashboardOptionWithContext mocks base method
func (m *MockSESV2API) PutDeliverabilityDashboardOptionWithContext(arg0 context.Context, arg1 *sesv2.PutDeliverabilityDashboardOptionInput, arg2 ...request.Option) (*sesv2.PutDeliverabilityDashboardOptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDeliverabilityDashboardOptionWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutDeliverabilityDashboardOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeliverabilityDashboardOptionWithContext indicates an expected call of PutDeliverabilityDashboardOptionWithContext
func (mr *MockSESV2APIMockRecorder) PutDeliverabilityDashboardOptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliverabilityDashboardOptionWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutDeliverabilityDashboardOptionWithContext), varargs...)
}

// PutEmailIdentityDkimAttributes mocks base method
func (m *MockSESV2API) PutEmailIdentityDkimAttributes(arg0 *sesv2.PutEmailIdentityDkimAttributesInput) (*sesv2.PutEmailIdentityDkimAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityDkimAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityDkimAttributes indicates an expected call of PutEmailIdentityDkimAttributes
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimAttributes), arg0)
}

// PutEmailIdentityDkimAttributesRequest mocks base method
func (m *MockSESV2API) PutEmailIdentityDkimAttributesRequest(arg0 *sesv2.PutEmailIdentityDkimAttributesInput) (*request.Request, *sesv2.PutEmailIdentityDkimAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutEmailIdentityDkimAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityDkimAttributesRequest indicates an expected call of PutEmailIdentityDkimAttributesRequest
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimAttributesRequest), arg0)
}

// PutEmailIdentityDkimAttributesWithContext mocks base method
func (m *MockSESV2API) PutEmailIdentityDkimAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutEmailIdentityDkimAttributesInput, arg2 ...request.Option) (*sesv2.PutEmailIdentityDkimAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityDkimAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityDkimAttributesWithContext indicates an expected call of PutEmailIdentityDkimAttributesWithContext
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimAttributesWithContext), varargs...)
}

// PutEmailIdentityDkimSigningAttributes mocks base method
func (m *MockSESV2API) PutEmailIdentityDkimSigningAttributes(arg0 *sesv2.PutEmailIdentityDkimSigningAttributesInput) (*sesv2.PutEmailIdentityDkimSigningAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimSigningAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityDkimSigningAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityDkimSigningAttributes indicates an expected call of PutEmailIdentityDkimSigningAttributes
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimSigningAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimSigningAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimSigningAttributes), arg0)
}

// PutEmailIdentityDkimSigningAttributesRequest mocks base method
func (m *MockSESV2API) PutEmailIdentityDkimSigningAttributesRequest(arg0 *sesv2.PutEmailIdentityDkimSigningAttributesInput) (*request.Request, *sesv2.PutEmailIdentityDkimSigningAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimSigningAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutEmailIdentityDkimSigningAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityDkimSigningAttributesRequest indicates an expected call of PutEmailIdentityDkimSigningAttributesRequest
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimSigningAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimSigningAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimSigningAttributesRequest), arg0)
}

// PutEmailIdentityDkimSigningAttributesWithContext mocks base method
func (m *MockSESV2API) PutEmailIdentityDkimSigningAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutEmailIdentityDkimSigningAttributesInput, arg2 ...request.Option) (*sesv2.PutEmailIdentityDkimSigningAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimSigningAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityDkimSigningAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityDkimSigningAttributesWithContext indicates an expected call of PutEmailIdentityDkimSigningAttributesWithContext
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimSigningAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimSigningAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimSigningAttributesWithContext), varargs...)
}

// PutEmailIdentityFeedbackAttributes mocks base method
func (m *MockSESV2API) PutEmailIdentityFeedbackAttributes(arg0 *sesv2.PutEmailIdentityFeedbackAttributesInput) (*sesv2.PutEmailIdentityFeedbackAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityFeedbackAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityFeedbackAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityFeedbackAttributes indicates an expected call of PutEmailIdentityFeedbackAttributes
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityFeedbackAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityFeedbackAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityFeedbackAttributes), arg0)
}

// PutEmailIdentityFeedbackAttributesRequest mocks base method
func (m *MockSESV2API) PutEmailIdentityFeedbackAttributesRequest(arg0 *sesv2.PutEmailIdentityFeedbackAttributesInput) (*request.Request, *sesv2.PutEmailIdentityFeedbackAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityFeedbackAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutEmailIdentityFeedbackAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityFeedbackAttributesRequest indicates an expected call of PutEmailIdentityFeedbackAttributesRequest
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityFeedbackAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityFeedbackAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityFeedbackAttributesRequest), arg0)
}

// PutEmailIdentityFeedbackAttributesWithContext mocks base method
func (m *MockSESV2API) PutEmailIdentityFeedbackAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutEmailIdentityFeedbackAttributesInput, arg2 ...request.Option) (*sesv2.PutEmailIdentityFeedbackAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityFeedbackAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityFeedbackAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityFeedbackAttributesWithContext indicates an expected call of PutEmailIdentityFeedbackAttributesWithContext
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityFeedbackAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityFeedbackAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityFeedbackAttributesWithContext), varargs...)
}

// PutEmailIdentityMailFromAttributes mocks base method
func (m *MockSESV2API) PutEmailIdentityMailFromAttributes(arg0 *sesv2.PutEmailIdentityMailFromAttributesInput) (*sesv2.PutEmailIdentityMailFromAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityMailFromAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityMailFromAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityMailFromAttributes indicates an expected call of PutEmailIdentityMailFromAttributes
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityMailFromAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityMailFromAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityMailFromAttributes), arg0)
}

// PutEmailIdentityMailFromAttributesRequest mocks base method
func (m *MockSESV2API) PutEmailIdentityMailFromAttributesRequest(arg0 *sesv2.PutEmailIdentityMailFromAttributesInput) (*request.Request, *sesv2.PutEmailIdentityMailFromAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityMailFromAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutEmailIdentityMailFromAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityMailFromAttributesRequest indicates an expected call of PutEmailIdentityMailFromAttributesRequest
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityMailFromAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityMailFromAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityMailFromAttributesRequest), arg0)
}

// PutEmailIdentityMailFromAttributesWithContext mocks base method
func (m *MockSESV2API) PutEmailIdentityMailFromAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutEmailIdentityMailFromAttributesInput, arg2 ...request.Option) (*sesv2.PutEmailIdentityMailFromAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityMailFromAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityMailFromAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityMailFromAttributesWithContext indicates an expected call of PutEmailIdentityMailFromAttributesWithContext
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityMailFromAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityMailFromAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityMailFromAttributesWithContext), varargs...)
}

// PutSuppressedDestination mocks base method
func (m *MockSESV2API) PutSuppressedDestination(arg0 *sesv2.PutSuppressedDestinationInput) (*sesv2.PutSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSuppressedDestination", arg0)
	ret0, _ := ret[0].(*sesv2.PutSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSuppressedDestination indicates an expected call of PutSuppressedDestination
func (mr *MockSESV2APIMockRecorder) PutSuppressedDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSuppressedDestination", reflect.TypeOf((*MockSESV2API)(nil).PutSuppressedDestination), arg0)
}

// PutSuppressedDestinationRequest mocks base method
func (m *MockSESV2API) PutSuppressedDestinationRequest(arg0 *sesv2.PutSuppressedDestinationInput) (*request.Request, *sesv2.PutSuppressedDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSuppressedDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutSuppressedDestinationOutput)
	return ret0, ret1
}

// PutSuppressedDestinationRequest indicates an expected call of PutSuppressedDestinationRequest
func (mr *MockSESV2APIMockRecorder) PutSuppressedDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSuppressedDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).PutSuppressedDestinationRequest), arg0)
}

// PutSuppressedDestinationWithContext mocks base method
func (m *MockSESV2API) PutSuppressedDestinationWithContext(arg0 context.Context, arg1 *sesv2.PutSuppressedDestinationInput, arg2 ...request.Option) (*sesv2.PutSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSuppressedDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSuppressedDestinationWithContext indicates an expected call of PutSuppressedDestinationWithContext
func (mr *MockSESV2APIMockRecorder) PutSuppressedDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSuppressedDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutSuppressedDestinationWithContext), varargs...)
}

// SendEmail mocks base method
func (m *MockSESV2API) SendEmail(arg0 *sesv2.SendEmailInput) (*sesv2.SendEmailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0)
	ret0, _ := ret[0].(*sesv2.SendEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail
func (mr *MockSESV2APIMockRecorder) SendEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSESV2API)(nil).SendEmail), arg0)
}

// SendEmailRequest mocks base method
func (m *MockSESV2API) SendEmailRequest(arg0 *sesv2.SendEmailInput) (*request.Request, *sesv2.SendEmailOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.SendEmailOutput)
	return ret0, ret1
}

// SendEmailRequest indicates an expected call of SendEmailRequest
func (mr *MockSESV2APIMockRecorder) SendEmailRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailRequest", reflect.TypeOf((*MockSESV2API)(nil).SendEmailRequest), arg0)
}

// SendEmailWithContext mocks base method
func (m *MockSESV2API) SendEmailWithContext(arg0 context.Context, arg1 *sesv2.SendEmailInput, arg2 ...request.Option) (*sesv2.SendEmailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmailWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.SendEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmailWithContext indicates an expected call of SendEmailWithContext
func (mr *MockSESV2APIMockRecorder) SendEmailWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailWithContext", reflect.TypeOf((*MockSESV2API)(nil).SendEmailWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockSESV2API) TagResource(arg0 *sesv2.TagResourceInput) (*sesv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*sesv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockSESV2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSESV2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockSESV2API) TagResourceRequest(arg0 *sesv2.TagResourceInput) (*request.Request, *sesv2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockSESV2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSESV2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockSESV2API) TagResourceWithContext(arg0 context.Context, arg1 *sesv2.TagResourceInput, arg2 ...request.Option) (*sesv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockSESV2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSESV2API)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockSESV2API) UntagResource(arg0 *sesv2.UntagResourceInput) (*sesv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*sesv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockSESV2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSESV2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockSESV2API) UntagResourceRequest(arg0 *sesv2.UntagResourceInput) (*request.Request, *sesv2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockSESV2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSESV2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockSESV2API) UntagResourceWithContext(arg0 context.Context, arg1 *sesv2.UntagResourceInput, arg2 ...request.Option) (*sesv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockSESV2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSESV2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateConfigurationSetEventDestination mocks base method
func (m *MockSESV2API) UpdateConfigurationSetEventDestination(arg0 *sesv2.UpdateConfigurationSetEventDestinationInput) (*sesv2.UpdateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationSetEventDestination", arg0)
	ret0, _ := ret[0].(*sesv2.UpdateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigurationSetEventDestination indicates an expected call of UpdateConfigurationSetEventDestination
func (mr *MockSESV2APIMockRecorder) UpdateConfigurationSetEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationSetEventDestination", reflect.TypeOf((*MockSESV2API)(nil).UpdateConfigurationSetEventDestination), arg0)
}

// UpdateConfigurationSetEventDestinationRequest mocks base method
func (m *MockSESV2API) UpdateConfigurationSetEventDestinationRequest(arg0 *sesv2.UpdateConfigurationSetEventDestinationInput) (*request.Request, *sesv2.UpdateConfigurationSetEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationSetEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.UpdateConfigurationSetEventDestinationOutput)
	return ret0, ret1
}

// UpdateConfigurationSetEventDestinationRequest indicates an expected call of UpdateConfigurationSetEventDestinationRequest
func (mr *MockSESV2APIMockRecorder) UpdateConfigurationSetEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationSetEventDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).UpdateConfigurationSetEventDestinationRequest), arg0)
}

// UpdateConfigurationSetEventDestinationWithContext mocks base method
func (m *MockSESV2API) UpdateConfigurationSetEventDestinationWithContext(arg0 context.Context, arg1 *sesv2.UpdateConfigurationSetEventDestinationInput, arg2 ...request.Option) (*sesv2.UpdateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigurationSetEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.UpdateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigurationSetEventDestinationWithContext indicates an expected call of UpdateConfigurationSetEventDestinationWithContext
func (mr *MockSESV2APIMockRecorder) UpdateConfigurationSetEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationSetEventDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).UpdateConfigurationSetEventDestinationWithContext), varargs...)
}
