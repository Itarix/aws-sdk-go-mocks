// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/backup/backupiface (interfaces: BackupAPI)

// Package backupmock is a generated GoMock package.
package backupmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	backup "github.com/aws/aws-sdk-go/service/backup"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBackupAPI is a mock of BackupAPI interface
type MockBackupAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBackupAPIMockRecorder
}

// MockBackupAPIMockRecorder is the mock recorder for MockBackupAPI
type MockBackupAPIMockRecorder struct {
	mock *MockBackupAPI
}

// NewMockBackupAPI creates a new mock instance
func NewMockBackupAPI(ctrl *gomock.Controller) *MockBackupAPI {
	mock := &MockBackupAPI{ctrl: ctrl}
	mock.recorder = &MockBackupAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupAPI) EXPECT() *MockBackupAPIMockRecorder {
	return m.recorder
}

// CancelLegalHold mocks base method
func (m *MockBackupAPI) CancelLegalHold(arg0 *backup.CancelLegalHoldInput) (*backup.CancelLegalHoldOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLegalHold", arg0)
	ret0, _ := ret[0].(*backup.CancelLegalHoldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelLegalHold indicates an expected call of CancelLegalHold
func (mr *MockBackupAPIMockRecorder) CancelLegalHold(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLegalHold", reflect.TypeOf((*MockBackupAPI)(nil).CancelLegalHold), arg0)
}

// CancelLegalHoldRequest mocks base method
func (m *MockBackupAPI) CancelLegalHoldRequest(arg0 *backup.CancelLegalHoldInput) (*request.Request, *backup.CancelLegalHoldOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLegalHoldRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.CancelLegalHoldOutput)
	return ret0, ret1
}

// CancelLegalHoldRequest indicates an expected call of CancelLegalHoldRequest
func (mr *MockBackupAPIMockRecorder) CancelLegalHoldRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLegalHoldRequest", reflect.TypeOf((*MockBackupAPI)(nil).CancelLegalHoldRequest), arg0)
}

// CancelLegalHoldWithContext mocks base method
func (m *MockBackupAPI) CancelLegalHoldWithContext(arg0 context.Context, arg1 *backup.CancelLegalHoldInput, arg2 ...request.Option) (*backup.CancelLegalHoldOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelLegalHoldWithContext", varargs...)
	ret0, _ := ret[0].(*backup.CancelLegalHoldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelLegalHoldWithContext indicates an expected call of CancelLegalHoldWithContext
func (mr *MockBackupAPIMockRecorder) CancelLegalHoldWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLegalHoldWithContext", reflect.TypeOf((*MockBackupAPI)(nil).CancelLegalHoldWithContext), varargs...)
}

// CreateBackupPlan mocks base method
func (m *MockBackupAPI) CreateBackupPlan(arg0 *backup.CreateBackupPlanInput) (*backup.CreateBackupPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupPlan", arg0)
	ret0, _ := ret[0].(*backup.CreateBackupPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupPlan indicates an expected call of CreateBackupPlan
func (mr *MockBackupAPIMockRecorder) CreateBackupPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupPlan", reflect.TypeOf((*MockBackupAPI)(nil).CreateBackupPlan), arg0)
}

// CreateBackupPlanRequest mocks base method
func (m *MockBackupAPI) CreateBackupPlanRequest(arg0 *backup.CreateBackupPlanInput) (*request.Request, *backup.CreateBackupPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.CreateBackupPlanOutput)
	return ret0, ret1
}

// CreateBackupPlanRequest indicates an expected call of CreateBackupPlanRequest
func (mr *MockBackupAPIMockRecorder) CreateBackupPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).CreateBackupPlanRequest), arg0)
}

// CreateBackupPlanWithContext mocks base method
func (m *MockBackupAPI) CreateBackupPlanWithContext(arg0 context.Context, arg1 *backup.CreateBackupPlanInput, arg2 ...request.Option) (*backup.CreateBackupPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackupPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.CreateBackupPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupPlanWithContext indicates an expected call of CreateBackupPlanWithContext
func (mr *MockBackupAPIMockRecorder) CreateBackupPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).CreateBackupPlanWithContext), varargs...)
}

// CreateBackupSelection mocks base method
func (m *MockBackupAPI) CreateBackupSelection(arg0 *backup.CreateBackupSelectionInput) (*backup.CreateBackupSelectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupSelection", arg0)
	ret0, _ := ret[0].(*backup.CreateBackupSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupSelection indicates an expected call of CreateBackupSelection
func (mr *MockBackupAPIMockRecorder) CreateBackupSelection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupSelection", reflect.TypeOf((*MockBackupAPI)(nil).CreateBackupSelection), arg0)
}

// CreateBackupSelectionRequest mocks base method
func (m *MockBackupAPI) CreateBackupSelectionRequest(arg0 *backup.CreateBackupSelectionInput) (*request.Request, *backup.CreateBackupSelectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupSelectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.CreateBackupSelectionOutput)
	return ret0, ret1
}

// CreateBackupSelectionRequest indicates an expected call of CreateBackupSelectionRequest
func (mr *MockBackupAPIMockRecorder) CreateBackupSelectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupSelectionRequest", reflect.TypeOf((*MockBackupAPI)(nil).CreateBackupSelectionRequest), arg0)
}

// CreateBackupSelectionWithContext mocks base method
func (m *MockBackupAPI) CreateBackupSelectionWithContext(arg0 context.Context, arg1 *backup.CreateBackupSelectionInput, arg2 ...request.Option) (*backup.CreateBackupSelectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackupSelectionWithContext", varargs...)
	ret0, _ := ret[0].(*backup.CreateBackupSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupSelectionWithContext indicates an expected call of CreateBackupSelectionWithContext
func (mr *MockBackupAPIMockRecorder) CreateBackupSelectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupSelectionWithContext", reflect.TypeOf((*MockBackupAPI)(nil).CreateBackupSelectionWithContext), varargs...)
}

// CreateBackupVault mocks base method
func (m *MockBackupAPI) CreateBackupVault(arg0 *backup.CreateBackupVaultInput) (*backup.CreateBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupVault", arg0)
	ret0, _ := ret[0].(*backup.CreateBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupVault indicates an expected call of CreateBackupVault
func (mr *MockBackupAPIMockRecorder) CreateBackupVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupVault", reflect.TypeOf((*MockBackupAPI)(nil).CreateBackupVault), arg0)
}

// CreateBackupVaultRequest mocks base method
func (m *MockBackupAPI) CreateBackupVaultRequest(arg0 *backup.CreateBackupVaultInput) (*request.Request, *backup.CreateBackupVaultOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupVaultRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.CreateBackupVaultOutput)
	return ret0, ret1
}

// CreateBackupVaultRequest indicates an expected call of CreateBackupVaultRequest
func (mr *MockBackupAPIMockRecorder) CreateBackupVaultRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupVaultRequest", reflect.TypeOf((*MockBackupAPI)(nil).CreateBackupVaultRequest), arg0)
}

// CreateBackupVaultWithContext mocks base method
func (m *MockBackupAPI) CreateBackupVaultWithContext(arg0 context.Context, arg1 *backup.CreateBackupVaultInput, arg2 ...request.Option) (*backup.CreateBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackupVaultWithContext", varargs...)
	ret0, _ := ret[0].(*backup.CreateBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupVaultWithContext indicates an expected call of CreateBackupVaultWithContext
func (mr *MockBackupAPIMockRecorder) CreateBackupVaultWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupVaultWithContext", reflect.TypeOf((*MockBackupAPI)(nil).CreateBackupVaultWithContext), varargs...)
}

// CreateFramework mocks base method
func (m *MockBackupAPI) CreateFramework(arg0 *backup.CreateFrameworkInput) (*backup.CreateFrameworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFramework", arg0)
	ret0, _ := ret[0].(*backup.CreateFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFramework indicates an expected call of CreateFramework
func (mr *MockBackupAPIMockRecorder) CreateFramework(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFramework", reflect.TypeOf((*MockBackupAPI)(nil).CreateFramework), arg0)
}

// CreateFrameworkRequest mocks base method
func (m *MockBackupAPI) CreateFrameworkRequest(arg0 *backup.CreateFrameworkInput) (*request.Request, *backup.CreateFrameworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFrameworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.CreateFrameworkOutput)
	return ret0, ret1
}

// CreateFrameworkRequest indicates an expected call of CreateFrameworkRequest
func (mr *MockBackupAPIMockRecorder) CreateFrameworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFrameworkRequest", reflect.TypeOf((*MockBackupAPI)(nil).CreateFrameworkRequest), arg0)
}

// CreateFrameworkWithContext mocks base method
func (m *MockBackupAPI) CreateFrameworkWithContext(arg0 context.Context, arg1 *backup.CreateFrameworkInput, arg2 ...request.Option) (*backup.CreateFrameworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFrameworkWithContext", varargs...)
	ret0, _ := ret[0].(*backup.CreateFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFrameworkWithContext indicates an expected call of CreateFrameworkWithContext
func (mr *MockBackupAPIMockRecorder) CreateFrameworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFrameworkWithContext", reflect.TypeOf((*MockBackupAPI)(nil).CreateFrameworkWithContext), varargs...)
}

// CreateLegalHold mocks base method
func (m *MockBackupAPI) CreateLegalHold(arg0 *backup.CreateLegalHoldInput) (*backup.CreateLegalHoldOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLegalHold", arg0)
	ret0, _ := ret[0].(*backup.CreateLegalHoldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLegalHold indicates an expected call of CreateLegalHold
func (mr *MockBackupAPIMockRecorder) CreateLegalHold(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLegalHold", reflect.TypeOf((*MockBackupAPI)(nil).CreateLegalHold), arg0)
}

// CreateLegalHoldRequest mocks base method
func (m *MockBackupAPI) CreateLegalHoldRequest(arg0 *backup.CreateLegalHoldInput) (*request.Request, *backup.CreateLegalHoldOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLegalHoldRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.CreateLegalHoldOutput)
	return ret0, ret1
}

// CreateLegalHoldRequest indicates an expected call of CreateLegalHoldRequest
func (mr *MockBackupAPIMockRecorder) CreateLegalHoldRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLegalHoldRequest", reflect.TypeOf((*MockBackupAPI)(nil).CreateLegalHoldRequest), arg0)
}

// CreateLegalHoldWithContext mocks base method
func (m *MockBackupAPI) CreateLegalHoldWithContext(arg0 context.Context, arg1 *backup.CreateLegalHoldInput, arg2 ...request.Option) (*backup.CreateLegalHoldOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLegalHoldWithContext", varargs...)
	ret0, _ := ret[0].(*backup.CreateLegalHoldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLegalHoldWithContext indicates an expected call of CreateLegalHoldWithContext
func (mr *MockBackupAPIMockRecorder) CreateLegalHoldWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLegalHoldWithContext", reflect.TypeOf((*MockBackupAPI)(nil).CreateLegalHoldWithContext), varargs...)
}

// CreateLogicallyAirGappedBackupVault mocks base method
func (m *MockBackupAPI) CreateLogicallyAirGappedBackupVault(arg0 *backup.CreateLogicallyAirGappedBackupVaultInput) (*backup.CreateLogicallyAirGappedBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogicallyAirGappedBackupVault", arg0)
	ret0, _ := ret[0].(*backup.CreateLogicallyAirGappedBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogicallyAirGappedBackupVault indicates an expected call of CreateLogicallyAirGappedBackupVault
func (mr *MockBackupAPIMockRecorder) CreateLogicallyAirGappedBackupVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicallyAirGappedBackupVault", reflect.TypeOf((*MockBackupAPI)(nil).CreateLogicallyAirGappedBackupVault), arg0)
}

// CreateLogicallyAirGappedBackupVaultRequest mocks base method
func (m *MockBackupAPI) CreateLogicallyAirGappedBackupVaultRequest(arg0 *backup.CreateLogicallyAirGappedBackupVaultInput) (*request.Request, *backup.CreateLogicallyAirGappedBackupVaultOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogicallyAirGappedBackupVaultRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.CreateLogicallyAirGappedBackupVaultOutput)
	return ret0, ret1
}

// CreateLogicallyAirGappedBackupVaultRequest indicates an expected call of CreateLogicallyAirGappedBackupVaultRequest
func (mr *MockBackupAPIMockRecorder) CreateLogicallyAirGappedBackupVaultRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicallyAirGappedBackupVaultRequest", reflect.TypeOf((*MockBackupAPI)(nil).CreateLogicallyAirGappedBackupVaultRequest), arg0)
}

// CreateLogicallyAirGappedBackupVaultWithContext mocks base method
func (m *MockBackupAPI) CreateLogicallyAirGappedBackupVaultWithContext(arg0 context.Context, arg1 *backup.CreateLogicallyAirGappedBackupVaultInput, arg2 ...request.Option) (*backup.CreateLogicallyAirGappedBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLogicallyAirGappedBackupVaultWithContext", varargs...)
	ret0, _ := ret[0].(*backup.CreateLogicallyAirGappedBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogicallyAirGappedBackupVaultWithContext indicates an expected call of CreateLogicallyAirGappedBackupVaultWithContext
func (mr *MockBackupAPIMockRecorder) CreateLogicallyAirGappedBackupVaultWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicallyAirGappedBackupVaultWithContext", reflect.TypeOf((*MockBackupAPI)(nil).CreateLogicallyAirGappedBackupVaultWithContext), varargs...)
}

// CreateReportPlan mocks base method
func (m *MockBackupAPI) CreateReportPlan(arg0 *backup.CreateReportPlanInput) (*backup.CreateReportPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReportPlan", arg0)
	ret0, _ := ret[0].(*backup.CreateReportPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReportPlan indicates an expected call of CreateReportPlan
func (mr *MockBackupAPIMockRecorder) CreateReportPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReportPlan", reflect.TypeOf((*MockBackupAPI)(nil).CreateReportPlan), arg0)
}

// CreateReportPlanRequest mocks base method
func (m *MockBackupAPI) CreateReportPlanRequest(arg0 *backup.CreateReportPlanInput) (*request.Request, *backup.CreateReportPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReportPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.CreateReportPlanOutput)
	return ret0, ret1
}

// CreateReportPlanRequest indicates an expected call of CreateReportPlanRequest
func (mr *MockBackupAPIMockRecorder) CreateReportPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReportPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).CreateReportPlanRequest), arg0)
}

// CreateReportPlanWithContext mocks base method
func (m *MockBackupAPI) CreateReportPlanWithContext(arg0 context.Context, arg1 *backup.CreateReportPlanInput, arg2 ...request.Option) (*backup.CreateReportPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReportPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.CreateReportPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReportPlanWithContext indicates an expected call of CreateReportPlanWithContext
func (mr *MockBackupAPIMockRecorder) CreateReportPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReportPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).CreateReportPlanWithContext), varargs...)
}

// CreateRestoreTestingPlan mocks base method
func (m *MockBackupAPI) CreateRestoreTestingPlan(arg0 *backup.CreateRestoreTestingPlanInput) (*backup.CreateRestoreTestingPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestoreTestingPlan", arg0)
	ret0, _ := ret[0].(*backup.CreateRestoreTestingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestoreTestingPlan indicates an expected call of CreateRestoreTestingPlan
func (mr *MockBackupAPIMockRecorder) CreateRestoreTestingPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestoreTestingPlan", reflect.TypeOf((*MockBackupAPI)(nil).CreateRestoreTestingPlan), arg0)
}

// CreateRestoreTestingPlanRequest mocks base method
func (m *MockBackupAPI) CreateRestoreTestingPlanRequest(arg0 *backup.CreateRestoreTestingPlanInput) (*request.Request, *backup.CreateRestoreTestingPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestoreTestingPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.CreateRestoreTestingPlanOutput)
	return ret0, ret1
}

// CreateRestoreTestingPlanRequest indicates an expected call of CreateRestoreTestingPlanRequest
func (mr *MockBackupAPIMockRecorder) CreateRestoreTestingPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestoreTestingPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).CreateRestoreTestingPlanRequest), arg0)
}

// CreateRestoreTestingPlanWithContext mocks base method
func (m *MockBackupAPI) CreateRestoreTestingPlanWithContext(arg0 context.Context, arg1 *backup.CreateRestoreTestingPlanInput, arg2 ...request.Option) (*backup.CreateRestoreTestingPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRestoreTestingPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.CreateRestoreTestingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestoreTestingPlanWithContext indicates an expected call of CreateRestoreTestingPlanWithContext
func (mr *MockBackupAPIMockRecorder) CreateRestoreTestingPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestoreTestingPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).CreateRestoreTestingPlanWithContext), varargs...)
}

// CreateRestoreTestingSelection mocks base method
func (m *MockBackupAPI) CreateRestoreTestingSelection(arg0 *backup.CreateRestoreTestingSelectionInput) (*backup.CreateRestoreTestingSelectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestoreTestingSelection", arg0)
	ret0, _ := ret[0].(*backup.CreateRestoreTestingSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestoreTestingSelection indicates an expected call of CreateRestoreTestingSelection
func (mr *MockBackupAPIMockRecorder) CreateRestoreTestingSelection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestoreTestingSelection", reflect.TypeOf((*MockBackupAPI)(nil).CreateRestoreTestingSelection), arg0)
}

// CreateRestoreTestingSelectionRequest mocks base method
func (m *MockBackupAPI) CreateRestoreTestingSelectionRequest(arg0 *backup.CreateRestoreTestingSelectionInput) (*request.Request, *backup.CreateRestoreTestingSelectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestoreTestingSelectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.CreateRestoreTestingSelectionOutput)
	return ret0, ret1
}

// CreateRestoreTestingSelectionRequest indicates an expected call of CreateRestoreTestingSelectionRequest
func (mr *MockBackupAPIMockRecorder) CreateRestoreTestingSelectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestoreTestingSelectionRequest", reflect.TypeOf((*MockBackupAPI)(nil).CreateRestoreTestingSelectionRequest), arg0)
}

// CreateRestoreTestingSelectionWithContext mocks base method
func (m *MockBackupAPI) CreateRestoreTestingSelectionWithContext(arg0 context.Context, arg1 *backup.CreateRestoreTestingSelectionInput, arg2 ...request.Option) (*backup.CreateRestoreTestingSelectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRestoreTestingSelectionWithContext", varargs...)
	ret0, _ := ret[0].(*backup.CreateRestoreTestingSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestoreTestingSelectionWithContext indicates an expected call of CreateRestoreTestingSelectionWithContext
func (mr *MockBackupAPIMockRecorder) CreateRestoreTestingSelectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestoreTestingSelectionWithContext", reflect.TypeOf((*MockBackupAPI)(nil).CreateRestoreTestingSelectionWithContext), varargs...)
}

// DeleteBackupPlan mocks base method
func (m *MockBackupAPI) DeleteBackupPlan(arg0 *backup.DeleteBackupPlanInput) (*backup.DeleteBackupPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupPlan", arg0)
	ret0, _ := ret[0].(*backup.DeleteBackupPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupPlan indicates an expected call of DeleteBackupPlan
func (mr *MockBackupAPIMockRecorder) DeleteBackupPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupPlan", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupPlan), arg0)
}

// DeleteBackupPlanRequest mocks base method
func (m *MockBackupAPI) DeleteBackupPlanRequest(arg0 *backup.DeleteBackupPlanInput) (*request.Request, *backup.DeleteBackupPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteBackupPlanOutput)
	return ret0, ret1
}

// DeleteBackupPlanRequest indicates an expected call of DeleteBackupPlanRequest
func (mr *MockBackupAPIMockRecorder) DeleteBackupPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupPlanRequest), arg0)
}

// DeleteBackupPlanWithContext mocks base method
func (m *MockBackupAPI) DeleteBackupPlanWithContext(arg0 context.Context, arg1 *backup.DeleteBackupPlanInput, arg2 ...request.Option) (*backup.DeleteBackupPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteBackupPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupPlanWithContext indicates an expected call of DeleteBackupPlanWithContext
func (mr *MockBackupAPIMockRecorder) DeleteBackupPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupPlanWithContext), varargs...)
}

// DeleteBackupSelection mocks base method
func (m *MockBackupAPI) DeleteBackupSelection(arg0 *backup.DeleteBackupSelectionInput) (*backup.DeleteBackupSelectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupSelection", arg0)
	ret0, _ := ret[0].(*backup.DeleteBackupSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupSelection indicates an expected call of DeleteBackupSelection
func (mr *MockBackupAPIMockRecorder) DeleteBackupSelection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupSelection", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupSelection), arg0)
}

// DeleteBackupSelectionRequest mocks base method
func (m *MockBackupAPI) DeleteBackupSelectionRequest(arg0 *backup.DeleteBackupSelectionInput) (*request.Request, *backup.DeleteBackupSelectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupSelectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteBackupSelectionOutput)
	return ret0, ret1
}

// DeleteBackupSelectionRequest indicates an expected call of DeleteBackupSelectionRequest
func (mr *MockBackupAPIMockRecorder) DeleteBackupSelectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupSelectionRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupSelectionRequest), arg0)
}

// DeleteBackupSelectionWithContext mocks base method
func (m *MockBackupAPI) DeleteBackupSelectionWithContext(arg0 context.Context, arg1 *backup.DeleteBackupSelectionInput, arg2 ...request.Option) (*backup.DeleteBackupSelectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupSelectionWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteBackupSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupSelectionWithContext indicates an expected call of DeleteBackupSelectionWithContext
func (mr *MockBackupAPIMockRecorder) DeleteBackupSelectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupSelectionWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupSelectionWithContext), varargs...)
}

// DeleteBackupVault mocks base method
func (m *MockBackupAPI) DeleteBackupVault(arg0 *backup.DeleteBackupVaultInput) (*backup.DeleteBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupVault", arg0)
	ret0, _ := ret[0].(*backup.DeleteBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupVault indicates an expected call of DeleteBackupVault
func (mr *MockBackupAPIMockRecorder) DeleteBackupVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVault", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVault), arg0)
}

// DeleteBackupVaultAccessPolicy mocks base method
func (m *MockBackupAPI) DeleteBackupVaultAccessPolicy(arg0 *backup.DeleteBackupVaultAccessPolicyInput) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupVaultAccessPolicy", arg0)
	ret0, _ := ret[0].(*backup.DeleteBackupVaultAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupVaultAccessPolicy indicates an expected call of DeleteBackupVaultAccessPolicy
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultAccessPolicy", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultAccessPolicy), arg0)
}

// DeleteBackupVaultAccessPolicyRequest mocks base method
func (m *MockBackupAPI) DeleteBackupVaultAccessPolicyRequest(arg0 *backup.DeleteBackupVaultAccessPolicyInput) (*request.Request, *backup.DeleteBackupVaultAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupVaultAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteBackupVaultAccessPolicyOutput)
	return ret0, ret1
}

// DeleteBackupVaultAccessPolicyRequest indicates an expected call of DeleteBackupVaultAccessPolicyRequest
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultAccessPolicyRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultAccessPolicyRequest), arg0)
}

// DeleteBackupVaultAccessPolicyWithContext mocks base method
func (m *MockBackupAPI) DeleteBackupVaultAccessPolicyWithContext(arg0 context.Context, arg1 *backup.DeleteBackupVaultAccessPolicyInput, arg2 ...request.Option) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupVaultAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteBackupVaultAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupVaultAccessPolicyWithContext indicates an expected call of DeleteBackupVaultAccessPolicyWithContext
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultAccessPolicyWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultAccessPolicyWithContext), varargs...)
}

// DeleteBackupVaultLockConfiguration mocks base method
func (m *MockBackupAPI) DeleteBackupVaultLockConfiguration(arg0 *backup.DeleteBackupVaultLockConfigurationInput) (*backup.DeleteBackupVaultLockConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupVaultLockConfiguration", arg0)
	ret0, _ := ret[0].(*backup.DeleteBackupVaultLockConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupVaultLockConfiguration indicates an expected call of DeleteBackupVaultLockConfiguration
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultLockConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultLockConfiguration", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultLockConfiguration), arg0)
}

// DeleteBackupVaultLockConfigurationRequest mocks base method
func (m *MockBackupAPI) DeleteBackupVaultLockConfigurationRequest(arg0 *backup.DeleteBackupVaultLockConfigurationInput) (*request.Request, *backup.DeleteBackupVaultLockConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupVaultLockConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteBackupVaultLockConfigurationOutput)
	return ret0, ret1
}

// DeleteBackupVaultLockConfigurationRequest indicates an expected call of DeleteBackupVaultLockConfigurationRequest
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultLockConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultLockConfigurationRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultLockConfigurationRequest), arg0)
}

// DeleteBackupVaultLockConfigurationWithContext mocks base method
func (m *MockBackupAPI) DeleteBackupVaultLockConfigurationWithContext(arg0 context.Context, arg1 *backup.DeleteBackupVaultLockConfigurationInput, arg2 ...request.Option) (*backup.DeleteBackupVaultLockConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupVaultLockConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteBackupVaultLockConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupVaultLockConfigurationWithContext indicates an expected call of DeleteBackupVaultLockConfigurationWithContext
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultLockConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultLockConfigurationWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultLockConfigurationWithContext), varargs...)
}

// DeleteBackupVaultNotifications mocks base method
func (m *MockBackupAPI) DeleteBackupVaultNotifications(arg0 *backup.DeleteBackupVaultNotificationsInput) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupVaultNotifications", arg0)
	ret0, _ := ret[0].(*backup.DeleteBackupVaultNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupVaultNotifications indicates an expected call of DeleteBackupVaultNotifications
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultNotifications", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultNotifications), arg0)
}

// DeleteBackupVaultNotificationsRequest mocks base method
func (m *MockBackupAPI) DeleteBackupVaultNotificationsRequest(arg0 *backup.DeleteBackupVaultNotificationsInput) (*request.Request, *backup.DeleteBackupVaultNotificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupVaultNotificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteBackupVaultNotificationsOutput)
	return ret0, ret1
}

// DeleteBackupVaultNotificationsRequest indicates an expected call of DeleteBackupVaultNotificationsRequest
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultNotificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultNotificationsRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultNotificationsRequest), arg0)
}

// DeleteBackupVaultNotificationsWithContext mocks base method
func (m *MockBackupAPI) DeleteBackupVaultNotificationsWithContext(arg0 context.Context, arg1 *backup.DeleteBackupVaultNotificationsInput, arg2 ...request.Option) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupVaultNotificationsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteBackupVaultNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupVaultNotificationsWithContext indicates an expected call of DeleteBackupVaultNotificationsWithContext
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultNotificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultNotificationsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultNotificationsWithContext), varargs...)
}

// DeleteBackupVaultRequest mocks base method
func (m *MockBackupAPI) DeleteBackupVaultRequest(arg0 *backup.DeleteBackupVaultInput) (*request.Request, *backup.DeleteBackupVaultOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupVaultRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteBackupVaultOutput)
	return ret0, ret1
}

// DeleteBackupVaultRequest indicates an expected call of DeleteBackupVaultRequest
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultRequest), arg0)
}

// DeleteBackupVaultWithContext mocks base method
func (m *MockBackupAPI) DeleteBackupVaultWithContext(arg0 context.Context, arg1 *backup.DeleteBackupVaultInput, arg2 ...request.Option) (*backup.DeleteBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupVaultWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupVaultWithContext indicates an expected call of DeleteBackupVaultWithContext
func (mr *MockBackupAPIMockRecorder) DeleteBackupVaultWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVaultWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteBackupVaultWithContext), varargs...)
}

// DeleteFramework mocks base method
func (m *MockBackupAPI) DeleteFramework(arg0 *backup.DeleteFrameworkInput) (*backup.DeleteFrameworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFramework", arg0)
	ret0, _ := ret[0].(*backup.DeleteFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFramework indicates an expected call of DeleteFramework
func (mr *MockBackupAPIMockRecorder) DeleteFramework(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFramework", reflect.TypeOf((*MockBackupAPI)(nil).DeleteFramework), arg0)
}

// DeleteFrameworkRequest mocks base method
func (m *MockBackupAPI) DeleteFrameworkRequest(arg0 *backup.DeleteFrameworkInput) (*request.Request, *backup.DeleteFrameworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFrameworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteFrameworkOutput)
	return ret0, ret1
}

// DeleteFrameworkRequest indicates an expected call of DeleteFrameworkRequest
func (mr *MockBackupAPIMockRecorder) DeleteFrameworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFrameworkRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteFrameworkRequest), arg0)
}

// DeleteFrameworkWithContext mocks base method
func (m *MockBackupAPI) DeleteFrameworkWithContext(arg0 context.Context, arg1 *backup.DeleteFrameworkInput, arg2 ...request.Option) (*backup.DeleteFrameworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFrameworkWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFrameworkWithContext indicates an expected call of DeleteFrameworkWithContext
func (mr *MockBackupAPIMockRecorder) DeleteFrameworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFrameworkWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteFrameworkWithContext), varargs...)
}

// DeleteRecoveryPoint mocks base method
func (m *MockBackupAPI) DeleteRecoveryPoint(arg0 *backup.DeleteRecoveryPointInput) (*backup.DeleteRecoveryPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoveryPoint", arg0)
	ret0, _ := ret[0].(*backup.DeleteRecoveryPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecoveryPoint indicates an expected call of DeleteRecoveryPoint
func (mr *MockBackupAPIMockRecorder) DeleteRecoveryPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryPoint", reflect.TypeOf((*MockBackupAPI)(nil).DeleteRecoveryPoint), arg0)
}

// DeleteRecoveryPointRequest mocks base method
func (m *MockBackupAPI) DeleteRecoveryPointRequest(arg0 *backup.DeleteRecoveryPointInput) (*request.Request, *backup.DeleteRecoveryPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoveryPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteRecoveryPointOutput)
	return ret0, ret1
}

// DeleteRecoveryPointRequest indicates an expected call of DeleteRecoveryPointRequest
func (mr *MockBackupAPIMockRecorder) DeleteRecoveryPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryPointRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteRecoveryPointRequest), arg0)
}

// DeleteRecoveryPointWithContext mocks base method
func (m *MockBackupAPI) DeleteRecoveryPointWithContext(arg0 context.Context, arg1 *backup.DeleteRecoveryPointInput, arg2 ...request.Option) (*backup.DeleteRecoveryPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecoveryPointWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteRecoveryPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecoveryPointWithContext indicates an expected call of DeleteRecoveryPointWithContext
func (mr *MockBackupAPIMockRecorder) DeleteRecoveryPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryPointWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteRecoveryPointWithContext), varargs...)
}

// DeleteReportPlan mocks base method
func (m *MockBackupAPI) DeleteReportPlan(arg0 *backup.DeleteReportPlanInput) (*backup.DeleteReportPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReportPlan", arg0)
	ret0, _ := ret[0].(*backup.DeleteReportPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReportPlan indicates an expected call of DeleteReportPlan
func (mr *MockBackupAPIMockRecorder) DeleteReportPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReportPlan", reflect.TypeOf((*MockBackupAPI)(nil).DeleteReportPlan), arg0)
}

// DeleteReportPlanRequest mocks base method
func (m *MockBackupAPI) DeleteReportPlanRequest(arg0 *backup.DeleteReportPlanInput) (*request.Request, *backup.DeleteReportPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReportPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteReportPlanOutput)
	return ret0, ret1
}

// DeleteReportPlanRequest indicates an expected call of DeleteReportPlanRequest
func (mr *MockBackupAPIMockRecorder) DeleteReportPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReportPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteReportPlanRequest), arg0)
}

// DeleteReportPlanWithContext mocks base method
func (m *MockBackupAPI) DeleteReportPlanWithContext(arg0 context.Context, arg1 *backup.DeleteReportPlanInput, arg2 ...request.Option) (*backup.DeleteReportPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReportPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteReportPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReportPlanWithContext indicates an expected call of DeleteReportPlanWithContext
func (mr *MockBackupAPIMockRecorder) DeleteReportPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReportPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteReportPlanWithContext), varargs...)
}

// DeleteRestoreTestingPlan mocks base method
func (m *MockBackupAPI) DeleteRestoreTestingPlan(arg0 *backup.DeleteRestoreTestingPlanInput) (*backup.DeleteRestoreTestingPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRestoreTestingPlan", arg0)
	ret0, _ := ret[0].(*backup.DeleteRestoreTestingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRestoreTestingPlan indicates an expected call of DeleteRestoreTestingPlan
func (mr *MockBackupAPIMockRecorder) DeleteRestoreTestingPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestoreTestingPlan", reflect.TypeOf((*MockBackupAPI)(nil).DeleteRestoreTestingPlan), arg0)
}

// DeleteRestoreTestingPlanRequest mocks base method
func (m *MockBackupAPI) DeleteRestoreTestingPlanRequest(arg0 *backup.DeleteRestoreTestingPlanInput) (*request.Request, *backup.DeleteRestoreTestingPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRestoreTestingPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteRestoreTestingPlanOutput)
	return ret0, ret1
}

// DeleteRestoreTestingPlanRequest indicates an expected call of DeleteRestoreTestingPlanRequest
func (mr *MockBackupAPIMockRecorder) DeleteRestoreTestingPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestoreTestingPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteRestoreTestingPlanRequest), arg0)
}

// DeleteRestoreTestingPlanWithContext mocks base method
func (m *MockBackupAPI) DeleteRestoreTestingPlanWithContext(arg0 context.Context, arg1 *backup.DeleteRestoreTestingPlanInput, arg2 ...request.Option) (*backup.DeleteRestoreTestingPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRestoreTestingPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteRestoreTestingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRestoreTestingPlanWithContext indicates an expected call of DeleteRestoreTestingPlanWithContext
func (mr *MockBackupAPIMockRecorder) DeleteRestoreTestingPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestoreTestingPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteRestoreTestingPlanWithContext), varargs...)
}

// DeleteRestoreTestingSelection mocks base method
func (m *MockBackupAPI) DeleteRestoreTestingSelection(arg0 *backup.DeleteRestoreTestingSelectionInput) (*backup.DeleteRestoreTestingSelectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRestoreTestingSelection", arg0)
	ret0, _ := ret[0].(*backup.DeleteRestoreTestingSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRestoreTestingSelection indicates an expected call of DeleteRestoreTestingSelection
func (mr *MockBackupAPIMockRecorder) DeleteRestoreTestingSelection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestoreTestingSelection", reflect.TypeOf((*MockBackupAPI)(nil).DeleteRestoreTestingSelection), arg0)
}

// DeleteRestoreTestingSelectionRequest mocks base method
func (m *MockBackupAPI) DeleteRestoreTestingSelectionRequest(arg0 *backup.DeleteRestoreTestingSelectionInput) (*request.Request, *backup.DeleteRestoreTestingSelectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRestoreTestingSelectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DeleteRestoreTestingSelectionOutput)
	return ret0, ret1
}

// DeleteRestoreTestingSelectionRequest indicates an expected call of DeleteRestoreTestingSelectionRequest
func (mr *MockBackupAPIMockRecorder) DeleteRestoreTestingSelectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestoreTestingSelectionRequest", reflect.TypeOf((*MockBackupAPI)(nil).DeleteRestoreTestingSelectionRequest), arg0)
}

// DeleteRestoreTestingSelectionWithContext mocks base method
func (m *MockBackupAPI) DeleteRestoreTestingSelectionWithContext(arg0 context.Context, arg1 *backup.DeleteRestoreTestingSelectionInput, arg2 ...request.Option) (*backup.DeleteRestoreTestingSelectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRestoreTestingSelectionWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DeleteRestoreTestingSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRestoreTestingSelectionWithContext indicates an expected call of DeleteRestoreTestingSelectionWithContext
func (mr *MockBackupAPIMockRecorder) DeleteRestoreTestingSelectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestoreTestingSelectionWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DeleteRestoreTestingSelectionWithContext), varargs...)
}

// DescribeBackupJob mocks base method
func (m *MockBackupAPI) DescribeBackupJob(arg0 *backup.DescribeBackupJobInput) (*backup.DescribeBackupJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupJob", arg0)
	ret0, _ := ret[0].(*backup.DescribeBackupJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackupJob indicates an expected call of DescribeBackupJob
func (mr *MockBackupAPIMockRecorder) DescribeBackupJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupJob", reflect.TypeOf((*MockBackupAPI)(nil).DescribeBackupJob), arg0)
}

// DescribeBackupJobRequest mocks base method
func (m *MockBackupAPI) DescribeBackupJobRequest(arg0 *backup.DescribeBackupJobInput) (*request.Request, *backup.DescribeBackupJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeBackupJobOutput)
	return ret0, ret1
}

// DescribeBackupJobRequest indicates an expected call of DescribeBackupJobRequest
func (mr *MockBackupAPIMockRecorder) DescribeBackupJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupJobRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeBackupJobRequest), arg0)
}

// DescribeBackupJobWithContext mocks base method
func (m *MockBackupAPI) DescribeBackupJobWithContext(arg0 context.Context, arg1 *backup.DescribeBackupJobInput, arg2 ...request.Option) (*backup.DescribeBackupJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBackupJobWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeBackupJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackupJobWithContext indicates an expected call of DescribeBackupJobWithContext
func (mr *MockBackupAPIMockRecorder) DescribeBackupJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupJobWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeBackupJobWithContext), varargs...)
}

// DescribeBackupVault mocks base method
func (m *MockBackupAPI) DescribeBackupVault(arg0 *backup.DescribeBackupVaultInput) (*backup.DescribeBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupVault", arg0)
	ret0, _ := ret[0].(*backup.DescribeBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackupVault indicates an expected call of DescribeBackupVault
func (mr *MockBackupAPIMockRecorder) DescribeBackupVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupVault", reflect.TypeOf((*MockBackupAPI)(nil).DescribeBackupVault), arg0)
}

// DescribeBackupVaultRequest mocks base method
func (m *MockBackupAPI) DescribeBackupVaultRequest(arg0 *backup.DescribeBackupVaultInput) (*request.Request, *backup.DescribeBackupVaultOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupVaultRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeBackupVaultOutput)
	return ret0, ret1
}

// DescribeBackupVaultRequest indicates an expected call of DescribeBackupVaultRequest
func (mr *MockBackupAPIMockRecorder) DescribeBackupVaultRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupVaultRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeBackupVaultRequest), arg0)
}

// DescribeBackupVaultWithContext mocks base method
func (m *MockBackupAPI) DescribeBackupVaultWithContext(arg0 context.Context, arg1 *backup.DescribeBackupVaultInput, arg2 ...request.Option) (*backup.DescribeBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBackupVaultWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackupVaultWithContext indicates an expected call of DescribeBackupVaultWithContext
func (mr *MockBackupAPIMockRecorder) DescribeBackupVaultWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupVaultWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeBackupVaultWithContext), varargs...)
}

// DescribeCopyJob mocks base method
func (m *MockBackupAPI) DescribeCopyJob(arg0 *backup.DescribeCopyJobInput) (*backup.DescribeCopyJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCopyJob", arg0)
	ret0, _ := ret[0].(*backup.DescribeCopyJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCopyJob indicates an expected call of DescribeCopyJob
func (mr *MockBackupAPIMockRecorder) DescribeCopyJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCopyJob", reflect.TypeOf((*MockBackupAPI)(nil).DescribeCopyJob), arg0)
}

// DescribeCopyJobRequest mocks base method
func (m *MockBackupAPI) DescribeCopyJobRequest(arg0 *backup.DescribeCopyJobInput) (*request.Request, *backup.DescribeCopyJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCopyJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeCopyJobOutput)
	return ret0, ret1
}

// DescribeCopyJobRequest indicates an expected call of DescribeCopyJobRequest
func (mr *MockBackupAPIMockRecorder) DescribeCopyJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCopyJobRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeCopyJobRequest), arg0)
}

// DescribeCopyJobWithContext mocks base method
func (m *MockBackupAPI) DescribeCopyJobWithContext(arg0 context.Context, arg1 *backup.DescribeCopyJobInput, arg2 ...request.Option) (*backup.DescribeCopyJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCopyJobWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeCopyJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCopyJobWithContext indicates an expected call of DescribeCopyJobWithContext
func (mr *MockBackupAPIMockRecorder) DescribeCopyJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCopyJobWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeCopyJobWithContext), varargs...)
}

// DescribeFramework mocks base method
func (m *MockBackupAPI) DescribeFramework(arg0 *backup.DescribeFrameworkInput) (*backup.DescribeFrameworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFramework", arg0)
	ret0, _ := ret[0].(*backup.DescribeFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFramework indicates an expected call of DescribeFramework
func (mr *MockBackupAPIMockRecorder) DescribeFramework(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFramework", reflect.TypeOf((*MockBackupAPI)(nil).DescribeFramework), arg0)
}

// DescribeFrameworkRequest mocks base method
func (m *MockBackupAPI) DescribeFrameworkRequest(arg0 *backup.DescribeFrameworkInput) (*request.Request, *backup.DescribeFrameworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFrameworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeFrameworkOutput)
	return ret0, ret1
}

// DescribeFrameworkRequest indicates an expected call of DescribeFrameworkRequest
func (mr *MockBackupAPIMockRecorder) DescribeFrameworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFrameworkRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeFrameworkRequest), arg0)
}

// DescribeFrameworkWithContext mocks base method
func (m *MockBackupAPI) DescribeFrameworkWithContext(arg0 context.Context, arg1 *backup.DescribeFrameworkInput, arg2 ...request.Option) (*backup.DescribeFrameworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFrameworkWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFrameworkWithContext indicates an expected call of DescribeFrameworkWithContext
func (mr *MockBackupAPIMockRecorder) DescribeFrameworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFrameworkWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeFrameworkWithContext), varargs...)
}

// DescribeGlobalSettings mocks base method
func (m *MockBackupAPI) DescribeGlobalSettings(arg0 *backup.DescribeGlobalSettingsInput) (*backup.DescribeGlobalSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGlobalSettings", arg0)
	ret0, _ := ret[0].(*backup.DescribeGlobalSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalSettings indicates an expected call of DescribeGlobalSettings
func (mr *MockBackupAPIMockRecorder) DescribeGlobalSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalSettings", reflect.TypeOf((*MockBackupAPI)(nil).DescribeGlobalSettings), arg0)
}

// DescribeGlobalSettingsRequest mocks base method
func (m *MockBackupAPI) DescribeGlobalSettingsRequest(arg0 *backup.DescribeGlobalSettingsInput) (*request.Request, *backup.DescribeGlobalSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGlobalSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeGlobalSettingsOutput)
	return ret0, ret1
}

// DescribeGlobalSettingsRequest indicates an expected call of DescribeGlobalSettingsRequest
func (mr *MockBackupAPIMockRecorder) DescribeGlobalSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalSettingsRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeGlobalSettingsRequest), arg0)
}

// DescribeGlobalSettingsWithContext mocks base method
func (m *MockBackupAPI) DescribeGlobalSettingsWithContext(arg0 context.Context, arg1 *backup.DescribeGlobalSettingsInput, arg2 ...request.Option) (*backup.DescribeGlobalSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeGlobalSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalSettingsWithContext indicates an expected call of DescribeGlobalSettingsWithContext
func (mr *MockBackupAPIMockRecorder) DescribeGlobalSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalSettingsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeGlobalSettingsWithContext), varargs...)
}

// DescribeProtectedResource mocks base method
func (m *MockBackupAPI) DescribeProtectedResource(arg0 *backup.DescribeProtectedResourceInput) (*backup.DescribeProtectedResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProtectedResource", arg0)
	ret0, _ := ret[0].(*backup.DescribeProtectedResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProtectedResource indicates an expected call of DescribeProtectedResource
func (mr *MockBackupAPIMockRecorder) DescribeProtectedResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtectedResource", reflect.TypeOf((*MockBackupAPI)(nil).DescribeProtectedResource), arg0)
}

// DescribeProtectedResourceRequest mocks base method
func (m *MockBackupAPI) DescribeProtectedResourceRequest(arg0 *backup.DescribeProtectedResourceInput) (*request.Request, *backup.DescribeProtectedResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProtectedResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeProtectedResourceOutput)
	return ret0, ret1
}

// DescribeProtectedResourceRequest indicates an expected call of DescribeProtectedResourceRequest
func (mr *MockBackupAPIMockRecorder) DescribeProtectedResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtectedResourceRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeProtectedResourceRequest), arg0)
}

// DescribeProtectedResourceWithContext mocks base method
func (m *MockBackupAPI) DescribeProtectedResourceWithContext(arg0 context.Context, arg1 *backup.DescribeProtectedResourceInput, arg2 ...request.Option) (*backup.DescribeProtectedResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProtectedResourceWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeProtectedResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProtectedResourceWithContext indicates an expected call of DescribeProtectedResourceWithContext
func (mr *MockBackupAPIMockRecorder) DescribeProtectedResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtectedResourceWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeProtectedResourceWithContext), varargs...)
}

// DescribeRecoveryPoint mocks base method
func (m *MockBackupAPI) DescribeRecoveryPoint(arg0 *backup.DescribeRecoveryPointInput) (*backup.DescribeRecoveryPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoveryPoint", arg0)
	ret0, _ := ret[0].(*backup.DescribeRecoveryPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecoveryPoint indicates an expected call of DescribeRecoveryPoint
func (mr *MockBackupAPIMockRecorder) DescribeRecoveryPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryPoint", reflect.TypeOf((*MockBackupAPI)(nil).DescribeRecoveryPoint), arg0)
}

// DescribeRecoveryPointRequest mocks base method
func (m *MockBackupAPI) DescribeRecoveryPointRequest(arg0 *backup.DescribeRecoveryPointInput) (*request.Request, *backup.DescribeRecoveryPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoveryPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeRecoveryPointOutput)
	return ret0, ret1
}

// DescribeRecoveryPointRequest indicates an expected call of DescribeRecoveryPointRequest
func (mr *MockBackupAPIMockRecorder) DescribeRecoveryPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryPointRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeRecoveryPointRequest), arg0)
}

// DescribeRecoveryPointWithContext mocks base method
func (m *MockBackupAPI) DescribeRecoveryPointWithContext(arg0 context.Context, arg1 *backup.DescribeRecoveryPointInput, arg2 ...request.Option) (*backup.DescribeRecoveryPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecoveryPointWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeRecoveryPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecoveryPointWithContext indicates an expected call of DescribeRecoveryPointWithContext
func (mr *MockBackupAPIMockRecorder) DescribeRecoveryPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryPointWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeRecoveryPointWithContext), varargs...)
}

// DescribeRegionSettings mocks base method
func (m *MockBackupAPI) DescribeRegionSettings(arg0 *backup.DescribeRegionSettingsInput) (*backup.DescribeRegionSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegionSettings", arg0)
	ret0, _ := ret[0].(*backup.DescribeRegionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegionSettings indicates an expected call of DescribeRegionSettings
func (mr *MockBackupAPIMockRecorder) DescribeRegionSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegionSettings", reflect.TypeOf((*MockBackupAPI)(nil).DescribeRegionSettings), arg0)
}

// DescribeRegionSettingsRequest mocks base method
func (m *MockBackupAPI) DescribeRegionSettingsRequest(arg0 *backup.DescribeRegionSettingsInput) (*request.Request, *backup.DescribeRegionSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegionSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeRegionSettingsOutput)
	return ret0, ret1
}

// DescribeRegionSettingsRequest indicates an expected call of DescribeRegionSettingsRequest
func (mr *MockBackupAPIMockRecorder) DescribeRegionSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegionSettingsRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeRegionSettingsRequest), arg0)
}

// DescribeRegionSettingsWithContext mocks base method
func (m *MockBackupAPI) DescribeRegionSettingsWithContext(arg0 context.Context, arg1 *backup.DescribeRegionSettingsInput, arg2 ...request.Option) (*backup.DescribeRegionSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegionSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeRegionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegionSettingsWithContext indicates an expected call of DescribeRegionSettingsWithContext
func (mr *MockBackupAPIMockRecorder) DescribeRegionSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegionSettingsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeRegionSettingsWithContext), varargs...)
}

// DescribeReportJob mocks base method
func (m *MockBackupAPI) DescribeReportJob(arg0 *backup.DescribeReportJobInput) (*backup.DescribeReportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReportJob", arg0)
	ret0, _ := ret[0].(*backup.DescribeReportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReportJob indicates an expected call of DescribeReportJob
func (mr *MockBackupAPIMockRecorder) DescribeReportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReportJob", reflect.TypeOf((*MockBackupAPI)(nil).DescribeReportJob), arg0)
}

// DescribeReportJobRequest mocks base method
func (m *MockBackupAPI) DescribeReportJobRequest(arg0 *backup.DescribeReportJobInput) (*request.Request, *backup.DescribeReportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeReportJobOutput)
	return ret0, ret1
}

// DescribeReportJobRequest indicates an expected call of DescribeReportJobRequest
func (mr *MockBackupAPIMockRecorder) DescribeReportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReportJobRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeReportJobRequest), arg0)
}

// DescribeReportJobWithContext mocks base method
func (m *MockBackupAPI) DescribeReportJobWithContext(arg0 context.Context, arg1 *backup.DescribeReportJobInput, arg2 ...request.Option) (*backup.DescribeReportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReportJobWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeReportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReportJobWithContext indicates an expected call of DescribeReportJobWithContext
func (mr *MockBackupAPIMockRecorder) DescribeReportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReportJobWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeReportJobWithContext), varargs...)
}

// DescribeReportPlan mocks base method
func (m *MockBackupAPI) DescribeReportPlan(arg0 *backup.DescribeReportPlanInput) (*backup.DescribeReportPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReportPlan", arg0)
	ret0, _ := ret[0].(*backup.DescribeReportPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReportPlan indicates an expected call of DescribeReportPlan
func (mr *MockBackupAPIMockRecorder) DescribeReportPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReportPlan", reflect.TypeOf((*MockBackupAPI)(nil).DescribeReportPlan), arg0)
}

// DescribeReportPlanRequest mocks base method
func (m *MockBackupAPI) DescribeReportPlanRequest(arg0 *backup.DescribeReportPlanInput) (*request.Request, *backup.DescribeReportPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReportPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeReportPlanOutput)
	return ret0, ret1
}

// DescribeReportPlanRequest indicates an expected call of DescribeReportPlanRequest
func (mr *MockBackupAPIMockRecorder) DescribeReportPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReportPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeReportPlanRequest), arg0)
}

// DescribeReportPlanWithContext mocks base method
func (m *MockBackupAPI) DescribeReportPlanWithContext(arg0 context.Context, arg1 *backup.DescribeReportPlanInput, arg2 ...request.Option) (*backup.DescribeReportPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReportPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeReportPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReportPlanWithContext indicates an expected call of DescribeReportPlanWithContext
func (mr *MockBackupAPIMockRecorder) DescribeReportPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReportPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeReportPlanWithContext), varargs...)
}

// DescribeRestoreJob mocks base method
func (m *MockBackupAPI) DescribeRestoreJob(arg0 *backup.DescribeRestoreJobInput) (*backup.DescribeRestoreJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRestoreJob", arg0)
	ret0, _ := ret[0].(*backup.DescribeRestoreJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRestoreJob indicates an expected call of DescribeRestoreJob
func (mr *MockBackupAPIMockRecorder) DescribeRestoreJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRestoreJob", reflect.TypeOf((*MockBackupAPI)(nil).DescribeRestoreJob), arg0)
}

// DescribeRestoreJobRequest mocks base method
func (m *MockBackupAPI) DescribeRestoreJobRequest(arg0 *backup.DescribeRestoreJobInput) (*request.Request, *backup.DescribeRestoreJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRestoreJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DescribeRestoreJobOutput)
	return ret0, ret1
}

// DescribeRestoreJobRequest indicates an expected call of DescribeRestoreJobRequest
func (mr *MockBackupAPIMockRecorder) DescribeRestoreJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRestoreJobRequest", reflect.TypeOf((*MockBackupAPI)(nil).DescribeRestoreJobRequest), arg0)
}

// DescribeRestoreJobWithContext mocks base method
func (m *MockBackupAPI) DescribeRestoreJobWithContext(arg0 context.Context, arg1 *backup.DescribeRestoreJobInput, arg2 ...request.Option) (*backup.DescribeRestoreJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRestoreJobWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DescribeRestoreJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRestoreJobWithContext indicates an expected call of DescribeRestoreJobWithContext
func (mr *MockBackupAPIMockRecorder) DescribeRestoreJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRestoreJobWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DescribeRestoreJobWithContext), varargs...)
}

// DisassociateRecoveryPoint mocks base method
func (m *MockBackupAPI) DisassociateRecoveryPoint(arg0 *backup.DisassociateRecoveryPointInput) (*backup.DisassociateRecoveryPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateRecoveryPoint", arg0)
	ret0, _ := ret[0].(*backup.DisassociateRecoveryPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateRecoveryPoint indicates an expected call of DisassociateRecoveryPoint
func (mr *MockBackupAPIMockRecorder) DisassociateRecoveryPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRecoveryPoint", reflect.TypeOf((*MockBackupAPI)(nil).DisassociateRecoveryPoint), arg0)
}

// DisassociateRecoveryPointFromParent mocks base method
func (m *MockBackupAPI) DisassociateRecoveryPointFromParent(arg0 *backup.DisassociateRecoveryPointFromParentInput) (*backup.DisassociateRecoveryPointFromParentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateRecoveryPointFromParent", arg0)
	ret0, _ := ret[0].(*backup.DisassociateRecoveryPointFromParentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateRecoveryPointFromParent indicates an expected call of DisassociateRecoveryPointFromParent
func (mr *MockBackupAPIMockRecorder) DisassociateRecoveryPointFromParent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRecoveryPointFromParent", reflect.TypeOf((*MockBackupAPI)(nil).DisassociateRecoveryPointFromParent), arg0)
}

// DisassociateRecoveryPointFromParentRequest mocks base method
func (m *MockBackupAPI) DisassociateRecoveryPointFromParentRequest(arg0 *backup.DisassociateRecoveryPointFromParentInput) (*request.Request, *backup.DisassociateRecoveryPointFromParentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateRecoveryPointFromParentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DisassociateRecoveryPointFromParentOutput)
	return ret0, ret1
}

// DisassociateRecoveryPointFromParentRequest indicates an expected call of DisassociateRecoveryPointFromParentRequest
func (mr *MockBackupAPIMockRecorder) DisassociateRecoveryPointFromParentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRecoveryPointFromParentRequest", reflect.TypeOf((*MockBackupAPI)(nil).DisassociateRecoveryPointFromParentRequest), arg0)
}

// DisassociateRecoveryPointFromParentWithContext mocks base method
func (m *MockBackupAPI) DisassociateRecoveryPointFromParentWithContext(arg0 context.Context, arg1 *backup.DisassociateRecoveryPointFromParentInput, arg2 ...request.Option) (*backup.DisassociateRecoveryPointFromParentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateRecoveryPointFromParentWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DisassociateRecoveryPointFromParentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateRecoveryPointFromParentWithContext indicates an expected call of DisassociateRecoveryPointFromParentWithContext
func (mr *MockBackupAPIMockRecorder) DisassociateRecoveryPointFromParentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRecoveryPointFromParentWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DisassociateRecoveryPointFromParentWithContext), varargs...)
}

// DisassociateRecoveryPointRequest mocks base method
func (m *MockBackupAPI) DisassociateRecoveryPointRequest(arg0 *backup.DisassociateRecoveryPointInput) (*request.Request, *backup.DisassociateRecoveryPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateRecoveryPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.DisassociateRecoveryPointOutput)
	return ret0, ret1
}

// DisassociateRecoveryPointRequest indicates an expected call of DisassociateRecoveryPointRequest
func (mr *MockBackupAPIMockRecorder) DisassociateRecoveryPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRecoveryPointRequest", reflect.TypeOf((*MockBackupAPI)(nil).DisassociateRecoveryPointRequest), arg0)
}

// DisassociateRecoveryPointWithContext mocks base method
func (m *MockBackupAPI) DisassociateRecoveryPointWithContext(arg0 context.Context, arg1 *backup.DisassociateRecoveryPointInput, arg2 ...request.Option) (*backup.DisassociateRecoveryPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateRecoveryPointWithContext", varargs...)
	ret0, _ := ret[0].(*backup.DisassociateRecoveryPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateRecoveryPointWithContext indicates an expected call of DisassociateRecoveryPointWithContext
func (mr *MockBackupAPIMockRecorder) DisassociateRecoveryPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRecoveryPointWithContext", reflect.TypeOf((*MockBackupAPI)(nil).DisassociateRecoveryPointWithContext), varargs...)
}

// ExportBackupPlanTemplate mocks base method
func (m *MockBackupAPI) ExportBackupPlanTemplate(arg0 *backup.ExportBackupPlanTemplateInput) (*backup.ExportBackupPlanTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportBackupPlanTemplate", arg0)
	ret0, _ := ret[0].(*backup.ExportBackupPlanTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportBackupPlanTemplate indicates an expected call of ExportBackupPlanTemplate
func (mr *MockBackupAPIMockRecorder) ExportBackupPlanTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportBackupPlanTemplate", reflect.TypeOf((*MockBackupAPI)(nil).ExportBackupPlanTemplate), arg0)
}

// ExportBackupPlanTemplateRequest mocks base method
func (m *MockBackupAPI) ExportBackupPlanTemplateRequest(arg0 *backup.ExportBackupPlanTemplateInput) (*request.Request, *backup.ExportBackupPlanTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportBackupPlanTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ExportBackupPlanTemplateOutput)
	return ret0, ret1
}

// ExportBackupPlanTemplateRequest indicates an expected call of ExportBackupPlanTemplateRequest
func (mr *MockBackupAPIMockRecorder) ExportBackupPlanTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportBackupPlanTemplateRequest", reflect.TypeOf((*MockBackupAPI)(nil).ExportBackupPlanTemplateRequest), arg0)
}

// ExportBackupPlanTemplateWithContext mocks base method
func (m *MockBackupAPI) ExportBackupPlanTemplateWithContext(arg0 context.Context, arg1 *backup.ExportBackupPlanTemplateInput, arg2 ...request.Option) (*backup.ExportBackupPlanTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportBackupPlanTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ExportBackupPlanTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportBackupPlanTemplateWithContext indicates an expected call of ExportBackupPlanTemplateWithContext
func (mr *MockBackupAPIMockRecorder) ExportBackupPlanTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportBackupPlanTemplateWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ExportBackupPlanTemplateWithContext), varargs...)
}

// GetBackupPlan mocks base method
func (m *MockBackupAPI) GetBackupPlan(arg0 *backup.GetBackupPlanInput) (*backup.GetBackupPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupPlan", arg0)
	ret0, _ := ret[0].(*backup.GetBackupPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupPlan indicates an expected call of GetBackupPlan
func (mr *MockBackupAPIMockRecorder) GetBackupPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPlan", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupPlan), arg0)
}

// GetBackupPlanFromJSON mocks base method
func (m *MockBackupAPI) GetBackupPlanFromJSON(arg0 *backup.GetBackupPlanFromJSONInput) (*backup.GetBackupPlanFromJSONOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupPlanFromJSON", arg0)
	ret0, _ := ret[0].(*backup.GetBackupPlanFromJSONOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupPlanFromJSON indicates an expected call of GetBackupPlanFromJSON
func (mr *MockBackupAPIMockRecorder) GetBackupPlanFromJSON(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPlanFromJSON", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupPlanFromJSON), arg0)
}

// GetBackupPlanFromJSONRequest mocks base method
func (m *MockBackupAPI) GetBackupPlanFromJSONRequest(arg0 *backup.GetBackupPlanFromJSONInput) (*request.Request, *backup.GetBackupPlanFromJSONOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupPlanFromJSONRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetBackupPlanFromJSONOutput)
	return ret0, ret1
}

// GetBackupPlanFromJSONRequest indicates an expected call of GetBackupPlanFromJSONRequest
func (mr *MockBackupAPIMockRecorder) GetBackupPlanFromJSONRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPlanFromJSONRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupPlanFromJSONRequest), arg0)
}

// GetBackupPlanFromJSONWithContext mocks base method
func (m *MockBackupAPI) GetBackupPlanFromJSONWithContext(arg0 context.Context, arg1 *backup.GetBackupPlanFromJSONInput, arg2 ...request.Option) (*backup.GetBackupPlanFromJSONOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackupPlanFromJSONWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetBackupPlanFromJSONOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupPlanFromJSONWithContext indicates an expected call of GetBackupPlanFromJSONWithContext
func (mr *MockBackupAPIMockRecorder) GetBackupPlanFromJSONWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPlanFromJSONWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupPlanFromJSONWithContext), varargs...)
}

// GetBackupPlanFromTemplate mocks base method
func (m *MockBackupAPI) GetBackupPlanFromTemplate(arg0 *backup.GetBackupPlanFromTemplateInput) (*backup.GetBackupPlanFromTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupPlanFromTemplate", arg0)
	ret0, _ := ret[0].(*backup.GetBackupPlanFromTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupPlanFromTemplate indicates an expected call of GetBackupPlanFromTemplate
func (mr *MockBackupAPIMockRecorder) GetBackupPlanFromTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPlanFromTemplate", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupPlanFromTemplate), arg0)
}

// GetBackupPlanFromTemplateRequest mocks base method
func (m *MockBackupAPI) GetBackupPlanFromTemplateRequest(arg0 *backup.GetBackupPlanFromTemplateInput) (*request.Request, *backup.GetBackupPlanFromTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupPlanFromTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetBackupPlanFromTemplateOutput)
	return ret0, ret1
}

// GetBackupPlanFromTemplateRequest indicates an expected call of GetBackupPlanFromTemplateRequest
func (mr *MockBackupAPIMockRecorder) GetBackupPlanFromTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPlanFromTemplateRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupPlanFromTemplateRequest), arg0)
}

// GetBackupPlanFromTemplateWithContext mocks base method
func (m *MockBackupAPI) GetBackupPlanFromTemplateWithContext(arg0 context.Context, arg1 *backup.GetBackupPlanFromTemplateInput, arg2 ...request.Option) (*backup.GetBackupPlanFromTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackupPlanFromTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetBackupPlanFromTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupPlanFromTemplateWithContext indicates an expected call of GetBackupPlanFromTemplateWithContext
func (mr *MockBackupAPIMockRecorder) GetBackupPlanFromTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPlanFromTemplateWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupPlanFromTemplateWithContext), varargs...)
}

// GetBackupPlanRequest mocks base method
func (m *MockBackupAPI) GetBackupPlanRequest(arg0 *backup.GetBackupPlanInput) (*request.Request, *backup.GetBackupPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetBackupPlanOutput)
	return ret0, ret1
}

// GetBackupPlanRequest indicates an expected call of GetBackupPlanRequest
func (mr *MockBackupAPIMockRecorder) GetBackupPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupPlanRequest), arg0)
}

// GetBackupPlanWithContext mocks base method
func (m *MockBackupAPI) GetBackupPlanWithContext(arg0 context.Context, arg1 *backup.GetBackupPlanInput, arg2 ...request.Option) (*backup.GetBackupPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackupPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetBackupPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupPlanWithContext indicates an expected call of GetBackupPlanWithContext
func (mr *MockBackupAPIMockRecorder) GetBackupPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupPlanWithContext), varargs...)
}

// GetBackupSelection mocks base method
func (m *MockBackupAPI) GetBackupSelection(arg0 *backup.GetBackupSelectionInput) (*backup.GetBackupSelectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupSelection", arg0)
	ret0, _ := ret[0].(*backup.GetBackupSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupSelection indicates an expected call of GetBackupSelection
func (mr *MockBackupAPIMockRecorder) GetBackupSelection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupSelection", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupSelection), arg0)
}

// GetBackupSelectionRequest mocks base method
func (m *MockBackupAPI) GetBackupSelectionRequest(arg0 *backup.GetBackupSelectionInput) (*request.Request, *backup.GetBackupSelectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupSelectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetBackupSelectionOutput)
	return ret0, ret1
}

// GetBackupSelectionRequest indicates an expected call of GetBackupSelectionRequest
func (mr *MockBackupAPIMockRecorder) GetBackupSelectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupSelectionRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupSelectionRequest), arg0)
}

// GetBackupSelectionWithContext mocks base method
func (m *MockBackupAPI) GetBackupSelectionWithContext(arg0 context.Context, arg1 *backup.GetBackupSelectionInput, arg2 ...request.Option) (*backup.GetBackupSelectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackupSelectionWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetBackupSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupSelectionWithContext indicates an expected call of GetBackupSelectionWithContext
func (mr *MockBackupAPIMockRecorder) GetBackupSelectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupSelectionWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupSelectionWithContext), varargs...)
}

// GetBackupVaultAccessPolicy mocks base method
func (m *MockBackupAPI) GetBackupVaultAccessPolicy(arg0 *backup.GetBackupVaultAccessPolicyInput) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupVaultAccessPolicy", arg0)
	ret0, _ := ret[0].(*backup.GetBackupVaultAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupVaultAccessPolicy indicates an expected call of GetBackupVaultAccessPolicy
func (mr *MockBackupAPIMockRecorder) GetBackupVaultAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupVaultAccessPolicy", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupVaultAccessPolicy), arg0)
}

// GetBackupVaultAccessPolicyRequest mocks base method
func (m *MockBackupAPI) GetBackupVaultAccessPolicyRequest(arg0 *backup.GetBackupVaultAccessPolicyInput) (*request.Request, *backup.GetBackupVaultAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupVaultAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetBackupVaultAccessPolicyOutput)
	return ret0, ret1
}

// GetBackupVaultAccessPolicyRequest indicates an expected call of GetBackupVaultAccessPolicyRequest
func (mr *MockBackupAPIMockRecorder) GetBackupVaultAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupVaultAccessPolicyRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupVaultAccessPolicyRequest), arg0)
}

// GetBackupVaultAccessPolicyWithContext mocks base method
func (m *MockBackupAPI) GetBackupVaultAccessPolicyWithContext(arg0 context.Context, arg1 *backup.GetBackupVaultAccessPolicyInput, arg2 ...request.Option) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackupVaultAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetBackupVaultAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupVaultAccessPolicyWithContext indicates an expected call of GetBackupVaultAccessPolicyWithContext
func (mr *MockBackupAPIMockRecorder) GetBackupVaultAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupVaultAccessPolicyWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupVaultAccessPolicyWithContext), varargs...)
}

// GetBackupVaultNotifications mocks base method
func (m *MockBackupAPI) GetBackupVaultNotifications(arg0 *backup.GetBackupVaultNotificationsInput) (*backup.GetBackupVaultNotificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupVaultNotifications", arg0)
	ret0, _ := ret[0].(*backup.GetBackupVaultNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupVaultNotifications indicates an expected call of GetBackupVaultNotifications
func (mr *MockBackupAPIMockRecorder) GetBackupVaultNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupVaultNotifications", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupVaultNotifications), arg0)
}

// GetBackupVaultNotificationsRequest mocks base method
func (m *MockBackupAPI) GetBackupVaultNotificationsRequest(arg0 *backup.GetBackupVaultNotificationsInput) (*request.Request, *backup.GetBackupVaultNotificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupVaultNotificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetBackupVaultNotificationsOutput)
	return ret0, ret1
}

// GetBackupVaultNotificationsRequest indicates an expected call of GetBackupVaultNotificationsRequest
func (mr *MockBackupAPIMockRecorder) GetBackupVaultNotificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupVaultNotificationsRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupVaultNotificationsRequest), arg0)
}

// GetBackupVaultNotificationsWithContext mocks base method
func (m *MockBackupAPI) GetBackupVaultNotificationsWithContext(arg0 context.Context, arg1 *backup.GetBackupVaultNotificationsInput, arg2 ...request.Option) (*backup.GetBackupVaultNotificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackupVaultNotificationsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetBackupVaultNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupVaultNotificationsWithContext indicates an expected call of GetBackupVaultNotificationsWithContext
func (mr *MockBackupAPIMockRecorder) GetBackupVaultNotificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupVaultNotificationsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetBackupVaultNotificationsWithContext), varargs...)
}

// GetLegalHold mocks base method
func (m *MockBackupAPI) GetLegalHold(arg0 *backup.GetLegalHoldInput) (*backup.GetLegalHoldOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLegalHold", arg0)
	ret0, _ := ret[0].(*backup.GetLegalHoldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLegalHold indicates an expected call of GetLegalHold
func (mr *MockBackupAPIMockRecorder) GetLegalHold(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLegalHold", reflect.TypeOf((*MockBackupAPI)(nil).GetLegalHold), arg0)
}

// GetLegalHoldRequest mocks base method
func (m *MockBackupAPI) GetLegalHoldRequest(arg0 *backup.GetLegalHoldInput) (*request.Request, *backup.GetLegalHoldOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLegalHoldRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetLegalHoldOutput)
	return ret0, ret1
}

// GetLegalHoldRequest indicates an expected call of GetLegalHoldRequest
func (mr *MockBackupAPIMockRecorder) GetLegalHoldRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLegalHoldRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetLegalHoldRequest), arg0)
}

// GetLegalHoldWithContext mocks base method
func (m *MockBackupAPI) GetLegalHoldWithContext(arg0 context.Context, arg1 *backup.GetLegalHoldInput, arg2 ...request.Option) (*backup.GetLegalHoldOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLegalHoldWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetLegalHoldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLegalHoldWithContext indicates an expected call of GetLegalHoldWithContext
func (mr *MockBackupAPIMockRecorder) GetLegalHoldWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLegalHoldWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetLegalHoldWithContext), varargs...)
}

// GetRecoveryPointRestoreMetadata mocks base method
func (m *MockBackupAPI) GetRecoveryPointRestoreMetadata(arg0 *backup.GetRecoveryPointRestoreMetadataInput) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryPointRestoreMetadata", arg0)
	ret0, _ := ret[0].(*backup.GetRecoveryPointRestoreMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryPointRestoreMetadata indicates an expected call of GetRecoveryPointRestoreMetadata
func (mr *MockBackupAPIMockRecorder) GetRecoveryPointRestoreMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryPointRestoreMetadata", reflect.TypeOf((*MockBackupAPI)(nil).GetRecoveryPointRestoreMetadata), arg0)
}

// GetRecoveryPointRestoreMetadataRequest mocks base method
func (m *MockBackupAPI) GetRecoveryPointRestoreMetadataRequest(arg0 *backup.GetRecoveryPointRestoreMetadataInput) (*request.Request, *backup.GetRecoveryPointRestoreMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryPointRestoreMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetRecoveryPointRestoreMetadataOutput)
	return ret0, ret1
}

// GetRecoveryPointRestoreMetadataRequest indicates an expected call of GetRecoveryPointRestoreMetadataRequest
func (mr *MockBackupAPIMockRecorder) GetRecoveryPointRestoreMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryPointRestoreMetadataRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetRecoveryPointRestoreMetadataRequest), arg0)
}

// GetRecoveryPointRestoreMetadataWithContext mocks base method
func (m *MockBackupAPI) GetRecoveryPointRestoreMetadataWithContext(arg0 context.Context, arg1 *backup.GetRecoveryPointRestoreMetadataInput, arg2 ...request.Option) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecoveryPointRestoreMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetRecoveryPointRestoreMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryPointRestoreMetadataWithContext indicates an expected call of GetRecoveryPointRestoreMetadataWithContext
func (mr *MockBackupAPIMockRecorder) GetRecoveryPointRestoreMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryPointRestoreMetadataWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetRecoveryPointRestoreMetadataWithContext), varargs...)
}

// GetRestoreJobMetadata mocks base method
func (m *MockBackupAPI) GetRestoreJobMetadata(arg0 *backup.GetRestoreJobMetadataInput) (*backup.GetRestoreJobMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestoreJobMetadata", arg0)
	ret0, _ := ret[0].(*backup.GetRestoreJobMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreJobMetadata indicates an expected call of GetRestoreJobMetadata
func (mr *MockBackupAPIMockRecorder) GetRestoreJobMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreJobMetadata", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreJobMetadata), arg0)
}

// GetRestoreJobMetadataRequest mocks base method
func (m *MockBackupAPI) GetRestoreJobMetadataRequest(arg0 *backup.GetRestoreJobMetadataInput) (*request.Request, *backup.GetRestoreJobMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestoreJobMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetRestoreJobMetadataOutput)
	return ret0, ret1
}

// GetRestoreJobMetadataRequest indicates an expected call of GetRestoreJobMetadataRequest
func (mr *MockBackupAPIMockRecorder) GetRestoreJobMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreJobMetadataRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreJobMetadataRequest), arg0)
}

// GetRestoreJobMetadataWithContext mocks base method
func (m *MockBackupAPI) GetRestoreJobMetadataWithContext(arg0 context.Context, arg1 *backup.GetRestoreJobMetadataInput, arg2 ...request.Option) (*backup.GetRestoreJobMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestoreJobMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetRestoreJobMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreJobMetadataWithContext indicates an expected call of GetRestoreJobMetadataWithContext
func (mr *MockBackupAPIMockRecorder) GetRestoreJobMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreJobMetadataWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreJobMetadataWithContext), varargs...)
}

// GetRestoreTestingInferredMetadata mocks base method
func (m *MockBackupAPI) GetRestoreTestingInferredMetadata(arg0 *backup.GetRestoreTestingInferredMetadataInput) (*backup.GetRestoreTestingInferredMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestoreTestingInferredMetadata", arg0)
	ret0, _ := ret[0].(*backup.GetRestoreTestingInferredMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreTestingInferredMetadata indicates an expected call of GetRestoreTestingInferredMetadata
func (mr *MockBackupAPIMockRecorder) GetRestoreTestingInferredMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreTestingInferredMetadata", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreTestingInferredMetadata), arg0)
}

// GetRestoreTestingInferredMetadataRequest mocks base method
func (m *MockBackupAPI) GetRestoreTestingInferredMetadataRequest(arg0 *backup.GetRestoreTestingInferredMetadataInput) (*request.Request, *backup.GetRestoreTestingInferredMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestoreTestingInferredMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetRestoreTestingInferredMetadataOutput)
	return ret0, ret1
}

// GetRestoreTestingInferredMetadataRequest indicates an expected call of GetRestoreTestingInferredMetadataRequest
func (mr *MockBackupAPIMockRecorder) GetRestoreTestingInferredMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreTestingInferredMetadataRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreTestingInferredMetadataRequest), arg0)
}

// GetRestoreTestingInferredMetadataWithContext mocks base method
func (m *MockBackupAPI) GetRestoreTestingInferredMetadataWithContext(arg0 context.Context, arg1 *backup.GetRestoreTestingInferredMetadataInput, arg2 ...request.Option) (*backup.GetRestoreTestingInferredMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestoreTestingInferredMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetRestoreTestingInferredMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreTestingInferredMetadataWithContext indicates an expected call of GetRestoreTestingInferredMetadataWithContext
func (mr *MockBackupAPIMockRecorder) GetRestoreTestingInferredMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreTestingInferredMetadataWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreTestingInferredMetadataWithContext), varargs...)
}

// GetRestoreTestingPlan mocks base method
func (m *MockBackupAPI) GetRestoreTestingPlan(arg0 *backup.GetRestoreTestingPlanInput) (*backup.GetRestoreTestingPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestoreTestingPlan", arg0)
	ret0, _ := ret[0].(*backup.GetRestoreTestingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreTestingPlan indicates an expected call of GetRestoreTestingPlan
func (mr *MockBackupAPIMockRecorder) GetRestoreTestingPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreTestingPlan", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreTestingPlan), arg0)
}

// GetRestoreTestingPlanRequest mocks base method
func (m *MockBackupAPI) GetRestoreTestingPlanRequest(arg0 *backup.GetRestoreTestingPlanInput) (*request.Request, *backup.GetRestoreTestingPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestoreTestingPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetRestoreTestingPlanOutput)
	return ret0, ret1
}

// GetRestoreTestingPlanRequest indicates an expected call of GetRestoreTestingPlanRequest
func (mr *MockBackupAPIMockRecorder) GetRestoreTestingPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreTestingPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreTestingPlanRequest), arg0)
}

// GetRestoreTestingPlanWithContext mocks base method
func (m *MockBackupAPI) GetRestoreTestingPlanWithContext(arg0 context.Context, arg1 *backup.GetRestoreTestingPlanInput, arg2 ...request.Option) (*backup.GetRestoreTestingPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestoreTestingPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetRestoreTestingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreTestingPlanWithContext indicates an expected call of GetRestoreTestingPlanWithContext
func (mr *MockBackupAPIMockRecorder) GetRestoreTestingPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreTestingPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreTestingPlanWithContext), varargs...)
}

// GetRestoreTestingSelection mocks base method
func (m *MockBackupAPI) GetRestoreTestingSelection(arg0 *backup.GetRestoreTestingSelectionInput) (*backup.GetRestoreTestingSelectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestoreTestingSelection", arg0)
	ret0, _ := ret[0].(*backup.GetRestoreTestingSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreTestingSelection indicates an expected call of GetRestoreTestingSelection
func (mr *MockBackupAPIMockRecorder) GetRestoreTestingSelection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreTestingSelection", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreTestingSelection), arg0)
}

// GetRestoreTestingSelectionRequest mocks base method
func (m *MockBackupAPI) GetRestoreTestingSelectionRequest(arg0 *backup.GetRestoreTestingSelectionInput) (*request.Request, *backup.GetRestoreTestingSelectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestoreTestingSelectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetRestoreTestingSelectionOutput)
	return ret0, ret1
}

// GetRestoreTestingSelectionRequest indicates an expected call of GetRestoreTestingSelectionRequest
func (mr *MockBackupAPIMockRecorder) GetRestoreTestingSelectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreTestingSelectionRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreTestingSelectionRequest), arg0)
}

// GetRestoreTestingSelectionWithContext mocks base method
func (m *MockBackupAPI) GetRestoreTestingSelectionWithContext(arg0 context.Context, arg1 *backup.GetRestoreTestingSelectionInput, arg2 ...request.Option) (*backup.GetRestoreTestingSelectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestoreTestingSelectionWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetRestoreTestingSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreTestingSelectionWithContext indicates an expected call of GetRestoreTestingSelectionWithContext
func (mr *MockBackupAPIMockRecorder) GetRestoreTestingSelectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreTestingSelectionWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetRestoreTestingSelectionWithContext), varargs...)
}

// GetSupportedResourceTypes mocks base method
func (m *MockBackupAPI) GetSupportedResourceTypes(arg0 *backup.GetSupportedResourceTypesInput) (*backup.GetSupportedResourceTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedResourceTypes", arg0)
	ret0, _ := ret[0].(*backup.GetSupportedResourceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedResourceTypes indicates an expected call of GetSupportedResourceTypes
func (mr *MockBackupAPIMockRecorder) GetSupportedResourceTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedResourceTypes", reflect.TypeOf((*MockBackupAPI)(nil).GetSupportedResourceTypes), arg0)
}

// GetSupportedResourceTypesRequest mocks base method
func (m *MockBackupAPI) GetSupportedResourceTypesRequest(arg0 *backup.GetSupportedResourceTypesInput) (*request.Request, *backup.GetSupportedResourceTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedResourceTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.GetSupportedResourceTypesOutput)
	return ret0, ret1
}

// GetSupportedResourceTypesRequest indicates an expected call of GetSupportedResourceTypesRequest
func (mr *MockBackupAPIMockRecorder) GetSupportedResourceTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedResourceTypesRequest", reflect.TypeOf((*MockBackupAPI)(nil).GetSupportedResourceTypesRequest), arg0)
}

// GetSupportedResourceTypesWithContext mocks base method
func (m *MockBackupAPI) GetSupportedResourceTypesWithContext(arg0 context.Context, arg1 *backup.GetSupportedResourceTypesInput, arg2 ...request.Option) (*backup.GetSupportedResourceTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSupportedResourceTypesWithContext", varargs...)
	ret0, _ := ret[0].(*backup.GetSupportedResourceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedResourceTypesWithContext indicates an expected call of GetSupportedResourceTypesWithContext
func (mr *MockBackupAPIMockRecorder) GetSupportedResourceTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedResourceTypesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).GetSupportedResourceTypesWithContext), varargs...)
}

// ListBackupJobSummaries mocks base method
func (m *MockBackupAPI) ListBackupJobSummaries(arg0 *backup.ListBackupJobSummariesInput) (*backup.ListBackupJobSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupJobSummaries", arg0)
	ret0, _ := ret[0].(*backup.ListBackupJobSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupJobSummaries indicates an expected call of ListBackupJobSummaries
func (mr *MockBackupAPIMockRecorder) ListBackupJobSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupJobSummaries", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupJobSummaries), arg0)
}

// ListBackupJobSummariesPages mocks base method
func (m *MockBackupAPI) ListBackupJobSummariesPages(arg0 *backup.ListBackupJobSummariesInput, arg1 func(*backup.ListBackupJobSummariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupJobSummariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupJobSummariesPages indicates an expected call of ListBackupJobSummariesPages
func (mr *MockBackupAPIMockRecorder) ListBackupJobSummariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupJobSummariesPages", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupJobSummariesPages), arg0, arg1)
}

// ListBackupJobSummariesPagesWithContext mocks base method
func (m *MockBackupAPI) ListBackupJobSummariesPagesWithContext(arg0 context.Context, arg1 *backup.ListBackupJobSummariesInput, arg2 func(*backup.ListBackupJobSummariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupJobSummariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupJobSummariesPagesWithContext indicates an expected call of ListBackupJobSummariesPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupJobSummariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupJobSummariesPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupJobSummariesPagesWithContext), varargs...)
}

// ListBackupJobSummariesRequest mocks base method
func (m *MockBackupAPI) ListBackupJobSummariesRequest(arg0 *backup.ListBackupJobSummariesInput) (*request.Request, *backup.ListBackupJobSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupJobSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListBackupJobSummariesOutput)
	return ret0, ret1
}

// ListBackupJobSummariesRequest indicates an expected call of ListBackupJobSummariesRequest
func (mr *MockBackupAPIMockRecorder) ListBackupJobSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupJobSummariesRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupJobSummariesRequest), arg0)
}

// ListBackupJobSummariesWithContext mocks base method
func (m *MockBackupAPI) ListBackupJobSummariesWithContext(arg0 context.Context, arg1 *backup.ListBackupJobSummariesInput, arg2 ...request.Option) (*backup.ListBackupJobSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupJobSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListBackupJobSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupJobSummariesWithContext indicates an expected call of ListBackupJobSummariesWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupJobSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupJobSummariesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupJobSummariesWithContext), varargs...)
}

// ListBackupJobs mocks base method
func (m *MockBackupAPI) ListBackupJobs(arg0 *backup.ListBackupJobsInput) (*backup.ListBackupJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupJobs", arg0)
	ret0, _ := ret[0].(*backup.ListBackupJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupJobs indicates an expected call of ListBackupJobs
func (mr *MockBackupAPIMockRecorder) ListBackupJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupJobs", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupJobs), arg0)
}

// ListBackupJobsPages mocks base method
func (m *MockBackupAPI) ListBackupJobsPages(arg0 *backup.ListBackupJobsInput, arg1 func(*backup.ListBackupJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupJobsPages indicates an expected call of ListBackupJobsPages
func (mr *MockBackupAPIMockRecorder) ListBackupJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupJobsPages", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupJobsPages), arg0, arg1)
}

// ListBackupJobsPagesWithContext mocks base method
func (m *MockBackupAPI) ListBackupJobsPagesWithContext(arg0 context.Context, arg1 *backup.ListBackupJobsInput, arg2 func(*backup.ListBackupJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupJobsPagesWithContext indicates an expected call of ListBackupJobsPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupJobsPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupJobsPagesWithContext), varargs...)
}

// ListBackupJobsRequest mocks base method
func (m *MockBackupAPI) ListBackupJobsRequest(arg0 *backup.ListBackupJobsInput) (*request.Request, *backup.ListBackupJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListBackupJobsOutput)
	return ret0, ret1
}

// ListBackupJobsRequest indicates an expected call of ListBackupJobsRequest
func (mr *MockBackupAPIMockRecorder) ListBackupJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupJobsRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupJobsRequest), arg0)
}

// ListBackupJobsWithContext mocks base method
func (m *MockBackupAPI) ListBackupJobsWithContext(arg0 context.Context, arg1 *backup.ListBackupJobsInput, arg2 ...request.Option) (*backup.ListBackupJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupJobsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListBackupJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupJobsWithContext indicates an expected call of ListBackupJobsWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupJobsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupJobsWithContext), varargs...)
}

// ListBackupPlanTemplates mocks base method
func (m *MockBackupAPI) ListBackupPlanTemplates(arg0 *backup.ListBackupPlanTemplatesInput) (*backup.ListBackupPlanTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPlanTemplates", arg0)
	ret0, _ := ret[0].(*backup.ListBackupPlanTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupPlanTemplates indicates an expected call of ListBackupPlanTemplates
func (mr *MockBackupAPIMockRecorder) ListBackupPlanTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlanTemplates", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlanTemplates), arg0)
}

// ListBackupPlanTemplatesPages mocks base method
func (m *MockBackupAPI) ListBackupPlanTemplatesPages(arg0 *backup.ListBackupPlanTemplatesInput, arg1 func(*backup.ListBackupPlanTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPlanTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupPlanTemplatesPages indicates an expected call of ListBackupPlanTemplatesPages
func (mr *MockBackupAPIMockRecorder) ListBackupPlanTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlanTemplatesPages", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlanTemplatesPages), arg0, arg1)
}

// ListBackupPlanTemplatesPagesWithContext mocks base method
func (m *MockBackupAPI) ListBackupPlanTemplatesPagesWithContext(arg0 context.Context, arg1 *backup.ListBackupPlanTemplatesInput, arg2 func(*backup.ListBackupPlanTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupPlanTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupPlanTemplatesPagesWithContext indicates an expected call of ListBackupPlanTemplatesPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupPlanTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlanTemplatesPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlanTemplatesPagesWithContext), varargs...)
}

// ListBackupPlanTemplatesRequest mocks base method
func (m *MockBackupAPI) ListBackupPlanTemplatesRequest(arg0 *backup.ListBackupPlanTemplatesInput) (*request.Request, *backup.ListBackupPlanTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPlanTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListBackupPlanTemplatesOutput)
	return ret0, ret1
}

// ListBackupPlanTemplatesRequest indicates an expected call of ListBackupPlanTemplatesRequest
func (mr *MockBackupAPIMockRecorder) ListBackupPlanTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlanTemplatesRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlanTemplatesRequest), arg0)
}

// ListBackupPlanTemplatesWithContext mocks base method
func (m *MockBackupAPI) ListBackupPlanTemplatesWithContext(arg0 context.Context, arg1 *backup.ListBackupPlanTemplatesInput, arg2 ...request.Option) (*backup.ListBackupPlanTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupPlanTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListBackupPlanTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupPlanTemplatesWithContext indicates an expected call of ListBackupPlanTemplatesWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupPlanTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlanTemplatesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlanTemplatesWithContext), varargs...)
}

// ListBackupPlanVersions mocks base method
func (m *MockBackupAPI) ListBackupPlanVersions(arg0 *backup.ListBackupPlanVersionsInput) (*backup.ListBackupPlanVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPlanVersions", arg0)
	ret0, _ := ret[0].(*backup.ListBackupPlanVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupPlanVersions indicates an expected call of ListBackupPlanVersions
func (mr *MockBackupAPIMockRecorder) ListBackupPlanVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlanVersions", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlanVersions), arg0)
}

// ListBackupPlanVersionsPages mocks base method
func (m *MockBackupAPI) ListBackupPlanVersionsPages(arg0 *backup.ListBackupPlanVersionsInput, arg1 func(*backup.ListBackupPlanVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPlanVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupPlanVersionsPages indicates an expected call of ListBackupPlanVersionsPages
func (mr *MockBackupAPIMockRecorder) ListBackupPlanVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlanVersionsPages", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlanVersionsPages), arg0, arg1)
}

// ListBackupPlanVersionsPagesWithContext mocks base method
func (m *MockBackupAPI) ListBackupPlanVersionsPagesWithContext(arg0 context.Context, arg1 *backup.ListBackupPlanVersionsInput, arg2 func(*backup.ListBackupPlanVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupPlanVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupPlanVersionsPagesWithContext indicates an expected call of ListBackupPlanVersionsPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupPlanVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlanVersionsPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlanVersionsPagesWithContext), varargs...)
}

// ListBackupPlanVersionsRequest mocks base method
func (m *MockBackupAPI) ListBackupPlanVersionsRequest(arg0 *backup.ListBackupPlanVersionsInput) (*request.Request, *backup.ListBackupPlanVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPlanVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListBackupPlanVersionsOutput)
	return ret0, ret1
}

// ListBackupPlanVersionsRequest indicates an expected call of ListBackupPlanVersionsRequest
func (mr *MockBackupAPIMockRecorder) ListBackupPlanVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlanVersionsRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlanVersionsRequest), arg0)
}

// ListBackupPlanVersionsWithContext mocks base method
func (m *MockBackupAPI) ListBackupPlanVersionsWithContext(arg0 context.Context, arg1 *backup.ListBackupPlanVersionsInput, arg2 ...request.Option) (*backup.ListBackupPlanVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupPlanVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListBackupPlanVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupPlanVersionsWithContext indicates an expected call of ListBackupPlanVersionsWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupPlanVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlanVersionsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlanVersionsWithContext), varargs...)
}

// ListBackupPlans mocks base method
func (m *MockBackupAPI) ListBackupPlans(arg0 *backup.ListBackupPlansInput) (*backup.ListBackupPlansOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPlans", arg0)
	ret0, _ := ret[0].(*backup.ListBackupPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupPlans indicates an expected call of ListBackupPlans
func (mr *MockBackupAPIMockRecorder) ListBackupPlans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlans", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlans), arg0)
}

// ListBackupPlansPages mocks base method
func (m *MockBackupAPI) ListBackupPlansPages(arg0 *backup.ListBackupPlansInput, arg1 func(*backup.ListBackupPlansOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPlansPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupPlansPages indicates an expected call of ListBackupPlansPages
func (mr *MockBackupAPIMockRecorder) ListBackupPlansPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlansPages", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlansPages), arg0, arg1)
}

// ListBackupPlansPagesWithContext mocks base method
func (m *MockBackupAPI) ListBackupPlansPagesWithContext(arg0 context.Context, arg1 *backup.ListBackupPlansInput, arg2 func(*backup.ListBackupPlansOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupPlansPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupPlansPagesWithContext indicates an expected call of ListBackupPlansPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupPlansPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlansPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlansPagesWithContext), varargs...)
}

// ListBackupPlansRequest mocks base method
func (m *MockBackupAPI) ListBackupPlansRequest(arg0 *backup.ListBackupPlansInput) (*request.Request, *backup.ListBackupPlansOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPlansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListBackupPlansOutput)
	return ret0, ret1
}

// ListBackupPlansRequest indicates an expected call of ListBackupPlansRequest
func (mr *MockBackupAPIMockRecorder) ListBackupPlansRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlansRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlansRequest), arg0)
}

// ListBackupPlansWithContext mocks base method
func (m *MockBackupAPI) ListBackupPlansWithContext(arg0 context.Context, arg1 *backup.ListBackupPlansInput, arg2 ...request.Option) (*backup.ListBackupPlansOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupPlansWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListBackupPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupPlansWithContext indicates an expected call of ListBackupPlansWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupPlansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPlansWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupPlansWithContext), varargs...)
}

// ListBackupSelections mocks base method
func (m *MockBackupAPI) ListBackupSelections(arg0 *backup.ListBackupSelectionsInput) (*backup.ListBackupSelectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupSelections", arg0)
	ret0, _ := ret[0].(*backup.ListBackupSelectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupSelections indicates an expected call of ListBackupSelections
func (mr *MockBackupAPIMockRecorder) ListBackupSelections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupSelections", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupSelections), arg0)
}

// ListBackupSelectionsPages mocks base method
func (m *MockBackupAPI) ListBackupSelectionsPages(arg0 *backup.ListBackupSelectionsInput, arg1 func(*backup.ListBackupSelectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupSelectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupSelectionsPages indicates an expected call of ListBackupSelectionsPages
func (mr *MockBackupAPIMockRecorder) ListBackupSelectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupSelectionsPages", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupSelectionsPages), arg0, arg1)
}

// ListBackupSelectionsPagesWithContext mocks base method
func (m *MockBackupAPI) ListBackupSelectionsPagesWithContext(arg0 context.Context, arg1 *backup.ListBackupSelectionsInput, arg2 func(*backup.ListBackupSelectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupSelectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupSelectionsPagesWithContext indicates an expected call of ListBackupSelectionsPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupSelectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupSelectionsPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupSelectionsPagesWithContext), varargs...)
}

// ListBackupSelectionsRequest mocks base method
func (m *MockBackupAPI) ListBackupSelectionsRequest(arg0 *backup.ListBackupSelectionsInput) (*request.Request, *backup.ListBackupSelectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupSelectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListBackupSelectionsOutput)
	return ret0, ret1
}

// ListBackupSelectionsRequest indicates an expected call of ListBackupSelectionsRequest
func (mr *MockBackupAPIMockRecorder) ListBackupSelectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupSelectionsRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupSelectionsRequest), arg0)
}

// ListBackupSelectionsWithContext mocks base method
func (m *MockBackupAPI) ListBackupSelectionsWithContext(arg0 context.Context, arg1 *backup.ListBackupSelectionsInput, arg2 ...request.Option) (*backup.ListBackupSelectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupSelectionsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListBackupSelectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupSelectionsWithContext indicates an expected call of ListBackupSelectionsWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupSelectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupSelectionsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupSelectionsWithContext), varargs...)
}

// ListBackupVaults mocks base method
func (m *MockBackupAPI) ListBackupVaults(arg0 *backup.ListBackupVaultsInput) (*backup.ListBackupVaultsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupVaults", arg0)
	ret0, _ := ret[0].(*backup.ListBackupVaultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupVaults indicates an expected call of ListBackupVaults
func (mr *MockBackupAPIMockRecorder) ListBackupVaults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupVaults", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupVaults), arg0)
}

// ListBackupVaultsPages mocks base method
func (m *MockBackupAPI) ListBackupVaultsPages(arg0 *backup.ListBackupVaultsInput, arg1 func(*backup.ListBackupVaultsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupVaultsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupVaultsPages indicates an expected call of ListBackupVaultsPages
func (mr *MockBackupAPIMockRecorder) ListBackupVaultsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupVaultsPages", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupVaultsPages), arg0, arg1)
}

// ListBackupVaultsPagesWithContext mocks base method
func (m *MockBackupAPI) ListBackupVaultsPagesWithContext(arg0 context.Context, arg1 *backup.ListBackupVaultsInput, arg2 func(*backup.ListBackupVaultsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupVaultsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackupVaultsPagesWithContext indicates an expected call of ListBackupVaultsPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupVaultsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupVaultsPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupVaultsPagesWithContext), varargs...)
}

// ListBackupVaultsRequest mocks base method
func (m *MockBackupAPI) ListBackupVaultsRequest(arg0 *backup.ListBackupVaultsInput) (*request.Request, *backup.ListBackupVaultsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupVaultsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListBackupVaultsOutput)
	return ret0, ret1
}

// ListBackupVaultsRequest indicates an expected call of ListBackupVaultsRequest
func (mr *MockBackupAPIMockRecorder) ListBackupVaultsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupVaultsRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupVaultsRequest), arg0)
}

// ListBackupVaultsWithContext mocks base method
func (m *MockBackupAPI) ListBackupVaultsWithContext(arg0 context.Context, arg1 *backup.ListBackupVaultsInput, arg2 ...request.Option) (*backup.ListBackupVaultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupVaultsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListBackupVaultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupVaultsWithContext indicates an expected call of ListBackupVaultsWithContext
func (mr *MockBackupAPIMockRecorder) ListBackupVaultsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupVaultsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListBackupVaultsWithContext), varargs...)
}

// ListCopyJobSummaries mocks base method
func (m *MockBackupAPI) ListCopyJobSummaries(arg0 *backup.ListCopyJobSummariesInput) (*backup.ListCopyJobSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCopyJobSummaries", arg0)
	ret0, _ := ret[0].(*backup.ListCopyJobSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCopyJobSummaries indicates an expected call of ListCopyJobSummaries
func (mr *MockBackupAPIMockRecorder) ListCopyJobSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCopyJobSummaries", reflect.TypeOf((*MockBackupAPI)(nil).ListCopyJobSummaries), arg0)
}

// ListCopyJobSummariesPages mocks base method
func (m *MockBackupAPI) ListCopyJobSummariesPages(arg0 *backup.ListCopyJobSummariesInput, arg1 func(*backup.ListCopyJobSummariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCopyJobSummariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCopyJobSummariesPages indicates an expected call of ListCopyJobSummariesPages
func (mr *MockBackupAPIMockRecorder) ListCopyJobSummariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCopyJobSummariesPages", reflect.TypeOf((*MockBackupAPI)(nil).ListCopyJobSummariesPages), arg0, arg1)
}

// ListCopyJobSummariesPagesWithContext mocks base method
func (m *MockBackupAPI) ListCopyJobSummariesPagesWithContext(arg0 context.Context, arg1 *backup.ListCopyJobSummariesInput, arg2 func(*backup.ListCopyJobSummariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCopyJobSummariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCopyJobSummariesPagesWithContext indicates an expected call of ListCopyJobSummariesPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListCopyJobSummariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCopyJobSummariesPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListCopyJobSummariesPagesWithContext), varargs...)
}

// ListCopyJobSummariesRequest mocks base method
func (m *MockBackupAPI) ListCopyJobSummariesRequest(arg0 *backup.ListCopyJobSummariesInput) (*request.Request, *backup.ListCopyJobSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCopyJobSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListCopyJobSummariesOutput)
	return ret0, ret1
}

// ListCopyJobSummariesRequest indicates an expected call of ListCopyJobSummariesRequest
func (mr *MockBackupAPIMockRecorder) ListCopyJobSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCopyJobSummariesRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListCopyJobSummariesRequest), arg0)
}

// ListCopyJobSummariesWithContext mocks base method
func (m *MockBackupAPI) ListCopyJobSummariesWithContext(arg0 context.Context, arg1 *backup.ListCopyJobSummariesInput, arg2 ...request.Option) (*backup.ListCopyJobSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCopyJobSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListCopyJobSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCopyJobSummariesWithContext indicates an expected call of ListCopyJobSummariesWithContext
func (mr *MockBackupAPIMockRecorder) ListCopyJobSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCopyJobSummariesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListCopyJobSummariesWithContext), varargs...)
}

// ListCopyJobs mocks base method
func (m *MockBackupAPI) ListCopyJobs(arg0 *backup.ListCopyJobsInput) (*backup.ListCopyJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCopyJobs", arg0)
	ret0, _ := ret[0].(*backup.ListCopyJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCopyJobs indicates an expected call of ListCopyJobs
func (mr *MockBackupAPIMockRecorder) ListCopyJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCopyJobs", reflect.TypeOf((*MockBackupAPI)(nil).ListCopyJobs), arg0)
}

// ListCopyJobsPages mocks base method
func (m *MockBackupAPI) ListCopyJobsPages(arg0 *backup.ListCopyJobsInput, arg1 func(*backup.ListCopyJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCopyJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCopyJobsPages indicates an expected call of ListCopyJobsPages
func (mr *MockBackupAPIMockRecorder) ListCopyJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCopyJobsPages", reflect.TypeOf((*MockBackupAPI)(nil).ListCopyJobsPages), arg0, arg1)
}

// ListCopyJobsPagesWithContext mocks base method
func (m *MockBackupAPI) ListCopyJobsPagesWithContext(arg0 context.Context, arg1 *backup.ListCopyJobsInput, arg2 func(*backup.ListCopyJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCopyJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCopyJobsPagesWithContext indicates an expected call of ListCopyJobsPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListCopyJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCopyJobsPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListCopyJobsPagesWithContext), varargs...)
}

// ListCopyJobsRequest mocks base method
func (m *MockBackupAPI) ListCopyJobsRequest(arg0 *backup.ListCopyJobsInput) (*request.Request, *backup.ListCopyJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCopyJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListCopyJobsOutput)
	return ret0, ret1
}

// ListCopyJobsRequest indicates an expected call of ListCopyJobsRequest
func (mr *MockBackupAPIMockRecorder) ListCopyJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCopyJobsRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListCopyJobsRequest), arg0)
}

// ListCopyJobsWithContext mocks base method
func (m *MockBackupAPI) ListCopyJobsWithContext(arg0 context.Context, arg1 *backup.ListCopyJobsInput, arg2 ...request.Option) (*backup.ListCopyJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCopyJobsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListCopyJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCopyJobsWithContext indicates an expected call of ListCopyJobsWithContext
func (mr *MockBackupAPIMockRecorder) ListCopyJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCopyJobsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListCopyJobsWithContext), varargs...)
}

// ListFrameworks mocks base method
func (m *MockBackupAPI) ListFrameworks(arg0 *backup.ListFrameworksInput) (*backup.ListFrameworksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFrameworks", arg0)
	ret0, _ := ret[0].(*backup.ListFrameworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFrameworks indicates an expected call of ListFrameworks
func (mr *MockBackupAPIMockRecorder) ListFrameworks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFrameworks", reflect.TypeOf((*MockBackupAPI)(nil).ListFrameworks), arg0)
}

// ListFrameworksPages mocks base method
func (m *MockBackupAPI) ListFrameworksPages(arg0 *backup.ListFrameworksInput, arg1 func(*backup.ListFrameworksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFrameworksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFrameworksPages indicates an expected call of ListFrameworksPages
func (mr *MockBackupAPIMockRecorder) ListFrameworksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFrameworksPages", reflect.TypeOf((*MockBackupAPI)(nil).ListFrameworksPages), arg0, arg1)
}

// ListFrameworksPagesWithContext mocks base method
func (m *MockBackupAPI) ListFrameworksPagesWithContext(arg0 context.Context, arg1 *backup.ListFrameworksInput, arg2 func(*backup.ListFrameworksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFrameworksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFrameworksPagesWithContext indicates an expected call of ListFrameworksPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListFrameworksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFrameworksPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListFrameworksPagesWithContext), varargs...)
}

// ListFrameworksRequest mocks base method
func (m *MockBackupAPI) ListFrameworksRequest(arg0 *backup.ListFrameworksInput) (*request.Request, *backup.ListFrameworksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFrameworksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListFrameworksOutput)
	return ret0, ret1
}

// ListFrameworksRequest indicates an expected call of ListFrameworksRequest
func (mr *MockBackupAPIMockRecorder) ListFrameworksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFrameworksRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListFrameworksRequest), arg0)
}

// ListFrameworksWithContext mocks base method
func (m *MockBackupAPI) ListFrameworksWithContext(arg0 context.Context, arg1 *backup.ListFrameworksInput, arg2 ...request.Option) (*backup.ListFrameworksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFrameworksWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListFrameworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFrameworksWithContext indicates an expected call of ListFrameworksWithContext
func (mr *MockBackupAPIMockRecorder) ListFrameworksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFrameworksWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListFrameworksWithContext), varargs...)
}

// ListLegalHolds mocks base method
func (m *MockBackupAPI) ListLegalHolds(arg0 *backup.ListLegalHoldsInput) (*backup.ListLegalHoldsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLegalHolds", arg0)
	ret0, _ := ret[0].(*backup.ListLegalHoldsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLegalHolds indicates an expected call of ListLegalHolds
func (mr *MockBackupAPIMockRecorder) ListLegalHolds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLegalHolds", reflect.TypeOf((*MockBackupAPI)(nil).ListLegalHolds), arg0)
}

// ListLegalHoldsPages mocks base method
func (m *MockBackupAPI) ListLegalHoldsPages(arg0 *backup.ListLegalHoldsInput, arg1 func(*backup.ListLegalHoldsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLegalHoldsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLegalHoldsPages indicates an expected call of ListLegalHoldsPages
func (mr *MockBackupAPIMockRecorder) ListLegalHoldsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLegalHoldsPages", reflect.TypeOf((*MockBackupAPI)(nil).ListLegalHoldsPages), arg0, arg1)
}

// ListLegalHoldsPagesWithContext mocks base method
func (m *MockBackupAPI) ListLegalHoldsPagesWithContext(arg0 context.Context, arg1 *backup.ListLegalHoldsInput, arg2 func(*backup.ListLegalHoldsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLegalHoldsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLegalHoldsPagesWithContext indicates an expected call of ListLegalHoldsPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListLegalHoldsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLegalHoldsPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListLegalHoldsPagesWithContext), varargs...)
}

// ListLegalHoldsRequest mocks base method
func (m *MockBackupAPI) ListLegalHoldsRequest(arg0 *backup.ListLegalHoldsInput) (*request.Request, *backup.ListLegalHoldsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLegalHoldsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListLegalHoldsOutput)
	return ret0, ret1
}

// ListLegalHoldsRequest indicates an expected call of ListLegalHoldsRequest
func (mr *MockBackupAPIMockRecorder) ListLegalHoldsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLegalHoldsRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListLegalHoldsRequest), arg0)
}

// ListLegalHoldsWithContext mocks base method
func (m *MockBackupAPI) ListLegalHoldsWithContext(arg0 context.Context, arg1 *backup.ListLegalHoldsInput, arg2 ...request.Option) (*backup.ListLegalHoldsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLegalHoldsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListLegalHoldsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLegalHoldsWithContext indicates an expected call of ListLegalHoldsWithContext
func (mr *MockBackupAPIMockRecorder) ListLegalHoldsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLegalHoldsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListLegalHoldsWithContext), varargs...)
}

// ListProtectedResources mocks base method
func (m *MockBackupAPI) ListProtectedResources(arg0 *backup.ListProtectedResourcesInput) (*backup.ListProtectedResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProtectedResources", arg0)
	ret0, _ := ret[0].(*backup.ListProtectedResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProtectedResources indicates an expected call of ListProtectedResources
func (mr *MockBackupAPIMockRecorder) ListProtectedResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedResources", reflect.TypeOf((*MockBackupAPI)(nil).ListProtectedResources), arg0)
}

// ListProtectedResourcesByBackupVault mocks base method
func (m *MockBackupAPI) ListProtectedResourcesByBackupVault(arg0 *backup.ListProtectedResourcesByBackupVaultInput) (*backup.ListProtectedResourcesByBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProtectedResourcesByBackupVault", arg0)
	ret0, _ := ret[0].(*backup.ListProtectedResourcesByBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProtectedResourcesByBackupVault indicates an expected call of ListProtectedResourcesByBackupVault
func (mr *MockBackupAPIMockRecorder) ListProtectedResourcesByBackupVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedResourcesByBackupVault", reflect.TypeOf((*MockBackupAPI)(nil).ListProtectedResourcesByBackupVault), arg0)
}

// ListProtectedResourcesByBackupVaultPages mocks base method
func (m *MockBackupAPI) ListProtectedResourcesByBackupVaultPages(arg0 *backup.ListProtectedResourcesByBackupVaultInput, arg1 func(*backup.ListProtectedResourcesByBackupVaultOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProtectedResourcesByBackupVaultPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProtectedResourcesByBackupVaultPages indicates an expected call of ListProtectedResourcesByBackupVaultPages
func (mr *MockBackupAPIMockRecorder) ListProtectedResourcesByBackupVaultPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedResourcesByBackupVaultPages", reflect.TypeOf((*MockBackupAPI)(nil).ListProtectedResourcesByBackupVaultPages), arg0, arg1)
}

// ListProtectedResourcesByBackupVaultPagesWithContext mocks base method
func (m *MockBackupAPI) ListProtectedResourcesByBackupVaultPagesWithContext(arg0 context.Context, arg1 *backup.ListProtectedResourcesByBackupVaultInput, arg2 func(*backup.ListProtectedResourcesByBackupVaultOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectedResourcesByBackupVaultPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProtectedResourcesByBackupVaultPagesWithContext indicates an expected call of ListProtectedResourcesByBackupVaultPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListProtectedResourcesByBackupVaultPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedResourcesByBackupVaultPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListProtectedResourcesByBackupVaultPagesWithContext), varargs...)
}

// ListProtectedResourcesByBackupVaultRequest mocks base method
func (m *MockBackupAPI) ListProtectedResourcesByBackupVaultRequest(arg0 *backup.ListProtectedResourcesByBackupVaultInput) (*request.Request, *backup.ListProtectedResourcesByBackupVaultOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProtectedResourcesByBackupVaultRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListProtectedResourcesByBackupVaultOutput)
	return ret0, ret1
}

// ListProtectedResourcesByBackupVaultRequest indicates an expected call of ListProtectedResourcesByBackupVaultRequest
func (mr *MockBackupAPIMockRecorder) ListProtectedResourcesByBackupVaultRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedResourcesByBackupVaultRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListProtectedResourcesByBackupVaultRequest), arg0)
}

// ListProtectedResourcesByBackupVaultWithContext mocks base method
func (m *MockBackupAPI) ListProtectedResourcesByBackupVaultWithContext(arg0 context.Context, arg1 *backup.ListProtectedResourcesByBackupVaultInput, arg2 ...request.Option) (*backup.ListProtectedResourcesByBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectedResourcesByBackupVaultWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListProtectedResourcesByBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProtectedResourcesByBackupVaultWithContext indicates an expected call of ListProtectedResourcesByBackupVaultWithContext
func (mr *MockBackupAPIMockRecorder) ListProtectedResourcesByBackupVaultWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedResourcesByBackupVaultWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListProtectedResourcesByBackupVaultWithContext), varargs...)
}

// ListProtectedResourcesPages mocks base method
func (m *MockBackupAPI) ListProtectedResourcesPages(arg0 *backup.ListProtectedResourcesInput, arg1 func(*backup.ListProtectedResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProtectedResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProtectedResourcesPages indicates an expected call of ListProtectedResourcesPages
func (mr *MockBackupAPIMockRecorder) ListProtectedResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedResourcesPages", reflect.TypeOf((*MockBackupAPI)(nil).ListProtectedResourcesPages), arg0, arg1)
}

// ListProtectedResourcesPagesWithContext mocks base method
func (m *MockBackupAPI) ListProtectedResourcesPagesWithContext(arg0 context.Context, arg1 *backup.ListProtectedResourcesInput, arg2 func(*backup.ListProtectedResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectedResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProtectedResourcesPagesWithContext indicates an expected call of ListProtectedResourcesPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListProtectedResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedResourcesPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListProtectedResourcesPagesWithContext), varargs...)
}

// ListProtectedResourcesRequest mocks base method
func (m *MockBackupAPI) ListProtectedResourcesRequest(arg0 *backup.ListProtectedResourcesInput) (*request.Request, *backup.ListProtectedResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProtectedResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListProtectedResourcesOutput)
	return ret0, ret1
}

// ListProtectedResourcesRequest indicates an expected call of ListProtectedResourcesRequest
func (mr *MockBackupAPIMockRecorder) ListProtectedResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedResourcesRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListProtectedResourcesRequest), arg0)
}

// ListProtectedResourcesWithContext mocks base method
func (m *MockBackupAPI) ListProtectedResourcesWithContext(arg0 context.Context, arg1 *backup.ListProtectedResourcesInput, arg2 ...request.Option) (*backup.ListProtectedResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectedResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListProtectedResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProtectedResourcesWithContext indicates an expected call of ListProtectedResourcesWithContext
func (mr *MockBackupAPIMockRecorder) ListProtectedResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedResourcesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListProtectedResourcesWithContext), varargs...)
}

// ListRecoveryPointsByBackupVault mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByBackupVault(arg0 *backup.ListRecoveryPointsByBackupVaultInput) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsByBackupVault", arg0)
	ret0, _ := ret[0].(*backup.ListRecoveryPointsByBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryPointsByBackupVault indicates an expected call of ListRecoveryPointsByBackupVault
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByBackupVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByBackupVault", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByBackupVault), arg0)
}

// ListRecoveryPointsByBackupVaultPages mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByBackupVaultPages(arg0 *backup.ListRecoveryPointsByBackupVaultInput, arg1 func(*backup.ListRecoveryPointsByBackupVaultOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsByBackupVaultPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecoveryPointsByBackupVaultPages indicates an expected call of ListRecoveryPointsByBackupVaultPages
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByBackupVaultPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByBackupVaultPages", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByBackupVaultPages), arg0, arg1)
}

// ListRecoveryPointsByBackupVaultPagesWithContext mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByBackupVaultPagesWithContext(arg0 context.Context, arg1 *backup.ListRecoveryPointsByBackupVaultInput, arg2 func(*backup.ListRecoveryPointsByBackupVaultOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryPointsByBackupVaultPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecoveryPointsByBackupVaultPagesWithContext indicates an expected call of ListRecoveryPointsByBackupVaultPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByBackupVaultPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByBackupVaultPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByBackupVaultPagesWithContext), varargs...)
}

// ListRecoveryPointsByBackupVaultRequest mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByBackupVaultRequest(arg0 *backup.ListRecoveryPointsByBackupVaultInput) (*request.Request, *backup.ListRecoveryPointsByBackupVaultOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsByBackupVaultRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListRecoveryPointsByBackupVaultOutput)
	return ret0, ret1
}

// ListRecoveryPointsByBackupVaultRequest indicates an expected call of ListRecoveryPointsByBackupVaultRequest
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByBackupVaultRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByBackupVaultRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByBackupVaultRequest), arg0)
}

// ListRecoveryPointsByBackupVaultWithContext mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByBackupVaultWithContext(arg0 context.Context, arg1 *backup.ListRecoveryPointsByBackupVaultInput, arg2 ...request.Option) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryPointsByBackupVaultWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListRecoveryPointsByBackupVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryPointsByBackupVaultWithContext indicates an expected call of ListRecoveryPointsByBackupVaultWithContext
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByBackupVaultWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByBackupVaultWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByBackupVaultWithContext), varargs...)
}

// ListRecoveryPointsByLegalHold mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByLegalHold(arg0 *backup.ListRecoveryPointsByLegalHoldInput) (*backup.ListRecoveryPointsByLegalHoldOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsByLegalHold", arg0)
	ret0, _ := ret[0].(*backup.ListRecoveryPointsByLegalHoldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryPointsByLegalHold indicates an expected call of ListRecoveryPointsByLegalHold
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByLegalHold(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByLegalHold", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByLegalHold), arg0)
}

// ListRecoveryPointsByLegalHoldPages mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByLegalHoldPages(arg0 *backup.ListRecoveryPointsByLegalHoldInput, arg1 func(*backup.ListRecoveryPointsByLegalHoldOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsByLegalHoldPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecoveryPointsByLegalHoldPages indicates an expected call of ListRecoveryPointsByLegalHoldPages
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByLegalHoldPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByLegalHoldPages", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByLegalHoldPages), arg0, arg1)
}

// ListRecoveryPointsByLegalHoldPagesWithContext mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByLegalHoldPagesWithContext(arg0 context.Context, arg1 *backup.ListRecoveryPointsByLegalHoldInput, arg2 func(*backup.ListRecoveryPointsByLegalHoldOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryPointsByLegalHoldPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecoveryPointsByLegalHoldPagesWithContext indicates an expected call of ListRecoveryPointsByLegalHoldPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByLegalHoldPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByLegalHoldPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByLegalHoldPagesWithContext), varargs...)
}

// ListRecoveryPointsByLegalHoldRequest mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByLegalHoldRequest(arg0 *backup.ListRecoveryPointsByLegalHoldInput) (*request.Request, *backup.ListRecoveryPointsByLegalHoldOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsByLegalHoldRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListRecoveryPointsByLegalHoldOutput)
	return ret0, ret1
}

// ListRecoveryPointsByLegalHoldRequest indicates an expected call of ListRecoveryPointsByLegalHoldRequest
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByLegalHoldRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByLegalHoldRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByLegalHoldRequest), arg0)
}

// ListRecoveryPointsByLegalHoldWithContext mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByLegalHoldWithContext(arg0 context.Context, arg1 *backup.ListRecoveryPointsByLegalHoldInput, arg2 ...request.Option) (*backup.ListRecoveryPointsByLegalHoldOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryPointsByLegalHoldWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListRecoveryPointsByLegalHoldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryPointsByLegalHoldWithContext indicates an expected call of ListRecoveryPointsByLegalHoldWithContext
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByLegalHoldWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByLegalHoldWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByLegalHoldWithContext), varargs...)
}

// ListRecoveryPointsByResource mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByResource(arg0 *backup.ListRecoveryPointsByResourceInput) (*backup.ListRecoveryPointsByResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsByResource", arg0)
	ret0, _ := ret[0].(*backup.ListRecoveryPointsByResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryPointsByResource indicates an expected call of ListRecoveryPointsByResource
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByResource", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByResource), arg0)
}

// ListRecoveryPointsByResourcePages mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByResourcePages(arg0 *backup.ListRecoveryPointsByResourceInput, arg1 func(*backup.ListRecoveryPointsByResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsByResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecoveryPointsByResourcePages indicates an expected call of ListRecoveryPointsByResourcePages
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByResourcePages", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByResourcePages), arg0, arg1)
}

// ListRecoveryPointsByResourcePagesWithContext mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByResourcePagesWithContext(arg0 context.Context, arg1 *backup.ListRecoveryPointsByResourceInput, arg2 func(*backup.ListRecoveryPointsByResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryPointsByResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecoveryPointsByResourcePagesWithContext indicates an expected call of ListRecoveryPointsByResourcePagesWithContext
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByResourcePagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByResourcePagesWithContext), varargs...)
}

// ListRecoveryPointsByResourceRequest mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByResourceRequest(arg0 *backup.ListRecoveryPointsByResourceInput) (*request.Request, *backup.ListRecoveryPointsByResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsByResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListRecoveryPointsByResourceOutput)
	return ret0, ret1
}

// ListRecoveryPointsByResourceRequest indicates an expected call of ListRecoveryPointsByResourceRequest
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByResourceRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByResourceRequest), arg0)
}

// ListRecoveryPointsByResourceWithContext mocks base method
func (m *MockBackupAPI) ListRecoveryPointsByResourceWithContext(arg0 context.Context, arg1 *backup.ListRecoveryPointsByResourceInput, arg2 ...request.Option) (*backup.ListRecoveryPointsByResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryPointsByResourceWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListRecoveryPointsByResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryPointsByResourceWithContext indicates an expected call of ListRecoveryPointsByResourceWithContext
func (mr *MockBackupAPIMockRecorder) ListRecoveryPointsByResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByResourceWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRecoveryPointsByResourceWithContext), varargs...)
}

// ListReportJobs mocks base method
func (m *MockBackupAPI) ListReportJobs(arg0 *backup.ListReportJobsInput) (*backup.ListReportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportJobs", arg0)
	ret0, _ := ret[0].(*backup.ListReportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReportJobs indicates an expected call of ListReportJobs
func (mr *MockBackupAPIMockRecorder) ListReportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportJobs", reflect.TypeOf((*MockBackupAPI)(nil).ListReportJobs), arg0)
}

// ListReportJobsPages mocks base method
func (m *MockBackupAPI) ListReportJobsPages(arg0 *backup.ListReportJobsInput, arg1 func(*backup.ListReportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReportJobsPages indicates an expected call of ListReportJobsPages
func (mr *MockBackupAPIMockRecorder) ListReportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportJobsPages", reflect.TypeOf((*MockBackupAPI)(nil).ListReportJobsPages), arg0, arg1)
}

// ListReportJobsPagesWithContext mocks base method
func (m *MockBackupAPI) ListReportJobsPagesWithContext(arg0 context.Context, arg1 *backup.ListReportJobsInput, arg2 func(*backup.ListReportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReportJobsPagesWithContext indicates an expected call of ListReportJobsPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListReportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportJobsPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListReportJobsPagesWithContext), varargs...)
}

// ListReportJobsRequest mocks base method
func (m *MockBackupAPI) ListReportJobsRequest(arg0 *backup.ListReportJobsInput) (*request.Request, *backup.ListReportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListReportJobsOutput)
	return ret0, ret1
}

// ListReportJobsRequest indicates an expected call of ListReportJobsRequest
func (mr *MockBackupAPIMockRecorder) ListReportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportJobsRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListReportJobsRequest), arg0)
}

// ListReportJobsWithContext mocks base method
func (m *MockBackupAPI) ListReportJobsWithContext(arg0 context.Context, arg1 *backup.ListReportJobsInput, arg2 ...request.Option) (*backup.ListReportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListReportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReportJobsWithContext indicates an expected call of ListReportJobsWithContext
func (mr *MockBackupAPIMockRecorder) ListReportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportJobsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListReportJobsWithContext), varargs...)
}

// ListReportPlans mocks base method
func (m *MockBackupAPI) ListReportPlans(arg0 *backup.ListReportPlansInput) (*backup.ListReportPlansOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportPlans", arg0)
	ret0, _ := ret[0].(*backup.ListReportPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReportPlans indicates an expected call of ListReportPlans
func (mr *MockBackupAPIMockRecorder) ListReportPlans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportPlans", reflect.TypeOf((*MockBackupAPI)(nil).ListReportPlans), arg0)
}

// ListReportPlansPages mocks base method
func (m *MockBackupAPI) ListReportPlansPages(arg0 *backup.ListReportPlansInput, arg1 func(*backup.ListReportPlansOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportPlansPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReportPlansPages indicates an expected call of ListReportPlansPages
func (mr *MockBackupAPIMockRecorder) ListReportPlansPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportPlansPages", reflect.TypeOf((*MockBackupAPI)(nil).ListReportPlansPages), arg0, arg1)
}

// ListReportPlansPagesWithContext mocks base method
func (m *MockBackupAPI) ListReportPlansPagesWithContext(arg0 context.Context, arg1 *backup.ListReportPlansInput, arg2 func(*backup.ListReportPlansOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReportPlansPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReportPlansPagesWithContext indicates an expected call of ListReportPlansPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListReportPlansPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportPlansPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListReportPlansPagesWithContext), varargs...)
}

// ListReportPlansRequest mocks base method
func (m *MockBackupAPI) ListReportPlansRequest(arg0 *backup.ListReportPlansInput) (*request.Request, *backup.ListReportPlansOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportPlansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListReportPlansOutput)
	return ret0, ret1
}

// ListReportPlansRequest indicates an expected call of ListReportPlansRequest
func (mr *MockBackupAPIMockRecorder) ListReportPlansRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportPlansRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListReportPlansRequest), arg0)
}

// ListReportPlansWithContext mocks base method
func (m *MockBackupAPI) ListReportPlansWithContext(arg0 context.Context, arg1 *backup.ListReportPlansInput, arg2 ...request.Option) (*backup.ListReportPlansOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReportPlansWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListReportPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReportPlansWithContext indicates an expected call of ListReportPlansWithContext
func (mr *MockBackupAPIMockRecorder) ListReportPlansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportPlansWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListReportPlansWithContext), varargs...)
}

// ListRestoreJobSummaries mocks base method
func (m *MockBackupAPI) ListRestoreJobSummaries(arg0 *backup.ListRestoreJobSummariesInput) (*backup.ListRestoreJobSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreJobSummaries", arg0)
	ret0, _ := ret[0].(*backup.ListRestoreJobSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreJobSummaries indicates an expected call of ListRestoreJobSummaries
func (mr *MockBackupAPIMockRecorder) ListRestoreJobSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobSummaries", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobSummaries), arg0)
}

// ListRestoreJobSummariesPages mocks base method
func (m *MockBackupAPI) ListRestoreJobSummariesPages(arg0 *backup.ListRestoreJobSummariesInput, arg1 func(*backup.ListRestoreJobSummariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreJobSummariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRestoreJobSummariesPages indicates an expected call of ListRestoreJobSummariesPages
func (mr *MockBackupAPIMockRecorder) ListRestoreJobSummariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobSummariesPages", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobSummariesPages), arg0, arg1)
}

// ListRestoreJobSummariesPagesWithContext mocks base method
func (m *MockBackupAPI) ListRestoreJobSummariesPagesWithContext(arg0 context.Context, arg1 *backup.ListRestoreJobSummariesInput, arg2 func(*backup.ListRestoreJobSummariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreJobSummariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRestoreJobSummariesPagesWithContext indicates an expected call of ListRestoreJobSummariesPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListRestoreJobSummariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobSummariesPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobSummariesPagesWithContext), varargs...)
}

// ListRestoreJobSummariesRequest mocks base method
func (m *MockBackupAPI) ListRestoreJobSummariesRequest(arg0 *backup.ListRestoreJobSummariesInput) (*request.Request, *backup.ListRestoreJobSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreJobSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListRestoreJobSummariesOutput)
	return ret0, ret1
}

// ListRestoreJobSummariesRequest indicates an expected call of ListRestoreJobSummariesRequest
func (mr *MockBackupAPIMockRecorder) ListRestoreJobSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobSummariesRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobSummariesRequest), arg0)
}

// ListRestoreJobSummariesWithContext mocks base method
func (m *MockBackupAPI) ListRestoreJobSummariesWithContext(arg0 context.Context, arg1 *backup.ListRestoreJobSummariesInput, arg2 ...request.Option) (*backup.ListRestoreJobSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreJobSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListRestoreJobSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreJobSummariesWithContext indicates an expected call of ListRestoreJobSummariesWithContext
func (mr *MockBackupAPIMockRecorder) ListRestoreJobSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobSummariesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobSummariesWithContext), varargs...)
}

// ListRestoreJobs mocks base method
func (m *MockBackupAPI) ListRestoreJobs(arg0 *backup.ListRestoreJobsInput) (*backup.ListRestoreJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreJobs", arg0)
	ret0, _ := ret[0].(*backup.ListRestoreJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreJobs indicates an expected call of ListRestoreJobs
func (mr *MockBackupAPIMockRecorder) ListRestoreJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobs", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobs), arg0)
}

// ListRestoreJobsByProtectedResource mocks base method
func (m *MockBackupAPI) ListRestoreJobsByProtectedResource(arg0 *backup.ListRestoreJobsByProtectedResourceInput) (*backup.ListRestoreJobsByProtectedResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreJobsByProtectedResource", arg0)
	ret0, _ := ret[0].(*backup.ListRestoreJobsByProtectedResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreJobsByProtectedResource indicates an expected call of ListRestoreJobsByProtectedResource
func (mr *MockBackupAPIMockRecorder) ListRestoreJobsByProtectedResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobsByProtectedResource", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobsByProtectedResource), arg0)
}

// ListRestoreJobsByProtectedResourcePages mocks base method
func (m *MockBackupAPI) ListRestoreJobsByProtectedResourcePages(arg0 *backup.ListRestoreJobsByProtectedResourceInput, arg1 func(*backup.ListRestoreJobsByProtectedResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreJobsByProtectedResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRestoreJobsByProtectedResourcePages indicates an expected call of ListRestoreJobsByProtectedResourcePages
func (mr *MockBackupAPIMockRecorder) ListRestoreJobsByProtectedResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobsByProtectedResourcePages", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobsByProtectedResourcePages), arg0, arg1)
}

// ListRestoreJobsByProtectedResourcePagesWithContext mocks base method
func (m *MockBackupAPI) ListRestoreJobsByProtectedResourcePagesWithContext(arg0 context.Context, arg1 *backup.ListRestoreJobsByProtectedResourceInput, arg2 func(*backup.ListRestoreJobsByProtectedResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreJobsByProtectedResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRestoreJobsByProtectedResourcePagesWithContext indicates an expected call of ListRestoreJobsByProtectedResourcePagesWithContext
func (mr *MockBackupAPIMockRecorder) ListRestoreJobsByProtectedResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobsByProtectedResourcePagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobsByProtectedResourcePagesWithContext), varargs...)
}

// ListRestoreJobsByProtectedResourceRequest mocks base method
func (m *MockBackupAPI) ListRestoreJobsByProtectedResourceRequest(arg0 *backup.ListRestoreJobsByProtectedResourceInput) (*request.Request, *backup.ListRestoreJobsByProtectedResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreJobsByProtectedResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListRestoreJobsByProtectedResourceOutput)
	return ret0, ret1
}

// ListRestoreJobsByProtectedResourceRequest indicates an expected call of ListRestoreJobsByProtectedResourceRequest
func (mr *MockBackupAPIMockRecorder) ListRestoreJobsByProtectedResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobsByProtectedResourceRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobsByProtectedResourceRequest), arg0)
}

// ListRestoreJobsByProtectedResourceWithContext mocks base method
func (m *MockBackupAPI) ListRestoreJobsByProtectedResourceWithContext(arg0 context.Context, arg1 *backup.ListRestoreJobsByProtectedResourceInput, arg2 ...request.Option) (*backup.ListRestoreJobsByProtectedResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreJobsByProtectedResourceWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListRestoreJobsByProtectedResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreJobsByProtectedResourceWithContext indicates an expected call of ListRestoreJobsByProtectedResourceWithContext
func (mr *MockBackupAPIMockRecorder) ListRestoreJobsByProtectedResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobsByProtectedResourceWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobsByProtectedResourceWithContext), varargs...)
}

// ListRestoreJobsPages mocks base method
func (m *MockBackupAPI) ListRestoreJobsPages(arg0 *backup.ListRestoreJobsInput, arg1 func(*backup.ListRestoreJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRestoreJobsPages indicates an expected call of ListRestoreJobsPages
func (mr *MockBackupAPIMockRecorder) ListRestoreJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobsPages", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobsPages), arg0, arg1)
}

// ListRestoreJobsPagesWithContext mocks base method
func (m *MockBackupAPI) ListRestoreJobsPagesWithContext(arg0 context.Context, arg1 *backup.ListRestoreJobsInput, arg2 func(*backup.ListRestoreJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRestoreJobsPagesWithContext indicates an expected call of ListRestoreJobsPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListRestoreJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobsPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobsPagesWithContext), varargs...)
}

// ListRestoreJobsRequest mocks base method
func (m *MockBackupAPI) ListRestoreJobsRequest(arg0 *backup.ListRestoreJobsInput) (*request.Request, *backup.ListRestoreJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListRestoreJobsOutput)
	return ret0, ret1
}

// ListRestoreJobsRequest indicates an expected call of ListRestoreJobsRequest
func (mr *MockBackupAPIMockRecorder) ListRestoreJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobsRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobsRequest), arg0)
}

// ListRestoreJobsWithContext mocks base method
func (m *MockBackupAPI) ListRestoreJobsWithContext(arg0 context.Context, arg1 *backup.ListRestoreJobsInput, arg2 ...request.Option) (*backup.ListRestoreJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreJobsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListRestoreJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreJobsWithContext indicates an expected call of ListRestoreJobsWithContext
func (mr *MockBackupAPIMockRecorder) ListRestoreJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreJobsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreJobsWithContext), varargs...)
}

// ListRestoreTestingPlans mocks base method
func (m *MockBackupAPI) ListRestoreTestingPlans(arg0 *backup.ListRestoreTestingPlansInput) (*backup.ListRestoreTestingPlansOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreTestingPlans", arg0)
	ret0, _ := ret[0].(*backup.ListRestoreTestingPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreTestingPlans indicates an expected call of ListRestoreTestingPlans
func (mr *MockBackupAPIMockRecorder) ListRestoreTestingPlans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTestingPlans", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreTestingPlans), arg0)
}

// ListRestoreTestingPlansPages mocks base method
func (m *MockBackupAPI) ListRestoreTestingPlansPages(arg0 *backup.ListRestoreTestingPlansInput, arg1 func(*backup.ListRestoreTestingPlansOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreTestingPlansPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRestoreTestingPlansPages indicates an expected call of ListRestoreTestingPlansPages
func (mr *MockBackupAPIMockRecorder) ListRestoreTestingPlansPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTestingPlansPages", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreTestingPlansPages), arg0, arg1)
}

// ListRestoreTestingPlansPagesWithContext mocks base method
func (m *MockBackupAPI) ListRestoreTestingPlansPagesWithContext(arg0 context.Context, arg1 *backup.ListRestoreTestingPlansInput, arg2 func(*backup.ListRestoreTestingPlansOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreTestingPlansPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRestoreTestingPlansPagesWithContext indicates an expected call of ListRestoreTestingPlansPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListRestoreTestingPlansPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTestingPlansPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreTestingPlansPagesWithContext), varargs...)
}

// ListRestoreTestingPlansRequest mocks base method
func (m *MockBackupAPI) ListRestoreTestingPlansRequest(arg0 *backup.ListRestoreTestingPlansInput) (*request.Request, *backup.ListRestoreTestingPlansOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreTestingPlansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListRestoreTestingPlansOutput)
	return ret0, ret1
}

// ListRestoreTestingPlansRequest indicates an expected call of ListRestoreTestingPlansRequest
func (mr *MockBackupAPIMockRecorder) ListRestoreTestingPlansRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTestingPlansRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreTestingPlansRequest), arg0)
}

// ListRestoreTestingPlansWithContext mocks base method
func (m *MockBackupAPI) ListRestoreTestingPlansWithContext(arg0 context.Context, arg1 *backup.ListRestoreTestingPlansInput, arg2 ...request.Option) (*backup.ListRestoreTestingPlansOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreTestingPlansWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListRestoreTestingPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreTestingPlansWithContext indicates an expected call of ListRestoreTestingPlansWithContext
func (mr *MockBackupAPIMockRecorder) ListRestoreTestingPlansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTestingPlansWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreTestingPlansWithContext), varargs...)
}

// ListRestoreTestingSelections mocks base method
func (m *MockBackupAPI) ListRestoreTestingSelections(arg0 *backup.ListRestoreTestingSelectionsInput) (*backup.ListRestoreTestingSelectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreTestingSelections", arg0)
	ret0, _ := ret[0].(*backup.ListRestoreTestingSelectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreTestingSelections indicates an expected call of ListRestoreTestingSelections
func (mr *MockBackupAPIMockRecorder) ListRestoreTestingSelections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTestingSelections", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreTestingSelections), arg0)
}

// ListRestoreTestingSelectionsPages mocks base method
func (m *MockBackupAPI) ListRestoreTestingSelectionsPages(arg0 *backup.ListRestoreTestingSelectionsInput, arg1 func(*backup.ListRestoreTestingSelectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreTestingSelectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRestoreTestingSelectionsPages indicates an expected call of ListRestoreTestingSelectionsPages
func (mr *MockBackupAPIMockRecorder) ListRestoreTestingSelectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTestingSelectionsPages", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreTestingSelectionsPages), arg0, arg1)
}

// ListRestoreTestingSelectionsPagesWithContext mocks base method
func (m *MockBackupAPI) ListRestoreTestingSelectionsPagesWithContext(arg0 context.Context, arg1 *backup.ListRestoreTestingSelectionsInput, arg2 func(*backup.ListRestoreTestingSelectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreTestingSelectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRestoreTestingSelectionsPagesWithContext indicates an expected call of ListRestoreTestingSelectionsPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListRestoreTestingSelectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTestingSelectionsPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreTestingSelectionsPagesWithContext), varargs...)
}

// ListRestoreTestingSelectionsRequest mocks base method
func (m *MockBackupAPI) ListRestoreTestingSelectionsRequest(arg0 *backup.ListRestoreTestingSelectionsInput) (*request.Request, *backup.ListRestoreTestingSelectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreTestingSelectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListRestoreTestingSelectionsOutput)
	return ret0, ret1
}

// ListRestoreTestingSelectionsRequest indicates an expected call of ListRestoreTestingSelectionsRequest
func (mr *MockBackupAPIMockRecorder) ListRestoreTestingSelectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTestingSelectionsRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreTestingSelectionsRequest), arg0)
}

// ListRestoreTestingSelectionsWithContext mocks base method
func (m *MockBackupAPI) ListRestoreTestingSelectionsWithContext(arg0 context.Context, arg1 *backup.ListRestoreTestingSelectionsInput, arg2 ...request.Option) (*backup.ListRestoreTestingSelectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestoreTestingSelectionsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListRestoreTestingSelectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreTestingSelectionsWithContext indicates an expected call of ListRestoreTestingSelectionsWithContext
func (mr *MockBackupAPIMockRecorder) ListRestoreTestingSelectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreTestingSelectionsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListRestoreTestingSelectionsWithContext), varargs...)
}

// ListTags mocks base method
func (m *MockBackupAPI) ListTags(arg0 *backup.ListTagsInput) (*backup.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(*backup.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags
func (mr *MockBackupAPIMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockBackupAPI)(nil).ListTags), arg0)
}

// ListTagsPages mocks base method
func (m *MockBackupAPI) ListTagsPages(arg0 *backup.ListTagsInput, arg1 func(*backup.ListTagsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsPages indicates an expected call of ListTagsPages
func (mr *MockBackupAPIMockRecorder) ListTagsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsPages", reflect.TypeOf((*MockBackupAPI)(nil).ListTagsPages), arg0, arg1)
}

// ListTagsPagesWithContext mocks base method
func (m *MockBackupAPI) ListTagsPagesWithContext(arg0 context.Context, arg1 *backup.ListTagsInput, arg2 func(*backup.ListTagsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsPagesWithContext indicates an expected call of ListTagsPagesWithContext
func (mr *MockBackupAPIMockRecorder) ListTagsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsPagesWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListTagsPagesWithContext), varargs...)
}

// ListTagsRequest mocks base method
func (m *MockBackupAPI) ListTagsRequest(arg0 *backup.ListTagsInput) (*request.Request, *backup.ListTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.ListTagsOutput)
	return ret0, ret1
}

// ListTagsRequest indicates an expected call of ListTagsRequest
func (mr *MockBackupAPIMockRecorder) ListTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsRequest", reflect.TypeOf((*MockBackupAPI)(nil).ListTagsRequest), arg0)
}

// ListTagsWithContext mocks base method
func (m *MockBackupAPI) ListTagsWithContext(arg0 context.Context, arg1 *backup.ListTagsInput, arg2 ...request.Option) (*backup.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsWithContext indicates an expected call of ListTagsWithContext
func (mr *MockBackupAPIMockRecorder) ListTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).ListTagsWithContext), varargs...)
}

// PutBackupVaultAccessPolicy mocks base method
func (m *MockBackupAPI) PutBackupVaultAccessPolicy(arg0 *backup.PutBackupVaultAccessPolicyInput) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBackupVaultAccessPolicy", arg0)
	ret0, _ := ret[0].(*backup.PutBackupVaultAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackupVaultAccessPolicy indicates an expected call of PutBackupVaultAccessPolicy
func (mr *MockBackupAPIMockRecorder) PutBackupVaultAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupVaultAccessPolicy", reflect.TypeOf((*MockBackupAPI)(nil).PutBackupVaultAccessPolicy), arg0)
}

// PutBackupVaultAccessPolicyRequest mocks base method
func (m *MockBackupAPI) PutBackupVaultAccessPolicyRequest(arg0 *backup.PutBackupVaultAccessPolicyInput) (*request.Request, *backup.PutBackupVaultAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBackupVaultAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.PutBackupVaultAccessPolicyOutput)
	return ret0, ret1
}

// PutBackupVaultAccessPolicyRequest indicates an expected call of PutBackupVaultAccessPolicyRequest
func (mr *MockBackupAPIMockRecorder) PutBackupVaultAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupVaultAccessPolicyRequest", reflect.TypeOf((*MockBackupAPI)(nil).PutBackupVaultAccessPolicyRequest), arg0)
}

// PutBackupVaultAccessPolicyWithContext mocks base method
func (m *MockBackupAPI) PutBackupVaultAccessPolicyWithContext(arg0 context.Context, arg1 *backup.PutBackupVaultAccessPolicyInput, arg2 ...request.Option) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBackupVaultAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*backup.PutBackupVaultAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackupVaultAccessPolicyWithContext indicates an expected call of PutBackupVaultAccessPolicyWithContext
func (mr *MockBackupAPIMockRecorder) PutBackupVaultAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupVaultAccessPolicyWithContext", reflect.TypeOf((*MockBackupAPI)(nil).PutBackupVaultAccessPolicyWithContext), varargs...)
}

// PutBackupVaultLockConfiguration mocks base method
func (m *MockBackupAPI) PutBackupVaultLockConfiguration(arg0 *backup.PutBackupVaultLockConfigurationInput) (*backup.PutBackupVaultLockConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBackupVaultLockConfiguration", arg0)
	ret0, _ := ret[0].(*backup.PutBackupVaultLockConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackupVaultLockConfiguration indicates an expected call of PutBackupVaultLockConfiguration
func (mr *MockBackupAPIMockRecorder) PutBackupVaultLockConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupVaultLockConfiguration", reflect.TypeOf((*MockBackupAPI)(nil).PutBackupVaultLockConfiguration), arg0)
}

// PutBackupVaultLockConfigurationRequest mocks base method
func (m *MockBackupAPI) PutBackupVaultLockConfigurationRequest(arg0 *backup.PutBackupVaultLockConfigurationInput) (*request.Request, *backup.PutBackupVaultLockConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBackupVaultLockConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.PutBackupVaultLockConfigurationOutput)
	return ret0, ret1
}

// PutBackupVaultLockConfigurationRequest indicates an expected call of PutBackupVaultLockConfigurationRequest
func (mr *MockBackupAPIMockRecorder) PutBackupVaultLockConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupVaultLockConfigurationRequest", reflect.TypeOf((*MockBackupAPI)(nil).PutBackupVaultLockConfigurationRequest), arg0)
}

// PutBackupVaultLockConfigurationWithContext mocks base method
func (m *MockBackupAPI) PutBackupVaultLockConfigurationWithContext(arg0 context.Context, arg1 *backup.PutBackupVaultLockConfigurationInput, arg2 ...request.Option) (*backup.PutBackupVaultLockConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBackupVaultLockConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*backup.PutBackupVaultLockConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackupVaultLockConfigurationWithContext indicates an expected call of PutBackupVaultLockConfigurationWithContext
func (mr *MockBackupAPIMockRecorder) PutBackupVaultLockConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupVaultLockConfigurationWithContext", reflect.TypeOf((*MockBackupAPI)(nil).PutBackupVaultLockConfigurationWithContext), varargs...)
}

// PutBackupVaultNotifications mocks base method
func (m *MockBackupAPI) PutBackupVaultNotifications(arg0 *backup.PutBackupVaultNotificationsInput) (*backup.PutBackupVaultNotificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBackupVaultNotifications", arg0)
	ret0, _ := ret[0].(*backup.PutBackupVaultNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackupVaultNotifications indicates an expected call of PutBackupVaultNotifications
func (mr *MockBackupAPIMockRecorder) PutBackupVaultNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupVaultNotifications", reflect.TypeOf((*MockBackupAPI)(nil).PutBackupVaultNotifications), arg0)
}

// PutBackupVaultNotificationsRequest mocks base method
func (m *MockBackupAPI) PutBackupVaultNotificationsRequest(arg0 *backup.PutBackupVaultNotificationsInput) (*request.Request, *backup.PutBackupVaultNotificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBackupVaultNotificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.PutBackupVaultNotificationsOutput)
	return ret0, ret1
}

// PutBackupVaultNotificationsRequest indicates an expected call of PutBackupVaultNotificationsRequest
func (mr *MockBackupAPIMockRecorder) PutBackupVaultNotificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupVaultNotificationsRequest", reflect.TypeOf((*MockBackupAPI)(nil).PutBackupVaultNotificationsRequest), arg0)
}

// PutBackupVaultNotificationsWithContext mocks base method
func (m *MockBackupAPI) PutBackupVaultNotificationsWithContext(arg0 context.Context, arg1 *backup.PutBackupVaultNotificationsInput, arg2 ...request.Option) (*backup.PutBackupVaultNotificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBackupVaultNotificationsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.PutBackupVaultNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackupVaultNotificationsWithContext indicates an expected call of PutBackupVaultNotificationsWithContext
func (mr *MockBackupAPIMockRecorder) PutBackupVaultNotificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupVaultNotificationsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).PutBackupVaultNotificationsWithContext), varargs...)
}

// PutRestoreValidationResult mocks base method
func (m *MockBackupAPI) PutRestoreValidationResult(arg0 *backup.PutRestoreValidationResultInput) (*backup.PutRestoreValidationResultOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRestoreValidationResult", arg0)
	ret0, _ := ret[0].(*backup.PutRestoreValidationResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRestoreValidationResult indicates an expected call of PutRestoreValidationResult
func (mr *MockBackupAPIMockRecorder) PutRestoreValidationResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRestoreValidationResult", reflect.TypeOf((*MockBackupAPI)(nil).PutRestoreValidationResult), arg0)
}

// PutRestoreValidationResultRequest mocks base method
func (m *MockBackupAPI) PutRestoreValidationResultRequest(arg0 *backup.PutRestoreValidationResultInput) (*request.Request, *backup.PutRestoreValidationResultOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRestoreValidationResultRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.PutRestoreValidationResultOutput)
	return ret0, ret1
}

// PutRestoreValidationResultRequest indicates an expected call of PutRestoreValidationResultRequest
func (mr *MockBackupAPIMockRecorder) PutRestoreValidationResultRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRestoreValidationResultRequest", reflect.TypeOf((*MockBackupAPI)(nil).PutRestoreValidationResultRequest), arg0)
}

// PutRestoreValidationResultWithContext mocks base method
func (m *MockBackupAPI) PutRestoreValidationResultWithContext(arg0 context.Context, arg1 *backup.PutRestoreValidationResultInput, arg2 ...request.Option) (*backup.PutRestoreValidationResultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRestoreValidationResultWithContext", varargs...)
	ret0, _ := ret[0].(*backup.PutRestoreValidationResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRestoreValidationResultWithContext indicates an expected call of PutRestoreValidationResultWithContext
func (mr *MockBackupAPIMockRecorder) PutRestoreValidationResultWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRestoreValidationResultWithContext", reflect.TypeOf((*MockBackupAPI)(nil).PutRestoreValidationResultWithContext), varargs...)
}

// StartBackupJob mocks base method
func (m *MockBackupAPI) StartBackupJob(arg0 *backup.StartBackupJobInput) (*backup.StartBackupJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBackupJob", arg0)
	ret0, _ := ret[0].(*backup.StartBackupJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBackupJob indicates an expected call of StartBackupJob
func (mr *MockBackupAPIMockRecorder) StartBackupJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBackupJob", reflect.TypeOf((*MockBackupAPI)(nil).StartBackupJob), arg0)
}

// StartBackupJobRequest mocks base method
func (m *MockBackupAPI) StartBackupJobRequest(arg0 *backup.StartBackupJobInput) (*request.Request, *backup.StartBackupJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBackupJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.StartBackupJobOutput)
	return ret0, ret1
}

// StartBackupJobRequest indicates an expected call of StartBackupJobRequest
func (mr *MockBackupAPIMockRecorder) StartBackupJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBackupJobRequest", reflect.TypeOf((*MockBackupAPI)(nil).StartBackupJobRequest), arg0)
}

// StartBackupJobWithContext mocks base method
func (m *MockBackupAPI) StartBackupJobWithContext(arg0 context.Context, arg1 *backup.StartBackupJobInput, arg2 ...request.Option) (*backup.StartBackupJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBackupJobWithContext", varargs...)
	ret0, _ := ret[0].(*backup.StartBackupJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBackupJobWithContext indicates an expected call of StartBackupJobWithContext
func (mr *MockBackupAPIMockRecorder) StartBackupJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBackupJobWithContext", reflect.TypeOf((*MockBackupAPI)(nil).StartBackupJobWithContext), varargs...)
}

// StartCopyJob mocks base method
func (m *MockBackupAPI) StartCopyJob(arg0 *backup.StartCopyJobInput) (*backup.StartCopyJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCopyJob", arg0)
	ret0, _ := ret[0].(*backup.StartCopyJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCopyJob indicates an expected call of StartCopyJob
func (mr *MockBackupAPIMockRecorder) StartCopyJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCopyJob", reflect.TypeOf((*MockBackupAPI)(nil).StartCopyJob), arg0)
}

// StartCopyJobRequest mocks base method
func (m *MockBackupAPI) StartCopyJobRequest(arg0 *backup.StartCopyJobInput) (*request.Request, *backup.StartCopyJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCopyJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.StartCopyJobOutput)
	return ret0, ret1
}

// StartCopyJobRequest indicates an expected call of StartCopyJobRequest
func (mr *MockBackupAPIMockRecorder) StartCopyJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCopyJobRequest", reflect.TypeOf((*MockBackupAPI)(nil).StartCopyJobRequest), arg0)
}

// StartCopyJobWithContext mocks base method
func (m *MockBackupAPI) StartCopyJobWithContext(arg0 context.Context, arg1 *backup.StartCopyJobInput, arg2 ...request.Option) (*backup.StartCopyJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCopyJobWithContext", varargs...)
	ret0, _ := ret[0].(*backup.StartCopyJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCopyJobWithContext indicates an expected call of StartCopyJobWithContext
func (mr *MockBackupAPIMockRecorder) StartCopyJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCopyJobWithContext", reflect.TypeOf((*MockBackupAPI)(nil).StartCopyJobWithContext), varargs...)
}

// StartReportJob mocks base method
func (m *MockBackupAPI) StartReportJob(arg0 *backup.StartReportJobInput) (*backup.StartReportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReportJob", arg0)
	ret0, _ := ret[0].(*backup.StartReportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReportJob indicates an expected call of StartReportJob
func (mr *MockBackupAPIMockRecorder) StartReportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReportJob", reflect.TypeOf((*MockBackupAPI)(nil).StartReportJob), arg0)
}

// StartReportJobRequest mocks base method
func (m *MockBackupAPI) StartReportJobRequest(arg0 *backup.StartReportJobInput) (*request.Request, *backup.StartReportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.StartReportJobOutput)
	return ret0, ret1
}

// StartReportJobRequest indicates an expected call of StartReportJobRequest
func (mr *MockBackupAPIMockRecorder) StartReportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReportJobRequest", reflect.TypeOf((*MockBackupAPI)(nil).StartReportJobRequest), arg0)
}

// StartReportJobWithContext mocks base method
func (m *MockBackupAPI) StartReportJobWithContext(arg0 context.Context, arg1 *backup.StartReportJobInput, arg2 ...request.Option) (*backup.StartReportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReportJobWithContext", varargs...)
	ret0, _ := ret[0].(*backup.StartReportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReportJobWithContext indicates an expected call of StartReportJobWithContext
func (mr *MockBackupAPIMockRecorder) StartReportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReportJobWithContext", reflect.TypeOf((*MockBackupAPI)(nil).StartReportJobWithContext), varargs...)
}

// StartRestoreJob mocks base method
func (m *MockBackupAPI) StartRestoreJob(arg0 *backup.StartRestoreJobInput) (*backup.StartRestoreJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRestoreJob", arg0)
	ret0, _ := ret[0].(*backup.StartRestoreJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRestoreJob indicates an expected call of StartRestoreJob
func (mr *MockBackupAPIMockRecorder) StartRestoreJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRestoreJob", reflect.TypeOf((*MockBackupAPI)(nil).StartRestoreJob), arg0)
}

// StartRestoreJobRequest mocks base method
func (m *MockBackupAPI) StartRestoreJobRequest(arg0 *backup.StartRestoreJobInput) (*request.Request, *backup.StartRestoreJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRestoreJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.StartRestoreJobOutput)
	return ret0, ret1
}

// StartRestoreJobRequest indicates an expected call of StartRestoreJobRequest
func (mr *MockBackupAPIMockRecorder) StartRestoreJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRestoreJobRequest", reflect.TypeOf((*MockBackupAPI)(nil).StartRestoreJobRequest), arg0)
}

// StartRestoreJobWithContext mocks base method
func (m *MockBackupAPI) StartRestoreJobWithContext(arg0 context.Context, arg1 *backup.StartRestoreJobInput, arg2 ...request.Option) (*backup.StartRestoreJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartRestoreJobWithContext", varargs...)
	ret0, _ := ret[0].(*backup.StartRestoreJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRestoreJobWithContext indicates an expected call of StartRestoreJobWithContext
func (mr *MockBackupAPIMockRecorder) StartRestoreJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRestoreJobWithContext", reflect.TypeOf((*MockBackupAPI)(nil).StartRestoreJobWithContext), varargs...)
}

// StopBackupJob mocks base method
func (m *MockBackupAPI) StopBackupJob(arg0 *backup.StopBackupJobInput) (*backup.StopBackupJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopBackupJob", arg0)
	ret0, _ := ret[0].(*backup.StopBackupJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopBackupJob indicates an expected call of StopBackupJob
func (mr *MockBackupAPIMockRecorder) StopBackupJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBackupJob", reflect.TypeOf((*MockBackupAPI)(nil).StopBackupJob), arg0)
}

// StopBackupJobRequest mocks base method
func (m *MockBackupAPI) StopBackupJobRequest(arg0 *backup.StopBackupJobInput) (*request.Request, *backup.StopBackupJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopBackupJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.StopBackupJobOutput)
	return ret0, ret1
}

// StopBackupJobRequest indicates an expected call of StopBackupJobRequest
func (mr *MockBackupAPIMockRecorder) StopBackupJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBackupJobRequest", reflect.TypeOf((*MockBackupAPI)(nil).StopBackupJobRequest), arg0)
}

// StopBackupJobWithContext mocks base method
func (m *MockBackupAPI) StopBackupJobWithContext(arg0 context.Context, arg1 *backup.StopBackupJobInput, arg2 ...request.Option) (*backup.StopBackupJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopBackupJobWithContext", varargs...)
	ret0, _ := ret[0].(*backup.StopBackupJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopBackupJobWithContext indicates an expected call of StopBackupJobWithContext
func (mr *MockBackupAPIMockRecorder) StopBackupJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBackupJobWithContext", reflect.TypeOf((*MockBackupAPI)(nil).StopBackupJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockBackupAPI) TagResource(arg0 *backup.TagResourceInput) (*backup.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*backup.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockBackupAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockBackupAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockBackupAPI) TagResourceRequest(arg0 *backup.TagResourceInput) (*request.Request, *backup.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockBackupAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockBackupAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockBackupAPI) TagResourceWithContext(arg0 context.Context, arg1 *backup.TagResourceInput, arg2 ...request.Option) (*backup.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*backup.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockBackupAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockBackupAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockBackupAPI) UntagResource(arg0 *backup.UntagResourceInput) (*backup.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*backup.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockBackupAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockBackupAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockBackupAPI) UntagResourceRequest(arg0 *backup.UntagResourceInput) (*request.Request, *backup.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockBackupAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockBackupAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockBackupAPI) UntagResourceWithContext(arg0 context.Context, arg1 *backup.UntagResourceInput, arg2 ...request.Option) (*backup.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*backup.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockBackupAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockBackupAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateBackupPlan mocks base method
func (m *MockBackupAPI) UpdateBackupPlan(arg0 *backup.UpdateBackupPlanInput) (*backup.UpdateBackupPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackupPlan", arg0)
	ret0, _ := ret[0].(*backup.UpdateBackupPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackupPlan indicates an expected call of UpdateBackupPlan
func (mr *MockBackupAPIMockRecorder) UpdateBackupPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackupPlan", reflect.TypeOf((*MockBackupAPI)(nil).UpdateBackupPlan), arg0)
}

// UpdateBackupPlanRequest mocks base method
func (m *MockBackupAPI) UpdateBackupPlanRequest(arg0 *backup.UpdateBackupPlanInput) (*request.Request, *backup.UpdateBackupPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackupPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.UpdateBackupPlanOutput)
	return ret0, ret1
}

// UpdateBackupPlanRequest indicates an expected call of UpdateBackupPlanRequest
func (mr *MockBackupAPIMockRecorder) UpdateBackupPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackupPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).UpdateBackupPlanRequest), arg0)
}

// UpdateBackupPlanWithContext mocks base method
func (m *MockBackupAPI) UpdateBackupPlanWithContext(arg0 context.Context, arg1 *backup.UpdateBackupPlanInput, arg2 ...request.Option) (*backup.UpdateBackupPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBackupPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.UpdateBackupPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackupPlanWithContext indicates an expected call of UpdateBackupPlanWithContext
func (mr *MockBackupAPIMockRecorder) UpdateBackupPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackupPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).UpdateBackupPlanWithContext), varargs...)
}

// UpdateFramework mocks base method
func (m *MockBackupAPI) UpdateFramework(arg0 *backup.UpdateFrameworkInput) (*backup.UpdateFrameworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFramework", arg0)
	ret0, _ := ret[0].(*backup.UpdateFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFramework indicates an expected call of UpdateFramework
func (mr *MockBackupAPIMockRecorder) UpdateFramework(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFramework", reflect.TypeOf((*MockBackupAPI)(nil).UpdateFramework), arg0)
}

// UpdateFrameworkRequest mocks base method
func (m *MockBackupAPI) UpdateFrameworkRequest(arg0 *backup.UpdateFrameworkInput) (*request.Request, *backup.UpdateFrameworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFrameworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.UpdateFrameworkOutput)
	return ret0, ret1
}

// UpdateFrameworkRequest indicates an expected call of UpdateFrameworkRequest
func (mr *MockBackupAPIMockRecorder) UpdateFrameworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFrameworkRequest", reflect.TypeOf((*MockBackupAPI)(nil).UpdateFrameworkRequest), arg0)
}

// UpdateFrameworkWithContext mocks base method
func (m *MockBackupAPI) UpdateFrameworkWithContext(arg0 context.Context, arg1 *backup.UpdateFrameworkInput, arg2 ...request.Option) (*backup.UpdateFrameworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFrameworkWithContext", varargs...)
	ret0, _ := ret[0].(*backup.UpdateFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFrameworkWithContext indicates an expected call of UpdateFrameworkWithContext
func (mr *MockBackupAPIMockRecorder) UpdateFrameworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFrameworkWithContext", reflect.TypeOf((*MockBackupAPI)(nil).UpdateFrameworkWithContext), varargs...)
}

// UpdateGlobalSettings mocks base method
func (m *MockBackupAPI) UpdateGlobalSettings(arg0 *backup.UpdateGlobalSettingsInput) (*backup.UpdateGlobalSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalSettings", arg0)
	ret0, _ := ret[0].(*backup.UpdateGlobalSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalSettings indicates an expected call of UpdateGlobalSettings
func (mr *MockBackupAPIMockRecorder) UpdateGlobalSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSettings", reflect.TypeOf((*MockBackupAPI)(nil).UpdateGlobalSettings), arg0)
}

// UpdateGlobalSettingsRequest mocks base method
func (m *MockBackupAPI) UpdateGlobalSettingsRequest(arg0 *backup.UpdateGlobalSettingsInput) (*request.Request, *backup.UpdateGlobalSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.UpdateGlobalSettingsOutput)
	return ret0, ret1
}

// UpdateGlobalSettingsRequest indicates an expected call of UpdateGlobalSettingsRequest
func (mr *MockBackupAPIMockRecorder) UpdateGlobalSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSettingsRequest", reflect.TypeOf((*MockBackupAPI)(nil).UpdateGlobalSettingsRequest), arg0)
}

// UpdateGlobalSettingsWithContext mocks base method
func (m *MockBackupAPI) UpdateGlobalSettingsWithContext(arg0 context.Context, arg1 *backup.UpdateGlobalSettingsInput, arg2 ...request.Option) (*backup.UpdateGlobalSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.UpdateGlobalSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalSettingsWithContext indicates an expected call of UpdateGlobalSettingsWithContext
func (mr *MockBackupAPIMockRecorder) UpdateGlobalSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSettingsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).UpdateGlobalSettingsWithContext), varargs...)
}

// UpdateRecoveryPointLifecycle mocks base method
func (m *MockBackupAPI) UpdateRecoveryPointLifecycle(arg0 *backup.UpdateRecoveryPointLifecycleInput) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecoveryPointLifecycle", arg0)
	ret0, _ := ret[0].(*backup.UpdateRecoveryPointLifecycleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecoveryPointLifecycle indicates an expected call of UpdateRecoveryPointLifecycle
func (mr *MockBackupAPIMockRecorder) UpdateRecoveryPointLifecycle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecoveryPointLifecycle", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRecoveryPointLifecycle), arg0)
}

// UpdateRecoveryPointLifecycleRequest mocks base method
func (m *MockBackupAPI) UpdateRecoveryPointLifecycleRequest(arg0 *backup.UpdateRecoveryPointLifecycleInput) (*request.Request, *backup.UpdateRecoveryPointLifecycleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecoveryPointLifecycleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.UpdateRecoveryPointLifecycleOutput)
	return ret0, ret1
}

// UpdateRecoveryPointLifecycleRequest indicates an expected call of UpdateRecoveryPointLifecycleRequest
func (mr *MockBackupAPIMockRecorder) UpdateRecoveryPointLifecycleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecoveryPointLifecycleRequest", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRecoveryPointLifecycleRequest), arg0)
}

// UpdateRecoveryPointLifecycleWithContext mocks base method
func (m *MockBackupAPI) UpdateRecoveryPointLifecycleWithContext(arg0 context.Context, arg1 *backup.UpdateRecoveryPointLifecycleInput, arg2 ...request.Option) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecoveryPointLifecycleWithContext", varargs...)
	ret0, _ := ret[0].(*backup.UpdateRecoveryPointLifecycleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecoveryPointLifecycleWithContext indicates an expected call of UpdateRecoveryPointLifecycleWithContext
func (mr *MockBackupAPIMockRecorder) UpdateRecoveryPointLifecycleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecoveryPointLifecycleWithContext", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRecoveryPointLifecycleWithContext), varargs...)
}

// UpdateRegionSettings mocks base method
func (m *MockBackupAPI) UpdateRegionSettings(arg0 *backup.UpdateRegionSettingsInput) (*backup.UpdateRegionSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegionSettings", arg0)
	ret0, _ := ret[0].(*backup.UpdateRegionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegionSettings indicates an expected call of UpdateRegionSettings
func (mr *MockBackupAPIMockRecorder) UpdateRegionSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegionSettings", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRegionSettings), arg0)
}

// UpdateRegionSettingsRequest mocks base method
func (m *MockBackupAPI) UpdateRegionSettingsRequest(arg0 *backup.UpdateRegionSettingsInput) (*request.Request, *backup.UpdateRegionSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegionSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.UpdateRegionSettingsOutput)
	return ret0, ret1
}

// UpdateRegionSettingsRequest indicates an expected call of UpdateRegionSettingsRequest
func (mr *MockBackupAPIMockRecorder) UpdateRegionSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegionSettingsRequest", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRegionSettingsRequest), arg0)
}

// UpdateRegionSettingsWithContext mocks base method
func (m *MockBackupAPI) UpdateRegionSettingsWithContext(arg0 context.Context, arg1 *backup.UpdateRegionSettingsInput, arg2 ...request.Option) (*backup.UpdateRegionSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRegionSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*backup.UpdateRegionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegionSettingsWithContext indicates an expected call of UpdateRegionSettingsWithContext
func (mr *MockBackupAPIMockRecorder) UpdateRegionSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegionSettingsWithContext", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRegionSettingsWithContext), varargs...)
}

// UpdateReportPlan mocks base method
func (m *MockBackupAPI) UpdateReportPlan(arg0 *backup.UpdateReportPlanInput) (*backup.UpdateReportPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReportPlan", arg0)
	ret0, _ := ret[0].(*backup.UpdateReportPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReportPlan indicates an expected call of UpdateReportPlan
func (mr *MockBackupAPIMockRecorder) UpdateReportPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReportPlan", reflect.TypeOf((*MockBackupAPI)(nil).UpdateReportPlan), arg0)
}

// UpdateReportPlanRequest mocks base method
func (m *MockBackupAPI) UpdateReportPlanRequest(arg0 *backup.UpdateReportPlanInput) (*request.Request, *backup.UpdateReportPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReportPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.UpdateReportPlanOutput)
	return ret0, ret1
}

// UpdateReportPlanRequest indicates an expected call of UpdateReportPlanRequest
func (mr *MockBackupAPIMockRecorder) UpdateReportPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReportPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).UpdateReportPlanRequest), arg0)
}

// UpdateReportPlanWithContext mocks base method
func (m *MockBackupAPI) UpdateReportPlanWithContext(arg0 context.Context, arg1 *backup.UpdateReportPlanInput, arg2 ...request.Option) (*backup.UpdateReportPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReportPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.UpdateReportPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReportPlanWithContext indicates an expected call of UpdateReportPlanWithContext
func (mr *MockBackupAPIMockRecorder) UpdateReportPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReportPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).UpdateReportPlanWithContext), varargs...)
}

// UpdateRestoreTestingPlan mocks base method
func (m *MockBackupAPI) UpdateRestoreTestingPlan(arg0 *backup.UpdateRestoreTestingPlanInput) (*backup.UpdateRestoreTestingPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestoreTestingPlan", arg0)
	ret0, _ := ret[0].(*backup.UpdateRestoreTestingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRestoreTestingPlan indicates an expected call of UpdateRestoreTestingPlan
func (mr *MockBackupAPIMockRecorder) UpdateRestoreTestingPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestoreTestingPlan", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRestoreTestingPlan), arg0)
}

// UpdateRestoreTestingPlanRequest mocks base method
func (m *MockBackupAPI) UpdateRestoreTestingPlanRequest(arg0 *backup.UpdateRestoreTestingPlanInput) (*request.Request, *backup.UpdateRestoreTestingPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestoreTestingPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.UpdateRestoreTestingPlanOutput)
	return ret0, ret1
}

// UpdateRestoreTestingPlanRequest indicates an expected call of UpdateRestoreTestingPlanRequest
func (mr *MockBackupAPIMockRecorder) UpdateRestoreTestingPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestoreTestingPlanRequest", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRestoreTestingPlanRequest), arg0)
}

// UpdateRestoreTestingPlanWithContext mocks base method
func (m *MockBackupAPI) UpdateRestoreTestingPlanWithContext(arg0 context.Context, arg1 *backup.UpdateRestoreTestingPlanInput, arg2 ...request.Option) (*backup.UpdateRestoreTestingPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRestoreTestingPlanWithContext", varargs...)
	ret0, _ := ret[0].(*backup.UpdateRestoreTestingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRestoreTestingPlanWithContext indicates an expected call of UpdateRestoreTestingPlanWithContext
func (mr *MockBackupAPIMockRecorder) UpdateRestoreTestingPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestoreTestingPlanWithContext", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRestoreTestingPlanWithContext), varargs...)
}

// UpdateRestoreTestingSelection mocks base method
func (m *MockBackupAPI) UpdateRestoreTestingSelection(arg0 *backup.UpdateRestoreTestingSelectionInput) (*backup.UpdateRestoreTestingSelectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestoreTestingSelection", arg0)
	ret0, _ := ret[0].(*backup.UpdateRestoreTestingSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRestoreTestingSelection indicates an expected call of UpdateRestoreTestingSelection
func (mr *MockBackupAPIMockRecorder) UpdateRestoreTestingSelection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestoreTestingSelection", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRestoreTestingSelection), arg0)
}

// UpdateRestoreTestingSelectionRequest mocks base method
func (m *MockBackupAPI) UpdateRestoreTestingSelectionRequest(arg0 *backup.UpdateRestoreTestingSelectionInput) (*request.Request, *backup.UpdateRestoreTestingSelectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestoreTestingSelectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*backup.UpdateRestoreTestingSelectionOutput)
	return ret0, ret1
}

// UpdateRestoreTestingSelectionRequest indicates an expected call of UpdateRestoreTestingSelectionRequest
func (mr *MockBackupAPIMockRecorder) UpdateRestoreTestingSelectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestoreTestingSelectionRequest", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRestoreTestingSelectionRequest), arg0)
}

// UpdateRestoreTestingSelectionWithContext mocks base method
func (m *MockBackupAPI) UpdateRestoreTestingSelectionWithContext(arg0 context.Context, arg1 *backup.UpdateRestoreTestingSelectionInput, arg2 ...request.Option) (*backup.UpdateRestoreTestingSelectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRestoreTestingSelectionWithContext", varargs...)
	ret0, _ := ret[0].(*backup.UpdateRestoreTestingSelectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRestoreTestingSelectionWithContext indicates an expected call of UpdateRestoreTestingSelectionWithContext
func (mr *MockBackupAPIMockRecorder) UpdateRestoreTestingSelectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestoreTestingSelectionWithContext", reflect.TypeOf((*MockBackupAPI)(nil).UpdateRestoreTestingSelectionWithContext), varargs...)
}
