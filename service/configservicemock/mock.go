// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/configservice/configserviceiface (interfaces: ConfigServiceAPI)

// Package configservicemock is a generated GoMock package.
package configservicemock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	configservice "github.com/aws/aws-sdk-go/service/configservice"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigServiceAPI is a mock of ConfigServiceAPI interface
type MockConfigServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceAPIMockRecorder
}

// MockConfigServiceAPIMockRecorder is the mock recorder for MockConfigServiceAPI
type MockConfigServiceAPIMockRecorder struct {
	mock *MockConfigServiceAPI
}

// NewMockConfigServiceAPI creates a new mock instance
func NewMockConfigServiceAPI(ctrl *gomock.Controller) *MockConfigServiceAPI {
	mock := &MockConfigServiceAPI{ctrl: ctrl}
	mock.recorder = &MockConfigServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigServiceAPI) EXPECT() *MockConfigServiceAPIMockRecorder {
	return m.recorder
}

// BatchGetResourceConfig mocks base method
func (m *MockConfigServiceAPI) BatchGetResourceConfig(arg0 *configservice.BatchGetResourceConfigInput) (*configservice.BatchGetResourceConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetResourceConfig", arg0)
	ret0, _ := ret[0].(*configservice.BatchGetResourceConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetResourceConfig indicates an expected call of BatchGetResourceConfig
func (mr *MockConfigServiceAPIMockRecorder) BatchGetResourceConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetResourceConfig", reflect.TypeOf((*MockConfigServiceAPI)(nil).BatchGetResourceConfig), arg0)
}

// BatchGetResourceConfigRequest mocks base method
func (m *MockConfigServiceAPI) BatchGetResourceConfigRequest(arg0 *configservice.BatchGetResourceConfigInput) (*request.Request, *configservice.BatchGetResourceConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetResourceConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.BatchGetResourceConfigOutput)
	return ret0, ret1
}

// BatchGetResourceConfigRequest indicates an expected call of BatchGetResourceConfigRequest
func (mr *MockConfigServiceAPIMockRecorder) BatchGetResourceConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetResourceConfigRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).BatchGetResourceConfigRequest), arg0)
}

// BatchGetResourceConfigWithContext mocks base method
func (m *MockConfigServiceAPI) BatchGetResourceConfigWithContext(arg0 aws.Context, arg1 *configservice.BatchGetResourceConfigInput, arg2 ...request.Option) (*configservice.BatchGetResourceConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetResourceConfigWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.BatchGetResourceConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetResourceConfigWithContext indicates an expected call of BatchGetResourceConfigWithContext
func (mr *MockConfigServiceAPIMockRecorder) BatchGetResourceConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetResourceConfigWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).BatchGetResourceConfigWithContext), varargs...)
}

// DeleteAggregationAuthorization mocks base method
func (m *MockConfigServiceAPI) DeleteAggregationAuthorization(arg0 *configservice.DeleteAggregationAuthorizationInput) (*configservice.DeleteAggregationAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAggregationAuthorization", arg0)
	ret0, _ := ret[0].(*configservice.DeleteAggregationAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAggregationAuthorization indicates an expected call of DeleteAggregationAuthorization
func (mr *MockConfigServiceAPIMockRecorder) DeleteAggregationAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAggregationAuthorization", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteAggregationAuthorization), arg0)
}

// DeleteAggregationAuthorizationRequest mocks base method
func (m *MockConfigServiceAPI) DeleteAggregationAuthorizationRequest(arg0 *configservice.DeleteAggregationAuthorizationInput) (*request.Request, *configservice.DeleteAggregationAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAggregationAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DeleteAggregationAuthorizationOutput)
	return ret0, ret1
}

// DeleteAggregationAuthorizationRequest indicates an expected call of DeleteAggregationAuthorizationRequest
func (mr *MockConfigServiceAPIMockRecorder) DeleteAggregationAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAggregationAuthorizationRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteAggregationAuthorizationRequest), arg0)
}

// DeleteAggregationAuthorizationWithContext mocks base method
func (m *MockConfigServiceAPI) DeleteAggregationAuthorizationWithContext(arg0 aws.Context, arg1 *configservice.DeleteAggregationAuthorizationInput, arg2 ...request.Option) (*configservice.DeleteAggregationAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAggregationAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DeleteAggregationAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAggregationAuthorizationWithContext indicates an expected call of DeleteAggregationAuthorizationWithContext
func (mr *MockConfigServiceAPIMockRecorder) DeleteAggregationAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAggregationAuthorizationWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteAggregationAuthorizationWithContext), varargs...)
}

// DeleteConfigRule mocks base method
func (m *MockConfigServiceAPI) DeleteConfigRule(arg0 *configservice.DeleteConfigRuleInput) (*configservice.DeleteConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigRule", arg0)
	ret0, _ := ret[0].(*configservice.DeleteConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigRule indicates an expected call of DeleteConfigRule
func (mr *MockConfigServiceAPIMockRecorder) DeleteConfigRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigRule", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteConfigRule), arg0)
}

// DeleteConfigRuleRequest mocks base method
func (m *MockConfigServiceAPI) DeleteConfigRuleRequest(arg0 *configservice.DeleteConfigRuleInput) (*request.Request, *configservice.DeleteConfigRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DeleteConfigRuleOutput)
	return ret0, ret1
}

// DeleteConfigRuleRequest indicates an expected call of DeleteConfigRuleRequest
func (mr *MockConfigServiceAPIMockRecorder) DeleteConfigRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigRuleRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteConfigRuleRequest), arg0)
}

// DeleteConfigRuleWithContext mocks base method
func (m *MockConfigServiceAPI) DeleteConfigRuleWithContext(arg0 aws.Context, arg1 *configservice.DeleteConfigRuleInput, arg2 ...request.Option) (*configservice.DeleteConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigRuleWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DeleteConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigRuleWithContext indicates an expected call of DeleteConfigRuleWithContext
func (mr *MockConfigServiceAPIMockRecorder) DeleteConfigRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigRuleWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteConfigRuleWithContext), varargs...)
}

// DeleteConfigurationAggregator mocks base method
func (m *MockConfigServiceAPI) DeleteConfigurationAggregator(arg0 *configservice.DeleteConfigurationAggregatorInput) (*configservice.DeleteConfigurationAggregatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationAggregator", arg0)
	ret0, _ := ret[0].(*configservice.DeleteConfigurationAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationAggregator indicates an expected call of DeleteConfigurationAggregator
func (mr *MockConfigServiceAPIMockRecorder) DeleteConfigurationAggregator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationAggregator", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteConfigurationAggregator), arg0)
}

// DeleteConfigurationAggregatorRequest mocks base method
func (m *MockConfigServiceAPI) DeleteConfigurationAggregatorRequest(arg0 *configservice.DeleteConfigurationAggregatorInput) (*request.Request, *configservice.DeleteConfigurationAggregatorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationAggregatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DeleteConfigurationAggregatorOutput)
	return ret0, ret1
}

// DeleteConfigurationAggregatorRequest indicates an expected call of DeleteConfigurationAggregatorRequest
func (mr *MockConfigServiceAPIMockRecorder) DeleteConfigurationAggregatorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationAggregatorRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteConfigurationAggregatorRequest), arg0)
}

// DeleteConfigurationAggregatorWithContext mocks base method
func (m *MockConfigServiceAPI) DeleteConfigurationAggregatorWithContext(arg0 aws.Context, arg1 *configservice.DeleteConfigurationAggregatorInput, arg2 ...request.Option) (*configservice.DeleteConfigurationAggregatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationAggregatorWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DeleteConfigurationAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationAggregatorWithContext indicates an expected call of DeleteConfigurationAggregatorWithContext
func (mr *MockConfigServiceAPIMockRecorder) DeleteConfigurationAggregatorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationAggregatorWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteConfigurationAggregatorWithContext), varargs...)
}

// DeleteConfigurationRecorder mocks base method
func (m *MockConfigServiceAPI) DeleteConfigurationRecorder(arg0 *configservice.DeleteConfigurationRecorderInput) (*configservice.DeleteConfigurationRecorderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationRecorder", arg0)
	ret0, _ := ret[0].(*configservice.DeleteConfigurationRecorderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationRecorder indicates an expected call of DeleteConfigurationRecorder
func (mr *MockConfigServiceAPIMockRecorder) DeleteConfigurationRecorder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationRecorder", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteConfigurationRecorder), arg0)
}

// DeleteConfigurationRecorderRequest mocks base method
func (m *MockConfigServiceAPI) DeleteConfigurationRecorderRequest(arg0 *configservice.DeleteConfigurationRecorderInput) (*request.Request, *configservice.DeleteConfigurationRecorderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationRecorderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DeleteConfigurationRecorderOutput)
	return ret0, ret1
}

// DeleteConfigurationRecorderRequest indicates an expected call of DeleteConfigurationRecorderRequest
func (mr *MockConfigServiceAPIMockRecorder) DeleteConfigurationRecorderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationRecorderRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteConfigurationRecorderRequest), arg0)
}

// DeleteConfigurationRecorderWithContext mocks base method
func (m *MockConfigServiceAPI) DeleteConfigurationRecorderWithContext(arg0 aws.Context, arg1 *configservice.DeleteConfigurationRecorderInput, arg2 ...request.Option) (*configservice.DeleteConfigurationRecorderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationRecorderWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DeleteConfigurationRecorderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationRecorderWithContext indicates an expected call of DeleteConfigurationRecorderWithContext
func (mr *MockConfigServiceAPIMockRecorder) DeleteConfigurationRecorderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationRecorderWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteConfigurationRecorderWithContext), varargs...)
}

// DeleteDeliveryChannel mocks base method
func (m *MockConfigServiceAPI) DeleteDeliveryChannel(arg0 *configservice.DeleteDeliveryChannelInput) (*configservice.DeleteDeliveryChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeliveryChannel", arg0)
	ret0, _ := ret[0].(*configservice.DeleteDeliveryChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeliveryChannel indicates an expected call of DeleteDeliveryChannel
func (mr *MockConfigServiceAPIMockRecorder) DeleteDeliveryChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeliveryChannel", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteDeliveryChannel), arg0)
}

// DeleteDeliveryChannelRequest mocks base method
func (m *MockConfigServiceAPI) DeleteDeliveryChannelRequest(arg0 *configservice.DeleteDeliveryChannelInput) (*request.Request, *configservice.DeleteDeliveryChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeliveryChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DeleteDeliveryChannelOutput)
	return ret0, ret1
}

// DeleteDeliveryChannelRequest indicates an expected call of DeleteDeliveryChannelRequest
func (mr *MockConfigServiceAPIMockRecorder) DeleteDeliveryChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeliveryChannelRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteDeliveryChannelRequest), arg0)
}

// DeleteDeliveryChannelWithContext mocks base method
func (m *MockConfigServiceAPI) DeleteDeliveryChannelWithContext(arg0 aws.Context, arg1 *configservice.DeleteDeliveryChannelInput, arg2 ...request.Option) (*configservice.DeleteDeliveryChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDeliveryChannelWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DeleteDeliveryChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeliveryChannelWithContext indicates an expected call of DeleteDeliveryChannelWithContext
func (mr *MockConfigServiceAPIMockRecorder) DeleteDeliveryChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeliveryChannelWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteDeliveryChannelWithContext), varargs...)
}

// DeleteEvaluationResults mocks base method
func (m *MockConfigServiceAPI) DeleteEvaluationResults(arg0 *configservice.DeleteEvaluationResultsInput) (*configservice.DeleteEvaluationResultsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluationResults", arg0)
	ret0, _ := ret[0].(*configservice.DeleteEvaluationResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvaluationResults indicates an expected call of DeleteEvaluationResults
func (mr *MockConfigServiceAPIMockRecorder) DeleteEvaluationResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluationResults", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteEvaluationResults), arg0)
}

// DeleteEvaluationResultsRequest mocks base method
func (m *MockConfigServiceAPI) DeleteEvaluationResultsRequest(arg0 *configservice.DeleteEvaluationResultsInput) (*request.Request, *configservice.DeleteEvaluationResultsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluationResultsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DeleteEvaluationResultsOutput)
	return ret0, ret1
}

// DeleteEvaluationResultsRequest indicates an expected call of DeleteEvaluationResultsRequest
func (mr *MockConfigServiceAPIMockRecorder) DeleteEvaluationResultsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluationResultsRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteEvaluationResultsRequest), arg0)
}

// DeleteEvaluationResultsWithContext mocks base method
func (m *MockConfigServiceAPI) DeleteEvaluationResultsWithContext(arg0 aws.Context, arg1 *configservice.DeleteEvaluationResultsInput, arg2 ...request.Option) (*configservice.DeleteEvaluationResultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEvaluationResultsWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DeleteEvaluationResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvaluationResultsWithContext indicates an expected call of DeleteEvaluationResultsWithContext
func (mr *MockConfigServiceAPIMockRecorder) DeleteEvaluationResultsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluationResultsWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteEvaluationResultsWithContext), varargs...)
}

// DeletePendingAggregationRequest mocks base method
func (m *MockConfigServiceAPI) DeletePendingAggregationRequest(arg0 *configservice.DeletePendingAggregationRequestInput) (*configservice.DeletePendingAggregationRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingAggregationRequest", arg0)
	ret0, _ := ret[0].(*configservice.DeletePendingAggregationRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePendingAggregationRequest indicates an expected call of DeletePendingAggregationRequest
func (mr *MockConfigServiceAPIMockRecorder) DeletePendingAggregationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingAggregationRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeletePendingAggregationRequest), arg0)
}

// DeletePendingAggregationRequestRequest mocks base method
func (m *MockConfigServiceAPI) DeletePendingAggregationRequestRequest(arg0 *configservice.DeletePendingAggregationRequestInput) (*request.Request, *configservice.DeletePendingAggregationRequestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingAggregationRequestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DeletePendingAggregationRequestOutput)
	return ret0, ret1
}

// DeletePendingAggregationRequestRequest indicates an expected call of DeletePendingAggregationRequestRequest
func (mr *MockConfigServiceAPIMockRecorder) DeletePendingAggregationRequestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingAggregationRequestRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeletePendingAggregationRequestRequest), arg0)
}

// DeletePendingAggregationRequestWithContext mocks base method
func (m *MockConfigServiceAPI) DeletePendingAggregationRequestWithContext(arg0 aws.Context, arg1 *configservice.DeletePendingAggregationRequestInput, arg2 ...request.Option) (*configservice.DeletePendingAggregationRequestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePendingAggregationRequestWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DeletePendingAggregationRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePendingAggregationRequestWithContext indicates an expected call of DeletePendingAggregationRequestWithContext
func (mr *MockConfigServiceAPIMockRecorder) DeletePendingAggregationRequestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingAggregationRequestWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeletePendingAggregationRequestWithContext), varargs...)
}

// DeleteRetentionConfiguration mocks base method
func (m *MockConfigServiceAPI) DeleteRetentionConfiguration(arg0 *configservice.DeleteRetentionConfigurationInput) (*configservice.DeleteRetentionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetentionConfiguration", arg0)
	ret0, _ := ret[0].(*configservice.DeleteRetentionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRetentionConfiguration indicates an expected call of DeleteRetentionConfiguration
func (mr *MockConfigServiceAPIMockRecorder) DeleteRetentionConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetentionConfiguration", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteRetentionConfiguration), arg0)
}

// DeleteRetentionConfigurationRequest mocks base method
func (m *MockConfigServiceAPI) DeleteRetentionConfigurationRequest(arg0 *configservice.DeleteRetentionConfigurationInput) (*request.Request, *configservice.DeleteRetentionConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetentionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DeleteRetentionConfigurationOutput)
	return ret0, ret1
}

// DeleteRetentionConfigurationRequest indicates an expected call of DeleteRetentionConfigurationRequest
func (mr *MockConfigServiceAPIMockRecorder) DeleteRetentionConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetentionConfigurationRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteRetentionConfigurationRequest), arg0)
}

// DeleteRetentionConfigurationWithContext mocks base method
func (m *MockConfigServiceAPI) DeleteRetentionConfigurationWithContext(arg0 aws.Context, arg1 *configservice.DeleteRetentionConfigurationInput, arg2 ...request.Option) (*configservice.DeleteRetentionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRetentionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DeleteRetentionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRetentionConfigurationWithContext indicates an expected call of DeleteRetentionConfigurationWithContext
func (mr *MockConfigServiceAPIMockRecorder) DeleteRetentionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetentionConfigurationWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeleteRetentionConfigurationWithContext), varargs...)
}

// DeliverConfigSnapshot mocks base method
func (m *MockConfigServiceAPI) DeliverConfigSnapshot(arg0 *configservice.DeliverConfigSnapshotInput) (*configservice.DeliverConfigSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeliverConfigSnapshot", arg0)
	ret0, _ := ret[0].(*configservice.DeliverConfigSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeliverConfigSnapshot indicates an expected call of DeliverConfigSnapshot
func (mr *MockConfigServiceAPIMockRecorder) DeliverConfigSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeliverConfigSnapshot", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeliverConfigSnapshot), arg0)
}

// DeliverConfigSnapshotRequest mocks base method
func (m *MockConfigServiceAPI) DeliverConfigSnapshotRequest(arg0 *configservice.DeliverConfigSnapshotInput) (*request.Request, *configservice.DeliverConfigSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeliverConfigSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DeliverConfigSnapshotOutput)
	return ret0, ret1
}

// DeliverConfigSnapshotRequest indicates an expected call of DeliverConfigSnapshotRequest
func (mr *MockConfigServiceAPIMockRecorder) DeliverConfigSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeliverConfigSnapshotRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeliverConfigSnapshotRequest), arg0)
}

// DeliverConfigSnapshotWithContext mocks base method
func (m *MockConfigServiceAPI) DeliverConfigSnapshotWithContext(arg0 aws.Context, arg1 *configservice.DeliverConfigSnapshotInput, arg2 ...request.Option) (*configservice.DeliverConfigSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeliverConfigSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DeliverConfigSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeliverConfigSnapshotWithContext indicates an expected call of DeliverConfigSnapshotWithContext
func (mr *MockConfigServiceAPIMockRecorder) DeliverConfigSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeliverConfigSnapshotWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DeliverConfigSnapshotWithContext), varargs...)
}

// DescribeAggregateComplianceByConfigRules mocks base method
func (m *MockConfigServiceAPI) DescribeAggregateComplianceByConfigRules(arg0 *configservice.DescribeAggregateComplianceByConfigRulesInput) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAggregateComplianceByConfigRules", arg0)
	ret0, _ := ret[0].(*configservice.DescribeAggregateComplianceByConfigRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAggregateComplianceByConfigRules indicates an expected call of DescribeAggregateComplianceByConfigRules
func (mr *MockConfigServiceAPIMockRecorder) DescribeAggregateComplianceByConfigRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAggregateComplianceByConfigRules", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeAggregateComplianceByConfigRules), arg0)
}

// DescribeAggregateComplianceByConfigRulesRequest mocks base method
func (m *MockConfigServiceAPI) DescribeAggregateComplianceByConfigRulesRequest(arg0 *configservice.DescribeAggregateComplianceByConfigRulesInput) (*request.Request, *configservice.DescribeAggregateComplianceByConfigRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAggregateComplianceByConfigRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeAggregateComplianceByConfigRulesOutput)
	return ret0, ret1
}

// DescribeAggregateComplianceByConfigRulesRequest indicates an expected call of DescribeAggregateComplianceByConfigRulesRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeAggregateComplianceByConfigRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAggregateComplianceByConfigRulesRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeAggregateComplianceByConfigRulesRequest), arg0)
}

// DescribeAggregateComplianceByConfigRulesWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeAggregateComplianceByConfigRulesWithContext(arg0 aws.Context, arg1 *configservice.DescribeAggregateComplianceByConfigRulesInput, arg2 ...request.Option) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAggregateComplianceByConfigRulesWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeAggregateComplianceByConfigRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAggregateComplianceByConfigRulesWithContext indicates an expected call of DescribeAggregateComplianceByConfigRulesWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeAggregateComplianceByConfigRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAggregateComplianceByConfigRulesWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeAggregateComplianceByConfigRulesWithContext), varargs...)
}

// DescribeAggregationAuthorizations mocks base method
func (m *MockConfigServiceAPI) DescribeAggregationAuthorizations(arg0 *configservice.DescribeAggregationAuthorizationsInput) (*configservice.DescribeAggregationAuthorizationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAggregationAuthorizations", arg0)
	ret0, _ := ret[0].(*configservice.DescribeAggregationAuthorizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAggregationAuthorizations indicates an expected call of DescribeAggregationAuthorizations
func (mr *MockConfigServiceAPIMockRecorder) DescribeAggregationAuthorizations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAggregationAuthorizations", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeAggregationAuthorizations), arg0)
}

// DescribeAggregationAuthorizationsRequest mocks base method
func (m *MockConfigServiceAPI) DescribeAggregationAuthorizationsRequest(arg0 *configservice.DescribeAggregationAuthorizationsInput) (*request.Request, *configservice.DescribeAggregationAuthorizationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAggregationAuthorizationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeAggregationAuthorizationsOutput)
	return ret0, ret1
}

// DescribeAggregationAuthorizationsRequest indicates an expected call of DescribeAggregationAuthorizationsRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeAggregationAuthorizationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAggregationAuthorizationsRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeAggregationAuthorizationsRequest), arg0)
}

// DescribeAggregationAuthorizationsWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeAggregationAuthorizationsWithContext(arg0 aws.Context, arg1 *configservice.DescribeAggregationAuthorizationsInput, arg2 ...request.Option) (*configservice.DescribeAggregationAuthorizationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAggregationAuthorizationsWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeAggregationAuthorizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAggregationAuthorizationsWithContext indicates an expected call of DescribeAggregationAuthorizationsWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeAggregationAuthorizationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAggregationAuthorizationsWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeAggregationAuthorizationsWithContext), varargs...)
}

// DescribeComplianceByConfigRule mocks base method
func (m *MockConfigServiceAPI) DescribeComplianceByConfigRule(arg0 *configservice.DescribeComplianceByConfigRuleInput) (*configservice.DescribeComplianceByConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeComplianceByConfigRule", arg0)
	ret0, _ := ret[0].(*configservice.DescribeComplianceByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeComplianceByConfigRule indicates an expected call of DescribeComplianceByConfigRule
func (mr *MockConfigServiceAPIMockRecorder) DescribeComplianceByConfigRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComplianceByConfigRule", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeComplianceByConfigRule), arg0)
}

// DescribeComplianceByConfigRuleRequest mocks base method
func (m *MockConfigServiceAPI) DescribeComplianceByConfigRuleRequest(arg0 *configservice.DescribeComplianceByConfigRuleInput) (*request.Request, *configservice.DescribeComplianceByConfigRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeComplianceByConfigRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeComplianceByConfigRuleOutput)
	return ret0, ret1
}

// DescribeComplianceByConfigRuleRequest indicates an expected call of DescribeComplianceByConfigRuleRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeComplianceByConfigRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComplianceByConfigRuleRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeComplianceByConfigRuleRequest), arg0)
}

// DescribeComplianceByConfigRuleWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeComplianceByConfigRuleWithContext(arg0 aws.Context, arg1 *configservice.DescribeComplianceByConfigRuleInput, arg2 ...request.Option) (*configservice.DescribeComplianceByConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeComplianceByConfigRuleWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeComplianceByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeComplianceByConfigRuleWithContext indicates an expected call of DescribeComplianceByConfigRuleWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeComplianceByConfigRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComplianceByConfigRuleWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeComplianceByConfigRuleWithContext), varargs...)
}

// DescribeComplianceByResource mocks base method
func (m *MockConfigServiceAPI) DescribeComplianceByResource(arg0 *configservice.DescribeComplianceByResourceInput) (*configservice.DescribeComplianceByResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeComplianceByResource", arg0)
	ret0, _ := ret[0].(*configservice.DescribeComplianceByResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeComplianceByResource indicates an expected call of DescribeComplianceByResource
func (mr *MockConfigServiceAPIMockRecorder) DescribeComplianceByResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComplianceByResource", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeComplianceByResource), arg0)
}

// DescribeComplianceByResourceRequest mocks base method
func (m *MockConfigServiceAPI) DescribeComplianceByResourceRequest(arg0 *configservice.DescribeComplianceByResourceInput) (*request.Request, *configservice.DescribeComplianceByResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeComplianceByResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeComplianceByResourceOutput)
	return ret0, ret1
}

// DescribeComplianceByResourceRequest indicates an expected call of DescribeComplianceByResourceRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeComplianceByResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComplianceByResourceRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeComplianceByResourceRequest), arg0)
}

// DescribeComplianceByResourceWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeComplianceByResourceWithContext(arg0 aws.Context, arg1 *configservice.DescribeComplianceByResourceInput, arg2 ...request.Option) (*configservice.DescribeComplianceByResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeComplianceByResourceWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeComplianceByResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeComplianceByResourceWithContext indicates an expected call of DescribeComplianceByResourceWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeComplianceByResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComplianceByResourceWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeComplianceByResourceWithContext), varargs...)
}

// DescribeConfigRuleEvaluationStatus mocks base method
func (m *MockConfigServiceAPI) DescribeConfigRuleEvaluationStatus(arg0 *configservice.DescribeConfigRuleEvaluationStatusInput) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigRuleEvaluationStatus", arg0)
	ret0, _ := ret[0].(*configservice.DescribeConfigRuleEvaluationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigRuleEvaluationStatus indicates an expected call of DescribeConfigRuleEvaluationStatus
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigRuleEvaluationStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigRuleEvaluationStatus", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigRuleEvaluationStatus), arg0)
}

// DescribeConfigRuleEvaluationStatusRequest mocks base method
func (m *MockConfigServiceAPI) DescribeConfigRuleEvaluationStatusRequest(arg0 *configservice.DescribeConfigRuleEvaluationStatusInput) (*request.Request, *configservice.DescribeConfigRuleEvaluationStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigRuleEvaluationStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeConfigRuleEvaluationStatusOutput)
	return ret0, ret1
}

// DescribeConfigRuleEvaluationStatusRequest indicates an expected call of DescribeConfigRuleEvaluationStatusRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigRuleEvaluationStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigRuleEvaluationStatusRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigRuleEvaluationStatusRequest), arg0)
}

// DescribeConfigRuleEvaluationStatusWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeConfigRuleEvaluationStatusWithContext(arg0 aws.Context, arg1 *configservice.DescribeConfigRuleEvaluationStatusInput, arg2 ...request.Option) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigRuleEvaluationStatusWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigRuleEvaluationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigRuleEvaluationStatusWithContext indicates an expected call of DescribeConfigRuleEvaluationStatusWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigRuleEvaluationStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigRuleEvaluationStatusWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigRuleEvaluationStatusWithContext), varargs...)
}

// DescribeConfigRules mocks base method
func (m *MockConfigServiceAPI) DescribeConfigRules(arg0 *configservice.DescribeConfigRulesInput) (*configservice.DescribeConfigRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigRules", arg0)
	ret0, _ := ret[0].(*configservice.DescribeConfigRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigRules indicates an expected call of DescribeConfigRules
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigRules", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigRules), arg0)
}

// DescribeConfigRulesRequest mocks base method
func (m *MockConfigServiceAPI) DescribeConfigRulesRequest(arg0 *configservice.DescribeConfigRulesInput) (*request.Request, *configservice.DescribeConfigRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeConfigRulesOutput)
	return ret0, ret1
}

// DescribeConfigRulesRequest indicates an expected call of DescribeConfigRulesRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigRulesRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigRulesRequest), arg0)
}

// DescribeConfigRulesWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeConfigRulesWithContext(arg0 aws.Context, arg1 *configservice.DescribeConfigRulesInput, arg2 ...request.Option) (*configservice.DescribeConfigRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigRulesWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigRulesWithContext indicates an expected call of DescribeConfigRulesWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigRulesWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigRulesWithContext), varargs...)
}

// DescribeConfigurationAggregatorSourcesStatus mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationAggregatorSourcesStatus(arg0 *configservice.DescribeConfigurationAggregatorSourcesStatusInput) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationAggregatorSourcesStatus", arg0)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationAggregatorSourcesStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationAggregatorSourcesStatus indicates an expected call of DescribeConfigurationAggregatorSourcesStatus
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationAggregatorSourcesStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationAggregatorSourcesStatus", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationAggregatorSourcesStatus), arg0)
}

// DescribeConfigurationAggregatorSourcesStatusRequest mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationAggregatorSourcesStatusRequest(arg0 *configservice.DescribeConfigurationAggregatorSourcesStatusInput) (*request.Request, *configservice.DescribeConfigurationAggregatorSourcesStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationAggregatorSourcesStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeConfigurationAggregatorSourcesStatusOutput)
	return ret0, ret1
}

// DescribeConfigurationAggregatorSourcesStatusRequest indicates an expected call of DescribeConfigurationAggregatorSourcesStatusRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationAggregatorSourcesStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationAggregatorSourcesStatusRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationAggregatorSourcesStatusRequest), arg0)
}

// DescribeConfigurationAggregatorSourcesStatusWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationAggregatorSourcesStatusWithContext(arg0 aws.Context, arg1 *configservice.DescribeConfigurationAggregatorSourcesStatusInput, arg2 ...request.Option) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationAggregatorSourcesStatusWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationAggregatorSourcesStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationAggregatorSourcesStatusWithContext indicates an expected call of DescribeConfigurationAggregatorSourcesStatusWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationAggregatorSourcesStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationAggregatorSourcesStatusWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationAggregatorSourcesStatusWithContext), varargs...)
}

// DescribeConfigurationAggregators mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationAggregators(arg0 *configservice.DescribeConfigurationAggregatorsInput) (*configservice.DescribeConfigurationAggregatorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationAggregators", arg0)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationAggregatorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationAggregators indicates an expected call of DescribeConfigurationAggregators
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationAggregators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationAggregators", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationAggregators), arg0)
}

// DescribeConfigurationAggregatorsRequest mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationAggregatorsRequest(arg0 *configservice.DescribeConfigurationAggregatorsInput) (*request.Request, *configservice.DescribeConfigurationAggregatorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationAggregatorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeConfigurationAggregatorsOutput)
	return ret0, ret1
}

// DescribeConfigurationAggregatorsRequest indicates an expected call of DescribeConfigurationAggregatorsRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationAggregatorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationAggregatorsRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationAggregatorsRequest), arg0)
}

// DescribeConfigurationAggregatorsWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationAggregatorsWithContext(arg0 aws.Context, arg1 *configservice.DescribeConfigurationAggregatorsInput, arg2 ...request.Option) (*configservice.DescribeConfigurationAggregatorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationAggregatorsWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationAggregatorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationAggregatorsWithContext indicates an expected call of DescribeConfigurationAggregatorsWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationAggregatorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationAggregatorsWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationAggregatorsWithContext), varargs...)
}

// DescribeConfigurationRecorderStatus mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationRecorderStatus(arg0 *configservice.DescribeConfigurationRecorderStatusInput) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationRecorderStatus", arg0)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationRecorderStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationRecorderStatus indicates an expected call of DescribeConfigurationRecorderStatus
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationRecorderStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRecorderStatus", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationRecorderStatus), arg0)
}

// DescribeConfigurationRecorderStatusRequest mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationRecorderStatusRequest(arg0 *configservice.DescribeConfigurationRecorderStatusInput) (*request.Request, *configservice.DescribeConfigurationRecorderStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationRecorderStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeConfigurationRecorderStatusOutput)
	return ret0, ret1
}

// DescribeConfigurationRecorderStatusRequest indicates an expected call of DescribeConfigurationRecorderStatusRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationRecorderStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRecorderStatusRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationRecorderStatusRequest), arg0)
}

// DescribeConfigurationRecorderStatusWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationRecorderStatusWithContext(arg0 aws.Context, arg1 *configservice.DescribeConfigurationRecorderStatusInput, arg2 ...request.Option) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationRecorderStatusWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationRecorderStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationRecorderStatusWithContext indicates an expected call of DescribeConfigurationRecorderStatusWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationRecorderStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRecorderStatusWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationRecorderStatusWithContext), varargs...)
}

// DescribeConfigurationRecorders mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationRecorders(arg0 *configservice.DescribeConfigurationRecordersInput) (*configservice.DescribeConfigurationRecordersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationRecorders", arg0)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationRecordersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationRecorders indicates an expected call of DescribeConfigurationRecorders
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationRecorders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRecorders", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationRecorders), arg0)
}

// DescribeConfigurationRecordersRequest mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationRecordersRequest(arg0 *configservice.DescribeConfigurationRecordersInput) (*request.Request, *configservice.DescribeConfigurationRecordersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationRecordersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeConfigurationRecordersOutput)
	return ret0, ret1
}

// DescribeConfigurationRecordersRequest indicates an expected call of DescribeConfigurationRecordersRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationRecordersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRecordersRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationRecordersRequest), arg0)
}

// DescribeConfigurationRecordersWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeConfigurationRecordersWithContext(arg0 aws.Context, arg1 *configservice.DescribeConfigurationRecordersInput, arg2 ...request.Option) (*configservice.DescribeConfigurationRecordersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationRecordersWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationRecordersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationRecordersWithContext indicates an expected call of DescribeConfigurationRecordersWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeConfigurationRecordersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRecordersWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeConfigurationRecordersWithContext), varargs...)
}

// DescribeDeliveryChannelStatus mocks base method
func (m *MockConfigServiceAPI) DescribeDeliveryChannelStatus(arg0 *configservice.DescribeDeliveryChannelStatusInput) (*configservice.DescribeDeliveryChannelStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeliveryChannelStatus", arg0)
	ret0, _ := ret[0].(*configservice.DescribeDeliveryChannelStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeliveryChannelStatus indicates an expected call of DescribeDeliveryChannelStatus
func (mr *MockConfigServiceAPIMockRecorder) DescribeDeliveryChannelStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeliveryChannelStatus", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeDeliveryChannelStatus), arg0)
}

// DescribeDeliveryChannelStatusRequest mocks base method
func (m *MockConfigServiceAPI) DescribeDeliveryChannelStatusRequest(arg0 *configservice.DescribeDeliveryChannelStatusInput) (*request.Request, *configservice.DescribeDeliveryChannelStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeliveryChannelStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeDeliveryChannelStatusOutput)
	return ret0, ret1
}

// DescribeDeliveryChannelStatusRequest indicates an expected call of DescribeDeliveryChannelStatusRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeDeliveryChannelStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeliveryChannelStatusRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeDeliveryChannelStatusRequest), arg0)
}

// DescribeDeliveryChannelStatusWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeDeliveryChannelStatusWithContext(arg0 aws.Context, arg1 *configservice.DescribeDeliveryChannelStatusInput, arg2 ...request.Option) (*configservice.DescribeDeliveryChannelStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeliveryChannelStatusWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeDeliveryChannelStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeliveryChannelStatusWithContext indicates an expected call of DescribeDeliveryChannelStatusWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeDeliveryChannelStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeliveryChannelStatusWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeDeliveryChannelStatusWithContext), varargs...)
}

// DescribeDeliveryChannels mocks base method
func (m *MockConfigServiceAPI) DescribeDeliveryChannels(arg0 *configservice.DescribeDeliveryChannelsInput) (*configservice.DescribeDeliveryChannelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeliveryChannels", arg0)
	ret0, _ := ret[0].(*configservice.DescribeDeliveryChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeliveryChannels indicates an expected call of DescribeDeliveryChannels
func (mr *MockConfigServiceAPIMockRecorder) DescribeDeliveryChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeliveryChannels", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeDeliveryChannels), arg0)
}

// DescribeDeliveryChannelsRequest mocks base method
func (m *MockConfigServiceAPI) DescribeDeliveryChannelsRequest(arg0 *configservice.DescribeDeliveryChannelsInput) (*request.Request, *configservice.DescribeDeliveryChannelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeliveryChannelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeDeliveryChannelsOutput)
	return ret0, ret1
}

// DescribeDeliveryChannelsRequest indicates an expected call of DescribeDeliveryChannelsRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeDeliveryChannelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeliveryChannelsRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeDeliveryChannelsRequest), arg0)
}

// DescribeDeliveryChannelsWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeDeliveryChannelsWithContext(arg0 aws.Context, arg1 *configservice.DescribeDeliveryChannelsInput, arg2 ...request.Option) (*configservice.DescribeDeliveryChannelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeliveryChannelsWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeDeliveryChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeliveryChannelsWithContext indicates an expected call of DescribeDeliveryChannelsWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeDeliveryChannelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeliveryChannelsWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeDeliveryChannelsWithContext), varargs...)
}

// DescribePendingAggregationRequests mocks base method
func (m *MockConfigServiceAPI) DescribePendingAggregationRequests(arg0 *configservice.DescribePendingAggregationRequestsInput) (*configservice.DescribePendingAggregationRequestsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePendingAggregationRequests", arg0)
	ret0, _ := ret[0].(*configservice.DescribePendingAggregationRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingAggregationRequests indicates an expected call of DescribePendingAggregationRequests
func (mr *MockConfigServiceAPIMockRecorder) DescribePendingAggregationRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingAggregationRequests", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribePendingAggregationRequests), arg0)
}

// DescribePendingAggregationRequestsRequest mocks base method
func (m *MockConfigServiceAPI) DescribePendingAggregationRequestsRequest(arg0 *configservice.DescribePendingAggregationRequestsInput) (*request.Request, *configservice.DescribePendingAggregationRequestsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePendingAggregationRequestsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribePendingAggregationRequestsOutput)
	return ret0, ret1
}

// DescribePendingAggregationRequestsRequest indicates an expected call of DescribePendingAggregationRequestsRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribePendingAggregationRequestsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingAggregationRequestsRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribePendingAggregationRequestsRequest), arg0)
}

// DescribePendingAggregationRequestsWithContext mocks base method
func (m *MockConfigServiceAPI) DescribePendingAggregationRequestsWithContext(arg0 aws.Context, arg1 *configservice.DescribePendingAggregationRequestsInput, arg2 ...request.Option) (*configservice.DescribePendingAggregationRequestsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingAggregationRequestsWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribePendingAggregationRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingAggregationRequestsWithContext indicates an expected call of DescribePendingAggregationRequestsWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribePendingAggregationRequestsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingAggregationRequestsWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribePendingAggregationRequestsWithContext), varargs...)
}

// DescribeRetentionConfigurations mocks base method
func (m *MockConfigServiceAPI) DescribeRetentionConfigurations(arg0 *configservice.DescribeRetentionConfigurationsInput) (*configservice.DescribeRetentionConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRetentionConfigurations", arg0)
	ret0, _ := ret[0].(*configservice.DescribeRetentionConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRetentionConfigurations indicates an expected call of DescribeRetentionConfigurations
func (mr *MockConfigServiceAPIMockRecorder) DescribeRetentionConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRetentionConfigurations", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeRetentionConfigurations), arg0)
}

// DescribeRetentionConfigurationsRequest mocks base method
func (m *MockConfigServiceAPI) DescribeRetentionConfigurationsRequest(arg0 *configservice.DescribeRetentionConfigurationsInput) (*request.Request, *configservice.DescribeRetentionConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRetentionConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.DescribeRetentionConfigurationsOutput)
	return ret0, ret1
}

// DescribeRetentionConfigurationsRequest indicates an expected call of DescribeRetentionConfigurationsRequest
func (mr *MockConfigServiceAPIMockRecorder) DescribeRetentionConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRetentionConfigurationsRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeRetentionConfigurationsRequest), arg0)
}

// DescribeRetentionConfigurationsWithContext mocks base method
func (m *MockConfigServiceAPI) DescribeRetentionConfigurationsWithContext(arg0 aws.Context, arg1 *configservice.DescribeRetentionConfigurationsInput, arg2 ...request.Option) (*configservice.DescribeRetentionConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRetentionConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeRetentionConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRetentionConfigurationsWithContext indicates an expected call of DescribeRetentionConfigurationsWithContext
func (mr *MockConfigServiceAPIMockRecorder) DescribeRetentionConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRetentionConfigurationsWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).DescribeRetentionConfigurationsWithContext), varargs...)
}

// GetAggregateComplianceDetailsByConfigRule mocks base method
func (m *MockConfigServiceAPI) GetAggregateComplianceDetailsByConfigRule(arg0 *configservice.GetAggregateComplianceDetailsByConfigRuleInput) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregateComplianceDetailsByConfigRule", arg0)
	ret0, _ := ret[0].(*configservice.GetAggregateComplianceDetailsByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateComplianceDetailsByConfigRule indicates an expected call of GetAggregateComplianceDetailsByConfigRule
func (mr *MockConfigServiceAPIMockRecorder) GetAggregateComplianceDetailsByConfigRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateComplianceDetailsByConfigRule", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetAggregateComplianceDetailsByConfigRule), arg0)
}

// GetAggregateComplianceDetailsByConfigRuleRequest mocks base method
func (m *MockConfigServiceAPI) GetAggregateComplianceDetailsByConfigRuleRequest(arg0 *configservice.GetAggregateComplianceDetailsByConfigRuleInput) (*request.Request, *configservice.GetAggregateComplianceDetailsByConfigRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregateComplianceDetailsByConfigRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.GetAggregateComplianceDetailsByConfigRuleOutput)
	return ret0, ret1
}

// GetAggregateComplianceDetailsByConfigRuleRequest indicates an expected call of GetAggregateComplianceDetailsByConfigRuleRequest
func (mr *MockConfigServiceAPIMockRecorder) GetAggregateComplianceDetailsByConfigRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateComplianceDetailsByConfigRuleRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetAggregateComplianceDetailsByConfigRuleRequest), arg0)
}

// GetAggregateComplianceDetailsByConfigRuleWithContext mocks base method
func (m *MockConfigServiceAPI) GetAggregateComplianceDetailsByConfigRuleWithContext(arg0 aws.Context, arg1 *configservice.GetAggregateComplianceDetailsByConfigRuleInput, arg2 ...request.Option) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregateComplianceDetailsByConfigRuleWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.GetAggregateComplianceDetailsByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateComplianceDetailsByConfigRuleWithContext indicates an expected call of GetAggregateComplianceDetailsByConfigRuleWithContext
func (mr *MockConfigServiceAPIMockRecorder) GetAggregateComplianceDetailsByConfigRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateComplianceDetailsByConfigRuleWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetAggregateComplianceDetailsByConfigRuleWithContext), varargs...)
}

// GetAggregateConfigRuleComplianceSummary mocks base method
func (m *MockConfigServiceAPI) GetAggregateConfigRuleComplianceSummary(arg0 *configservice.GetAggregateConfigRuleComplianceSummaryInput) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregateConfigRuleComplianceSummary", arg0)
	ret0, _ := ret[0].(*configservice.GetAggregateConfigRuleComplianceSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateConfigRuleComplianceSummary indicates an expected call of GetAggregateConfigRuleComplianceSummary
func (mr *MockConfigServiceAPIMockRecorder) GetAggregateConfigRuleComplianceSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateConfigRuleComplianceSummary", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetAggregateConfigRuleComplianceSummary), arg0)
}

// GetAggregateConfigRuleComplianceSummaryRequest mocks base method
func (m *MockConfigServiceAPI) GetAggregateConfigRuleComplianceSummaryRequest(arg0 *configservice.GetAggregateConfigRuleComplianceSummaryInput) (*request.Request, *configservice.GetAggregateConfigRuleComplianceSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregateConfigRuleComplianceSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.GetAggregateConfigRuleComplianceSummaryOutput)
	return ret0, ret1
}

// GetAggregateConfigRuleComplianceSummaryRequest indicates an expected call of GetAggregateConfigRuleComplianceSummaryRequest
func (mr *MockConfigServiceAPIMockRecorder) GetAggregateConfigRuleComplianceSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateConfigRuleComplianceSummaryRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetAggregateConfigRuleComplianceSummaryRequest), arg0)
}

// GetAggregateConfigRuleComplianceSummaryWithContext mocks base method
func (m *MockConfigServiceAPI) GetAggregateConfigRuleComplianceSummaryWithContext(arg0 aws.Context, arg1 *configservice.GetAggregateConfigRuleComplianceSummaryInput, arg2 ...request.Option) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregateConfigRuleComplianceSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.GetAggregateConfigRuleComplianceSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateConfigRuleComplianceSummaryWithContext indicates an expected call of GetAggregateConfigRuleComplianceSummaryWithContext
func (mr *MockConfigServiceAPIMockRecorder) GetAggregateConfigRuleComplianceSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateConfigRuleComplianceSummaryWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetAggregateConfigRuleComplianceSummaryWithContext), varargs...)
}

// GetComplianceDetailsByConfigRule mocks base method
func (m *MockConfigServiceAPI) GetComplianceDetailsByConfigRule(arg0 *configservice.GetComplianceDetailsByConfigRuleInput) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceDetailsByConfigRule", arg0)
	ret0, _ := ret[0].(*configservice.GetComplianceDetailsByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceDetailsByConfigRule indicates an expected call of GetComplianceDetailsByConfigRule
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceDetailsByConfigRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetailsByConfigRule", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceDetailsByConfigRule), arg0)
}

// GetComplianceDetailsByConfigRuleRequest mocks base method
func (m *MockConfigServiceAPI) GetComplianceDetailsByConfigRuleRequest(arg0 *configservice.GetComplianceDetailsByConfigRuleInput) (*request.Request, *configservice.GetComplianceDetailsByConfigRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceDetailsByConfigRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.GetComplianceDetailsByConfigRuleOutput)
	return ret0, ret1
}

// GetComplianceDetailsByConfigRuleRequest indicates an expected call of GetComplianceDetailsByConfigRuleRequest
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceDetailsByConfigRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetailsByConfigRuleRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceDetailsByConfigRuleRequest), arg0)
}

// GetComplianceDetailsByConfigRuleWithContext mocks base method
func (m *MockConfigServiceAPI) GetComplianceDetailsByConfigRuleWithContext(arg0 aws.Context, arg1 *configservice.GetComplianceDetailsByConfigRuleInput, arg2 ...request.Option) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplianceDetailsByConfigRuleWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.GetComplianceDetailsByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceDetailsByConfigRuleWithContext indicates an expected call of GetComplianceDetailsByConfigRuleWithContext
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceDetailsByConfigRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetailsByConfigRuleWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceDetailsByConfigRuleWithContext), varargs...)
}

// GetComplianceDetailsByResource mocks base method
func (m *MockConfigServiceAPI) GetComplianceDetailsByResource(arg0 *configservice.GetComplianceDetailsByResourceInput) (*configservice.GetComplianceDetailsByResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceDetailsByResource", arg0)
	ret0, _ := ret[0].(*configservice.GetComplianceDetailsByResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceDetailsByResource indicates an expected call of GetComplianceDetailsByResource
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceDetailsByResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetailsByResource", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceDetailsByResource), arg0)
}

// GetComplianceDetailsByResourceRequest mocks base method
func (m *MockConfigServiceAPI) GetComplianceDetailsByResourceRequest(arg0 *configservice.GetComplianceDetailsByResourceInput) (*request.Request, *configservice.GetComplianceDetailsByResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceDetailsByResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.GetComplianceDetailsByResourceOutput)
	return ret0, ret1
}

// GetComplianceDetailsByResourceRequest indicates an expected call of GetComplianceDetailsByResourceRequest
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceDetailsByResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetailsByResourceRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceDetailsByResourceRequest), arg0)
}

// GetComplianceDetailsByResourceWithContext mocks base method
func (m *MockConfigServiceAPI) GetComplianceDetailsByResourceWithContext(arg0 aws.Context, arg1 *configservice.GetComplianceDetailsByResourceInput, arg2 ...request.Option) (*configservice.GetComplianceDetailsByResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplianceDetailsByResourceWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.GetComplianceDetailsByResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceDetailsByResourceWithContext indicates an expected call of GetComplianceDetailsByResourceWithContext
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceDetailsByResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetailsByResourceWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceDetailsByResourceWithContext), varargs...)
}

// GetComplianceSummaryByConfigRule mocks base method
func (m *MockConfigServiceAPI) GetComplianceSummaryByConfigRule(arg0 *configservice.GetComplianceSummaryByConfigRuleInput) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceSummaryByConfigRule", arg0)
	ret0, _ := ret[0].(*configservice.GetComplianceSummaryByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceSummaryByConfigRule indicates an expected call of GetComplianceSummaryByConfigRule
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceSummaryByConfigRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceSummaryByConfigRule", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceSummaryByConfigRule), arg0)
}

// GetComplianceSummaryByConfigRuleRequest mocks base method
func (m *MockConfigServiceAPI) GetComplianceSummaryByConfigRuleRequest(arg0 *configservice.GetComplianceSummaryByConfigRuleInput) (*request.Request, *configservice.GetComplianceSummaryByConfigRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceSummaryByConfigRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.GetComplianceSummaryByConfigRuleOutput)
	return ret0, ret1
}

// GetComplianceSummaryByConfigRuleRequest indicates an expected call of GetComplianceSummaryByConfigRuleRequest
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceSummaryByConfigRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceSummaryByConfigRuleRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceSummaryByConfigRuleRequest), arg0)
}

// GetComplianceSummaryByConfigRuleWithContext mocks base method
func (m *MockConfigServiceAPI) GetComplianceSummaryByConfigRuleWithContext(arg0 aws.Context, arg1 *configservice.GetComplianceSummaryByConfigRuleInput, arg2 ...request.Option) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplianceSummaryByConfigRuleWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.GetComplianceSummaryByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceSummaryByConfigRuleWithContext indicates an expected call of GetComplianceSummaryByConfigRuleWithContext
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceSummaryByConfigRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceSummaryByConfigRuleWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceSummaryByConfigRuleWithContext), varargs...)
}

// GetComplianceSummaryByResourceType mocks base method
func (m *MockConfigServiceAPI) GetComplianceSummaryByResourceType(arg0 *configservice.GetComplianceSummaryByResourceTypeInput) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceSummaryByResourceType", arg0)
	ret0, _ := ret[0].(*configservice.GetComplianceSummaryByResourceTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceSummaryByResourceType indicates an expected call of GetComplianceSummaryByResourceType
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceSummaryByResourceType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceSummaryByResourceType", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceSummaryByResourceType), arg0)
}

// GetComplianceSummaryByResourceTypeRequest mocks base method
func (m *MockConfigServiceAPI) GetComplianceSummaryByResourceTypeRequest(arg0 *configservice.GetComplianceSummaryByResourceTypeInput) (*request.Request, *configservice.GetComplianceSummaryByResourceTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceSummaryByResourceTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.GetComplianceSummaryByResourceTypeOutput)
	return ret0, ret1
}

// GetComplianceSummaryByResourceTypeRequest indicates an expected call of GetComplianceSummaryByResourceTypeRequest
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceSummaryByResourceTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceSummaryByResourceTypeRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceSummaryByResourceTypeRequest), arg0)
}

// GetComplianceSummaryByResourceTypeWithContext mocks base method
func (m *MockConfigServiceAPI) GetComplianceSummaryByResourceTypeWithContext(arg0 aws.Context, arg1 *configservice.GetComplianceSummaryByResourceTypeInput, arg2 ...request.Option) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplianceSummaryByResourceTypeWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.GetComplianceSummaryByResourceTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceSummaryByResourceTypeWithContext indicates an expected call of GetComplianceSummaryByResourceTypeWithContext
func (mr *MockConfigServiceAPIMockRecorder) GetComplianceSummaryByResourceTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceSummaryByResourceTypeWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetComplianceSummaryByResourceTypeWithContext), varargs...)
}

// GetDiscoveredResourceCounts mocks base method
func (m *MockConfigServiceAPI) GetDiscoveredResourceCounts(arg0 *configservice.GetDiscoveredResourceCountsInput) (*configservice.GetDiscoveredResourceCountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveredResourceCounts", arg0)
	ret0, _ := ret[0].(*configservice.GetDiscoveredResourceCountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveredResourceCounts indicates an expected call of GetDiscoveredResourceCounts
func (mr *MockConfigServiceAPIMockRecorder) GetDiscoveredResourceCounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredResourceCounts", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetDiscoveredResourceCounts), arg0)
}

// GetDiscoveredResourceCountsRequest mocks base method
func (m *MockConfigServiceAPI) GetDiscoveredResourceCountsRequest(arg0 *configservice.GetDiscoveredResourceCountsInput) (*request.Request, *configservice.GetDiscoveredResourceCountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveredResourceCountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.GetDiscoveredResourceCountsOutput)
	return ret0, ret1
}

// GetDiscoveredResourceCountsRequest indicates an expected call of GetDiscoveredResourceCountsRequest
func (mr *MockConfigServiceAPIMockRecorder) GetDiscoveredResourceCountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredResourceCountsRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetDiscoveredResourceCountsRequest), arg0)
}

// GetDiscoveredResourceCountsWithContext mocks base method
func (m *MockConfigServiceAPI) GetDiscoveredResourceCountsWithContext(arg0 aws.Context, arg1 *configservice.GetDiscoveredResourceCountsInput, arg2 ...request.Option) (*configservice.GetDiscoveredResourceCountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiscoveredResourceCountsWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.GetDiscoveredResourceCountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveredResourceCountsWithContext indicates an expected call of GetDiscoveredResourceCountsWithContext
func (mr *MockConfigServiceAPIMockRecorder) GetDiscoveredResourceCountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredResourceCountsWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetDiscoveredResourceCountsWithContext), varargs...)
}

// GetResourceConfigHistory mocks base method
func (m *MockConfigServiceAPI) GetResourceConfigHistory(arg0 *configservice.GetResourceConfigHistoryInput) (*configservice.GetResourceConfigHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceConfigHistory", arg0)
	ret0, _ := ret[0].(*configservice.GetResourceConfigHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceConfigHistory indicates an expected call of GetResourceConfigHistory
func (mr *MockConfigServiceAPIMockRecorder) GetResourceConfigHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceConfigHistory", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetResourceConfigHistory), arg0)
}

// GetResourceConfigHistoryPages mocks base method
func (m *MockConfigServiceAPI) GetResourceConfigHistoryPages(arg0 *configservice.GetResourceConfigHistoryInput, arg1 func(*configservice.GetResourceConfigHistoryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceConfigHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourceConfigHistoryPages indicates an expected call of GetResourceConfigHistoryPages
func (mr *MockConfigServiceAPIMockRecorder) GetResourceConfigHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceConfigHistoryPages", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetResourceConfigHistoryPages), arg0, arg1)
}

// GetResourceConfigHistoryPagesWithContext mocks base method
func (m *MockConfigServiceAPI) GetResourceConfigHistoryPagesWithContext(arg0 aws.Context, arg1 *configservice.GetResourceConfigHistoryInput, arg2 func(*configservice.GetResourceConfigHistoryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceConfigHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourceConfigHistoryPagesWithContext indicates an expected call of GetResourceConfigHistoryPagesWithContext
func (mr *MockConfigServiceAPIMockRecorder) GetResourceConfigHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceConfigHistoryPagesWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetResourceConfigHistoryPagesWithContext), varargs...)
}

// GetResourceConfigHistoryRequest mocks base method
func (m *MockConfigServiceAPI) GetResourceConfigHistoryRequest(arg0 *configservice.GetResourceConfigHistoryInput) (*request.Request, *configservice.GetResourceConfigHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceConfigHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.GetResourceConfigHistoryOutput)
	return ret0, ret1
}

// GetResourceConfigHistoryRequest indicates an expected call of GetResourceConfigHistoryRequest
func (mr *MockConfigServiceAPIMockRecorder) GetResourceConfigHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceConfigHistoryRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetResourceConfigHistoryRequest), arg0)
}

// GetResourceConfigHistoryWithContext mocks base method
func (m *MockConfigServiceAPI) GetResourceConfigHistoryWithContext(arg0 aws.Context, arg1 *configservice.GetResourceConfigHistoryInput, arg2 ...request.Option) (*configservice.GetResourceConfigHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceConfigHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.GetResourceConfigHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceConfigHistoryWithContext indicates an expected call of GetResourceConfigHistoryWithContext
func (mr *MockConfigServiceAPIMockRecorder) GetResourceConfigHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceConfigHistoryWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).GetResourceConfigHistoryWithContext), varargs...)
}

// ListDiscoveredResources mocks base method
func (m *MockConfigServiceAPI) ListDiscoveredResources(arg0 *configservice.ListDiscoveredResourcesInput) (*configservice.ListDiscoveredResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscoveredResources", arg0)
	ret0, _ := ret[0].(*configservice.ListDiscoveredResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscoveredResources indicates an expected call of ListDiscoveredResources
func (mr *MockConfigServiceAPIMockRecorder) ListDiscoveredResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoveredResources", reflect.TypeOf((*MockConfigServiceAPI)(nil).ListDiscoveredResources), arg0)
}

// ListDiscoveredResourcesRequest mocks base method
func (m *MockConfigServiceAPI) ListDiscoveredResourcesRequest(arg0 *configservice.ListDiscoveredResourcesInput) (*request.Request, *configservice.ListDiscoveredResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscoveredResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.ListDiscoveredResourcesOutput)
	return ret0, ret1
}

// ListDiscoveredResourcesRequest indicates an expected call of ListDiscoveredResourcesRequest
func (mr *MockConfigServiceAPIMockRecorder) ListDiscoveredResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoveredResourcesRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).ListDiscoveredResourcesRequest), arg0)
}

// ListDiscoveredResourcesWithContext mocks base method
func (m *MockConfigServiceAPI) ListDiscoveredResourcesWithContext(arg0 aws.Context, arg1 *configservice.ListDiscoveredResourcesInput, arg2 ...request.Option) (*configservice.ListDiscoveredResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDiscoveredResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.ListDiscoveredResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscoveredResourcesWithContext indicates an expected call of ListDiscoveredResourcesWithContext
func (mr *MockConfigServiceAPIMockRecorder) ListDiscoveredResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoveredResourcesWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).ListDiscoveredResourcesWithContext), varargs...)
}

// PutAggregationAuthorization mocks base method
func (m *MockConfigServiceAPI) PutAggregationAuthorization(arg0 *configservice.PutAggregationAuthorizationInput) (*configservice.PutAggregationAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAggregationAuthorization", arg0)
	ret0, _ := ret[0].(*configservice.PutAggregationAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAggregationAuthorization indicates an expected call of PutAggregationAuthorization
func (mr *MockConfigServiceAPIMockRecorder) PutAggregationAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAggregationAuthorization", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutAggregationAuthorization), arg0)
}

// PutAggregationAuthorizationRequest mocks base method
func (m *MockConfigServiceAPI) PutAggregationAuthorizationRequest(arg0 *configservice.PutAggregationAuthorizationInput) (*request.Request, *configservice.PutAggregationAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAggregationAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.PutAggregationAuthorizationOutput)
	return ret0, ret1
}

// PutAggregationAuthorizationRequest indicates an expected call of PutAggregationAuthorizationRequest
func (mr *MockConfigServiceAPIMockRecorder) PutAggregationAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAggregationAuthorizationRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutAggregationAuthorizationRequest), arg0)
}

// PutAggregationAuthorizationWithContext mocks base method
func (m *MockConfigServiceAPI) PutAggregationAuthorizationWithContext(arg0 aws.Context, arg1 *configservice.PutAggregationAuthorizationInput, arg2 ...request.Option) (*configservice.PutAggregationAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAggregationAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.PutAggregationAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAggregationAuthorizationWithContext indicates an expected call of PutAggregationAuthorizationWithContext
func (mr *MockConfigServiceAPIMockRecorder) PutAggregationAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAggregationAuthorizationWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutAggregationAuthorizationWithContext), varargs...)
}

// PutConfigRule mocks base method
func (m *MockConfigServiceAPI) PutConfigRule(arg0 *configservice.PutConfigRuleInput) (*configservice.PutConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigRule", arg0)
	ret0, _ := ret[0].(*configservice.PutConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigRule indicates an expected call of PutConfigRule
func (mr *MockConfigServiceAPIMockRecorder) PutConfigRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigRule", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutConfigRule), arg0)
}

// PutConfigRuleRequest mocks base method
func (m *MockConfigServiceAPI) PutConfigRuleRequest(arg0 *configservice.PutConfigRuleInput) (*request.Request, *configservice.PutConfigRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.PutConfigRuleOutput)
	return ret0, ret1
}

// PutConfigRuleRequest indicates an expected call of PutConfigRuleRequest
func (mr *MockConfigServiceAPIMockRecorder) PutConfigRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigRuleRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutConfigRuleRequest), arg0)
}

// PutConfigRuleWithContext mocks base method
func (m *MockConfigServiceAPI) PutConfigRuleWithContext(arg0 aws.Context, arg1 *configservice.PutConfigRuleInput, arg2 ...request.Option) (*configservice.PutConfigRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigRuleWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.PutConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigRuleWithContext indicates an expected call of PutConfigRuleWithContext
func (mr *MockConfigServiceAPIMockRecorder) PutConfigRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigRuleWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutConfigRuleWithContext), varargs...)
}

// PutConfigurationAggregator mocks base method
func (m *MockConfigServiceAPI) PutConfigurationAggregator(arg0 *configservice.PutConfigurationAggregatorInput) (*configservice.PutConfigurationAggregatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationAggregator", arg0)
	ret0, _ := ret[0].(*configservice.PutConfigurationAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationAggregator indicates an expected call of PutConfigurationAggregator
func (mr *MockConfigServiceAPIMockRecorder) PutConfigurationAggregator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationAggregator", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutConfigurationAggregator), arg0)
}

// PutConfigurationAggregatorRequest mocks base method
func (m *MockConfigServiceAPI) PutConfigurationAggregatorRequest(arg0 *configservice.PutConfigurationAggregatorInput) (*request.Request, *configservice.PutConfigurationAggregatorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationAggregatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.PutConfigurationAggregatorOutput)
	return ret0, ret1
}

// PutConfigurationAggregatorRequest indicates an expected call of PutConfigurationAggregatorRequest
func (mr *MockConfigServiceAPIMockRecorder) PutConfigurationAggregatorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationAggregatorRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutConfigurationAggregatorRequest), arg0)
}

// PutConfigurationAggregatorWithContext mocks base method
func (m *MockConfigServiceAPI) PutConfigurationAggregatorWithContext(arg0 aws.Context, arg1 *configservice.PutConfigurationAggregatorInput, arg2 ...request.Option) (*configservice.PutConfigurationAggregatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationAggregatorWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.PutConfigurationAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationAggregatorWithContext indicates an expected call of PutConfigurationAggregatorWithContext
func (mr *MockConfigServiceAPIMockRecorder) PutConfigurationAggregatorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationAggregatorWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutConfigurationAggregatorWithContext), varargs...)
}

// PutConfigurationRecorder mocks base method
func (m *MockConfigServiceAPI) PutConfigurationRecorder(arg0 *configservice.PutConfigurationRecorderInput) (*configservice.PutConfigurationRecorderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationRecorder", arg0)
	ret0, _ := ret[0].(*configservice.PutConfigurationRecorderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationRecorder indicates an expected call of PutConfigurationRecorder
func (mr *MockConfigServiceAPIMockRecorder) PutConfigurationRecorder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationRecorder", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutConfigurationRecorder), arg0)
}

// PutConfigurationRecorderRequest mocks base method
func (m *MockConfigServiceAPI) PutConfigurationRecorderRequest(arg0 *configservice.PutConfigurationRecorderInput) (*request.Request, *configservice.PutConfigurationRecorderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationRecorderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.PutConfigurationRecorderOutput)
	return ret0, ret1
}

// PutConfigurationRecorderRequest indicates an expected call of PutConfigurationRecorderRequest
func (mr *MockConfigServiceAPIMockRecorder) PutConfigurationRecorderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationRecorderRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutConfigurationRecorderRequest), arg0)
}

// PutConfigurationRecorderWithContext mocks base method
func (m *MockConfigServiceAPI) PutConfigurationRecorderWithContext(arg0 aws.Context, arg1 *configservice.PutConfigurationRecorderInput, arg2 ...request.Option) (*configservice.PutConfigurationRecorderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationRecorderWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.PutConfigurationRecorderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationRecorderWithContext indicates an expected call of PutConfigurationRecorderWithContext
func (mr *MockConfigServiceAPIMockRecorder) PutConfigurationRecorderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationRecorderWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutConfigurationRecorderWithContext), varargs...)
}

// PutDeliveryChannel mocks base method
func (m *MockConfigServiceAPI) PutDeliveryChannel(arg0 *configservice.PutDeliveryChannelInput) (*configservice.PutDeliveryChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeliveryChannel", arg0)
	ret0, _ := ret[0].(*configservice.PutDeliveryChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeliveryChannel indicates an expected call of PutDeliveryChannel
func (mr *MockConfigServiceAPIMockRecorder) PutDeliveryChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliveryChannel", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutDeliveryChannel), arg0)
}

// PutDeliveryChannelRequest mocks base method
func (m *MockConfigServiceAPI) PutDeliveryChannelRequest(arg0 *configservice.PutDeliveryChannelInput) (*request.Request, *configservice.PutDeliveryChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeliveryChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.PutDeliveryChannelOutput)
	return ret0, ret1
}

// PutDeliveryChannelRequest indicates an expected call of PutDeliveryChannelRequest
func (mr *MockConfigServiceAPIMockRecorder) PutDeliveryChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliveryChannelRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutDeliveryChannelRequest), arg0)
}

// PutDeliveryChannelWithContext mocks base method
func (m *MockConfigServiceAPI) PutDeliveryChannelWithContext(arg0 aws.Context, arg1 *configservice.PutDeliveryChannelInput, arg2 ...request.Option) (*configservice.PutDeliveryChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDeliveryChannelWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.PutDeliveryChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeliveryChannelWithContext indicates an expected call of PutDeliveryChannelWithContext
func (mr *MockConfigServiceAPIMockRecorder) PutDeliveryChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliveryChannelWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutDeliveryChannelWithContext), varargs...)
}

// PutEvaluations mocks base method
func (m *MockConfigServiceAPI) PutEvaluations(arg0 *configservice.PutEvaluationsInput) (*configservice.PutEvaluationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEvaluations", arg0)
	ret0, _ := ret[0].(*configservice.PutEvaluationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvaluations indicates an expected call of PutEvaluations
func (mr *MockConfigServiceAPIMockRecorder) PutEvaluations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvaluations", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutEvaluations), arg0)
}

// PutEvaluationsRequest mocks base method
func (m *MockConfigServiceAPI) PutEvaluationsRequest(arg0 *configservice.PutEvaluationsInput) (*request.Request, *configservice.PutEvaluationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEvaluationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.PutEvaluationsOutput)
	return ret0, ret1
}

// PutEvaluationsRequest indicates an expected call of PutEvaluationsRequest
func (mr *MockConfigServiceAPIMockRecorder) PutEvaluationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvaluationsRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutEvaluationsRequest), arg0)
}

// PutEvaluationsWithContext mocks base method
func (m *MockConfigServiceAPI) PutEvaluationsWithContext(arg0 aws.Context, arg1 *configservice.PutEvaluationsInput, arg2 ...request.Option) (*configservice.PutEvaluationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEvaluationsWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.PutEvaluationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvaluationsWithContext indicates an expected call of PutEvaluationsWithContext
func (mr *MockConfigServiceAPIMockRecorder) PutEvaluationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvaluationsWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutEvaluationsWithContext), varargs...)
}

// PutRetentionConfiguration mocks base method
func (m *MockConfigServiceAPI) PutRetentionConfiguration(arg0 *configservice.PutRetentionConfigurationInput) (*configservice.PutRetentionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRetentionConfiguration", arg0)
	ret0, _ := ret[0].(*configservice.PutRetentionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRetentionConfiguration indicates an expected call of PutRetentionConfiguration
func (mr *MockConfigServiceAPIMockRecorder) PutRetentionConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRetentionConfiguration", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutRetentionConfiguration), arg0)
}

// PutRetentionConfigurationRequest mocks base method
func (m *MockConfigServiceAPI) PutRetentionConfigurationRequest(arg0 *configservice.PutRetentionConfigurationInput) (*request.Request, *configservice.PutRetentionConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRetentionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.PutRetentionConfigurationOutput)
	return ret0, ret1
}

// PutRetentionConfigurationRequest indicates an expected call of PutRetentionConfigurationRequest
func (mr *MockConfigServiceAPIMockRecorder) PutRetentionConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRetentionConfigurationRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutRetentionConfigurationRequest), arg0)
}

// PutRetentionConfigurationWithContext mocks base method
func (m *MockConfigServiceAPI) PutRetentionConfigurationWithContext(arg0 aws.Context, arg1 *configservice.PutRetentionConfigurationInput, arg2 ...request.Option) (*configservice.PutRetentionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRetentionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.PutRetentionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRetentionConfigurationWithContext indicates an expected call of PutRetentionConfigurationWithContext
func (mr *MockConfigServiceAPIMockRecorder) PutRetentionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRetentionConfigurationWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).PutRetentionConfigurationWithContext), varargs...)
}

// StartConfigRulesEvaluation mocks base method
func (m *MockConfigServiceAPI) StartConfigRulesEvaluation(arg0 *configservice.StartConfigRulesEvaluationInput) (*configservice.StartConfigRulesEvaluationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConfigRulesEvaluation", arg0)
	ret0, _ := ret[0].(*configservice.StartConfigRulesEvaluationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartConfigRulesEvaluation indicates an expected call of StartConfigRulesEvaluation
func (mr *MockConfigServiceAPIMockRecorder) StartConfigRulesEvaluation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConfigRulesEvaluation", reflect.TypeOf((*MockConfigServiceAPI)(nil).StartConfigRulesEvaluation), arg0)
}

// StartConfigRulesEvaluationRequest mocks base method
func (m *MockConfigServiceAPI) StartConfigRulesEvaluationRequest(arg0 *configservice.StartConfigRulesEvaluationInput) (*request.Request, *configservice.StartConfigRulesEvaluationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConfigRulesEvaluationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.StartConfigRulesEvaluationOutput)
	return ret0, ret1
}

// StartConfigRulesEvaluationRequest indicates an expected call of StartConfigRulesEvaluationRequest
func (mr *MockConfigServiceAPIMockRecorder) StartConfigRulesEvaluationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConfigRulesEvaluationRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).StartConfigRulesEvaluationRequest), arg0)
}

// StartConfigRulesEvaluationWithContext mocks base method
func (m *MockConfigServiceAPI) StartConfigRulesEvaluationWithContext(arg0 aws.Context, arg1 *configservice.StartConfigRulesEvaluationInput, arg2 ...request.Option) (*configservice.StartConfigRulesEvaluationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartConfigRulesEvaluationWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.StartConfigRulesEvaluationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartConfigRulesEvaluationWithContext indicates an expected call of StartConfigRulesEvaluationWithContext
func (mr *MockConfigServiceAPIMockRecorder) StartConfigRulesEvaluationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConfigRulesEvaluationWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).StartConfigRulesEvaluationWithContext), varargs...)
}

// StartConfigurationRecorder mocks base method
func (m *MockConfigServiceAPI) StartConfigurationRecorder(arg0 *configservice.StartConfigurationRecorderInput) (*configservice.StartConfigurationRecorderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConfigurationRecorder", arg0)
	ret0, _ := ret[0].(*configservice.StartConfigurationRecorderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartConfigurationRecorder indicates an expected call of StartConfigurationRecorder
func (mr *MockConfigServiceAPIMockRecorder) StartConfigurationRecorder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConfigurationRecorder", reflect.TypeOf((*MockConfigServiceAPI)(nil).StartConfigurationRecorder), arg0)
}

// StartConfigurationRecorderRequest mocks base method
func (m *MockConfigServiceAPI) StartConfigurationRecorderRequest(arg0 *configservice.StartConfigurationRecorderInput) (*request.Request, *configservice.StartConfigurationRecorderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConfigurationRecorderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.StartConfigurationRecorderOutput)
	return ret0, ret1
}

// StartConfigurationRecorderRequest indicates an expected call of StartConfigurationRecorderRequest
func (mr *MockConfigServiceAPIMockRecorder) StartConfigurationRecorderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConfigurationRecorderRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).StartConfigurationRecorderRequest), arg0)
}

// StartConfigurationRecorderWithContext mocks base method
func (m *MockConfigServiceAPI) StartConfigurationRecorderWithContext(arg0 aws.Context, arg1 *configservice.StartConfigurationRecorderInput, arg2 ...request.Option) (*configservice.StartConfigurationRecorderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartConfigurationRecorderWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.StartConfigurationRecorderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartConfigurationRecorderWithContext indicates an expected call of StartConfigurationRecorderWithContext
func (mr *MockConfigServiceAPIMockRecorder) StartConfigurationRecorderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConfigurationRecorderWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).StartConfigurationRecorderWithContext), varargs...)
}

// StopConfigurationRecorder mocks base method
func (m *MockConfigServiceAPI) StopConfigurationRecorder(arg0 *configservice.StopConfigurationRecorderInput) (*configservice.StopConfigurationRecorderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopConfigurationRecorder", arg0)
	ret0, _ := ret[0].(*configservice.StopConfigurationRecorderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopConfigurationRecorder indicates an expected call of StopConfigurationRecorder
func (mr *MockConfigServiceAPIMockRecorder) StopConfigurationRecorder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopConfigurationRecorder", reflect.TypeOf((*MockConfigServiceAPI)(nil).StopConfigurationRecorder), arg0)
}

// StopConfigurationRecorderRequest mocks base method
func (m *MockConfigServiceAPI) StopConfigurationRecorderRequest(arg0 *configservice.StopConfigurationRecorderInput) (*request.Request, *configservice.StopConfigurationRecorderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopConfigurationRecorderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*configservice.StopConfigurationRecorderOutput)
	return ret0, ret1
}

// StopConfigurationRecorderRequest indicates an expected call of StopConfigurationRecorderRequest
func (mr *MockConfigServiceAPIMockRecorder) StopConfigurationRecorderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopConfigurationRecorderRequest", reflect.TypeOf((*MockConfigServiceAPI)(nil).StopConfigurationRecorderRequest), arg0)
}

// StopConfigurationRecorderWithContext mocks base method
func (m *MockConfigServiceAPI) StopConfigurationRecorderWithContext(arg0 aws.Context, arg1 *configservice.StopConfigurationRecorderInput, arg2 ...request.Option) (*configservice.StopConfigurationRecorderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopConfigurationRecorderWithContext", varargs...)
	ret0, _ := ret[0].(*configservice.StopConfigurationRecorderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopConfigurationRecorderWithContext indicates an expected call of StopConfigurationRecorderWithContext
func (mr *MockConfigServiceAPIMockRecorder) StopConfigurationRecorderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopConfigurationRecorderWithContext", reflect.TypeOf((*MockConfigServiceAPI)(nil).StopConfigurationRecorderWithContext), varargs...)
}
