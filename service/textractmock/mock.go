// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/textract/textractiface (interfaces: TextractAPI)

// Package textractmock is a generated GoMock package.
package textractmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	textract "github.com/aws/aws-sdk-go/service/textract"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTextractAPI is a mock of TextractAPI interface
type MockTextractAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTextractAPIMockRecorder
}

// MockTextractAPIMockRecorder is the mock recorder for MockTextractAPI
type MockTextractAPIMockRecorder struct {
	mock *MockTextractAPI
}

// NewMockTextractAPI creates a new mock instance
func NewMockTextractAPI(ctrl *gomock.Controller) *MockTextractAPI {
	mock := &MockTextractAPI{ctrl: ctrl}
	mock.recorder = &MockTextractAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTextractAPI) EXPECT() *MockTextractAPIMockRecorder {
	return m.recorder
}

// AnalyzeDocument mocks base method
func (m *MockTextractAPI) AnalyzeDocument(arg0 *textract.AnalyzeDocumentInput) (*textract.AnalyzeDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeDocument", arg0)
	ret0, _ := ret[0].(*textract.AnalyzeDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeDocument indicates an expected call of AnalyzeDocument
func (mr *MockTextractAPIMockRecorder) AnalyzeDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeDocument", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeDocument), arg0)
}

// AnalyzeDocumentRequest mocks base method
func (m *MockTextractAPI) AnalyzeDocumentRequest(arg0 *textract.AnalyzeDocumentInput) (*request.Request, *textract.AnalyzeDocumentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeDocumentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.AnalyzeDocumentOutput)
	return ret0, ret1
}

// AnalyzeDocumentRequest indicates an expected call of AnalyzeDocumentRequest
func (mr *MockTextractAPIMockRecorder) AnalyzeDocumentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeDocumentRequest", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeDocumentRequest), arg0)
}

// AnalyzeDocumentWithContext mocks base method
func (m *MockTextractAPI) AnalyzeDocumentWithContext(arg0 context.Context, arg1 *textract.AnalyzeDocumentInput, arg2 ...request.Option) (*textract.AnalyzeDocumentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AnalyzeDocumentWithContext", varargs...)
	ret0, _ := ret[0].(*textract.AnalyzeDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeDocumentWithContext indicates an expected call of AnalyzeDocumentWithContext
func (mr *MockTextractAPIMockRecorder) AnalyzeDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeDocumentWithContext", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeDocumentWithContext), varargs...)
}

// AnalyzeExpense mocks base method
func (m *MockTextractAPI) AnalyzeExpense(arg0 *textract.AnalyzeExpenseInput) (*textract.AnalyzeExpenseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeExpense", arg0)
	ret0, _ := ret[0].(*textract.AnalyzeExpenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeExpense indicates an expected call of AnalyzeExpense
func (mr *MockTextractAPIMockRecorder) AnalyzeExpense(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeExpense", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeExpense), arg0)
}

// AnalyzeExpenseRequest mocks base method
func (m *MockTextractAPI) AnalyzeExpenseRequest(arg0 *textract.AnalyzeExpenseInput) (*request.Request, *textract.AnalyzeExpenseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeExpenseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.AnalyzeExpenseOutput)
	return ret0, ret1
}

// AnalyzeExpenseRequest indicates an expected call of AnalyzeExpenseRequest
func (mr *MockTextractAPIMockRecorder) AnalyzeExpenseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeExpenseRequest", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeExpenseRequest), arg0)
}

// AnalyzeExpenseWithContext mocks base method
func (m *MockTextractAPI) AnalyzeExpenseWithContext(arg0 context.Context, arg1 *textract.AnalyzeExpenseInput, arg2 ...request.Option) (*textract.AnalyzeExpenseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AnalyzeExpenseWithContext", varargs...)
	ret0, _ := ret[0].(*textract.AnalyzeExpenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeExpenseWithContext indicates an expected call of AnalyzeExpenseWithContext
func (mr *MockTextractAPIMockRecorder) AnalyzeExpenseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeExpenseWithContext", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeExpenseWithContext), varargs...)
}

// AnalyzeID mocks base method
func (m *MockTextractAPI) AnalyzeID(arg0 *textract.AnalyzeIDInput) (*textract.AnalyzeIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeID", arg0)
	ret0, _ := ret[0].(*textract.AnalyzeIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeID indicates an expected call of AnalyzeID
func (mr *MockTextractAPIMockRecorder) AnalyzeID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeID", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeID), arg0)
}

// AnalyzeIDRequest mocks base method
func (m *MockTextractAPI) AnalyzeIDRequest(arg0 *textract.AnalyzeIDInput) (*request.Request, *textract.AnalyzeIDOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeIDRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.AnalyzeIDOutput)
	return ret0, ret1
}

// AnalyzeIDRequest indicates an expected call of AnalyzeIDRequest
func (mr *MockTextractAPIMockRecorder) AnalyzeIDRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeIDRequest", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeIDRequest), arg0)
}

// AnalyzeIDWithContext mocks base method
func (m *MockTextractAPI) AnalyzeIDWithContext(arg0 context.Context, arg1 *textract.AnalyzeIDInput, arg2 ...request.Option) (*textract.AnalyzeIDOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AnalyzeIDWithContext", varargs...)
	ret0, _ := ret[0].(*textract.AnalyzeIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeIDWithContext indicates an expected call of AnalyzeIDWithContext
func (mr *MockTextractAPIMockRecorder) AnalyzeIDWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeIDWithContext", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeIDWithContext), varargs...)
}

// CreateAdapter mocks base method
func (m *MockTextractAPI) CreateAdapter(arg0 *textract.CreateAdapterInput) (*textract.CreateAdapterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdapter", arg0)
	ret0, _ := ret[0].(*textract.CreateAdapterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdapter indicates an expected call of CreateAdapter
func (mr *MockTextractAPIMockRecorder) CreateAdapter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdapter", reflect.TypeOf((*MockTextractAPI)(nil).CreateAdapter), arg0)
}

// CreateAdapterRequest mocks base method
func (m *MockTextractAPI) CreateAdapterRequest(arg0 *textract.CreateAdapterInput) (*request.Request, *textract.CreateAdapterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdapterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.CreateAdapterOutput)
	return ret0, ret1
}

// CreateAdapterRequest indicates an expected call of CreateAdapterRequest
func (mr *MockTextractAPIMockRecorder) CreateAdapterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdapterRequest", reflect.TypeOf((*MockTextractAPI)(nil).CreateAdapterRequest), arg0)
}

// CreateAdapterVersion mocks base method
func (m *MockTextractAPI) CreateAdapterVersion(arg0 *textract.CreateAdapterVersionInput) (*textract.CreateAdapterVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdapterVersion", arg0)
	ret0, _ := ret[0].(*textract.CreateAdapterVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdapterVersion indicates an expected call of CreateAdapterVersion
func (mr *MockTextractAPIMockRecorder) CreateAdapterVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdapterVersion", reflect.TypeOf((*MockTextractAPI)(nil).CreateAdapterVersion), arg0)
}

// CreateAdapterVersionRequest mocks base method
func (m *MockTextractAPI) CreateAdapterVersionRequest(arg0 *textract.CreateAdapterVersionInput) (*request.Request, *textract.CreateAdapterVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdapterVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.CreateAdapterVersionOutput)
	return ret0, ret1
}

// CreateAdapterVersionRequest indicates an expected call of CreateAdapterVersionRequest
func (mr *MockTextractAPIMockRecorder) CreateAdapterVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdapterVersionRequest", reflect.TypeOf((*MockTextractAPI)(nil).CreateAdapterVersionRequest), arg0)
}

// CreateAdapterVersionWithContext mocks base method
func (m *MockTextractAPI) CreateAdapterVersionWithContext(arg0 context.Context, arg1 *textract.CreateAdapterVersionInput, arg2 ...request.Option) (*textract.CreateAdapterVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAdapterVersionWithContext", varargs...)
	ret0, _ := ret[0].(*textract.CreateAdapterVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdapterVersionWithContext indicates an expected call of CreateAdapterVersionWithContext
func (mr *MockTextractAPIMockRecorder) CreateAdapterVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdapterVersionWithContext", reflect.TypeOf((*MockTextractAPI)(nil).CreateAdapterVersionWithContext), varargs...)
}

// CreateAdapterWithContext mocks base method
func (m *MockTextractAPI) CreateAdapterWithContext(arg0 context.Context, arg1 *textract.CreateAdapterInput, arg2 ...request.Option) (*textract.CreateAdapterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAdapterWithContext", varargs...)
	ret0, _ := ret[0].(*textract.CreateAdapterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdapterWithContext indicates an expected call of CreateAdapterWithContext
func (mr *MockTextractAPIMockRecorder) CreateAdapterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdapterWithContext", reflect.TypeOf((*MockTextractAPI)(nil).CreateAdapterWithContext), varargs...)
}

// DeleteAdapter mocks base method
func (m *MockTextractAPI) DeleteAdapter(arg0 *textract.DeleteAdapterInput) (*textract.DeleteAdapterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdapter", arg0)
	ret0, _ := ret[0].(*textract.DeleteAdapterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAdapter indicates an expected call of DeleteAdapter
func (mr *MockTextractAPIMockRecorder) DeleteAdapter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdapter", reflect.TypeOf((*MockTextractAPI)(nil).DeleteAdapter), arg0)
}

// DeleteAdapterRequest mocks base method
func (m *MockTextractAPI) DeleteAdapterRequest(arg0 *textract.DeleteAdapterInput) (*request.Request, *textract.DeleteAdapterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdapterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.DeleteAdapterOutput)
	return ret0, ret1
}

// DeleteAdapterRequest indicates an expected call of DeleteAdapterRequest
func (mr *MockTextractAPIMockRecorder) DeleteAdapterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdapterRequest", reflect.TypeOf((*MockTextractAPI)(nil).DeleteAdapterRequest), arg0)
}

// DeleteAdapterVersion mocks base method
func (m *MockTextractAPI) DeleteAdapterVersion(arg0 *textract.DeleteAdapterVersionInput) (*textract.DeleteAdapterVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdapterVersion", arg0)
	ret0, _ := ret[0].(*textract.DeleteAdapterVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAdapterVersion indicates an expected call of DeleteAdapterVersion
func (mr *MockTextractAPIMockRecorder) DeleteAdapterVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdapterVersion", reflect.TypeOf((*MockTextractAPI)(nil).DeleteAdapterVersion), arg0)
}

// DeleteAdapterVersionRequest mocks base method
func (m *MockTextractAPI) DeleteAdapterVersionRequest(arg0 *textract.DeleteAdapterVersionInput) (*request.Request, *textract.DeleteAdapterVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdapterVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.DeleteAdapterVersionOutput)
	return ret0, ret1
}

// DeleteAdapterVersionRequest indicates an expected call of DeleteAdapterVersionRequest
func (mr *MockTextractAPIMockRecorder) DeleteAdapterVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdapterVersionRequest", reflect.TypeOf((*MockTextractAPI)(nil).DeleteAdapterVersionRequest), arg0)
}

// DeleteAdapterVersionWithContext mocks base method
func (m *MockTextractAPI) DeleteAdapterVersionWithContext(arg0 context.Context, arg1 *textract.DeleteAdapterVersionInput, arg2 ...request.Option) (*textract.DeleteAdapterVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAdapterVersionWithContext", varargs...)
	ret0, _ := ret[0].(*textract.DeleteAdapterVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAdapterVersionWithContext indicates an expected call of DeleteAdapterVersionWithContext
func (mr *MockTextractAPIMockRecorder) DeleteAdapterVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdapterVersionWithContext", reflect.TypeOf((*MockTextractAPI)(nil).DeleteAdapterVersionWithContext), varargs...)
}

// DeleteAdapterWithContext mocks base method
func (m *MockTextractAPI) DeleteAdapterWithContext(arg0 context.Context, arg1 *textract.DeleteAdapterInput, arg2 ...request.Option) (*textract.DeleteAdapterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAdapterWithContext", varargs...)
	ret0, _ := ret[0].(*textract.DeleteAdapterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAdapterWithContext indicates an expected call of DeleteAdapterWithContext
func (mr *MockTextractAPIMockRecorder) DeleteAdapterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdapterWithContext", reflect.TypeOf((*MockTextractAPI)(nil).DeleteAdapterWithContext), varargs...)
}

// DetectDocumentText mocks base method
func (m *MockTextractAPI) DetectDocumentText(arg0 *textract.DetectDocumentTextInput) (*textract.DetectDocumentTextOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectDocumentText", arg0)
	ret0, _ := ret[0].(*textract.DetectDocumentTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectDocumentText indicates an expected call of DetectDocumentText
func (mr *MockTextractAPIMockRecorder) DetectDocumentText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDocumentText", reflect.TypeOf((*MockTextractAPI)(nil).DetectDocumentText), arg0)
}

// DetectDocumentTextRequest mocks base method
func (m *MockTextractAPI) DetectDocumentTextRequest(arg0 *textract.DetectDocumentTextInput) (*request.Request, *textract.DetectDocumentTextOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectDocumentTextRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.DetectDocumentTextOutput)
	return ret0, ret1
}

// DetectDocumentTextRequest indicates an expected call of DetectDocumentTextRequest
func (mr *MockTextractAPIMockRecorder) DetectDocumentTextRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDocumentTextRequest", reflect.TypeOf((*MockTextractAPI)(nil).DetectDocumentTextRequest), arg0)
}

// DetectDocumentTextWithContext mocks base method
func (m *MockTextractAPI) DetectDocumentTextWithContext(arg0 context.Context, arg1 *textract.DetectDocumentTextInput, arg2 ...request.Option) (*textract.DetectDocumentTextOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectDocumentTextWithContext", varargs...)
	ret0, _ := ret[0].(*textract.DetectDocumentTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectDocumentTextWithContext indicates an expected call of DetectDocumentTextWithContext
func (mr *MockTextractAPIMockRecorder) DetectDocumentTextWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDocumentTextWithContext", reflect.TypeOf((*MockTextractAPI)(nil).DetectDocumentTextWithContext), varargs...)
}

// GetAdapter mocks base method
func (m *MockTextractAPI) GetAdapter(arg0 *textract.GetAdapterInput) (*textract.GetAdapterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapter", arg0)
	ret0, _ := ret[0].(*textract.GetAdapterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdapter indicates an expected call of GetAdapter
func (mr *MockTextractAPIMockRecorder) GetAdapter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapter", reflect.TypeOf((*MockTextractAPI)(nil).GetAdapter), arg0)
}

// GetAdapterRequest mocks base method
func (m *MockTextractAPI) GetAdapterRequest(arg0 *textract.GetAdapterInput) (*request.Request, *textract.GetAdapterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetAdapterOutput)
	return ret0, ret1
}

// GetAdapterRequest indicates an expected call of GetAdapterRequest
func (mr *MockTextractAPIMockRecorder) GetAdapterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapterRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetAdapterRequest), arg0)
}

// GetAdapterVersion mocks base method
func (m *MockTextractAPI) GetAdapterVersion(arg0 *textract.GetAdapterVersionInput) (*textract.GetAdapterVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapterVersion", arg0)
	ret0, _ := ret[0].(*textract.GetAdapterVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdapterVersion indicates an expected call of GetAdapterVersion
func (mr *MockTextractAPIMockRecorder) GetAdapterVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapterVersion", reflect.TypeOf((*MockTextractAPI)(nil).GetAdapterVersion), arg0)
}

// GetAdapterVersionRequest mocks base method
func (m *MockTextractAPI) GetAdapterVersionRequest(arg0 *textract.GetAdapterVersionInput) (*request.Request, *textract.GetAdapterVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapterVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetAdapterVersionOutput)
	return ret0, ret1
}

// GetAdapterVersionRequest indicates an expected call of GetAdapterVersionRequest
func (mr *MockTextractAPIMockRecorder) GetAdapterVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapterVersionRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetAdapterVersionRequest), arg0)
}

// GetAdapterVersionWithContext mocks base method
func (m *MockTextractAPI) GetAdapterVersionWithContext(arg0 context.Context, arg1 *textract.GetAdapterVersionInput, arg2 ...request.Option) (*textract.GetAdapterVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAdapterVersionWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetAdapterVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdapterVersionWithContext indicates an expected call of GetAdapterVersionWithContext
func (mr *MockTextractAPIMockRecorder) GetAdapterVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapterVersionWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetAdapterVersionWithContext), varargs...)
}

// GetAdapterWithContext mocks base method
func (m *MockTextractAPI) GetAdapterWithContext(arg0 context.Context, arg1 *textract.GetAdapterInput, arg2 ...request.Option) (*textract.GetAdapterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAdapterWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetAdapterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdapterWithContext indicates an expected call of GetAdapterWithContext
func (mr *MockTextractAPIMockRecorder) GetAdapterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapterWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetAdapterWithContext), varargs...)
}

// GetDocumentAnalysis mocks base method
func (m *MockTextractAPI) GetDocumentAnalysis(arg0 *textract.GetDocumentAnalysisInput) (*textract.GetDocumentAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentAnalysis", arg0)
	ret0, _ := ret[0].(*textract.GetDocumentAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentAnalysis indicates an expected call of GetDocumentAnalysis
func (mr *MockTextractAPIMockRecorder) GetDocumentAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentAnalysis), arg0)
}

// GetDocumentAnalysisRequest mocks base method
func (m *MockTextractAPI) GetDocumentAnalysisRequest(arg0 *textract.GetDocumentAnalysisInput) (*request.Request, *textract.GetDocumentAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetDocumentAnalysisOutput)
	return ret0, ret1
}

// GetDocumentAnalysisRequest indicates an expected call of GetDocumentAnalysisRequest
func (mr *MockTextractAPIMockRecorder) GetDocumentAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentAnalysisRequest), arg0)
}

// GetDocumentAnalysisWithContext mocks base method
func (m *MockTextractAPI) GetDocumentAnalysisWithContext(arg0 context.Context, arg1 *textract.GetDocumentAnalysisInput, arg2 ...request.Option) (*textract.GetDocumentAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetDocumentAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentAnalysisWithContext indicates an expected call of GetDocumentAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) GetDocumentAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentAnalysisWithContext), varargs...)
}

// GetDocumentTextDetection mocks base method
func (m *MockTextractAPI) GetDocumentTextDetection(arg0 *textract.GetDocumentTextDetectionInput) (*textract.GetDocumentTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentTextDetection", arg0)
	ret0, _ := ret[0].(*textract.GetDocumentTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentTextDetection indicates an expected call of GetDocumentTextDetection
func (mr *MockTextractAPIMockRecorder) GetDocumentTextDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTextDetection", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentTextDetection), arg0)
}

// GetDocumentTextDetectionRequest mocks base method
func (m *MockTextractAPI) GetDocumentTextDetectionRequest(arg0 *textract.GetDocumentTextDetectionInput) (*request.Request, *textract.GetDocumentTextDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentTextDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetDocumentTextDetectionOutput)
	return ret0, ret1
}

// GetDocumentTextDetectionRequest indicates an expected call of GetDocumentTextDetectionRequest
func (mr *MockTextractAPIMockRecorder) GetDocumentTextDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTextDetectionRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentTextDetectionRequest), arg0)
}

// GetDocumentTextDetectionWithContext mocks base method
func (m *MockTextractAPI) GetDocumentTextDetectionWithContext(arg0 context.Context, arg1 *textract.GetDocumentTextDetectionInput, arg2 ...request.Option) (*textract.GetDocumentTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentTextDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetDocumentTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentTextDetectionWithContext indicates an expected call of GetDocumentTextDetectionWithContext
func (mr *MockTextractAPIMockRecorder) GetDocumentTextDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTextDetectionWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentTextDetectionWithContext), varargs...)
}

// GetExpenseAnalysis mocks base method
func (m *MockTextractAPI) GetExpenseAnalysis(arg0 *textract.GetExpenseAnalysisInput) (*textract.GetExpenseAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenseAnalysis", arg0)
	ret0, _ := ret[0].(*textract.GetExpenseAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenseAnalysis indicates an expected call of GetExpenseAnalysis
func (mr *MockTextractAPIMockRecorder) GetExpenseAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).GetExpenseAnalysis), arg0)
}

// GetExpenseAnalysisRequest mocks base method
func (m *MockTextractAPI) GetExpenseAnalysisRequest(arg0 *textract.GetExpenseAnalysisInput) (*request.Request, *textract.GetExpenseAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenseAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetExpenseAnalysisOutput)
	return ret0, ret1
}

// GetExpenseAnalysisRequest indicates an expected call of GetExpenseAnalysisRequest
func (mr *MockTextractAPIMockRecorder) GetExpenseAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetExpenseAnalysisRequest), arg0)
}

// GetExpenseAnalysisWithContext mocks base method
func (m *MockTextractAPI) GetExpenseAnalysisWithContext(arg0 context.Context, arg1 *textract.GetExpenseAnalysisInput, arg2 ...request.Option) (*textract.GetExpenseAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExpenseAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetExpenseAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenseAnalysisWithContext indicates an expected call of GetExpenseAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) GetExpenseAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetExpenseAnalysisWithContext), varargs...)
}

// GetLendingAnalysis mocks base method
func (m *MockTextractAPI) GetLendingAnalysis(arg0 *textract.GetLendingAnalysisInput) (*textract.GetLendingAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLendingAnalysis", arg0)
	ret0, _ := ret[0].(*textract.GetLendingAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLendingAnalysis indicates an expected call of GetLendingAnalysis
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysis), arg0)
}

// GetLendingAnalysisRequest mocks base method
func (m *MockTextractAPI) GetLendingAnalysisRequest(arg0 *textract.GetLendingAnalysisInput) (*request.Request, *textract.GetLendingAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLendingAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetLendingAnalysisOutput)
	return ret0, ret1
}

// GetLendingAnalysisRequest indicates an expected call of GetLendingAnalysisRequest
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysisRequest), arg0)
}

// GetLendingAnalysisSummary mocks base method
func (m *MockTextractAPI) GetLendingAnalysisSummary(arg0 *textract.GetLendingAnalysisSummaryInput) (*textract.GetLendingAnalysisSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLendingAnalysisSummary", arg0)
	ret0, _ := ret[0].(*textract.GetLendingAnalysisSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLendingAnalysisSummary indicates an expected call of GetLendingAnalysisSummary
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysisSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysisSummary", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysisSummary), arg0)
}

// GetLendingAnalysisSummaryRequest mocks base method
func (m *MockTextractAPI) GetLendingAnalysisSummaryRequest(arg0 *textract.GetLendingAnalysisSummaryInput) (*request.Request, *textract.GetLendingAnalysisSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLendingAnalysisSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetLendingAnalysisSummaryOutput)
	return ret0, ret1
}

// GetLendingAnalysisSummaryRequest indicates an expected call of GetLendingAnalysisSummaryRequest
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysisSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysisSummaryRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysisSummaryRequest), arg0)
}

// GetLendingAnalysisSummaryWithContext mocks base method
func (m *MockTextractAPI) GetLendingAnalysisSummaryWithContext(arg0 context.Context, arg1 *textract.GetLendingAnalysisSummaryInput, arg2 ...request.Option) (*textract.GetLendingAnalysisSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLendingAnalysisSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetLendingAnalysisSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLendingAnalysisSummaryWithContext indicates an expected call of GetLendingAnalysisSummaryWithContext
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysisSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysisSummaryWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysisSummaryWithContext), varargs...)
}

// GetLendingAnalysisWithContext mocks base method
func (m *MockTextractAPI) GetLendingAnalysisWithContext(arg0 context.Context, arg1 *textract.GetLendingAnalysisInput, arg2 ...request.Option) (*textract.GetLendingAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLendingAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetLendingAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLendingAnalysisWithContext indicates an expected call of GetLendingAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysisWithContext), varargs...)
}

// ListAdapterVersions mocks base method
func (m *MockTextractAPI) ListAdapterVersions(arg0 *textract.ListAdapterVersionsInput) (*textract.ListAdapterVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdapterVersions", arg0)
	ret0, _ := ret[0].(*textract.ListAdapterVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdapterVersions indicates an expected call of ListAdapterVersions
func (mr *MockTextractAPIMockRecorder) ListAdapterVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdapterVersions", reflect.TypeOf((*MockTextractAPI)(nil).ListAdapterVersions), arg0)
}

// ListAdapterVersionsPages mocks base method
func (m *MockTextractAPI) ListAdapterVersionsPages(arg0 *textract.ListAdapterVersionsInput, arg1 func(*textract.ListAdapterVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdapterVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAdapterVersionsPages indicates an expected call of ListAdapterVersionsPages
func (mr *MockTextractAPIMockRecorder) ListAdapterVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdapterVersionsPages", reflect.TypeOf((*MockTextractAPI)(nil).ListAdapterVersionsPages), arg0, arg1)
}

// ListAdapterVersionsPagesWithContext mocks base method
func (m *MockTextractAPI) ListAdapterVersionsPagesWithContext(arg0 context.Context, arg1 *textract.ListAdapterVersionsInput, arg2 func(*textract.ListAdapterVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAdapterVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAdapterVersionsPagesWithContext indicates an expected call of ListAdapterVersionsPagesWithContext
func (mr *MockTextractAPIMockRecorder) ListAdapterVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdapterVersionsPagesWithContext", reflect.TypeOf((*MockTextractAPI)(nil).ListAdapterVersionsPagesWithContext), varargs...)
}

// ListAdapterVersionsRequest mocks base method
func (m *MockTextractAPI) ListAdapterVersionsRequest(arg0 *textract.ListAdapterVersionsInput) (*request.Request, *textract.ListAdapterVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdapterVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.ListAdapterVersionsOutput)
	return ret0, ret1
}

// ListAdapterVersionsRequest indicates an expected call of ListAdapterVersionsRequest
func (mr *MockTextractAPIMockRecorder) ListAdapterVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdapterVersionsRequest", reflect.TypeOf((*MockTextractAPI)(nil).ListAdapterVersionsRequest), arg0)
}

// ListAdapterVersionsWithContext mocks base method
func (m *MockTextractAPI) ListAdapterVersionsWithContext(arg0 context.Context, arg1 *textract.ListAdapterVersionsInput, arg2 ...request.Option) (*textract.ListAdapterVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAdapterVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*textract.ListAdapterVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdapterVersionsWithContext indicates an expected call of ListAdapterVersionsWithContext
func (mr *MockTextractAPIMockRecorder) ListAdapterVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdapterVersionsWithContext", reflect.TypeOf((*MockTextractAPI)(nil).ListAdapterVersionsWithContext), varargs...)
}

// ListAdapters mocks base method
func (m *MockTextractAPI) ListAdapters(arg0 *textract.ListAdaptersInput) (*textract.ListAdaptersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdapters", arg0)
	ret0, _ := ret[0].(*textract.ListAdaptersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdapters indicates an expected call of ListAdapters
func (mr *MockTextractAPIMockRecorder) ListAdapters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdapters", reflect.TypeOf((*MockTextractAPI)(nil).ListAdapters), arg0)
}

// ListAdaptersPages mocks base method
func (m *MockTextractAPI) ListAdaptersPages(arg0 *textract.ListAdaptersInput, arg1 func(*textract.ListAdaptersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdaptersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAdaptersPages indicates an expected call of ListAdaptersPages
func (mr *MockTextractAPIMockRecorder) ListAdaptersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdaptersPages", reflect.TypeOf((*MockTextractAPI)(nil).ListAdaptersPages), arg0, arg1)
}

// ListAdaptersPagesWithContext mocks base method
func (m *MockTextractAPI) ListAdaptersPagesWithContext(arg0 context.Context, arg1 *textract.ListAdaptersInput, arg2 func(*textract.ListAdaptersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAdaptersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAdaptersPagesWithContext indicates an expected call of ListAdaptersPagesWithContext
func (mr *MockTextractAPIMockRecorder) ListAdaptersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdaptersPagesWithContext", reflect.TypeOf((*MockTextractAPI)(nil).ListAdaptersPagesWithContext), varargs...)
}

// ListAdaptersRequest mocks base method
func (m *MockTextractAPI) ListAdaptersRequest(arg0 *textract.ListAdaptersInput) (*request.Request, *textract.ListAdaptersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdaptersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.ListAdaptersOutput)
	return ret0, ret1
}

// ListAdaptersRequest indicates an expected call of ListAdaptersRequest
func (mr *MockTextractAPIMockRecorder) ListAdaptersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdaptersRequest", reflect.TypeOf((*MockTextractAPI)(nil).ListAdaptersRequest), arg0)
}

// ListAdaptersWithContext mocks base method
func (m *MockTextractAPI) ListAdaptersWithContext(arg0 context.Context, arg1 *textract.ListAdaptersInput, arg2 ...request.Option) (*textract.ListAdaptersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAdaptersWithContext", varargs...)
	ret0, _ := ret[0].(*textract.ListAdaptersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdaptersWithContext indicates an expected call of ListAdaptersWithContext
func (mr *MockTextractAPIMockRecorder) ListAdaptersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdaptersWithContext", reflect.TypeOf((*MockTextractAPI)(nil).ListAdaptersWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockTextractAPI) ListTagsForResource(arg0 *textract.ListTagsForResourceInput) (*textract.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*textract.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockTextractAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockTextractAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockTextractAPI) ListTagsForResourceRequest(arg0 *textract.ListTagsForResourceInput) (*request.Request, *textract.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockTextractAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockTextractAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockTextractAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *textract.ListTagsForResourceInput, arg2 ...request.Option) (*textract.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*textract.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockTextractAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockTextractAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartDocumentAnalysis mocks base method
func (m *MockTextractAPI) StartDocumentAnalysis(arg0 *textract.StartDocumentAnalysisInput) (*textract.StartDocumentAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDocumentAnalysis", arg0)
	ret0, _ := ret[0].(*textract.StartDocumentAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDocumentAnalysis indicates an expected call of StartDocumentAnalysis
func (mr *MockTextractAPIMockRecorder) StartDocumentAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentAnalysis), arg0)
}

// StartDocumentAnalysisRequest mocks base method
func (m *MockTextractAPI) StartDocumentAnalysisRequest(arg0 *textract.StartDocumentAnalysisInput) (*request.Request, *textract.StartDocumentAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDocumentAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.StartDocumentAnalysisOutput)
	return ret0, ret1
}

// StartDocumentAnalysisRequest indicates an expected call of StartDocumentAnalysisRequest
func (mr *MockTextractAPIMockRecorder) StartDocumentAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentAnalysisRequest), arg0)
}

// StartDocumentAnalysisWithContext mocks base method
func (m *MockTextractAPI) StartDocumentAnalysisWithContext(arg0 context.Context, arg1 *textract.StartDocumentAnalysisInput, arg2 ...request.Option) (*textract.StartDocumentAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDocumentAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.StartDocumentAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDocumentAnalysisWithContext indicates an expected call of StartDocumentAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) StartDocumentAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentAnalysisWithContext), varargs...)
}

// StartDocumentTextDetection mocks base method
func (m *MockTextractAPI) StartDocumentTextDetection(arg0 *textract.StartDocumentTextDetectionInput) (*textract.StartDocumentTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDocumentTextDetection", arg0)
	ret0, _ := ret[0].(*textract.StartDocumentTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDocumentTextDetection indicates an expected call of StartDocumentTextDetection
func (mr *MockTextractAPIMockRecorder) StartDocumentTextDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentTextDetection", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentTextDetection), arg0)
}

// StartDocumentTextDetectionRequest mocks base method
func (m *MockTextractAPI) StartDocumentTextDetectionRequest(arg0 *textract.StartDocumentTextDetectionInput) (*request.Request, *textract.StartDocumentTextDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDocumentTextDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.StartDocumentTextDetectionOutput)
	return ret0, ret1
}

// StartDocumentTextDetectionRequest indicates an expected call of StartDocumentTextDetectionRequest
func (mr *MockTextractAPIMockRecorder) StartDocumentTextDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentTextDetectionRequest", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentTextDetectionRequest), arg0)
}

// StartDocumentTextDetectionWithContext mocks base method
func (m *MockTextractAPI) StartDocumentTextDetectionWithContext(arg0 context.Context, arg1 *textract.StartDocumentTextDetectionInput, arg2 ...request.Option) (*textract.StartDocumentTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDocumentTextDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*textract.StartDocumentTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDocumentTextDetectionWithContext indicates an expected call of StartDocumentTextDetectionWithContext
func (mr *MockTextractAPIMockRecorder) StartDocumentTextDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentTextDetectionWithContext", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentTextDetectionWithContext), varargs...)
}

// StartExpenseAnalysis mocks base method
func (m *MockTextractAPI) StartExpenseAnalysis(arg0 *textract.StartExpenseAnalysisInput) (*textract.StartExpenseAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExpenseAnalysis", arg0)
	ret0, _ := ret[0].(*textract.StartExpenseAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExpenseAnalysis indicates an expected call of StartExpenseAnalysis
func (mr *MockTextractAPIMockRecorder) StartExpenseAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExpenseAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).StartExpenseAnalysis), arg0)
}

// StartExpenseAnalysisRequest mocks base method
func (m *MockTextractAPI) StartExpenseAnalysisRequest(arg0 *textract.StartExpenseAnalysisInput) (*request.Request, *textract.StartExpenseAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExpenseAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.StartExpenseAnalysisOutput)
	return ret0, ret1
}

// StartExpenseAnalysisRequest indicates an expected call of StartExpenseAnalysisRequest
func (mr *MockTextractAPIMockRecorder) StartExpenseAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExpenseAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).StartExpenseAnalysisRequest), arg0)
}

// StartExpenseAnalysisWithContext mocks base method
func (m *MockTextractAPI) StartExpenseAnalysisWithContext(arg0 context.Context, arg1 *textract.StartExpenseAnalysisInput, arg2 ...request.Option) (*textract.StartExpenseAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartExpenseAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.StartExpenseAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExpenseAnalysisWithContext indicates an expected call of StartExpenseAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) StartExpenseAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExpenseAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).StartExpenseAnalysisWithContext), varargs...)
}

// StartLendingAnalysis mocks base method
func (m *MockTextractAPI) StartLendingAnalysis(arg0 *textract.StartLendingAnalysisInput) (*textract.StartLendingAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLendingAnalysis", arg0)
	ret0, _ := ret[0].(*textract.StartLendingAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLendingAnalysis indicates an expected call of StartLendingAnalysis
func (mr *MockTextractAPIMockRecorder) StartLendingAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLendingAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).StartLendingAnalysis), arg0)
}

// StartLendingAnalysisRequest mocks base method
func (m *MockTextractAPI) StartLendingAnalysisRequest(arg0 *textract.StartLendingAnalysisInput) (*request.Request, *textract.StartLendingAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLendingAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.StartLendingAnalysisOutput)
	return ret0, ret1
}

// StartLendingAnalysisRequest indicates an expected call of StartLendingAnalysisRequest
func (mr *MockTextractAPIMockRecorder) StartLendingAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLendingAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).StartLendingAnalysisRequest), arg0)
}

// StartLendingAnalysisWithContext mocks base method
func (m *MockTextractAPI) StartLendingAnalysisWithContext(arg0 context.Context, arg1 *textract.StartLendingAnalysisInput, arg2 ...request.Option) (*textract.StartLendingAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartLendingAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.StartLendingAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLendingAnalysisWithContext indicates an expected call of StartLendingAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) StartLendingAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLendingAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).StartLendingAnalysisWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockTextractAPI) TagResource(arg0 *textract.TagResourceInput) (*textract.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*textract.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockTextractAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockTextractAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockTextractAPI) TagResourceRequest(arg0 *textract.TagResourceInput) (*request.Request, *textract.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockTextractAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockTextractAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockTextractAPI) TagResourceWithContext(arg0 context.Context, arg1 *textract.TagResourceInput, arg2 ...request.Option) (*textract.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*textract.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockTextractAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockTextractAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockTextractAPI) UntagResource(arg0 *textract.UntagResourceInput) (*textract.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*textract.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockTextractAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockTextractAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockTextractAPI) UntagResourceRequest(arg0 *textract.UntagResourceInput) (*request.Request, *textract.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockTextractAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockTextractAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockTextractAPI) UntagResourceWithContext(arg0 context.Context, arg1 *textract.UntagResourceInput, arg2 ...request.Option) (*textract.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*textract.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockTextractAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockTextractAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAdapter mocks base method
func (m *MockTextractAPI) UpdateAdapter(arg0 *textract.UpdateAdapterInput) (*textract.UpdateAdapterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdapter", arg0)
	ret0, _ := ret[0].(*textract.UpdateAdapterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdapter indicates an expected call of UpdateAdapter
func (mr *MockTextractAPIMockRecorder) UpdateAdapter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdapter", reflect.TypeOf((*MockTextractAPI)(nil).UpdateAdapter), arg0)
}

// UpdateAdapterRequest mocks base method
func (m *MockTextractAPI) UpdateAdapterRequest(arg0 *textract.UpdateAdapterInput) (*request.Request, *textract.UpdateAdapterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdapterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.UpdateAdapterOutput)
	return ret0, ret1
}

// UpdateAdapterRequest indicates an expected call of UpdateAdapterRequest
func (mr *MockTextractAPIMockRecorder) UpdateAdapterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdapterRequest", reflect.TypeOf((*MockTextractAPI)(nil).UpdateAdapterRequest), arg0)
}

// UpdateAdapterWithContext mocks base method
func (m *MockTextractAPI) UpdateAdapterWithContext(arg0 context.Context, arg1 *textract.UpdateAdapterInput, arg2 ...request.Option) (*textract.UpdateAdapterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAdapterWithContext", varargs...)
	ret0, _ := ret[0].(*textract.UpdateAdapterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdapterWithContext indicates an expected call of UpdateAdapterWithContext
func (mr *MockTextractAPIMockRecorder) UpdateAdapterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdapterWithContext", reflect.TypeOf((*MockTextractAPI)(nil).UpdateAdapterWithContext), varargs...)
}
