// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/textract/textractiface (interfaces: TextractAPI)

// Package textractmock is a generated GoMock package.
package textractmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	textract "github.com/aws/aws-sdk-go/service/textract"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTextractAPI is a mock of TextractAPI interface
type MockTextractAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTextractAPIMockRecorder
}

// MockTextractAPIMockRecorder is the mock recorder for MockTextractAPI
type MockTextractAPIMockRecorder struct {
	mock *MockTextractAPI
}

// NewMockTextractAPI creates a new mock instance
func NewMockTextractAPI(ctrl *gomock.Controller) *MockTextractAPI {
	mock := &MockTextractAPI{ctrl: ctrl}
	mock.recorder = &MockTextractAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTextractAPI) EXPECT() *MockTextractAPIMockRecorder {
	return m.recorder
}

// AnalyzeDocument mocks base method
func (m *MockTextractAPI) AnalyzeDocument(arg0 *textract.AnalyzeDocumentInput) (*textract.AnalyzeDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeDocument", arg0)
	ret0, _ := ret[0].(*textract.AnalyzeDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeDocument indicates an expected call of AnalyzeDocument
func (mr *MockTextractAPIMockRecorder) AnalyzeDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeDocument", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeDocument), arg0)
}

// AnalyzeDocumentRequest mocks base method
func (m *MockTextractAPI) AnalyzeDocumentRequest(arg0 *textract.AnalyzeDocumentInput) (*request.Request, *textract.AnalyzeDocumentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeDocumentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.AnalyzeDocumentOutput)
	return ret0, ret1
}

// AnalyzeDocumentRequest indicates an expected call of AnalyzeDocumentRequest
func (mr *MockTextractAPIMockRecorder) AnalyzeDocumentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeDocumentRequest", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeDocumentRequest), arg0)
}

// AnalyzeDocumentWithContext mocks base method
func (m *MockTextractAPI) AnalyzeDocumentWithContext(arg0 context.Context, arg1 *textract.AnalyzeDocumentInput, arg2 ...request.Option) (*textract.AnalyzeDocumentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AnalyzeDocumentWithContext", varargs...)
	ret0, _ := ret[0].(*textract.AnalyzeDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeDocumentWithContext indicates an expected call of AnalyzeDocumentWithContext
func (mr *MockTextractAPIMockRecorder) AnalyzeDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeDocumentWithContext", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeDocumentWithContext), varargs...)
}

// AnalyzeExpense mocks base method
func (m *MockTextractAPI) AnalyzeExpense(arg0 *textract.AnalyzeExpenseInput) (*textract.AnalyzeExpenseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeExpense", arg0)
	ret0, _ := ret[0].(*textract.AnalyzeExpenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeExpense indicates an expected call of AnalyzeExpense
func (mr *MockTextractAPIMockRecorder) AnalyzeExpense(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeExpense", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeExpense), arg0)
}

// AnalyzeExpenseRequest mocks base method
func (m *MockTextractAPI) AnalyzeExpenseRequest(arg0 *textract.AnalyzeExpenseInput) (*request.Request, *textract.AnalyzeExpenseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeExpenseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.AnalyzeExpenseOutput)
	return ret0, ret1
}

// AnalyzeExpenseRequest indicates an expected call of AnalyzeExpenseRequest
func (mr *MockTextractAPIMockRecorder) AnalyzeExpenseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeExpenseRequest", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeExpenseRequest), arg0)
}

// AnalyzeExpenseWithContext mocks base method
func (m *MockTextractAPI) AnalyzeExpenseWithContext(arg0 context.Context, arg1 *textract.AnalyzeExpenseInput, arg2 ...request.Option) (*textract.AnalyzeExpenseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AnalyzeExpenseWithContext", varargs...)
	ret0, _ := ret[0].(*textract.AnalyzeExpenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeExpenseWithContext indicates an expected call of AnalyzeExpenseWithContext
func (mr *MockTextractAPIMockRecorder) AnalyzeExpenseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeExpenseWithContext", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeExpenseWithContext), varargs...)
}

// AnalyzeID mocks base method
func (m *MockTextractAPI) AnalyzeID(arg0 *textract.AnalyzeIDInput) (*textract.AnalyzeIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeID", arg0)
	ret0, _ := ret[0].(*textract.AnalyzeIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeID indicates an expected call of AnalyzeID
func (mr *MockTextractAPIMockRecorder) AnalyzeID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeID", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeID), arg0)
}

// AnalyzeIDRequest mocks base method
func (m *MockTextractAPI) AnalyzeIDRequest(arg0 *textract.AnalyzeIDInput) (*request.Request, *textract.AnalyzeIDOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeIDRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.AnalyzeIDOutput)
	return ret0, ret1
}

// AnalyzeIDRequest indicates an expected call of AnalyzeIDRequest
func (mr *MockTextractAPIMockRecorder) AnalyzeIDRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeIDRequest", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeIDRequest), arg0)
}

// AnalyzeIDWithContext mocks base method
func (m *MockTextractAPI) AnalyzeIDWithContext(arg0 context.Context, arg1 *textract.AnalyzeIDInput, arg2 ...request.Option) (*textract.AnalyzeIDOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AnalyzeIDWithContext", varargs...)
	ret0, _ := ret[0].(*textract.AnalyzeIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeIDWithContext indicates an expected call of AnalyzeIDWithContext
func (mr *MockTextractAPIMockRecorder) AnalyzeIDWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeIDWithContext", reflect.TypeOf((*MockTextractAPI)(nil).AnalyzeIDWithContext), varargs...)
}

// DetectDocumentText mocks base method
func (m *MockTextractAPI) DetectDocumentText(arg0 *textract.DetectDocumentTextInput) (*textract.DetectDocumentTextOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectDocumentText", arg0)
	ret0, _ := ret[0].(*textract.DetectDocumentTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectDocumentText indicates an expected call of DetectDocumentText
func (mr *MockTextractAPIMockRecorder) DetectDocumentText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDocumentText", reflect.TypeOf((*MockTextractAPI)(nil).DetectDocumentText), arg0)
}

// DetectDocumentTextRequest mocks base method
func (m *MockTextractAPI) DetectDocumentTextRequest(arg0 *textract.DetectDocumentTextInput) (*request.Request, *textract.DetectDocumentTextOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectDocumentTextRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.DetectDocumentTextOutput)
	return ret0, ret1
}

// DetectDocumentTextRequest indicates an expected call of DetectDocumentTextRequest
func (mr *MockTextractAPIMockRecorder) DetectDocumentTextRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDocumentTextRequest", reflect.TypeOf((*MockTextractAPI)(nil).DetectDocumentTextRequest), arg0)
}

// DetectDocumentTextWithContext mocks base method
func (m *MockTextractAPI) DetectDocumentTextWithContext(arg0 context.Context, arg1 *textract.DetectDocumentTextInput, arg2 ...request.Option) (*textract.DetectDocumentTextOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectDocumentTextWithContext", varargs...)
	ret0, _ := ret[0].(*textract.DetectDocumentTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectDocumentTextWithContext indicates an expected call of DetectDocumentTextWithContext
func (mr *MockTextractAPIMockRecorder) DetectDocumentTextWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDocumentTextWithContext", reflect.TypeOf((*MockTextractAPI)(nil).DetectDocumentTextWithContext), varargs...)
}

// GetDocumentAnalysis mocks base method
func (m *MockTextractAPI) GetDocumentAnalysis(arg0 *textract.GetDocumentAnalysisInput) (*textract.GetDocumentAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentAnalysis", arg0)
	ret0, _ := ret[0].(*textract.GetDocumentAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentAnalysis indicates an expected call of GetDocumentAnalysis
func (mr *MockTextractAPIMockRecorder) GetDocumentAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentAnalysis), arg0)
}

// GetDocumentAnalysisRequest mocks base method
func (m *MockTextractAPI) GetDocumentAnalysisRequest(arg0 *textract.GetDocumentAnalysisInput) (*request.Request, *textract.GetDocumentAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetDocumentAnalysisOutput)
	return ret0, ret1
}

// GetDocumentAnalysisRequest indicates an expected call of GetDocumentAnalysisRequest
func (mr *MockTextractAPIMockRecorder) GetDocumentAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentAnalysisRequest), arg0)
}

// GetDocumentAnalysisWithContext mocks base method
func (m *MockTextractAPI) GetDocumentAnalysisWithContext(arg0 context.Context, arg1 *textract.GetDocumentAnalysisInput, arg2 ...request.Option) (*textract.GetDocumentAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetDocumentAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentAnalysisWithContext indicates an expected call of GetDocumentAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) GetDocumentAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentAnalysisWithContext), varargs...)
}

// GetDocumentTextDetection mocks base method
func (m *MockTextractAPI) GetDocumentTextDetection(arg0 *textract.GetDocumentTextDetectionInput) (*textract.GetDocumentTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentTextDetection", arg0)
	ret0, _ := ret[0].(*textract.GetDocumentTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentTextDetection indicates an expected call of GetDocumentTextDetection
func (mr *MockTextractAPIMockRecorder) GetDocumentTextDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTextDetection", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentTextDetection), arg0)
}

// GetDocumentTextDetectionRequest mocks base method
func (m *MockTextractAPI) GetDocumentTextDetectionRequest(arg0 *textract.GetDocumentTextDetectionInput) (*request.Request, *textract.GetDocumentTextDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentTextDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetDocumentTextDetectionOutput)
	return ret0, ret1
}

// GetDocumentTextDetectionRequest indicates an expected call of GetDocumentTextDetectionRequest
func (mr *MockTextractAPIMockRecorder) GetDocumentTextDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTextDetectionRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentTextDetectionRequest), arg0)
}

// GetDocumentTextDetectionWithContext mocks base method
func (m *MockTextractAPI) GetDocumentTextDetectionWithContext(arg0 context.Context, arg1 *textract.GetDocumentTextDetectionInput, arg2 ...request.Option) (*textract.GetDocumentTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentTextDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetDocumentTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentTextDetectionWithContext indicates an expected call of GetDocumentTextDetectionWithContext
func (mr *MockTextractAPIMockRecorder) GetDocumentTextDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentTextDetectionWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetDocumentTextDetectionWithContext), varargs...)
}

// GetExpenseAnalysis mocks base method
func (m *MockTextractAPI) GetExpenseAnalysis(arg0 *textract.GetExpenseAnalysisInput) (*textract.GetExpenseAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenseAnalysis", arg0)
	ret0, _ := ret[0].(*textract.GetExpenseAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenseAnalysis indicates an expected call of GetExpenseAnalysis
func (mr *MockTextractAPIMockRecorder) GetExpenseAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).GetExpenseAnalysis), arg0)
}

// GetExpenseAnalysisRequest mocks base method
func (m *MockTextractAPI) GetExpenseAnalysisRequest(arg0 *textract.GetExpenseAnalysisInput) (*request.Request, *textract.GetExpenseAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenseAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetExpenseAnalysisOutput)
	return ret0, ret1
}

// GetExpenseAnalysisRequest indicates an expected call of GetExpenseAnalysisRequest
func (mr *MockTextractAPIMockRecorder) GetExpenseAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetExpenseAnalysisRequest), arg0)
}

// GetExpenseAnalysisWithContext mocks base method
func (m *MockTextractAPI) GetExpenseAnalysisWithContext(arg0 context.Context, arg1 *textract.GetExpenseAnalysisInput, arg2 ...request.Option) (*textract.GetExpenseAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExpenseAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetExpenseAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenseAnalysisWithContext indicates an expected call of GetExpenseAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) GetExpenseAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetExpenseAnalysisWithContext), varargs...)
}

// GetLendingAnalysis mocks base method
func (m *MockTextractAPI) GetLendingAnalysis(arg0 *textract.GetLendingAnalysisInput) (*textract.GetLendingAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLendingAnalysis", arg0)
	ret0, _ := ret[0].(*textract.GetLendingAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLendingAnalysis indicates an expected call of GetLendingAnalysis
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysis), arg0)
}

// GetLendingAnalysisRequest mocks base method
func (m *MockTextractAPI) GetLendingAnalysisRequest(arg0 *textract.GetLendingAnalysisInput) (*request.Request, *textract.GetLendingAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLendingAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetLendingAnalysisOutput)
	return ret0, ret1
}

// GetLendingAnalysisRequest indicates an expected call of GetLendingAnalysisRequest
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysisRequest), arg0)
}

// GetLendingAnalysisSummary mocks base method
func (m *MockTextractAPI) GetLendingAnalysisSummary(arg0 *textract.GetLendingAnalysisSummaryInput) (*textract.GetLendingAnalysisSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLendingAnalysisSummary", arg0)
	ret0, _ := ret[0].(*textract.GetLendingAnalysisSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLendingAnalysisSummary indicates an expected call of GetLendingAnalysisSummary
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysisSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysisSummary", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysisSummary), arg0)
}

// GetLendingAnalysisSummaryRequest mocks base method
func (m *MockTextractAPI) GetLendingAnalysisSummaryRequest(arg0 *textract.GetLendingAnalysisSummaryInput) (*request.Request, *textract.GetLendingAnalysisSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLendingAnalysisSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.GetLendingAnalysisSummaryOutput)
	return ret0, ret1
}

// GetLendingAnalysisSummaryRequest indicates an expected call of GetLendingAnalysisSummaryRequest
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysisSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysisSummaryRequest", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysisSummaryRequest), arg0)
}

// GetLendingAnalysisSummaryWithContext mocks base method
func (m *MockTextractAPI) GetLendingAnalysisSummaryWithContext(arg0 context.Context, arg1 *textract.GetLendingAnalysisSummaryInput, arg2 ...request.Option) (*textract.GetLendingAnalysisSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLendingAnalysisSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetLendingAnalysisSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLendingAnalysisSummaryWithContext indicates an expected call of GetLendingAnalysisSummaryWithContext
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysisSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysisSummaryWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysisSummaryWithContext), varargs...)
}

// GetLendingAnalysisWithContext mocks base method
func (m *MockTextractAPI) GetLendingAnalysisWithContext(arg0 context.Context, arg1 *textract.GetLendingAnalysisInput, arg2 ...request.Option) (*textract.GetLendingAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLendingAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.GetLendingAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLendingAnalysisWithContext indicates an expected call of GetLendingAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) GetLendingAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendingAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).GetLendingAnalysisWithContext), varargs...)
}

// StartDocumentAnalysis mocks base method
func (m *MockTextractAPI) StartDocumentAnalysis(arg0 *textract.StartDocumentAnalysisInput) (*textract.StartDocumentAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDocumentAnalysis", arg0)
	ret0, _ := ret[0].(*textract.StartDocumentAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDocumentAnalysis indicates an expected call of StartDocumentAnalysis
func (mr *MockTextractAPIMockRecorder) StartDocumentAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentAnalysis), arg0)
}

// StartDocumentAnalysisRequest mocks base method
func (m *MockTextractAPI) StartDocumentAnalysisRequest(arg0 *textract.StartDocumentAnalysisInput) (*request.Request, *textract.StartDocumentAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDocumentAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.StartDocumentAnalysisOutput)
	return ret0, ret1
}

// StartDocumentAnalysisRequest indicates an expected call of StartDocumentAnalysisRequest
func (mr *MockTextractAPIMockRecorder) StartDocumentAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentAnalysisRequest), arg0)
}

// StartDocumentAnalysisWithContext mocks base method
func (m *MockTextractAPI) StartDocumentAnalysisWithContext(arg0 context.Context, arg1 *textract.StartDocumentAnalysisInput, arg2 ...request.Option) (*textract.StartDocumentAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDocumentAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.StartDocumentAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDocumentAnalysisWithContext indicates an expected call of StartDocumentAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) StartDocumentAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentAnalysisWithContext), varargs...)
}

// StartDocumentTextDetection mocks base method
func (m *MockTextractAPI) StartDocumentTextDetection(arg0 *textract.StartDocumentTextDetectionInput) (*textract.StartDocumentTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDocumentTextDetection", arg0)
	ret0, _ := ret[0].(*textract.StartDocumentTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDocumentTextDetection indicates an expected call of StartDocumentTextDetection
func (mr *MockTextractAPIMockRecorder) StartDocumentTextDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentTextDetection", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentTextDetection), arg0)
}

// StartDocumentTextDetectionRequest mocks base method
func (m *MockTextractAPI) StartDocumentTextDetectionRequest(arg0 *textract.StartDocumentTextDetectionInput) (*request.Request, *textract.StartDocumentTextDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDocumentTextDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.StartDocumentTextDetectionOutput)
	return ret0, ret1
}

// StartDocumentTextDetectionRequest indicates an expected call of StartDocumentTextDetectionRequest
func (mr *MockTextractAPIMockRecorder) StartDocumentTextDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentTextDetectionRequest", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentTextDetectionRequest), arg0)
}

// StartDocumentTextDetectionWithContext mocks base method
func (m *MockTextractAPI) StartDocumentTextDetectionWithContext(arg0 context.Context, arg1 *textract.StartDocumentTextDetectionInput, arg2 ...request.Option) (*textract.StartDocumentTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDocumentTextDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*textract.StartDocumentTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDocumentTextDetectionWithContext indicates an expected call of StartDocumentTextDetectionWithContext
func (mr *MockTextractAPIMockRecorder) StartDocumentTextDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDocumentTextDetectionWithContext", reflect.TypeOf((*MockTextractAPI)(nil).StartDocumentTextDetectionWithContext), varargs...)
}

// StartExpenseAnalysis mocks base method
func (m *MockTextractAPI) StartExpenseAnalysis(arg0 *textract.StartExpenseAnalysisInput) (*textract.StartExpenseAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExpenseAnalysis", arg0)
	ret0, _ := ret[0].(*textract.StartExpenseAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExpenseAnalysis indicates an expected call of StartExpenseAnalysis
func (mr *MockTextractAPIMockRecorder) StartExpenseAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExpenseAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).StartExpenseAnalysis), arg0)
}

// StartExpenseAnalysisRequest mocks base method
func (m *MockTextractAPI) StartExpenseAnalysisRequest(arg0 *textract.StartExpenseAnalysisInput) (*request.Request, *textract.StartExpenseAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExpenseAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.StartExpenseAnalysisOutput)
	return ret0, ret1
}

// StartExpenseAnalysisRequest indicates an expected call of StartExpenseAnalysisRequest
func (mr *MockTextractAPIMockRecorder) StartExpenseAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExpenseAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).StartExpenseAnalysisRequest), arg0)
}

// StartExpenseAnalysisWithContext mocks base method
func (m *MockTextractAPI) StartExpenseAnalysisWithContext(arg0 context.Context, arg1 *textract.StartExpenseAnalysisInput, arg2 ...request.Option) (*textract.StartExpenseAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartExpenseAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.StartExpenseAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExpenseAnalysisWithContext indicates an expected call of StartExpenseAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) StartExpenseAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExpenseAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).StartExpenseAnalysisWithContext), varargs...)
}

// StartLendingAnalysis mocks base method
func (m *MockTextractAPI) StartLendingAnalysis(arg0 *textract.StartLendingAnalysisInput) (*textract.StartLendingAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLendingAnalysis", arg0)
	ret0, _ := ret[0].(*textract.StartLendingAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLendingAnalysis indicates an expected call of StartLendingAnalysis
func (mr *MockTextractAPIMockRecorder) StartLendingAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLendingAnalysis", reflect.TypeOf((*MockTextractAPI)(nil).StartLendingAnalysis), arg0)
}

// StartLendingAnalysisRequest mocks base method
func (m *MockTextractAPI) StartLendingAnalysisRequest(arg0 *textract.StartLendingAnalysisInput) (*request.Request, *textract.StartLendingAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLendingAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*textract.StartLendingAnalysisOutput)
	return ret0, ret1
}

// StartLendingAnalysisRequest indicates an expected call of StartLendingAnalysisRequest
func (mr *MockTextractAPIMockRecorder) StartLendingAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLendingAnalysisRequest", reflect.TypeOf((*MockTextractAPI)(nil).StartLendingAnalysisRequest), arg0)
}

// StartLendingAnalysisWithContext mocks base method
func (m *MockTextractAPI) StartLendingAnalysisWithContext(arg0 context.Context, arg1 *textract.StartLendingAnalysisInput, arg2 ...request.Option) (*textract.StartLendingAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartLendingAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*textract.StartLendingAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLendingAnalysisWithContext indicates an expected call of StartLendingAnalysisWithContext
func (mr *MockTextractAPIMockRecorder) StartLendingAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLendingAnalysisWithContext", reflect.TypeOf((*MockTextractAPI)(nil).StartLendingAnalysisWithContext), varargs...)
}
