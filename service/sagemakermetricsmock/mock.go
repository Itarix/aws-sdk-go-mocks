// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/sagemakermetrics/sagemakermetricsiface (interfaces: SageMakerMetricsAPI)

// Package sagemakermetricsmock is a generated GoMock package.
package sagemakermetricsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	sagemakermetrics "github.com/aws/aws-sdk-go/service/sagemakermetrics"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSageMakerMetricsAPI is a mock of SageMakerMetricsAPI interface
type MockSageMakerMetricsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSageMakerMetricsAPIMockRecorder
}

// MockSageMakerMetricsAPIMockRecorder is the mock recorder for MockSageMakerMetricsAPI
type MockSageMakerMetricsAPIMockRecorder struct {
	mock *MockSageMakerMetricsAPI
}

// NewMockSageMakerMetricsAPI creates a new mock instance
func NewMockSageMakerMetricsAPI(ctrl *gomock.Controller) *MockSageMakerMetricsAPI {
	mock := &MockSageMakerMetricsAPI{ctrl: ctrl}
	mock.recorder = &MockSageMakerMetricsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSageMakerMetricsAPI) EXPECT() *MockSageMakerMetricsAPIMockRecorder {
	return m.recorder
}

// BatchPutMetrics mocks base method
func (m *MockSageMakerMetricsAPI) BatchPutMetrics(arg0 *sagemakermetrics.BatchPutMetricsInput) (*sagemakermetrics.BatchPutMetricsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutMetrics", arg0)
	ret0, _ := ret[0].(*sagemakermetrics.BatchPutMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutMetrics indicates an expected call of BatchPutMetrics
func (mr *MockSageMakerMetricsAPIMockRecorder) BatchPutMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutMetrics", reflect.TypeOf((*MockSageMakerMetricsAPI)(nil).BatchPutMetrics), arg0)
}

// BatchPutMetricsRequest mocks base method
func (m *MockSageMakerMetricsAPI) BatchPutMetricsRequest(arg0 *sagemakermetrics.BatchPutMetricsInput) (*request.Request, *sagemakermetrics.BatchPutMetricsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutMetricsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakermetrics.BatchPutMetricsOutput)
	return ret0, ret1
}

// BatchPutMetricsRequest indicates an expected call of BatchPutMetricsRequest
func (mr *MockSageMakerMetricsAPIMockRecorder) BatchPutMetricsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutMetricsRequest", reflect.TypeOf((*MockSageMakerMetricsAPI)(nil).BatchPutMetricsRequest), arg0)
}

// BatchPutMetricsWithContext mocks base method
func (m *MockSageMakerMetricsAPI) BatchPutMetricsWithContext(arg0 context.Context, arg1 *sagemakermetrics.BatchPutMetricsInput, arg2 ...request.Option) (*sagemakermetrics.BatchPutMetricsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchPutMetricsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakermetrics.BatchPutMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutMetricsWithContext indicates an expected call of BatchPutMetricsWithContext
func (mr *MockSageMakerMetricsAPIMockRecorder) BatchPutMetricsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutMetricsWithContext", reflect.TypeOf((*MockSageMakerMetricsAPI)(nil).BatchPutMetricsWithContext), varargs...)
}
