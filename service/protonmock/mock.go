// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/proton/protoniface (interfaces: ProtonAPI)

// Package protonmock is a generated GoMock package.
package protonmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	proton "github.com/aws/aws-sdk-go/service/proton"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProtonAPI is a mock of ProtonAPI interface
type MockProtonAPI struct {
	ctrl     *gomock.Controller
	recorder *MockProtonAPIMockRecorder
}

// MockProtonAPIMockRecorder is the mock recorder for MockProtonAPI
type MockProtonAPIMockRecorder struct {
	mock *MockProtonAPI
}

// NewMockProtonAPI creates a new mock instance
func NewMockProtonAPI(ctrl *gomock.Controller) *MockProtonAPI {
	mock := &MockProtonAPI{ctrl: ctrl}
	mock.recorder = &MockProtonAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProtonAPI) EXPECT() *MockProtonAPIMockRecorder {
	return m.recorder
}

// AcceptEnvironmentAccountConnection mocks base method
func (m *MockProtonAPI) AcceptEnvironmentAccountConnection(arg0 *proton.AcceptEnvironmentAccountConnectionInput) (*proton.AcceptEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptEnvironmentAccountConnection", arg0)
	ret0, _ := ret[0].(*proton.AcceptEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptEnvironmentAccountConnection indicates an expected call of AcceptEnvironmentAccountConnection
func (mr *MockProtonAPIMockRecorder) AcceptEnvironmentAccountConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptEnvironmentAccountConnection", reflect.TypeOf((*MockProtonAPI)(nil).AcceptEnvironmentAccountConnection), arg0)
}

// AcceptEnvironmentAccountConnectionRequest mocks base method
func (m *MockProtonAPI) AcceptEnvironmentAccountConnectionRequest(arg0 *proton.AcceptEnvironmentAccountConnectionInput) (*request.Request, *proton.AcceptEnvironmentAccountConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptEnvironmentAccountConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.AcceptEnvironmentAccountConnectionOutput)
	return ret0, ret1
}

// AcceptEnvironmentAccountConnectionRequest indicates an expected call of AcceptEnvironmentAccountConnectionRequest
func (mr *MockProtonAPIMockRecorder) AcceptEnvironmentAccountConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptEnvironmentAccountConnectionRequest", reflect.TypeOf((*MockProtonAPI)(nil).AcceptEnvironmentAccountConnectionRequest), arg0)
}

// AcceptEnvironmentAccountConnectionWithContext mocks base method
func (m *MockProtonAPI) AcceptEnvironmentAccountConnectionWithContext(arg0 context.Context, arg1 *proton.AcceptEnvironmentAccountConnectionInput, arg2 ...request.Option) (*proton.AcceptEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptEnvironmentAccountConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.AcceptEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptEnvironmentAccountConnectionWithContext indicates an expected call of AcceptEnvironmentAccountConnectionWithContext
func (mr *MockProtonAPIMockRecorder) AcceptEnvironmentAccountConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptEnvironmentAccountConnectionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).AcceptEnvironmentAccountConnectionWithContext), varargs...)
}

// CancelEnvironmentDeployment mocks base method
func (m *MockProtonAPI) CancelEnvironmentDeployment(arg0 *proton.CancelEnvironmentDeploymentInput) (*proton.CancelEnvironmentDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelEnvironmentDeployment", arg0)
	ret0, _ := ret[0].(*proton.CancelEnvironmentDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelEnvironmentDeployment indicates an expected call of CancelEnvironmentDeployment
func (mr *MockProtonAPIMockRecorder) CancelEnvironmentDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelEnvironmentDeployment", reflect.TypeOf((*MockProtonAPI)(nil).CancelEnvironmentDeployment), arg0)
}

// CancelEnvironmentDeploymentRequest mocks base method
func (m *MockProtonAPI) CancelEnvironmentDeploymentRequest(arg0 *proton.CancelEnvironmentDeploymentInput) (*request.Request, *proton.CancelEnvironmentDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelEnvironmentDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.CancelEnvironmentDeploymentOutput)
	return ret0, ret1
}

// CancelEnvironmentDeploymentRequest indicates an expected call of CancelEnvironmentDeploymentRequest
func (mr *MockProtonAPIMockRecorder) CancelEnvironmentDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelEnvironmentDeploymentRequest", reflect.TypeOf((*MockProtonAPI)(nil).CancelEnvironmentDeploymentRequest), arg0)
}

// CancelEnvironmentDeploymentWithContext mocks base method
func (m *MockProtonAPI) CancelEnvironmentDeploymentWithContext(arg0 context.Context, arg1 *proton.CancelEnvironmentDeploymentInput, arg2 ...request.Option) (*proton.CancelEnvironmentDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelEnvironmentDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*proton.CancelEnvironmentDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelEnvironmentDeploymentWithContext indicates an expected call of CancelEnvironmentDeploymentWithContext
func (mr *MockProtonAPIMockRecorder) CancelEnvironmentDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelEnvironmentDeploymentWithContext", reflect.TypeOf((*MockProtonAPI)(nil).CancelEnvironmentDeploymentWithContext), varargs...)
}

// CancelServiceInstanceDeployment mocks base method
func (m *MockProtonAPI) CancelServiceInstanceDeployment(arg0 *proton.CancelServiceInstanceDeploymentInput) (*proton.CancelServiceInstanceDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelServiceInstanceDeployment", arg0)
	ret0, _ := ret[0].(*proton.CancelServiceInstanceDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelServiceInstanceDeployment indicates an expected call of CancelServiceInstanceDeployment
func (mr *MockProtonAPIMockRecorder) CancelServiceInstanceDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelServiceInstanceDeployment", reflect.TypeOf((*MockProtonAPI)(nil).CancelServiceInstanceDeployment), arg0)
}

// CancelServiceInstanceDeploymentRequest mocks base method
func (m *MockProtonAPI) CancelServiceInstanceDeploymentRequest(arg0 *proton.CancelServiceInstanceDeploymentInput) (*request.Request, *proton.CancelServiceInstanceDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelServiceInstanceDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.CancelServiceInstanceDeploymentOutput)
	return ret0, ret1
}

// CancelServiceInstanceDeploymentRequest indicates an expected call of CancelServiceInstanceDeploymentRequest
func (mr *MockProtonAPIMockRecorder) CancelServiceInstanceDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelServiceInstanceDeploymentRequest", reflect.TypeOf((*MockProtonAPI)(nil).CancelServiceInstanceDeploymentRequest), arg0)
}

// CancelServiceInstanceDeploymentWithContext mocks base method
func (m *MockProtonAPI) CancelServiceInstanceDeploymentWithContext(arg0 context.Context, arg1 *proton.CancelServiceInstanceDeploymentInput, arg2 ...request.Option) (*proton.CancelServiceInstanceDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelServiceInstanceDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*proton.CancelServiceInstanceDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelServiceInstanceDeploymentWithContext indicates an expected call of CancelServiceInstanceDeploymentWithContext
func (mr *MockProtonAPIMockRecorder) CancelServiceInstanceDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelServiceInstanceDeploymentWithContext", reflect.TypeOf((*MockProtonAPI)(nil).CancelServiceInstanceDeploymentWithContext), varargs...)
}

// CancelServicePipelineDeployment mocks base method
func (m *MockProtonAPI) CancelServicePipelineDeployment(arg0 *proton.CancelServicePipelineDeploymentInput) (*proton.CancelServicePipelineDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelServicePipelineDeployment", arg0)
	ret0, _ := ret[0].(*proton.CancelServicePipelineDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelServicePipelineDeployment indicates an expected call of CancelServicePipelineDeployment
func (mr *MockProtonAPIMockRecorder) CancelServicePipelineDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelServicePipelineDeployment", reflect.TypeOf((*MockProtonAPI)(nil).CancelServicePipelineDeployment), arg0)
}

// CancelServicePipelineDeploymentRequest mocks base method
func (m *MockProtonAPI) CancelServicePipelineDeploymentRequest(arg0 *proton.CancelServicePipelineDeploymentInput) (*request.Request, *proton.CancelServicePipelineDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelServicePipelineDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.CancelServicePipelineDeploymentOutput)
	return ret0, ret1
}

// CancelServicePipelineDeploymentRequest indicates an expected call of CancelServicePipelineDeploymentRequest
func (mr *MockProtonAPIMockRecorder) CancelServicePipelineDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelServicePipelineDeploymentRequest", reflect.TypeOf((*MockProtonAPI)(nil).CancelServicePipelineDeploymentRequest), arg0)
}

// CancelServicePipelineDeploymentWithContext mocks base method
func (m *MockProtonAPI) CancelServicePipelineDeploymentWithContext(arg0 context.Context, arg1 *proton.CancelServicePipelineDeploymentInput, arg2 ...request.Option) (*proton.CancelServicePipelineDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelServicePipelineDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*proton.CancelServicePipelineDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelServicePipelineDeploymentWithContext indicates an expected call of CancelServicePipelineDeploymentWithContext
func (mr *MockProtonAPIMockRecorder) CancelServicePipelineDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelServicePipelineDeploymentWithContext", reflect.TypeOf((*MockProtonAPI)(nil).CancelServicePipelineDeploymentWithContext), varargs...)
}

// CreateEnvironment mocks base method
func (m *MockProtonAPI) CreateEnvironment(arg0 *proton.CreateEnvironmentInput) (*proton.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0)
	ret0, _ := ret[0].(*proton.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockProtonAPIMockRecorder) CreateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironment), arg0)
}

// CreateEnvironmentAccountConnection mocks base method
func (m *MockProtonAPI) CreateEnvironmentAccountConnection(arg0 *proton.CreateEnvironmentAccountConnectionInput) (*proton.CreateEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentAccountConnection", arg0)
	ret0, _ := ret[0].(*proton.CreateEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentAccountConnection indicates an expected call of CreateEnvironmentAccountConnection
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentAccountConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentAccountConnection", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentAccountConnection), arg0)
}

// CreateEnvironmentAccountConnectionRequest mocks base method
func (m *MockProtonAPI) CreateEnvironmentAccountConnectionRequest(arg0 *proton.CreateEnvironmentAccountConnectionInput) (*request.Request, *proton.CreateEnvironmentAccountConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentAccountConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.CreateEnvironmentAccountConnectionOutput)
	return ret0, ret1
}

// CreateEnvironmentAccountConnectionRequest indicates an expected call of CreateEnvironmentAccountConnectionRequest
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentAccountConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentAccountConnectionRequest", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentAccountConnectionRequest), arg0)
}

// CreateEnvironmentAccountConnectionWithContext mocks base method
func (m *MockProtonAPI) CreateEnvironmentAccountConnectionWithContext(arg0 context.Context, arg1 *proton.CreateEnvironmentAccountConnectionInput, arg2 ...request.Option) (*proton.CreateEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentAccountConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.CreateEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentAccountConnectionWithContext indicates an expected call of CreateEnvironmentAccountConnectionWithContext
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentAccountConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentAccountConnectionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentAccountConnectionWithContext), varargs...)
}

// CreateEnvironmentRequest mocks base method
func (m *MockProtonAPI) CreateEnvironmentRequest(arg0 *proton.CreateEnvironmentInput) (*request.Request, *proton.CreateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.CreateEnvironmentOutput)
	return ret0, ret1
}

// CreateEnvironmentRequest indicates an expected call of CreateEnvironmentRequest
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentRequest", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentRequest), arg0)
}

// CreateEnvironmentTemplate mocks base method
func (m *MockProtonAPI) CreateEnvironmentTemplate(arg0 *proton.CreateEnvironmentTemplateInput) (*proton.CreateEnvironmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentTemplate", arg0)
	ret0, _ := ret[0].(*proton.CreateEnvironmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentTemplate indicates an expected call of CreateEnvironmentTemplate
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentTemplate", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentTemplate), arg0)
}

// CreateEnvironmentTemplateRequest mocks base method
func (m *MockProtonAPI) CreateEnvironmentTemplateRequest(arg0 *proton.CreateEnvironmentTemplateInput) (*request.Request, *proton.CreateEnvironmentTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.CreateEnvironmentTemplateOutput)
	return ret0, ret1
}

// CreateEnvironmentTemplateRequest indicates an expected call of CreateEnvironmentTemplateRequest
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentTemplateRequest", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentTemplateRequest), arg0)
}

// CreateEnvironmentTemplateVersion mocks base method
func (m *MockProtonAPI) CreateEnvironmentTemplateVersion(arg0 *proton.CreateEnvironmentTemplateVersionInput) (*proton.CreateEnvironmentTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentTemplateVersion", arg0)
	ret0, _ := ret[0].(*proton.CreateEnvironmentTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentTemplateVersion indicates an expected call of CreateEnvironmentTemplateVersion
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentTemplateVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentTemplateVersion", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentTemplateVersion), arg0)
}

// CreateEnvironmentTemplateVersionRequest mocks base method
func (m *MockProtonAPI) CreateEnvironmentTemplateVersionRequest(arg0 *proton.CreateEnvironmentTemplateVersionInput) (*request.Request, *proton.CreateEnvironmentTemplateVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentTemplateVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.CreateEnvironmentTemplateVersionOutput)
	return ret0, ret1
}

// CreateEnvironmentTemplateVersionRequest indicates an expected call of CreateEnvironmentTemplateVersionRequest
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentTemplateVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentTemplateVersionRequest", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentTemplateVersionRequest), arg0)
}

// CreateEnvironmentTemplateVersionWithContext mocks base method
func (m *MockProtonAPI) CreateEnvironmentTemplateVersionWithContext(arg0 context.Context, arg1 *proton.CreateEnvironmentTemplateVersionInput, arg2 ...request.Option) (*proton.CreateEnvironmentTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentTemplateVersionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.CreateEnvironmentTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentTemplateVersionWithContext indicates an expected call of CreateEnvironmentTemplateVersionWithContext
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentTemplateVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentTemplateVersionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentTemplateVersionWithContext), varargs...)
}

// CreateEnvironmentTemplateWithContext mocks base method
func (m *MockProtonAPI) CreateEnvironmentTemplateWithContext(arg0 context.Context, arg1 *proton.CreateEnvironmentTemplateInput, arg2 ...request.Option) (*proton.CreateEnvironmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*proton.CreateEnvironmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentTemplateWithContext indicates an expected call of CreateEnvironmentTemplateWithContext
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentTemplateWithContext", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentTemplateWithContext), varargs...)
}

// CreateEnvironmentWithContext mocks base method
func (m *MockProtonAPI) CreateEnvironmentWithContext(arg0 context.Context, arg1 *proton.CreateEnvironmentInput, arg2 ...request.Option) (*proton.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*proton.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentWithContext indicates an expected call of CreateEnvironmentWithContext
func (mr *MockProtonAPIMockRecorder) CreateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentWithContext", reflect.TypeOf((*MockProtonAPI)(nil).CreateEnvironmentWithContext), varargs...)
}

// CreateService mocks base method
func (m *MockProtonAPI) CreateService(arg0 *proton.CreateServiceInput) (*proton.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(*proton.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService
func (mr *MockProtonAPIMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockProtonAPI)(nil).CreateService), arg0)
}

// CreateServiceRequest mocks base method
func (m *MockProtonAPI) CreateServiceRequest(arg0 *proton.CreateServiceInput) (*request.Request, *proton.CreateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.CreateServiceOutput)
	return ret0, ret1
}

// CreateServiceRequest indicates an expected call of CreateServiceRequest
func (mr *MockProtonAPIMockRecorder) CreateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceRequest", reflect.TypeOf((*MockProtonAPI)(nil).CreateServiceRequest), arg0)
}

// CreateServiceTemplate mocks base method
func (m *MockProtonAPI) CreateServiceTemplate(arg0 *proton.CreateServiceTemplateInput) (*proton.CreateServiceTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceTemplate", arg0)
	ret0, _ := ret[0].(*proton.CreateServiceTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceTemplate indicates an expected call of CreateServiceTemplate
func (mr *MockProtonAPIMockRecorder) CreateServiceTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceTemplate", reflect.TypeOf((*MockProtonAPI)(nil).CreateServiceTemplate), arg0)
}

// CreateServiceTemplateRequest mocks base method
func (m *MockProtonAPI) CreateServiceTemplateRequest(arg0 *proton.CreateServiceTemplateInput) (*request.Request, *proton.CreateServiceTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.CreateServiceTemplateOutput)
	return ret0, ret1
}

// CreateServiceTemplateRequest indicates an expected call of CreateServiceTemplateRequest
func (mr *MockProtonAPIMockRecorder) CreateServiceTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceTemplateRequest", reflect.TypeOf((*MockProtonAPI)(nil).CreateServiceTemplateRequest), arg0)
}

// CreateServiceTemplateVersion mocks base method
func (m *MockProtonAPI) CreateServiceTemplateVersion(arg0 *proton.CreateServiceTemplateVersionInput) (*proton.CreateServiceTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceTemplateVersion", arg0)
	ret0, _ := ret[0].(*proton.CreateServiceTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceTemplateVersion indicates an expected call of CreateServiceTemplateVersion
func (mr *MockProtonAPIMockRecorder) CreateServiceTemplateVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceTemplateVersion", reflect.TypeOf((*MockProtonAPI)(nil).CreateServiceTemplateVersion), arg0)
}

// CreateServiceTemplateVersionRequest mocks base method
func (m *MockProtonAPI) CreateServiceTemplateVersionRequest(arg0 *proton.CreateServiceTemplateVersionInput) (*request.Request, *proton.CreateServiceTemplateVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceTemplateVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.CreateServiceTemplateVersionOutput)
	return ret0, ret1
}

// CreateServiceTemplateVersionRequest indicates an expected call of CreateServiceTemplateVersionRequest
func (mr *MockProtonAPIMockRecorder) CreateServiceTemplateVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceTemplateVersionRequest", reflect.TypeOf((*MockProtonAPI)(nil).CreateServiceTemplateVersionRequest), arg0)
}

// CreateServiceTemplateVersionWithContext mocks base method
func (m *MockProtonAPI) CreateServiceTemplateVersionWithContext(arg0 context.Context, arg1 *proton.CreateServiceTemplateVersionInput, arg2 ...request.Option) (*proton.CreateServiceTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceTemplateVersionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.CreateServiceTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceTemplateVersionWithContext indicates an expected call of CreateServiceTemplateVersionWithContext
func (mr *MockProtonAPIMockRecorder) CreateServiceTemplateVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceTemplateVersionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).CreateServiceTemplateVersionWithContext), varargs...)
}

// CreateServiceTemplateWithContext mocks base method
func (m *MockProtonAPI) CreateServiceTemplateWithContext(arg0 context.Context, arg1 *proton.CreateServiceTemplateInput, arg2 ...request.Option) (*proton.CreateServiceTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*proton.CreateServiceTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceTemplateWithContext indicates an expected call of CreateServiceTemplateWithContext
func (mr *MockProtonAPIMockRecorder) CreateServiceTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceTemplateWithContext", reflect.TypeOf((*MockProtonAPI)(nil).CreateServiceTemplateWithContext), varargs...)
}

// CreateServiceWithContext mocks base method
func (m *MockProtonAPI) CreateServiceWithContext(arg0 context.Context, arg1 *proton.CreateServiceInput, arg2 ...request.Option) (*proton.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*proton.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceWithContext indicates an expected call of CreateServiceWithContext
func (mr *MockProtonAPIMockRecorder) CreateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceWithContext", reflect.TypeOf((*MockProtonAPI)(nil).CreateServiceWithContext), varargs...)
}

// DeleteEnvironment mocks base method
func (m *MockProtonAPI) DeleteEnvironment(arg0 *proton.DeleteEnvironmentInput) (*proton.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0)
	ret0, _ := ret[0].(*proton.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockProtonAPIMockRecorder) DeleteEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironment), arg0)
}

// DeleteEnvironmentAccountConnection mocks base method
func (m *MockProtonAPI) DeleteEnvironmentAccountConnection(arg0 *proton.DeleteEnvironmentAccountConnectionInput) (*proton.DeleteEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentAccountConnection", arg0)
	ret0, _ := ret[0].(*proton.DeleteEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentAccountConnection indicates an expected call of DeleteEnvironmentAccountConnection
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentAccountConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentAccountConnection", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentAccountConnection), arg0)
}

// DeleteEnvironmentAccountConnectionRequest mocks base method
func (m *MockProtonAPI) DeleteEnvironmentAccountConnectionRequest(arg0 *proton.DeleteEnvironmentAccountConnectionInput) (*request.Request, *proton.DeleteEnvironmentAccountConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentAccountConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.DeleteEnvironmentAccountConnectionOutput)
	return ret0, ret1
}

// DeleteEnvironmentAccountConnectionRequest indicates an expected call of DeleteEnvironmentAccountConnectionRequest
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentAccountConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentAccountConnectionRequest", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentAccountConnectionRequest), arg0)
}

// DeleteEnvironmentAccountConnectionWithContext mocks base method
func (m *MockProtonAPI) DeleteEnvironmentAccountConnectionWithContext(arg0 context.Context, arg1 *proton.DeleteEnvironmentAccountConnectionInput, arg2 ...request.Option) (*proton.DeleteEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentAccountConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.DeleteEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentAccountConnectionWithContext indicates an expected call of DeleteEnvironmentAccountConnectionWithContext
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentAccountConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentAccountConnectionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentAccountConnectionWithContext), varargs...)
}

// DeleteEnvironmentRequest mocks base method
func (m *MockProtonAPI) DeleteEnvironmentRequest(arg0 *proton.DeleteEnvironmentInput) (*request.Request, *proton.DeleteEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.DeleteEnvironmentOutput)
	return ret0, ret1
}

// DeleteEnvironmentRequest indicates an expected call of DeleteEnvironmentRequest
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentRequest", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentRequest), arg0)
}

// DeleteEnvironmentTemplate mocks base method
func (m *MockProtonAPI) DeleteEnvironmentTemplate(arg0 *proton.DeleteEnvironmentTemplateInput) (*proton.DeleteEnvironmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentTemplate", arg0)
	ret0, _ := ret[0].(*proton.DeleteEnvironmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentTemplate indicates an expected call of DeleteEnvironmentTemplate
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentTemplate", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentTemplate), arg0)
}

// DeleteEnvironmentTemplateRequest mocks base method
func (m *MockProtonAPI) DeleteEnvironmentTemplateRequest(arg0 *proton.DeleteEnvironmentTemplateInput) (*request.Request, *proton.DeleteEnvironmentTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.DeleteEnvironmentTemplateOutput)
	return ret0, ret1
}

// DeleteEnvironmentTemplateRequest indicates an expected call of DeleteEnvironmentTemplateRequest
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentTemplateRequest", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentTemplateRequest), arg0)
}

// DeleteEnvironmentTemplateVersion mocks base method
func (m *MockProtonAPI) DeleteEnvironmentTemplateVersion(arg0 *proton.DeleteEnvironmentTemplateVersionInput) (*proton.DeleteEnvironmentTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentTemplateVersion", arg0)
	ret0, _ := ret[0].(*proton.DeleteEnvironmentTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentTemplateVersion indicates an expected call of DeleteEnvironmentTemplateVersion
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentTemplateVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentTemplateVersion", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentTemplateVersion), arg0)
}

// DeleteEnvironmentTemplateVersionRequest mocks base method
func (m *MockProtonAPI) DeleteEnvironmentTemplateVersionRequest(arg0 *proton.DeleteEnvironmentTemplateVersionInput) (*request.Request, *proton.DeleteEnvironmentTemplateVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentTemplateVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.DeleteEnvironmentTemplateVersionOutput)
	return ret0, ret1
}

// DeleteEnvironmentTemplateVersionRequest indicates an expected call of DeleteEnvironmentTemplateVersionRequest
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentTemplateVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentTemplateVersionRequest", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentTemplateVersionRequest), arg0)
}

// DeleteEnvironmentTemplateVersionWithContext mocks base method
func (m *MockProtonAPI) DeleteEnvironmentTemplateVersionWithContext(arg0 context.Context, arg1 *proton.DeleteEnvironmentTemplateVersionInput, arg2 ...request.Option) (*proton.DeleteEnvironmentTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentTemplateVersionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.DeleteEnvironmentTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentTemplateVersionWithContext indicates an expected call of DeleteEnvironmentTemplateVersionWithContext
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentTemplateVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentTemplateVersionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentTemplateVersionWithContext), varargs...)
}

// DeleteEnvironmentTemplateWithContext mocks base method
func (m *MockProtonAPI) DeleteEnvironmentTemplateWithContext(arg0 context.Context, arg1 *proton.DeleteEnvironmentTemplateInput, arg2 ...request.Option) (*proton.DeleteEnvironmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*proton.DeleteEnvironmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentTemplateWithContext indicates an expected call of DeleteEnvironmentTemplateWithContext
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentTemplateWithContext", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentTemplateWithContext), varargs...)
}

// DeleteEnvironmentWithContext mocks base method
func (m *MockProtonAPI) DeleteEnvironmentWithContext(arg0 context.Context, arg1 *proton.DeleteEnvironmentInput, arg2 ...request.Option) (*proton.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*proton.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentWithContext indicates an expected call of DeleteEnvironmentWithContext
func (mr *MockProtonAPIMockRecorder) DeleteEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentWithContext", reflect.TypeOf((*MockProtonAPI)(nil).DeleteEnvironmentWithContext), varargs...)
}

// DeleteService mocks base method
func (m *MockProtonAPI) DeleteService(arg0 *proton.DeleteServiceInput) (*proton.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(*proton.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockProtonAPIMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockProtonAPI)(nil).DeleteService), arg0)
}

// DeleteServiceRequest mocks base method
func (m *MockProtonAPI) DeleteServiceRequest(arg0 *proton.DeleteServiceInput) (*request.Request, *proton.DeleteServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.DeleteServiceOutput)
	return ret0, ret1
}

// DeleteServiceRequest indicates an expected call of DeleteServiceRequest
func (mr *MockProtonAPIMockRecorder) DeleteServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceRequest", reflect.TypeOf((*MockProtonAPI)(nil).DeleteServiceRequest), arg0)
}

// DeleteServiceTemplate mocks base method
func (m *MockProtonAPI) DeleteServiceTemplate(arg0 *proton.DeleteServiceTemplateInput) (*proton.DeleteServiceTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceTemplate", arg0)
	ret0, _ := ret[0].(*proton.DeleteServiceTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceTemplate indicates an expected call of DeleteServiceTemplate
func (mr *MockProtonAPIMockRecorder) DeleteServiceTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceTemplate", reflect.TypeOf((*MockProtonAPI)(nil).DeleteServiceTemplate), arg0)
}

// DeleteServiceTemplateRequest mocks base method
func (m *MockProtonAPI) DeleteServiceTemplateRequest(arg0 *proton.DeleteServiceTemplateInput) (*request.Request, *proton.DeleteServiceTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.DeleteServiceTemplateOutput)
	return ret0, ret1
}

// DeleteServiceTemplateRequest indicates an expected call of DeleteServiceTemplateRequest
func (mr *MockProtonAPIMockRecorder) DeleteServiceTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceTemplateRequest", reflect.TypeOf((*MockProtonAPI)(nil).DeleteServiceTemplateRequest), arg0)
}

// DeleteServiceTemplateVersion mocks base method
func (m *MockProtonAPI) DeleteServiceTemplateVersion(arg0 *proton.DeleteServiceTemplateVersionInput) (*proton.DeleteServiceTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceTemplateVersion", arg0)
	ret0, _ := ret[0].(*proton.DeleteServiceTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceTemplateVersion indicates an expected call of DeleteServiceTemplateVersion
func (mr *MockProtonAPIMockRecorder) DeleteServiceTemplateVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceTemplateVersion", reflect.TypeOf((*MockProtonAPI)(nil).DeleteServiceTemplateVersion), arg0)
}

// DeleteServiceTemplateVersionRequest mocks base method
func (m *MockProtonAPI) DeleteServiceTemplateVersionRequest(arg0 *proton.DeleteServiceTemplateVersionInput) (*request.Request, *proton.DeleteServiceTemplateVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceTemplateVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.DeleteServiceTemplateVersionOutput)
	return ret0, ret1
}

// DeleteServiceTemplateVersionRequest indicates an expected call of DeleteServiceTemplateVersionRequest
func (mr *MockProtonAPIMockRecorder) DeleteServiceTemplateVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceTemplateVersionRequest", reflect.TypeOf((*MockProtonAPI)(nil).DeleteServiceTemplateVersionRequest), arg0)
}

// DeleteServiceTemplateVersionWithContext mocks base method
func (m *MockProtonAPI) DeleteServiceTemplateVersionWithContext(arg0 context.Context, arg1 *proton.DeleteServiceTemplateVersionInput, arg2 ...request.Option) (*proton.DeleteServiceTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceTemplateVersionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.DeleteServiceTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceTemplateVersionWithContext indicates an expected call of DeleteServiceTemplateVersionWithContext
func (mr *MockProtonAPIMockRecorder) DeleteServiceTemplateVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceTemplateVersionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).DeleteServiceTemplateVersionWithContext), varargs...)
}

// DeleteServiceTemplateWithContext mocks base method
func (m *MockProtonAPI) DeleteServiceTemplateWithContext(arg0 context.Context, arg1 *proton.DeleteServiceTemplateInput, arg2 ...request.Option) (*proton.DeleteServiceTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*proton.DeleteServiceTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceTemplateWithContext indicates an expected call of DeleteServiceTemplateWithContext
func (mr *MockProtonAPIMockRecorder) DeleteServiceTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceTemplateWithContext", reflect.TypeOf((*MockProtonAPI)(nil).DeleteServiceTemplateWithContext), varargs...)
}

// DeleteServiceWithContext mocks base method
func (m *MockProtonAPI) DeleteServiceWithContext(arg0 context.Context, arg1 *proton.DeleteServiceInput, arg2 ...request.Option) (*proton.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceWithContext", varargs...)
	ret0, _ := ret[0].(*proton.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceWithContext indicates an expected call of DeleteServiceWithContext
func (mr *MockProtonAPIMockRecorder) DeleteServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceWithContext", reflect.TypeOf((*MockProtonAPI)(nil).DeleteServiceWithContext), varargs...)
}

// GetAccountSettings mocks base method
func (m *MockProtonAPI) GetAccountSettings(arg0 *proton.GetAccountSettingsInput) (*proton.GetAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSettings", arg0)
	ret0, _ := ret[0].(*proton.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettings indicates an expected call of GetAccountSettings
func (mr *MockProtonAPIMockRecorder) GetAccountSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettings", reflect.TypeOf((*MockProtonAPI)(nil).GetAccountSettings), arg0)
}

// GetAccountSettingsRequest mocks base method
func (m *MockProtonAPI) GetAccountSettingsRequest(arg0 *proton.GetAccountSettingsInput) (*request.Request, *proton.GetAccountSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.GetAccountSettingsOutput)
	return ret0, ret1
}

// GetAccountSettingsRequest indicates an expected call of GetAccountSettingsRequest
func (mr *MockProtonAPIMockRecorder) GetAccountSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettingsRequest", reflect.TypeOf((*MockProtonAPI)(nil).GetAccountSettingsRequest), arg0)
}

// GetAccountSettingsWithContext mocks base method
func (m *MockProtonAPI) GetAccountSettingsWithContext(arg0 context.Context, arg1 *proton.GetAccountSettingsInput, arg2 ...request.Option) (*proton.GetAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*proton.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettingsWithContext indicates an expected call of GetAccountSettingsWithContext
func (mr *MockProtonAPIMockRecorder) GetAccountSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettingsWithContext", reflect.TypeOf((*MockProtonAPI)(nil).GetAccountSettingsWithContext), varargs...)
}

// GetEnvironment mocks base method
func (m *MockProtonAPI) GetEnvironment(arg0 *proton.GetEnvironmentInput) (*proton.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0)
	ret0, _ := ret[0].(*proton.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockProtonAPIMockRecorder) GetEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironment), arg0)
}

// GetEnvironmentAccountConnection mocks base method
func (m *MockProtonAPI) GetEnvironmentAccountConnection(arg0 *proton.GetEnvironmentAccountConnectionInput) (*proton.GetEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentAccountConnection", arg0)
	ret0, _ := ret[0].(*proton.GetEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentAccountConnection indicates an expected call of GetEnvironmentAccountConnection
func (mr *MockProtonAPIMockRecorder) GetEnvironmentAccountConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentAccountConnection", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentAccountConnection), arg0)
}

// GetEnvironmentAccountConnectionRequest mocks base method
func (m *MockProtonAPI) GetEnvironmentAccountConnectionRequest(arg0 *proton.GetEnvironmentAccountConnectionInput) (*request.Request, *proton.GetEnvironmentAccountConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentAccountConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.GetEnvironmentAccountConnectionOutput)
	return ret0, ret1
}

// GetEnvironmentAccountConnectionRequest indicates an expected call of GetEnvironmentAccountConnectionRequest
func (mr *MockProtonAPIMockRecorder) GetEnvironmentAccountConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentAccountConnectionRequest", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentAccountConnectionRequest), arg0)
}

// GetEnvironmentAccountConnectionWithContext mocks base method
func (m *MockProtonAPI) GetEnvironmentAccountConnectionWithContext(arg0 context.Context, arg1 *proton.GetEnvironmentAccountConnectionInput, arg2 ...request.Option) (*proton.GetEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentAccountConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.GetEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentAccountConnectionWithContext indicates an expected call of GetEnvironmentAccountConnectionWithContext
func (mr *MockProtonAPIMockRecorder) GetEnvironmentAccountConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentAccountConnectionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentAccountConnectionWithContext), varargs...)
}

// GetEnvironmentRequest mocks base method
func (m *MockProtonAPI) GetEnvironmentRequest(arg0 *proton.GetEnvironmentInput) (*request.Request, *proton.GetEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.GetEnvironmentOutput)
	return ret0, ret1
}

// GetEnvironmentRequest indicates an expected call of GetEnvironmentRequest
func (mr *MockProtonAPIMockRecorder) GetEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentRequest", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentRequest), arg0)
}

// GetEnvironmentTemplate mocks base method
func (m *MockProtonAPI) GetEnvironmentTemplate(arg0 *proton.GetEnvironmentTemplateInput) (*proton.GetEnvironmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentTemplate", arg0)
	ret0, _ := ret[0].(*proton.GetEnvironmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentTemplate indicates an expected call of GetEnvironmentTemplate
func (mr *MockProtonAPIMockRecorder) GetEnvironmentTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentTemplate", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentTemplate), arg0)
}

// GetEnvironmentTemplateRequest mocks base method
func (m *MockProtonAPI) GetEnvironmentTemplateRequest(arg0 *proton.GetEnvironmentTemplateInput) (*request.Request, *proton.GetEnvironmentTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.GetEnvironmentTemplateOutput)
	return ret0, ret1
}

// GetEnvironmentTemplateRequest indicates an expected call of GetEnvironmentTemplateRequest
func (mr *MockProtonAPIMockRecorder) GetEnvironmentTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentTemplateRequest", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentTemplateRequest), arg0)
}

// GetEnvironmentTemplateVersion mocks base method
func (m *MockProtonAPI) GetEnvironmentTemplateVersion(arg0 *proton.GetEnvironmentTemplateVersionInput) (*proton.GetEnvironmentTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentTemplateVersion", arg0)
	ret0, _ := ret[0].(*proton.GetEnvironmentTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentTemplateVersion indicates an expected call of GetEnvironmentTemplateVersion
func (mr *MockProtonAPIMockRecorder) GetEnvironmentTemplateVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentTemplateVersion", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentTemplateVersion), arg0)
}

// GetEnvironmentTemplateVersionRequest mocks base method
func (m *MockProtonAPI) GetEnvironmentTemplateVersionRequest(arg0 *proton.GetEnvironmentTemplateVersionInput) (*request.Request, *proton.GetEnvironmentTemplateVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentTemplateVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.GetEnvironmentTemplateVersionOutput)
	return ret0, ret1
}

// GetEnvironmentTemplateVersionRequest indicates an expected call of GetEnvironmentTemplateVersionRequest
func (mr *MockProtonAPIMockRecorder) GetEnvironmentTemplateVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentTemplateVersionRequest", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentTemplateVersionRequest), arg0)
}

// GetEnvironmentTemplateVersionWithContext mocks base method
func (m *MockProtonAPI) GetEnvironmentTemplateVersionWithContext(arg0 context.Context, arg1 *proton.GetEnvironmentTemplateVersionInput, arg2 ...request.Option) (*proton.GetEnvironmentTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentTemplateVersionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.GetEnvironmentTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentTemplateVersionWithContext indicates an expected call of GetEnvironmentTemplateVersionWithContext
func (mr *MockProtonAPIMockRecorder) GetEnvironmentTemplateVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentTemplateVersionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentTemplateVersionWithContext), varargs...)
}

// GetEnvironmentTemplateWithContext mocks base method
func (m *MockProtonAPI) GetEnvironmentTemplateWithContext(arg0 context.Context, arg1 *proton.GetEnvironmentTemplateInput, arg2 ...request.Option) (*proton.GetEnvironmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*proton.GetEnvironmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentTemplateWithContext indicates an expected call of GetEnvironmentTemplateWithContext
func (mr *MockProtonAPIMockRecorder) GetEnvironmentTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentTemplateWithContext", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentTemplateWithContext), varargs...)
}

// GetEnvironmentWithContext mocks base method
func (m *MockProtonAPI) GetEnvironmentWithContext(arg0 context.Context, arg1 *proton.GetEnvironmentInput, arg2 ...request.Option) (*proton.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*proton.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentWithContext indicates an expected call of GetEnvironmentWithContext
func (mr *MockProtonAPIMockRecorder) GetEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentWithContext", reflect.TypeOf((*MockProtonAPI)(nil).GetEnvironmentWithContext), varargs...)
}

// GetService mocks base method
func (m *MockProtonAPI) GetService(arg0 *proton.GetServiceInput) (*proton.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].(*proton.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockProtonAPIMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockProtonAPI)(nil).GetService), arg0)
}

// GetServiceInstance mocks base method
func (m *MockProtonAPI) GetServiceInstance(arg0 *proton.GetServiceInstanceInput) (*proton.GetServiceInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInstance", arg0)
	ret0, _ := ret[0].(*proton.GetServiceInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceInstance indicates an expected call of GetServiceInstance
func (mr *MockProtonAPIMockRecorder) GetServiceInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInstance", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceInstance), arg0)
}

// GetServiceInstanceRequest mocks base method
func (m *MockProtonAPI) GetServiceInstanceRequest(arg0 *proton.GetServiceInstanceInput) (*request.Request, *proton.GetServiceInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.GetServiceInstanceOutput)
	return ret0, ret1
}

// GetServiceInstanceRequest indicates an expected call of GetServiceInstanceRequest
func (mr *MockProtonAPIMockRecorder) GetServiceInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInstanceRequest", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceInstanceRequest), arg0)
}

// GetServiceInstanceWithContext mocks base method
func (m *MockProtonAPI) GetServiceInstanceWithContext(arg0 context.Context, arg1 *proton.GetServiceInstanceInput, arg2 ...request.Option) (*proton.GetServiceInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*proton.GetServiceInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceInstanceWithContext indicates an expected call of GetServiceInstanceWithContext
func (mr *MockProtonAPIMockRecorder) GetServiceInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInstanceWithContext", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceInstanceWithContext), varargs...)
}

// GetServiceRequest mocks base method
func (m *MockProtonAPI) GetServiceRequest(arg0 *proton.GetServiceInput) (*request.Request, *proton.GetServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.GetServiceOutput)
	return ret0, ret1
}

// GetServiceRequest indicates an expected call of GetServiceRequest
func (mr *MockProtonAPIMockRecorder) GetServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceRequest", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceRequest), arg0)
}

// GetServiceTemplate mocks base method
func (m *MockProtonAPI) GetServiceTemplate(arg0 *proton.GetServiceTemplateInput) (*proton.GetServiceTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceTemplate", arg0)
	ret0, _ := ret[0].(*proton.GetServiceTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceTemplate indicates an expected call of GetServiceTemplate
func (mr *MockProtonAPIMockRecorder) GetServiceTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceTemplate", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceTemplate), arg0)
}

// GetServiceTemplateRequest mocks base method
func (m *MockProtonAPI) GetServiceTemplateRequest(arg0 *proton.GetServiceTemplateInput) (*request.Request, *proton.GetServiceTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.GetServiceTemplateOutput)
	return ret0, ret1
}

// GetServiceTemplateRequest indicates an expected call of GetServiceTemplateRequest
func (mr *MockProtonAPIMockRecorder) GetServiceTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceTemplateRequest", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceTemplateRequest), arg0)
}

// GetServiceTemplateVersion mocks base method
func (m *MockProtonAPI) GetServiceTemplateVersion(arg0 *proton.GetServiceTemplateVersionInput) (*proton.GetServiceTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceTemplateVersion", arg0)
	ret0, _ := ret[0].(*proton.GetServiceTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceTemplateVersion indicates an expected call of GetServiceTemplateVersion
func (mr *MockProtonAPIMockRecorder) GetServiceTemplateVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceTemplateVersion", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceTemplateVersion), arg0)
}

// GetServiceTemplateVersionRequest mocks base method
func (m *MockProtonAPI) GetServiceTemplateVersionRequest(arg0 *proton.GetServiceTemplateVersionInput) (*request.Request, *proton.GetServiceTemplateVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceTemplateVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.GetServiceTemplateVersionOutput)
	return ret0, ret1
}

// GetServiceTemplateVersionRequest indicates an expected call of GetServiceTemplateVersionRequest
func (mr *MockProtonAPIMockRecorder) GetServiceTemplateVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceTemplateVersionRequest", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceTemplateVersionRequest), arg0)
}

// GetServiceTemplateVersionWithContext mocks base method
func (m *MockProtonAPI) GetServiceTemplateVersionWithContext(arg0 context.Context, arg1 *proton.GetServiceTemplateVersionInput, arg2 ...request.Option) (*proton.GetServiceTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceTemplateVersionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.GetServiceTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceTemplateVersionWithContext indicates an expected call of GetServiceTemplateVersionWithContext
func (mr *MockProtonAPIMockRecorder) GetServiceTemplateVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceTemplateVersionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceTemplateVersionWithContext), varargs...)
}

// GetServiceTemplateWithContext mocks base method
func (m *MockProtonAPI) GetServiceTemplateWithContext(arg0 context.Context, arg1 *proton.GetServiceTemplateInput, arg2 ...request.Option) (*proton.GetServiceTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*proton.GetServiceTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceTemplateWithContext indicates an expected call of GetServiceTemplateWithContext
func (mr *MockProtonAPIMockRecorder) GetServiceTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceTemplateWithContext", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceTemplateWithContext), varargs...)
}

// GetServiceWithContext mocks base method
func (m *MockProtonAPI) GetServiceWithContext(arg0 context.Context, arg1 *proton.GetServiceInput, arg2 ...request.Option) (*proton.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceWithContext", varargs...)
	ret0, _ := ret[0].(*proton.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceWithContext indicates an expected call of GetServiceWithContext
func (mr *MockProtonAPIMockRecorder) GetServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceWithContext", reflect.TypeOf((*MockProtonAPI)(nil).GetServiceWithContext), varargs...)
}

// ListEnvironmentAccountConnections mocks base method
func (m *MockProtonAPI) ListEnvironmentAccountConnections(arg0 *proton.ListEnvironmentAccountConnectionsInput) (*proton.ListEnvironmentAccountConnectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentAccountConnections", arg0)
	ret0, _ := ret[0].(*proton.ListEnvironmentAccountConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentAccountConnections indicates an expected call of ListEnvironmentAccountConnections
func (mr *MockProtonAPIMockRecorder) ListEnvironmentAccountConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentAccountConnections", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentAccountConnections), arg0)
}

// ListEnvironmentAccountConnectionsPages mocks base method
func (m *MockProtonAPI) ListEnvironmentAccountConnectionsPages(arg0 *proton.ListEnvironmentAccountConnectionsInput, arg1 func(*proton.ListEnvironmentAccountConnectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentAccountConnectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentAccountConnectionsPages indicates an expected call of ListEnvironmentAccountConnectionsPages
func (mr *MockProtonAPIMockRecorder) ListEnvironmentAccountConnectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentAccountConnectionsPages", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentAccountConnectionsPages), arg0, arg1)
}

// ListEnvironmentAccountConnectionsPagesWithContext mocks base method
func (m *MockProtonAPI) ListEnvironmentAccountConnectionsPagesWithContext(arg0 context.Context, arg1 *proton.ListEnvironmentAccountConnectionsInput, arg2 func(*proton.ListEnvironmentAccountConnectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentAccountConnectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentAccountConnectionsPagesWithContext indicates an expected call of ListEnvironmentAccountConnectionsPagesWithContext
func (mr *MockProtonAPIMockRecorder) ListEnvironmentAccountConnectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentAccountConnectionsPagesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentAccountConnectionsPagesWithContext), varargs...)
}

// ListEnvironmentAccountConnectionsRequest mocks base method
func (m *MockProtonAPI) ListEnvironmentAccountConnectionsRequest(arg0 *proton.ListEnvironmentAccountConnectionsInput) (*request.Request, *proton.ListEnvironmentAccountConnectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentAccountConnectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.ListEnvironmentAccountConnectionsOutput)
	return ret0, ret1
}

// ListEnvironmentAccountConnectionsRequest indicates an expected call of ListEnvironmentAccountConnectionsRequest
func (mr *MockProtonAPIMockRecorder) ListEnvironmentAccountConnectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentAccountConnectionsRequest", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentAccountConnectionsRequest), arg0)
}

// ListEnvironmentAccountConnectionsWithContext mocks base method
func (m *MockProtonAPI) ListEnvironmentAccountConnectionsWithContext(arg0 context.Context, arg1 *proton.ListEnvironmentAccountConnectionsInput, arg2 ...request.Option) (*proton.ListEnvironmentAccountConnectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentAccountConnectionsWithContext", varargs...)
	ret0, _ := ret[0].(*proton.ListEnvironmentAccountConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentAccountConnectionsWithContext indicates an expected call of ListEnvironmentAccountConnectionsWithContext
func (mr *MockProtonAPIMockRecorder) ListEnvironmentAccountConnectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentAccountConnectionsWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentAccountConnectionsWithContext), varargs...)
}

// ListEnvironmentTemplateVersions mocks base method
func (m *MockProtonAPI) ListEnvironmentTemplateVersions(arg0 *proton.ListEnvironmentTemplateVersionsInput) (*proton.ListEnvironmentTemplateVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentTemplateVersions", arg0)
	ret0, _ := ret[0].(*proton.ListEnvironmentTemplateVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentTemplateVersions indicates an expected call of ListEnvironmentTemplateVersions
func (mr *MockProtonAPIMockRecorder) ListEnvironmentTemplateVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentTemplateVersions", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentTemplateVersions), arg0)
}

// ListEnvironmentTemplateVersionsPages mocks base method
func (m *MockProtonAPI) ListEnvironmentTemplateVersionsPages(arg0 *proton.ListEnvironmentTemplateVersionsInput, arg1 func(*proton.ListEnvironmentTemplateVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentTemplateVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentTemplateVersionsPages indicates an expected call of ListEnvironmentTemplateVersionsPages
func (mr *MockProtonAPIMockRecorder) ListEnvironmentTemplateVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentTemplateVersionsPages", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentTemplateVersionsPages), arg0, arg1)
}

// ListEnvironmentTemplateVersionsPagesWithContext mocks base method
func (m *MockProtonAPI) ListEnvironmentTemplateVersionsPagesWithContext(arg0 context.Context, arg1 *proton.ListEnvironmentTemplateVersionsInput, arg2 func(*proton.ListEnvironmentTemplateVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentTemplateVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentTemplateVersionsPagesWithContext indicates an expected call of ListEnvironmentTemplateVersionsPagesWithContext
func (mr *MockProtonAPIMockRecorder) ListEnvironmentTemplateVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentTemplateVersionsPagesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentTemplateVersionsPagesWithContext), varargs...)
}

// ListEnvironmentTemplateVersionsRequest mocks base method
func (m *MockProtonAPI) ListEnvironmentTemplateVersionsRequest(arg0 *proton.ListEnvironmentTemplateVersionsInput) (*request.Request, *proton.ListEnvironmentTemplateVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentTemplateVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.ListEnvironmentTemplateVersionsOutput)
	return ret0, ret1
}

// ListEnvironmentTemplateVersionsRequest indicates an expected call of ListEnvironmentTemplateVersionsRequest
func (mr *MockProtonAPIMockRecorder) ListEnvironmentTemplateVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentTemplateVersionsRequest", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentTemplateVersionsRequest), arg0)
}

// ListEnvironmentTemplateVersionsWithContext mocks base method
func (m *MockProtonAPI) ListEnvironmentTemplateVersionsWithContext(arg0 context.Context, arg1 *proton.ListEnvironmentTemplateVersionsInput, arg2 ...request.Option) (*proton.ListEnvironmentTemplateVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentTemplateVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*proton.ListEnvironmentTemplateVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentTemplateVersionsWithContext indicates an expected call of ListEnvironmentTemplateVersionsWithContext
func (mr *MockProtonAPIMockRecorder) ListEnvironmentTemplateVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentTemplateVersionsWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentTemplateVersionsWithContext), varargs...)
}

// ListEnvironmentTemplates mocks base method
func (m *MockProtonAPI) ListEnvironmentTemplates(arg0 *proton.ListEnvironmentTemplatesInput) (*proton.ListEnvironmentTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentTemplates", arg0)
	ret0, _ := ret[0].(*proton.ListEnvironmentTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentTemplates indicates an expected call of ListEnvironmentTemplates
func (mr *MockProtonAPIMockRecorder) ListEnvironmentTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentTemplates", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentTemplates), arg0)
}

// ListEnvironmentTemplatesPages mocks base method
func (m *MockProtonAPI) ListEnvironmentTemplatesPages(arg0 *proton.ListEnvironmentTemplatesInput, arg1 func(*proton.ListEnvironmentTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentTemplatesPages indicates an expected call of ListEnvironmentTemplatesPages
func (mr *MockProtonAPIMockRecorder) ListEnvironmentTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentTemplatesPages", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentTemplatesPages), arg0, arg1)
}

// ListEnvironmentTemplatesPagesWithContext mocks base method
func (m *MockProtonAPI) ListEnvironmentTemplatesPagesWithContext(arg0 context.Context, arg1 *proton.ListEnvironmentTemplatesInput, arg2 func(*proton.ListEnvironmentTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentTemplatesPagesWithContext indicates an expected call of ListEnvironmentTemplatesPagesWithContext
func (mr *MockProtonAPIMockRecorder) ListEnvironmentTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentTemplatesPagesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentTemplatesPagesWithContext), varargs...)
}

// ListEnvironmentTemplatesRequest mocks base method
func (m *MockProtonAPI) ListEnvironmentTemplatesRequest(arg0 *proton.ListEnvironmentTemplatesInput) (*request.Request, *proton.ListEnvironmentTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.ListEnvironmentTemplatesOutput)
	return ret0, ret1
}

// ListEnvironmentTemplatesRequest indicates an expected call of ListEnvironmentTemplatesRequest
func (mr *MockProtonAPIMockRecorder) ListEnvironmentTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentTemplatesRequest", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentTemplatesRequest), arg0)
}

// ListEnvironmentTemplatesWithContext mocks base method
func (m *MockProtonAPI) ListEnvironmentTemplatesWithContext(arg0 context.Context, arg1 *proton.ListEnvironmentTemplatesInput, arg2 ...request.Option) (*proton.ListEnvironmentTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*proton.ListEnvironmentTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentTemplatesWithContext indicates an expected call of ListEnvironmentTemplatesWithContext
func (mr *MockProtonAPIMockRecorder) ListEnvironmentTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentTemplatesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentTemplatesWithContext), varargs...)
}

// ListEnvironments mocks base method
func (m *MockProtonAPI) ListEnvironments(arg0 *proton.ListEnvironmentsInput) (*proton.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0)
	ret0, _ := ret[0].(*proton.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockProtonAPIMockRecorder) ListEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironments), arg0)
}

// ListEnvironmentsPages mocks base method
func (m *MockProtonAPI) ListEnvironmentsPages(arg0 *proton.ListEnvironmentsInput, arg1 func(*proton.ListEnvironmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPages indicates an expected call of ListEnvironmentsPages
func (mr *MockProtonAPIMockRecorder) ListEnvironmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPages", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentsPages), arg0, arg1)
}

// ListEnvironmentsPagesWithContext mocks base method
func (m *MockProtonAPI) ListEnvironmentsPagesWithContext(arg0 context.Context, arg1 *proton.ListEnvironmentsInput, arg2 func(*proton.ListEnvironmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPagesWithContext indicates an expected call of ListEnvironmentsPagesWithContext
func (mr *MockProtonAPIMockRecorder) ListEnvironmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPagesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentsPagesWithContext), varargs...)
}

// ListEnvironmentsRequest mocks base method
func (m *MockProtonAPI) ListEnvironmentsRequest(arg0 *proton.ListEnvironmentsInput) (*request.Request, *proton.ListEnvironmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.ListEnvironmentsOutput)
	return ret0, ret1
}

// ListEnvironmentsRequest indicates an expected call of ListEnvironmentsRequest
func (mr *MockProtonAPIMockRecorder) ListEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsRequest", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentsRequest), arg0)
}

// ListEnvironmentsWithContext mocks base method
func (m *MockProtonAPI) ListEnvironmentsWithContext(arg0 context.Context, arg1 *proton.ListEnvironmentsInput, arg2 ...request.Option) (*proton.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*proton.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsWithContext indicates an expected call of ListEnvironmentsWithContext
func (mr *MockProtonAPIMockRecorder) ListEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListEnvironmentsWithContext), varargs...)
}

// ListServiceInstances mocks base method
func (m *MockProtonAPI) ListServiceInstances(arg0 *proton.ListServiceInstancesInput) (*proton.ListServiceInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceInstances", arg0)
	ret0, _ := ret[0].(*proton.ListServiceInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceInstances indicates an expected call of ListServiceInstances
func (mr *MockProtonAPIMockRecorder) ListServiceInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceInstances", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceInstances), arg0)
}

// ListServiceInstancesPages mocks base method
func (m *MockProtonAPI) ListServiceInstancesPages(arg0 *proton.ListServiceInstancesInput, arg1 func(*proton.ListServiceInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceInstancesPages indicates an expected call of ListServiceInstancesPages
func (mr *MockProtonAPIMockRecorder) ListServiceInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceInstancesPages", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceInstancesPages), arg0, arg1)
}

// ListServiceInstancesPagesWithContext mocks base method
func (m *MockProtonAPI) ListServiceInstancesPagesWithContext(arg0 context.Context, arg1 *proton.ListServiceInstancesInput, arg2 func(*proton.ListServiceInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceInstancesPagesWithContext indicates an expected call of ListServiceInstancesPagesWithContext
func (mr *MockProtonAPIMockRecorder) ListServiceInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceInstancesPagesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceInstancesPagesWithContext), varargs...)
}

// ListServiceInstancesRequest mocks base method
func (m *MockProtonAPI) ListServiceInstancesRequest(arg0 *proton.ListServiceInstancesInput) (*request.Request, *proton.ListServiceInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.ListServiceInstancesOutput)
	return ret0, ret1
}

// ListServiceInstancesRequest indicates an expected call of ListServiceInstancesRequest
func (mr *MockProtonAPIMockRecorder) ListServiceInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceInstancesRequest", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceInstancesRequest), arg0)
}

// ListServiceInstancesWithContext mocks base method
func (m *MockProtonAPI) ListServiceInstancesWithContext(arg0 context.Context, arg1 *proton.ListServiceInstancesInput, arg2 ...request.Option) (*proton.ListServiceInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*proton.ListServiceInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceInstancesWithContext indicates an expected call of ListServiceInstancesWithContext
func (mr *MockProtonAPIMockRecorder) ListServiceInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceInstancesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceInstancesWithContext), varargs...)
}

// ListServiceTemplateVersions mocks base method
func (m *MockProtonAPI) ListServiceTemplateVersions(arg0 *proton.ListServiceTemplateVersionsInput) (*proton.ListServiceTemplateVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceTemplateVersions", arg0)
	ret0, _ := ret[0].(*proton.ListServiceTemplateVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceTemplateVersions indicates an expected call of ListServiceTemplateVersions
func (mr *MockProtonAPIMockRecorder) ListServiceTemplateVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceTemplateVersions", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceTemplateVersions), arg0)
}

// ListServiceTemplateVersionsPages mocks base method
func (m *MockProtonAPI) ListServiceTemplateVersionsPages(arg0 *proton.ListServiceTemplateVersionsInput, arg1 func(*proton.ListServiceTemplateVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceTemplateVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceTemplateVersionsPages indicates an expected call of ListServiceTemplateVersionsPages
func (mr *MockProtonAPIMockRecorder) ListServiceTemplateVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceTemplateVersionsPages", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceTemplateVersionsPages), arg0, arg1)
}

// ListServiceTemplateVersionsPagesWithContext mocks base method
func (m *MockProtonAPI) ListServiceTemplateVersionsPagesWithContext(arg0 context.Context, arg1 *proton.ListServiceTemplateVersionsInput, arg2 func(*proton.ListServiceTemplateVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceTemplateVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceTemplateVersionsPagesWithContext indicates an expected call of ListServiceTemplateVersionsPagesWithContext
func (mr *MockProtonAPIMockRecorder) ListServiceTemplateVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceTemplateVersionsPagesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceTemplateVersionsPagesWithContext), varargs...)
}

// ListServiceTemplateVersionsRequest mocks base method
func (m *MockProtonAPI) ListServiceTemplateVersionsRequest(arg0 *proton.ListServiceTemplateVersionsInput) (*request.Request, *proton.ListServiceTemplateVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceTemplateVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.ListServiceTemplateVersionsOutput)
	return ret0, ret1
}

// ListServiceTemplateVersionsRequest indicates an expected call of ListServiceTemplateVersionsRequest
func (mr *MockProtonAPIMockRecorder) ListServiceTemplateVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceTemplateVersionsRequest", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceTemplateVersionsRequest), arg0)
}

// ListServiceTemplateVersionsWithContext mocks base method
func (m *MockProtonAPI) ListServiceTemplateVersionsWithContext(arg0 context.Context, arg1 *proton.ListServiceTemplateVersionsInput, arg2 ...request.Option) (*proton.ListServiceTemplateVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceTemplateVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*proton.ListServiceTemplateVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceTemplateVersionsWithContext indicates an expected call of ListServiceTemplateVersionsWithContext
func (mr *MockProtonAPIMockRecorder) ListServiceTemplateVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceTemplateVersionsWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceTemplateVersionsWithContext), varargs...)
}

// ListServiceTemplates mocks base method
func (m *MockProtonAPI) ListServiceTemplates(arg0 *proton.ListServiceTemplatesInput) (*proton.ListServiceTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceTemplates", arg0)
	ret0, _ := ret[0].(*proton.ListServiceTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceTemplates indicates an expected call of ListServiceTemplates
func (mr *MockProtonAPIMockRecorder) ListServiceTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceTemplates", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceTemplates), arg0)
}

// ListServiceTemplatesPages mocks base method
func (m *MockProtonAPI) ListServiceTemplatesPages(arg0 *proton.ListServiceTemplatesInput, arg1 func(*proton.ListServiceTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceTemplatesPages indicates an expected call of ListServiceTemplatesPages
func (mr *MockProtonAPIMockRecorder) ListServiceTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceTemplatesPages", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceTemplatesPages), arg0, arg1)
}

// ListServiceTemplatesPagesWithContext mocks base method
func (m *MockProtonAPI) ListServiceTemplatesPagesWithContext(arg0 context.Context, arg1 *proton.ListServiceTemplatesInput, arg2 func(*proton.ListServiceTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceTemplatesPagesWithContext indicates an expected call of ListServiceTemplatesPagesWithContext
func (mr *MockProtonAPIMockRecorder) ListServiceTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceTemplatesPagesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceTemplatesPagesWithContext), varargs...)
}

// ListServiceTemplatesRequest mocks base method
func (m *MockProtonAPI) ListServiceTemplatesRequest(arg0 *proton.ListServiceTemplatesInput) (*request.Request, *proton.ListServiceTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.ListServiceTemplatesOutput)
	return ret0, ret1
}

// ListServiceTemplatesRequest indicates an expected call of ListServiceTemplatesRequest
func (mr *MockProtonAPIMockRecorder) ListServiceTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceTemplatesRequest", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceTemplatesRequest), arg0)
}

// ListServiceTemplatesWithContext mocks base method
func (m *MockProtonAPI) ListServiceTemplatesWithContext(arg0 context.Context, arg1 *proton.ListServiceTemplatesInput, arg2 ...request.Option) (*proton.ListServiceTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*proton.ListServiceTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceTemplatesWithContext indicates an expected call of ListServiceTemplatesWithContext
func (mr *MockProtonAPIMockRecorder) ListServiceTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceTemplatesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListServiceTemplatesWithContext), varargs...)
}

// ListServices mocks base method
func (m *MockProtonAPI) ListServices(arg0 *proton.ListServicesInput) (*proton.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0)
	ret0, _ := ret[0].(*proton.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockProtonAPIMockRecorder) ListServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockProtonAPI)(nil).ListServices), arg0)
}

// ListServicesPages mocks base method
func (m *MockProtonAPI) ListServicesPages(arg0 *proton.ListServicesInput, arg1 func(*proton.ListServicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPages indicates an expected call of ListServicesPages
func (mr *MockProtonAPIMockRecorder) ListServicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPages", reflect.TypeOf((*MockProtonAPI)(nil).ListServicesPages), arg0, arg1)
}

// ListServicesPagesWithContext mocks base method
func (m *MockProtonAPI) ListServicesPagesWithContext(arg0 context.Context, arg1 *proton.ListServicesInput, arg2 func(*proton.ListServicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPagesWithContext indicates an expected call of ListServicesPagesWithContext
func (mr *MockProtonAPIMockRecorder) ListServicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPagesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListServicesPagesWithContext), varargs...)
}

// ListServicesRequest mocks base method
func (m *MockProtonAPI) ListServicesRequest(arg0 *proton.ListServicesInput) (*request.Request, *proton.ListServicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.ListServicesOutput)
	return ret0, ret1
}

// ListServicesRequest indicates an expected call of ListServicesRequest
func (mr *MockProtonAPIMockRecorder) ListServicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesRequest", reflect.TypeOf((*MockProtonAPI)(nil).ListServicesRequest), arg0)
}

// ListServicesWithContext mocks base method
func (m *MockProtonAPI) ListServicesWithContext(arg0 context.Context, arg1 *proton.ListServicesInput, arg2 ...request.Option) (*proton.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesWithContext", varargs...)
	ret0, _ := ret[0].(*proton.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesWithContext indicates an expected call of ListServicesWithContext
func (mr *MockProtonAPIMockRecorder) ListServicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListServicesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockProtonAPI) ListTagsForResource(arg0 *proton.ListTagsForResourceInput) (*proton.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*proton.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockProtonAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockProtonAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method
func (m *MockProtonAPI) ListTagsForResourcePages(arg0 *proton.ListTagsForResourceInput, arg1 func(*proton.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages
func (mr *MockProtonAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockProtonAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method
func (m *MockProtonAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *proton.ListTagsForResourceInput, arg2 func(*proton.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext
func (mr *MockProtonAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method
func (m *MockProtonAPI) ListTagsForResourceRequest(arg0 *proton.ListTagsForResourceInput) (*request.Request, *proton.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockProtonAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockProtonAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockProtonAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *proton.ListTagsForResourceInput, arg2 ...request.Option) (*proton.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*proton.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockProtonAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockProtonAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RejectEnvironmentAccountConnection mocks base method
func (m *MockProtonAPI) RejectEnvironmentAccountConnection(arg0 *proton.RejectEnvironmentAccountConnectionInput) (*proton.RejectEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectEnvironmentAccountConnection", arg0)
	ret0, _ := ret[0].(*proton.RejectEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectEnvironmentAccountConnection indicates an expected call of RejectEnvironmentAccountConnection
func (mr *MockProtonAPIMockRecorder) RejectEnvironmentAccountConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectEnvironmentAccountConnection", reflect.TypeOf((*MockProtonAPI)(nil).RejectEnvironmentAccountConnection), arg0)
}

// RejectEnvironmentAccountConnectionRequest mocks base method
func (m *MockProtonAPI) RejectEnvironmentAccountConnectionRequest(arg0 *proton.RejectEnvironmentAccountConnectionInput) (*request.Request, *proton.RejectEnvironmentAccountConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectEnvironmentAccountConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.RejectEnvironmentAccountConnectionOutput)
	return ret0, ret1
}

// RejectEnvironmentAccountConnectionRequest indicates an expected call of RejectEnvironmentAccountConnectionRequest
func (mr *MockProtonAPIMockRecorder) RejectEnvironmentAccountConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectEnvironmentAccountConnectionRequest", reflect.TypeOf((*MockProtonAPI)(nil).RejectEnvironmentAccountConnectionRequest), arg0)
}

// RejectEnvironmentAccountConnectionWithContext mocks base method
func (m *MockProtonAPI) RejectEnvironmentAccountConnectionWithContext(arg0 context.Context, arg1 *proton.RejectEnvironmentAccountConnectionInput, arg2 ...request.Option) (*proton.RejectEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectEnvironmentAccountConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.RejectEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectEnvironmentAccountConnectionWithContext indicates an expected call of RejectEnvironmentAccountConnectionWithContext
func (mr *MockProtonAPIMockRecorder) RejectEnvironmentAccountConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectEnvironmentAccountConnectionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).RejectEnvironmentAccountConnectionWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockProtonAPI) TagResource(arg0 *proton.TagResourceInput) (*proton.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*proton.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockProtonAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockProtonAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockProtonAPI) TagResourceRequest(arg0 *proton.TagResourceInput) (*request.Request, *proton.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockProtonAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockProtonAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockProtonAPI) TagResourceWithContext(arg0 context.Context, arg1 *proton.TagResourceInput, arg2 ...request.Option) (*proton.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*proton.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockProtonAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockProtonAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockProtonAPI) UntagResource(arg0 *proton.UntagResourceInput) (*proton.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*proton.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockProtonAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockProtonAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockProtonAPI) UntagResourceRequest(arg0 *proton.UntagResourceInput) (*request.Request, *proton.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockProtonAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockProtonAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockProtonAPI) UntagResourceWithContext(arg0 context.Context, arg1 *proton.UntagResourceInput, arg2 ...request.Option) (*proton.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockProtonAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAccountSettings mocks base method
func (m *MockProtonAPI) UpdateAccountSettings(arg0 *proton.UpdateAccountSettingsInput) (*proton.UpdateAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountSettings", arg0)
	ret0, _ := ret[0].(*proton.UpdateAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountSettings indicates an expected call of UpdateAccountSettings
func (mr *MockProtonAPIMockRecorder) UpdateAccountSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountSettings", reflect.TypeOf((*MockProtonAPI)(nil).UpdateAccountSettings), arg0)
}

// UpdateAccountSettingsRequest mocks base method
func (m *MockProtonAPI) UpdateAccountSettingsRequest(arg0 *proton.UpdateAccountSettingsInput) (*request.Request, *proton.UpdateAccountSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UpdateAccountSettingsOutput)
	return ret0, ret1
}

// UpdateAccountSettingsRequest indicates an expected call of UpdateAccountSettingsRequest
func (mr *MockProtonAPIMockRecorder) UpdateAccountSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountSettingsRequest", reflect.TypeOf((*MockProtonAPI)(nil).UpdateAccountSettingsRequest), arg0)
}

// UpdateAccountSettingsWithContext mocks base method
func (m *MockProtonAPI) UpdateAccountSettingsWithContext(arg0 context.Context, arg1 *proton.UpdateAccountSettingsInput, arg2 ...request.Option) (*proton.UpdateAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccountSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UpdateAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountSettingsWithContext indicates an expected call of UpdateAccountSettingsWithContext
func (mr *MockProtonAPIMockRecorder) UpdateAccountSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountSettingsWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UpdateAccountSettingsWithContext), varargs...)
}

// UpdateEnvironment mocks base method
func (m *MockProtonAPI) UpdateEnvironment(arg0 *proton.UpdateEnvironmentInput) (*proton.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0)
	ret0, _ := ret[0].(*proton.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockProtonAPIMockRecorder) UpdateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironment), arg0)
}

// UpdateEnvironmentAccountConnection mocks base method
func (m *MockProtonAPI) UpdateEnvironmentAccountConnection(arg0 *proton.UpdateEnvironmentAccountConnectionInput) (*proton.UpdateEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentAccountConnection", arg0)
	ret0, _ := ret[0].(*proton.UpdateEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentAccountConnection indicates an expected call of UpdateEnvironmentAccountConnection
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentAccountConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentAccountConnection", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentAccountConnection), arg0)
}

// UpdateEnvironmentAccountConnectionRequest mocks base method
func (m *MockProtonAPI) UpdateEnvironmentAccountConnectionRequest(arg0 *proton.UpdateEnvironmentAccountConnectionInput) (*request.Request, *proton.UpdateEnvironmentAccountConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentAccountConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UpdateEnvironmentAccountConnectionOutput)
	return ret0, ret1
}

// UpdateEnvironmentAccountConnectionRequest indicates an expected call of UpdateEnvironmentAccountConnectionRequest
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentAccountConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentAccountConnectionRequest", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentAccountConnectionRequest), arg0)
}

// UpdateEnvironmentAccountConnectionWithContext mocks base method
func (m *MockProtonAPI) UpdateEnvironmentAccountConnectionWithContext(arg0 context.Context, arg1 *proton.UpdateEnvironmentAccountConnectionInput, arg2 ...request.Option) (*proton.UpdateEnvironmentAccountConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentAccountConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UpdateEnvironmentAccountConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentAccountConnectionWithContext indicates an expected call of UpdateEnvironmentAccountConnectionWithContext
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentAccountConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentAccountConnectionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentAccountConnectionWithContext), varargs...)
}

// UpdateEnvironmentRequest mocks base method
func (m *MockProtonAPI) UpdateEnvironmentRequest(arg0 *proton.UpdateEnvironmentInput) (*request.Request, *proton.UpdateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UpdateEnvironmentOutput)
	return ret0, ret1
}

// UpdateEnvironmentRequest indicates an expected call of UpdateEnvironmentRequest
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentRequest", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentRequest), arg0)
}

// UpdateEnvironmentTemplate mocks base method
func (m *MockProtonAPI) UpdateEnvironmentTemplate(arg0 *proton.UpdateEnvironmentTemplateInput) (*proton.UpdateEnvironmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentTemplate", arg0)
	ret0, _ := ret[0].(*proton.UpdateEnvironmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentTemplate indicates an expected call of UpdateEnvironmentTemplate
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentTemplate", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentTemplate), arg0)
}

// UpdateEnvironmentTemplateRequest mocks base method
func (m *MockProtonAPI) UpdateEnvironmentTemplateRequest(arg0 *proton.UpdateEnvironmentTemplateInput) (*request.Request, *proton.UpdateEnvironmentTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UpdateEnvironmentTemplateOutput)
	return ret0, ret1
}

// UpdateEnvironmentTemplateRequest indicates an expected call of UpdateEnvironmentTemplateRequest
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentTemplateRequest", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentTemplateRequest), arg0)
}

// UpdateEnvironmentTemplateVersion mocks base method
func (m *MockProtonAPI) UpdateEnvironmentTemplateVersion(arg0 *proton.UpdateEnvironmentTemplateVersionInput) (*proton.UpdateEnvironmentTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentTemplateVersion", arg0)
	ret0, _ := ret[0].(*proton.UpdateEnvironmentTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentTemplateVersion indicates an expected call of UpdateEnvironmentTemplateVersion
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentTemplateVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentTemplateVersion", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentTemplateVersion), arg0)
}

// UpdateEnvironmentTemplateVersionRequest mocks base method
func (m *MockProtonAPI) UpdateEnvironmentTemplateVersionRequest(arg0 *proton.UpdateEnvironmentTemplateVersionInput) (*request.Request, *proton.UpdateEnvironmentTemplateVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentTemplateVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UpdateEnvironmentTemplateVersionOutput)
	return ret0, ret1
}

// UpdateEnvironmentTemplateVersionRequest indicates an expected call of UpdateEnvironmentTemplateVersionRequest
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentTemplateVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentTemplateVersionRequest", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentTemplateVersionRequest), arg0)
}

// UpdateEnvironmentTemplateVersionWithContext mocks base method
func (m *MockProtonAPI) UpdateEnvironmentTemplateVersionWithContext(arg0 context.Context, arg1 *proton.UpdateEnvironmentTemplateVersionInput, arg2 ...request.Option) (*proton.UpdateEnvironmentTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentTemplateVersionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UpdateEnvironmentTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentTemplateVersionWithContext indicates an expected call of UpdateEnvironmentTemplateVersionWithContext
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentTemplateVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentTemplateVersionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentTemplateVersionWithContext), varargs...)
}

// UpdateEnvironmentTemplateWithContext mocks base method
func (m *MockProtonAPI) UpdateEnvironmentTemplateWithContext(arg0 context.Context, arg1 *proton.UpdateEnvironmentTemplateInput, arg2 ...request.Option) (*proton.UpdateEnvironmentTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UpdateEnvironmentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentTemplateWithContext indicates an expected call of UpdateEnvironmentTemplateWithContext
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentTemplateWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentTemplateWithContext), varargs...)
}

// UpdateEnvironmentWithContext mocks base method
func (m *MockProtonAPI) UpdateEnvironmentWithContext(arg0 context.Context, arg1 *proton.UpdateEnvironmentInput, arg2 ...request.Option) (*proton.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentWithContext indicates an expected call of UpdateEnvironmentWithContext
func (mr *MockProtonAPIMockRecorder) UpdateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UpdateEnvironmentWithContext), varargs...)
}

// UpdateService mocks base method
func (m *MockProtonAPI) UpdateService(arg0 *proton.UpdateServiceInput) (*proton.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(*proton.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService
func (mr *MockProtonAPIMockRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockProtonAPI)(nil).UpdateService), arg0)
}

// UpdateServiceInstance mocks base method
func (m *MockProtonAPI) UpdateServiceInstance(arg0 *proton.UpdateServiceInstanceInput) (*proton.UpdateServiceInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceInstance", arg0)
	ret0, _ := ret[0].(*proton.UpdateServiceInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceInstance indicates an expected call of UpdateServiceInstance
func (mr *MockProtonAPIMockRecorder) UpdateServiceInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceInstance", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceInstance), arg0)
}

// UpdateServiceInstanceRequest mocks base method
func (m *MockProtonAPI) UpdateServiceInstanceRequest(arg0 *proton.UpdateServiceInstanceInput) (*request.Request, *proton.UpdateServiceInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UpdateServiceInstanceOutput)
	return ret0, ret1
}

// UpdateServiceInstanceRequest indicates an expected call of UpdateServiceInstanceRequest
func (mr *MockProtonAPIMockRecorder) UpdateServiceInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceInstanceRequest", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceInstanceRequest), arg0)
}

// UpdateServiceInstanceWithContext mocks base method
func (m *MockProtonAPI) UpdateServiceInstanceWithContext(arg0 context.Context, arg1 *proton.UpdateServiceInstanceInput, arg2 ...request.Option) (*proton.UpdateServiceInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UpdateServiceInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceInstanceWithContext indicates an expected call of UpdateServiceInstanceWithContext
func (mr *MockProtonAPIMockRecorder) UpdateServiceInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceInstanceWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceInstanceWithContext), varargs...)
}

// UpdateServicePipeline mocks base method
func (m *MockProtonAPI) UpdateServicePipeline(arg0 *proton.UpdateServicePipelineInput) (*proton.UpdateServicePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServicePipeline", arg0)
	ret0, _ := ret[0].(*proton.UpdateServicePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServicePipeline indicates an expected call of UpdateServicePipeline
func (mr *MockProtonAPIMockRecorder) UpdateServicePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServicePipeline", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServicePipeline), arg0)
}

// UpdateServicePipelineRequest mocks base method
func (m *MockProtonAPI) UpdateServicePipelineRequest(arg0 *proton.UpdateServicePipelineInput) (*request.Request, *proton.UpdateServicePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServicePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UpdateServicePipelineOutput)
	return ret0, ret1
}

// UpdateServicePipelineRequest indicates an expected call of UpdateServicePipelineRequest
func (mr *MockProtonAPIMockRecorder) UpdateServicePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServicePipelineRequest", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServicePipelineRequest), arg0)
}

// UpdateServicePipelineWithContext mocks base method
func (m *MockProtonAPI) UpdateServicePipelineWithContext(arg0 context.Context, arg1 *proton.UpdateServicePipelineInput, arg2 ...request.Option) (*proton.UpdateServicePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServicePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UpdateServicePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServicePipelineWithContext indicates an expected call of UpdateServicePipelineWithContext
func (mr *MockProtonAPIMockRecorder) UpdateServicePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServicePipelineWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServicePipelineWithContext), varargs...)
}

// UpdateServiceRequest mocks base method
func (m *MockProtonAPI) UpdateServiceRequest(arg0 *proton.UpdateServiceInput) (*request.Request, *proton.UpdateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UpdateServiceOutput)
	return ret0, ret1
}

// UpdateServiceRequest indicates an expected call of UpdateServiceRequest
func (mr *MockProtonAPIMockRecorder) UpdateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceRequest", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceRequest), arg0)
}

// UpdateServiceTemplate mocks base method
func (m *MockProtonAPI) UpdateServiceTemplate(arg0 *proton.UpdateServiceTemplateInput) (*proton.UpdateServiceTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceTemplate", arg0)
	ret0, _ := ret[0].(*proton.UpdateServiceTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceTemplate indicates an expected call of UpdateServiceTemplate
func (mr *MockProtonAPIMockRecorder) UpdateServiceTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceTemplate", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceTemplate), arg0)
}

// UpdateServiceTemplateRequest mocks base method
func (m *MockProtonAPI) UpdateServiceTemplateRequest(arg0 *proton.UpdateServiceTemplateInput) (*request.Request, *proton.UpdateServiceTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UpdateServiceTemplateOutput)
	return ret0, ret1
}

// UpdateServiceTemplateRequest indicates an expected call of UpdateServiceTemplateRequest
func (mr *MockProtonAPIMockRecorder) UpdateServiceTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceTemplateRequest", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceTemplateRequest), arg0)
}

// UpdateServiceTemplateVersion mocks base method
func (m *MockProtonAPI) UpdateServiceTemplateVersion(arg0 *proton.UpdateServiceTemplateVersionInput) (*proton.UpdateServiceTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceTemplateVersion", arg0)
	ret0, _ := ret[0].(*proton.UpdateServiceTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceTemplateVersion indicates an expected call of UpdateServiceTemplateVersion
func (mr *MockProtonAPIMockRecorder) UpdateServiceTemplateVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceTemplateVersion", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceTemplateVersion), arg0)
}

// UpdateServiceTemplateVersionRequest mocks base method
func (m *MockProtonAPI) UpdateServiceTemplateVersionRequest(arg0 *proton.UpdateServiceTemplateVersionInput) (*request.Request, *proton.UpdateServiceTemplateVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceTemplateVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*proton.UpdateServiceTemplateVersionOutput)
	return ret0, ret1
}

// UpdateServiceTemplateVersionRequest indicates an expected call of UpdateServiceTemplateVersionRequest
func (mr *MockProtonAPIMockRecorder) UpdateServiceTemplateVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceTemplateVersionRequest", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceTemplateVersionRequest), arg0)
}

// UpdateServiceTemplateVersionWithContext mocks base method
func (m *MockProtonAPI) UpdateServiceTemplateVersionWithContext(arg0 context.Context, arg1 *proton.UpdateServiceTemplateVersionInput, arg2 ...request.Option) (*proton.UpdateServiceTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceTemplateVersionWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UpdateServiceTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceTemplateVersionWithContext indicates an expected call of UpdateServiceTemplateVersionWithContext
func (mr *MockProtonAPIMockRecorder) UpdateServiceTemplateVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceTemplateVersionWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceTemplateVersionWithContext), varargs...)
}

// UpdateServiceTemplateWithContext mocks base method
func (m *MockProtonAPI) UpdateServiceTemplateWithContext(arg0 context.Context, arg1 *proton.UpdateServiceTemplateInput, arg2 ...request.Option) (*proton.UpdateServiceTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UpdateServiceTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceTemplateWithContext indicates an expected call of UpdateServiceTemplateWithContext
func (mr *MockProtonAPIMockRecorder) UpdateServiceTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceTemplateWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceTemplateWithContext), varargs...)
}

// UpdateServiceWithContext mocks base method
func (m *MockProtonAPI) UpdateServiceWithContext(arg0 context.Context, arg1 *proton.UpdateServiceInput, arg2 ...request.Option) (*proton.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*proton.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceWithContext indicates an expected call of UpdateServiceWithContext
func (mr *MockProtonAPIMockRecorder) UpdateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceWithContext", reflect.TypeOf((*MockProtonAPI)(nil).UpdateServiceWithContext), varargs...)
}

// WaitUntilEnvironmentDeployed mocks base method
func (m *MockProtonAPI) WaitUntilEnvironmentDeployed(arg0 *proton.GetEnvironmentInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilEnvironmentDeployed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEnvironmentDeployed indicates an expected call of WaitUntilEnvironmentDeployed
func (mr *MockProtonAPIMockRecorder) WaitUntilEnvironmentDeployed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEnvironmentDeployed", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilEnvironmentDeployed), arg0)
}

// WaitUntilEnvironmentDeployedWithContext mocks base method
func (m *MockProtonAPI) WaitUntilEnvironmentDeployedWithContext(arg0 context.Context, arg1 *proton.GetEnvironmentInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilEnvironmentDeployedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEnvironmentDeployedWithContext indicates an expected call of WaitUntilEnvironmentDeployedWithContext
func (mr *MockProtonAPIMockRecorder) WaitUntilEnvironmentDeployedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEnvironmentDeployedWithContext", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilEnvironmentDeployedWithContext), varargs...)
}

// WaitUntilEnvironmentTemplateVersionRegistered mocks base method
func (m *MockProtonAPI) WaitUntilEnvironmentTemplateVersionRegistered(arg0 *proton.GetEnvironmentTemplateVersionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilEnvironmentTemplateVersionRegistered", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEnvironmentTemplateVersionRegistered indicates an expected call of WaitUntilEnvironmentTemplateVersionRegistered
func (mr *MockProtonAPIMockRecorder) WaitUntilEnvironmentTemplateVersionRegistered(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEnvironmentTemplateVersionRegistered", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilEnvironmentTemplateVersionRegistered), arg0)
}

// WaitUntilEnvironmentTemplateVersionRegisteredWithContext mocks base method
func (m *MockProtonAPI) WaitUntilEnvironmentTemplateVersionRegisteredWithContext(arg0 context.Context, arg1 *proton.GetEnvironmentTemplateVersionInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilEnvironmentTemplateVersionRegisteredWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEnvironmentTemplateVersionRegisteredWithContext indicates an expected call of WaitUntilEnvironmentTemplateVersionRegisteredWithContext
func (mr *MockProtonAPIMockRecorder) WaitUntilEnvironmentTemplateVersionRegisteredWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEnvironmentTemplateVersionRegisteredWithContext", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilEnvironmentTemplateVersionRegisteredWithContext), varargs...)
}

// WaitUntilServiceCreated mocks base method
func (m *MockProtonAPI) WaitUntilServiceCreated(arg0 *proton.GetServiceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilServiceCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServiceCreated indicates an expected call of WaitUntilServiceCreated
func (mr *MockProtonAPIMockRecorder) WaitUntilServiceCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServiceCreated", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServiceCreated), arg0)
}

// WaitUntilServiceCreatedWithContext mocks base method
func (m *MockProtonAPI) WaitUntilServiceCreatedWithContext(arg0 context.Context, arg1 *proton.GetServiceInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilServiceCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServiceCreatedWithContext indicates an expected call of WaitUntilServiceCreatedWithContext
func (mr *MockProtonAPIMockRecorder) WaitUntilServiceCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServiceCreatedWithContext", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServiceCreatedWithContext), varargs...)
}

// WaitUntilServiceDeleted mocks base method
func (m *MockProtonAPI) WaitUntilServiceDeleted(arg0 *proton.GetServiceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilServiceDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServiceDeleted indicates an expected call of WaitUntilServiceDeleted
func (mr *MockProtonAPIMockRecorder) WaitUntilServiceDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServiceDeleted", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServiceDeleted), arg0)
}

// WaitUntilServiceDeletedWithContext mocks base method
func (m *MockProtonAPI) WaitUntilServiceDeletedWithContext(arg0 context.Context, arg1 *proton.GetServiceInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilServiceDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServiceDeletedWithContext indicates an expected call of WaitUntilServiceDeletedWithContext
func (mr *MockProtonAPIMockRecorder) WaitUntilServiceDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServiceDeletedWithContext", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServiceDeletedWithContext), varargs...)
}

// WaitUntilServiceInstanceDeployed mocks base method
func (m *MockProtonAPI) WaitUntilServiceInstanceDeployed(arg0 *proton.GetServiceInstanceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilServiceInstanceDeployed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServiceInstanceDeployed indicates an expected call of WaitUntilServiceInstanceDeployed
func (mr *MockProtonAPIMockRecorder) WaitUntilServiceInstanceDeployed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServiceInstanceDeployed", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServiceInstanceDeployed), arg0)
}

// WaitUntilServiceInstanceDeployedWithContext mocks base method
func (m *MockProtonAPI) WaitUntilServiceInstanceDeployedWithContext(arg0 context.Context, arg1 *proton.GetServiceInstanceInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilServiceInstanceDeployedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServiceInstanceDeployedWithContext indicates an expected call of WaitUntilServiceInstanceDeployedWithContext
func (mr *MockProtonAPIMockRecorder) WaitUntilServiceInstanceDeployedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServiceInstanceDeployedWithContext", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServiceInstanceDeployedWithContext), varargs...)
}

// WaitUntilServicePipelineDeployed mocks base method
func (m *MockProtonAPI) WaitUntilServicePipelineDeployed(arg0 *proton.GetServiceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilServicePipelineDeployed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServicePipelineDeployed indicates an expected call of WaitUntilServicePipelineDeployed
func (mr *MockProtonAPIMockRecorder) WaitUntilServicePipelineDeployed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServicePipelineDeployed", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServicePipelineDeployed), arg0)
}

// WaitUntilServicePipelineDeployedWithContext mocks base method
func (m *MockProtonAPI) WaitUntilServicePipelineDeployedWithContext(arg0 context.Context, arg1 *proton.GetServiceInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilServicePipelineDeployedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServicePipelineDeployedWithContext indicates an expected call of WaitUntilServicePipelineDeployedWithContext
func (mr *MockProtonAPIMockRecorder) WaitUntilServicePipelineDeployedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServicePipelineDeployedWithContext", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServicePipelineDeployedWithContext), varargs...)
}

// WaitUntilServiceTemplateVersionRegistered mocks base method
func (m *MockProtonAPI) WaitUntilServiceTemplateVersionRegistered(arg0 *proton.GetServiceTemplateVersionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilServiceTemplateVersionRegistered", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServiceTemplateVersionRegistered indicates an expected call of WaitUntilServiceTemplateVersionRegistered
func (mr *MockProtonAPIMockRecorder) WaitUntilServiceTemplateVersionRegistered(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServiceTemplateVersionRegistered", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServiceTemplateVersionRegistered), arg0)
}

// WaitUntilServiceTemplateVersionRegisteredWithContext mocks base method
func (m *MockProtonAPI) WaitUntilServiceTemplateVersionRegisteredWithContext(arg0 context.Context, arg1 *proton.GetServiceTemplateVersionInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilServiceTemplateVersionRegisteredWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServiceTemplateVersionRegisteredWithContext indicates an expected call of WaitUntilServiceTemplateVersionRegisteredWithContext
func (mr *MockProtonAPIMockRecorder) WaitUntilServiceTemplateVersionRegisteredWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServiceTemplateVersionRegisteredWithContext", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServiceTemplateVersionRegisteredWithContext), varargs...)
}

// WaitUntilServiceUpdated mocks base method
func (m *MockProtonAPI) WaitUntilServiceUpdated(arg0 *proton.GetServiceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilServiceUpdated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServiceUpdated indicates an expected call of WaitUntilServiceUpdated
func (mr *MockProtonAPIMockRecorder) WaitUntilServiceUpdated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServiceUpdated", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServiceUpdated), arg0)
}

// WaitUntilServiceUpdatedWithContext mocks base method
func (m *MockProtonAPI) WaitUntilServiceUpdatedWithContext(arg0 context.Context, arg1 *proton.GetServiceInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilServiceUpdatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServiceUpdatedWithContext indicates an expected call of WaitUntilServiceUpdatedWithContext
func (mr *MockProtonAPIMockRecorder) WaitUntilServiceUpdatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServiceUpdatedWithContext", reflect.TypeOf((*MockProtonAPI)(nil).WaitUntilServiceUpdatedWithContext), varargs...)
}
