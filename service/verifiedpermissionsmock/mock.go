// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/verifiedpermissions/verifiedpermissionsiface (interfaces: VerifiedPermissionsAPI)

// Package verifiedpermissionsmock is a generated GoMock package.
package verifiedpermissionsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	verifiedpermissions "github.com/aws/aws-sdk-go/service/verifiedpermissions"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVerifiedPermissionsAPI is a mock of VerifiedPermissionsAPI interface
type MockVerifiedPermissionsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVerifiedPermissionsAPIMockRecorder
}

// MockVerifiedPermissionsAPIMockRecorder is the mock recorder for MockVerifiedPermissionsAPI
type MockVerifiedPermissionsAPIMockRecorder struct {
	mock *MockVerifiedPermissionsAPI
}

// NewMockVerifiedPermissionsAPI creates a new mock instance
func NewMockVerifiedPermissionsAPI(ctrl *gomock.Controller) *MockVerifiedPermissionsAPI {
	mock := &MockVerifiedPermissionsAPI{ctrl: ctrl}
	mock.recorder = &MockVerifiedPermissionsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVerifiedPermissionsAPI) EXPECT() *MockVerifiedPermissionsAPIMockRecorder {
	return m.recorder
}

// BatchIsAuthorized mocks base method
func (m *MockVerifiedPermissionsAPI) BatchIsAuthorized(arg0 *verifiedpermissions.BatchIsAuthorizedInput) (*verifiedpermissions.BatchIsAuthorizedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchIsAuthorized", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.BatchIsAuthorizedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchIsAuthorized indicates an expected call of BatchIsAuthorized
func (mr *MockVerifiedPermissionsAPIMockRecorder) BatchIsAuthorized(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIsAuthorized", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).BatchIsAuthorized), arg0)
}

// BatchIsAuthorizedRequest mocks base method
func (m *MockVerifiedPermissionsAPI) BatchIsAuthorizedRequest(arg0 *verifiedpermissions.BatchIsAuthorizedInput) (*request.Request, *verifiedpermissions.BatchIsAuthorizedOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchIsAuthorizedRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.BatchIsAuthorizedOutput)
	return ret0, ret1
}

// BatchIsAuthorizedRequest indicates an expected call of BatchIsAuthorizedRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) BatchIsAuthorizedRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIsAuthorizedRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).BatchIsAuthorizedRequest), arg0)
}

// BatchIsAuthorizedWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) BatchIsAuthorizedWithContext(arg0 context.Context, arg1 *verifiedpermissions.BatchIsAuthorizedInput, arg2 ...request.Option) (*verifiedpermissions.BatchIsAuthorizedOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchIsAuthorizedWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.BatchIsAuthorizedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchIsAuthorizedWithContext indicates an expected call of BatchIsAuthorizedWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) BatchIsAuthorizedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIsAuthorizedWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).BatchIsAuthorizedWithContext), varargs...)
}

// BatchIsAuthorizedWithToken mocks base method
func (m *MockVerifiedPermissionsAPI) BatchIsAuthorizedWithToken(arg0 *verifiedpermissions.BatchIsAuthorizedWithTokenInput) (*verifiedpermissions.BatchIsAuthorizedWithTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchIsAuthorizedWithToken", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.BatchIsAuthorizedWithTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchIsAuthorizedWithToken indicates an expected call of BatchIsAuthorizedWithToken
func (mr *MockVerifiedPermissionsAPIMockRecorder) BatchIsAuthorizedWithToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIsAuthorizedWithToken", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).BatchIsAuthorizedWithToken), arg0)
}

// BatchIsAuthorizedWithTokenRequest mocks base method
func (m *MockVerifiedPermissionsAPI) BatchIsAuthorizedWithTokenRequest(arg0 *verifiedpermissions.BatchIsAuthorizedWithTokenInput) (*request.Request, *verifiedpermissions.BatchIsAuthorizedWithTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchIsAuthorizedWithTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.BatchIsAuthorizedWithTokenOutput)
	return ret0, ret1
}

// BatchIsAuthorizedWithTokenRequest indicates an expected call of BatchIsAuthorizedWithTokenRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) BatchIsAuthorizedWithTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIsAuthorizedWithTokenRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).BatchIsAuthorizedWithTokenRequest), arg0)
}

// BatchIsAuthorizedWithTokenWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) BatchIsAuthorizedWithTokenWithContext(arg0 context.Context, arg1 *verifiedpermissions.BatchIsAuthorizedWithTokenInput, arg2 ...request.Option) (*verifiedpermissions.BatchIsAuthorizedWithTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchIsAuthorizedWithTokenWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.BatchIsAuthorizedWithTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchIsAuthorizedWithTokenWithContext indicates an expected call of BatchIsAuthorizedWithTokenWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) BatchIsAuthorizedWithTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIsAuthorizedWithTokenWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).BatchIsAuthorizedWithTokenWithContext), varargs...)
}

// CreateIdentitySource mocks base method
func (m *MockVerifiedPermissionsAPI) CreateIdentitySource(arg0 *verifiedpermissions.CreateIdentitySourceInput) (*verifiedpermissions.CreateIdentitySourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentitySource", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.CreateIdentitySourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentitySource indicates an expected call of CreateIdentitySource
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreateIdentitySource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentitySource", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreateIdentitySource), arg0)
}

// CreateIdentitySourceRequest mocks base method
func (m *MockVerifiedPermissionsAPI) CreateIdentitySourceRequest(arg0 *verifiedpermissions.CreateIdentitySourceInput) (*request.Request, *verifiedpermissions.CreateIdentitySourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentitySourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.CreateIdentitySourceOutput)
	return ret0, ret1
}

// CreateIdentitySourceRequest indicates an expected call of CreateIdentitySourceRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreateIdentitySourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentitySourceRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreateIdentitySourceRequest), arg0)
}

// CreateIdentitySourceWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) CreateIdentitySourceWithContext(arg0 context.Context, arg1 *verifiedpermissions.CreateIdentitySourceInput, arg2 ...request.Option) (*verifiedpermissions.CreateIdentitySourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIdentitySourceWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.CreateIdentitySourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentitySourceWithContext indicates an expected call of CreateIdentitySourceWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreateIdentitySourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentitySourceWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreateIdentitySourceWithContext), varargs...)
}

// CreatePolicy mocks base method
func (m *MockVerifiedPermissionsAPI) CreatePolicy(arg0 *verifiedpermissions.CreatePolicyInput) (*verifiedpermissions.CreatePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.CreatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreatePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreatePolicy), arg0)
}

// CreatePolicyRequest mocks base method
func (m *MockVerifiedPermissionsAPI) CreatePolicyRequest(arg0 *verifiedpermissions.CreatePolicyInput) (*request.Request, *verifiedpermissions.CreatePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.CreatePolicyOutput)
	return ret0, ret1
}

// CreatePolicyRequest indicates an expected call of CreatePolicyRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreatePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreatePolicyRequest), arg0)
}

// CreatePolicyStore mocks base method
func (m *MockVerifiedPermissionsAPI) CreatePolicyStore(arg0 *verifiedpermissions.CreatePolicyStoreInput) (*verifiedpermissions.CreatePolicyStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyStore", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.CreatePolicyStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyStore indicates an expected call of CreatePolicyStore
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreatePolicyStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyStore", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreatePolicyStore), arg0)
}

// CreatePolicyStoreRequest mocks base method
func (m *MockVerifiedPermissionsAPI) CreatePolicyStoreRequest(arg0 *verifiedpermissions.CreatePolicyStoreInput) (*request.Request, *verifiedpermissions.CreatePolicyStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.CreatePolicyStoreOutput)
	return ret0, ret1
}

// CreatePolicyStoreRequest indicates an expected call of CreatePolicyStoreRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreatePolicyStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyStoreRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreatePolicyStoreRequest), arg0)
}

// CreatePolicyStoreWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) CreatePolicyStoreWithContext(arg0 context.Context, arg1 *verifiedpermissions.CreatePolicyStoreInput, arg2 ...request.Option) (*verifiedpermissions.CreatePolicyStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicyStoreWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.CreatePolicyStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyStoreWithContext indicates an expected call of CreatePolicyStoreWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreatePolicyStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyStoreWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreatePolicyStoreWithContext), varargs...)
}

// CreatePolicyTemplate mocks base method
func (m *MockVerifiedPermissionsAPI) CreatePolicyTemplate(arg0 *verifiedpermissions.CreatePolicyTemplateInput) (*verifiedpermissions.CreatePolicyTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyTemplate", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.CreatePolicyTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyTemplate indicates an expected call of CreatePolicyTemplate
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreatePolicyTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyTemplate", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreatePolicyTemplate), arg0)
}

// CreatePolicyTemplateRequest mocks base method
func (m *MockVerifiedPermissionsAPI) CreatePolicyTemplateRequest(arg0 *verifiedpermissions.CreatePolicyTemplateInput) (*request.Request, *verifiedpermissions.CreatePolicyTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.CreatePolicyTemplateOutput)
	return ret0, ret1
}

// CreatePolicyTemplateRequest indicates an expected call of CreatePolicyTemplateRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreatePolicyTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyTemplateRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreatePolicyTemplateRequest), arg0)
}

// CreatePolicyTemplateWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) CreatePolicyTemplateWithContext(arg0 context.Context, arg1 *verifiedpermissions.CreatePolicyTemplateInput, arg2 ...request.Option) (*verifiedpermissions.CreatePolicyTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicyTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.CreatePolicyTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyTemplateWithContext indicates an expected call of CreatePolicyTemplateWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreatePolicyTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyTemplateWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreatePolicyTemplateWithContext), varargs...)
}

// CreatePolicyWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) CreatePolicyWithContext(arg0 context.Context, arg1 *verifiedpermissions.CreatePolicyInput, arg2 ...request.Option) (*verifiedpermissions.CreatePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.CreatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyWithContext indicates an expected call of CreatePolicyWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) CreatePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).CreatePolicyWithContext), varargs...)
}

// DeleteIdentitySource mocks base method
func (m *MockVerifiedPermissionsAPI) DeleteIdentitySource(arg0 *verifiedpermissions.DeleteIdentitySourceInput) (*verifiedpermissions.DeleteIdentitySourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentitySource", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.DeleteIdentitySourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIdentitySource indicates an expected call of DeleteIdentitySource
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeleteIdentitySource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentitySource", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeleteIdentitySource), arg0)
}

// DeleteIdentitySourceRequest mocks base method
func (m *MockVerifiedPermissionsAPI) DeleteIdentitySourceRequest(arg0 *verifiedpermissions.DeleteIdentitySourceInput) (*request.Request, *verifiedpermissions.DeleteIdentitySourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentitySourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.DeleteIdentitySourceOutput)
	return ret0, ret1
}

// DeleteIdentitySourceRequest indicates an expected call of DeleteIdentitySourceRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeleteIdentitySourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentitySourceRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeleteIdentitySourceRequest), arg0)
}

// DeleteIdentitySourceWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) DeleteIdentitySourceWithContext(arg0 context.Context, arg1 *verifiedpermissions.DeleteIdentitySourceInput, arg2 ...request.Option) (*verifiedpermissions.DeleteIdentitySourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIdentitySourceWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.DeleteIdentitySourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIdentitySourceWithContext indicates an expected call of DeleteIdentitySourceWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeleteIdentitySourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentitySourceWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeleteIdentitySourceWithContext), varargs...)
}

// DeletePolicy mocks base method
func (m *MockVerifiedPermissionsAPI) DeletePolicy(arg0 *verifiedpermissions.DeletePolicyInput) (*verifiedpermissions.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeletePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeletePolicy), arg0)
}

// DeletePolicyRequest mocks base method
func (m *MockVerifiedPermissionsAPI) DeletePolicyRequest(arg0 *verifiedpermissions.DeletePolicyInput) (*request.Request, *verifiedpermissions.DeletePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.DeletePolicyOutput)
	return ret0, ret1
}

// DeletePolicyRequest indicates an expected call of DeletePolicyRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeletePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeletePolicyRequest), arg0)
}

// DeletePolicyStore mocks base method
func (m *MockVerifiedPermissionsAPI) DeletePolicyStore(arg0 *verifiedpermissions.DeletePolicyStoreInput) (*verifiedpermissions.DeletePolicyStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyStore", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.DeletePolicyStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyStore indicates an expected call of DeletePolicyStore
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeletePolicyStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyStore", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeletePolicyStore), arg0)
}

// DeletePolicyStoreRequest mocks base method
func (m *MockVerifiedPermissionsAPI) DeletePolicyStoreRequest(arg0 *verifiedpermissions.DeletePolicyStoreInput) (*request.Request, *verifiedpermissions.DeletePolicyStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.DeletePolicyStoreOutput)
	return ret0, ret1
}

// DeletePolicyStoreRequest indicates an expected call of DeletePolicyStoreRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeletePolicyStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyStoreRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeletePolicyStoreRequest), arg0)
}

// DeletePolicyStoreWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) DeletePolicyStoreWithContext(arg0 context.Context, arg1 *verifiedpermissions.DeletePolicyStoreInput, arg2 ...request.Option) (*verifiedpermissions.DeletePolicyStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicyStoreWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.DeletePolicyStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyStoreWithContext indicates an expected call of DeletePolicyStoreWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeletePolicyStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyStoreWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeletePolicyStoreWithContext), varargs...)
}

// DeletePolicyTemplate mocks base method
func (m *MockVerifiedPermissionsAPI) DeletePolicyTemplate(arg0 *verifiedpermissions.DeletePolicyTemplateInput) (*verifiedpermissions.DeletePolicyTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyTemplate", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.DeletePolicyTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyTemplate indicates an expected call of DeletePolicyTemplate
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeletePolicyTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyTemplate", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeletePolicyTemplate), arg0)
}

// DeletePolicyTemplateRequest mocks base method
func (m *MockVerifiedPermissionsAPI) DeletePolicyTemplateRequest(arg0 *verifiedpermissions.DeletePolicyTemplateInput) (*request.Request, *verifiedpermissions.DeletePolicyTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.DeletePolicyTemplateOutput)
	return ret0, ret1
}

// DeletePolicyTemplateRequest indicates an expected call of DeletePolicyTemplateRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeletePolicyTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyTemplateRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeletePolicyTemplateRequest), arg0)
}

// DeletePolicyTemplateWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) DeletePolicyTemplateWithContext(arg0 context.Context, arg1 *verifiedpermissions.DeletePolicyTemplateInput, arg2 ...request.Option) (*verifiedpermissions.DeletePolicyTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicyTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.DeletePolicyTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyTemplateWithContext indicates an expected call of DeletePolicyTemplateWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeletePolicyTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyTemplateWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeletePolicyTemplateWithContext), varargs...)
}

// DeletePolicyWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) DeletePolicyWithContext(arg0 context.Context, arg1 *verifiedpermissions.DeletePolicyInput, arg2 ...request.Option) (*verifiedpermissions.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyWithContext indicates an expected call of DeletePolicyWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) DeletePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).DeletePolicyWithContext), varargs...)
}

// GetIdentitySource mocks base method
func (m *MockVerifiedPermissionsAPI) GetIdentitySource(arg0 *verifiedpermissions.GetIdentitySourceInput) (*verifiedpermissions.GetIdentitySourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentitySource", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.GetIdentitySourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentitySource indicates an expected call of GetIdentitySource
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetIdentitySource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentitySource", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetIdentitySource), arg0)
}

// GetIdentitySourceRequest mocks base method
func (m *MockVerifiedPermissionsAPI) GetIdentitySourceRequest(arg0 *verifiedpermissions.GetIdentitySourceInput) (*request.Request, *verifiedpermissions.GetIdentitySourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentitySourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.GetIdentitySourceOutput)
	return ret0, ret1
}

// GetIdentitySourceRequest indicates an expected call of GetIdentitySourceRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetIdentitySourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentitySourceRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetIdentitySourceRequest), arg0)
}

// GetIdentitySourceWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) GetIdentitySourceWithContext(arg0 context.Context, arg1 *verifiedpermissions.GetIdentitySourceInput, arg2 ...request.Option) (*verifiedpermissions.GetIdentitySourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentitySourceWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.GetIdentitySourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentitySourceWithContext indicates an expected call of GetIdentitySourceWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetIdentitySourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentitySourceWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetIdentitySourceWithContext), varargs...)
}

// GetPolicy mocks base method
func (m *MockVerifiedPermissionsAPI) GetPolicy(arg0 *verifiedpermissions.GetPolicyInput) (*verifiedpermissions.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetPolicy), arg0)
}

// GetPolicyRequest mocks base method
func (m *MockVerifiedPermissionsAPI) GetPolicyRequest(arg0 *verifiedpermissions.GetPolicyInput) (*request.Request, *verifiedpermissions.GetPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.GetPolicyOutput)
	return ret0, ret1
}

// GetPolicyRequest indicates an expected call of GetPolicyRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetPolicyRequest), arg0)
}

// GetPolicyStore mocks base method
func (m *MockVerifiedPermissionsAPI) GetPolicyStore(arg0 *verifiedpermissions.GetPolicyStoreInput) (*verifiedpermissions.GetPolicyStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyStore", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.GetPolicyStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyStore indicates an expected call of GetPolicyStore
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetPolicyStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyStore", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetPolicyStore), arg0)
}

// GetPolicyStoreRequest mocks base method
func (m *MockVerifiedPermissionsAPI) GetPolicyStoreRequest(arg0 *verifiedpermissions.GetPolicyStoreInput) (*request.Request, *verifiedpermissions.GetPolicyStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.GetPolicyStoreOutput)
	return ret0, ret1
}

// GetPolicyStoreRequest indicates an expected call of GetPolicyStoreRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetPolicyStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyStoreRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetPolicyStoreRequest), arg0)
}

// GetPolicyStoreWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) GetPolicyStoreWithContext(arg0 context.Context, arg1 *verifiedpermissions.GetPolicyStoreInput, arg2 ...request.Option) (*verifiedpermissions.GetPolicyStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyStoreWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.GetPolicyStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyStoreWithContext indicates an expected call of GetPolicyStoreWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetPolicyStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyStoreWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetPolicyStoreWithContext), varargs...)
}

// GetPolicyTemplate mocks base method
func (m *MockVerifiedPermissionsAPI) GetPolicyTemplate(arg0 *verifiedpermissions.GetPolicyTemplateInput) (*verifiedpermissions.GetPolicyTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyTemplate", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.GetPolicyTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyTemplate indicates an expected call of GetPolicyTemplate
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetPolicyTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyTemplate", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetPolicyTemplate), arg0)
}

// GetPolicyTemplateRequest mocks base method
func (m *MockVerifiedPermissionsAPI) GetPolicyTemplateRequest(arg0 *verifiedpermissions.GetPolicyTemplateInput) (*request.Request, *verifiedpermissions.GetPolicyTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.GetPolicyTemplateOutput)
	return ret0, ret1
}

// GetPolicyTemplateRequest indicates an expected call of GetPolicyTemplateRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetPolicyTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyTemplateRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetPolicyTemplateRequest), arg0)
}

// GetPolicyTemplateWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) GetPolicyTemplateWithContext(arg0 context.Context, arg1 *verifiedpermissions.GetPolicyTemplateInput, arg2 ...request.Option) (*verifiedpermissions.GetPolicyTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.GetPolicyTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyTemplateWithContext indicates an expected call of GetPolicyTemplateWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetPolicyTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyTemplateWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetPolicyTemplateWithContext), varargs...)
}

// GetPolicyWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) GetPolicyWithContext(arg0 context.Context, arg1 *verifiedpermissions.GetPolicyInput, arg2 ...request.Option) (*verifiedpermissions.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyWithContext indicates an expected call of GetPolicyWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetPolicyWithContext), varargs...)
}

// GetSchema mocks base method
func (m *MockVerifiedPermissionsAPI) GetSchema(arg0 *verifiedpermissions.GetSchemaInput) (*verifiedpermissions.GetSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.GetSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetSchema), arg0)
}

// GetSchemaRequest mocks base method
func (m *MockVerifiedPermissionsAPI) GetSchemaRequest(arg0 *verifiedpermissions.GetSchemaInput) (*request.Request, *verifiedpermissions.GetSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.GetSchemaOutput)
	return ret0, ret1
}

// GetSchemaRequest indicates an expected call of GetSchemaRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetSchemaRequest), arg0)
}

// GetSchemaWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) GetSchemaWithContext(arg0 context.Context, arg1 *verifiedpermissions.GetSchemaInput, arg2 ...request.Option) (*verifiedpermissions.GetSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.GetSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaWithContext indicates an expected call of GetSchemaWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) GetSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).GetSchemaWithContext), varargs...)
}

// IsAuthorized mocks base method
func (m *MockVerifiedPermissionsAPI) IsAuthorized(arg0 *verifiedpermissions.IsAuthorizedInput) (*verifiedpermissions.IsAuthorizedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.IsAuthorizedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized
func (mr *MockVerifiedPermissionsAPIMockRecorder) IsAuthorized(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).IsAuthorized), arg0)
}

// IsAuthorizedRequest mocks base method
func (m *MockVerifiedPermissionsAPI) IsAuthorizedRequest(arg0 *verifiedpermissions.IsAuthorizedInput) (*request.Request, *verifiedpermissions.IsAuthorizedOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorizedRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.IsAuthorizedOutput)
	return ret0, ret1
}

// IsAuthorizedRequest indicates an expected call of IsAuthorizedRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) IsAuthorizedRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorizedRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).IsAuthorizedRequest), arg0)
}

// IsAuthorizedWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) IsAuthorizedWithContext(arg0 context.Context, arg1 *verifiedpermissions.IsAuthorizedInput, arg2 ...request.Option) (*verifiedpermissions.IsAuthorizedOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAuthorizedWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.IsAuthorizedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorizedWithContext indicates an expected call of IsAuthorizedWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) IsAuthorizedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorizedWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).IsAuthorizedWithContext), varargs...)
}

// IsAuthorizedWithToken mocks base method
func (m *MockVerifiedPermissionsAPI) IsAuthorizedWithToken(arg0 *verifiedpermissions.IsAuthorizedWithTokenInput) (*verifiedpermissions.IsAuthorizedWithTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorizedWithToken", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.IsAuthorizedWithTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorizedWithToken indicates an expected call of IsAuthorizedWithToken
func (mr *MockVerifiedPermissionsAPIMockRecorder) IsAuthorizedWithToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorizedWithToken", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).IsAuthorizedWithToken), arg0)
}

// IsAuthorizedWithTokenRequest mocks base method
func (m *MockVerifiedPermissionsAPI) IsAuthorizedWithTokenRequest(arg0 *verifiedpermissions.IsAuthorizedWithTokenInput) (*request.Request, *verifiedpermissions.IsAuthorizedWithTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorizedWithTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.IsAuthorizedWithTokenOutput)
	return ret0, ret1
}

// IsAuthorizedWithTokenRequest indicates an expected call of IsAuthorizedWithTokenRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) IsAuthorizedWithTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorizedWithTokenRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).IsAuthorizedWithTokenRequest), arg0)
}

// IsAuthorizedWithTokenWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) IsAuthorizedWithTokenWithContext(arg0 context.Context, arg1 *verifiedpermissions.IsAuthorizedWithTokenInput, arg2 ...request.Option) (*verifiedpermissions.IsAuthorizedWithTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAuthorizedWithTokenWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.IsAuthorizedWithTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorizedWithTokenWithContext indicates an expected call of IsAuthorizedWithTokenWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) IsAuthorizedWithTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorizedWithTokenWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).IsAuthorizedWithTokenWithContext), varargs...)
}

// ListIdentitySources mocks base method
func (m *MockVerifiedPermissionsAPI) ListIdentitySources(arg0 *verifiedpermissions.ListIdentitySourcesInput) (*verifiedpermissions.ListIdentitySourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdentitySources", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.ListIdentitySourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdentitySources indicates an expected call of ListIdentitySources
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListIdentitySources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentitySources", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListIdentitySources), arg0)
}

// ListIdentitySourcesPages mocks base method
func (m *MockVerifiedPermissionsAPI) ListIdentitySourcesPages(arg0 *verifiedpermissions.ListIdentitySourcesInput, arg1 func(*verifiedpermissions.ListIdentitySourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdentitySourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIdentitySourcesPages indicates an expected call of ListIdentitySourcesPages
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListIdentitySourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentitySourcesPages", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListIdentitySourcesPages), arg0, arg1)
}

// ListIdentitySourcesPagesWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) ListIdentitySourcesPagesWithContext(arg0 context.Context, arg1 *verifiedpermissions.ListIdentitySourcesInput, arg2 func(*verifiedpermissions.ListIdentitySourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdentitySourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIdentitySourcesPagesWithContext indicates an expected call of ListIdentitySourcesPagesWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListIdentitySourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentitySourcesPagesWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListIdentitySourcesPagesWithContext), varargs...)
}

// ListIdentitySourcesRequest mocks base method
func (m *MockVerifiedPermissionsAPI) ListIdentitySourcesRequest(arg0 *verifiedpermissions.ListIdentitySourcesInput) (*request.Request, *verifiedpermissions.ListIdentitySourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdentitySourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.ListIdentitySourcesOutput)
	return ret0, ret1
}

// ListIdentitySourcesRequest indicates an expected call of ListIdentitySourcesRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListIdentitySourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentitySourcesRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListIdentitySourcesRequest), arg0)
}

// ListIdentitySourcesWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) ListIdentitySourcesWithContext(arg0 context.Context, arg1 *verifiedpermissions.ListIdentitySourcesInput, arg2 ...request.Option) (*verifiedpermissions.ListIdentitySourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdentitySourcesWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.ListIdentitySourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdentitySourcesWithContext indicates an expected call of ListIdentitySourcesWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListIdentitySourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentitySourcesWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListIdentitySourcesWithContext), varargs...)
}

// ListPolicies mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicies(arg0 *verifiedpermissions.ListPoliciesInput) (*verifiedpermissions.ListPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicies", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicies), arg0)
}

// ListPoliciesPages mocks base method
func (m *MockVerifiedPermissionsAPI) ListPoliciesPages(arg0 *verifiedpermissions.ListPoliciesInput, arg1 func(*verifiedpermissions.ListPoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPoliciesPages indicates an expected call of ListPoliciesPages
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesPages", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPoliciesPages), arg0, arg1)
}

// ListPoliciesPagesWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) ListPoliciesPagesWithContext(arg0 context.Context, arg1 *verifiedpermissions.ListPoliciesInput, arg2 func(*verifiedpermissions.ListPoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPoliciesPagesWithContext indicates an expected call of ListPoliciesPagesWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesPagesWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPoliciesPagesWithContext), varargs...)
}

// ListPoliciesRequest mocks base method
func (m *MockVerifiedPermissionsAPI) ListPoliciesRequest(arg0 *verifiedpermissions.ListPoliciesInput) (*request.Request, *verifiedpermissions.ListPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.ListPoliciesOutput)
	return ret0, ret1
}

// ListPoliciesRequest indicates an expected call of ListPoliciesRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPoliciesRequest), arg0)
}

// ListPoliciesWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) ListPoliciesWithContext(arg0 context.Context, arg1 *verifiedpermissions.ListPoliciesInput, arg2 ...request.Option) (*verifiedpermissions.ListPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoliciesWithContext indicates an expected call of ListPoliciesWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPoliciesWithContext), varargs...)
}

// ListPolicyStores mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicyStores(arg0 *verifiedpermissions.ListPolicyStoresInput) (*verifiedpermissions.ListPolicyStoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyStores", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.ListPolicyStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyStores indicates an expected call of ListPolicyStores
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicyStores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyStores", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicyStores), arg0)
}

// ListPolicyStoresPages mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicyStoresPages(arg0 *verifiedpermissions.ListPolicyStoresInput, arg1 func(*verifiedpermissions.ListPolicyStoresOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyStoresPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPolicyStoresPages indicates an expected call of ListPolicyStoresPages
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicyStoresPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyStoresPages", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicyStoresPages), arg0, arg1)
}

// ListPolicyStoresPagesWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicyStoresPagesWithContext(arg0 context.Context, arg1 *verifiedpermissions.ListPolicyStoresInput, arg2 func(*verifiedpermissions.ListPolicyStoresOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyStoresPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPolicyStoresPagesWithContext indicates an expected call of ListPolicyStoresPagesWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicyStoresPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyStoresPagesWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicyStoresPagesWithContext), varargs...)
}

// ListPolicyStoresRequest mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicyStoresRequest(arg0 *verifiedpermissions.ListPolicyStoresInput) (*request.Request, *verifiedpermissions.ListPolicyStoresOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyStoresRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.ListPolicyStoresOutput)
	return ret0, ret1
}

// ListPolicyStoresRequest indicates an expected call of ListPolicyStoresRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicyStoresRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyStoresRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicyStoresRequest), arg0)
}

// ListPolicyStoresWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicyStoresWithContext(arg0 context.Context, arg1 *verifiedpermissions.ListPolicyStoresInput, arg2 ...request.Option) (*verifiedpermissions.ListPolicyStoresOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyStoresWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.ListPolicyStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyStoresWithContext indicates an expected call of ListPolicyStoresWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicyStoresWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyStoresWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicyStoresWithContext), varargs...)
}

// ListPolicyTemplates mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicyTemplates(arg0 *verifiedpermissions.ListPolicyTemplatesInput) (*verifiedpermissions.ListPolicyTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyTemplates", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.ListPolicyTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyTemplates indicates an expected call of ListPolicyTemplates
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicyTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyTemplates", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicyTemplates), arg0)
}

// ListPolicyTemplatesPages mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicyTemplatesPages(arg0 *verifiedpermissions.ListPolicyTemplatesInput, arg1 func(*verifiedpermissions.ListPolicyTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPolicyTemplatesPages indicates an expected call of ListPolicyTemplatesPages
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicyTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyTemplatesPages", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicyTemplatesPages), arg0, arg1)
}

// ListPolicyTemplatesPagesWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicyTemplatesPagesWithContext(arg0 context.Context, arg1 *verifiedpermissions.ListPolicyTemplatesInput, arg2 func(*verifiedpermissions.ListPolicyTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPolicyTemplatesPagesWithContext indicates an expected call of ListPolicyTemplatesPagesWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicyTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyTemplatesPagesWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicyTemplatesPagesWithContext), varargs...)
}

// ListPolicyTemplatesRequest mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicyTemplatesRequest(arg0 *verifiedpermissions.ListPolicyTemplatesInput) (*request.Request, *verifiedpermissions.ListPolicyTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.ListPolicyTemplatesOutput)
	return ret0, ret1
}

// ListPolicyTemplatesRequest indicates an expected call of ListPolicyTemplatesRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicyTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyTemplatesRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicyTemplatesRequest), arg0)
}

// ListPolicyTemplatesWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) ListPolicyTemplatesWithContext(arg0 context.Context, arg1 *verifiedpermissions.ListPolicyTemplatesInput, arg2 ...request.Option) (*verifiedpermissions.ListPolicyTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.ListPolicyTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyTemplatesWithContext indicates an expected call of ListPolicyTemplatesWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) ListPolicyTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyTemplatesWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).ListPolicyTemplatesWithContext), varargs...)
}

// PutSchema mocks base method
func (m *MockVerifiedPermissionsAPI) PutSchema(arg0 *verifiedpermissions.PutSchemaInput) (*verifiedpermissions.PutSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSchema", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.PutSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSchema indicates an expected call of PutSchema
func (mr *MockVerifiedPermissionsAPIMockRecorder) PutSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchema", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).PutSchema), arg0)
}

// PutSchemaRequest mocks base method
func (m *MockVerifiedPermissionsAPI) PutSchemaRequest(arg0 *verifiedpermissions.PutSchemaInput) (*request.Request, *verifiedpermissions.PutSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.PutSchemaOutput)
	return ret0, ret1
}

// PutSchemaRequest indicates an expected call of PutSchemaRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) PutSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchemaRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).PutSchemaRequest), arg0)
}

// PutSchemaWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) PutSchemaWithContext(arg0 context.Context, arg1 *verifiedpermissions.PutSchemaInput, arg2 ...request.Option) (*verifiedpermissions.PutSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.PutSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSchemaWithContext indicates an expected call of PutSchemaWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) PutSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchemaWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).PutSchemaWithContext), varargs...)
}

// UpdateIdentitySource mocks base method
func (m *MockVerifiedPermissionsAPI) UpdateIdentitySource(arg0 *verifiedpermissions.UpdateIdentitySourceInput) (*verifiedpermissions.UpdateIdentitySourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentitySource", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.UpdateIdentitySourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentitySource indicates an expected call of UpdateIdentitySource
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdateIdentitySource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentitySource", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdateIdentitySource), arg0)
}

// UpdateIdentitySourceRequest mocks base method
func (m *MockVerifiedPermissionsAPI) UpdateIdentitySourceRequest(arg0 *verifiedpermissions.UpdateIdentitySourceInput) (*request.Request, *verifiedpermissions.UpdateIdentitySourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentitySourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.UpdateIdentitySourceOutput)
	return ret0, ret1
}

// UpdateIdentitySourceRequest indicates an expected call of UpdateIdentitySourceRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdateIdentitySourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentitySourceRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdateIdentitySourceRequest), arg0)
}

// UpdateIdentitySourceWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) UpdateIdentitySourceWithContext(arg0 context.Context, arg1 *verifiedpermissions.UpdateIdentitySourceInput, arg2 ...request.Option) (*verifiedpermissions.UpdateIdentitySourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIdentitySourceWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.UpdateIdentitySourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentitySourceWithContext indicates an expected call of UpdateIdentitySourceWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdateIdentitySourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentitySourceWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdateIdentitySourceWithContext), varargs...)
}

// UpdatePolicy mocks base method
func (m *MockVerifiedPermissionsAPI) UpdatePolicy(arg0 *verifiedpermissions.UpdatePolicyInput) (*verifiedpermissions.UpdatePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.UpdatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdatePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdatePolicy), arg0)
}

// UpdatePolicyRequest mocks base method
func (m *MockVerifiedPermissionsAPI) UpdatePolicyRequest(arg0 *verifiedpermissions.UpdatePolicyInput) (*request.Request, *verifiedpermissions.UpdatePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.UpdatePolicyOutput)
	return ret0, ret1
}

// UpdatePolicyRequest indicates an expected call of UpdatePolicyRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdatePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdatePolicyRequest), arg0)
}

// UpdatePolicyStore mocks base method
func (m *MockVerifiedPermissionsAPI) UpdatePolicyStore(arg0 *verifiedpermissions.UpdatePolicyStoreInput) (*verifiedpermissions.UpdatePolicyStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicyStore", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.UpdatePolicyStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicyStore indicates an expected call of UpdatePolicyStore
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdatePolicyStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyStore", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdatePolicyStore), arg0)
}

// UpdatePolicyStoreRequest mocks base method
func (m *MockVerifiedPermissionsAPI) UpdatePolicyStoreRequest(arg0 *verifiedpermissions.UpdatePolicyStoreInput) (*request.Request, *verifiedpermissions.UpdatePolicyStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicyStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.UpdatePolicyStoreOutput)
	return ret0, ret1
}

// UpdatePolicyStoreRequest indicates an expected call of UpdatePolicyStoreRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdatePolicyStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyStoreRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdatePolicyStoreRequest), arg0)
}

// UpdatePolicyStoreWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) UpdatePolicyStoreWithContext(arg0 context.Context, arg1 *verifiedpermissions.UpdatePolicyStoreInput, arg2 ...request.Option) (*verifiedpermissions.UpdatePolicyStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePolicyStoreWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.UpdatePolicyStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicyStoreWithContext indicates an expected call of UpdatePolicyStoreWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdatePolicyStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyStoreWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdatePolicyStoreWithContext), varargs...)
}

// UpdatePolicyTemplate mocks base method
func (m *MockVerifiedPermissionsAPI) UpdatePolicyTemplate(arg0 *verifiedpermissions.UpdatePolicyTemplateInput) (*verifiedpermissions.UpdatePolicyTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicyTemplate", arg0)
	ret0, _ := ret[0].(*verifiedpermissions.UpdatePolicyTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicyTemplate indicates an expected call of UpdatePolicyTemplate
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdatePolicyTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyTemplate", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdatePolicyTemplate), arg0)
}

// UpdatePolicyTemplateRequest mocks base method
func (m *MockVerifiedPermissionsAPI) UpdatePolicyTemplateRequest(arg0 *verifiedpermissions.UpdatePolicyTemplateInput) (*request.Request, *verifiedpermissions.UpdatePolicyTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicyTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*verifiedpermissions.UpdatePolicyTemplateOutput)
	return ret0, ret1
}

// UpdatePolicyTemplateRequest indicates an expected call of UpdatePolicyTemplateRequest
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdatePolicyTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyTemplateRequest", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdatePolicyTemplateRequest), arg0)
}

// UpdatePolicyTemplateWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) UpdatePolicyTemplateWithContext(arg0 context.Context, arg1 *verifiedpermissions.UpdatePolicyTemplateInput, arg2 ...request.Option) (*verifiedpermissions.UpdatePolicyTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePolicyTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.UpdatePolicyTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicyTemplateWithContext indicates an expected call of UpdatePolicyTemplateWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdatePolicyTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyTemplateWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdatePolicyTemplateWithContext), varargs...)
}

// UpdatePolicyWithContext mocks base method
func (m *MockVerifiedPermissionsAPI) UpdatePolicyWithContext(arg0 context.Context, arg1 *verifiedpermissions.UpdatePolicyInput, arg2 ...request.Option) (*verifiedpermissions.UpdatePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*verifiedpermissions.UpdatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicyWithContext indicates an expected call of UpdatePolicyWithContext
func (mr *MockVerifiedPermissionsAPIMockRecorder) UpdatePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyWithContext", reflect.TypeOf((*MockVerifiedPermissionsAPI)(nil).UpdatePolicyWithContext), varargs...)
}
