// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/osis/osisiface (interfaces: OSISAPI)

// Package osismock is a generated GoMock package.
package osismock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	osis "github.com/aws/aws-sdk-go/service/osis"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOSISAPI is a mock of OSISAPI interface
type MockOSISAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOSISAPIMockRecorder
}

// MockOSISAPIMockRecorder is the mock recorder for MockOSISAPI
type MockOSISAPIMockRecorder struct {
	mock *MockOSISAPI
}

// NewMockOSISAPI creates a new mock instance
func NewMockOSISAPI(ctrl *gomock.Controller) *MockOSISAPI {
	mock := &MockOSISAPI{ctrl: ctrl}
	mock.recorder = &MockOSISAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOSISAPI) EXPECT() *MockOSISAPIMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method
func (m *MockOSISAPI) CreatePipeline(arg0 *osis.CreatePipelineInput) (*osis.CreatePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", arg0)
	ret0, _ := ret[0].(*osis.CreatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline
func (mr *MockOSISAPIMockRecorder) CreatePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockOSISAPI)(nil).CreatePipeline), arg0)
}

// CreatePipelineRequest mocks base method
func (m *MockOSISAPI) CreatePipelineRequest(arg0 *osis.CreatePipelineInput) (*request.Request, *osis.CreatePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.CreatePipelineOutput)
	return ret0, ret1
}

// CreatePipelineRequest indicates an expected call of CreatePipelineRequest
func (mr *MockOSISAPIMockRecorder) CreatePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineRequest", reflect.TypeOf((*MockOSISAPI)(nil).CreatePipelineRequest), arg0)
}

// CreatePipelineWithContext mocks base method
func (m *MockOSISAPI) CreatePipelineWithContext(arg0 context.Context, arg1 *osis.CreatePipelineInput, arg2 ...request.Option) (*osis.CreatePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*osis.CreatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipelineWithContext indicates an expected call of CreatePipelineWithContext
func (mr *MockOSISAPIMockRecorder) CreatePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineWithContext", reflect.TypeOf((*MockOSISAPI)(nil).CreatePipelineWithContext), varargs...)
}

// DeletePipeline mocks base method
func (m *MockOSISAPI) DeletePipeline(arg0 *osis.DeletePipelineInput) (*osis.DeletePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", arg0)
	ret0, _ := ret[0].(*osis.DeletePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipeline indicates an expected call of DeletePipeline
func (mr *MockOSISAPIMockRecorder) DeletePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockOSISAPI)(nil).DeletePipeline), arg0)
}

// DeletePipelineRequest mocks base method
func (m *MockOSISAPI) DeletePipelineRequest(arg0 *osis.DeletePipelineInput) (*request.Request, *osis.DeletePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.DeletePipelineOutput)
	return ret0, ret1
}

// DeletePipelineRequest indicates an expected call of DeletePipelineRequest
func (mr *MockOSISAPIMockRecorder) DeletePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineRequest", reflect.TypeOf((*MockOSISAPI)(nil).DeletePipelineRequest), arg0)
}

// DeletePipelineWithContext mocks base method
func (m *MockOSISAPI) DeletePipelineWithContext(arg0 context.Context, arg1 *osis.DeletePipelineInput, arg2 ...request.Option) (*osis.DeletePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*osis.DeletePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipelineWithContext indicates an expected call of DeletePipelineWithContext
func (mr *MockOSISAPIMockRecorder) DeletePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineWithContext", reflect.TypeOf((*MockOSISAPI)(nil).DeletePipelineWithContext), varargs...)
}

// GetPipeline mocks base method
func (m *MockOSISAPI) GetPipeline(arg0 *osis.GetPipelineInput) (*osis.GetPipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", arg0)
	ret0, _ := ret[0].(*osis.GetPipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline
func (mr *MockOSISAPIMockRecorder) GetPipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockOSISAPI)(nil).GetPipeline), arg0)
}

// GetPipelineBlueprint mocks base method
func (m *MockOSISAPI) GetPipelineBlueprint(arg0 *osis.GetPipelineBlueprintInput) (*osis.GetPipelineBlueprintOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineBlueprint", arg0)
	ret0, _ := ret[0].(*osis.GetPipelineBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineBlueprint indicates an expected call of GetPipelineBlueprint
func (mr *MockOSISAPIMockRecorder) GetPipelineBlueprint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineBlueprint", reflect.TypeOf((*MockOSISAPI)(nil).GetPipelineBlueprint), arg0)
}

// GetPipelineBlueprintRequest mocks base method
func (m *MockOSISAPI) GetPipelineBlueprintRequest(arg0 *osis.GetPipelineBlueprintInput) (*request.Request, *osis.GetPipelineBlueprintOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineBlueprintRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.GetPipelineBlueprintOutput)
	return ret0, ret1
}

// GetPipelineBlueprintRequest indicates an expected call of GetPipelineBlueprintRequest
func (mr *MockOSISAPIMockRecorder) GetPipelineBlueprintRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineBlueprintRequest", reflect.TypeOf((*MockOSISAPI)(nil).GetPipelineBlueprintRequest), arg0)
}

// GetPipelineBlueprintWithContext mocks base method
func (m *MockOSISAPI) GetPipelineBlueprintWithContext(arg0 context.Context, arg1 *osis.GetPipelineBlueprintInput, arg2 ...request.Option) (*osis.GetPipelineBlueprintOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineBlueprintWithContext", varargs...)
	ret0, _ := ret[0].(*osis.GetPipelineBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineBlueprintWithContext indicates an expected call of GetPipelineBlueprintWithContext
func (mr *MockOSISAPIMockRecorder) GetPipelineBlueprintWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineBlueprintWithContext", reflect.TypeOf((*MockOSISAPI)(nil).GetPipelineBlueprintWithContext), varargs...)
}

// GetPipelineChangeProgress mocks base method
func (m *MockOSISAPI) GetPipelineChangeProgress(arg0 *osis.GetPipelineChangeProgressInput) (*osis.GetPipelineChangeProgressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineChangeProgress", arg0)
	ret0, _ := ret[0].(*osis.GetPipelineChangeProgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineChangeProgress indicates an expected call of GetPipelineChangeProgress
func (mr *MockOSISAPIMockRecorder) GetPipelineChangeProgress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineChangeProgress", reflect.TypeOf((*MockOSISAPI)(nil).GetPipelineChangeProgress), arg0)
}

// GetPipelineChangeProgressRequest mocks base method
func (m *MockOSISAPI) GetPipelineChangeProgressRequest(arg0 *osis.GetPipelineChangeProgressInput) (*request.Request, *osis.GetPipelineChangeProgressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineChangeProgressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.GetPipelineChangeProgressOutput)
	return ret0, ret1
}

// GetPipelineChangeProgressRequest indicates an expected call of GetPipelineChangeProgressRequest
func (mr *MockOSISAPIMockRecorder) GetPipelineChangeProgressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineChangeProgressRequest", reflect.TypeOf((*MockOSISAPI)(nil).GetPipelineChangeProgressRequest), arg0)
}

// GetPipelineChangeProgressWithContext mocks base method
func (m *MockOSISAPI) GetPipelineChangeProgressWithContext(arg0 context.Context, arg1 *osis.GetPipelineChangeProgressInput, arg2 ...request.Option) (*osis.GetPipelineChangeProgressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineChangeProgressWithContext", varargs...)
	ret0, _ := ret[0].(*osis.GetPipelineChangeProgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineChangeProgressWithContext indicates an expected call of GetPipelineChangeProgressWithContext
func (mr *MockOSISAPIMockRecorder) GetPipelineChangeProgressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineChangeProgressWithContext", reflect.TypeOf((*MockOSISAPI)(nil).GetPipelineChangeProgressWithContext), varargs...)
}

// GetPipelineRequest mocks base method
func (m *MockOSISAPI) GetPipelineRequest(arg0 *osis.GetPipelineInput) (*request.Request, *osis.GetPipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.GetPipelineOutput)
	return ret0, ret1
}

// GetPipelineRequest indicates an expected call of GetPipelineRequest
func (mr *MockOSISAPIMockRecorder) GetPipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineRequest", reflect.TypeOf((*MockOSISAPI)(nil).GetPipelineRequest), arg0)
}

// GetPipelineWithContext mocks base method
func (m *MockOSISAPI) GetPipelineWithContext(arg0 context.Context, arg1 *osis.GetPipelineInput, arg2 ...request.Option) (*osis.GetPipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineWithContext", varargs...)
	ret0, _ := ret[0].(*osis.GetPipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineWithContext indicates an expected call of GetPipelineWithContext
func (mr *MockOSISAPIMockRecorder) GetPipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineWithContext", reflect.TypeOf((*MockOSISAPI)(nil).GetPipelineWithContext), varargs...)
}

// ListPipelineBlueprints mocks base method
func (m *MockOSISAPI) ListPipelineBlueprints(arg0 *osis.ListPipelineBlueprintsInput) (*osis.ListPipelineBlueprintsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelineBlueprints", arg0)
	ret0, _ := ret[0].(*osis.ListPipelineBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelineBlueprints indicates an expected call of ListPipelineBlueprints
func (mr *MockOSISAPIMockRecorder) ListPipelineBlueprints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineBlueprints", reflect.TypeOf((*MockOSISAPI)(nil).ListPipelineBlueprints), arg0)
}

// ListPipelineBlueprintsRequest mocks base method
func (m *MockOSISAPI) ListPipelineBlueprintsRequest(arg0 *osis.ListPipelineBlueprintsInput) (*request.Request, *osis.ListPipelineBlueprintsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelineBlueprintsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.ListPipelineBlueprintsOutput)
	return ret0, ret1
}

// ListPipelineBlueprintsRequest indicates an expected call of ListPipelineBlueprintsRequest
func (mr *MockOSISAPIMockRecorder) ListPipelineBlueprintsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineBlueprintsRequest", reflect.TypeOf((*MockOSISAPI)(nil).ListPipelineBlueprintsRequest), arg0)
}

// ListPipelineBlueprintsWithContext mocks base method
func (m *MockOSISAPI) ListPipelineBlueprintsWithContext(arg0 context.Context, arg1 *osis.ListPipelineBlueprintsInput, arg2 ...request.Option) (*osis.ListPipelineBlueprintsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelineBlueprintsWithContext", varargs...)
	ret0, _ := ret[0].(*osis.ListPipelineBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelineBlueprintsWithContext indicates an expected call of ListPipelineBlueprintsWithContext
func (mr *MockOSISAPIMockRecorder) ListPipelineBlueprintsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineBlueprintsWithContext", reflect.TypeOf((*MockOSISAPI)(nil).ListPipelineBlueprintsWithContext), varargs...)
}

// ListPipelines mocks base method
func (m *MockOSISAPI) ListPipelines(arg0 *osis.ListPipelinesInput) (*osis.ListPipelinesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", arg0)
	ret0, _ := ret[0].(*osis.ListPipelinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines
func (mr *MockOSISAPIMockRecorder) ListPipelines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockOSISAPI)(nil).ListPipelines), arg0)
}

// ListPipelinesPages mocks base method
func (m *MockOSISAPI) ListPipelinesPages(arg0 *osis.ListPipelinesInput, arg1 func(*osis.ListPipelinesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelinesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPipelinesPages indicates an expected call of ListPipelinesPages
func (mr *MockOSISAPIMockRecorder) ListPipelinesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesPages", reflect.TypeOf((*MockOSISAPI)(nil).ListPipelinesPages), arg0, arg1)
}

// ListPipelinesPagesWithContext mocks base method
func (m *MockOSISAPI) ListPipelinesPagesWithContext(arg0 context.Context, arg1 *osis.ListPipelinesInput, arg2 func(*osis.ListPipelinesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelinesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPipelinesPagesWithContext indicates an expected call of ListPipelinesPagesWithContext
func (mr *MockOSISAPIMockRecorder) ListPipelinesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesPagesWithContext", reflect.TypeOf((*MockOSISAPI)(nil).ListPipelinesPagesWithContext), varargs...)
}

// ListPipelinesRequest mocks base method
func (m *MockOSISAPI) ListPipelinesRequest(arg0 *osis.ListPipelinesInput) (*request.Request, *osis.ListPipelinesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelinesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.ListPipelinesOutput)
	return ret0, ret1
}

// ListPipelinesRequest indicates an expected call of ListPipelinesRequest
func (mr *MockOSISAPIMockRecorder) ListPipelinesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesRequest", reflect.TypeOf((*MockOSISAPI)(nil).ListPipelinesRequest), arg0)
}

// ListPipelinesWithContext mocks base method
func (m *MockOSISAPI) ListPipelinesWithContext(arg0 context.Context, arg1 *osis.ListPipelinesInput, arg2 ...request.Option) (*osis.ListPipelinesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelinesWithContext", varargs...)
	ret0, _ := ret[0].(*osis.ListPipelinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelinesWithContext indicates an expected call of ListPipelinesWithContext
func (mr *MockOSISAPIMockRecorder) ListPipelinesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesWithContext", reflect.TypeOf((*MockOSISAPI)(nil).ListPipelinesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockOSISAPI) ListTagsForResource(arg0 *osis.ListTagsForResourceInput) (*osis.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*osis.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockOSISAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockOSISAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockOSISAPI) ListTagsForResourceRequest(arg0 *osis.ListTagsForResourceInput) (*request.Request, *osis.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockOSISAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockOSISAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockOSISAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *osis.ListTagsForResourceInput, arg2 ...request.Option) (*osis.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*osis.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockOSISAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockOSISAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartPipeline mocks base method
func (m *MockOSISAPI) StartPipeline(arg0 *osis.StartPipelineInput) (*osis.StartPipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPipeline", arg0)
	ret0, _ := ret[0].(*osis.StartPipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPipeline indicates an expected call of StartPipeline
func (mr *MockOSISAPIMockRecorder) StartPipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPipeline", reflect.TypeOf((*MockOSISAPI)(nil).StartPipeline), arg0)
}

// StartPipelineRequest mocks base method
func (m *MockOSISAPI) StartPipelineRequest(arg0 *osis.StartPipelineInput) (*request.Request, *osis.StartPipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.StartPipelineOutput)
	return ret0, ret1
}

// StartPipelineRequest indicates an expected call of StartPipelineRequest
func (mr *MockOSISAPIMockRecorder) StartPipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPipelineRequest", reflect.TypeOf((*MockOSISAPI)(nil).StartPipelineRequest), arg0)
}

// StartPipelineWithContext mocks base method
func (m *MockOSISAPI) StartPipelineWithContext(arg0 context.Context, arg1 *osis.StartPipelineInput, arg2 ...request.Option) (*osis.StartPipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartPipelineWithContext", varargs...)
	ret0, _ := ret[0].(*osis.StartPipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPipelineWithContext indicates an expected call of StartPipelineWithContext
func (mr *MockOSISAPIMockRecorder) StartPipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPipelineWithContext", reflect.TypeOf((*MockOSISAPI)(nil).StartPipelineWithContext), varargs...)
}

// StopPipeline mocks base method
func (m *MockOSISAPI) StopPipeline(arg0 *osis.StopPipelineInput) (*osis.StopPipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPipeline", arg0)
	ret0, _ := ret[0].(*osis.StopPipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPipeline indicates an expected call of StopPipeline
func (mr *MockOSISAPIMockRecorder) StopPipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPipeline", reflect.TypeOf((*MockOSISAPI)(nil).StopPipeline), arg0)
}

// StopPipelineRequest mocks base method
func (m *MockOSISAPI) StopPipelineRequest(arg0 *osis.StopPipelineInput) (*request.Request, *osis.StopPipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.StopPipelineOutput)
	return ret0, ret1
}

// StopPipelineRequest indicates an expected call of StopPipelineRequest
func (mr *MockOSISAPIMockRecorder) StopPipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPipelineRequest", reflect.TypeOf((*MockOSISAPI)(nil).StopPipelineRequest), arg0)
}

// StopPipelineWithContext mocks base method
func (m *MockOSISAPI) StopPipelineWithContext(arg0 context.Context, arg1 *osis.StopPipelineInput, arg2 ...request.Option) (*osis.StopPipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopPipelineWithContext", varargs...)
	ret0, _ := ret[0].(*osis.StopPipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPipelineWithContext indicates an expected call of StopPipelineWithContext
func (mr *MockOSISAPIMockRecorder) StopPipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPipelineWithContext", reflect.TypeOf((*MockOSISAPI)(nil).StopPipelineWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockOSISAPI) TagResource(arg0 *osis.TagResourceInput) (*osis.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*osis.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockOSISAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockOSISAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockOSISAPI) TagResourceRequest(arg0 *osis.TagResourceInput) (*request.Request, *osis.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockOSISAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockOSISAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockOSISAPI) TagResourceWithContext(arg0 context.Context, arg1 *osis.TagResourceInput, arg2 ...request.Option) (*osis.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*osis.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockOSISAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockOSISAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockOSISAPI) UntagResource(arg0 *osis.UntagResourceInput) (*osis.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*osis.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockOSISAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockOSISAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockOSISAPI) UntagResourceRequest(arg0 *osis.UntagResourceInput) (*request.Request, *osis.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockOSISAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockOSISAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockOSISAPI) UntagResourceWithContext(arg0 context.Context, arg1 *osis.UntagResourceInput, arg2 ...request.Option) (*osis.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*osis.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockOSISAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockOSISAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdatePipeline mocks base method
func (m *MockOSISAPI) UpdatePipeline(arg0 *osis.UpdatePipelineInput) (*osis.UpdatePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", arg0)
	ret0, _ := ret[0].(*osis.UpdatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePipeline indicates an expected call of UpdatePipeline
func (mr *MockOSISAPIMockRecorder) UpdatePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*MockOSISAPI)(nil).UpdatePipeline), arg0)
}

// UpdatePipelineRequest mocks base method
func (m *MockOSISAPI) UpdatePipelineRequest(arg0 *osis.UpdatePipelineInput) (*request.Request, *osis.UpdatePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.UpdatePipelineOutput)
	return ret0, ret1
}

// UpdatePipelineRequest indicates an expected call of UpdatePipelineRequest
func (mr *MockOSISAPIMockRecorder) UpdatePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipelineRequest", reflect.TypeOf((*MockOSISAPI)(nil).UpdatePipelineRequest), arg0)
}

// UpdatePipelineWithContext mocks base method
func (m *MockOSISAPI) UpdatePipelineWithContext(arg0 context.Context, arg1 *osis.UpdatePipelineInput, arg2 ...request.Option) (*osis.UpdatePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*osis.UpdatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePipelineWithContext indicates an expected call of UpdatePipelineWithContext
func (mr *MockOSISAPIMockRecorder) UpdatePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipelineWithContext", reflect.TypeOf((*MockOSISAPI)(nil).UpdatePipelineWithContext), varargs...)
}

// ValidatePipeline mocks base method
func (m *MockOSISAPI) ValidatePipeline(arg0 *osis.ValidatePipelineInput) (*osis.ValidatePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePipeline", arg0)
	ret0, _ := ret[0].(*osis.ValidatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePipeline indicates an expected call of ValidatePipeline
func (mr *MockOSISAPIMockRecorder) ValidatePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePipeline", reflect.TypeOf((*MockOSISAPI)(nil).ValidatePipeline), arg0)
}

// ValidatePipelineRequest mocks base method
func (m *MockOSISAPI) ValidatePipelineRequest(arg0 *osis.ValidatePipelineInput) (*request.Request, *osis.ValidatePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*osis.ValidatePipelineOutput)
	return ret0, ret1
}

// ValidatePipelineRequest indicates an expected call of ValidatePipelineRequest
func (mr *MockOSISAPIMockRecorder) ValidatePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePipelineRequest", reflect.TypeOf((*MockOSISAPI)(nil).ValidatePipelineRequest), arg0)
}

// ValidatePipelineWithContext mocks base method
func (m *MockOSISAPI) ValidatePipelineWithContext(arg0 context.Context, arg1 *osis.ValidatePipelineInput, arg2 ...request.Option) (*osis.ValidatePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidatePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*osis.ValidatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePipelineWithContext indicates an expected call of ValidatePipelineWithContext
func (mr *MockOSISAPIMockRecorder) ValidatePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePipelineWithContext", reflect.TypeOf((*MockOSISAPI)(nil).ValidatePipelineWithContext), varargs...)
}
