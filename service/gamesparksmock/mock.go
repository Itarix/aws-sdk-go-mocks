// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/gamesparks/gamesparksiface (interfaces: GameSparksAPI)

// Package gamesparksmock is a generated GoMock package.
package gamesparksmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	gamesparks "github.com/aws/aws-sdk-go/service/gamesparks"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGameSparksAPI is a mock of GameSparksAPI interface
type MockGameSparksAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGameSparksAPIMockRecorder
}

// MockGameSparksAPIMockRecorder is the mock recorder for MockGameSparksAPI
type MockGameSparksAPIMockRecorder struct {
	mock *MockGameSparksAPI
}

// NewMockGameSparksAPI creates a new mock instance
func NewMockGameSparksAPI(ctrl *gomock.Controller) *MockGameSparksAPI {
	mock := &MockGameSparksAPI{ctrl: ctrl}
	mock.recorder = &MockGameSparksAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameSparksAPI) EXPECT() *MockGameSparksAPIMockRecorder {
	return m.recorder
}

// CreateGame mocks base method
func (m *MockGameSparksAPI) CreateGame(arg0 *gamesparks.CreateGameInput) (*gamesparks.CreateGameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", arg0)
	ret0, _ := ret[0].(*gamesparks.CreateGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGame indicates an expected call of CreateGame
func (mr *MockGameSparksAPIMockRecorder) CreateGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockGameSparksAPI)(nil).CreateGame), arg0)
}

// CreateGameRequest mocks base method
func (m *MockGameSparksAPI) CreateGameRequest(arg0 *gamesparks.CreateGameInput) (*request.Request, *gamesparks.CreateGameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.CreateGameOutput)
	return ret0, ret1
}

// CreateGameRequest indicates an expected call of CreateGameRequest
func (mr *MockGameSparksAPIMockRecorder) CreateGameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGameRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).CreateGameRequest), arg0)
}

// CreateGameWithContext mocks base method
func (m *MockGameSparksAPI) CreateGameWithContext(arg0 context.Context, arg1 *gamesparks.CreateGameInput, arg2 ...request.Option) (*gamesparks.CreateGameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGameWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.CreateGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGameWithContext indicates an expected call of CreateGameWithContext
func (mr *MockGameSparksAPIMockRecorder) CreateGameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGameWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).CreateGameWithContext), varargs...)
}

// CreateSnapshot mocks base method
func (m *MockGameSparksAPI) CreateSnapshot(arg0 *gamesparks.CreateSnapshotInput) (*gamesparks.CreateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0)
	ret0, _ := ret[0].(*gamesparks.CreateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot
func (mr *MockGameSparksAPIMockRecorder) CreateSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockGameSparksAPI)(nil).CreateSnapshot), arg0)
}

// CreateSnapshotRequest mocks base method
func (m *MockGameSparksAPI) CreateSnapshotRequest(arg0 *gamesparks.CreateSnapshotInput) (*request.Request, *gamesparks.CreateSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.CreateSnapshotOutput)
	return ret0, ret1
}

// CreateSnapshotRequest indicates an expected call of CreateSnapshotRequest
func (mr *MockGameSparksAPIMockRecorder) CreateSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).CreateSnapshotRequest), arg0)
}

// CreateSnapshotWithContext mocks base method
func (m *MockGameSparksAPI) CreateSnapshotWithContext(arg0 context.Context, arg1 *gamesparks.CreateSnapshotInput, arg2 ...request.Option) (*gamesparks.CreateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.CreateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotWithContext indicates an expected call of CreateSnapshotWithContext
func (mr *MockGameSparksAPIMockRecorder) CreateSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).CreateSnapshotWithContext), varargs...)
}

// CreateStage mocks base method
func (m *MockGameSparksAPI) CreateStage(arg0 *gamesparks.CreateStageInput) (*gamesparks.CreateStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStage", arg0)
	ret0, _ := ret[0].(*gamesparks.CreateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStage indicates an expected call of CreateStage
func (mr *MockGameSparksAPIMockRecorder) CreateStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStage", reflect.TypeOf((*MockGameSparksAPI)(nil).CreateStage), arg0)
}

// CreateStageRequest mocks base method
func (m *MockGameSparksAPI) CreateStageRequest(arg0 *gamesparks.CreateStageInput) (*request.Request, *gamesparks.CreateStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.CreateStageOutput)
	return ret0, ret1
}

// CreateStageRequest indicates an expected call of CreateStageRequest
func (mr *MockGameSparksAPIMockRecorder) CreateStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStageRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).CreateStageRequest), arg0)
}

// CreateStageWithContext mocks base method
func (m *MockGameSparksAPI) CreateStageWithContext(arg0 context.Context, arg1 *gamesparks.CreateStageInput, arg2 ...request.Option) (*gamesparks.CreateStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStageWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.CreateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStageWithContext indicates an expected call of CreateStageWithContext
func (mr *MockGameSparksAPIMockRecorder) CreateStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStageWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).CreateStageWithContext), varargs...)
}

// DeleteGame mocks base method
func (m *MockGameSparksAPI) DeleteGame(arg0 *gamesparks.DeleteGameInput) (*gamesparks.DeleteGameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGame", arg0)
	ret0, _ := ret[0].(*gamesparks.DeleteGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGame indicates an expected call of DeleteGame
func (mr *MockGameSparksAPIMockRecorder) DeleteGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGame", reflect.TypeOf((*MockGameSparksAPI)(nil).DeleteGame), arg0)
}

// DeleteGameRequest mocks base method
func (m *MockGameSparksAPI) DeleteGameRequest(arg0 *gamesparks.DeleteGameInput) (*request.Request, *gamesparks.DeleteGameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.DeleteGameOutput)
	return ret0, ret1
}

// DeleteGameRequest indicates an expected call of DeleteGameRequest
func (mr *MockGameSparksAPIMockRecorder) DeleteGameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGameRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).DeleteGameRequest), arg0)
}

// DeleteGameWithContext mocks base method
func (m *MockGameSparksAPI) DeleteGameWithContext(arg0 context.Context, arg1 *gamesparks.DeleteGameInput, arg2 ...request.Option) (*gamesparks.DeleteGameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGameWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.DeleteGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGameWithContext indicates an expected call of DeleteGameWithContext
func (mr *MockGameSparksAPIMockRecorder) DeleteGameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGameWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).DeleteGameWithContext), varargs...)
}

// DeleteStage mocks base method
func (m *MockGameSparksAPI) DeleteStage(arg0 *gamesparks.DeleteStageInput) (*gamesparks.DeleteStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStage", arg0)
	ret0, _ := ret[0].(*gamesparks.DeleteStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStage indicates an expected call of DeleteStage
func (mr *MockGameSparksAPIMockRecorder) DeleteStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStage", reflect.TypeOf((*MockGameSparksAPI)(nil).DeleteStage), arg0)
}

// DeleteStageRequest mocks base method
func (m *MockGameSparksAPI) DeleteStageRequest(arg0 *gamesparks.DeleteStageInput) (*request.Request, *gamesparks.DeleteStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.DeleteStageOutput)
	return ret0, ret1
}

// DeleteStageRequest indicates an expected call of DeleteStageRequest
func (mr *MockGameSparksAPIMockRecorder) DeleteStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStageRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).DeleteStageRequest), arg0)
}

// DeleteStageWithContext mocks base method
func (m *MockGameSparksAPI) DeleteStageWithContext(arg0 context.Context, arg1 *gamesparks.DeleteStageInput, arg2 ...request.Option) (*gamesparks.DeleteStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStageWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.DeleteStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStageWithContext indicates an expected call of DeleteStageWithContext
func (mr *MockGameSparksAPIMockRecorder) DeleteStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStageWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).DeleteStageWithContext), varargs...)
}

// DisconnectPlayer mocks base method
func (m *MockGameSparksAPI) DisconnectPlayer(arg0 *gamesparks.DisconnectPlayerInput) (*gamesparks.DisconnectPlayerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectPlayer", arg0)
	ret0, _ := ret[0].(*gamesparks.DisconnectPlayerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectPlayer indicates an expected call of DisconnectPlayer
func (mr *MockGameSparksAPIMockRecorder) DisconnectPlayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectPlayer", reflect.TypeOf((*MockGameSparksAPI)(nil).DisconnectPlayer), arg0)
}

// DisconnectPlayerRequest mocks base method
func (m *MockGameSparksAPI) DisconnectPlayerRequest(arg0 *gamesparks.DisconnectPlayerInput) (*request.Request, *gamesparks.DisconnectPlayerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectPlayerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.DisconnectPlayerOutput)
	return ret0, ret1
}

// DisconnectPlayerRequest indicates an expected call of DisconnectPlayerRequest
func (mr *MockGameSparksAPIMockRecorder) DisconnectPlayerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectPlayerRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).DisconnectPlayerRequest), arg0)
}

// DisconnectPlayerWithContext mocks base method
func (m *MockGameSparksAPI) DisconnectPlayerWithContext(arg0 context.Context, arg1 *gamesparks.DisconnectPlayerInput, arg2 ...request.Option) (*gamesparks.DisconnectPlayerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectPlayerWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.DisconnectPlayerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectPlayerWithContext indicates an expected call of DisconnectPlayerWithContext
func (mr *MockGameSparksAPIMockRecorder) DisconnectPlayerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectPlayerWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).DisconnectPlayerWithContext), varargs...)
}

// ExportSnapshot mocks base method
func (m *MockGameSparksAPI) ExportSnapshot(arg0 *gamesparks.ExportSnapshotInput) (*gamesparks.ExportSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportSnapshot", arg0)
	ret0, _ := ret[0].(*gamesparks.ExportSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSnapshot indicates an expected call of ExportSnapshot
func (mr *MockGameSparksAPIMockRecorder) ExportSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSnapshot", reflect.TypeOf((*MockGameSparksAPI)(nil).ExportSnapshot), arg0)
}

// ExportSnapshotRequest mocks base method
func (m *MockGameSparksAPI) ExportSnapshotRequest(arg0 *gamesparks.ExportSnapshotInput) (*request.Request, *gamesparks.ExportSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.ExportSnapshotOutput)
	return ret0, ret1
}

// ExportSnapshotRequest indicates an expected call of ExportSnapshotRequest
func (mr *MockGameSparksAPIMockRecorder) ExportSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSnapshotRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).ExportSnapshotRequest), arg0)
}

// ExportSnapshotWithContext mocks base method
func (m *MockGameSparksAPI) ExportSnapshotWithContext(arg0 context.Context, arg1 *gamesparks.ExportSnapshotInput, arg2 ...request.Option) (*gamesparks.ExportSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.ExportSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSnapshotWithContext indicates an expected call of ExportSnapshotWithContext
func (mr *MockGameSparksAPIMockRecorder) ExportSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSnapshotWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ExportSnapshotWithContext), varargs...)
}

// GetExtension mocks base method
func (m *MockGameSparksAPI) GetExtension(arg0 *gamesparks.GetExtensionInput) (*gamesparks.GetExtensionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtension", arg0)
	ret0, _ := ret[0].(*gamesparks.GetExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtension indicates an expected call of GetExtension
func (mr *MockGameSparksAPIMockRecorder) GetExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtension", reflect.TypeOf((*MockGameSparksAPI)(nil).GetExtension), arg0)
}

// GetExtensionRequest mocks base method
func (m *MockGameSparksAPI) GetExtensionRequest(arg0 *gamesparks.GetExtensionInput) (*request.Request, *gamesparks.GetExtensionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.GetExtensionOutput)
	return ret0, ret1
}

// GetExtensionRequest indicates an expected call of GetExtensionRequest
func (mr *MockGameSparksAPIMockRecorder) GetExtensionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).GetExtensionRequest), arg0)
}

// GetExtensionVersion mocks base method
func (m *MockGameSparksAPI) GetExtensionVersion(arg0 *gamesparks.GetExtensionVersionInput) (*gamesparks.GetExtensionVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionVersion", arg0)
	ret0, _ := ret[0].(*gamesparks.GetExtensionVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionVersion indicates an expected call of GetExtensionVersion
func (mr *MockGameSparksAPIMockRecorder) GetExtensionVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionVersion", reflect.TypeOf((*MockGameSparksAPI)(nil).GetExtensionVersion), arg0)
}

// GetExtensionVersionRequest mocks base method
func (m *MockGameSparksAPI) GetExtensionVersionRequest(arg0 *gamesparks.GetExtensionVersionInput) (*request.Request, *gamesparks.GetExtensionVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.GetExtensionVersionOutput)
	return ret0, ret1
}

// GetExtensionVersionRequest indicates an expected call of GetExtensionVersionRequest
func (mr *MockGameSparksAPIMockRecorder) GetExtensionVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionVersionRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).GetExtensionVersionRequest), arg0)
}

// GetExtensionVersionWithContext mocks base method
func (m *MockGameSparksAPI) GetExtensionVersionWithContext(arg0 context.Context, arg1 *gamesparks.GetExtensionVersionInput, arg2 ...request.Option) (*gamesparks.GetExtensionVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExtensionVersionWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.GetExtensionVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionVersionWithContext indicates an expected call of GetExtensionVersionWithContext
func (mr *MockGameSparksAPIMockRecorder) GetExtensionVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionVersionWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).GetExtensionVersionWithContext), varargs...)
}

// GetExtensionWithContext mocks base method
func (m *MockGameSparksAPI) GetExtensionWithContext(arg0 context.Context, arg1 *gamesparks.GetExtensionInput, arg2 ...request.Option) (*gamesparks.GetExtensionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExtensionWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.GetExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionWithContext indicates an expected call of GetExtensionWithContext
func (mr *MockGameSparksAPIMockRecorder) GetExtensionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).GetExtensionWithContext), varargs...)
}

// GetGame mocks base method
func (m *MockGameSparksAPI) GetGame(arg0 *gamesparks.GetGameInput) (*gamesparks.GetGameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", arg0)
	ret0, _ := ret[0].(*gamesparks.GetGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame
func (mr *MockGameSparksAPIMockRecorder) GetGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockGameSparksAPI)(nil).GetGame), arg0)
}

// GetGameConfiguration mocks base method
func (m *MockGameSparksAPI) GetGameConfiguration(arg0 *gamesparks.GetGameConfigurationInput) (*gamesparks.GetGameConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameConfiguration", arg0)
	ret0, _ := ret[0].(*gamesparks.GetGameConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameConfiguration indicates an expected call of GetGameConfiguration
func (mr *MockGameSparksAPIMockRecorder) GetGameConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameConfiguration", reflect.TypeOf((*MockGameSparksAPI)(nil).GetGameConfiguration), arg0)
}

// GetGameConfigurationRequest mocks base method
func (m *MockGameSparksAPI) GetGameConfigurationRequest(arg0 *gamesparks.GetGameConfigurationInput) (*request.Request, *gamesparks.GetGameConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.GetGameConfigurationOutput)
	return ret0, ret1
}

// GetGameConfigurationRequest indicates an expected call of GetGameConfigurationRequest
func (mr *MockGameSparksAPIMockRecorder) GetGameConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameConfigurationRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).GetGameConfigurationRequest), arg0)
}

// GetGameConfigurationWithContext mocks base method
func (m *MockGameSparksAPI) GetGameConfigurationWithContext(arg0 context.Context, arg1 *gamesparks.GetGameConfigurationInput, arg2 ...request.Option) (*gamesparks.GetGameConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGameConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.GetGameConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameConfigurationWithContext indicates an expected call of GetGameConfigurationWithContext
func (mr *MockGameSparksAPIMockRecorder) GetGameConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameConfigurationWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).GetGameConfigurationWithContext), varargs...)
}

// GetGameRequest mocks base method
func (m *MockGameSparksAPI) GetGameRequest(arg0 *gamesparks.GetGameInput) (*request.Request, *gamesparks.GetGameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.GetGameOutput)
	return ret0, ret1
}

// GetGameRequest indicates an expected call of GetGameRequest
func (mr *MockGameSparksAPIMockRecorder) GetGameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).GetGameRequest), arg0)
}

// GetGameWithContext mocks base method
func (m *MockGameSparksAPI) GetGameWithContext(arg0 context.Context, arg1 *gamesparks.GetGameInput, arg2 ...request.Option) (*gamesparks.GetGameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGameWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.GetGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameWithContext indicates an expected call of GetGameWithContext
func (mr *MockGameSparksAPIMockRecorder) GetGameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).GetGameWithContext), varargs...)
}

// GetGeneratedCodeJob mocks base method
func (m *MockGameSparksAPI) GetGeneratedCodeJob(arg0 *gamesparks.GetGeneratedCodeJobInput) (*gamesparks.GetGeneratedCodeJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneratedCodeJob", arg0)
	ret0, _ := ret[0].(*gamesparks.GetGeneratedCodeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeneratedCodeJob indicates an expected call of GetGeneratedCodeJob
func (mr *MockGameSparksAPIMockRecorder) GetGeneratedCodeJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneratedCodeJob", reflect.TypeOf((*MockGameSparksAPI)(nil).GetGeneratedCodeJob), arg0)
}

// GetGeneratedCodeJobRequest mocks base method
func (m *MockGameSparksAPI) GetGeneratedCodeJobRequest(arg0 *gamesparks.GetGeneratedCodeJobInput) (*request.Request, *gamesparks.GetGeneratedCodeJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneratedCodeJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.GetGeneratedCodeJobOutput)
	return ret0, ret1
}

// GetGeneratedCodeJobRequest indicates an expected call of GetGeneratedCodeJobRequest
func (mr *MockGameSparksAPIMockRecorder) GetGeneratedCodeJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneratedCodeJobRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).GetGeneratedCodeJobRequest), arg0)
}

// GetGeneratedCodeJobWithContext mocks base method
func (m *MockGameSparksAPI) GetGeneratedCodeJobWithContext(arg0 context.Context, arg1 *gamesparks.GetGeneratedCodeJobInput, arg2 ...request.Option) (*gamesparks.GetGeneratedCodeJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGeneratedCodeJobWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.GetGeneratedCodeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeneratedCodeJobWithContext indicates an expected call of GetGeneratedCodeJobWithContext
func (mr *MockGameSparksAPIMockRecorder) GetGeneratedCodeJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneratedCodeJobWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).GetGeneratedCodeJobWithContext), varargs...)
}

// GetPlayerConnectionStatus mocks base method
func (m *MockGameSparksAPI) GetPlayerConnectionStatus(arg0 *gamesparks.GetPlayerConnectionStatusInput) (*gamesparks.GetPlayerConnectionStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerConnectionStatus", arg0)
	ret0, _ := ret[0].(*gamesparks.GetPlayerConnectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerConnectionStatus indicates an expected call of GetPlayerConnectionStatus
func (mr *MockGameSparksAPIMockRecorder) GetPlayerConnectionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerConnectionStatus", reflect.TypeOf((*MockGameSparksAPI)(nil).GetPlayerConnectionStatus), arg0)
}

// GetPlayerConnectionStatusRequest mocks base method
func (m *MockGameSparksAPI) GetPlayerConnectionStatusRequest(arg0 *gamesparks.GetPlayerConnectionStatusInput) (*request.Request, *gamesparks.GetPlayerConnectionStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerConnectionStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.GetPlayerConnectionStatusOutput)
	return ret0, ret1
}

// GetPlayerConnectionStatusRequest indicates an expected call of GetPlayerConnectionStatusRequest
func (mr *MockGameSparksAPIMockRecorder) GetPlayerConnectionStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerConnectionStatusRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).GetPlayerConnectionStatusRequest), arg0)
}

// GetPlayerConnectionStatusWithContext mocks base method
func (m *MockGameSparksAPI) GetPlayerConnectionStatusWithContext(arg0 context.Context, arg1 *gamesparks.GetPlayerConnectionStatusInput, arg2 ...request.Option) (*gamesparks.GetPlayerConnectionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlayerConnectionStatusWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.GetPlayerConnectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerConnectionStatusWithContext indicates an expected call of GetPlayerConnectionStatusWithContext
func (mr *MockGameSparksAPIMockRecorder) GetPlayerConnectionStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerConnectionStatusWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).GetPlayerConnectionStatusWithContext), varargs...)
}

// GetSnapshot mocks base method
func (m *MockGameSparksAPI) GetSnapshot(arg0 *gamesparks.GetSnapshotInput) (*gamesparks.GetSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", arg0)
	ret0, _ := ret[0].(*gamesparks.GetSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot
func (mr *MockGameSparksAPIMockRecorder) GetSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockGameSparksAPI)(nil).GetSnapshot), arg0)
}

// GetSnapshotRequest mocks base method
func (m *MockGameSparksAPI) GetSnapshotRequest(arg0 *gamesparks.GetSnapshotInput) (*request.Request, *gamesparks.GetSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.GetSnapshotOutput)
	return ret0, ret1
}

// GetSnapshotRequest indicates an expected call of GetSnapshotRequest
func (mr *MockGameSparksAPIMockRecorder) GetSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).GetSnapshotRequest), arg0)
}

// GetSnapshotWithContext mocks base method
func (m *MockGameSparksAPI) GetSnapshotWithContext(arg0 context.Context, arg1 *gamesparks.GetSnapshotInput, arg2 ...request.Option) (*gamesparks.GetSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.GetSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotWithContext indicates an expected call of GetSnapshotWithContext
func (mr *MockGameSparksAPIMockRecorder) GetSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).GetSnapshotWithContext), varargs...)
}

// GetStage mocks base method
func (m *MockGameSparksAPI) GetStage(arg0 *gamesparks.GetStageInput) (*gamesparks.GetStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStage", arg0)
	ret0, _ := ret[0].(*gamesparks.GetStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStage indicates an expected call of GetStage
func (mr *MockGameSparksAPIMockRecorder) GetStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStage", reflect.TypeOf((*MockGameSparksAPI)(nil).GetStage), arg0)
}

// GetStageDeployment mocks base method
func (m *MockGameSparksAPI) GetStageDeployment(arg0 *gamesparks.GetStageDeploymentInput) (*gamesparks.GetStageDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStageDeployment", arg0)
	ret0, _ := ret[0].(*gamesparks.GetStageDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStageDeployment indicates an expected call of GetStageDeployment
func (mr *MockGameSparksAPIMockRecorder) GetStageDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageDeployment", reflect.TypeOf((*MockGameSparksAPI)(nil).GetStageDeployment), arg0)
}

// GetStageDeploymentRequest mocks base method
func (m *MockGameSparksAPI) GetStageDeploymentRequest(arg0 *gamesparks.GetStageDeploymentInput) (*request.Request, *gamesparks.GetStageDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStageDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.GetStageDeploymentOutput)
	return ret0, ret1
}

// GetStageDeploymentRequest indicates an expected call of GetStageDeploymentRequest
func (mr *MockGameSparksAPIMockRecorder) GetStageDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageDeploymentRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).GetStageDeploymentRequest), arg0)
}

// GetStageDeploymentWithContext mocks base method
func (m *MockGameSparksAPI) GetStageDeploymentWithContext(arg0 context.Context, arg1 *gamesparks.GetStageDeploymentInput, arg2 ...request.Option) (*gamesparks.GetStageDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStageDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.GetStageDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStageDeploymentWithContext indicates an expected call of GetStageDeploymentWithContext
func (mr *MockGameSparksAPIMockRecorder) GetStageDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageDeploymentWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).GetStageDeploymentWithContext), varargs...)
}

// GetStageRequest mocks base method
func (m *MockGameSparksAPI) GetStageRequest(arg0 *gamesparks.GetStageInput) (*request.Request, *gamesparks.GetStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.GetStageOutput)
	return ret0, ret1
}

// GetStageRequest indicates an expected call of GetStageRequest
func (mr *MockGameSparksAPIMockRecorder) GetStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).GetStageRequest), arg0)
}

// GetStageWithContext mocks base method
func (m *MockGameSparksAPI) GetStageWithContext(arg0 context.Context, arg1 *gamesparks.GetStageInput, arg2 ...request.Option) (*gamesparks.GetStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStageWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.GetStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStageWithContext indicates an expected call of GetStageWithContext
func (mr *MockGameSparksAPIMockRecorder) GetStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).GetStageWithContext), varargs...)
}

// ImportGameConfiguration mocks base method
func (m *MockGameSparksAPI) ImportGameConfiguration(arg0 *gamesparks.ImportGameConfigurationInput) (*gamesparks.ImportGameConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportGameConfiguration", arg0)
	ret0, _ := ret[0].(*gamesparks.ImportGameConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportGameConfiguration indicates an expected call of ImportGameConfiguration
func (mr *MockGameSparksAPIMockRecorder) ImportGameConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportGameConfiguration", reflect.TypeOf((*MockGameSparksAPI)(nil).ImportGameConfiguration), arg0)
}

// ImportGameConfigurationRequest mocks base method
func (m *MockGameSparksAPI) ImportGameConfigurationRequest(arg0 *gamesparks.ImportGameConfigurationInput) (*request.Request, *gamesparks.ImportGameConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportGameConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.ImportGameConfigurationOutput)
	return ret0, ret1
}

// ImportGameConfigurationRequest indicates an expected call of ImportGameConfigurationRequest
func (mr *MockGameSparksAPIMockRecorder) ImportGameConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportGameConfigurationRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).ImportGameConfigurationRequest), arg0)
}

// ImportGameConfigurationWithContext mocks base method
func (m *MockGameSparksAPI) ImportGameConfigurationWithContext(arg0 context.Context, arg1 *gamesparks.ImportGameConfigurationInput, arg2 ...request.Option) (*gamesparks.ImportGameConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportGameConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.ImportGameConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportGameConfigurationWithContext indicates an expected call of ImportGameConfigurationWithContext
func (mr *MockGameSparksAPIMockRecorder) ImportGameConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportGameConfigurationWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ImportGameConfigurationWithContext), varargs...)
}

// ListExtensionVersions mocks base method
func (m *MockGameSparksAPI) ListExtensionVersions(arg0 *gamesparks.ListExtensionVersionsInput) (*gamesparks.ListExtensionVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensionVersions", arg0)
	ret0, _ := ret[0].(*gamesparks.ListExtensionVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensionVersions indicates an expected call of ListExtensionVersions
func (mr *MockGameSparksAPIMockRecorder) ListExtensionVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionVersions", reflect.TypeOf((*MockGameSparksAPI)(nil).ListExtensionVersions), arg0)
}

// ListExtensionVersionsPages mocks base method
func (m *MockGameSparksAPI) ListExtensionVersionsPages(arg0 *gamesparks.ListExtensionVersionsInput, arg1 func(*gamesparks.ListExtensionVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensionVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExtensionVersionsPages indicates an expected call of ListExtensionVersionsPages
func (mr *MockGameSparksAPIMockRecorder) ListExtensionVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionVersionsPages", reflect.TypeOf((*MockGameSparksAPI)(nil).ListExtensionVersionsPages), arg0, arg1)
}

// ListExtensionVersionsPagesWithContext mocks base method
func (m *MockGameSparksAPI) ListExtensionVersionsPagesWithContext(arg0 context.Context, arg1 *gamesparks.ListExtensionVersionsInput, arg2 func(*gamesparks.ListExtensionVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtensionVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExtensionVersionsPagesWithContext indicates an expected call of ListExtensionVersionsPagesWithContext
func (mr *MockGameSparksAPIMockRecorder) ListExtensionVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionVersionsPagesWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListExtensionVersionsPagesWithContext), varargs...)
}

// ListExtensionVersionsRequest mocks base method
func (m *MockGameSparksAPI) ListExtensionVersionsRequest(arg0 *gamesparks.ListExtensionVersionsInput) (*request.Request, *gamesparks.ListExtensionVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensionVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.ListExtensionVersionsOutput)
	return ret0, ret1
}

// ListExtensionVersionsRequest indicates an expected call of ListExtensionVersionsRequest
func (mr *MockGameSparksAPIMockRecorder) ListExtensionVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionVersionsRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).ListExtensionVersionsRequest), arg0)
}

// ListExtensionVersionsWithContext mocks base method
func (m *MockGameSparksAPI) ListExtensionVersionsWithContext(arg0 context.Context, arg1 *gamesparks.ListExtensionVersionsInput, arg2 ...request.Option) (*gamesparks.ListExtensionVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtensionVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.ListExtensionVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensionVersionsWithContext indicates an expected call of ListExtensionVersionsWithContext
func (mr *MockGameSparksAPIMockRecorder) ListExtensionVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionVersionsWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListExtensionVersionsWithContext), varargs...)
}

// ListExtensions mocks base method
func (m *MockGameSparksAPI) ListExtensions(arg0 *gamesparks.ListExtensionsInput) (*gamesparks.ListExtensionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensions", arg0)
	ret0, _ := ret[0].(*gamesparks.ListExtensionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensions indicates an expected call of ListExtensions
func (mr *MockGameSparksAPIMockRecorder) ListExtensions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensions", reflect.TypeOf((*MockGameSparksAPI)(nil).ListExtensions), arg0)
}

// ListExtensionsPages mocks base method
func (m *MockGameSparksAPI) ListExtensionsPages(arg0 *gamesparks.ListExtensionsInput, arg1 func(*gamesparks.ListExtensionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExtensionsPages indicates an expected call of ListExtensionsPages
func (mr *MockGameSparksAPIMockRecorder) ListExtensionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionsPages", reflect.TypeOf((*MockGameSparksAPI)(nil).ListExtensionsPages), arg0, arg1)
}

// ListExtensionsPagesWithContext mocks base method
func (m *MockGameSparksAPI) ListExtensionsPagesWithContext(arg0 context.Context, arg1 *gamesparks.ListExtensionsInput, arg2 func(*gamesparks.ListExtensionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtensionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExtensionsPagesWithContext indicates an expected call of ListExtensionsPagesWithContext
func (mr *MockGameSparksAPIMockRecorder) ListExtensionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionsPagesWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListExtensionsPagesWithContext), varargs...)
}

// ListExtensionsRequest mocks base method
func (m *MockGameSparksAPI) ListExtensionsRequest(arg0 *gamesparks.ListExtensionsInput) (*request.Request, *gamesparks.ListExtensionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.ListExtensionsOutput)
	return ret0, ret1
}

// ListExtensionsRequest indicates an expected call of ListExtensionsRequest
func (mr *MockGameSparksAPIMockRecorder) ListExtensionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionsRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).ListExtensionsRequest), arg0)
}

// ListExtensionsWithContext mocks base method
func (m *MockGameSparksAPI) ListExtensionsWithContext(arg0 context.Context, arg1 *gamesparks.ListExtensionsInput, arg2 ...request.Option) (*gamesparks.ListExtensionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtensionsWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.ListExtensionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensionsWithContext indicates an expected call of ListExtensionsWithContext
func (mr *MockGameSparksAPIMockRecorder) ListExtensionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionsWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListExtensionsWithContext), varargs...)
}

// ListGames mocks base method
func (m *MockGameSparksAPI) ListGames(arg0 *gamesparks.ListGamesInput) (*gamesparks.ListGamesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGames", arg0)
	ret0, _ := ret[0].(*gamesparks.ListGamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGames indicates an expected call of ListGames
func (mr *MockGameSparksAPIMockRecorder) ListGames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGames", reflect.TypeOf((*MockGameSparksAPI)(nil).ListGames), arg0)
}

// ListGamesPages mocks base method
func (m *MockGameSparksAPI) ListGamesPages(arg0 *gamesparks.ListGamesInput, arg1 func(*gamesparks.ListGamesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGamesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGamesPages indicates an expected call of ListGamesPages
func (mr *MockGameSparksAPIMockRecorder) ListGamesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGamesPages", reflect.TypeOf((*MockGameSparksAPI)(nil).ListGamesPages), arg0, arg1)
}

// ListGamesPagesWithContext mocks base method
func (m *MockGameSparksAPI) ListGamesPagesWithContext(arg0 context.Context, arg1 *gamesparks.ListGamesInput, arg2 func(*gamesparks.ListGamesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGamesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGamesPagesWithContext indicates an expected call of ListGamesPagesWithContext
func (mr *MockGameSparksAPIMockRecorder) ListGamesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGamesPagesWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListGamesPagesWithContext), varargs...)
}

// ListGamesRequest mocks base method
func (m *MockGameSparksAPI) ListGamesRequest(arg0 *gamesparks.ListGamesInput) (*request.Request, *gamesparks.ListGamesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGamesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.ListGamesOutput)
	return ret0, ret1
}

// ListGamesRequest indicates an expected call of ListGamesRequest
func (mr *MockGameSparksAPIMockRecorder) ListGamesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGamesRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).ListGamesRequest), arg0)
}

// ListGamesWithContext mocks base method
func (m *MockGameSparksAPI) ListGamesWithContext(arg0 context.Context, arg1 *gamesparks.ListGamesInput, arg2 ...request.Option) (*gamesparks.ListGamesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGamesWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.ListGamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGamesWithContext indicates an expected call of ListGamesWithContext
func (mr *MockGameSparksAPIMockRecorder) ListGamesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGamesWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListGamesWithContext), varargs...)
}

// ListGeneratedCodeJobs mocks base method
func (m *MockGameSparksAPI) ListGeneratedCodeJobs(arg0 *gamesparks.ListGeneratedCodeJobsInput) (*gamesparks.ListGeneratedCodeJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeneratedCodeJobs", arg0)
	ret0, _ := ret[0].(*gamesparks.ListGeneratedCodeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeneratedCodeJobs indicates an expected call of ListGeneratedCodeJobs
func (mr *MockGameSparksAPIMockRecorder) ListGeneratedCodeJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeneratedCodeJobs", reflect.TypeOf((*MockGameSparksAPI)(nil).ListGeneratedCodeJobs), arg0)
}

// ListGeneratedCodeJobsPages mocks base method
func (m *MockGameSparksAPI) ListGeneratedCodeJobsPages(arg0 *gamesparks.ListGeneratedCodeJobsInput, arg1 func(*gamesparks.ListGeneratedCodeJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeneratedCodeJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGeneratedCodeJobsPages indicates an expected call of ListGeneratedCodeJobsPages
func (mr *MockGameSparksAPIMockRecorder) ListGeneratedCodeJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeneratedCodeJobsPages", reflect.TypeOf((*MockGameSparksAPI)(nil).ListGeneratedCodeJobsPages), arg0, arg1)
}

// ListGeneratedCodeJobsPagesWithContext mocks base method
func (m *MockGameSparksAPI) ListGeneratedCodeJobsPagesWithContext(arg0 context.Context, arg1 *gamesparks.ListGeneratedCodeJobsInput, arg2 func(*gamesparks.ListGeneratedCodeJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGeneratedCodeJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGeneratedCodeJobsPagesWithContext indicates an expected call of ListGeneratedCodeJobsPagesWithContext
func (mr *MockGameSparksAPIMockRecorder) ListGeneratedCodeJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeneratedCodeJobsPagesWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListGeneratedCodeJobsPagesWithContext), varargs...)
}

// ListGeneratedCodeJobsRequest mocks base method
func (m *MockGameSparksAPI) ListGeneratedCodeJobsRequest(arg0 *gamesparks.ListGeneratedCodeJobsInput) (*request.Request, *gamesparks.ListGeneratedCodeJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeneratedCodeJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.ListGeneratedCodeJobsOutput)
	return ret0, ret1
}

// ListGeneratedCodeJobsRequest indicates an expected call of ListGeneratedCodeJobsRequest
func (mr *MockGameSparksAPIMockRecorder) ListGeneratedCodeJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeneratedCodeJobsRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).ListGeneratedCodeJobsRequest), arg0)
}

// ListGeneratedCodeJobsWithContext mocks base method
func (m *MockGameSparksAPI) ListGeneratedCodeJobsWithContext(arg0 context.Context, arg1 *gamesparks.ListGeneratedCodeJobsInput, arg2 ...request.Option) (*gamesparks.ListGeneratedCodeJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGeneratedCodeJobsWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.ListGeneratedCodeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeneratedCodeJobsWithContext indicates an expected call of ListGeneratedCodeJobsWithContext
func (mr *MockGameSparksAPIMockRecorder) ListGeneratedCodeJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeneratedCodeJobsWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListGeneratedCodeJobsWithContext), varargs...)
}

// ListSnapshots mocks base method
func (m *MockGameSparksAPI) ListSnapshots(arg0 *gamesparks.ListSnapshotsInput) (*gamesparks.ListSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", arg0)
	ret0, _ := ret[0].(*gamesparks.ListSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots
func (mr *MockGameSparksAPIMockRecorder) ListSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockGameSparksAPI)(nil).ListSnapshots), arg0)
}

// ListSnapshotsPages mocks base method
func (m *MockGameSparksAPI) ListSnapshotsPages(arg0 *gamesparks.ListSnapshotsInput, arg1 func(*gamesparks.ListSnapshotsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSnapshotsPages indicates an expected call of ListSnapshotsPages
func (mr *MockGameSparksAPIMockRecorder) ListSnapshotsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotsPages", reflect.TypeOf((*MockGameSparksAPI)(nil).ListSnapshotsPages), arg0, arg1)
}

// ListSnapshotsPagesWithContext mocks base method
func (m *MockGameSparksAPI) ListSnapshotsPagesWithContext(arg0 context.Context, arg1 *gamesparks.ListSnapshotsInput, arg2 func(*gamesparks.ListSnapshotsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshotsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSnapshotsPagesWithContext indicates an expected call of ListSnapshotsPagesWithContext
func (mr *MockGameSparksAPIMockRecorder) ListSnapshotsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotsPagesWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListSnapshotsPagesWithContext), varargs...)
}

// ListSnapshotsRequest mocks base method
func (m *MockGameSparksAPI) ListSnapshotsRequest(arg0 *gamesparks.ListSnapshotsInput) (*request.Request, *gamesparks.ListSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.ListSnapshotsOutput)
	return ret0, ret1
}

// ListSnapshotsRequest indicates an expected call of ListSnapshotsRequest
func (mr *MockGameSparksAPIMockRecorder) ListSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotsRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).ListSnapshotsRequest), arg0)
}

// ListSnapshotsWithContext mocks base method
func (m *MockGameSparksAPI) ListSnapshotsWithContext(arg0 context.Context, arg1 *gamesparks.ListSnapshotsInput, arg2 ...request.Option) (*gamesparks.ListSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.ListSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshotsWithContext indicates an expected call of ListSnapshotsWithContext
func (mr *MockGameSparksAPIMockRecorder) ListSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotsWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListSnapshotsWithContext), varargs...)
}

// ListStageDeployments mocks base method
func (m *MockGameSparksAPI) ListStageDeployments(arg0 *gamesparks.ListStageDeploymentsInput) (*gamesparks.ListStageDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStageDeployments", arg0)
	ret0, _ := ret[0].(*gamesparks.ListStageDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStageDeployments indicates an expected call of ListStageDeployments
func (mr *MockGameSparksAPIMockRecorder) ListStageDeployments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageDeployments", reflect.TypeOf((*MockGameSparksAPI)(nil).ListStageDeployments), arg0)
}

// ListStageDeploymentsPages mocks base method
func (m *MockGameSparksAPI) ListStageDeploymentsPages(arg0 *gamesparks.ListStageDeploymentsInput, arg1 func(*gamesparks.ListStageDeploymentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStageDeploymentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStageDeploymentsPages indicates an expected call of ListStageDeploymentsPages
func (mr *MockGameSparksAPIMockRecorder) ListStageDeploymentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageDeploymentsPages", reflect.TypeOf((*MockGameSparksAPI)(nil).ListStageDeploymentsPages), arg0, arg1)
}

// ListStageDeploymentsPagesWithContext mocks base method
func (m *MockGameSparksAPI) ListStageDeploymentsPagesWithContext(arg0 context.Context, arg1 *gamesparks.ListStageDeploymentsInput, arg2 func(*gamesparks.ListStageDeploymentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStageDeploymentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStageDeploymentsPagesWithContext indicates an expected call of ListStageDeploymentsPagesWithContext
func (mr *MockGameSparksAPIMockRecorder) ListStageDeploymentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageDeploymentsPagesWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListStageDeploymentsPagesWithContext), varargs...)
}

// ListStageDeploymentsRequest mocks base method
func (m *MockGameSparksAPI) ListStageDeploymentsRequest(arg0 *gamesparks.ListStageDeploymentsInput) (*request.Request, *gamesparks.ListStageDeploymentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStageDeploymentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.ListStageDeploymentsOutput)
	return ret0, ret1
}

// ListStageDeploymentsRequest indicates an expected call of ListStageDeploymentsRequest
func (mr *MockGameSparksAPIMockRecorder) ListStageDeploymentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageDeploymentsRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).ListStageDeploymentsRequest), arg0)
}

// ListStageDeploymentsWithContext mocks base method
func (m *MockGameSparksAPI) ListStageDeploymentsWithContext(arg0 context.Context, arg1 *gamesparks.ListStageDeploymentsInput, arg2 ...request.Option) (*gamesparks.ListStageDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStageDeploymentsWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.ListStageDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStageDeploymentsWithContext indicates an expected call of ListStageDeploymentsWithContext
func (mr *MockGameSparksAPIMockRecorder) ListStageDeploymentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageDeploymentsWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListStageDeploymentsWithContext), varargs...)
}

// ListStages mocks base method
func (m *MockGameSparksAPI) ListStages(arg0 *gamesparks.ListStagesInput) (*gamesparks.ListStagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStages", arg0)
	ret0, _ := ret[0].(*gamesparks.ListStagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStages indicates an expected call of ListStages
func (mr *MockGameSparksAPIMockRecorder) ListStages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStages", reflect.TypeOf((*MockGameSparksAPI)(nil).ListStages), arg0)
}

// ListStagesPages mocks base method
func (m *MockGameSparksAPI) ListStagesPages(arg0 *gamesparks.ListStagesInput, arg1 func(*gamesparks.ListStagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStagesPages indicates an expected call of ListStagesPages
func (mr *MockGameSparksAPIMockRecorder) ListStagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagesPages", reflect.TypeOf((*MockGameSparksAPI)(nil).ListStagesPages), arg0, arg1)
}

// ListStagesPagesWithContext mocks base method
func (m *MockGameSparksAPI) ListStagesPagesWithContext(arg0 context.Context, arg1 *gamesparks.ListStagesInput, arg2 func(*gamesparks.ListStagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStagesPagesWithContext indicates an expected call of ListStagesPagesWithContext
func (mr *MockGameSparksAPIMockRecorder) ListStagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagesPagesWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListStagesPagesWithContext), varargs...)
}

// ListStagesRequest mocks base method
func (m *MockGameSparksAPI) ListStagesRequest(arg0 *gamesparks.ListStagesInput) (*request.Request, *gamesparks.ListStagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.ListStagesOutput)
	return ret0, ret1
}

// ListStagesRequest indicates an expected call of ListStagesRequest
func (mr *MockGameSparksAPIMockRecorder) ListStagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagesRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).ListStagesRequest), arg0)
}

// ListStagesWithContext mocks base method
func (m *MockGameSparksAPI) ListStagesWithContext(arg0 context.Context, arg1 *gamesparks.ListStagesInput, arg2 ...request.Option) (*gamesparks.ListStagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStagesWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.ListStagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStagesWithContext indicates an expected call of ListStagesWithContext
func (mr *MockGameSparksAPIMockRecorder) ListStagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagesWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListStagesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockGameSparksAPI) ListTagsForResource(arg0 *gamesparks.ListTagsForResourceInput) (*gamesparks.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*gamesparks.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockGameSparksAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockGameSparksAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockGameSparksAPI) ListTagsForResourceRequest(arg0 *gamesparks.ListTagsForResourceInput) (*request.Request, *gamesparks.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockGameSparksAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockGameSparksAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *gamesparks.ListTagsForResourceInput, arg2 ...request.Option) (*gamesparks.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockGameSparksAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartGeneratedCodeJob mocks base method
func (m *MockGameSparksAPI) StartGeneratedCodeJob(arg0 *gamesparks.StartGeneratedCodeJobInput) (*gamesparks.StartGeneratedCodeJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGeneratedCodeJob", arg0)
	ret0, _ := ret[0].(*gamesparks.StartGeneratedCodeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGeneratedCodeJob indicates an expected call of StartGeneratedCodeJob
func (mr *MockGameSparksAPIMockRecorder) StartGeneratedCodeJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGeneratedCodeJob", reflect.TypeOf((*MockGameSparksAPI)(nil).StartGeneratedCodeJob), arg0)
}

// StartGeneratedCodeJobRequest mocks base method
func (m *MockGameSparksAPI) StartGeneratedCodeJobRequest(arg0 *gamesparks.StartGeneratedCodeJobInput) (*request.Request, *gamesparks.StartGeneratedCodeJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGeneratedCodeJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.StartGeneratedCodeJobOutput)
	return ret0, ret1
}

// StartGeneratedCodeJobRequest indicates an expected call of StartGeneratedCodeJobRequest
func (mr *MockGameSparksAPIMockRecorder) StartGeneratedCodeJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGeneratedCodeJobRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).StartGeneratedCodeJobRequest), arg0)
}

// StartGeneratedCodeJobWithContext mocks base method
func (m *MockGameSparksAPI) StartGeneratedCodeJobWithContext(arg0 context.Context, arg1 *gamesparks.StartGeneratedCodeJobInput, arg2 ...request.Option) (*gamesparks.StartGeneratedCodeJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartGeneratedCodeJobWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.StartGeneratedCodeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGeneratedCodeJobWithContext indicates an expected call of StartGeneratedCodeJobWithContext
func (mr *MockGameSparksAPIMockRecorder) StartGeneratedCodeJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGeneratedCodeJobWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).StartGeneratedCodeJobWithContext), varargs...)
}

// StartStageDeployment mocks base method
func (m *MockGameSparksAPI) StartStageDeployment(arg0 *gamesparks.StartStageDeploymentInput) (*gamesparks.StartStageDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStageDeployment", arg0)
	ret0, _ := ret[0].(*gamesparks.StartStageDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStageDeployment indicates an expected call of StartStageDeployment
func (mr *MockGameSparksAPIMockRecorder) StartStageDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStageDeployment", reflect.TypeOf((*MockGameSparksAPI)(nil).StartStageDeployment), arg0)
}

// StartStageDeploymentRequest mocks base method
func (m *MockGameSparksAPI) StartStageDeploymentRequest(arg0 *gamesparks.StartStageDeploymentInput) (*request.Request, *gamesparks.StartStageDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStageDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.StartStageDeploymentOutput)
	return ret0, ret1
}

// StartStageDeploymentRequest indicates an expected call of StartStageDeploymentRequest
func (mr *MockGameSparksAPIMockRecorder) StartStageDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStageDeploymentRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).StartStageDeploymentRequest), arg0)
}

// StartStageDeploymentWithContext mocks base method
func (m *MockGameSparksAPI) StartStageDeploymentWithContext(arg0 context.Context, arg1 *gamesparks.StartStageDeploymentInput, arg2 ...request.Option) (*gamesparks.StartStageDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartStageDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.StartStageDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStageDeploymentWithContext indicates an expected call of StartStageDeploymentWithContext
func (mr *MockGameSparksAPIMockRecorder) StartStageDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStageDeploymentWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).StartStageDeploymentWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockGameSparksAPI) TagResource(arg0 *gamesparks.TagResourceInput) (*gamesparks.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*gamesparks.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockGameSparksAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockGameSparksAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockGameSparksAPI) TagResourceRequest(arg0 *gamesparks.TagResourceInput) (*request.Request, *gamesparks.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockGameSparksAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockGameSparksAPI) TagResourceWithContext(arg0 context.Context, arg1 *gamesparks.TagResourceInput, arg2 ...request.Option) (*gamesparks.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockGameSparksAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockGameSparksAPI) UntagResource(arg0 *gamesparks.UntagResourceInput) (*gamesparks.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*gamesparks.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockGameSparksAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockGameSparksAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockGameSparksAPI) UntagResourceRequest(arg0 *gamesparks.UntagResourceInput) (*request.Request, *gamesparks.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockGameSparksAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockGameSparksAPI) UntagResourceWithContext(arg0 context.Context, arg1 *gamesparks.UntagResourceInput, arg2 ...request.Option) (*gamesparks.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockGameSparksAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateGame mocks base method
func (m *MockGameSparksAPI) UpdateGame(arg0 *gamesparks.UpdateGameInput) (*gamesparks.UpdateGameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGame", arg0)
	ret0, _ := ret[0].(*gamesparks.UpdateGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGame indicates an expected call of UpdateGame
func (mr *MockGameSparksAPIMockRecorder) UpdateGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGame", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateGame), arg0)
}

// UpdateGameConfiguration mocks base method
func (m *MockGameSparksAPI) UpdateGameConfiguration(arg0 *gamesparks.UpdateGameConfigurationInput) (*gamesparks.UpdateGameConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameConfiguration", arg0)
	ret0, _ := ret[0].(*gamesparks.UpdateGameConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGameConfiguration indicates an expected call of UpdateGameConfiguration
func (mr *MockGameSparksAPIMockRecorder) UpdateGameConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameConfiguration", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateGameConfiguration), arg0)
}

// UpdateGameConfigurationRequest mocks base method
func (m *MockGameSparksAPI) UpdateGameConfigurationRequest(arg0 *gamesparks.UpdateGameConfigurationInput) (*request.Request, *gamesparks.UpdateGameConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.UpdateGameConfigurationOutput)
	return ret0, ret1
}

// UpdateGameConfigurationRequest indicates an expected call of UpdateGameConfigurationRequest
func (mr *MockGameSparksAPIMockRecorder) UpdateGameConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameConfigurationRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateGameConfigurationRequest), arg0)
}

// UpdateGameConfigurationWithContext mocks base method
func (m *MockGameSparksAPI) UpdateGameConfigurationWithContext(arg0 context.Context, arg1 *gamesparks.UpdateGameConfigurationInput, arg2 ...request.Option) (*gamesparks.UpdateGameConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGameConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.UpdateGameConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGameConfigurationWithContext indicates an expected call of UpdateGameConfigurationWithContext
func (mr *MockGameSparksAPIMockRecorder) UpdateGameConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameConfigurationWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateGameConfigurationWithContext), varargs...)
}

// UpdateGameRequest mocks base method
func (m *MockGameSparksAPI) UpdateGameRequest(arg0 *gamesparks.UpdateGameInput) (*request.Request, *gamesparks.UpdateGameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.UpdateGameOutput)
	return ret0, ret1
}

// UpdateGameRequest indicates an expected call of UpdateGameRequest
func (mr *MockGameSparksAPIMockRecorder) UpdateGameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateGameRequest), arg0)
}

// UpdateGameWithContext mocks base method
func (m *MockGameSparksAPI) UpdateGameWithContext(arg0 context.Context, arg1 *gamesparks.UpdateGameInput, arg2 ...request.Option) (*gamesparks.UpdateGameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGameWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.UpdateGameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGameWithContext indicates an expected call of UpdateGameWithContext
func (mr *MockGameSparksAPIMockRecorder) UpdateGameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateGameWithContext), varargs...)
}

// UpdateSnapshot mocks base method
func (m *MockGameSparksAPI) UpdateSnapshot(arg0 *gamesparks.UpdateSnapshotInput) (*gamesparks.UpdateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshot", arg0)
	ret0, _ := ret[0].(*gamesparks.UpdateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot
func (mr *MockGameSparksAPIMockRecorder) UpdateSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateSnapshot), arg0)
}

// UpdateSnapshotRequest mocks base method
func (m *MockGameSparksAPI) UpdateSnapshotRequest(arg0 *gamesparks.UpdateSnapshotInput) (*request.Request, *gamesparks.UpdateSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.UpdateSnapshotOutput)
	return ret0, ret1
}

// UpdateSnapshotRequest indicates an expected call of UpdateSnapshotRequest
func (mr *MockGameSparksAPIMockRecorder) UpdateSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshotRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateSnapshotRequest), arg0)
}

// UpdateSnapshotWithContext mocks base method
func (m *MockGameSparksAPI) UpdateSnapshotWithContext(arg0 context.Context, arg1 *gamesparks.UpdateSnapshotInput, arg2 ...request.Option) (*gamesparks.UpdateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.UpdateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnapshotWithContext indicates an expected call of UpdateSnapshotWithContext
func (mr *MockGameSparksAPIMockRecorder) UpdateSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshotWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateSnapshotWithContext), varargs...)
}

// UpdateStage mocks base method
func (m *MockGameSparksAPI) UpdateStage(arg0 *gamesparks.UpdateStageInput) (*gamesparks.UpdateStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStage", arg0)
	ret0, _ := ret[0].(*gamesparks.UpdateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStage indicates an expected call of UpdateStage
func (mr *MockGameSparksAPIMockRecorder) UpdateStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStage", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateStage), arg0)
}

// UpdateStageRequest mocks base method
func (m *MockGameSparksAPI) UpdateStageRequest(arg0 *gamesparks.UpdateStageInput) (*request.Request, *gamesparks.UpdateStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gamesparks.UpdateStageOutput)
	return ret0, ret1
}

// UpdateStageRequest indicates an expected call of UpdateStageRequest
func (mr *MockGameSparksAPIMockRecorder) UpdateStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStageRequest", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateStageRequest), arg0)
}

// UpdateStageWithContext mocks base method
func (m *MockGameSparksAPI) UpdateStageWithContext(arg0 context.Context, arg1 *gamesparks.UpdateStageInput, arg2 ...request.Option) (*gamesparks.UpdateStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStageWithContext", varargs...)
	ret0, _ := ret[0].(*gamesparks.UpdateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStageWithContext indicates an expected call of UpdateStageWithContext
func (mr *MockGameSparksAPIMockRecorder) UpdateStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStageWithContext", reflect.TypeOf((*MockGameSparksAPI)(nil).UpdateStageWithContext), varargs...)
}
