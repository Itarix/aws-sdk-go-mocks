// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/tnb/tnbiface (interfaces: TnbAPI)

// Package tnbmock is a generated GoMock package.
package tnbmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	tnb "github.com/aws/aws-sdk-go/service/tnb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTnbAPI is a mock of TnbAPI interface
type MockTnbAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTnbAPIMockRecorder
}

// MockTnbAPIMockRecorder is the mock recorder for MockTnbAPI
type MockTnbAPIMockRecorder struct {
	mock *MockTnbAPI
}

// NewMockTnbAPI creates a new mock instance
func NewMockTnbAPI(ctrl *gomock.Controller) *MockTnbAPI {
	mock := &MockTnbAPI{ctrl: ctrl}
	mock.recorder = &MockTnbAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTnbAPI) EXPECT() *MockTnbAPIMockRecorder {
	return m.recorder
}

// CancelSolNetworkOperation mocks base method
func (m *MockTnbAPI) CancelSolNetworkOperation(arg0 *tnb.CancelSolNetworkOperationInput) (*tnb.CancelSolNetworkOperationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSolNetworkOperation", arg0)
	ret0, _ := ret[0].(*tnb.CancelSolNetworkOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSolNetworkOperation indicates an expected call of CancelSolNetworkOperation
func (mr *MockTnbAPIMockRecorder) CancelSolNetworkOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSolNetworkOperation", reflect.TypeOf((*MockTnbAPI)(nil).CancelSolNetworkOperation), arg0)
}

// CancelSolNetworkOperationRequest mocks base method
func (m *MockTnbAPI) CancelSolNetworkOperationRequest(arg0 *tnb.CancelSolNetworkOperationInput) (*request.Request, *tnb.CancelSolNetworkOperationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSolNetworkOperationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.CancelSolNetworkOperationOutput)
	return ret0, ret1
}

// CancelSolNetworkOperationRequest indicates an expected call of CancelSolNetworkOperationRequest
func (mr *MockTnbAPIMockRecorder) CancelSolNetworkOperationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSolNetworkOperationRequest", reflect.TypeOf((*MockTnbAPI)(nil).CancelSolNetworkOperationRequest), arg0)
}

// CancelSolNetworkOperationWithContext mocks base method
func (m *MockTnbAPI) CancelSolNetworkOperationWithContext(arg0 context.Context, arg1 *tnb.CancelSolNetworkOperationInput, arg2 ...request.Option) (*tnb.CancelSolNetworkOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelSolNetworkOperationWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.CancelSolNetworkOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSolNetworkOperationWithContext indicates an expected call of CancelSolNetworkOperationWithContext
func (mr *MockTnbAPIMockRecorder) CancelSolNetworkOperationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSolNetworkOperationWithContext", reflect.TypeOf((*MockTnbAPI)(nil).CancelSolNetworkOperationWithContext), varargs...)
}

// CreateSolFunctionPackage mocks base method
func (m *MockTnbAPI) CreateSolFunctionPackage(arg0 *tnb.CreateSolFunctionPackageInput) (*tnb.CreateSolFunctionPackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolFunctionPackage", arg0)
	ret0, _ := ret[0].(*tnb.CreateSolFunctionPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolFunctionPackage indicates an expected call of CreateSolFunctionPackage
func (mr *MockTnbAPIMockRecorder) CreateSolFunctionPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolFunctionPackage", reflect.TypeOf((*MockTnbAPI)(nil).CreateSolFunctionPackage), arg0)
}

// CreateSolFunctionPackageRequest mocks base method
func (m *MockTnbAPI) CreateSolFunctionPackageRequest(arg0 *tnb.CreateSolFunctionPackageInput) (*request.Request, *tnb.CreateSolFunctionPackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolFunctionPackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.CreateSolFunctionPackageOutput)
	return ret0, ret1
}

// CreateSolFunctionPackageRequest indicates an expected call of CreateSolFunctionPackageRequest
func (mr *MockTnbAPIMockRecorder) CreateSolFunctionPackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolFunctionPackageRequest", reflect.TypeOf((*MockTnbAPI)(nil).CreateSolFunctionPackageRequest), arg0)
}

// CreateSolFunctionPackageWithContext mocks base method
func (m *MockTnbAPI) CreateSolFunctionPackageWithContext(arg0 context.Context, arg1 *tnb.CreateSolFunctionPackageInput, arg2 ...request.Option) (*tnb.CreateSolFunctionPackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSolFunctionPackageWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.CreateSolFunctionPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolFunctionPackageWithContext indicates an expected call of CreateSolFunctionPackageWithContext
func (mr *MockTnbAPIMockRecorder) CreateSolFunctionPackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolFunctionPackageWithContext", reflect.TypeOf((*MockTnbAPI)(nil).CreateSolFunctionPackageWithContext), varargs...)
}

// CreateSolNetworkInstance mocks base method
func (m *MockTnbAPI) CreateSolNetworkInstance(arg0 *tnb.CreateSolNetworkInstanceInput) (*tnb.CreateSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolNetworkInstance", arg0)
	ret0, _ := ret[0].(*tnb.CreateSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolNetworkInstance indicates an expected call of CreateSolNetworkInstance
func (mr *MockTnbAPIMockRecorder) CreateSolNetworkInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolNetworkInstance", reflect.TypeOf((*MockTnbAPI)(nil).CreateSolNetworkInstance), arg0)
}

// CreateSolNetworkInstanceRequest mocks base method
func (m *MockTnbAPI) CreateSolNetworkInstanceRequest(arg0 *tnb.CreateSolNetworkInstanceInput) (*request.Request, *tnb.CreateSolNetworkInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolNetworkInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.CreateSolNetworkInstanceOutput)
	return ret0, ret1
}

// CreateSolNetworkInstanceRequest indicates an expected call of CreateSolNetworkInstanceRequest
func (mr *MockTnbAPIMockRecorder) CreateSolNetworkInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolNetworkInstanceRequest", reflect.TypeOf((*MockTnbAPI)(nil).CreateSolNetworkInstanceRequest), arg0)
}

// CreateSolNetworkInstanceWithContext mocks base method
func (m *MockTnbAPI) CreateSolNetworkInstanceWithContext(arg0 context.Context, arg1 *tnb.CreateSolNetworkInstanceInput, arg2 ...request.Option) (*tnb.CreateSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSolNetworkInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.CreateSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolNetworkInstanceWithContext indicates an expected call of CreateSolNetworkInstanceWithContext
func (mr *MockTnbAPIMockRecorder) CreateSolNetworkInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolNetworkInstanceWithContext", reflect.TypeOf((*MockTnbAPI)(nil).CreateSolNetworkInstanceWithContext), varargs...)
}

// CreateSolNetworkPackage mocks base method
func (m *MockTnbAPI) CreateSolNetworkPackage(arg0 *tnb.CreateSolNetworkPackageInput) (*tnb.CreateSolNetworkPackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolNetworkPackage", arg0)
	ret0, _ := ret[0].(*tnb.CreateSolNetworkPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolNetworkPackage indicates an expected call of CreateSolNetworkPackage
func (mr *MockTnbAPIMockRecorder) CreateSolNetworkPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolNetworkPackage", reflect.TypeOf((*MockTnbAPI)(nil).CreateSolNetworkPackage), arg0)
}

// CreateSolNetworkPackageRequest mocks base method
func (m *MockTnbAPI) CreateSolNetworkPackageRequest(arg0 *tnb.CreateSolNetworkPackageInput) (*request.Request, *tnb.CreateSolNetworkPackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolNetworkPackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.CreateSolNetworkPackageOutput)
	return ret0, ret1
}

// CreateSolNetworkPackageRequest indicates an expected call of CreateSolNetworkPackageRequest
func (mr *MockTnbAPIMockRecorder) CreateSolNetworkPackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolNetworkPackageRequest", reflect.TypeOf((*MockTnbAPI)(nil).CreateSolNetworkPackageRequest), arg0)
}

// CreateSolNetworkPackageWithContext mocks base method
func (m *MockTnbAPI) CreateSolNetworkPackageWithContext(arg0 context.Context, arg1 *tnb.CreateSolNetworkPackageInput, arg2 ...request.Option) (*tnb.CreateSolNetworkPackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSolNetworkPackageWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.CreateSolNetworkPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolNetworkPackageWithContext indicates an expected call of CreateSolNetworkPackageWithContext
func (mr *MockTnbAPIMockRecorder) CreateSolNetworkPackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolNetworkPackageWithContext", reflect.TypeOf((*MockTnbAPI)(nil).CreateSolNetworkPackageWithContext), varargs...)
}

// DeleteSolFunctionPackage mocks base method
func (m *MockTnbAPI) DeleteSolFunctionPackage(arg0 *tnb.DeleteSolFunctionPackageInput) (*tnb.DeleteSolFunctionPackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolFunctionPackage", arg0)
	ret0, _ := ret[0].(*tnb.DeleteSolFunctionPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSolFunctionPackage indicates an expected call of DeleteSolFunctionPackage
func (mr *MockTnbAPIMockRecorder) DeleteSolFunctionPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolFunctionPackage", reflect.TypeOf((*MockTnbAPI)(nil).DeleteSolFunctionPackage), arg0)
}

// DeleteSolFunctionPackageRequest mocks base method
func (m *MockTnbAPI) DeleteSolFunctionPackageRequest(arg0 *tnb.DeleteSolFunctionPackageInput) (*request.Request, *tnb.DeleteSolFunctionPackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolFunctionPackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.DeleteSolFunctionPackageOutput)
	return ret0, ret1
}

// DeleteSolFunctionPackageRequest indicates an expected call of DeleteSolFunctionPackageRequest
func (mr *MockTnbAPIMockRecorder) DeleteSolFunctionPackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolFunctionPackageRequest", reflect.TypeOf((*MockTnbAPI)(nil).DeleteSolFunctionPackageRequest), arg0)
}

// DeleteSolFunctionPackageWithContext mocks base method
func (m *MockTnbAPI) DeleteSolFunctionPackageWithContext(arg0 context.Context, arg1 *tnb.DeleteSolFunctionPackageInput, arg2 ...request.Option) (*tnb.DeleteSolFunctionPackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSolFunctionPackageWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.DeleteSolFunctionPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSolFunctionPackageWithContext indicates an expected call of DeleteSolFunctionPackageWithContext
func (mr *MockTnbAPIMockRecorder) DeleteSolFunctionPackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolFunctionPackageWithContext", reflect.TypeOf((*MockTnbAPI)(nil).DeleteSolFunctionPackageWithContext), varargs...)
}

// DeleteSolNetworkInstance mocks base method
func (m *MockTnbAPI) DeleteSolNetworkInstance(arg0 *tnb.DeleteSolNetworkInstanceInput) (*tnb.DeleteSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolNetworkInstance", arg0)
	ret0, _ := ret[0].(*tnb.DeleteSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSolNetworkInstance indicates an expected call of DeleteSolNetworkInstance
func (mr *MockTnbAPIMockRecorder) DeleteSolNetworkInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolNetworkInstance", reflect.TypeOf((*MockTnbAPI)(nil).DeleteSolNetworkInstance), arg0)
}

// DeleteSolNetworkInstanceRequest mocks base method
func (m *MockTnbAPI) DeleteSolNetworkInstanceRequest(arg0 *tnb.DeleteSolNetworkInstanceInput) (*request.Request, *tnb.DeleteSolNetworkInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolNetworkInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.DeleteSolNetworkInstanceOutput)
	return ret0, ret1
}

// DeleteSolNetworkInstanceRequest indicates an expected call of DeleteSolNetworkInstanceRequest
func (mr *MockTnbAPIMockRecorder) DeleteSolNetworkInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolNetworkInstanceRequest", reflect.TypeOf((*MockTnbAPI)(nil).DeleteSolNetworkInstanceRequest), arg0)
}

// DeleteSolNetworkInstanceWithContext mocks base method
func (m *MockTnbAPI) DeleteSolNetworkInstanceWithContext(arg0 context.Context, arg1 *tnb.DeleteSolNetworkInstanceInput, arg2 ...request.Option) (*tnb.DeleteSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSolNetworkInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.DeleteSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSolNetworkInstanceWithContext indicates an expected call of DeleteSolNetworkInstanceWithContext
func (mr *MockTnbAPIMockRecorder) DeleteSolNetworkInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolNetworkInstanceWithContext", reflect.TypeOf((*MockTnbAPI)(nil).DeleteSolNetworkInstanceWithContext), varargs...)
}

// DeleteSolNetworkPackage mocks base method
func (m *MockTnbAPI) DeleteSolNetworkPackage(arg0 *tnb.DeleteSolNetworkPackageInput) (*tnb.DeleteSolNetworkPackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolNetworkPackage", arg0)
	ret0, _ := ret[0].(*tnb.DeleteSolNetworkPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSolNetworkPackage indicates an expected call of DeleteSolNetworkPackage
func (mr *MockTnbAPIMockRecorder) DeleteSolNetworkPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolNetworkPackage", reflect.TypeOf((*MockTnbAPI)(nil).DeleteSolNetworkPackage), arg0)
}

// DeleteSolNetworkPackageRequest mocks base method
func (m *MockTnbAPI) DeleteSolNetworkPackageRequest(arg0 *tnb.DeleteSolNetworkPackageInput) (*request.Request, *tnb.DeleteSolNetworkPackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolNetworkPackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.DeleteSolNetworkPackageOutput)
	return ret0, ret1
}

// DeleteSolNetworkPackageRequest indicates an expected call of DeleteSolNetworkPackageRequest
func (mr *MockTnbAPIMockRecorder) DeleteSolNetworkPackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolNetworkPackageRequest", reflect.TypeOf((*MockTnbAPI)(nil).DeleteSolNetworkPackageRequest), arg0)
}

// DeleteSolNetworkPackageWithContext mocks base method
func (m *MockTnbAPI) DeleteSolNetworkPackageWithContext(arg0 context.Context, arg1 *tnb.DeleteSolNetworkPackageInput, arg2 ...request.Option) (*tnb.DeleteSolNetworkPackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSolNetworkPackageWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.DeleteSolNetworkPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSolNetworkPackageWithContext indicates an expected call of DeleteSolNetworkPackageWithContext
func (mr *MockTnbAPIMockRecorder) DeleteSolNetworkPackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolNetworkPackageWithContext", reflect.TypeOf((*MockTnbAPI)(nil).DeleteSolNetworkPackageWithContext), varargs...)
}

// GetSolFunctionInstance mocks base method
func (m *MockTnbAPI) GetSolFunctionInstance(arg0 *tnb.GetSolFunctionInstanceInput) (*tnb.GetSolFunctionInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolFunctionInstance", arg0)
	ret0, _ := ret[0].(*tnb.GetSolFunctionInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolFunctionInstance indicates an expected call of GetSolFunctionInstance
func (mr *MockTnbAPIMockRecorder) GetSolFunctionInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionInstance", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionInstance), arg0)
}

// GetSolFunctionInstanceRequest mocks base method
func (m *MockTnbAPI) GetSolFunctionInstanceRequest(arg0 *tnb.GetSolFunctionInstanceInput) (*request.Request, *tnb.GetSolFunctionInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolFunctionInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.GetSolFunctionInstanceOutput)
	return ret0, ret1
}

// GetSolFunctionInstanceRequest indicates an expected call of GetSolFunctionInstanceRequest
func (mr *MockTnbAPIMockRecorder) GetSolFunctionInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionInstanceRequest", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionInstanceRequest), arg0)
}

// GetSolFunctionInstanceWithContext mocks base method
func (m *MockTnbAPI) GetSolFunctionInstanceWithContext(arg0 context.Context, arg1 *tnb.GetSolFunctionInstanceInput, arg2 ...request.Option) (*tnb.GetSolFunctionInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolFunctionInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.GetSolFunctionInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolFunctionInstanceWithContext indicates an expected call of GetSolFunctionInstanceWithContext
func (mr *MockTnbAPIMockRecorder) GetSolFunctionInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionInstanceWithContext", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionInstanceWithContext), varargs...)
}

// GetSolFunctionPackage mocks base method
func (m *MockTnbAPI) GetSolFunctionPackage(arg0 *tnb.GetSolFunctionPackageInput) (*tnb.GetSolFunctionPackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolFunctionPackage", arg0)
	ret0, _ := ret[0].(*tnb.GetSolFunctionPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolFunctionPackage indicates an expected call of GetSolFunctionPackage
func (mr *MockTnbAPIMockRecorder) GetSolFunctionPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionPackage", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionPackage), arg0)
}

// GetSolFunctionPackageContent mocks base method
func (m *MockTnbAPI) GetSolFunctionPackageContent(arg0 *tnb.GetSolFunctionPackageContentInput) (*tnb.GetSolFunctionPackageContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolFunctionPackageContent", arg0)
	ret0, _ := ret[0].(*tnb.GetSolFunctionPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolFunctionPackageContent indicates an expected call of GetSolFunctionPackageContent
func (mr *MockTnbAPIMockRecorder) GetSolFunctionPackageContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionPackageContent", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionPackageContent), arg0)
}

// GetSolFunctionPackageContentRequest mocks base method
func (m *MockTnbAPI) GetSolFunctionPackageContentRequest(arg0 *tnb.GetSolFunctionPackageContentInput) (*request.Request, *tnb.GetSolFunctionPackageContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolFunctionPackageContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.GetSolFunctionPackageContentOutput)
	return ret0, ret1
}

// GetSolFunctionPackageContentRequest indicates an expected call of GetSolFunctionPackageContentRequest
func (mr *MockTnbAPIMockRecorder) GetSolFunctionPackageContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionPackageContentRequest", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionPackageContentRequest), arg0)
}

// GetSolFunctionPackageContentWithContext mocks base method
func (m *MockTnbAPI) GetSolFunctionPackageContentWithContext(arg0 context.Context, arg1 *tnb.GetSolFunctionPackageContentInput, arg2 ...request.Option) (*tnb.GetSolFunctionPackageContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolFunctionPackageContentWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.GetSolFunctionPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolFunctionPackageContentWithContext indicates an expected call of GetSolFunctionPackageContentWithContext
func (mr *MockTnbAPIMockRecorder) GetSolFunctionPackageContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionPackageContentWithContext", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionPackageContentWithContext), varargs...)
}

// GetSolFunctionPackageDescriptor mocks base method
func (m *MockTnbAPI) GetSolFunctionPackageDescriptor(arg0 *tnb.GetSolFunctionPackageDescriptorInput) (*tnb.GetSolFunctionPackageDescriptorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolFunctionPackageDescriptor", arg0)
	ret0, _ := ret[0].(*tnb.GetSolFunctionPackageDescriptorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolFunctionPackageDescriptor indicates an expected call of GetSolFunctionPackageDescriptor
func (mr *MockTnbAPIMockRecorder) GetSolFunctionPackageDescriptor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionPackageDescriptor", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionPackageDescriptor), arg0)
}

// GetSolFunctionPackageDescriptorRequest mocks base method
func (m *MockTnbAPI) GetSolFunctionPackageDescriptorRequest(arg0 *tnb.GetSolFunctionPackageDescriptorInput) (*request.Request, *tnb.GetSolFunctionPackageDescriptorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolFunctionPackageDescriptorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.GetSolFunctionPackageDescriptorOutput)
	return ret0, ret1
}

// GetSolFunctionPackageDescriptorRequest indicates an expected call of GetSolFunctionPackageDescriptorRequest
func (mr *MockTnbAPIMockRecorder) GetSolFunctionPackageDescriptorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionPackageDescriptorRequest", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionPackageDescriptorRequest), arg0)
}

// GetSolFunctionPackageDescriptorWithContext mocks base method
func (m *MockTnbAPI) GetSolFunctionPackageDescriptorWithContext(arg0 context.Context, arg1 *tnb.GetSolFunctionPackageDescriptorInput, arg2 ...request.Option) (*tnb.GetSolFunctionPackageDescriptorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolFunctionPackageDescriptorWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.GetSolFunctionPackageDescriptorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolFunctionPackageDescriptorWithContext indicates an expected call of GetSolFunctionPackageDescriptorWithContext
func (mr *MockTnbAPIMockRecorder) GetSolFunctionPackageDescriptorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionPackageDescriptorWithContext", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionPackageDescriptorWithContext), varargs...)
}

// GetSolFunctionPackageRequest mocks base method
func (m *MockTnbAPI) GetSolFunctionPackageRequest(arg0 *tnb.GetSolFunctionPackageInput) (*request.Request, *tnb.GetSolFunctionPackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolFunctionPackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.GetSolFunctionPackageOutput)
	return ret0, ret1
}

// GetSolFunctionPackageRequest indicates an expected call of GetSolFunctionPackageRequest
func (mr *MockTnbAPIMockRecorder) GetSolFunctionPackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionPackageRequest", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionPackageRequest), arg0)
}

// GetSolFunctionPackageWithContext mocks base method
func (m *MockTnbAPI) GetSolFunctionPackageWithContext(arg0 context.Context, arg1 *tnb.GetSolFunctionPackageInput, arg2 ...request.Option) (*tnb.GetSolFunctionPackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolFunctionPackageWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.GetSolFunctionPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolFunctionPackageWithContext indicates an expected call of GetSolFunctionPackageWithContext
func (mr *MockTnbAPIMockRecorder) GetSolFunctionPackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolFunctionPackageWithContext", reflect.TypeOf((*MockTnbAPI)(nil).GetSolFunctionPackageWithContext), varargs...)
}

// GetSolNetworkInstance mocks base method
func (m *MockTnbAPI) GetSolNetworkInstance(arg0 *tnb.GetSolNetworkInstanceInput) (*tnb.GetSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolNetworkInstance", arg0)
	ret0, _ := ret[0].(*tnb.GetSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolNetworkInstance indicates an expected call of GetSolNetworkInstance
func (mr *MockTnbAPIMockRecorder) GetSolNetworkInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkInstance", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkInstance), arg0)
}

// GetSolNetworkInstanceRequest mocks base method
func (m *MockTnbAPI) GetSolNetworkInstanceRequest(arg0 *tnb.GetSolNetworkInstanceInput) (*request.Request, *tnb.GetSolNetworkInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolNetworkInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.GetSolNetworkInstanceOutput)
	return ret0, ret1
}

// GetSolNetworkInstanceRequest indicates an expected call of GetSolNetworkInstanceRequest
func (mr *MockTnbAPIMockRecorder) GetSolNetworkInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkInstanceRequest", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkInstanceRequest), arg0)
}

// GetSolNetworkInstanceWithContext mocks base method
func (m *MockTnbAPI) GetSolNetworkInstanceWithContext(arg0 context.Context, arg1 *tnb.GetSolNetworkInstanceInput, arg2 ...request.Option) (*tnb.GetSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolNetworkInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.GetSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolNetworkInstanceWithContext indicates an expected call of GetSolNetworkInstanceWithContext
func (mr *MockTnbAPIMockRecorder) GetSolNetworkInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkInstanceWithContext", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkInstanceWithContext), varargs...)
}

// GetSolNetworkOperation mocks base method
func (m *MockTnbAPI) GetSolNetworkOperation(arg0 *tnb.GetSolNetworkOperationInput) (*tnb.GetSolNetworkOperationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolNetworkOperation", arg0)
	ret0, _ := ret[0].(*tnb.GetSolNetworkOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolNetworkOperation indicates an expected call of GetSolNetworkOperation
func (mr *MockTnbAPIMockRecorder) GetSolNetworkOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkOperation", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkOperation), arg0)
}

// GetSolNetworkOperationRequest mocks base method
func (m *MockTnbAPI) GetSolNetworkOperationRequest(arg0 *tnb.GetSolNetworkOperationInput) (*request.Request, *tnb.GetSolNetworkOperationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolNetworkOperationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.GetSolNetworkOperationOutput)
	return ret0, ret1
}

// GetSolNetworkOperationRequest indicates an expected call of GetSolNetworkOperationRequest
func (mr *MockTnbAPIMockRecorder) GetSolNetworkOperationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkOperationRequest", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkOperationRequest), arg0)
}

// GetSolNetworkOperationWithContext mocks base method
func (m *MockTnbAPI) GetSolNetworkOperationWithContext(arg0 context.Context, arg1 *tnb.GetSolNetworkOperationInput, arg2 ...request.Option) (*tnb.GetSolNetworkOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolNetworkOperationWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.GetSolNetworkOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolNetworkOperationWithContext indicates an expected call of GetSolNetworkOperationWithContext
func (mr *MockTnbAPIMockRecorder) GetSolNetworkOperationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkOperationWithContext", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkOperationWithContext), varargs...)
}

// GetSolNetworkPackage mocks base method
func (m *MockTnbAPI) GetSolNetworkPackage(arg0 *tnb.GetSolNetworkPackageInput) (*tnb.GetSolNetworkPackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolNetworkPackage", arg0)
	ret0, _ := ret[0].(*tnb.GetSolNetworkPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolNetworkPackage indicates an expected call of GetSolNetworkPackage
func (mr *MockTnbAPIMockRecorder) GetSolNetworkPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkPackage", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkPackage), arg0)
}

// GetSolNetworkPackageContent mocks base method
func (m *MockTnbAPI) GetSolNetworkPackageContent(arg0 *tnb.GetSolNetworkPackageContentInput) (*tnb.GetSolNetworkPackageContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolNetworkPackageContent", arg0)
	ret0, _ := ret[0].(*tnb.GetSolNetworkPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolNetworkPackageContent indicates an expected call of GetSolNetworkPackageContent
func (mr *MockTnbAPIMockRecorder) GetSolNetworkPackageContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkPackageContent", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkPackageContent), arg0)
}

// GetSolNetworkPackageContentRequest mocks base method
func (m *MockTnbAPI) GetSolNetworkPackageContentRequest(arg0 *tnb.GetSolNetworkPackageContentInput) (*request.Request, *tnb.GetSolNetworkPackageContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolNetworkPackageContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.GetSolNetworkPackageContentOutput)
	return ret0, ret1
}

// GetSolNetworkPackageContentRequest indicates an expected call of GetSolNetworkPackageContentRequest
func (mr *MockTnbAPIMockRecorder) GetSolNetworkPackageContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkPackageContentRequest", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkPackageContentRequest), arg0)
}

// GetSolNetworkPackageContentWithContext mocks base method
func (m *MockTnbAPI) GetSolNetworkPackageContentWithContext(arg0 context.Context, arg1 *tnb.GetSolNetworkPackageContentInput, arg2 ...request.Option) (*tnb.GetSolNetworkPackageContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolNetworkPackageContentWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.GetSolNetworkPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolNetworkPackageContentWithContext indicates an expected call of GetSolNetworkPackageContentWithContext
func (mr *MockTnbAPIMockRecorder) GetSolNetworkPackageContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkPackageContentWithContext", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkPackageContentWithContext), varargs...)
}

// GetSolNetworkPackageDescriptor mocks base method
func (m *MockTnbAPI) GetSolNetworkPackageDescriptor(arg0 *tnb.GetSolNetworkPackageDescriptorInput) (*tnb.GetSolNetworkPackageDescriptorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolNetworkPackageDescriptor", arg0)
	ret0, _ := ret[0].(*tnb.GetSolNetworkPackageDescriptorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolNetworkPackageDescriptor indicates an expected call of GetSolNetworkPackageDescriptor
func (mr *MockTnbAPIMockRecorder) GetSolNetworkPackageDescriptor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkPackageDescriptor", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkPackageDescriptor), arg0)
}

// GetSolNetworkPackageDescriptorRequest mocks base method
func (m *MockTnbAPI) GetSolNetworkPackageDescriptorRequest(arg0 *tnb.GetSolNetworkPackageDescriptorInput) (*request.Request, *tnb.GetSolNetworkPackageDescriptorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolNetworkPackageDescriptorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.GetSolNetworkPackageDescriptorOutput)
	return ret0, ret1
}

// GetSolNetworkPackageDescriptorRequest indicates an expected call of GetSolNetworkPackageDescriptorRequest
func (mr *MockTnbAPIMockRecorder) GetSolNetworkPackageDescriptorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkPackageDescriptorRequest", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkPackageDescriptorRequest), arg0)
}

// GetSolNetworkPackageDescriptorWithContext mocks base method
func (m *MockTnbAPI) GetSolNetworkPackageDescriptorWithContext(arg0 context.Context, arg1 *tnb.GetSolNetworkPackageDescriptorInput, arg2 ...request.Option) (*tnb.GetSolNetworkPackageDescriptorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolNetworkPackageDescriptorWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.GetSolNetworkPackageDescriptorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolNetworkPackageDescriptorWithContext indicates an expected call of GetSolNetworkPackageDescriptorWithContext
func (mr *MockTnbAPIMockRecorder) GetSolNetworkPackageDescriptorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkPackageDescriptorWithContext", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkPackageDescriptorWithContext), varargs...)
}

// GetSolNetworkPackageRequest mocks base method
func (m *MockTnbAPI) GetSolNetworkPackageRequest(arg0 *tnb.GetSolNetworkPackageInput) (*request.Request, *tnb.GetSolNetworkPackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolNetworkPackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.GetSolNetworkPackageOutput)
	return ret0, ret1
}

// GetSolNetworkPackageRequest indicates an expected call of GetSolNetworkPackageRequest
func (mr *MockTnbAPIMockRecorder) GetSolNetworkPackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkPackageRequest", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkPackageRequest), arg0)
}

// GetSolNetworkPackageWithContext mocks base method
func (m *MockTnbAPI) GetSolNetworkPackageWithContext(arg0 context.Context, arg1 *tnb.GetSolNetworkPackageInput, arg2 ...request.Option) (*tnb.GetSolNetworkPackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolNetworkPackageWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.GetSolNetworkPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolNetworkPackageWithContext indicates an expected call of GetSolNetworkPackageWithContext
func (mr *MockTnbAPIMockRecorder) GetSolNetworkPackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolNetworkPackageWithContext", reflect.TypeOf((*MockTnbAPI)(nil).GetSolNetworkPackageWithContext), varargs...)
}

// InstantiateSolNetworkInstance mocks base method
func (m *MockTnbAPI) InstantiateSolNetworkInstance(arg0 *tnb.InstantiateSolNetworkInstanceInput) (*tnb.InstantiateSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstantiateSolNetworkInstance", arg0)
	ret0, _ := ret[0].(*tnb.InstantiateSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstantiateSolNetworkInstance indicates an expected call of InstantiateSolNetworkInstance
func (mr *MockTnbAPIMockRecorder) InstantiateSolNetworkInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstantiateSolNetworkInstance", reflect.TypeOf((*MockTnbAPI)(nil).InstantiateSolNetworkInstance), arg0)
}

// InstantiateSolNetworkInstanceRequest mocks base method
func (m *MockTnbAPI) InstantiateSolNetworkInstanceRequest(arg0 *tnb.InstantiateSolNetworkInstanceInput) (*request.Request, *tnb.InstantiateSolNetworkInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstantiateSolNetworkInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.InstantiateSolNetworkInstanceOutput)
	return ret0, ret1
}

// InstantiateSolNetworkInstanceRequest indicates an expected call of InstantiateSolNetworkInstanceRequest
func (mr *MockTnbAPIMockRecorder) InstantiateSolNetworkInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstantiateSolNetworkInstanceRequest", reflect.TypeOf((*MockTnbAPI)(nil).InstantiateSolNetworkInstanceRequest), arg0)
}

// InstantiateSolNetworkInstanceWithContext mocks base method
func (m *MockTnbAPI) InstantiateSolNetworkInstanceWithContext(arg0 context.Context, arg1 *tnb.InstantiateSolNetworkInstanceInput, arg2 ...request.Option) (*tnb.InstantiateSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstantiateSolNetworkInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.InstantiateSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstantiateSolNetworkInstanceWithContext indicates an expected call of InstantiateSolNetworkInstanceWithContext
func (mr *MockTnbAPIMockRecorder) InstantiateSolNetworkInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstantiateSolNetworkInstanceWithContext", reflect.TypeOf((*MockTnbAPI)(nil).InstantiateSolNetworkInstanceWithContext), varargs...)
}

// ListSolFunctionInstances mocks base method
func (m *MockTnbAPI) ListSolFunctionInstances(arg0 *tnb.ListSolFunctionInstancesInput) (*tnb.ListSolFunctionInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolFunctionInstances", arg0)
	ret0, _ := ret[0].(*tnb.ListSolFunctionInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolFunctionInstances indicates an expected call of ListSolFunctionInstances
func (mr *MockTnbAPIMockRecorder) ListSolFunctionInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolFunctionInstances", reflect.TypeOf((*MockTnbAPI)(nil).ListSolFunctionInstances), arg0)
}

// ListSolFunctionInstancesPages mocks base method
func (m *MockTnbAPI) ListSolFunctionInstancesPages(arg0 *tnb.ListSolFunctionInstancesInput, arg1 func(*tnb.ListSolFunctionInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolFunctionInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolFunctionInstancesPages indicates an expected call of ListSolFunctionInstancesPages
func (mr *MockTnbAPIMockRecorder) ListSolFunctionInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolFunctionInstancesPages", reflect.TypeOf((*MockTnbAPI)(nil).ListSolFunctionInstancesPages), arg0, arg1)
}

// ListSolFunctionInstancesPagesWithContext mocks base method
func (m *MockTnbAPI) ListSolFunctionInstancesPagesWithContext(arg0 context.Context, arg1 *tnb.ListSolFunctionInstancesInput, arg2 func(*tnb.ListSolFunctionInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolFunctionInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolFunctionInstancesPagesWithContext indicates an expected call of ListSolFunctionInstancesPagesWithContext
func (mr *MockTnbAPIMockRecorder) ListSolFunctionInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolFunctionInstancesPagesWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListSolFunctionInstancesPagesWithContext), varargs...)
}

// ListSolFunctionInstancesRequest mocks base method
func (m *MockTnbAPI) ListSolFunctionInstancesRequest(arg0 *tnb.ListSolFunctionInstancesInput) (*request.Request, *tnb.ListSolFunctionInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolFunctionInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.ListSolFunctionInstancesOutput)
	return ret0, ret1
}

// ListSolFunctionInstancesRequest indicates an expected call of ListSolFunctionInstancesRequest
func (mr *MockTnbAPIMockRecorder) ListSolFunctionInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolFunctionInstancesRequest", reflect.TypeOf((*MockTnbAPI)(nil).ListSolFunctionInstancesRequest), arg0)
}

// ListSolFunctionInstancesWithContext mocks base method
func (m *MockTnbAPI) ListSolFunctionInstancesWithContext(arg0 context.Context, arg1 *tnb.ListSolFunctionInstancesInput, arg2 ...request.Option) (*tnb.ListSolFunctionInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolFunctionInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.ListSolFunctionInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolFunctionInstancesWithContext indicates an expected call of ListSolFunctionInstancesWithContext
func (mr *MockTnbAPIMockRecorder) ListSolFunctionInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolFunctionInstancesWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListSolFunctionInstancesWithContext), varargs...)
}

// ListSolFunctionPackages mocks base method
func (m *MockTnbAPI) ListSolFunctionPackages(arg0 *tnb.ListSolFunctionPackagesInput) (*tnb.ListSolFunctionPackagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolFunctionPackages", arg0)
	ret0, _ := ret[0].(*tnb.ListSolFunctionPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolFunctionPackages indicates an expected call of ListSolFunctionPackages
func (mr *MockTnbAPIMockRecorder) ListSolFunctionPackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolFunctionPackages", reflect.TypeOf((*MockTnbAPI)(nil).ListSolFunctionPackages), arg0)
}

// ListSolFunctionPackagesPages mocks base method
func (m *MockTnbAPI) ListSolFunctionPackagesPages(arg0 *tnb.ListSolFunctionPackagesInput, arg1 func(*tnb.ListSolFunctionPackagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolFunctionPackagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolFunctionPackagesPages indicates an expected call of ListSolFunctionPackagesPages
func (mr *MockTnbAPIMockRecorder) ListSolFunctionPackagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolFunctionPackagesPages", reflect.TypeOf((*MockTnbAPI)(nil).ListSolFunctionPackagesPages), arg0, arg1)
}

// ListSolFunctionPackagesPagesWithContext mocks base method
func (m *MockTnbAPI) ListSolFunctionPackagesPagesWithContext(arg0 context.Context, arg1 *tnb.ListSolFunctionPackagesInput, arg2 func(*tnb.ListSolFunctionPackagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolFunctionPackagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolFunctionPackagesPagesWithContext indicates an expected call of ListSolFunctionPackagesPagesWithContext
func (mr *MockTnbAPIMockRecorder) ListSolFunctionPackagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolFunctionPackagesPagesWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListSolFunctionPackagesPagesWithContext), varargs...)
}

// ListSolFunctionPackagesRequest mocks base method
func (m *MockTnbAPI) ListSolFunctionPackagesRequest(arg0 *tnb.ListSolFunctionPackagesInput) (*request.Request, *tnb.ListSolFunctionPackagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolFunctionPackagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.ListSolFunctionPackagesOutput)
	return ret0, ret1
}

// ListSolFunctionPackagesRequest indicates an expected call of ListSolFunctionPackagesRequest
func (mr *MockTnbAPIMockRecorder) ListSolFunctionPackagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolFunctionPackagesRequest", reflect.TypeOf((*MockTnbAPI)(nil).ListSolFunctionPackagesRequest), arg0)
}

// ListSolFunctionPackagesWithContext mocks base method
func (m *MockTnbAPI) ListSolFunctionPackagesWithContext(arg0 context.Context, arg1 *tnb.ListSolFunctionPackagesInput, arg2 ...request.Option) (*tnb.ListSolFunctionPackagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolFunctionPackagesWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.ListSolFunctionPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolFunctionPackagesWithContext indicates an expected call of ListSolFunctionPackagesWithContext
func (mr *MockTnbAPIMockRecorder) ListSolFunctionPackagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolFunctionPackagesWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListSolFunctionPackagesWithContext), varargs...)
}

// ListSolNetworkInstances mocks base method
func (m *MockTnbAPI) ListSolNetworkInstances(arg0 *tnb.ListSolNetworkInstancesInput) (*tnb.ListSolNetworkInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolNetworkInstances", arg0)
	ret0, _ := ret[0].(*tnb.ListSolNetworkInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolNetworkInstances indicates an expected call of ListSolNetworkInstances
func (mr *MockTnbAPIMockRecorder) ListSolNetworkInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkInstances", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkInstances), arg0)
}

// ListSolNetworkInstancesPages mocks base method
func (m *MockTnbAPI) ListSolNetworkInstancesPages(arg0 *tnb.ListSolNetworkInstancesInput, arg1 func(*tnb.ListSolNetworkInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolNetworkInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolNetworkInstancesPages indicates an expected call of ListSolNetworkInstancesPages
func (mr *MockTnbAPIMockRecorder) ListSolNetworkInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkInstancesPages", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkInstancesPages), arg0, arg1)
}

// ListSolNetworkInstancesPagesWithContext mocks base method
func (m *MockTnbAPI) ListSolNetworkInstancesPagesWithContext(arg0 context.Context, arg1 *tnb.ListSolNetworkInstancesInput, arg2 func(*tnb.ListSolNetworkInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolNetworkInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolNetworkInstancesPagesWithContext indicates an expected call of ListSolNetworkInstancesPagesWithContext
func (mr *MockTnbAPIMockRecorder) ListSolNetworkInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkInstancesPagesWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkInstancesPagesWithContext), varargs...)
}

// ListSolNetworkInstancesRequest mocks base method
func (m *MockTnbAPI) ListSolNetworkInstancesRequest(arg0 *tnb.ListSolNetworkInstancesInput) (*request.Request, *tnb.ListSolNetworkInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolNetworkInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.ListSolNetworkInstancesOutput)
	return ret0, ret1
}

// ListSolNetworkInstancesRequest indicates an expected call of ListSolNetworkInstancesRequest
func (mr *MockTnbAPIMockRecorder) ListSolNetworkInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkInstancesRequest", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkInstancesRequest), arg0)
}

// ListSolNetworkInstancesWithContext mocks base method
func (m *MockTnbAPI) ListSolNetworkInstancesWithContext(arg0 context.Context, arg1 *tnb.ListSolNetworkInstancesInput, arg2 ...request.Option) (*tnb.ListSolNetworkInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolNetworkInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.ListSolNetworkInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolNetworkInstancesWithContext indicates an expected call of ListSolNetworkInstancesWithContext
func (mr *MockTnbAPIMockRecorder) ListSolNetworkInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkInstancesWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkInstancesWithContext), varargs...)
}

// ListSolNetworkOperations mocks base method
func (m *MockTnbAPI) ListSolNetworkOperations(arg0 *tnb.ListSolNetworkOperationsInput) (*tnb.ListSolNetworkOperationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolNetworkOperations", arg0)
	ret0, _ := ret[0].(*tnb.ListSolNetworkOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolNetworkOperations indicates an expected call of ListSolNetworkOperations
func (mr *MockTnbAPIMockRecorder) ListSolNetworkOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkOperations", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkOperations), arg0)
}

// ListSolNetworkOperationsPages mocks base method
func (m *MockTnbAPI) ListSolNetworkOperationsPages(arg0 *tnb.ListSolNetworkOperationsInput, arg1 func(*tnb.ListSolNetworkOperationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolNetworkOperationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolNetworkOperationsPages indicates an expected call of ListSolNetworkOperationsPages
func (mr *MockTnbAPIMockRecorder) ListSolNetworkOperationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkOperationsPages", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkOperationsPages), arg0, arg1)
}

// ListSolNetworkOperationsPagesWithContext mocks base method
func (m *MockTnbAPI) ListSolNetworkOperationsPagesWithContext(arg0 context.Context, arg1 *tnb.ListSolNetworkOperationsInput, arg2 func(*tnb.ListSolNetworkOperationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolNetworkOperationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolNetworkOperationsPagesWithContext indicates an expected call of ListSolNetworkOperationsPagesWithContext
func (mr *MockTnbAPIMockRecorder) ListSolNetworkOperationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkOperationsPagesWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkOperationsPagesWithContext), varargs...)
}

// ListSolNetworkOperationsRequest mocks base method
func (m *MockTnbAPI) ListSolNetworkOperationsRequest(arg0 *tnb.ListSolNetworkOperationsInput) (*request.Request, *tnb.ListSolNetworkOperationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolNetworkOperationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.ListSolNetworkOperationsOutput)
	return ret0, ret1
}

// ListSolNetworkOperationsRequest indicates an expected call of ListSolNetworkOperationsRequest
func (mr *MockTnbAPIMockRecorder) ListSolNetworkOperationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkOperationsRequest", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkOperationsRequest), arg0)
}

// ListSolNetworkOperationsWithContext mocks base method
func (m *MockTnbAPI) ListSolNetworkOperationsWithContext(arg0 context.Context, arg1 *tnb.ListSolNetworkOperationsInput, arg2 ...request.Option) (*tnb.ListSolNetworkOperationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolNetworkOperationsWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.ListSolNetworkOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolNetworkOperationsWithContext indicates an expected call of ListSolNetworkOperationsWithContext
func (mr *MockTnbAPIMockRecorder) ListSolNetworkOperationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkOperationsWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkOperationsWithContext), varargs...)
}

// ListSolNetworkPackages mocks base method
func (m *MockTnbAPI) ListSolNetworkPackages(arg0 *tnb.ListSolNetworkPackagesInput) (*tnb.ListSolNetworkPackagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolNetworkPackages", arg0)
	ret0, _ := ret[0].(*tnb.ListSolNetworkPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolNetworkPackages indicates an expected call of ListSolNetworkPackages
func (mr *MockTnbAPIMockRecorder) ListSolNetworkPackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkPackages", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkPackages), arg0)
}

// ListSolNetworkPackagesPages mocks base method
func (m *MockTnbAPI) ListSolNetworkPackagesPages(arg0 *tnb.ListSolNetworkPackagesInput, arg1 func(*tnb.ListSolNetworkPackagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolNetworkPackagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolNetworkPackagesPages indicates an expected call of ListSolNetworkPackagesPages
func (mr *MockTnbAPIMockRecorder) ListSolNetworkPackagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkPackagesPages", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkPackagesPages), arg0, arg1)
}

// ListSolNetworkPackagesPagesWithContext mocks base method
func (m *MockTnbAPI) ListSolNetworkPackagesPagesWithContext(arg0 context.Context, arg1 *tnb.ListSolNetworkPackagesInput, arg2 func(*tnb.ListSolNetworkPackagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolNetworkPackagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolNetworkPackagesPagesWithContext indicates an expected call of ListSolNetworkPackagesPagesWithContext
func (mr *MockTnbAPIMockRecorder) ListSolNetworkPackagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkPackagesPagesWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkPackagesPagesWithContext), varargs...)
}

// ListSolNetworkPackagesRequest mocks base method
func (m *MockTnbAPI) ListSolNetworkPackagesRequest(arg0 *tnb.ListSolNetworkPackagesInput) (*request.Request, *tnb.ListSolNetworkPackagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolNetworkPackagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.ListSolNetworkPackagesOutput)
	return ret0, ret1
}

// ListSolNetworkPackagesRequest indicates an expected call of ListSolNetworkPackagesRequest
func (mr *MockTnbAPIMockRecorder) ListSolNetworkPackagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkPackagesRequest", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkPackagesRequest), arg0)
}

// ListSolNetworkPackagesWithContext mocks base method
func (m *MockTnbAPI) ListSolNetworkPackagesWithContext(arg0 context.Context, arg1 *tnb.ListSolNetworkPackagesInput, arg2 ...request.Option) (*tnb.ListSolNetworkPackagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolNetworkPackagesWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.ListSolNetworkPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolNetworkPackagesWithContext indicates an expected call of ListSolNetworkPackagesWithContext
func (mr *MockTnbAPIMockRecorder) ListSolNetworkPackagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolNetworkPackagesWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListSolNetworkPackagesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockTnbAPI) ListTagsForResource(arg0 *tnb.ListTagsForResourceInput) (*tnb.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*tnb.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockTnbAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockTnbAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockTnbAPI) ListTagsForResourceRequest(arg0 *tnb.ListTagsForResourceInput) (*request.Request, *tnb.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockTnbAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockTnbAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockTnbAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *tnb.ListTagsForResourceInput, arg2 ...request.Option) (*tnb.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockTnbAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutSolFunctionPackageContent mocks base method
func (m *MockTnbAPI) PutSolFunctionPackageContent(arg0 *tnb.PutSolFunctionPackageContentInput) (*tnb.PutSolFunctionPackageContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSolFunctionPackageContent", arg0)
	ret0, _ := ret[0].(*tnb.PutSolFunctionPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSolFunctionPackageContent indicates an expected call of PutSolFunctionPackageContent
func (mr *MockTnbAPIMockRecorder) PutSolFunctionPackageContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSolFunctionPackageContent", reflect.TypeOf((*MockTnbAPI)(nil).PutSolFunctionPackageContent), arg0)
}

// PutSolFunctionPackageContentRequest mocks base method
func (m *MockTnbAPI) PutSolFunctionPackageContentRequest(arg0 *tnb.PutSolFunctionPackageContentInput) (*request.Request, *tnb.PutSolFunctionPackageContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSolFunctionPackageContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.PutSolFunctionPackageContentOutput)
	return ret0, ret1
}

// PutSolFunctionPackageContentRequest indicates an expected call of PutSolFunctionPackageContentRequest
func (mr *MockTnbAPIMockRecorder) PutSolFunctionPackageContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSolFunctionPackageContentRequest", reflect.TypeOf((*MockTnbAPI)(nil).PutSolFunctionPackageContentRequest), arg0)
}

// PutSolFunctionPackageContentWithContext mocks base method
func (m *MockTnbAPI) PutSolFunctionPackageContentWithContext(arg0 context.Context, arg1 *tnb.PutSolFunctionPackageContentInput, arg2 ...request.Option) (*tnb.PutSolFunctionPackageContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSolFunctionPackageContentWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.PutSolFunctionPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSolFunctionPackageContentWithContext indicates an expected call of PutSolFunctionPackageContentWithContext
func (mr *MockTnbAPIMockRecorder) PutSolFunctionPackageContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSolFunctionPackageContentWithContext", reflect.TypeOf((*MockTnbAPI)(nil).PutSolFunctionPackageContentWithContext), varargs...)
}

// PutSolNetworkPackageContent mocks base method
func (m *MockTnbAPI) PutSolNetworkPackageContent(arg0 *tnb.PutSolNetworkPackageContentInput) (*tnb.PutSolNetworkPackageContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSolNetworkPackageContent", arg0)
	ret0, _ := ret[0].(*tnb.PutSolNetworkPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSolNetworkPackageContent indicates an expected call of PutSolNetworkPackageContent
func (mr *MockTnbAPIMockRecorder) PutSolNetworkPackageContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSolNetworkPackageContent", reflect.TypeOf((*MockTnbAPI)(nil).PutSolNetworkPackageContent), arg0)
}

// PutSolNetworkPackageContentRequest mocks base method
func (m *MockTnbAPI) PutSolNetworkPackageContentRequest(arg0 *tnb.PutSolNetworkPackageContentInput) (*request.Request, *tnb.PutSolNetworkPackageContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSolNetworkPackageContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.PutSolNetworkPackageContentOutput)
	return ret0, ret1
}

// PutSolNetworkPackageContentRequest indicates an expected call of PutSolNetworkPackageContentRequest
func (mr *MockTnbAPIMockRecorder) PutSolNetworkPackageContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSolNetworkPackageContentRequest", reflect.TypeOf((*MockTnbAPI)(nil).PutSolNetworkPackageContentRequest), arg0)
}

// PutSolNetworkPackageContentWithContext mocks base method
func (m *MockTnbAPI) PutSolNetworkPackageContentWithContext(arg0 context.Context, arg1 *tnb.PutSolNetworkPackageContentInput, arg2 ...request.Option) (*tnb.PutSolNetworkPackageContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSolNetworkPackageContentWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.PutSolNetworkPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSolNetworkPackageContentWithContext indicates an expected call of PutSolNetworkPackageContentWithContext
func (mr *MockTnbAPIMockRecorder) PutSolNetworkPackageContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSolNetworkPackageContentWithContext", reflect.TypeOf((*MockTnbAPI)(nil).PutSolNetworkPackageContentWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockTnbAPI) TagResource(arg0 *tnb.TagResourceInput) (*tnb.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*tnb.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockTnbAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockTnbAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockTnbAPI) TagResourceRequest(arg0 *tnb.TagResourceInput) (*request.Request, *tnb.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockTnbAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockTnbAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockTnbAPI) TagResourceWithContext(arg0 context.Context, arg1 *tnb.TagResourceInput, arg2 ...request.Option) (*tnb.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockTnbAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockTnbAPI)(nil).TagResourceWithContext), varargs...)
}

// TerminateSolNetworkInstance mocks base method
func (m *MockTnbAPI) TerminateSolNetworkInstance(arg0 *tnb.TerminateSolNetworkInstanceInput) (*tnb.TerminateSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateSolNetworkInstance", arg0)
	ret0, _ := ret[0].(*tnb.TerminateSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateSolNetworkInstance indicates an expected call of TerminateSolNetworkInstance
func (mr *MockTnbAPIMockRecorder) TerminateSolNetworkInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateSolNetworkInstance", reflect.TypeOf((*MockTnbAPI)(nil).TerminateSolNetworkInstance), arg0)
}

// TerminateSolNetworkInstanceRequest mocks base method
func (m *MockTnbAPI) TerminateSolNetworkInstanceRequest(arg0 *tnb.TerminateSolNetworkInstanceInput) (*request.Request, *tnb.TerminateSolNetworkInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateSolNetworkInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.TerminateSolNetworkInstanceOutput)
	return ret0, ret1
}

// TerminateSolNetworkInstanceRequest indicates an expected call of TerminateSolNetworkInstanceRequest
func (mr *MockTnbAPIMockRecorder) TerminateSolNetworkInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateSolNetworkInstanceRequest", reflect.TypeOf((*MockTnbAPI)(nil).TerminateSolNetworkInstanceRequest), arg0)
}

// TerminateSolNetworkInstanceWithContext mocks base method
func (m *MockTnbAPI) TerminateSolNetworkInstanceWithContext(arg0 context.Context, arg1 *tnb.TerminateSolNetworkInstanceInput, arg2 ...request.Option) (*tnb.TerminateSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateSolNetworkInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.TerminateSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateSolNetworkInstanceWithContext indicates an expected call of TerminateSolNetworkInstanceWithContext
func (mr *MockTnbAPIMockRecorder) TerminateSolNetworkInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateSolNetworkInstanceWithContext", reflect.TypeOf((*MockTnbAPI)(nil).TerminateSolNetworkInstanceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockTnbAPI) UntagResource(arg0 *tnb.UntagResourceInput) (*tnb.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*tnb.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockTnbAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockTnbAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockTnbAPI) UntagResourceRequest(arg0 *tnb.UntagResourceInput) (*request.Request, *tnb.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockTnbAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockTnbAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockTnbAPI) UntagResourceWithContext(arg0 context.Context, arg1 *tnb.UntagResourceInput, arg2 ...request.Option) (*tnb.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockTnbAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockTnbAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateSolFunctionPackage mocks base method
func (m *MockTnbAPI) UpdateSolFunctionPackage(arg0 *tnb.UpdateSolFunctionPackageInput) (*tnb.UpdateSolFunctionPackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSolFunctionPackage", arg0)
	ret0, _ := ret[0].(*tnb.UpdateSolFunctionPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSolFunctionPackage indicates an expected call of UpdateSolFunctionPackage
func (mr *MockTnbAPIMockRecorder) UpdateSolFunctionPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolFunctionPackage", reflect.TypeOf((*MockTnbAPI)(nil).UpdateSolFunctionPackage), arg0)
}

// UpdateSolFunctionPackageRequest mocks base method
func (m *MockTnbAPI) UpdateSolFunctionPackageRequest(arg0 *tnb.UpdateSolFunctionPackageInput) (*request.Request, *tnb.UpdateSolFunctionPackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSolFunctionPackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.UpdateSolFunctionPackageOutput)
	return ret0, ret1
}

// UpdateSolFunctionPackageRequest indicates an expected call of UpdateSolFunctionPackageRequest
func (mr *MockTnbAPIMockRecorder) UpdateSolFunctionPackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolFunctionPackageRequest", reflect.TypeOf((*MockTnbAPI)(nil).UpdateSolFunctionPackageRequest), arg0)
}

// UpdateSolFunctionPackageWithContext mocks base method
func (m *MockTnbAPI) UpdateSolFunctionPackageWithContext(arg0 context.Context, arg1 *tnb.UpdateSolFunctionPackageInput, arg2 ...request.Option) (*tnb.UpdateSolFunctionPackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSolFunctionPackageWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.UpdateSolFunctionPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSolFunctionPackageWithContext indicates an expected call of UpdateSolFunctionPackageWithContext
func (mr *MockTnbAPIMockRecorder) UpdateSolFunctionPackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolFunctionPackageWithContext", reflect.TypeOf((*MockTnbAPI)(nil).UpdateSolFunctionPackageWithContext), varargs...)
}

// UpdateSolNetworkInstance mocks base method
func (m *MockTnbAPI) UpdateSolNetworkInstance(arg0 *tnb.UpdateSolNetworkInstanceInput) (*tnb.UpdateSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSolNetworkInstance", arg0)
	ret0, _ := ret[0].(*tnb.UpdateSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSolNetworkInstance indicates an expected call of UpdateSolNetworkInstance
func (mr *MockTnbAPIMockRecorder) UpdateSolNetworkInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolNetworkInstance", reflect.TypeOf((*MockTnbAPI)(nil).UpdateSolNetworkInstance), arg0)
}

// UpdateSolNetworkInstanceRequest mocks base method
func (m *MockTnbAPI) UpdateSolNetworkInstanceRequest(arg0 *tnb.UpdateSolNetworkInstanceInput) (*request.Request, *tnb.UpdateSolNetworkInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSolNetworkInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.UpdateSolNetworkInstanceOutput)
	return ret0, ret1
}

// UpdateSolNetworkInstanceRequest indicates an expected call of UpdateSolNetworkInstanceRequest
func (mr *MockTnbAPIMockRecorder) UpdateSolNetworkInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolNetworkInstanceRequest", reflect.TypeOf((*MockTnbAPI)(nil).UpdateSolNetworkInstanceRequest), arg0)
}

// UpdateSolNetworkInstanceWithContext mocks base method
func (m *MockTnbAPI) UpdateSolNetworkInstanceWithContext(arg0 context.Context, arg1 *tnb.UpdateSolNetworkInstanceInput, arg2 ...request.Option) (*tnb.UpdateSolNetworkInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSolNetworkInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.UpdateSolNetworkInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSolNetworkInstanceWithContext indicates an expected call of UpdateSolNetworkInstanceWithContext
func (mr *MockTnbAPIMockRecorder) UpdateSolNetworkInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolNetworkInstanceWithContext", reflect.TypeOf((*MockTnbAPI)(nil).UpdateSolNetworkInstanceWithContext), varargs...)
}

// UpdateSolNetworkPackage mocks base method
func (m *MockTnbAPI) UpdateSolNetworkPackage(arg0 *tnb.UpdateSolNetworkPackageInput) (*tnb.UpdateSolNetworkPackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSolNetworkPackage", arg0)
	ret0, _ := ret[0].(*tnb.UpdateSolNetworkPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSolNetworkPackage indicates an expected call of UpdateSolNetworkPackage
func (mr *MockTnbAPIMockRecorder) UpdateSolNetworkPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolNetworkPackage", reflect.TypeOf((*MockTnbAPI)(nil).UpdateSolNetworkPackage), arg0)
}

// UpdateSolNetworkPackageRequest mocks base method
func (m *MockTnbAPI) UpdateSolNetworkPackageRequest(arg0 *tnb.UpdateSolNetworkPackageInput) (*request.Request, *tnb.UpdateSolNetworkPackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSolNetworkPackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.UpdateSolNetworkPackageOutput)
	return ret0, ret1
}

// UpdateSolNetworkPackageRequest indicates an expected call of UpdateSolNetworkPackageRequest
func (mr *MockTnbAPIMockRecorder) UpdateSolNetworkPackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolNetworkPackageRequest", reflect.TypeOf((*MockTnbAPI)(nil).UpdateSolNetworkPackageRequest), arg0)
}

// UpdateSolNetworkPackageWithContext mocks base method
func (m *MockTnbAPI) UpdateSolNetworkPackageWithContext(arg0 context.Context, arg1 *tnb.UpdateSolNetworkPackageInput, arg2 ...request.Option) (*tnb.UpdateSolNetworkPackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSolNetworkPackageWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.UpdateSolNetworkPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSolNetworkPackageWithContext indicates an expected call of UpdateSolNetworkPackageWithContext
func (mr *MockTnbAPIMockRecorder) UpdateSolNetworkPackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolNetworkPackageWithContext", reflect.TypeOf((*MockTnbAPI)(nil).UpdateSolNetworkPackageWithContext), varargs...)
}

// ValidateSolFunctionPackageContent mocks base method
func (m *MockTnbAPI) ValidateSolFunctionPackageContent(arg0 *tnb.ValidateSolFunctionPackageContentInput) (*tnb.ValidateSolFunctionPackageContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSolFunctionPackageContent", arg0)
	ret0, _ := ret[0].(*tnb.ValidateSolFunctionPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSolFunctionPackageContent indicates an expected call of ValidateSolFunctionPackageContent
func (mr *MockTnbAPIMockRecorder) ValidateSolFunctionPackageContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSolFunctionPackageContent", reflect.TypeOf((*MockTnbAPI)(nil).ValidateSolFunctionPackageContent), arg0)
}

// ValidateSolFunctionPackageContentRequest mocks base method
func (m *MockTnbAPI) ValidateSolFunctionPackageContentRequest(arg0 *tnb.ValidateSolFunctionPackageContentInput) (*request.Request, *tnb.ValidateSolFunctionPackageContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSolFunctionPackageContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.ValidateSolFunctionPackageContentOutput)
	return ret0, ret1
}

// ValidateSolFunctionPackageContentRequest indicates an expected call of ValidateSolFunctionPackageContentRequest
func (mr *MockTnbAPIMockRecorder) ValidateSolFunctionPackageContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSolFunctionPackageContentRequest", reflect.TypeOf((*MockTnbAPI)(nil).ValidateSolFunctionPackageContentRequest), arg0)
}

// ValidateSolFunctionPackageContentWithContext mocks base method
func (m *MockTnbAPI) ValidateSolFunctionPackageContentWithContext(arg0 context.Context, arg1 *tnb.ValidateSolFunctionPackageContentInput, arg2 ...request.Option) (*tnb.ValidateSolFunctionPackageContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateSolFunctionPackageContentWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.ValidateSolFunctionPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSolFunctionPackageContentWithContext indicates an expected call of ValidateSolFunctionPackageContentWithContext
func (mr *MockTnbAPIMockRecorder) ValidateSolFunctionPackageContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSolFunctionPackageContentWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ValidateSolFunctionPackageContentWithContext), varargs...)
}

// ValidateSolNetworkPackageContent mocks base method
func (m *MockTnbAPI) ValidateSolNetworkPackageContent(arg0 *tnb.ValidateSolNetworkPackageContentInput) (*tnb.ValidateSolNetworkPackageContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSolNetworkPackageContent", arg0)
	ret0, _ := ret[0].(*tnb.ValidateSolNetworkPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSolNetworkPackageContent indicates an expected call of ValidateSolNetworkPackageContent
func (mr *MockTnbAPIMockRecorder) ValidateSolNetworkPackageContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSolNetworkPackageContent", reflect.TypeOf((*MockTnbAPI)(nil).ValidateSolNetworkPackageContent), arg0)
}

// ValidateSolNetworkPackageContentRequest mocks base method
func (m *MockTnbAPI) ValidateSolNetworkPackageContentRequest(arg0 *tnb.ValidateSolNetworkPackageContentInput) (*request.Request, *tnb.ValidateSolNetworkPackageContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSolNetworkPackageContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*tnb.ValidateSolNetworkPackageContentOutput)
	return ret0, ret1
}

// ValidateSolNetworkPackageContentRequest indicates an expected call of ValidateSolNetworkPackageContentRequest
func (mr *MockTnbAPIMockRecorder) ValidateSolNetworkPackageContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSolNetworkPackageContentRequest", reflect.TypeOf((*MockTnbAPI)(nil).ValidateSolNetworkPackageContentRequest), arg0)
}

// ValidateSolNetworkPackageContentWithContext mocks base method
func (m *MockTnbAPI) ValidateSolNetworkPackageContentWithContext(arg0 context.Context, arg1 *tnb.ValidateSolNetworkPackageContentInput, arg2 ...request.Option) (*tnb.ValidateSolNetworkPackageContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateSolNetworkPackageContentWithContext", varargs...)
	ret0, _ := ret[0].(*tnb.ValidateSolNetworkPackageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSolNetworkPackageContentWithContext indicates an expected call of ValidateSolNetworkPackageContentWithContext
func (mr *MockTnbAPIMockRecorder) ValidateSolNetworkPackageContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSolNetworkPackageContentWithContext", reflect.TypeOf((*MockTnbAPI)(nil).ValidateSolNetworkPackageContentWithContext), varargs...)
}
