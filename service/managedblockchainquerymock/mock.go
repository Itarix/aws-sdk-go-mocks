// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/managedblockchainquery/managedblockchainqueryiface (interfaces: ManagedBlockchainQueryAPI)

// Package managedblockchainquerymock is a generated GoMock package.
package managedblockchainquerymock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	managedblockchainquery "github.com/aws/aws-sdk-go/service/managedblockchainquery"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManagedBlockchainQueryAPI is a mock of ManagedBlockchainQueryAPI interface
type MockManagedBlockchainQueryAPI struct {
	ctrl     *gomock.Controller
	recorder *MockManagedBlockchainQueryAPIMockRecorder
}

// MockManagedBlockchainQueryAPIMockRecorder is the mock recorder for MockManagedBlockchainQueryAPI
type MockManagedBlockchainQueryAPIMockRecorder struct {
	mock *MockManagedBlockchainQueryAPI
}

// NewMockManagedBlockchainQueryAPI creates a new mock instance
func NewMockManagedBlockchainQueryAPI(ctrl *gomock.Controller) *MockManagedBlockchainQueryAPI {
	mock := &MockManagedBlockchainQueryAPI{ctrl: ctrl}
	mock.recorder = &MockManagedBlockchainQueryAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagedBlockchainQueryAPI) EXPECT() *MockManagedBlockchainQueryAPIMockRecorder {
	return m.recorder
}

// BatchGetTokenBalance mocks base method
func (m *MockManagedBlockchainQueryAPI) BatchGetTokenBalance(arg0 *managedblockchainquery.BatchGetTokenBalanceInput) (*managedblockchainquery.BatchGetTokenBalanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTokenBalance", arg0)
	ret0, _ := ret[0].(*managedblockchainquery.BatchGetTokenBalanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTokenBalance indicates an expected call of BatchGetTokenBalance
func (mr *MockManagedBlockchainQueryAPIMockRecorder) BatchGetTokenBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTokenBalance", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).BatchGetTokenBalance), arg0)
}

// BatchGetTokenBalanceRequest mocks base method
func (m *MockManagedBlockchainQueryAPI) BatchGetTokenBalanceRequest(arg0 *managedblockchainquery.BatchGetTokenBalanceInput) (*request.Request, *managedblockchainquery.BatchGetTokenBalanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTokenBalanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchainquery.BatchGetTokenBalanceOutput)
	return ret0, ret1
}

// BatchGetTokenBalanceRequest indicates an expected call of BatchGetTokenBalanceRequest
func (mr *MockManagedBlockchainQueryAPIMockRecorder) BatchGetTokenBalanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTokenBalanceRequest", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).BatchGetTokenBalanceRequest), arg0)
}

// BatchGetTokenBalanceWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) BatchGetTokenBalanceWithContext(arg0 context.Context, arg1 *managedblockchainquery.BatchGetTokenBalanceInput, arg2 ...request.Option) (*managedblockchainquery.BatchGetTokenBalanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetTokenBalanceWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchainquery.BatchGetTokenBalanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTokenBalanceWithContext indicates an expected call of BatchGetTokenBalanceWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) BatchGetTokenBalanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTokenBalanceWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).BatchGetTokenBalanceWithContext), varargs...)
}

// GetAssetContract mocks base method
func (m *MockManagedBlockchainQueryAPI) GetAssetContract(arg0 *managedblockchainquery.GetAssetContractInput) (*managedblockchainquery.GetAssetContractOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetContract", arg0)
	ret0, _ := ret[0].(*managedblockchainquery.GetAssetContractOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetContract indicates an expected call of GetAssetContract
func (mr *MockManagedBlockchainQueryAPIMockRecorder) GetAssetContract(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetContract", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).GetAssetContract), arg0)
}

// GetAssetContractRequest mocks base method
func (m *MockManagedBlockchainQueryAPI) GetAssetContractRequest(arg0 *managedblockchainquery.GetAssetContractInput) (*request.Request, *managedblockchainquery.GetAssetContractOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetContractRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchainquery.GetAssetContractOutput)
	return ret0, ret1
}

// GetAssetContractRequest indicates an expected call of GetAssetContractRequest
func (mr *MockManagedBlockchainQueryAPIMockRecorder) GetAssetContractRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetContractRequest", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).GetAssetContractRequest), arg0)
}

// GetAssetContractWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) GetAssetContractWithContext(arg0 context.Context, arg1 *managedblockchainquery.GetAssetContractInput, arg2 ...request.Option) (*managedblockchainquery.GetAssetContractOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetContractWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchainquery.GetAssetContractOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetContractWithContext indicates an expected call of GetAssetContractWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) GetAssetContractWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetContractWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).GetAssetContractWithContext), varargs...)
}

// GetTokenBalance mocks base method
func (m *MockManagedBlockchainQueryAPI) GetTokenBalance(arg0 *managedblockchainquery.GetTokenBalanceInput) (*managedblockchainquery.GetTokenBalanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenBalance", arg0)
	ret0, _ := ret[0].(*managedblockchainquery.GetTokenBalanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenBalance indicates an expected call of GetTokenBalance
func (mr *MockManagedBlockchainQueryAPIMockRecorder) GetTokenBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenBalance", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).GetTokenBalance), arg0)
}

// GetTokenBalanceRequest mocks base method
func (m *MockManagedBlockchainQueryAPI) GetTokenBalanceRequest(arg0 *managedblockchainquery.GetTokenBalanceInput) (*request.Request, *managedblockchainquery.GetTokenBalanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenBalanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchainquery.GetTokenBalanceOutput)
	return ret0, ret1
}

// GetTokenBalanceRequest indicates an expected call of GetTokenBalanceRequest
func (mr *MockManagedBlockchainQueryAPIMockRecorder) GetTokenBalanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenBalanceRequest", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).GetTokenBalanceRequest), arg0)
}

// GetTokenBalanceWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) GetTokenBalanceWithContext(arg0 context.Context, arg1 *managedblockchainquery.GetTokenBalanceInput, arg2 ...request.Option) (*managedblockchainquery.GetTokenBalanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTokenBalanceWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchainquery.GetTokenBalanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenBalanceWithContext indicates an expected call of GetTokenBalanceWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) GetTokenBalanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenBalanceWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).GetTokenBalanceWithContext), varargs...)
}

// GetTransaction mocks base method
func (m *MockManagedBlockchainQueryAPI) GetTransaction(arg0 *managedblockchainquery.GetTransactionInput) (*managedblockchainquery.GetTransactionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0)
	ret0, _ := ret[0].(*managedblockchainquery.GetTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockManagedBlockchainQueryAPIMockRecorder) GetTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).GetTransaction), arg0)
}

// GetTransactionRequest mocks base method
func (m *MockManagedBlockchainQueryAPI) GetTransactionRequest(arg0 *managedblockchainquery.GetTransactionInput) (*request.Request, *managedblockchainquery.GetTransactionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchainquery.GetTransactionOutput)
	return ret0, ret1
}

// GetTransactionRequest indicates an expected call of GetTransactionRequest
func (mr *MockManagedBlockchainQueryAPIMockRecorder) GetTransactionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionRequest", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).GetTransactionRequest), arg0)
}

// GetTransactionWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) GetTransactionWithContext(arg0 context.Context, arg1 *managedblockchainquery.GetTransactionInput, arg2 ...request.Option) (*managedblockchainquery.GetTransactionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchainquery.GetTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionWithContext indicates an expected call of GetTransactionWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) GetTransactionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).GetTransactionWithContext), varargs...)
}

// ListAssetContracts mocks base method
func (m *MockManagedBlockchainQueryAPI) ListAssetContracts(arg0 *managedblockchainquery.ListAssetContractsInput) (*managedblockchainquery.ListAssetContractsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetContracts", arg0)
	ret0, _ := ret[0].(*managedblockchainquery.ListAssetContractsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetContracts indicates an expected call of ListAssetContracts
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListAssetContracts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetContracts", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListAssetContracts), arg0)
}

// ListAssetContractsPages mocks base method
func (m *MockManagedBlockchainQueryAPI) ListAssetContractsPages(arg0 *managedblockchainquery.ListAssetContractsInput, arg1 func(*managedblockchainquery.ListAssetContractsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetContractsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetContractsPages indicates an expected call of ListAssetContractsPages
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListAssetContractsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetContractsPages", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListAssetContractsPages), arg0, arg1)
}

// ListAssetContractsPagesWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) ListAssetContractsPagesWithContext(arg0 context.Context, arg1 *managedblockchainquery.ListAssetContractsInput, arg2 func(*managedblockchainquery.ListAssetContractsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetContractsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetContractsPagesWithContext indicates an expected call of ListAssetContractsPagesWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListAssetContractsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetContractsPagesWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListAssetContractsPagesWithContext), varargs...)
}

// ListAssetContractsRequest mocks base method
func (m *MockManagedBlockchainQueryAPI) ListAssetContractsRequest(arg0 *managedblockchainquery.ListAssetContractsInput) (*request.Request, *managedblockchainquery.ListAssetContractsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetContractsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchainquery.ListAssetContractsOutput)
	return ret0, ret1
}

// ListAssetContractsRequest indicates an expected call of ListAssetContractsRequest
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListAssetContractsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetContractsRequest", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListAssetContractsRequest), arg0)
}

// ListAssetContractsWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) ListAssetContractsWithContext(arg0 context.Context, arg1 *managedblockchainquery.ListAssetContractsInput, arg2 ...request.Option) (*managedblockchainquery.ListAssetContractsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetContractsWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchainquery.ListAssetContractsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetContractsWithContext indicates an expected call of ListAssetContractsWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListAssetContractsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetContractsWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListAssetContractsWithContext), varargs...)
}

// ListTokenBalances mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTokenBalances(arg0 *managedblockchainquery.ListTokenBalancesInput) (*managedblockchainquery.ListTokenBalancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokenBalances", arg0)
	ret0, _ := ret[0].(*managedblockchainquery.ListTokenBalancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokenBalances indicates an expected call of ListTokenBalances
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTokenBalances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokenBalances", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTokenBalances), arg0)
}

// ListTokenBalancesPages mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTokenBalancesPages(arg0 *managedblockchainquery.ListTokenBalancesInput, arg1 func(*managedblockchainquery.ListTokenBalancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokenBalancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTokenBalancesPages indicates an expected call of ListTokenBalancesPages
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTokenBalancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokenBalancesPages", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTokenBalancesPages), arg0, arg1)
}

// ListTokenBalancesPagesWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTokenBalancesPagesWithContext(arg0 context.Context, arg1 *managedblockchainquery.ListTokenBalancesInput, arg2 func(*managedblockchainquery.ListTokenBalancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTokenBalancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTokenBalancesPagesWithContext indicates an expected call of ListTokenBalancesPagesWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTokenBalancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokenBalancesPagesWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTokenBalancesPagesWithContext), varargs...)
}

// ListTokenBalancesRequest mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTokenBalancesRequest(arg0 *managedblockchainquery.ListTokenBalancesInput) (*request.Request, *managedblockchainquery.ListTokenBalancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokenBalancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchainquery.ListTokenBalancesOutput)
	return ret0, ret1
}

// ListTokenBalancesRequest indicates an expected call of ListTokenBalancesRequest
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTokenBalancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokenBalancesRequest", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTokenBalancesRequest), arg0)
}

// ListTokenBalancesWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTokenBalancesWithContext(arg0 context.Context, arg1 *managedblockchainquery.ListTokenBalancesInput, arg2 ...request.Option) (*managedblockchainquery.ListTokenBalancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTokenBalancesWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchainquery.ListTokenBalancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokenBalancesWithContext indicates an expected call of ListTokenBalancesWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTokenBalancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokenBalancesWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTokenBalancesWithContext), varargs...)
}

// ListTransactionEvents mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTransactionEvents(arg0 *managedblockchainquery.ListTransactionEventsInput) (*managedblockchainquery.ListTransactionEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionEvents", arg0)
	ret0, _ := ret[0].(*managedblockchainquery.ListTransactionEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionEvents indicates an expected call of ListTransactionEvents
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTransactionEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionEvents", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTransactionEvents), arg0)
}

// ListTransactionEventsPages mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTransactionEventsPages(arg0 *managedblockchainquery.ListTransactionEventsInput, arg1 func(*managedblockchainquery.ListTransactionEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransactionEventsPages indicates an expected call of ListTransactionEventsPages
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTransactionEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionEventsPages", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTransactionEventsPages), arg0, arg1)
}

// ListTransactionEventsPagesWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTransactionEventsPagesWithContext(arg0 context.Context, arg1 *managedblockchainquery.ListTransactionEventsInput, arg2 func(*managedblockchainquery.ListTransactionEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransactionEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransactionEventsPagesWithContext indicates an expected call of ListTransactionEventsPagesWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTransactionEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionEventsPagesWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTransactionEventsPagesWithContext), varargs...)
}

// ListTransactionEventsRequest mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTransactionEventsRequest(arg0 *managedblockchainquery.ListTransactionEventsInput) (*request.Request, *managedblockchainquery.ListTransactionEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchainquery.ListTransactionEventsOutput)
	return ret0, ret1
}

// ListTransactionEventsRequest indicates an expected call of ListTransactionEventsRequest
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTransactionEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionEventsRequest", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTransactionEventsRequest), arg0)
}

// ListTransactionEventsWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTransactionEventsWithContext(arg0 context.Context, arg1 *managedblockchainquery.ListTransactionEventsInput, arg2 ...request.Option) (*managedblockchainquery.ListTransactionEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransactionEventsWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchainquery.ListTransactionEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionEventsWithContext indicates an expected call of ListTransactionEventsWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTransactionEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionEventsWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTransactionEventsWithContext), varargs...)
}

// ListTransactions mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTransactions(arg0 *managedblockchainquery.ListTransactionsInput) (*managedblockchainquery.ListTransactionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0)
	ret0, _ := ret[0].(*managedblockchainquery.ListTransactionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTransactions), arg0)
}

// ListTransactionsPages mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTransactionsPages(arg0 *managedblockchainquery.ListTransactionsInput, arg1 func(*managedblockchainquery.ListTransactionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransactionsPages indicates an expected call of ListTransactionsPages
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTransactionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsPages", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTransactionsPages), arg0, arg1)
}

// ListTransactionsPagesWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTransactionsPagesWithContext(arg0 context.Context, arg1 *managedblockchainquery.ListTransactionsInput, arg2 func(*managedblockchainquery.ListTransactionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransactionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransactionsPagesWithContext indicates an expected call of ListTransactionsPagesWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTransactionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsPagesWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTransactionsPagesWithContext), varargs...)
}

// ListTransactionsRequest mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTransactionsRequest(arg0 *managedblockchainquery.ListTransactionsInput) (*request.Request, *managedblockchainquery.ListTransactionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchainquery.ListTransactionsOutput)
	return ret0, ret1
}

// ListTransactionsRequest indicates an expected call of ListTransactionsRequest
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTransactionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsRequest", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTransactionsRequest), arg0)
}

// ListTransactionsWithContext mocks base method
func (m *MockManagedBlockchainQueryAPI) ListTransactionsWithContext(arg0 context.Context, arg1 *managedblockchainquery.ListTransactionsInput, arg2 ...request.Option) (*managedblockchainquery.ListTransactionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransactionsWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchainquery.ListTransactionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsWithContext indicates an expected call of ListTransactionsWithContext
func (mr *MockManagedBlockchainQueryAPIMockRecorder) ListTransactionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsWithContext", reflect.TypeOf((*MockManagedBlockchainQueryAPI)(nil).ListTransactionsWithContext), varargs...)
}
