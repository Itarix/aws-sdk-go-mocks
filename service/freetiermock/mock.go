// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/freetier/freetieriface (interfaces: FreeTierAPI)

// Package freetiermock is a generated GoMock package.
package freetiermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	freetier "github.com/aws/aws-sdk-go/service/freetier"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFreeTierAPI is a mock of FreeTierAPI interface
type MockFreeTierAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFreeTierAPIMockRecorder
}

// MockFreeTierAPIMockRecorder is the mock recorder for MockFreeTierAPI
type MockFreeTierAPIMockRecorder struct {
	mock *MockFreeTierAPI
}

// NewMockFreeTierAPI creates a new mock instance
func NewMockFreeTierAPI(ctrl *gomock.Controller) *MockFreeTierAPI {
	mock := &MockFreeTierAPI{ctrl: ctrl}
	mock.recorder = &MockFreeTierAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFreeTierAPI) EXPECT() *MockFreeTierAPIMockRecorder {
	return m.recorder
}

// GetFreeTierUsage mocks base method
func (m *MockFreeTierAPI) GetFreeTierUsage(arg0 *freetier.GetFreeTierUsageInput) (*freetier.GetFreeTierUsageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeTierUsage", arg0)
	ret0, _ := ret[0].(*freetier.GetFreeTierUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreeTierUsage indicates an expected call of GetFreeTierUsage
func (mr *MockFreeTierAPIMockRecorder) GetFreeTierUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeTierUsage", reflect.TypeOf((*MockFreeTierAPI)(nil).GetFreeTierUsage), arg0)
}

// GetFreeTierUsagePages mocks base method
func (m *MockFreeTierAPI) GetFreeTierUsagePages(arg0 *freetier.GetFreeTierUsageInput, arg1 func(*freetier.GetFreeTierUsageOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeTierUsagePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFreeTierUsagePages indicates an expected call of GetFreeTierUsagePages
func (mr *MockFreeTierAPIMockRecorder) GetFreeTierUsagePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeTierUsagePages", reflect.TypeOf((*MockFreeTierAPI)(nil).GetFreeTierUsagePages), arg0, arg1)
}

// GetFreeTierUsagePagesWithContext mocks base method
func (m *MockFreeTierAPI) GetFreeTierUsagePagesWithContext(arg0 context.Context, arg1 *freetier.GetFreeTierUsageInput, arg2 func(*freetier.GetFreeTierUsageOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFreeTierUsagePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFreeTierUsagePagesWithContext indicates an expected call of GetFreeTierUsagePagesWithContext
func (mr *MockFreeTierAPIMockRecorder) GetFreeTierUsagePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeTierUsagePagesWithContext", reflect.TypeOf((*MockFreeTierAPI)(nil).GetFreeTierUsagePagesWithContext), varargs...)
}

// GetFreeTierUsageRequest mocks base method
func (m *MockFreeTierAPI) GetFreeTierUsageRequest(arg0 *freetier.GetFreeTierUsageInput) (*request.Request, *freetier.GetFreeTierUsageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeTierUsageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*freetier.GetFreeTierUsageOutput)
	return ret0, ret1
}

// GetFreeTierUsageRequest indicates an expected call of GetFreeTierUsageRequest
func (mr *MockFreeTierAPIMockRecorder) GetFreeTierUsageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeTierUsageRequest", reflect.TypeOf((*MockFreeTierAPI)(nil).GetFreeTierUsageRequest), arg0)
}

// GetFreeTierUsageWithContext mocks base method
func (m *MockFreeTierAPI) GetFreeTierUsageWithContext(arg0 context.Context, arg1 *freetier.GetFreeTierUsageInput, arg2 ...request.Option) (*freetier.GetFreeTierUsageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFreeTierUsageWithContext", varargs...)
	ret0, _ := ret[0].(*freetier.GetFreeTierUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreeTierUsageWithContext indicates an expected call of GetFreeTierUsageWithContext
func (mr *MockFreeTierAPIMockRecorder) GetFreeTierUsageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeTierUsageWithContext", reflect.TypeOf((*MockFreeTierAPI)(nil).GetFreeTierUsageWithContext), varargs...)
}
