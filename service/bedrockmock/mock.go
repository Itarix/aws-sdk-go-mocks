// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/bedrock/bedrockiface (interfaces: BedrockAPI)

// Package bedrockmock is a generated GoMock package.
package bedrockmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	bedrock "github.com/aws/aws-sdk-go/service/bedrock"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBedrockAPI is a mock of BedrockAPI interface
type MockBedrockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBedrockAPIMockRecorder
}

// MockBedrockAPIMockRecorder is the mock recorder for MockBedrockAPI
type MockBedrockAPIMockRecorder struct {
	mock *MockBedrockAPI
}

// NewMockBedrockAPI creates a new mock instance
func NewMockBedrockAPI(ctrl *gomock.Controller) *MockBedrockAPI {
	mock := &MockBedrockAPI{ctrl: ctrl}
	mock.recorder = &MockBedrockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBedrockAPI) EXPECT() *MockBedrockAPIMockRecorder {
	return m.recorder
}

// CreateModelCustomizationJob mocks base method
func (m *MockBedrockAPI) CreateModelCustomizationJob(arg0 *bedrock.CreateModelCustomizationJobInput) (*bedrock.CreateModelCustomizationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelCustomizationJob", arg0)
	ret0, _ := ret[0].(*bedrock.CreateModelCustomizationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelCustomizationJob indicates an expected call of CreateModelCustomizationJob
func (mr *MockBedrockAPIMockRecorder) CreateModelCustomizationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelCustomizationJob", reflect.TypeOf((*MockBedrockAPI)(nil).CreateModelCustomizationJob), arg0)
}

// CreateModelCustomizationJobRequest mocks base method
func (m *MockBedrockAPI) CreateModelCustomizationJobRequest(arg0 *bedrock.CreateModelCustomizationJobInput) (*request.Request, *bedrock.CreateModelCustomizationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelCustomizationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.CreateModelCustomizationJobOutput)
	return ret0, ret1
}

// CreateModelCustomizationJobRequest indicates an expected call of CreateModelCustomizationJobRequest
func (mr *MockBedrockAPIMockRecorder) CreateModelCustomizationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelCustomizationJobRequest", reflect.TypeOf((*MockBedrockAPI)(nil).CreateModelCustomizationJobRequest), arg0)
}

// CreateModelCustomizationJobWithContext mocks base method
func (m *MockBedrockAPI) CreateModelCustomizationJobWithContext(arg0 context.Context, arg1 *bedrock.CreateModelCustomizationJobInput, arg2 ...request.Option) (*bedrock.CreateModelCustomizationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelCustomizationJobWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.CreateModelCustomizationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelCustomizationJobWithContext indicates an expected call of CreateModelCustomizationJobWithContext
func (mr *MockBedrockAPIMockRecorder) CreateModelCustomizationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelCustomizationJobWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).CreateModelCustomizationJobWithContext), varargs...)
}

// DeleteCustomModel mocks base method
func (m *MockBedrockAPI) DeleteCustomModel(arg0 *bedrock.DeleteCustomModelInput) (*bedrock.DeleteCustomModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomModel", arg0)
	ret0, _ := ret[0].(*bedrock.DeleteCustomModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomModel indicates an expected call of DeleteCustomModel
func (mr *MockBedrockAPIMockRecorder) DeleteCustomModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomModel", reflect.TypeOf((*MockBedrockAPI)(nil).DeleteCustomModel), arg0)
}

// DeleteCustomModelRequest mocks base method
func (m *MockBedrockAPI) DeleteCustomModelRequest(arg0 *bedrock.DeleteCustomModelInput) (*request.Request, *bedrock.DeleteCustomModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.DeleteCustomModelOutput)
	return ret0, ret1
}

// DeleteCustomModelRequest indicates an expected call of DeleteCustomModelRequest
func (mr *MockBedrockAPIMockRecorder) DeleteCustomModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomModelRequest", reflect.TypeOf((*MockBedrockAPI)(nil).DeleteCustomModelRequest), arg0)
}

// DeleteCustomModelWithContext mocks base method
func (m *MockBedrockAPI) DeleteCustomModelWithContext(arg0 context.Context, arg1 *bedrock.DeleteCustomModelInput, arg2 ...request.Option) (*bedrock.DeleteCustomModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomModelWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.DeleteCustomModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomModelWithContext indicates an expected call of DeleteCustomModelWithContext
func (mr *MockBedrockAPIMockRecorder) DeleteCustomModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomModelWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).DeleteCustomModelWithContext), varargs...)
}

// DeleteModelInvocationLoggingConfiguration mocks base method
func (m *MockBedrockAPI) DeleteModelInvocationLoggingConfiguration(arg0 *bedrock.DeleteModelInvocationLoggingConfigurationInput) (*bedrock.DeleteModelInvocationLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelInvocationLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*bedrock.DeleteModelInvocationLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelInvocationLoggingConfiguration indicates an expected call of DeleteModelInvocationLoggingConfiguration
func (mr *MockBedrockAPIMockRecorder) DeleteModelInvocationLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelInvocationLoggingConfiguration", reflect.TypeOf((*MockBedrockAPI)(nil).DeleteModelInvocationLoggingConfiguration), arg0)
}

// DeleteModelInvocationLoggingConfigurationRequest mocks base method
func (m *MockBedrockAPI) DeleteModelInvocationLoggingConfigurationRequest(arg0 *bedrock.DeleteModelInvocationLoggingConfigurationInput) (*request.Request, *bedrock.DeleteModelInvocationLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelInvocationLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.DeleteModelInvocationLoggingConfigurationOutput)
	return ret0, ret1
}

// DeleteModelInvocationLoggingConfigurationRequest indicates an expected call of DeleteModelInvocationLoggingConfigurationRequest
func (mr *MockBedrockAPIMockRecorder) DeleteModelInvocationLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelInvocationLoggingConfigurationRequest", reflect.TypeOf((*MockBedrockAPI)(nil).DeleteModelInvocationLoggingConfigurationRequest), arg0)
}

// DeleteModelInvocationLoggingConfigurationWithContext mocks base method
func (m *MockBedrockAPI) DeleteModelInvocationLoggingConfigurationWithContext(arg0 context.Context, arg1 *bedrock.DeleteModelInvocationLoggingConfigurationInput, arg2 ...request.Option) (*bedrock.DeleteModelInvocationLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelInvocationLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.DeleteModelInvocationLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelInvocationLoggingConfigurationWithContext indicates an expected call of DeleteModelInvocationLoggingConfigurationWithContext
func (mr *MockBedrockAPIMockRecorder) DeleteModelInvocationLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelInvocationLoggingConfigurationWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).DeleteModelInvocationLoggingConfigurationWithContext), varargs...)
}

// GetCustomModel mocks base method
func (m *MockBedrockAPI) GetCustomModel(arg0 *bedrock.GetCustomModelInput) (*bedrock.GetCustomModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomModel", arg0)
	ret0, _ := ret[0].(*bedrock.GetCustomModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomModel indicates an expected call of GetCustomModel
func (mr *MockBedrockAPIMockRecorder) GetCustomModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomModel", reflect.TypeOf((*MockBedrockAPI)(nil).GetCustomModel), arg0)
}

// GetCustomModelRequest mocks base method
func (m *MockBedrockAPI) GetCustomModelRequest(arg0 *bedrock.GetCustomModelInput) (*request.Request, *bedrock.GetCustomModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.GetCustomModelOutput)
	return ret0, ret1
}

// GetCustomModelRequest indicates an expected call of GetCustomModelRequest
func (mr *MockBedrockAPIMockRecorder) GetCustomModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomModelRequest", reflect.TypeOf((*MockBedrockAPI)(nil).GetCustomModelRequest), arg0)
}

// GetCustomModelWithContext mocks base method
func (m *MockBedrockAPI) GetCustomModelWithContext(arg0 context.Context, arg1 *bedrock.GetCustomModelInput, arg2 ...request.Option) (*bedrock.GetCustomModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomModelWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.GetCustomModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomModelWithContext indicates an expected call of GetCustomModelWithContext
func (mr *MockBedrockAPIMockRecorder) GetCustomModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomModelWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).GetCustomModelWithContext), varargs...)
}

// GetFoundationModel mocks base method
func (m *MockBedrockAPI) GetFoundationModel(arg0 *bedrock.GetFoundationModelInput) (*bedrock.GetFoundationModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoundationModel", arg0)
	ret0, _ := ret[0].(*bedrock.GetFoundationModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoundationModel indicates an expected call of GetFoundationModel
func (mr *MockBedrockAPIMockRecorder) GetFoundationModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoundationModel", reflect.TypeOf((*MockBedrockAPI)(nil).GetFoundationModel), arg0)
}

// GetFoundationModelRequest mocks base method
func (m *MockBedrockAPI) GetFoundationModelRequest(arg0 *bedrock.GetFoundationModelInput) (*request.Request, *bedrock.GetFoundationModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoundationModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.GetFoundationModelOutput)
	return ret0, ret1
}

// GetFoundationModelRequest indicates an expected call of GetFoundationModelRequest
func (mr *MockBedrockAPIMockRecorder) GetFoundationModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoundationModelRequest", reflect.TypeOf((*MockBedrockAPI)(nil).GetFoundationModelRequest), arg0)
}

// GetFoundationModelWithContext mocks base method
func (m *MockBedrockAPI) GetFoundationModelWithContext(arg0 context.Context, arg1 *bedrock.GetFoundationModelInput, arg2 ...request.Option) (*bedrock.GetFoundationModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFoundationModelWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.GetFoundationModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoundationModelWithContext indicates an expected call of GetFoundationModelWithContext
func (mr *MockBedrockAPIMockRecorder) GetFoundationModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoundationModelWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).GetFoundationModelWithContext), varargs...)
}

// GetModelCustomizationJob mocks base method
func (m *MockBedrockAPI) GetModelCustomizationJob(arg0 *bedrock.GetModelCustomizationJobInput) (*bedrock.GetModelCustomizationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCustomizationJob", arg0)
	ret0, _ := ret[0].(*bedrock.GetModelCustomizationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelCustomizationJob indicates an expected call of GetModelCustomizationJob
func (mr *MockBedrockAPIMockRecorder) GetModelCustomizationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCustomizationJob", reflect.TypeOf((*MockBedrockAPI)(nil).GetModelCustomizationJob), arg0)
}

// GetModelCustomizationJobRequest mocks base method
func (m *MockBedrockAPI) GetModelCustomizationJobRequest(arg0 *bedrock.GetModelCustomizationJobInput) (*request.Request, *bedrock.GetModelCustomizationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCustomizationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.GetModelCustomizationJobOutput)
	return ret0, ret1
}

// GetModelCustomizationJobRequest indicates an expected call of GetModelCustomizationJobRequest
func (mr *MockBedrockAPIMockRecorder) GetModelCustomizationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCustomizationJobRequest", reflect.TypeOf((*MockBedrockAPI)(nil).GetModelCustomizationJobRequest), arg0)
}

// GetModelCustomizationJobWithContext mocks base method
func (m *MockBedrockAPI) GetModelCustomizationJobWithContext(arg0 context.Context, arg1 *bedrock.GetModelCustomizationJobInput, arg2 ...request.Option) (*bedrock.GetModelCustomizationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelCustomizationJobWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.GetModelCustomizationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelCustomizationJobWithContext indicates an expected call of GetModelCustomizationJobWithContext
func (mr *MockBedrockAPIMockRecorder) GetModelCustomizationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCustomizationJobWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).GetModelCustomizationJobWithContext), varargs...)
}

// GetModelInvocationLoggingConfiguration mocks base method
func (m *MockBedrockAPI) GetModelInvocationLoggingConfiguration(arg0 *bedrock.GetModelInvocationLoggingConfigurationInput) (*bedrock.GetModelInvocationLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInvocationLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*bedrock.GetModelInvocationLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInvocationLoggingConfiguration indicates an expected call of GetModelInvocationLoggingConfiguration
func (mr *MockBedrockAPIMockRecorder) GetModelInvocationLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInvocationLoggingConfiguration", reflect.TypeOf((*MockBedrockAPI)(nil).GetModelInvocationLoggingConfiguration), arg0)
}

// GetModelInvocationLoggingConfigurationRequest mocks base method
func (m *MockBedrockAPI) GetModelInvocationLoggingConfigurationRequest(arg0 *bedrock.GetModelInvocationLoggingConfigurationInput) (*request.Request, *bedrock.GetModelInvocationLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInvocationLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.GetModelInvocationLoggingConfigurationOutput)
	return ret0, ret1
}

// GetModelInvocationLoggingConfigurationRequest indicates an expected call of GetModelInvocationLoggingConfigurationRequest
func (mr *MockBedrockAPIMockRecorder) GetModelInvocationLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInvocationLoggingConfigurationRequest", reflect.TypeOf((*MockBedrockAPI)(nil).GetModelInvocationLoggingConfigurationRequest), arg0)
}

// GetModelInvocationLoggingConfigurationWithContext mocks base method
func (m *MockBedrockAPI) GetModelInvocationLoggingConfigurationWithContext(arg0 context.Context, arg1 *bedrock.GetModelInvocationLoggingConfigurationInput, arg2 ...request.Option) (*bedrock.GetModelInvocationLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelInvocationLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.GetModelInvocationLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInvocationLoggingConfigurationWithContext indicates an expected call of GetModelInvocationLoggingConfigurationWithContext
func (mr *MockBedrockAPIMockRecorder) GetModelInvocationLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInvocationLoggingConfigurationWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).GetModelInvocationLoggingConfigurationWithContext), varargs...)
}

// ListCustomModels mocks base method
func (m *MockBedrockAPI) ListCustomModels(arg0 *bedrock.ListCustomModelsInput) (*bedrock.ListCustomModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomModels", arg0)
	ret0, _ := ret[0].(*bedrock.ListCustomModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomModels indicates an expected call of ListCustomModels
func (mr *MockBedrockAPIMockRecorder) ListCustomModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomModels", reflect.TypeOf((*MockBedrockAPI)(nil).ListCustomModels), arg0)
}

// ListCustomModelsPages mocks base method
func (m *MockBedrockAPI) ListCustomModelsPages(arg0 *bedrock.ListCustomModelsInput, arg1 func(*bedrock.ListCustomModelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomModelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomModelsPages indicates an expected call of ListCustomModelsPages
func (mr *MockBedrockAPIMockRecorder) ListCustomModelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomModelsPages", reflect.TypeOf((*MockBedrockAPI)(nil).ListCustomModelsPages), arg0, arg1)
}

// ListCustomModelsPagesWithContext mocks base method
func (m *MockBedrockAPI) ListCustomModelsPagesWithContext(arg0 context.Context, arg1 *bedrock.ListCustomModelsInput, arg2 func(*bedrock.ListCustomModelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomModelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomModelsPagesWithContext indicates an expected call of ListCustomModelsPagesWithContext
func (mr *MockBedrockAPIMockRecorder) ListCustomModelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomModelsPagesWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).ListCustomModelsPagesWithContext), varargs...)
}

// ListCustomModelsRequest mocks base method
func (m *MockBedrockAPI) ListCustomModelsRequest(arg0 *bedrock.ListCustomModelsInput) (*request.Request, *bedrock.ListCustomModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.ListCustomModelsOutput)
	return ret0, ret1
}

// ListCustomModelsRequest indicates an expected call of ListCustomModelsRequest
func (mr *MockBedrockAPIMockRecorder) ListCustomModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomModelsRequest", reflect.TypeOf((*MockBedrockAPI)(nil).ListCustomModelsRequest), arg0)
}

// ListCustomModelsWithContext mocks base method
func (m *MockBedrockAPI) ListCustomModelsWithContext(arg0 context.Context, arg1 *bedrock.ListCustomModelsInput, arg2 ...request.Option) (*bedrock.ListCustomModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomModelsWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.ListCustomModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomModelsWithContext indicates an expected call of ListCustomModelsWithContext
func (mr *MockBedrockAPIMockRecorder) ListCustomModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomModelsWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).ListCustomModelsWithContext), varargs...)
}

// ListFoundationModels mocks base method
func (m *MockBedrockAPI) ListFoundationModels(arg0 *bedrock.ListFoundationModelsInput) (*bedrock.ListFoundationModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFoundationModels", arg0)
	ret0, _ := ret[0].(*bedrock.ListFoundationModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFoundationModels indicates an expected call of ListFoundationModels
func (mr *MockBedrockAPIMockRecorder) ListFoundationModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFoundationModels", reflect.TypeOf((*MockBedrockAPI)(nil).ListFoundationModels), arg0)
}

// ListFoundationModelsRequest mocks base method
func (m *MockBedrockAPI) ListFoundationModelsRequest(arg0 *bedrock.ListFoundationModelsInput) (*request.Request, *bedrock.ListFoundationModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFoundationModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.ListFoundationModelsOutput)
	return ret0, ret1
}

// ListFoundationModelsRequest indicates an expected call of ListFoundationModelsRequest
func (mr *MockBedrockAPIMockRecorder) ListFoundationModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFoundationModelsRequest", reflect.TypeOf((*MockBedrockAPI)(nil).ListFoundationModelsRequest), arg0)
}

// ListFoundationModelsWithContext mocks base method
func (m *MockBedrockAPI) ListFoundationModelsWithContext(arg0 context.Context, arg1 *bedrock.ListFoundationModelsInput, arg2 ...request.Option) (*bedrock.ListFoundationModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFoundationModelsWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.ListFoundationModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFoundationModelsWithContext indicates an expected call of ListFoundationModelsWithContext
func (mr *MockBedrockAPIMockRecorder) ListFoundationModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFoundationModelsWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).ListFoundationModelsWithContext), varargs...)
}

// ListModelCustomizationJobs mocks base method
func (m *MockBedrockAPI) ListModelCustomizationJobs(arg0 *bedrock.ListModelCustomizationJobsInput) (*bedrock.ListModelCustomizationJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelCustomizationJobs", arg0)
	ret0, _ := ret[0].(*bedrock.ListModelCustomizationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelCustomizationJobs indicates an expected call of ListModelCustomizationJobs
func (mr *MockBedrockAPIMockRecorder) ListModelCustomizationJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelCustomizationJobs", reflect.TypeOf((*MockBedrockAPI)(nil).ListModelCustomizationJobs), arg0)
}

// ListModelCustomizationJobsPages mocks base method
func (m *MockBedrockAPI) ListModelCustomizationJobsPages(arg0 *bedrock.ListModelCustomizationJobsInput, arg1 func(*bedrock.ListModelCustomizationJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelCustomizationJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListModelCustomizationJobsPages indicates an expected call of ListModelCustomizationJobsPages
func (mr *MockBedrockAPIMockRecorder) ListModelCustomizationJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelCustomizationJobsPages", reflect.TypeOf((*MockBedrockAPI)(nil).ListModelCustomizationJobsPages), arg0, arg1)
}

// ListModelCustomizationJobsPagesWithContext mocks base method
func (m *MockBedrockAPI) ListModelCustomizationJobsPagesWithContext(arg0 context.Context, arg1 *bedrock.ListModelCustomizationJobsInput, arg2 func(*bedrock.ListModelCustomizationJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelCustomizationJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListModelCustomizationJobsPagesWithContext indicates an expected call of ListModelCustomizationJobsPagesWithContext
func (mr *MockBedrockAPIMockRecorder) ListModelCustomizationJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelCustomizationJobsPagesWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).ListModelCustomizationJobsPagesWithContext), varargs...)
}

// ListModelCustomizationJobsRequest mocks base method
func (m *MockBedrockAPI) ListModelCustomizationJobsRequest(arg0 *bedrock.ListModelCustomizationJobsInput) (*request.Request, *bedrock.ListModelCustomizationJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelCustomizationJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.ListModelCustomizationJobsOutput)
	return ret0, ret1
}

// ListModelCustomizationJobsRequest indicates an expected call of ListModelCustomizationJobsRequest
func (mr *MockBedrockAPIMockRecorder) ListModelCustomizationJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelCustomizationJobsRequest", reflect.TypeOf((*MockBedrockAPI)(nil).ListModelCustomizationJobsRequest), arg0)
}

// ListModelCustomizationJobsWithContext mocks base method
func (m *MockBedrockAPI) ListModelCustomizationJobsWithContext(arg0 context.Context, arg1 *bedrock.ListModelCustomizationJobsInput, arg2 ...request.Option) (*bedrock.ListModelCustomizationJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelCustomizationJobsWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.ListModelCustomizationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelCustomizationJobsWithContext indicates an expected call of ListModelCustomizationJobsWithContext
func (mr *MockBedrockAPIMockRecorder) ListModelCustomizationJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelCustomizationJobsWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).ListModelCustomizationJobsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockBedrockAPI) ListTagsForResource(arg0 *bedrock.ListTagsForResourceInput) (*bedrock.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*bedrock.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockBedrockAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockBedrockAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockBedrockAPI) ListTagsForResourceRequest(arg0 *bedrock.ListTagsForResourceInput) (*request.Request, *bedrock.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockBedrockAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockBedrockAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockBedrockAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *bedrock.ListTagsForResourceInput, arg2 ...request.Option) (*bedrock.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockBedrockAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutModelInvocationLoggingConfiguration mocks base method
func (m *MockBedrockAPI) PutModelInvocationLoggingConfiguration(arg0 *bedrock.PutModelInvocationLoggingConfigurationInput) (*bedrock.PutModelInvocationLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutModelInvocationLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*bedrock.PutModelInvocationLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutModelInvocationLoggingConfiguration indicates an expected call of PutModelInvocationLoggingConfiguration
func (mr *MockBedrockAPIMockRecorder) PutModelInvocationLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutModelInvocationLoggingConfiguration", reflect.TypeOf((*MockBedrockAPI)(nil).PutModelInvocationLoggingConfiguration), arg0)
}

// PutModelInvocationLoggingConfigurationRequest mocks base method
func (m *MockBedrockAPI) PutModelInvocationLoggingConfigurationRequest(arg0 *bedrock.PutModelInvocationLoggingConfigurationInput) (*request.Request, *bedrock.PutModelInvocationLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutModelInvocationLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.PutModelInvocationLoggingConfigurationOutput)
	return ret0, ret1
}

// PutModelInvocationLoggingConfigurationRequest indicates an expected call of PutModelInvocationLoggingConfigurationRequest
func (mr *MockBedrockAPIMockRecorder) PutModelInvocationLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutModelInvocationLoggingConfigurationRequest", reflect.TypeOf((*MockBedrockAPI)(nil).PutModelInvocationLoggingConfigurationRequest), arg0)
}

// PutModelInvocationLoggingConfigurationWithContext mocks base method
func (m *MockBedrockAPI) PutModelInvocationLoggingConfigurationWithContext(arg0 context.Context, arg1 *bedrock.PutModelInvocationLoggingConfigurationInput, arg2 ...request.Option) (*bedrock.PutModelInvocationLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutModelInvocationLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.PutModelInvocationLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutModelInvocationLoggingConfigurationWithContext indicates an expected call of PutModelInvocationLoggingConfigurationWithContext
func (mr *MockBedrockAPIMockRecorder) PutModelInvocationLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutModelInvocationLoggingConfigurationWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).PutModelInvocationLoggingConfigurationWithContext), varargs...)
}

// StopModelCustomizationJob mocks base method
func (m *MockBedrockAPI) StopModelCustomizationJob(arg0 *bedrock.StopModelCustomizationJobInput) (*bedrock.StopModelCustomizationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopModelCustomizationJob", arg0)
	ret0, _ := ret[0].(*bedrock.StopModelCustomizationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopModelCustomizationJob indicates an expected call of StopModelCustomizationJob
func (mr *MockBedrockAPIMockRecorder) StopModelCustomizationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopModelCustomizationJob", reflect.TypeOf((*MockBedrockAPI)(nil).StopModelCustomizationJob), arg0)
}

// StopModelCustomizationJobRequest mocks base method
func (m *MockBedrockAPI) StopModelCustomizationJobRequest(arg0 *bedrock.StopModelCustomizationJobInput) (*request.Request, *bedrock.StopModelCustomizationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopModelCustomizationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.StopModelCustomizationJobOutput)
	return ret0, ret1
}

// StopModelCustomizationJobRequest indicates an expected call of StopModelCustomizationJobRequest
func (mr *MockBedrockAPIMockRecorder) StopModelCustomizationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopModelCustomizationJobRequest", reflect.TypeOf((*MockBedrockAPI)(nil).StopModelCustomizationJobRequest), arg0)
}

// StopModelCustomizationJobWithContext mocks base method
func (m *MockBedrockAPI) StopModelCustomizationJobWithContext(arg0 context.Context, arg1 *bedrock.StopModelCustomizationJobInput, arg2 ...request.Option) (*bedrock.StopModelCustomizationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopModelCustomizationJobWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.StopModelCustomizationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopModelCustomizationJobWithContext indicates an expected call of StopModelCustomizationJobWithContext
func (mr *MockBedrockAPIMockRecorder) StopModelCustomizationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopModelCustomizationJobWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).StopModelCustomizationJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockBedrockAPI) TagResource(arg0 *bedrock.TagResourceInput) (*bedrock.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*bedrock.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockBedrockAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockBedrockAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockBedrockAPI) TagResourceRequest(arg0 *bedrock.TagResourceInput) (*request.Request, *bedrock.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockBedrockAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockBedrockAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockBedrockAPI) TagResourceWithContext(arg0 context.Context, arg1 *bedrock.TagResourceInput, arg2 ...request.Option) (*bedrock.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockBedrockAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockBedrockAPI) UntagResource(arg0 *bedrock.UntagResourceInput) (*bedrock.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*bedrock.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockBedrockAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockBedrockAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockBedrockAPI) UntagResourceRequest(arg0 *bedrock.UntagResourceInput) (*request.Request, *bedrock.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrock.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockBedrockAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockBedrockAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockBedrockAPI) UntagResourceWithContext(arg0 context.Context, arg1 *bedrock.UntagResourceInput, arg2 ...request.Option) (*bedrock.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*bedrock.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockBedrockAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockBedrockAPI)(nil).UntagResourceWithContext), varargs...)
}
