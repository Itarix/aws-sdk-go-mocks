// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/medialive/medialiveiface (interfaces: MediaLiveAPI)

// Package medialivemock is a generated GoMock package.
package medialivemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	medialive "github.com/aws/aws-sdk-go/service/medialive"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMediaLiveAPI is a mock of MediaLiveAPI interface
type MockMediaLiveAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMediaLiveAPIMockRecorder
}

// MockMediaLiveAPIMockRecorder is the mock recorder for MockMediaLiveAPI
type MockMediaLiveAPIMockRecorder struct {
	mock *MockMediaLiveAPI
}

// NewMockMediaLiveAPI creates a new mock instance
func NewMockMediaLiveAPI(ctrl *gomock.Controller) *MockMediaLiveAPI {
	mock := &MockMediaLiveAPI{ctrl: ctrl}
	mock.recorder = &MockMediaLiveAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMediaLiveAPI) EXPECT() *MockMediaLiveAPIMockRecorder {
	return m.recorder
}

// BatchUpdateSchedule mocks base method
func (m *MockMediaLiveAPI) BatchUpdateSchedule(arg0 *medialive.BatchUpdateScheduleInput) (*medialive.BatchUpdateScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateSchedule", arg0)
	ret0, _ := ret[0].(*medialive.BatchUpdateScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateSchedule indicates an expected call of BatchUpdateSchedule
func (mr *MockMediaLiveAPIMockRecorder) BatchUpdateSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateSchedule", reflect.TypeOf((*MockMediaLiveAPI)(nil).BatchUpdateSchedule), arg0)
}

// BatchUpdateScheduleRequest mocks base method
func (m *MockMediaLiveAPI) BatchUpdateScheduleRequest(arg0 *medialive.BatchUpdateScheduleInput) (*request.Request, *medialive.BatchUpdateScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.BatchUpdateScheduleOutput)
	return ret0, ret1
}

// BatchUpdateScheduleRequest indicates an expected call of BatchUpdateScheduleRequest
func (mr *MockMediaLiveAPIMockRecorder) BatchUpdateScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateScheduleRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).BatchUpdateScheduleRequest), arg0)
}

// BatchUpdateScheduleWithContext mocks base method
func (m *MockMediaLiveAPI) BatchUpdateScheduleWithContext(arg0 context.Context, arg1 *medialive.BatchUpdateScheduleInput, arg2 ...request.Option) (*medialive.BatchUpdateScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.BatchUpdateScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateScheduleWithContext indicates an expected call of BatchUpdateScheduleWithContext
func (mr *MockMediaLiveAPIMockRecorder) BatchUpdateScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateScheduleWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).BatchUpdateScheduleWithContext), varargs...)
}

// CreateChannel mocks base method
func (m *MockMediaLiveAPI) CreateChannel(arg0 *medialive.CreateChannelInput) (*medialive.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(*medialive.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockMediaLiveAPIMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateChannel), arg0)
}

// CreateChannelRequest mocks base method
func (m *MockMediaLiveAPI) CreateChannelRequest(arg0 *medialive.CreateChannelInput) (*request.Request, *medialive.CreateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.CreateChannelOutput)
	return ret0, ret1
}

// CreateChannelRequest indicates an expected call of CreateChannelRequest
func (mr *MockMediaLiveAPIMockRecorder) CreateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateChannelRequest), arg0)
}

// CreateChannelWithContext mocks base method
func (m *MockMediaLiveAPI) CreateChannelWithContext(arg0 context.Context, arg1 *medialive.CreateChannelInput, arg2 ...request.Option) (*medialive.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelWithContext indicates an expected call of CreateChannelWithContext
func (mr *MockMediaLiveAPIMockRecorder) CreateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateChannelWithContext), varargs...)
}

// CreateInput mocks base method
func (m *MockMediaLiveAPI) CreateInput(arg0 *medialive.CreateInputInput) (*medialive.CreateInputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInput", arg0)
	ret0, _ := ret[0].(*medialive.CreateInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInput indicates an expected call of CreateInput
func (mr *MockMediaLiveAPIMockRecorder) CreateInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInput", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateInput), arg0)
}

// CreateInputRequest mocks base method
func (m *MockMediaLiveAPI) CreateInputRequest(arg0 *medialive.CreateInputInput) (*request.Request, *medialive.CreateInputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.CreateInputOutput)
	return ret0, ret1
}

// CreateInputRequest indicates an expected call of CreateInputRequest
func (mr *MockMediaLiveAPIMockRecorder) CreateInputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInputRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateInputRequest), arg0)
}

// CreateInputSecurityGroup mocks base method
func (m *MockMediaLiveAPI) CreateInputSecurityGroup(arg0 *medialive.CreateInputSecurityGroupInput) (*medialive.CreateInputSecurityGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInputSecurityGroup", arg0)
	ret0, _ := ret[0].(*medialive.CreateInputSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInputSecurityGroup indicates an expected call of CreateInputSecurityGroup
func (mr *MockMediaLiveAPIMockRecorder) CreateInputSecurityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInputSecurityGroup", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateInputSecurityGroup), arg0)
}

// CreateInputSecurityGroupRequest mocks base method
func (m *MockMediaLiveAPI) CreateInputSecurityGroupRequest(arg0 *medialive.CreateInputSecurityGroupInput) (*request.Request, *medialive.CreateInputSecurityGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInputSecurityGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.CreateInputSecurityGroupOutput)
	return ret0, ret1
}

// CreateInputSecurityGroupRequest indicates an expected call of CreateInputSecurityGroupRequest
func (mr *MockMediaLiveAPIMockRecorder) CreateInputSecurityGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInputSecurityGroupRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateInputSecurityGroupRequest), arg0)
}

// CreateInputSecurityGroupWithContext mocks base method
func (m *MockMediaLiveAPI) CreateInputSecurityGroupWithContext(arg0 context.Context, arg1 *medialive.CreateInputSecurityGroupInput, arg2 ...request.Option) (*medialive.CreateInputSecurityGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInputSecurityGroupWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.CreateInputSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInputSecurityGroupWithContext indicates an expected call of CreateInputSecurityGroupWithContext
func (mr *MockMediaLiveAPIMockRecorder) CreateInputSecurityGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInputSecurityGroupWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateInputSecurityGroupWithContext), varargs...)
}

// CreateInputWithContext mocks base method
func (m *MockMediaLiveAPI) CreateInputWithContext(arg0 context.Context, arg1 *medialive.CreateInputInput, arg2 ...request.Option) (*medialive.CreateInputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInputWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.CreateInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInputWithContext indicates an expected call of CreateInputWithContext
func (mr *MockMediaLiveAPIMockRecorder) CreateInputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInputWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateInputWithContext), varargs...)
}

// CreateTags mocks base method
func (m *MockMediaLiveAPI) CreateTags(arg0 *medialive.CreateTagsInput) (*medialive.CreateTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", arg0)
	ret0, _ := ret[0].(*medialive.CreateTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTags indicates an expected call of CreateTags
func (mr *MockMediaLiveAPIMockRecorder) CreateTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateTags), arg0)
}

// CreateTagsRequest mocks base method
func (m *MockMediaLiveAPI) CreateTagsRequest(arg0 *medialive.CreateTagsInput) (*request.Request, *medialive.CreateTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.CreateTagsOutput)
	return ret0, ret1
}

// CreateTagsRequest indicates an expected call of CreateTagsRequest
func (mr *MockMediaLiveAPIMockRecorder) CreateTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagsRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateTagsRequest), arg0)
}

// CreateTagsWithContext mocks base method
func (m *MockMediaLiveAPI) CreateTagsWithContext(arg0 context.Context, arg1 *medialive.CreateTagsInput, arg2 ...request.Option) (*medialive.CreateTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagsWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.CreateTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTagsWithContext indicates an expected call of CreateTagsWithContext
func (mr *MockMediaLiveAPIMockRecorder) CreateTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagsWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).CreateTagsWithContext), varargs...)
}

// DeleteChannel mocks base method
func (m *MockMediaLiveAPI) DeleteChannel(arg0 *medialive.DeleteChannelInput) (*medialive.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(*medialive.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel
func (mr *MockMediaLiveAPIMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteChannel), arg0)
}

// DeleteChannelRequest mocks base method
func (m *MockMediaLiveAPI) DeleteChannelRequest(arg0 *medialive.DeleteChannelInput) (*request.Request, *medialive.DeleteChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DeleteChannelOutput)
	return ret0, ret1
}

// DeleteChannelRequest indicates an expected call of DeleteChannelRequest
func (mr *MockMediaLiveAPIMockRecorder) DeleteChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteChannelRequest), arg0)
}

// DeleteChannelWithContext mocks base method
func (m *MockMediaLiveAPI) DeleteChannelWithContext(arg0 context.Context, arg1 *medialive.DeleteChannelInput, arg2 ...request.Option) (*medialive.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelWithContext indicates an expected call of DeleteChannelWithContext
func (mr *MockMediaLiveAPIMockRecorder) DeleteChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteChannelWithContext), varargs...)
}

// DeleteInput mocks base method
func (m *MockMediaLiveAPI) DeleteInput(arg0 *medialive.DeleteInputInput) (*medialive.DeleteInputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInput", arg0)
	ret0, _ := ret[0].(*medialive.DeleteInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInput indicates an expected call of DeleteInput
func (mr *MockMediaLiveAPIMockRecorder) DeleteInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInput", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteInput), arg0)
}

// DeleteInputRequest mocks base method
func (m *MockMediaLiveAPI) DeleteInputRequest(arg0 *medialive.DeleteInputInput) (*request.Request, *medialive.DeleteInputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DeleteInputOutput)
	return ret0, ret1
}

// DeleteInputRequest indicates an expected call of DeleteInputRequest
func (mr *MockMediaLiveAPIMockRecorder) DeleteInputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInputRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteInputRequest), arg0)
}

// DeleteInputSecurityGroup mocks base method
func (m *MockMediaLiveAPI) DeleteInputSecurityGroup(arg0 *medialive.DeleteInputSecurityGroupInput) (*medialive.DeleteInputSecurityGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInputSecurityGroup", arg0)
	ret0, _ := ret[0].(*medialive.DeleteInputSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInputSecurityGroup indicates an expected call of DeleteInputSecurityGroup
func (mr *MockMediaLiveAPIMockRecorder) DeleteInputSecurityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInputSecurityGroup", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteInputSecurityGroup), arg0)
}

// DeleteInputSecurityGroupRequest mocks base method
func (m *MockMediaLiveAPI) DeleteInputSecurityGroupRequest(arg0 *medialive.DeleteInputSecurityGroupInput) (*request.Request, *medialive.DeleteInputSecurityGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInputSecurityGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DeleteInputSecurityGroupOutput)
	return ret0, ret1
}

// DeleteInputSecurityGroupRequest indicates an expected call of DeleteInputSecurityGroupRequest
func (mr *MockMediaLiveAPIMockRecorder) DeleteInputSecurityGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInputSecurityGroupRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteInputSecurityGroupRequest), arg0)
}

// DeleteInputSecurityGroupWithContext mocks base method
func (m *MockMediaLiveAPI) DeleteInputSecurityGroupWithContext(arg0 context.Context, arg1 *medialive.DeleteInputSecurityGroupInput, arg2 ...request.Option) (*medialive.DeleteInputSecurityGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInputSecurityGroupWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DeleteInputSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInputSecurityGroupWithContext indicates an expected call of DeleteInputSecurityGroupWithContext
func (mr *MockMediaLiveAPIMockRecorder) DeleteInputSecurityGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInputSecurityGroupWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteInputSecurityGroupWithContext), varargs...)
}

// DeleteInputWithContext mocks base method
func (m *MockMediaLiveAPI) DeleteInputWithContext(arg0 context.Context, arg1 *medialive.DeleteInputInput, arg2 ...request.Option) (*medialive.DeleteInputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInputWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DeleteInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInputWithContext indicates an expected call of DeleteInputWithContext
func (mr *MockMediaLiveAPIMockRecorder) DeleteInputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInputWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteInputWithContext), varargs...)
}

// DeleteReservation mocks base method
func (m *MockMediaLiveAPI) DeleteReservation(arg0 *medialive.DeleteReservationInput) (*medialive.DeleteReservationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservation", arg0)
	ret0, _ := ret[0].(*medialive.DeleteReservationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReservation indicates an expected call of DeleteReservation
func (mr *MockMediaLiveAPIMockRecorder) DeleteReservation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservation", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteReservation), arg0)
}

// DeleteReservationRequest mocks base method
func (m *MockMediaLiveAPI) DeleteReservationRequest(arg0 *medialive.DeleteReservationInput) (*request.Request, *medialive.DeleteReservationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DeleteReservationOutput)
	return ret0, ret1
}

// DeleteReservationRequest indicates an expected call of DeleteReservationRequest
func (mr *MockMediaLiveAPIMockRecorder) DeleteReservationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservationRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteReservationRequest), arg0)
}

// DeleteReservationWithContext mocks base method
func (m *MockMediaLiveAPI) DeleteReservationWithContext(arg0 context.Context, arg1 *medialive.DeleteReservationInput, arg2 ...request.Option) (*medialive.DeleteReservationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReservationWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DeleteReservationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReservationWithContext indicates an expected call of DeleteReservationWithContext
func (mr *MockMediaLiveAPIMockRecorder) DeleteReservationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservationWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteReservationWithContext), varargs...)
}

// DeleteTags mocks base method
func (m *MockMediaLiveAPI) DeleteTags(arg0 *medialive.DeleteTagsInput) (*medialive.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTags", arg0)
	ret0, _ := ret[0].(*medialive.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTags indicates an expected call of DeleteTags
func (mr *MockMediaLiveAPIMockRecorder) DeleteTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTags", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteTags), arg0)
}

// DeleteTagsRequest mocks base method
func (m *MockMediaLiveAPI) DeleteTagsRequest(arg0 *medialive.DeleteTagsInput) (*request.Request, *medialive.DeleteTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DeleteTagsOutput)
	return ret0, ret1
}

// DeleteTagsRequest indicates an expected call of DeleteTagsRequest
func (mr *MockMediaLiveAPIMockRecorder) DeleteTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteTagsRequest), arg0)
}

// DeleteTagsWithContext mocks base method
func (m *MockMediaLiveAPI) DeleteTagsWithContext(arg0 context.Context, arg1 *medialive.DeleteTagsInput, arg2 ...request.Option) (*medialive.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTagsWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTagsWithContext indicates an expected call of DeleteTagsWithContext
func (mr *MockMediaLiveAPIMockRecorder) DeleteTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DeleteTagsWithContext), varargs...)
}

// DescribeChannel mocks base method
func (m *MockMediaLiveAPI) DescribeChannel(arg0 *medialive.DescribeChannelInput) (*medialive.DescribeChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannel", arg0)
	ret0, _ := ret[0].(*medialive.DescribeChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannel indicates an expected call of DescribeChannel
func (mr *MockMediaLiveAPIMockRecorder) DescribeChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannel", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeChannel), arg0)
}

// DescribeChannelRequest mocks base method
func (m *MockMediaLiveAPI) DescribeChannelRequest(arg0 *medialive.DescribeChannelInput) (*request.Request, *medialive.DescribeChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DescribeChannelOutput)
	return ret0, ret1
}

// DescribeChannelRequest indicates an expected call of DescribeChannelRequest
func (mr *MockMediaLiveAPIMockRecorder) DescribeChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeChannelRequest), arg0)
}

// DescribeChannelWithContext mocks base method
func (m *MockMediaLiveAPI) DescribeChannelWithContext(arg0 context.Context, arg1 *medialive.DescribeChannelInput, arg2 ...request.Option) (*medialive.DescribeChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChannelWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DescribeChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelWithContext indicates an expected call of DescribeChannelWithContext
func (mr *MockMediaLiveAPIMockRecorder) DescribeChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeChannelWithContext), varargs...)
}

// DescribeInput mocks base method
func (m *MockMediaLiveAPI) DescribeInput(arg0 *medialive.DescribeInputInput) (*medialive.DescribeInputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInput", arg0)
	ret0, _ := ret[0].(*medialive.DescribeInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInput indicates an expected call of DescribeInput
func (mr *MockMediaLiveAPIMockRecorder) DescribeInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInput", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeInput), arg0)
}

// DescribeInputRequest mocks base method
func (m *MockMediaLiveAPI) DescribeInputRequest(arg0 *medialive.DescribeInputInput) (*request.Request, *medialive.DescribeInputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DescribeInputOutput)
	return ret0, ret1
}

// DescribeInputRequest indicates an expected call of DescribeInputRequest
func (mr *MockMediaLiveAPIMockRecorder) DescribeInputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInputRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeInputRequest), arg0)
}

// DescribeInputSecurityGroup mocks base method
func (m *MockMediaLiveAPI) DescribeInputSecurityGroup(arg0 *medialive.DescribeInputSecurityGroupInput) (*medialive.DescribeInputSecurityGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInputSecurityGroup", arg0)
	ret0, _ := ret[0].(*medialive.DescribeInputSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInputSecurityGroup indicates an expected call of DescribeInputSecurityGroup
func (mr *MockMediaLiveAPIMockRecorder) DescribeInputSecurityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInputSecurityGroup", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeInputSecurityGroup), arg0)
}

// DescribeInputSecurityGroupRequest mocks base method
func (m *MockMediaLiveAPI) DescribeInputSecurityGroupRequest(arg0 *medialive.DescribeInputSecurityGroupInput) (*request.Request, *medialive.DescribeInputSecurityGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInputSecurityGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DescribeInputSecurityGroupOutput)
	return ret0, ret1
}

// DescribeInputSecurityGroupRequest indicates an expected call of DescribeInputSecurityGroupRequest
func (mr *MockMediaLiveAPIMockRecorder) DescribeInputSecurityGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInputSecurityGroupRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeInputSecurityGroupRequest), arg0)
}

// DescribeInputSecurityGroupWithContext mocks base method
func (m *MockMediaLiveAPI) DescribeInputSecurityGroupWithContext(arg0 context.Context, arg1 *medialive.DescribeInputSecurityGroupInput, arg2 ...request.Option) (*medialive.DescribeInputSecurityGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInputSecurityGroupWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DescribeInputSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInputSecurityGroupWithContext indicates an expected call of DescribeInputSecurityGroupWithContext
func (mr *MockMediaLiveAPIMockRecorder) DescribeInputSecurityGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInputSecurityGroupWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeInputSecurityGroupWithContext), varargs...)
}

// DescribeInputWithContext mocks base method
func (m *MockMediaLiveAPI) DescribeInputWithContext(arg0 context.Context, arg1 *medialive.DescribeInputInput, arg2 ...request.Option) (*medialive.DescribeInputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInputWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DescribeInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInputWithContext indicates an expected call of DescribeInputWithContext
func (mr *MockMediaLiveAPIMockRecorder) DescribeInputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInputWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeInputWithContext), varargs...)
}

// DescribeOffering mocks base method
func (m *MockMediaLiveAPI) DescribeOffering(arg0 *medialive.DescribeOfferingInput) (*medialive.DescribeOfferingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOffering", arg0)
	ret0, _ := ret[0].(*medialive.DescribeOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOffering indicates an expected call of DescribeOffering
func (mr *MockMediaLiveAPIMockRecorder) DescribeOffering(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOffering", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeOffering), arg0)
}

// DescribeOfferingRequest mocks base method
func (m *MockMediaLiveAPI) DescribeOfferingRequest(arg0 *medialive.DescribeOfferingInput) (*request.Request, *medialive.DescribeOfferingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOfferingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DescribeOfferingOutput)
	return ret0, ret1
}

// DescribeOfferingRequest indicates an expected call of DescribeOfferingRequest
func (mr *MockMediaLiveAPIMockRecorder) DescribeOfferingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOfferingRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeOfferingRequest), arg0)
}

// DescribeOfferingWithContext mocks base method
func (m *MockMediaLiveAPI) DescribeOfferingWithContext(arg0 context.Context, arg1 *medialive.DescribeOfferingInput, arg2 ...request.Option) (*medialive.DescribeOfferingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOfferingWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DescribeOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOfferingWithContext indicates an expected call of DescribeOfferingWithContext
func (mr *MockMediaLiveAPIMockRecorder) DescribeOfferingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOfferingWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeOfferingWithContext), varargs...)
}

// DescribeReservation mocks base method
func (m *MockMediaLiveAPI) DescribeReservation(arg0 *medialive.DescribeReservationInput) (*medialive.DescribeReservationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReservation", arg0)
	ret0, _ := ret[0].(*medialive.DescribeReservationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservation indicates an expected call of DescribeReservation
func (mr *MockMediaLiveAPIMockRecorder) DescribeReservation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservation", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeReservation), arg0)
}

// DescribeReservationRequest mocks base method
func (m *MockMediaLiveAPI) DescribeReservationRequest(arg0 *medialive.DescribeReservationInput) (*request.Request, *medialive.DescribeReservationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReservationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DescribeReservationOutput)
	return ret0, ret1
}

// DescribeReservationRequest indicates an expected call of DescribeReservationRequest
func (mr *MockMediaLiveAPIMockRecorder) DescribeReservationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservationRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeReservationRequest), arg0)
}

// DescribeReservationWithContext mocks base method
func (m *MockMediaLiveAPI) DescribeReservationWithContext(arg0 context.Context, arg1 *medialive.DescribeReservationInput, arg2 ...request.Option) (*medialive.DescribeReservationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservationWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DescribeReservationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservationWithContext indicates an expected call of DescribeReservationWithContext
func (mr *MockMediaLiveAPIMockRecorder) DescribeReservationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservationWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeReservationWithContext), varargs...)
}

// DescribeSchedule mocks base method
func (m *MockMediaLiveAPI) DescribeSchedule(arg0 *medialive.DescribeScheduleInput) (*medialive.DescribeScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSchedule", arg0)
	ret0, _ := ret[0].(*medialive.DescribeScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSchedule indicates an expected call of DescribeSchedule
func (mr *MockMediaLiveAPIMockRecorder) DescribeSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchedule", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeSchedule), arg0)
}

// DescribeSchedulePages mocks base method
func (m *MockMediaLiveAPI) DescribeSchedulePages(arg0 *medialive.DescribeScheduleInput, arg1 func(*medialive.DescribeScheduleOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSchedulePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSchedulePages indicates an expected call of DescribeSchedulePages
func (mr *MockMediaLiveAPIMockRecorder) DescribeSchedulePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchedulePages", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeSchedulePages), arg0, arg1)
}

// DescribeSchedulePagesWithContext mocks base method
func (m *MockMediaLiveAPI) DescribeSchedulePagesWithContext(arg0 context.Context, arg1 *medialive.DescribeScheduleInput, arg2 func(*medialive.DescribeScheduleOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSchedulePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSchedulePagesWithContext indicates an expected call of DescribeSchedulePagesWithContext
func (mr *MockMediaLiveAPIMockRecorder) DescribeSchedulePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchedulePagesWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeSchedulePagesWithContext), varargs...)
}

// DescribeScheduleRequest mocks base method
func (m *MockMediaLiveAPI) DescribeScheduleRequest(arg0 *medialive.DescribeScheduleInput) (*request.Request, *medialive.DescribeScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.DescribeScheduleOutput)
	return ret0, ret1
}

// DescribeScheduleRequest indicates an expected call of DescribeScheduleRequest
func (mr *MockMediaLiveAPIMockRecorder) DescribeScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeScheduleRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeScheduleRequest), arg0)
}

// DescribeScheduleWithContext mocks base method
func (m *MockMediaLiveAPI) DescribeScheduleWithContext(arg0 context.Context, arg1 *medialive.DescribeScheduleInput, arg2 ...request.Option) (*medialive.DescribeScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.DescribeScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeScheduleWithContext indicates an expected call of DescribeScheduleWithContext
func (mr *MockMediaLiveAPIMockRecorder) DescribeScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeScheduleWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).DescribeScheduleWithContext), varargs...)
}

// ListChannels mocks base method
func (m *MockMediaLiveAPI) ListChannels(arg0 *medialive.ListChannelsInput) (*medialive.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", arg0)
	ret0, _ := ret[0].(*medialive.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels
func (mr *MockMediaLiveAPIMockRecorder) ListChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListChannels), arg0)
}

// ListChannelsPages mocks base method
func (m *MockMediaLiveAPI) ListChannelsPages(arg0 *medialive.ListChannelsInput, arg1 func(*medialive.ListChannelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPages indicates an expected call of ListChannelsPages
func (mr *MockMediaLiveAPIMockRecorder) ListChannelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPages", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListChannelsPages), arg0, arg1)
}

// ListChannelsPagesWithContext mocks base method
func (m *MockMediaLiveAPI) ListChannelsPagesWithContext(arg0 context.Context, arg1 *medialive.ListChannelsInput, arg2 func(*medialive.ListChannelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPagesWithContext indicates an expected call of ListChannelsPagesWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListChannelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPagesWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListChannelsPagesWithContext), varargs...)
}

// ListChannelsRequest mocks base method
func (m *MockMediaLiveAPI) ListChannelsRequest(arg0 *medialive.ListChannelsInput) (*request.Request, *medialive.ListChannelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.ListChannelsOutput)
	return ret0, ret1
}

// ListChannelsRequest indicates an expected call of ListChannelsRequest
func (mr *MockMediaLiveAPIMockRecorder) ListChannelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListChannelsRequest), arg0)
}

// ListChannelsWithContext mocks base method
func (m *MockMediaLiveAPI) ListChannelsWithContext(arg0 context.Context, arg1 *medialive.ListChannelsInput, arg2 ...request.Option) (*medialive.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelsWithContext indicates an expected call of ListChannelsWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListChannelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListChannelsWithContext), varargs...)
}

// ListInputSecurityGroups mocks base method
func (m *MockMediaLiveAPI) ListInputSecurityGroups(arg0 *medialive.ListInputSecurityGroupsInput) (*medialive.ListInputSecurityGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInputSecurityGroups", arg0)
	ret0, _ := ret[0].(*medialive.ListInputSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInputSecurityGroups indicates an expected call of ListInputSecurityGroups
func (mr *MockMediaLiveAPIMockRecorder) ListInputSecurityGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputSecurityGroups", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListInputSecurityGroups), arg0)
}

// ListInputSecurityGroupsPages mocks base method
func (m *MockMediaLiveAPI) ListInputSecurityGroupsPages(arg0 *medialive.ListInputSecurityGroupsInput, arg1 func(*medialive.ListInputSecurityGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInputSecurityGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInputSecurityGroupsPages indicates an expected call of ListInputSecurityGroupsPages
func (mr *MockMediaLiveAPIMockRecorder) ListInputSecurityGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputSecurityGroupsPages", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListInputSecurityGroupsPages), arg0, arg1)
}

// ListInputSecurityGroupsPagesWithContext mocks base method
func (m *MockMediaLiveAPI) ListInputSecurityGroupsPagesWithContext(arg0 context.Context, arg1 *medialive.ListInputSecurityGroupsInput, arg2 func(*medialive.ListInputSecurityGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInputSecurityGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInputSecurityGroupsPagesWithContext indicates an expected call of ListInputSecurityGroupsPagesWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListInputSecurityGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputSecurityGroupsPagesWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListInputSecurityGroupsPagesWithContext), varargs...)
}

// ListInputSecurityGroupsRequest mocks base method
func (m *MockMediaLiveAPI) ListInputSecurityGroupsRequest(arg0 *medialive.ListInputSecurityGroupsInput) (*request.Request, *medialive.ListInputSecurityGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInputSecurityGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.ListInputSecurityGroupsOutput)
	return ret0, ret1
}

// ListInputSecurityGroupsRequest indicates an expected call of ListInputSecurityGroupsRequest
func (mr *MockMediaLiveAPIMockRecorder) ListInputSecurityGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputSecurityGroupsRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListInputSecurityGroupsRequest), arg0)
}

// ListInputSecurityGroupsWithContext mocks base method
func (m *MockMediaLiveAPI) ListInputSecurityGroupsWithContext(arg0 context.Context, arg1 *medialive.ListInputSecurityGroupsInput, arg2 ...request.Option) (*medialive.ListInputSecurityGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInputSecurityGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.ListInputSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInputSecurityGroupsWithContext indicates an expected call of ListInputSecurityGroupsWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListInputSecurityGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputSecurityGroupsWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListInputSecurityGroupsWithContext), varargs...)
}

// ListInputs mocks base method
func (m *MockMediaLiveAPI) ListInputs(arg0 *medialive.ListInputsInput) (*medialive.ListInputsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInputs", arg0)
	ret0, _ := ret[0].(*medialive.ListInputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInputs indicates an expected call of ListInputs
func (mr *MockMediaLiveAPIMockRecorder) ListInputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputs", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListInputs), arg0)
}

// ListInputsPages mocks base method
func (m *MockMediaLiveAPI) ListInputsPages(arg0 *medialive.ListInputsInput, arg1 func(*medialive.ListInputsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInputsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInputsPages indicates an expected call of ListInputsPages
func (mr *MockMediaLiveAPIMockRecorder) ListInputsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputsPages", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListInputsPages), arg0, arg1)
}

// ListInputsPagesWithContext mocks base method
func (m *MockMediaLiveAPI) ListInputsPagesWithContext(arg0 context.Context, arg1 *medialive.ListInputsInput, arg2 func(*medialive.ListInputsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInputsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInputsPagesWithContext indicates an expected call of ListInputsPagesWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListInputsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputsPagesWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListInputsPagesWithContext), varargs...)
}

// ListInputsRequest mocks base method
func (m *MockMediaLiveAPI) ListInputsRequest(arg0 *medialive.ListInputsInput) (*request.Request, *medialive.ListInputsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInputsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.ListInputsOutput)
	return ret0, ret1
}

// ListInputsRequest indicates an expected call of ListInputsRequest
func (mr *MockMediaLiveAPIMockRecorder) ListInputsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputsRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListInputsRequest), arg0)
}

// ListInputsWithContext mocks base method
func (m *MockMediaLiveAPI) ListInputsWithContext(arg0 context.Context, arg1 *medialive.ListInputsInput, arg2 ...request.Option) (*medialive.ListInputsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInputsWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.ListInputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInputsWithContext indicates an expected call of ListInputsWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListInputsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputsWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListInputsWithContext), varargs...)
}

// ListOfferings mocks base method
func (m *MockMediaLiveAPI) ListOfferings(arg0 *medialive.ListOfferingsInput) (*medialive.ListOfferingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfferings", arg0)
	ret0, _ := ret[0].(*medialive.ListOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfferings indicates an expected call of ListOfferings
func (mr *MockMediaLiveAPIMockRecorder) ListOfferings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfferings", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListOfferings), arg0)
}

// ListOfferingsPages mocks base method
func (m *MockMediaLiveAPI) ListOfferingsPages(arg0 *medialive.ListOfferingsInput, arg1 func(*medialive.ListOfferingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfferingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOfferingsPages indicates an expected call of ListOfferingsPages
func (mr *MockMediaLiveAPIMockRecorder) ListOfferingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfferingsPages", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListOfferingsPages), arg0, arg1)
}

// ListOfferingsPagesWithContext mocks base method
func (m *MockMediaLiveAPI) ListOfferingsPagesWithContext(arg0 context.Context, arg1 *medialive.ListOfferingsInput, arg2 func(*medialive.ListOfferingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOfferingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOfferingsPagesWithContext indicates an expected call of ListOfferingsPagesWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListOfferingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfferingsPagesWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListOfferingsPagesWithContext), varargs...)
}

// ListOfferingsRequest mocks base method
func (m *MockMediaLiveAPI) ListOfferingsRequest(arg0 *medialive.ListOfferingsInput) (*request.Request, *medialive.ListOfferingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfferingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.ListOfferingsOutput)
	return ret0, ret1
}

// ListOfferingsRequest indicates an expected call of ListOfferingsRequest
func (mr *MockMediaLiveAPIMockRecorder) ListOfferingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfferingsRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListOfferingsRequest), arg0)
}

// ListOfferingsWithContext mocks base method
func (m *MockMediaLiveAPI) ListOfferingsWithContext(arg0 context.Context, arg1 *medialive.ListOfferingsInput, arg2 ...request.Option) (*medialive.ListOfferingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOfferingsWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.ListOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfferingsWithContext indicates an expected call of ListOfferingsWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListOfferingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfferingsWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListOfferingsWithContext), varargs...)
}

// ListReservations mocks base method
func (m *MockMediaLiveAPI) ListReservations(arg0 *medialive.ListReservationsInput) (*medialive.ListReservationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReservations", arg0)
	ret0, _ := ret[0].(*medialive.ListReservationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReservations indicates an expected call of ListReservations
func (mr *MockMediaLiveAPIMockRecorder) ListReservations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservations", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListReservations), arg0)
}

// ListReservationsPages mocks base method
func (m *MockMediaLiveAPI) ListReservationsPages(arg0 *medialive.ListReservationsInput, arg1 func(*medialive.ListReservationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReservationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReservationsPages indicates an expected call of ListReservationsPages
func (mr *MockMediaLiveAPIMockRecorder) ListReservationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservationsPages", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListReservationsPages), arg0, arg1)
}

// ListReservationsPagesWithContext mocks base method
func (m *MockMediaLiveAPI) ListReservationsPagesWithContext(arg0 context.Context, arg1 *medialive.ListReservationsInput, arg2 func(*medialive.ListReservationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReservationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReservationsPagesWithContext indicates an expected call of ListReservationsPagesWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListReservationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservationsPagesWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListReservationsPagesWithContext), varargs...)
}

// ListReservationsRequest mocks base method
func (m *MockMediaLiveAPI) ListReservationsRequest(arg0 *medialive.ListReservationsInput) (*request.Request, *medialive.ListReservationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReservationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.ListReservationsOutput)
	return ret0, ret1
}

// ListReservationsRequest indicates an expected call of ListReservationsRequest
func (mr *MockMediaLiveAPIMockRecorder) ListReservationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservationsRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListReservationsRequest), arg0)
}

// ListReservationsWithContext mocks base method
func (m *MockMediaLiveAPI) ListReservationsWithContext(arg0 context.Context, arg1 *medialive.ListReservationsInput, arg2 ...request.Option) (*medialive.ListReservationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReservationsWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.ListReservationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReservationsWithContext indicates an expected call of ListReservationsWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListReservationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservationsWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListReservationsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockMediaLiveAPI) ListTagsForResource(arg0 *medialive.ListTagsForResourceInput) (*medialive.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*medialive.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockMediaLiveAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockMediaLiveAPI) ListTagsForResourceRequest(arg0 *medialive.ListTagsForResourceInput) (*request.Request, *medialive.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockMediaLiveAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockMediaLiveAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *medialive.ListTagsForResourceInput, arg2 ...request.Option) (*medialive.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockMediaLiveAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PurchaseOffering mocks base method
func (m *MockMediaLiveAPI) PurchaseOffering(arg0 *medialive.PurchaseOfferingInput) (*medialive.PurchaseOfferingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseOffering", arg0)
	ret0, _ := ret[0].(*medialive.PurchaseOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurchaseOffering indicates an expected call of PurchaseOffering
func (mr *MockMediaLiveAPIMockRecorder) PurchaseOffering(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseOffering", reflect.TypeOf((*MockMediaLiveAPI)(nil).PurchaseOffering), arg0)
}

// PurchaseOfferingRequest mocks base method
func (m *MockMediaLiveAPI) PurchaseOfferingRequest(arg0 *medialive.PurchaseOfferingInput) (*request.Request, *medialive.PurchaseOfferingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseOfferingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.PurchaseOfferingOutput)
	return ret0, ret1
}

// PurchaseOfferingRequest indicates an expected call of PurchaseOfferingRequest
func (mr *MockMediaLiveAPIMockRecorder) PurchaseOfferingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseOfferingRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).PurchaseOfferingRequest), arg0)
}

// PurchaseOfferingWithContext mocks base method
func (m *MockMediaLiveAPI) PurchaseOfferingWithContext(arg0 context.Context, arg1 *medialive.PurchaseOfferingInput, arg2 ...request.Option) (*medialive.PurchaseOfferingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PurchaseOfferingWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.PurchaseOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurchaseOfferingWithContext indicates an expected call of PurchaseOfferingWithContext
func (mr *MockMediaLiveAPIMockRecorder) PurchaseOfferingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseOfferingWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).PurchaseOfferingWithContext), varargs...)
}

// StartChannel mocks base method
func (m *MockMediaLiveAPI) StartChannel(arg0 *medialive.StartChannelInput) (*medialive.StartChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChannel", arg0)
	ret0, _ := ret[0].(*medialive.StartChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChannel indicates an expected call of StartChannel
func (mr *MockMediaLiveAPIMockRecorder) StartChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChannel", reflect.TypeOf((*MockMediaLiveAPI)(nil).StartChannel), arg0)
}

// StartChannelRequest mocks base method
func (m *MockMediaLiveAPI) StartChannelRequest(arg0 *medialive.StartChannelInput) (*request.Request, *medialive.StartChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.StartChannelOutput)
	return ret0, ret1
}

// StartChannelRequest indicates an expected call of StartChannelRequest
func (mr *MockMediaLiveAPIMockRecorder) StartChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChannelRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).StartChannelRequest), arg0)
}

// StartChannelWithContext mocks base method
func (m *MockMediaLiveAPI) StartChannelWithContext(arg0 context.Context, arg1 *medialive.StartChannelInput, arg2 ...request.Option) (*medialive.StartChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartChannelWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.StartChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChannelWithContext indicates an expected call of StartChannelWithContext
func (mr *MockMediaLiveAPIMockRecorder) StartChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChannelWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).StartChannelWithContext), varargs...)
}

// StopChannel mocks base method
func (m *MockMediaLiveAPI) StopChannel(arg0 *medialive.StopChannelInput) (*medialive.StopChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopChannel", arg0)
	ret0, _ := ret[0].(*medialive.StopChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopChannel indicates an expected call of StopChannel
func (mr *MockMediaLiveAPIMockRecorder) StopChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopChannel", reflect.TypeOf((*MockMediaLiveAPI)(nil).StopChannel), arg0)
}

// StopChannelRequest mocks base method
func (m *MockMediaLiveAPI) StopChannelRequest(arg0 *medialive.StopChannelInput) (*request.Request, *medialive.StopChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.StopChannelOutput)
	return ret0, ret1
}

// StopChannelRequest indicates an expected call of StopChannelRequest
func (mr *MockMediaLiveAPIMockRecorder) StopChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopChannelRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).StopChannelRequest), arg0)
}

// StopChannelWithContext mocks base method
func (m *MockMediaLiveAPI) StopChannelWithContext(arg0 context.Context, arg1 *medialive.StopChannelInput, arg2 ...request.Option) (*medialive.StopChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopChannelWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.StopChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopChannelWithContext indicates an expected call of StopChannelWithContext
func (mr *MockMediaLiveAPIMockRecorder) StopChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopChannelWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).StopChannelWithContext), varargs...)
}

// UpdateChannel mocks base method
func (m *MockMediaLiveAPI) UpdateChannel(arg0 *medialive.UpdateChannelInput) (*medialive.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0)
	ret0, _ := ret[0].(*medialive.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel
func (mr *MockMediaLiveAPIMockRecorder) UpdateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockMediaLiveAPI)(nil).UpdateChannel), arg0)
}

// UpdateChannelRequest mocks base method
func (m *MockMediaLiveAPI) UpdateChannelRequest(arg0 *medialive.UpdateChannelInput) (*request.Request, *medialive.UpdateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.UpdateChannelOutput)
	return ret0, ret1
}

// UpdateChannelRequest indicates an expected call of UpdateChannelRequest
func (mr *MockMediaLiveAPIMockRecorder) UpdateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).UpdateChannelRequest), arg0)
}

// UpdateChannelWithContext mocks base method
func (m *MockMediaLiveAPI) UpdateChannelWithContext(arg0 context.Context, arg1 *medialive.UpdateChannelInput, arg2 ...request.Option) (*medialive.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelWithContext indicates an expected call of UpdateChannelWithContext
func (mr *MockMediaLiveAPIMockRecorder) UpdateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).UpdateChannelWithContext), varargs...)
}

// UpdateInput mocks base method
func (m *MockMediaLiveAPI) UpdateInput(arg0 *medialive.UpdateInputInput) (*medialive.UpdateInputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInput", arg0)
	ret0, _ := ret[0].(*medialive.UpdateInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInput indicates an expected call of UpdateInput
func (mr *MockMediaLiveAPIMockRecorder) UpdateInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInput", reflect.TypeOf((*MockMediaLiveAPI)(nil).UpdateInput), arg0)
}

// UpdateInputRequest mocks base method
func (m *MockMediaLiveAPI) UpdateInputRequest(arg0 *medialive.UpdateInputInput) (*request.Request, *medialive.UpdateInputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.UpdateInputOutput)
	return ret0, ret1
}

// UpdateInputRequest indicates an expected call of UpdateInputRequest
func (mr *MockMediaLiveAPIMockRecorder) UpdateInputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInputRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).UpdateInputRequest), arg0)
}

// UpdateInputSecurityGroup mocks base method
func (m *MockMediaLiveAPI) UpdateInputSecurityGroup(arg0 *medialive.UpdateInputSecurityGroupInput) (*medialive.UpdateInputSecurityGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInputSecurityGroup", arg0)
	ret0, _ := ret[0].(*medialive.UpdateInputSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInputSecurityGroup indicates an expected call of UpdateInputSecurityGroup
func (mr *MockMediaLiveAPIMockRecorder) UpdateInputSecurityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInputSecurityGroup", reflect.TypeOf((*MockMediaLiveAPI)(nil).UpdateInputSecurityGroup), arg0)
}

// UpdateInputSecurityGroupRequest mocks base method
func (m *MockMediaLiveAPI) UpdateInputSecurityGroupRequest(arg0 *medialive.UpdateInputSecurityGroupInput) (*request.Request, *medialive.UpdateInputSecurityGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInputSecurityGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medialive.UpdateInputSecurityGroupOutput)
	return ret0, ret1
}

// UpdateInputSecurityGroupRequest indicates an expected call of UpdateInputSecurityGroupRequest
func (mr *MockMediaLiveAPIMockRecorder) UpdateInputSecurityGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInputSecurityGroupRequest", reflect.TypeOf((*MockMediaLiveAPI)(nil).UpdateInputSecurityGroupRequest), arg0)
}

// UpdateInputSecurityGroupWithContext mocks base method
func (m *MockMediaLiveAPI) UpdateInputSecurityGroupWithContext(arg0 context.Context, arg1 *medialive.UpdateInputSecurityGroupInput, arg2 ...request.Option) (*medialive.UpdateInputSecurityGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInputSecurityGroupWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.UpdateInputSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInputSecurityGroupWithContext indicates an expected call of UpdateInputSecurityGroupWithContext
func (mr *MockMediaLiveAPIMockRecorder) UpdateInputSecurityGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInputSecurityGroupWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).UpdateInputSecurityGroupWithContext), varargs...)
}

// UpdateInputWithContext mocks base method
func (m *MockMediaLiveAPI) UpdateInputWithContext(arg0 context.Context, arg1 *medialive.UpdateInputInput, arg2 ...request.Option) (*medialive.UpdateInputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInputWithContext", varargs...)
	ret0, _ := ret[0].(*medialive.UpdateInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInputWithContext indicates an expected call of UpdateInputWithContext
func (mr *MockMediaLiveAPIMockRecorder) UpdateInputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInputWithContext", reflect.TypeOf((*MockMediaLiveAPI)(nil).UpdateInputWithContext), varargs...)
}
