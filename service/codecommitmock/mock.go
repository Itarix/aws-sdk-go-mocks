// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/codecommit/codecommitiface (interfaces: CodeCommitAPI)

// Package codecommitmock is a generated GoMock package.
package codecommitmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	codecommit "github.com/aws/aws-sdk-go/service/codecommit"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCodeCommitAPI is a mock of CodeCommitAPI interface
type MockCodeCommitAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCodeCommitAPIMockRecorder
}

// MockCodeCommitAPIMockRecorder is the mock recorder for MockCodeCommitAPI
type MockCodeCommitAPIMockRecorder struct {
	mock *MockCodeCommitAPI
}

// NewMockCodeCommitAPI creates a new mock instance
func NewMockCodeCommitAPI(ctrl *gomock.Controller) *MockCodeCommitAPI {
	mock := &MockCodeCommitAPI{ctrl: ctrl}
	mock.recorder = &MockCodeCommitAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeCommitAPI) EXPECT() *MockCodeCommitAPIMockRecorder {
	return m.recorder
}

// BatchDescribeMergeConflicts mocks base method
func (m *MockCodeCommitAPI) BatchDescribeMergeConflicts(arg0 *codecommit.BatchDescribeMergeConflictsInput) (*codecommit.BatchDescribeMergeConflictsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDescribeMergeConflicts", arg0)
	ret0, _ := ret[0].(*codecommit.BatchDescribeMergeConflictsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDescribeMergeConflicts indicates an expected call of BatchDescribeMergeConflicts
func (mr *MockCodeCommitAPIMockRecorder) BatchDescribeMergeConflicts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDescribeMergeConflicts", reflect.TypeOf((*MockCodeCommitAPI)(nil).BatchDescribeMergeConflicts), arg0)
}

// BatchDescribeMergeConflictsRequest mocks base method
func (m *MockCodeCommitAPI) BatchDescribeMergeConflictsRequest(arg0 *codecommit.BatchDescribeMergeConflictsInput) (*request.Request, *codecommit.BatchDescribeMergeConflictsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDescribeMergeConflictsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.BatchDescribeMergeConflictsOutput)
	return ret0, ret1
}

// BatchDescribeMergeConflictsRequest indicates an expected call of BatchDescribeMergeConflictsRequest
func (mr *MockCodeCommitAPIMockRecorder) BatchDescribeMergeConflictsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDescribeMergeConflictsRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).BatchDescribeMergeConflictsRequest), arg0)
}

// BatchDescribeMergeConflictsWithContext mocks base method
func (m *MockCodeCommitAPI) BatchDescribeMergeConflictsWithContext(arg0 context.Context, arg1 *codecommit.BatchDescribeMergeConflictsInput, arg2 ...request.Option) (*codecommit.BatchDescribeMergeConflictsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDescribeMergeConflictsWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.BatchDescribeMergeConflictsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDescribeMergeConflictsWithContext indicates an expected call of BatchDescribeMergeConflictsWithContext
func (mr *MockCodeCommitAPIMockRecorder) BatchDescribeMergeConflictsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDescribeMergeConflictsWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).BatchDescribeMergeConflictsWithContext), varargs...)
}

// BatchGetRepositories mocks base method
func (m *MockCodeCommitAPI) BatchGetRepositories(arg0 *codecommit.BatchGetRepositoriesInput) (*codecommit.BatchGetRepositoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetRepositories", arg0)
	ret0, _ := ret[0].(*codecommit.BatchGetRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRepositories indicates an expected call of BatchGetRepositories
func (mr *MockCodeCommitAPIMockRecorder) BatchGetRepositories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRepositories", reflect.TypeOf((*MockCodeCommitAPI)(nil).BatchGetRepositories), arg0)
}

// BatchGetRepositoriesRequest mocks base method
func (m *MockCodeCommitAPI) BatchGetRepositoriesRequest(arg0 *codecommit.BatchGetRepositoriesInput) (*request.Request, *codecommit.BatchGetRepositoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetRepositoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.BatchGetRepositoriesOutput)
	return ret0, ret1
}

// BatchGetRepositoriesRequest indicates an expected call of BatchGetRepositoriesRequest
func (mr *MockCodeCommitAPIMockRecorder) BatchGetRepositoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRepositoriesRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).BatchGetRepositoriesRequest), arg0)
}

// BatchGetRepositoriesWithContext mocks base method
func (m *MockCodeCommitAPI) BatchGetRepositoriesWithContext(arg0 context.Context, arg1 *codecommit.BatchGetRepositoriesInput, arg2 ...request.Option) (*codecommit.BatchGetRepositoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetRepositoriesWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.BatchGetRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRepositoriesWithContext indicates an expected call of BatchGetRepositoriesWithContext
func (mr *MockCodeCommitAPIMockRecorder) BatchGetRepositoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRepositoriesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).BatchGetRepositoriesWithContext), varargs...)
}

// CreateBranch mocks base method
func (m *MockCodeCommitAPI) CreateBranch(arg0 *codecommit.CreateBranchInput) (*codecommit.CreateBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0)
	ret0, _ := ret[0].(*codecommit.CreateBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch
func (mr *MockCodeCommitAPIMockRecorder) CreateBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateBranch), arg0)
}

// CreateBranchRequest mocks base method
func (m *MockCodeCommitAPI) CreateBranchRequest(arg0 *codecommit.CreateBranchInput) (*request.Request, *codecommit.CreateBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.CreateBranchOutput)
	return ret0, ret1
}

// CreateBranchRequest indicates an expected call of CreateBranchRequest
func (mr *MockCodeCommitAPIMockRecorder) CreateBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranchRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateBranchRequest), arg0)
}

// CreateBranchWithContext mocks base method
func (m *MockCodeCommitAPI) CreateBranchWithContext(arg0 context.Context, arg1 *codecommit.CreateBranchInput, arg2 ...request.Option) (*codecommit.CreateBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBranchWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.CreateBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranchWithContext indicates an expected call of CreateBranchWithContext
func (mr *MockCodeCommitAPIMockRecorder) CreateBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranchWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateBranchWithContext), varargs...)
}

// CreateCommit mocks base method
func (m *MockCodeCommitAPI) CreateCommit(arg0 *codecommit.CreateCommitInput) (*codecommit.CreateCommitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommit", arg0)
	ret0, _ := ret[0].(*codecommit.CreateCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommit indicates an expected call of CreateCommit
func (mr *MockCodeCommitAPIMockRecorder) CreateCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommit", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateCommit), arg0)
}

// CreateCommitRequest mocks base method
func (m *MockCodeCommitAPI) CreateCommitRequest(arg0 *codecommit.CreateCommitInput) (*request.Request, *codecommit.CreateCommitOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommitRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.CreateCommitOutput)
	return ret0, ret1
}

// CreateCommitRequest indicates an expected call of CreateCommitRequest
func (mr *MockCodeCommitAPIMockRecorder) CreateCommitRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateCommitRequest), arg0)
}

// CreateCommitWithContext mocks base method
func (m *MockCodeCommitAPI) CreateCommitWithContext(arg0 context.Context, arg1 *codecommit.CreateCommitInput, arg2 ...request.Option) (*codecommit.CreateCommitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCommitWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.CreateCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommitWithContext indicates an expected call of CreateCommitWithContext
func (mr *MockCodeCommitAPIMockRecorder) CreateCommitWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateCommitWithContext), varargs...)
}

// CreatePullRequest mocks base method
func (m *MockCodeCommitAPI) CreatePullRequest(arg0 *codecommit.CreatePullRequestInput) (*codecommit.CreatePullRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", arg0)
	ret0, _ := ret[0].(*codecommit.CreatePullRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest
func (mr *MockCodeCommitAPIMockRecorder) CreatePullRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreatePullRequest), arg0)
}

// CreatePullRequestRequest mocks base method
func (m *MockCodeCommitAPI) CreatePullRequestRequest(arg0 *codecommit.CreatePullRequestInput) (*request.Request, *codecommit.CreatePullRequestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.CreatePullRequestOutput)
	return ret0, ret1
}

// CreatePullRequestRequest indicates an expected call of CreatePullRequestRequest
func (mr *MockCodeCommitAPIMockRecorder) CreatePullRequestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreatePullRequestRequest), arg0)
}

// CreatePullRequestWithContext mocks base method
func (m *MockCodeCommitAPI) CreatePullRequestWithContext(arg0 context.Context, arg1 *codecommit.CreatePullRequestInput, arg2 ...request.Option) (*codecommit.CreatePullRequestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePullRequestWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.CreatePullRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequestWithContext indicates an expected call of CreatePullRequestWithContext
func (mr *MockCodeCommitAPIMockRecorder) CreatePullRequestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreatePullRequestWithContext), varargs...)
}

// CreateRepository mocks base method
func (m *MockCodeCommitAPI) CreateRepository(arg0 *codecommit.CreateRepositoryInput) (*codecommit.CreateRepositoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", arg0)
	ret0, _ := ret[0].(*codecommit.CreateRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository
func (mr *MockCodeCommitAPIMockRecorder) CreateRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateRepository), arg0)
}

// CreateRepositoryRequest mocks base method
func (m *MockCodeCommitAPI) CreateRepositoryRequest(arg0 *codecommit.CreateRepositoryInput) (*request.Request, *codecommit.CreateRepositoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepositoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.CreateRepositoryOutput)
	return ret0, ret1
}

// CreateRepositoryRequest indicates an expected call of CreateRepositoryRequest
func (mr *MockCodeCommitAPIMockRecorder) CreateRepositoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateRepositoryRequest), arg0)
}

// CreateRepositoryWithContext mocks base method
func (m *MockCodeCommitAPI) CreateRepositoryWithContext(arg0 context.Context, arg1 *codecommit.CreateRepositoryInput, arg2 ...request.Option) (*codecommit.CreateRepositoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRepositoryWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.CreateRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepositoryWithContext indicates an expected call of CreateRepositoryWithContext
func (mr *MockCodeCommitAPIMockRecorder) CreateRepositoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateRepositoryWithContext), varargs...)
}

// CreateUnreferencedMergeCommit mocks base method
func (m *MockCodeCommitAPI) CreateUnreferencedMergeCommit(arg0 *codecommit.CreateUnreferencedMergeCommitInput) (*codecommit.CreateUnreferencedMergeCommitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnreferencedMergeCommit", arg0)
	ret0, _ := ret[0].(*codecommit.CreateUnreferencedMergeCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnreferencedMergeCommit indicates an expected call of CreateUnreferencedMergeCommit
func (mr *MockCodeCommitAPIMockRecorder) CreateUnreferencedMergeCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnreferencedMergeCommit", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateUnreferencedMergeCommit), arg0)
}

// CreateUnreferencedMergeCommitRequest mocks base method
func (m *MockCodeCommitAPI) CreateUnreferencedMergeCommitRequest(arg0 *codecommit.CreateUnreferencedMergeCommitInput) (*request.Request, *codecommit.CreateUnreferencedMergeCommitOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnreferencedMergeCommitRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.CreateUnreferencedMergeCommitOutput)
	return ret0, ret1
}

// CreateUnreferencedMergeCommitRequest indicates an expected call of CreateUnreferencedMergeCommitRequest
func (mr *MockCodeCommitAPIMockRecorder) CreateUnreferencedMergeCommitRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnreferencedMergeCommitRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateUnreferencedMergeCommitRequest), arg0)
}

// CreateUnreferencedMergeCommitWithContext mocks base method
func (m *MockCodeCommitAPI) CreateUnreferencedMergeCommitWithContext(arg0 context.Context, arg1 *codecommit.CreateUnreferencedMergeCommitInput, arg2 ...request.Option) (*codecommit.CreateUnreferencedMergeCommitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUnreferencedMergeCommitWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.CreateUnreferencedMergeCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnreferencedMergeCommitWithContext indicates an expected call of CreateUnreferencedMergeCommitWithContext
func (mr *MockCodeCommitAPIMockRecorder) CreateUnreferencedMergeCommitWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnreferencedMergeCommitWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).CreateUnreferencedMergeCommitWithContext), varargs...)
}

// DeleteBranch mocks base method
func (m *MockCodeCommitAPI) DeleteBranch(arg0 *codecommit.DeleteBranchInput) (*codecommit.DeleteBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", arg0)
	ret0, _ := ret[0].(*codecommit.DeleteBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranch indicates an expected call of DeleteBranch
func (mr *MockCodeCommitAPIMockRecorder) DeleteBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteBranch), arg0)
}

// DeleteBranchRequest mocks base method
func (m *MockCodeCommitAPI) DeleteBranchRequest(arg0 *codecommit.DeleteBranchInput) (*request.Request, *codecommit.DeleteBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.DeleteBranchOutput)
	return ret0, ret1
}

// DeleteBranchRequest indicates an expected call of DeleteBranchRequest
func (mr *MockCodeCommitAPIMockRecorder) DeleteBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranchRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteBranchRequest), arg0)
}

// DeleteBranchWithContext mocks base method
func (m *MockCodeCommitAPI) DeleteBranchWithContext(arg0 context.Context, arg1 *codecommit.DeleteBranchInput, arg2 ...request.Option) (*codecommit.DeleteBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBranchWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.DeleteBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranchWithContext indicates an expected call of DeleteBranchWithContext
func (mr *MockCodeCommitAPIMockRecorder) DeleteBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranchWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteBranchWithContext), varargs...)
}

// DeleteCommentContent mocks base method
func (m *MockCodeCommitAPI) DeleteCommentContent(arg0 *codecommit.DeleteCommentContentInput) (*codecommit.DeleteCommentContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentContent", arg0)
	ret0, _ := ret[0].(*codecommit.DeleteCommentContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentContent indicates an expected call of DeleteCommentContent
func (mr *MockCodeCommitAPIMockRecorder) DeleteCommentContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentContent", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteCommentContent), arg0)
}

// DeleteCommentContentRequest mocks base method
func (m *MockCodeCommitAPI) DeleteCommentContentRequest(arg0 *codecommit.DeleteCommentContentInput) (*request.Request, *codecommit.DeleteCommentContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.DeleteCommentContentOutput)
	return ret0, ret1
}

// DeleteCommentContentRequest indicates an expected call of DeleteCommentContentRequest
func (mr *MockCodeCommitAPIMockRecorder) DeleteCommentContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentContentRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteCommentContentRequest), arg0)
}

// DeleteCommentContentWithContext mocks base method
func (m *MockCodeCommitAPI) DeleteCommentContentWithContext(arg0 context.Context, arg1 *codecommit.DeleteCommentContentInput, arg2 ...request.Option) (*codecommit.DeleteCommentContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCommentContentWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.DeleteCommentContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentContentWithContext indicates an expected call of DeleteCommentContentWithContext
func (mr *MockCodeCommitAPIMockRecorder) DeleteCommentContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentContentWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteCommentContentWithContext), varargs...)
}

// DeleteFile mocks base method
func (m *MockCodeCommitAPI) DeleteFile(arg0 *codecommit.DeleteFileInput) (*codecommit.DeleteFileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0)
	ret0, _ := ret[0].(*codecommit.DeleteFileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile
func (mr *MockCodeCommitAPIMockRecorder) DeleteFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteFile), arg0)
}

// DeleteFileRequest mocks base method
func (m *MockCodeCommitAPI) DeleteFileRequest(arg0 *codecommit.DeleteFileInput) (*request.Request, *codecommit.DeleteFileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.DeleteFileOutput)
	return ret0, ret1
}

// DeleteFileRequest indicates an expected call of DeleteFileRequest
func (mr *MockCodeCommitAPIMockRecorder) DeleteFileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteFileRequest), arg0)
}

// DeleteFileWithContext mocks base method
func (m *MockCodeCommitAPI) DeleteFileWithContext(arg0 context.Context, arg1 *codecommit.DeleteFileInput, arg2 ...request.Option) (*codecommit.DeleteFileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFileWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.DeleteFileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileWithContext indicates an expected call of DeleteFileWithContext
func (mr *MockCodeCommitAPIMockRecorder) DeleteFileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteFileWithContext), varargs...)
}

// DeleteRepository mocks base method
func (m *MockCodeCommitAPI) DeleteRepository(arg0 *codecommit.DeleteRepositoryInput) (*codecommit.DeleteRepositoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", arg0)
	ret0, _ := ret[0].(*codecommit.DeleteRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepository indicates an expected call of DeleteRepository
func (mr *MockCodeCommitAPIMockRecorder) DeleteRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteRepository), arg0)
}

// DeleteRepositoryRequest mocks base method
func (m *MockCodeCommitAPI) DeleteRepositoryRequest(arg0 *codecommit.DeleteRepositoryInput) (*request.Request, *codecommit.DeleteRepositoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.DeleteRepositoryOutput)
	return ret0, ret1
}

// DeleteRepositoryRequest indicates an expected call of DeleteRepositoryRequest
func (mr *MockCodeCommitAPIMockRecorder) DeleteRepositoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteRepositoryRequest), arg0)
}

// DeleteRepositoryWithContext mocks base method
func (m *MockCodeCommitAPI) DeleteRepositoryWithContext(arg0 context.Context, arg1 *codecommit.DeleteRepositoryInput, arg2 ...request.Option) (*codecommit.DeleteRepositoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRepositoryWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.DeleteRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositoryWithContext indicates an expected call of DeleteRepositoryWithContext
func (mr *MockCodeCommitAPIMockRecorder) DeleteRepositoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).DeleteRepositoryWithContext), varargs...)
}

// DescribeMergeConflicts mocks base method
func (m *MockCodeCommitAPI) DescribeMergeConflicts(arg0 *codecommit.DescribeMergeConflictsInput) (*codecommit.DescribeMergeConflictsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMergeConflicts", arg0)
	ret0, _ := ret[0].(*codecommit.DescribeMergeConflictsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMergeConflicts indicates an expected call of DescribeMergeConflicts
func (mr *MockCodeCommitAPIMockRecorder) DescribeMergeConflicts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMergeConflicts", reflect.TypeOf((*MockCodeCommitAPI)(nil).DescribeMergeConflicts), arg0)
}

// DescribeMergeConflictsPages mocks base method
func (m *MockCodeCommitAPI) DescribeMergeConflictsPages(arg0 *codecommit.DescribeMergeConflictsInput, arg1 func(*codecommit.DescribeMergeConflictsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMergeConflictsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeMergeConflictsPages indicates an expected call of DescribeMergeConflictsPages
func (mr *MockCodeCommitAPIMockRecorder) DescribeMergeConflictsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMergeConflictsPages", reflect.TypeOf((*MockCodeCommitAPI)(nil).DescribeMergeConflictsPages), arg0, arg1)
}

// DescribeMergeConflictsPagesWithContext mocks base method
func (m *MockCodeCommitAPI) DescribeMergeConflictsPagesWithContext(arg0 context.Context, arg1 *codecommit.DescribeMergeConflictsInput, arg2 func(*codecommit.DescribeMergeConflictsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMergeConflictsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeMergeConflictsPagesWithContext indicates an expected call of DescribeMergeConflictsPagesWithContext
func (mr *MockCodeCommitAPIMockRecorder) DescribeMergeConflictsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMergeConflictsPagesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).DescribeMergeConflictsPagesWithContext), varargs...)
}

// DescribeMergeConflictsRequest mocks base method
func (m *MockCodeCommitAPI) DescribeMergeConflictsRequest(arg0 *codecommit.DescribeMergeConflictsInput) (*request.Request, *codecommit.DescribeMergeConflictsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMergeConflictsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.DescribeMergeConflictsOutput)
	return ret0, ret1
}

// DescribeMergeConflictsRequest indicates an expected call of DescribeMergeConflictsRequest
func (mr *MockCodeCommitAPIMockRecorder) DescribeMergeConflictsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMergeConflictsRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).DescribeMergeConflictsRequest), arg0)
}

// DescribeMergeConflictsWithContext mocks base method
func (m *MockCodeCommitAPI) DescribeMergeConflictsWithContext(arg0 context.Context, arg1 *codecommit.DescribeMergeConflictsInput, arg2 ...request.Option) (*codecommit.DescribeMergeConflictsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMergeConflictsWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.DescribeMergeConflictsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMergeConflictsWithContext indicates an expected call of DescribeMergeConflictsWithContext
func (mr *MockCodeCommitAPIMockRecorder) DescribeMergeConflictsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMergeConflictsWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).DescribeMergeConflictsWithContext), varargs...)
}

// DescribePullRequestEvents mocks base method
func (m *MockCodeCommitAPI) DescribePullRequestEvents(arg0 *codecommit.DescribePullRequestEventsInput) (*codecommit.DescribePullRequestEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePullRequestEvents", arg0)
	ret0, _ := ret[0].(*codecommit.DescribePullRequestEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePullRequestEvents indicates an expected call of DescribePullRequestEvents
func (mr *MockCodeCommitAPIMockRecorder) DescribePullRequestEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePullRequestEvents", reflect.TypeOf((*MockCodeCommitAPI)(nil).DescribePullRequestEvents), arg0)
}

// DescribePullRequestEventsPages mocks base method
func (m *MockCodeCommitAPI) DescribePullRequestEventsPages(arg0 *codecommit.DescribePullRequestEventsInput, arg1 func(*codecommit.DescribePullRequestEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePullRequestEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePullRequestEventsPages indicates an expected call of DescribePullRequestEventsPages
func (mr *MockCodeCommitAPIMockRecorder) DescribePullRequestEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePullRequestEventsPages", reflect.TypeOf((*MockCodeCommitAPI)(nil).DescribePullRequestEventsPages), arg0, arg1)
}

// DescribePullRequestEventsPagesWithContext mocks base method
func (m *MockCodeCommitAPI) DescribePullRequestEventsPagesWithContext(arg0 context.Context, arg1 *codecommit.DescribePullRequestEventsInput, arg2 func(*codecommit.DescribePullRequestEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePullRequestEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePullRequestEventsPagesWithContext indicates an expected call of DescribePullRequestEventsPagesWithContext
func (mr *MockCodeCommitAPIMockRecorder) DescribePullRequestEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePullRequestEventsPagesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).DescribePullRequestEventsPagesWithContext), varargs...)
}

// DescribePullRequestEventsRequest mocks base method
func (m *MockCodeCommitAPI) DescribePullRequestEventsRequest(arg0 *codecommit.DescribePullRequestEventsInput) (*request.Request, *codecommit.DescribePullRequestEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePullRequestEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.DescribePullRequestEventsOutput)
	return ret0, ret1
}

// DescribePullRequestEventsRequest indicates an expected call of DescribePullRequestEventsRequest
func (mr *MockCodeCommitAPIMockRecorder) DescribePullRequestEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePullRequestEventsRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).DescribePullRequestEventsRequest), arg0)
}

// DescribePullRequestEventsWithContext mocks base method
func (m *MockCodeCommitAPI) DescribePullRequestEventsWithContext(arg0 context.Context, arg1 *codecommit.DescribePullRequestEventsInput, arg2 ...request.Option) (*codecommit.DescribePullRequestEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePullRequestEventsWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.DescribePullRequestEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePullRequestEventsWithContext indicates an expected call of DescribePullRequestEventsWithContext
func (mr *MockCodeCommitAPIMockRecorder) DescribePullRequestEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePullRequestEventsWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).DescribePullRequestEventsWithContext), varargs...)
}

// GetBlob mocks base method
func (m *MockCodeCommitAPI) GetBlob(arg0 *codecommit.GetBlobInput) (*codecommit.GetBlobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", arg0)
	ret0, _ := ret[0].(*codecommit.GetBlobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlob indicates an expected call of GetBlob
func (mr *MockCodeCommitAPIMockRecorder) GetBlob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetBlob), arg0)
}

// GetBlobRequest mocks base method
func (m *MockCodeCommitAPI) GetBlobRequest(arg0 *codecommit.GetBlobInput) (*request.Request, *codecommit.GetBlobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetBlobOutput)
	return ret0, ret1
}

// GetBlobRequest indicates an expected call of GetBlobRequest
func (mr *MockCodeCommitAPIMockRecorder) GetBlobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetBlobRequest), arg0)
}

// GetBlobWithContext mocks base method
func (m *MockCodeCommitAPI) GetBlobWithContext(arg0 context.Context, arg1 *codecommit.GetBlobInput, arg2 ...request.Option) (*codecommit.GetBlobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlobWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetBlobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlobWithContext indicates an expected call of GetBlobWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetBlobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetBlobWithContext), varargs...)
}

// GetBranch mocks base method
func (m *MockCodeCommitAPI) GetBranch(arg0 *codecommit.GetBranchInput) (*codecommit.GetBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", arg0)
	ret0, _ := ret[0].(*codecommit.GetBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch
func (mr *MockCodeCommitAPIMockRecorder) GetBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetBranch), arg0)
}

// GetBranchRequest mocks base method
func (m *MockCodeCommitAPI) GetBranchRequest(arg0 *codecommit.GetBranchInput) (*request.Request, *codecommit.GetBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetBranchOutput)
	return ret0, ret1
}

// GetBranchRequest indicates an expected call of GetBranchRequest
func (mr *MockCodeCommitAPIMockRecorder) GetBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetBranchRequest), arg0)
}

// GetBranchWithContext mocks base method
func (m *MockCodeCommitAPI) GetBranchWithContext(arg0 context.Context, arg1 *codecommit.GetBranchInput, arg2 ...request.Option) (*codecommit.GetBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBranchWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchWithContext indicates an expected call of GetBranchWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetBranchWithContext), varargs...)
}

// GetComment mocks base method
func (m *MockCodeCommitAPI) GetComment(arg0 *codecommit.GetCommentInput) (*codecommit.GetCommentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0)
	ret0, _ := ret[0].(*codecommit.GetCommentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockCodeCommitAPIMockRecorder) GetComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetComment), arg0)
}

// GetCommentRequest mocks base method
func (m *MockCodeCommitAPI) GetCommentRequest(arg0 *codecommit.GetCommentInput) (*request.Request, *codecommit.GetCommentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetCommentOutput)
	return ret0, ret1
}

// GetCommentRequest indicates an expected call of GetCommentRequest
func (mr *MockCodeCommitAPIMockRecorder) GetCommentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentRequest), arg0)
}

// GetCommentWithContext mocks base method
func (m *MockCodeCommitAPI) GetCommentWithContext(arg0 context.Context, arg1 *codecommit.GetCommentInput, arg2 ...request.Option) (*codecommit.GetCommentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetCommentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentWithContext indicates an expected call of GetCommentWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetCommentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentWithContext), varargs...)
}

// GetCommentsForComparedCommit mocks base method
func (m *MockCodeCommitAPI) GetCommentsForComparedCommit(arg0 *codecommit.GetCommentsForComparedCommitInput) (*codecommit.GetCommentsForComparedCommitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForComparedCommit", arg0)
	ret0, _ := ret[0].(*codecommit.GetCommentsForComparedCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsForComparedCommit indicates an expected call of GetCommentsForComparedCommit
func (mr *MockCodeCommitAPIMockRecorder) GetCommentsForComparedCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForComparedCommit", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentsForComparedCommit), arg0)
}

// GetCommentsForComparedCommitPages mocks base method
func (m *MockCodeCommitAPI) GetCommentsForComparedCommitPages(arg0 *codecommit.GetCommentsForComparedCommitInput, arg1 func(*codecommit.GetCommentsForComparedCommitOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForComparedCommitPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCommentsForComparedCommitPages indicates an expected call of GetCommentsForComparedCommitPages
func (mr *MockCodeCommitAPIMockRecorder) GetCommentsForComparedCommitPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForComparedCommitPages", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentsForComparedCommitPages), arg0, arg1)
}

// GetCommentsForComparedCommitPagesWithContext mocks base method
func (m *MockCodeCommitAPI) GetCommentsForComparedCommitPagesWithContext(arg0 context.Context, arg1 *codecommit.GetCommentsForComparedCommitInput, arg2 func(*codecommit.GetCommentsForComparedCommitOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentsForComparedCommitPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCommentsForComparedCommitPagesWithContext indicates an expected call of GetCommentsForComparedCommitPagesWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetCommentsForComparedCommitPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForComparedCommitPagesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentsForComparedCommitPagesWithContext), varargs...)
}

// GetCommentsForComparedCommitRequest mocks base method
func (m *MockCodeCommitAPI) GetCommentsForComparedCommitRequest(arg0 *codecommit.GetCommentsForComparedCommitInput) (*request.Request, *codecommit.GetCommentsForComparedCommitOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForComparedCommitRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetCommentsForComparedCommitOutput)
	return ret0, ret1
}

// GetCommentsForComparedCommitRequest indicates an expected call of GetCommentsForComparedCommitRequest
func (mr *MockCodeCommitAPIMockRecorder) GetCommentsForComparedCommitRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForComparedCommitRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentsForComparedCommitRequest), arg0)
}

// GetCommentsForComparedCommitWithContext mocks base method
func (m *MockCodeCommitAPI) GetCommentsForComparedCommitWithContext(arg0 context.Context, arg1 *codecommit.GetCommentsForComparedCommitInput, arg2 ...request.Option) (*codecommit.GetCommentsForComparedCommitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentsForComparedCommitWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetCommentsForComparedCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsForComparedCommitWithContext indicates an expected call of GetCommentsForComparedCommitWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetCommentsForComparedCommitWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForComparedCommitWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentsForComparedCommitWithContext), varargs...)
}

// GetCommentsForPullRequest mocks base method
func (m *MockCodeCommitAPI) GetCommentsForPullRequest(arg0 *codecommit.GetCommentsForPullRequestInput) (*codecommit.GetCommentsForPullRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForPullRequest", arg0)
	ret0, _ := ret[0].(*codecommit.GetCommentsForPullRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsForPullRequest indicates an expected call of GetCommentsForPullRequest
func (mr *MockCodeCommitAPIMockRecorder) GetCommentsForPullRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForPullRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentsForPullRequest), arg0)
}

// GetCommentsForPullRequestPages mocks base method
func (m *MockCodeCommitAPI) GetCommentsForPullRequestPages(arg0 *codecommit.GetCommentsForPullRequestInput, arg1 func(*codecommit.GetCommentsForPullRequestOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForPullRequestPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCommentsForPullRequestPages indicates an expected call of GetCommentsForPullRequestPages
func (mr *MockCodeCommitAPIMockRecorder) GetCommentsForPullRequestPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForPullRequestPages", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentsForPullRequestPages), arg0, arg1)
}

// GetCommentsForPullRequestPagesWithContext mocks base method
func (m *MockCodeCommitAPI) GetCommentsForPullRequestPagesWithContext(arg0 context.Context, arg1 *codecommit.GetCommentsForPullRequestInput, arg2 func(*codecommit.GetCommentsForPullRequestOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentsForPullRequestPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCommentsForPullRequestPagesWithContext indicates an expected call of GetCommentsForPullRequestPagesWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetCommentsForPullRequestPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForPullRequestPagesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentsForPullRequestPagesWithContext), varargs...)
}

// GetCommentsForPullRequestRequest mocks base method
func (m *MockCodeCommitAPI) GetCommentsForPullRequestRequest(arg0 *codecommit.GetCommentsForPullRequestInput) (*request.Request, *codecommit.GetCommentsForPullRequestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForPullRequestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetCommentsForPullRequestOutput)
	return ret0, ret1
}

// GetCommentsForPullRequestRequest indicates an expected call of GetCommentsForPullRequestRequest
func (mr *MockCodeCommitAPIMockRecorder) GetCommentsForPullRequestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForPullRequestRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentsForPullRequestRequest), arg0)
}

// GetCommentsForPullRequestWithContext mocks base method
func (m *MockCodeCommitAPI) GetCommentsForPullRequestWithContext(arg0 context.Context, arg1 *codecommit.GetCommentsForPullRequestInput, arg2 ...request.Option) (*codecommit.GetCommentsForPullRequestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentsForPullRequestWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetCommentsForPullRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsForPullRequestWithContext indicates an expected call of GetCommentsForPullRequestWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetCommentsForPullRequestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForPullRequestWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommentsForPullRequestWithContext), varargs...)
}

// GetCommit mocks base method
func (m *MockCodeCommitAPI) GetCommit(arg0 *codecommit.GetCommitInput) (*codecommit.GetCommitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", arg0)
	ret0, _ := ret[0].(*codecommit.GetCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit
func (mr *MockCodeCommitAPIMockRecorder) GetCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommit), arg0)
}

// GetCommitRequest mocks base method
func (m *MockCodeCommitAPI) GetCommitRequest(arg0 *codecommit.GetCommitInput) (*request.Request, *codecommit.GetCommitOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetCommitOutput)
	return ret0, ret1
}

// GetCommitRequest indicates an expected call of GetCommitRequest
func (mr *MockCodeCommitAPIMockRecorder) GetCommitRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommitRequest), arg0)
}

// GetCommitWithContext mocks base method
func (m *MockCodeCommitAPI) GetCommitWithContext(arg0 context.Context, arg1 *codecommit.GetCommitInput, arg2 ...request.Option) (*codecommit.GetCommitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommitWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitWithContext indicates an expected call of GetCommitWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetCommitWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetCommitWithContext), varargs...)
}

// GetDifferences mocks base method
func (m *MockCodeCommitAPI) GetDifferences(arg0 *codecommit.GetDifferencesInput) (*codecommit.GetDifferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDifferences", arg0)
	ret0, _ := ret[0].(*codecommit.GetDifferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDifferences indicates an expected call of GetDifferences
func (mr *MockCodeCommitAPIMockRecorder) GetDifferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDifferences", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetDifferences), arg0)
}

// GetDifferencesPages mocks base method
func (m *MockCodeCommitAPI) GetDifferencesPages(arg0 *codecommit.GetDifferencesInput, arg1 func(*codecommit.GetDifferencesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDifferencesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDifferencesPages indicates an expected call of GetDifferencesPages
func (mr *MockCodeCommitAPIMockRecorder) GetDifferencesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDifferencesPages", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetDifferencesPages), arg0, arg1)
}

// GetDifferencesPagesWithContext mocks base method
func (m *MockCodeCommitAPI) GetDifferencesPagesWithContext(arg0 context.Context, arg1 *codecommit.GetDifferencesInput, arg2 func(*codecommit.GetDifferencesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDifferencesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDifferencesPagesWithContext indicates an expected call of GetDifferencesPagesWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetDifferencesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDifferencesPagesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetDifferencesPagesWithContext), varargs...)
}

// GetDifferencesRequest mocks base method
func (m *MockCodeCommitAPI) GetDifferencesRequest(arg0 *codecommit.GetDifferencesInput) (*request.Request, *codecommit.GetDifferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDifferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetDifferencesOutput)
	return ret0, ret1
}

// GetDifferencesRequest indicates an expected call of GetDifferencesRequest
func (mr *MockCodeCommitAPIMockRecorder) GetDifferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDifferencesRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetDifferencesRequest), arg0)
}

// GetDifferencesWithContext mocks base method
func (m *MockCodeCommitAPI) GetDifferencesWithContext(arg0 context.Context, arg1 *codecommit.GetDifferencesInput, arg2 ...request.Option) (*codecommit.GetDifferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDifferencesWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetDifferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDifferencesWithContext indicates an expected call of GetDifferencesWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetDifferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDifferencesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetDifferencesWithContext), varargs...)
}

// GetFile mocks base method
func (m *MockCodeCommitAPI) GetFile(arg0 *codecommit.GetFileInput) (*codecommit.GetFileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", arg0)
	ret0, _ := ret[0].(*codecommit.GetFileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile
func (mr *MockCodeCommitAPIMockRecorder) GetFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetFile), arg0)
}

// GetFileRequest mocks base method
func (m *MockCodeCommitAPI) GetFileRequest(arg0 *codecommit.GetFileInput) (*request.Request, *codecommit.GetFileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetFileOutput)
	return ret0, ret1
}

// GetFileRequest indicates an expected call of GetFileRequest
func (mr *MockCodeCommitAPIMockRecorder) GetFileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetFileRequest), arg0)
}

// GetFileWithContext mocks base method
func (m *MockCodeCommitAPI) GetFileWithContext(arg0 context.Context, arg1 *codecommit.GetFileInput, arg2 ...request.Option) (*codecommit.GetFileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetFileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileWithContext indicates an expected call of GetFileWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetFileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetFileWithContext), varargs...)
}

// GetFolder mocks base method
func (m *MockCodeCommitAPI) GetFolder(arg0 *codecommit.GetFolderInput) (*codecommit.GetFolderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolder", arg0)
	ret0, _ := ret[0].(*codecommit.GetFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolder indicates an expected call of GetFolder
func (mr *MockCodeCommitAPIMockRecorder) GetFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolder", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetFolder), arg0)
}

// GetFolderRequest mocks base method
func (m *MockCodeCommitAPI) GetFolderRequest(arg0 *codecommit.GetFolderInput) (*request.Request, *codecommit.GetFolderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetFolderOutput)
	return ret0, ret1
}

// GetFolderRequest indicates an expected call of GetFolderRequest
func (mr *MockCodeCommitAPIMockRecorder) GetFolderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetFolderRequest), arg0)
}

// GetFolderWithContext mocks base method
func (m *MockCodeCommitAPI) GetFolderWithContext(arg0 context.Context, arg1 *codecommit.GetFolderInput, arg2 ...request.Option) (*codecommit.GetFolderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFolderWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderWithContext indicates an expected call of GetFolderWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetFolderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetFolderWithContext), varargs...)
}

// GetMergeCommit mocks base method
func (m *MockCodeCommitAPI) GetMergeCommit(arg0 *codecommit.GetMergeCommitInput) (*codecommit.GetMergeCommitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeCommit", arg0)
	ret0, _ := ret[0].(*codecommit.GetMergeCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeCommit indicates an expected call of GetMergeCommit
func (mr *MockCodeCommitAPIMockRecorder) GetMergeCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeCommit", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeCommit), arg0)
}

// GetMergeCommitRequest mocks base method
func (m *MockCodeCommitAPI) GetMergeCommitRequest(arg0 *codecommit.GetMergeCommitInput) (*request.Request, *codecommit.GetMergeCommitOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeCommitRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetMergeCommitOutput)
	return ret0, ret1
}

// GetMergeCommitRequest indicates an expected call of GetMergeCommitRequest
func (mr *MockCodeCommitAPIMockRecorder) GetMergeCommitRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeCommitRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeCommitRequest), arg0)
}

// GetMergeCommitWithContext mocks base method
func (m *MockCodeCommitAPI) GetMergeCommitWithContext(arg0 context.Context, arg1 *codecommit.GetMergeCommitInput, arg2 ...request.Option) (*codecommit.GetMergeCommitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeCommitWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetMergeCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeCommitWithContext indicates an expected call of GetMergeCommitWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetMergeCommitWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeCommitWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeCommitWithContext), varargs...)
}

// GetMergeConflicts mocks base method
func (m *MockCodeCommitAPI) GetMergeConflicts(arg0 *codecommit.GetMergeConflictsInput) (*codecommit.GetMergeConflictsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeConflicts", arg0)
	ret0, _ := ret[0].(*codecommit.GetMergeConflictsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeConflicts indicates an expected call of GetMergeConflicts
func (mr *MockCodeCommitAPIMockRecorder) GetMergeConflicts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeConflicts", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeConflicts), arg0)
}

// GetMergeConflictsPages mocks base method
func (m *MockCodeCommitAPI) GetMergeConflictsPages(arg0 *codecommit.GetMergeConflictsInput, arg1 func(*codecommit.GetMergeConflictsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeConflictsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMergeConflictsPages indicates an expected call of GetMergeConflictsPages
func (mr *MockCodeCommitAPIMockRecorder) GetMergeConflictsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeConflictsPages", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeConflictsPages), arg0, arg1)
}

// GetMergeConflictsPagesWithContext mocks base method
func (m *MockCodeCommitAPI) GetMergeConflictsPagesWithContext(arg0 context.Context, arg1 *codecommit.GetMergeConflictsInput, arg2 func(*codecommit.GetMergeConflictsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeConflictsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMergeConflictsPagesWithContext indicates an expected call of GetMergeConflictsPagesWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetMergeConflictsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeConflictsPagesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeConflictsPagesWithContext), varargs...)
}

// GetMergeConflictsRequest mocks base method
func (m *MockCodeCommitAPI) GetMergeConflictsRequest(arg0 *codecommit.GetMergeConflictsInput) (*request.Request, *codecommit.GetMergeConflictsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeConflictsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetMergeConflictsOutput)
	return ret0, ret1
}

// GetMergeConflictsRequest indicates an expected call of GetMergeConflictsRequest
func (mr *MockCodeCommitAPIMockRecorder) GetMergeConflictsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeConflictsRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeConflictsRequest), arg0)
}

// GetMergeConflictsWithContext mocks base method
func (m *MockCodeCommitAPI) GetMergeConflictsWithContext(arg0 context.Context, arg1 *codecommit.GetMergeConflictsInput, arg2 ...request.Option) (*codecommit.GetMergeConflictsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeConflictsWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetMergeConflictsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeConflictsWithContext indicates an expected call of GetMergeConflictsWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetMergeConflictsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeConflictsWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeConflictsWithContext), varargs...)
}

// GetMergeOptions mocks base method
func (m *MockCodeCommitAPI) GetMergeOptions(arg0 *codecommit.GetMergeOptionsInput) (*codecommit.GetMergeOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeOptions", arg0)
	ret0, _ := ret[0].(*codecommit.GetMergeOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeOptions indicates an expected call of GetMergeOptions
func (mr *MockCodeCommitAPIMockRecorder) GetMergeOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeOptions", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeOptions), arg0)
}

// GetMergeOptionsRequest mocks base method
func (m *MockCodeCommitAPI) GetMergeOptionsRequest(arg0 *codecommit.GetMergeOptionsInput) (*request.Request, *codecommit.GetMergeOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetMergeOptionsOutput)
	return ret0, ret1
}

// GetMergeOptionsRequest indicates an expected call of GetMergeOptionsRequest
func (mr *MockCodeCommitAPIMockRecorder) GetMergeOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeOptionsRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeOptionsRequest), arg0)
}

// GetMergeOptionsWithContext mocks base method
func (m *MockCodeCommitAPI) GetMergeOptionsWithContext(arg0 context.Context, arg1 *codecommit.GetMergeOptionsInput, arg2 ...request.Option) (*codecommit.GetMergeOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetMergeOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeOptionsWithContext indicates an expected call of GetMergeOptionsWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetMergeOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeOptionsWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetMergeOptionsWithContext), varargs...)
}

// GetPullRequest mocks base method
func (m *MockCodeCommitAPI) GetPullRequest(arg0 *codecommit.GetPullRequestInput) (*codecommit.GetPullRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", arg0)
	ret0, _ := ret[0].(*codecommit.GetPullRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest
func (mr *MockCodeCommitAPIMockRecorder) GetPullRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetPullRequest), arg0)
}

// GetPullRequestRequest mocks base method
func (m *MockCodeCommitAPI) GetPullRequestRequest(arg0 *codecommit.GetPullRequestInput) (*request.Request, *codecommit.GetPullRequestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetPullRequestOutput)
	return ret0, ret1
}

// GetPullRequestRequest indicates an expected call of GetPullRequestRequest
func (mr *MockCodeCommitAPIMockRecorder) GetPullRequestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetPullRequestRequest), arg0)
}

// GetPullRequestWithContext mocks base method
func (m *MockCodeCommitAPI) GetPullRequestWithContext(arg0 context.Context, arg1 *codecommit.GetPullRequestInput, arg2 ...request.Option) (*codecommit.GetPullRequestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPullRequestWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetPullRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestWithContext indicates an expected call of GetPullRequestWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetPullRequestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetPullRequestWithContext), varargs...)
}

// GetRepository mocks base method
func (m *MockCodeCommitAPI) GetRepository(arg0 *codecommit.GetRepositoryInput) (*codecommit.GetRepositoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", arg0)
	ret0, _ := ret[0].(*codecommit.GetRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository
func (mr *MockCodeCommitAPIMockRecorder) GetRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetRepository), arg0)
}

// GetRepositoryRequest mocks base method
func (m *MockCodeCommitAPI) GetRepositoryRequest(arg0 *codecommit.GetRepositoryInput) (*request.Request, *codecommit.GetRepositoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetRepositoryOutput)
	return ret0, ret1
}

// GetRepositoryRequest indicates an expected call of GetRepositoryRequest
func (mr *MockCodeCommitAPIMockRecorder) GetRepositoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetRepositoryRequest), arg0)
}

// GetRepositoryTriggers mocks base method
func (m *MockCodeCommitAPI) GetRepositoryTriggers(arg0 *codecommit.GetRepositoryTriggersInput) (*codecommit.GetRepositoryTriggersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryTriggers", arg0)
	ret0, _ := ret[0].(*codecommit.GetRepositoryTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryTriggers indicates an expected call of GetRepositoryTriggers
func (mr *MockCodeCommitAPIMockRecorder) GetRepositoryTriggers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryTriggers", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetRepositoryTriggers), arg0)
}

// GetRepositoryTriggersRequest mocks base method
func (m *MockCodeCommitAPI) GetRepositoryTriggersRequest(arg0 *codecommit.GetRepositoryTriggersInput) (*request.Request, *codecommit.GetRepositoryTriggersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryTriggersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.GetRepositoryTriggersOutput)
	return ret0, ret1
}

// GetRepositoryTriggersRequest indicates an expected call of GetRepositoryTriggersRequest
func (mr *MockCodeCommitAPIMockRecorder) GetRepositoryTriggersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryTriggersRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetRepositoryTriggersRequest), arg0)
}

// GetRepositoryTriggersWithContext mocks base method
func (m *MockCodeCommitAPI) GetRepositoryTriggersWithContext(arg0 context.Context, arg1 *codecommit.GetRepositoryTriggersInput, arg2 ...request.Option) (*codecommit.GetRepositoryTriggersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepositoryTriggersWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetRepositoryTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryTriggersWithContext indicates an expected call of GetRepositoryTriggersWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetRepositoryTriggersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryTriggersWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetRepositoryTriggersWithContext), varargs...)
}

// GetRepositoryWithContext mocks base method
func (m *MockCodeCommitAPI) GetRepositoryWithContext(arg0 context.Context, arg1 *codecommit.GetRepositoryInput, arg2 ...request.Option) (*codecommit.GetRepositoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepositoryWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.GetRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryWithContext indicates an expected call of GetRepositoryWithContext
func (mr *MockCodeCommitAPIMockRecorder) GetRepositoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).GetRepositoryWithContext), varargs...)
}

// ListBranches mocks base method
func (m *MockCodeCommitAPI) ListBranches(arg0 *codecommit.ListBranchesInput) (*codecommit.ListBranchesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", arg0)
	ret0, _ := ret[0].(*codecommit.ListBranchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches
func (mr *MockCodeCommitAPIMockRecorder) ListBranches(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListBranches), arg0)
}

// ListBranchesPages mocks base method
func (m *MockCodeCommitAPI) ListBranchesPages(arg0 *codecommit.ListBranchesInput, arg1 func(*codecommit.ListBranchesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranchesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBranchesPages indicates an expected call of ListBranchesPages
func (mr *MockCodeCommitAPIMockRecorder) ListBranchesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesPages", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListBranchesPages), arg0, arg1)
}

// ListBranchesPagesWithContext mocks base method
func (m *MockCodeCommitAPI) ListBranchesPagesWithContext(arg0 context.Context, arg1 *codecommit.ListBranchesInput, arg2 func(*codecommit.ListBranchesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBranchesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBranchesPagesWithContext indicates an expected call of ListBranchesPagesWithContext
func (mr *MockCodeCommitAPIMockRecorder) ListBranchesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesPagesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListBranchesPagesWithContext), varargs...)
}

// ListBranchesRequest mocks base method
func (m *MockCodeCommitAPI) ListBranchesRequest(arg0 *codecommit.ListBranchesInput) (*request.Request, *codecommit.ListBranchesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranchesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.ListBranchesOutput)
	return ret0, ret1
}

// ListBranchesRequest indicates an expected call of ListBranchesRequest
func (mr *MockCodeCommitAPIMockRecorder) ListBranchesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListBranchesRequest), arg0)
}

// ListBranchesWithContext mocks base method
func (m *MockCodeCommitAPI) ListBranchesWithContext(arg0 context.Context, arg1 *codecommit.ListBranchesInput, arg2 ...request.Option) (*codecommit.ListBranchesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBranchesWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.ListBranchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranchesWithContext indicates an expected call of ListBranchesWithContext
func (mr *MockCodeCommitAPIMockRecorder) ListBranchesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListBranchesWithContext), varargs...)
}

// ListPullRequests mocks base method
func (m *MockCodeCommitAPI) ListPullRequests(arg0 *codecommit.ListPullRequestsInput) (*codecommit.ListPullRequestsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequests", arg0)
	ret0, _ := ret[0].(*codecommit.ListPullRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequests indicates an expected call of ListPullRequests
func (mr *MockCodeCommitAPIMockRecorder) ListPullRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequests", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListPullRequests), arg0)
}

// ListPullRequestsPages mocks base method
func (m *MockCodeCommitAPI) ListPullRequestsPages(arg0 *codecommit.ListPullRequestsInput, arg1 func(*codecommit.ListPullRequestsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPullRequestsPages indicates an expected call of ListPullRequestsPages
func (mr *MockCodeCommitAPIMockRecorder) ListPullRequestsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestsPages", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListPullRequestsPages), arg0, arg1)
}

// ListPullRequestsPagesWithContext mocks base method
func (m *MockCodeCommitAPI) ListPullRequestsPagesWithContext(arg0 context.Context, arg1 *codecommit.ListPullRequestsInput, arg2 func(*codecommit.ListPullRequestsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPullRequestsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPullRequestsPagesWithContext indicates an expected call of ListPullRequestsPagesWithContext
func (mr *MockCodeCommitAPIMockRecorder) ListPullRequestsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestsPagesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListPullRequestsPagesWithContext), varargs...)
}

// ListPullRequestsRequest mocks base method
func (m *MockCodeCommitAPI) ListPullRequestsRequest(arg0 *codecommit.ListPullRequestsInput) (*request.Request, *codecommit.ListPullRequestsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.ListPullRequestsOutput)
	return ret0, ret1
}

// ListPullRequestsRequest indicates an expected call of ListPullRequestsRequest
func (mr *MockCodeCommitAPIMockRecorder) ListPullRequestsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestsRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListPullRequestsRequest), arg0)
}

// ListPullRequestsWithContext mocks base method
func (m *MockCodeCommitAPI) ListPullRequestsWithContext(arg0 context.Context, arg1 *codecommit.ListPullRequestsInput, arg2 ...request.Option) (*codecommit.ListPullRequestsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPullRequestsWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.ListPullRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestsWithContext indicates an expected call of ListPullRequestsWithContext
func (mr *MockCodeCommitAPIMockRecorder) ListPullRequestsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestsWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListPullRequestsWithContext), varargs...)
}

// ListRepositories mocks base method
func (m *MockCodeCommitAPI) ListRepositories(arg0 *codecommit.ListRepositoriesInput) (*codecommit.ListRepositoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", arg0)
	ret0, _ := ret[0].(*codecommit.ListRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories
func (mr *MockCodeCommitAPIMockRecorder) ListRepositories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListRepositories), arg0)
}

// ListRepositoriesPages mocks base method
func (m *MockCodeCommitAPI) ListRepositoriesPages(arg0 *codecommit.ListRepositoriesInput, arg1 func(*codecommit.ListRepositoriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRepositoriesPages indicates an expected call of ListRepositoriesPages
func (mr *MockCodeCommitAPIMockRecorder) ListRepositoriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoriesPages", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListRepositoriesPages), arg0, arg1)
}

// ListRepositoriesPagesWithContext mocks base method
func (m *MockCodeCommitAPI) ListRepositoriesPagesWithContext(arg0 context.Context, arg1 *codecommit.ListRepositoriesInput, arg2 func(*codecommit.ListRepositoriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositoriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRepositoriesPagesWithContext indicates an expected call of ListRepositoriesPagesWithContext
func (mr *MockCodeCommitAPIMockRecorder) ListRepositoriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoriesPagesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListRepositoriesPagesWithContext), varargs...)
}

// ListRepositoriesRequest mocks base method
func (m *MockCodeCommitAPI) ListRepositoriesRequest(arg0 *codecommit.ListRepositoriesInput) (*request.Request, *codecommit.ListRepositoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.ListRepositoriesOutput)
	return ret0, ret1
}

// ListRepositoriesRequest indicates an expected call of ListRepositoriesRequest
func (mr *MockCodeCommitAPIMockRecorder) ListRepositoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoriesRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListRepositoriesRequest), arg0)
}

// ListRepositoriesWithContext mocks base method
func (m *MockCodeCommitAPI) ListRepositoriesWithContext(arg0 context.Context, arg1 *codecommit.ListRepositoriesInput, arg2 ...request.Option) (*codecommit.ListRepositoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositoriesWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.ListRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoriesWithContext indicates an expected call of ListRepositoriesWithContext
func (mr *MockCodeCommitAPIMockRecorder) ListRepositoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoriesWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListRepositoriesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCodeCommitAPI) ListTagsForResource(arg0 *codecommit.ListTagsForResourceInput) (*codecommit.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*codecommit.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCodeCommitAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCodeCommitAPI) ListTagsForResourceRequest(arg0 *codecommit.ListTagsForResourceInput) (*request.Request, *codecommit.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCodeCommitAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCodeCommitAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *codecommit.ListTagsForResourceInput, arg2 ...request.Option) (*codecommit.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCodeCommitAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// MergeBranchesByFastForward mocks base method
func (m *MockCodeCommitAPI) MergeBranchesByFastForward(arg0 *codecommit.MergeBranchesByFastForwardInput) (*codecommit.MergeBranchesByFastForwardOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeBranchesByFastForward", arg0)
	ret0, _ := ret[0].(*codecommit.MergeBranchesByFastForwardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeBranchesByFastForward indicates an expected call of MergeBranchesByFastForward
func (mr *MockCodeCommitAPIMockRecorder) MergeBranchesByFastForward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBranchesByFastForward", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergeBranchesByFastForward), arg0)
}

// MergeBranchesByFastForwardRequest mocks base method
func (m *MockCodeCommitAPI) MergeBranchesByFastForwardRequest(arg0 *codecommit.MergeBranchesByFastForwardInput) (*request.Request, *codecommit.MergeBranchesByFastForwardOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeBranchesByFastForwardRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.MergeBranchesByFastForwardOutput)
	return ret0, ret1
}

// MergeBranchesByFastForwardRequest indicates an expected call of MergeBranchesByFastForwardRequest
func (mr *MockCodeCommitAPIMockRecorder) MergeBranchesByFastForwardRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBranchesByFastForwardRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergeBranchesByFastForwardRequest), arg0)
}

// MergeBranchesByFastForwardWithContext mocks base method
func (m *MockCodeCommitAPI) MergeBranchesByFastForwardWithContext(arg0 context.Context, arg1 *codecommit.MergeBranchesByFastForwardInput, arg2 ...request.Option) (*codecommit.MergeBranchesByFastForwardOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeBranchesByFastForwardWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.MergeBranchesByFastForwardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeBranchesByFastForwardWithContext indicates an expected call of MergeBranchesByFastForwardWithContext
func (mr *MockCodeCommitAPIMockRecorder) MergeBranchesByFastForwardWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBranchesByFastForwardWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergeBranchesByFastForwardWithContext), varargs...)
}

// MergeBranchesBySquash mocks base method
func (m *MockCodeCommitAPI) MergeBranchesBySquash(arg0 *codecommit.MergeBranchesBySquashInput) (*codecommit.MergeBranchesBySquashOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeBranchesBySquash", arg0)
	ret0, _ := ret[0].(*codecommit.MergeBranchesBySquashOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeBranchesBySquash indicates an expected call of MergeBranchesBySquash
func (mr *MockCodeCommitAPIMockRecorder) MergeBranchesBySquash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBranchesBySquash", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergeBranchesBySquash), arg0)
}

// MergeBranchesBySquashRequest mocks base method
func (m *MockCodeCommitAPI) MergeBranchesBySquashRequest(arg0 *codecommit.MergeBranchesBySquashInput) (*request.Request, *codecommit.MergeBranchesBySquashOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeBranchesBySquashRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.MergeBranchesBySquashOutput)
	return ret0, ret1
}

// MergeBranchesBySquashRequest indicates an expected call of MergeBranchesBySquashRequest
func (mr *MockCodeCommitAPIMockRecorder) MergeBranchesBySquashRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBranchesBySquashRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergeBranchesBySquashRequest), arg0)
}

// MergeBranchesBySquashWithContext mocks base method
func (m *MockCodeCommitAPI) MergeBranchesBySquashWithContext(arg0 context.Context, arg1 *codecommit.MergeBranchesBySquashInput, arg2 ...request.Option) (*codecommit.MergeBranchesBySquashOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeBranchesBySquashWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.MergeBranchesBySquashOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeBranchesBySquashWithContext indicates an expected call of MergeBranchesBySquashWithContext
func (mr *MockCodeCommitAPIMockRecorder) MergeBranchesBySquashWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBranchesBySquashWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergeBranchesBySquashWithContext), varargs...)
}

// MergeBranchesByThreeWay mocks base method
func (m *MockCodeCommitAPI) MergeBranchesByThreeWay(arg0 *codecommit.MergeBranchesByThreeWayInput) (*codecommit.MergeBranchesByThreeWayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeBranchesByThreeWay", arg0)
	ret0, _ := ret[0].(*codecommit.MergeBranchesByThreeWayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeBranchesByThreeWay indicates an expected call of MergeBranchesByThreeWay
func (mr *MockCodeCommitAPIMockRecorder) MergeBranchesByThreeWay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBranchesByThreeWay", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergeBranchesByThreeWay), arg0)
}

// MergeBranchesByThreeWayRequest mocks base method
func (m *MockCodeCommitAPI) MergeBranchesByThreeWayRequest(arg0 *codecommit.MergeBranchesByThreeWayInput) (*request.Request, *codecommit.MergeBranchesByThreeWayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeBranchesByThreeWayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.MergeBranchesByThreeWayOutput)
	return ret0, ret1
}

// MergeBranchesByThreeWayRequest indicates an expected call of MergeBranchesByThreeWayRequest
func (mr *MockCodeCommitAPIMockRecorder) MergeBranchesByThreeWayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBranchesByThreeWayRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergeBranchesByThreeWayRequest), arg0)
}

// MergeBranchesByThreeWayWithContext mocks base method
func (m *MockCodeCommitAPI) MergeBranchesByThreeWayWithContext(arg0 context.Context, arg1 *codecommit.MergeBranchesByThreeWayInput, arg2 ...request.Option) (*codecommit.MergeBranchesByThreeWayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeBranchesByThreeWayWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.MergeBranchesByThreeWayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeBranchesByThreeWayWithContext indicates an expected call of MergeBranchesByThreeWayWithContext
func (mr *MockCodeCommitAPIMockRecorder) MergeBranchesByThreeWayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBranchesByThreeWayWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergeBranchesByThreeWayWithContext), varargs...)
}

// MergePullRequestByFastForward mocks base method
func (m *MockCodeCommitAPI) MergePullRequestByFastForward(arg0 *codecommit.MergePullRequestByFastForwardInput) (*codecommit.MergePullRequestByFastForwardOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePullRequestByFastForward", arg0)
	ret0, _ := ret[0].(*codecommit.MergePullRequestByFastForwardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergePullRequestByFastForward indicates an expected call of MergePullRequestByFastForward
func (mr *MockCodeCommitAPIMockRecorder) MergePullRequestByFastForward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequestByFastForward", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergePullRequestByFastForward), arg0)
}

// MergePullRequestByFastForwardRequest mocks base method
func (m *MockCodeCommitAPI) MergePullRequestByFastForwardRequest(arg0 *codecommit.MergePullRequestByFastForwardInput) (*request.Request, *codecommit.MergePullRequestByFastForwardOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePullRequestByFastForwardRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.MergePullRequestByFastForwardOutput)
	return ret0, ret1
}

// MergePullRequestByFastForwardRequest indicates an expected call of MergePullRequestByFastForwardRequest
func (mr *MockCodeCommitAPIMockRecorder) MergePullRequestByFastForwardRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequestByFastForwardRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergePullRequestByFastForwardRequest), arg0)
}

// MergePullRequestByFastForwardWithContext mocks base method
func (m *MockCodeCommitAPI) MergePullRequestByFastForwardWithContext(arg0 context.Context, arg1 *codecommit.MergePullRequestByFastForwardInput, arg2 ...request.Option) (*codecommit.MergePullRequestByFastForwardOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergePullRequestByFastForwardWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.MergePullRequestByFastForwardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergePullRequestByFastForwardWithContext indicates an expected call of MergePullRequestByFastForwardWithContext
func (mr *MockCodeCommitAPIMockRecorder) MergePullRequestByFastForwardWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequestByFastForwardWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergePullRequestByFastForwardWithContext), varargs...)
}

// MergePullRequestBySquash mocks base method
func (m *MockCodeCommitAPI) MergePullRequestBySquash(arg0 *codecommit.MergePullRequestBySquashInput) (*codecommit.MergePullRequestBySquashOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePullRequestBySquash", arg0)
	ret0, _ := ret[0].(*codecommit.MergePullRequestBySquashOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergePullRequestBySquash indicates an expected call of MergePullRequestBySquash
func (mr *MockCodeCommitAPIMockRecorder) MergePullRequestBySquash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequestBySquash", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergePullRequestBySquash), arg0)
}

// MergePullRequestBySquashRequest mocks base method
func (m *MockCodeCommitAPI) MergePullRequestBySquashRequest(arg0 *codecommit.MergePullRequestBySquashInput) (*request.Request, *codecommit.MergePullRequestBySquashOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePullRequestBySquashRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.MergePullRequestBySquashOutput)
	return ret0, ret1
}

// MergePullRequestBySquashRequest indicates an expected call of MergePullRequestBySquashRequest
func (mr *MockCodeCommitAPIMockRecorder) MergePullRequestBySquashRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequestBySquashRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergePullRequestBySquashRequest), arg0)
}

// MergePullRequestBySquashWithContext mocks base method
func (m *MockCodeCommitAPI) MergePullRequestBySquashWithContext(arg0 context.Context, arg1 *codecommit.MergePullRequestBySquashInput, arg2 ...request.Option) (*codecommit.MergePullRequestBySquashOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergePullRequestBySquashWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.MergePullRequestBySquashOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergePullRequestBySquashWithContext indicates an expected call of MergePullRequestBySquashWithContext
func (mr *MockCodeCommitAPIMockRecorder) MergePullRequestBySquashWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequestBySquashWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergePullRequestBySquashWithContext), varargs...)
}

// MergePullRequestByThreeWay mocks base method
func (m *MockCodeCommitAPI) MergePullRequestByThreeWay(arg0 *codecommit.MergePullRequestByThreeWayInput) (*codecommit.MergePullRequestByThreeWayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePullRequestByThreeWay", arg0)
	ret0, _ := ret[0].(*codecommit.MergePullRequestByThreeWayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergePullRequestByThreeWay indicates an expected call of MergePullRequestByThreeWay
func (mr *MockCodeCommitAPIMockRecorder) MergePullRequestByThreeWay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequestByThreeWay", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergePullRequestByThreeWay), arg0)
}

// MergePullRequestByThreeWayRequest mocks base method
func (m *MockCodeCommitAPI) MergePullRequestByThreeWayRequest(arg0 *codecommit.MergePullRequestByThreeWayInput) (*request.Request, *codecommit.MergePullRequestByThreeWayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePullRequestByThreeWayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.MergePullRequestByThreeWayOutput)
	return ret0, ret1
}

// MergePullRequestByThreeWayRequest indicates an expected call of MergePullRequestByThreeWayRequest
func (mr *MockCodeCommitAPIMockRecorder) MergePullRequestByThreeWayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequestByThreeWayRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergePullRequestByThreeWayRequest), arg0)
}

// MergePullRequestByThreeWayWithContext mocks base method
func (m *MockCodeCommitAPI) MergePullRequestByThreeWayWithContext(arg0 context.Context, arg1 *codecommit.MergePullRequestByThreeWayInput, arg2 ...request.Option) (*codecommit.MergePullRequestByThreeWayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergePullRequestByThreeWayWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.MergePullRequestByThreeWayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergePullRequestByThreeWayWithContext indicates an expected call of MergePullRequestByThreeWayWithContext
func (mr *MockCodeCommitAPIMockRecorder) MergePullRequestByThreeWayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequestByThreeWayWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).MergePullRequestByThreeWayWithContext), varargs...)
}

// PostCommentForComparedCommit mocks base method
func (m *MockCodeCommitAPI) PostCommentForComparedCommit(arg0 *codecommit.PostCommentForComparedCommitInput) (*codecommit.PostCommentForComparedCommitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCommentForComparedCommit", arg0)
	ret0, _ := ret[0].(*codecommit.PostCommentForComparedCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCommentForComparedCommit indicates an expected call of PostCommentForComparedCommit
func (mr *MockCodeCommitAPIMockRecorder) PostCommentForComparedCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommentForComparedCommit", reflect.TypeOf((*MockCodeCommitAPI)(nil).PostCommentForComparedCommit), arg0)
}

// PostCommentForComparedCommitRequest mocks base method
func (m *MockCodeCommitAPI) PostCommentForComparedCommitRequest(arg0 *codecommit.PostCommentForComparedCommitInput) (*request.Request, *codecommit.PostCommentForComparedCommitOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCommentForComparedCommitRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.PostCommentForComparedCommitOutput)
	return ret0, ret1
}

// PostCommentForComparedCommitRequest indicates an expected call of PostCommentForComparedCommitRequest
func (mr *MockCodeCommitAPIMockRecorder) PostCommentForComparedCommitRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommentForComparedCommitRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).PostCommentForComparedCommitRequest), arg0)
}

// PostCommentForComparedCommitWithContext mocks base method
func (m *MockCodeCommitAPI) PostCommentForComparedCommitWithContext(arg0 context.Context, arg1 *codecommit.PostCommentForComparedCommitInput, arg2 ...request.Option) (*codecommit.PostCommentForComparedCommitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostCommentForComparedCommitWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.PostCommentForComparedCommitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCommentForComparedCommitWithContext indicates an expected call of PostCommentForComparedCommitWithContext
func (mr *MockCodeCommitAPIMockRecorder) PostCommentForComparedCommitWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommentForComparedCommitWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).PostCommentForComparedCommitWithContext), varargs...)
}

// PostCommentForPullRequest mocks base method
func (m *MockCodeCommitAPI) PostCommentForPullRequest(arg0 *codecommit.PostCommentForPullRequestInput) (*codecommit.PostCommentForPullRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCommentForPullRequest", arg0)
	ret0, _ := ret[0].(*codecommit.PostCommentForPullRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCommentForPullRequest indicates an expected call of PostCommentForPullRequest
func (mr *MockCodeCommitAPIMockRecorder) PostCommentForPullRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommentForPullRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).PostCommentForPullRequest), arg0)
}

// PostCommentForPullRequestRequest mocks base method
func (m *MockCodeCommitAPI) PostCommentForPullRequestRequest(arg0 *codecommit.PostCommentForPullRequestInput) (*request.Request, *codecommit.PostCommentForPullRequestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCommentForPullRequestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.PostCommentForPullRequestOutput)
	return ret0, ret1
}

// PostCommentForPullRequestRequest indicates an expected call of PostCommentForPullRequestRequest
func (mr *MockCodeCommitAPIMockRecorder) PostCommentForPullRequestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommentForPullRequestRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).PostCommentForPullRequestRequest), arg0)
}

// PostCommentForPullRequestWithContext mocks base method
func (m *MockCodeCommitAPI) PostCommentForPullRequestWithContext(arg0 context.Context, arg1 *codecommit.PostCommentForPullRequestInput, arg2 ...request.Option) (*codecommit.PostCommentForPullRequestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostCommentForPullRequestWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.PostCommentForPullRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCommentForPullRequestWithContext indicates an expected call of PostCommentForPullRequestWithContext
func (mr *MockCodeCommitAPIMockRecorder) PostCommentForPullRequestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommentForPullRequestWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).PostCommentForPullRequestWithContext), varargs...)
}

// PostCommentReply mocks base method
func (m *MockCodeCommitAPI) PostCommentReply(arg0 *codecommit.PostCommentReplyInput) (*codecommit.PostCommentReplyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCommentReply", arg0)
	ret0, _ := ret[0].(*codecommit.PostCommentReplyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCommentReply indicates an expected call of PostCommentReply
func (mr *MockCodeCommitAPIMockRecorder) PostCommentReply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommentReply", reflect.TypeOf((*MockCodeCommitAPI)(nil).PostCommentReply), arg0)
}

// PostCommentReplyRequest mocks base method
func (m *MockCodeCommitAPI) PostCommentReplyRequest(arg0 *codecommit.PostCommentReplyInput) (*request.Request, *codecommit.PostCommentReplyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCommentReplyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.PostCommentReplyOutput)
	return ret0, ret1
}

// PostCommentReplyRequest indicates an expected call of PostCommentReplyRequest
func (mr *MockCodeCommitAPIMockRecorder) PostCommentReplyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommentReplyRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).PostCommentReplyRequest), arg0)
}

// PostCommentReplyWithContext mocks base method
func (m *MockCodeCommitAPI) PostCommentReplyWithContext(arg0 context.Context, arg1 *codecommit.PostCommentReplyInput, arg2 ...request.Option) (*codecommit.PostCommentReplyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostCommentReplyWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.PostCommentReplyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCommentReplyWithContext indicates an expected call of PostCommentReplyWithContext
func (mr *MockCodeCommitAPIMockRecorder) PostCommentReplyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCommentReplyWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).PostCommentReplyWithContext), varargs...)
}

// PutFile mocks base method
func (m *MockCodeCommitAPI) PutFile(arg0 *codecommit.PutFileInput) (*codecommit.PutFileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFile", arg0)
	ret0, _ := ret[0].(*codecommit.PutFileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFile indicates an expected call of PutFile
func (mr *MockCodeCommitAPIMockRecorder) PutFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFile", reflect.TypeOf((*MockCodeCommitAPI)(nil).PutFile), arg0)
}

// PutFileRequest mocks base method
func (m *MockCodeCommitAPI) PutFileRequest(arg0 *codecommit.PutFileInput) (*request.Request, *codecommit.PutFileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.PutFileOutput)
	return ret0, ret1
}

// PutFileRequest indicates an expected call of PutFileRequest
func (mr *MockCodeCommitAPIMockRecorder) PutFileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).PutFileRequest), arg0)
}

// PutFileWithContext mocks base method
func (m *MockCodeCommitAPI) PutFileWithContext(arg0 context.Context, arg1 *codecommit.PutFileInput, arg2 ...request.Option) (*codecommit.PutFileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutFileWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.PutFileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFileWithContext indicates an expected call of PutFileWithContext
func (mr *MockCodeCommitAPIMockRecorder) PutFileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).PutFileWithContext), varargs...)
}

// PutRepositoryTriggers mocks base method
func (m *MockCodeCommitAPI) PutRepositoryTriggers(arg0 *codecommit.PutRepositoryTriggersInput) (*codecommit.PutRepositoryTriggersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRepositoryTriggers", arg0)
	ret0, _ := ret[0].(*codecommit.PutRepositoryTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRepositoryTriggers indicates an expected call of PutRepositoryTriggers
func (mr *MockCodeCommitAPIMockRecorder) PutRepositoryTriggers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRepositoryTriggers", reflect.TypeOf((*MockCodeCommitAPI)(nil).PutRepositoryTriggers), arg0)
}

// PutRepositoryTriggersRequest mocks base method
func (m *MockCodeCommitAPI) PutRepositoryTriggersRequest(arg0 *codecommit.PutRepositoryTriggersInput) (*request.Request, *codecommit.PutRepositoryTriggersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRepositoryTriggersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.PutRepositoryTriggersOutput)
	return ret0, ret1
}

// PutRepositoryTriggersRequest indicates an expected call of PutRepositoryTriggersRequest
func (mr *MockCodeCommitAPIMockRecorder) PutRepositoryTriggersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRepositoryTriggersRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).PutRepositoryTriggersRequest), arg0)
}

// PutRepositoryTriggersWithContext mocks base method
func (m *MockCodeCommitAPI) PutRepositoryTriggersWithContext(arg0 context.Context, arg1 *codecommit.PutRepositoryTriggersInput, arg2 ...request.Option) (*codecommit.PutRepositoryTriggersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRepositoryTriggersWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.PutRepositoryTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRepositoryTriggersWithContext indicates an expected call of PutRepositoryTriggersWithContext
func (mr *MockCodeCommitAPIMockRecorder) PutRepositoryTriggersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRepositoryTriggersWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).PutRepositoryTriggersWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCodeCommitAPI) TagResource(arg0 *codecommit.TagResourceInput) (*codecommit.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*codecommit.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCodeCommitAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCodeCommitAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCodeCommitAPI) TagResourceRequest(arg0 *codecommit.TagResourceInput) (*request.Request, *codecommit.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCodeCommitAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCodeCommitAPI) TagResourceWithContext(arg0 context.Context, arg1 *codecommit.TagResourceInput, arg2 ...request.Option) (*codecommit.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCodeCommitAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).TagResourceWithContext), varargs...)
}

// TestRepositoryTriggers mocks base method
func (m *MockCodeCommitAPI) TestRepositoryTriggers(arg0 *codecommit.TestRepositoryTriggersInput) (*codecommit.TestRepositoryTriggersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestRepositoryTriggers", arg0)
	ret0, _ := ret[0].(*codecommit.TestRepositoryTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestRepositoryTriggers indicates an expected call of TestRepositoryTriggers
func (mr *MockCodeCommitAPIMockRecorder) TestRepositoryTriggers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRepositoryTriggers", reflect.TypeOf((*MockCodeCommitAPI)(nil).TestRepositoryTriggers), arg0)
}

// TestRepositoryTriggersRequest mocks base method
func (m *MockCodeCommitAPI) TestRepositoryTriggersRequest(arg0 *codecommit.TestRepositoryTriggersInput) (*request.Request, *codecommit.TestRepositoryTriggersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestRepositoryTriggersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.TestRepositoryTriggersOutput)
	return ret0, ret1
}

// TestRepositoryTriggersRequest indicates an expected call of TestRepositoryTriggersRequest
func (mr *MockCodeCommitAPIMockRecorder) TestRepositoryTriggersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRepositoryTriggersRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).TestRepositoryTriggersRequest), arg0)
}

// TestRepositoryTriggersWithContext mocks base method
func (m *MockCodeCommitAPI) TestRepositoryTriggersWithContext(arg0 context.Context, arg1 *codecommit.TestRepositoryTriggersInput, arg2 ...request.Option) (*codecommit.TestRepositoryTriggersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestRepositoryTriggersWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.TestRepositoryTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestRepositoryTriggersWithContext indicates an expected call of TestRepositoryTriggersWithContext
func (mr *MockCodeCommitAPIMockRecorder) TestRepositoryTriggersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRepositoryTriggersWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).TestRepositoryTriggersWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCodeCommitAPI) UntagResource(arg0 *codecommit.UntagResourceInput) (*codecommit.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*codecommit.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCodeCommitAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCodeCommitAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCodeCommitAPI) UntagResourceRequest(arg0 *codecommit.UntagResourceInput) (*request.Request, *codecommit.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCodeCommitAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCodeCommitAPI) UntagResourceWithContext(arg0 context.Context, arg1 *codecommit.UntagResourceInput, arg2 ...request.Option) (*codecommit.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCodeCommitAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateComment mocks base method
func (m *MockCodeCommitAPI) UpdateComment(arg0 *codecommit.UpdateCommentInput) (*codecommit.UpdateCommentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0)
	ret0, _ := ret[0].(*codecommit.UpdateCommentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment
func (mr *MockCodeCommitAPIMockRecorder) UpdateComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateComment), arg0)
}

// UpdateCommentRequest mocks base method
func (m *MockCodeCommitAPI) UpdateCommentRequest(arg0 *codecommit.UpdateCommentInput) (*request.Request, *codecommit.UpdateCommentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.UpdateCommentOutput)
	return ret0, ret1
}

// UpdateCommentRequest indicates an expected call of UpdateCommentRequest
func (mr *MockCodeCommitAPIMockRecorder) UpdateCommentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommentRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateCommentRequest), arg0)
}

// UpdateCommentWithContext mocks base method
func (m *MockCodeCommitAPI) UpdateCommentWithContext(arg0 context.Context, arg1 *codecommit.UpdateCommentInput, arg2 ...request.Option) (*codecommit.UpdateCommentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCommentWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.UpdateCommentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCommentWithContext indicates an expected call of UpdateCommentWithContext
func (mr *MockCodeCommitAPIMockRecorder) UpdateCommentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommentWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateCommentWithContext), varargs...)
}

// UpdateDefaultBranch mocks base method
func (m *MockCodeCommitAPI) UpdateDefaultBranch(arg0 *codecommit.UpdateDefaultBranchInput) (*codecommit.UpdateDefaultBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDefaultBranch", arg0)
	ret0, _ := ret[0].(*codecommit.UpdateDefaultBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDefaultBranch indicates an expected call of UpdateDefaultBranch
func (mr *MockCodeCommitAPIMockRecorder) UpdateDefaultBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDefaultBranch", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateDefaultBranch), arg0)
}

// UpdateDefaultBranchRequest mocks base method
func (m *MockCodeCommitAPI) UpdateDefaultBranchRequest(arg0 *codecommit.UpdateDefaultBranchInput) (*request.Request, *codecommit.UpdateDefaultBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDefaultBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.UpdateDefaultBranchOutput)
	return ret0, ret1
}

// UpdateDefaultBranchRequest indicates an expected call of UpdateDefaultBranchRequest
func (mr *MockCodeCommitAPIMockRecorder) UpdateDefaultBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDefaultBranchRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateDefaultBranchRequest), arg0)
}

// UpdateDefaultBranchWithContext mocks base method
func (m *MockCodeCommitAPI) UpdateDefaultBranchWithContext(arg0 context.Context, arg1 *codecommit.UpdateDefaultBranchInput, arg2 ...request.Option) (*codecommit.UpdateDefaultBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDefaultBranchWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.UpdateDefaultBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDefaultBranchWithContext indicates an expected call of UpdateDefaultBranchWithContext
func (mr *MockCodeCommitAPIMockRecorder) UpdateDefaultBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDefaultBranchWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateDefaultBranchWithContext), varargs...)
}

// UpdatePullRequestDescription mocks base method
func (m *MockCodeCommitAPI) UpdatePullRequestDescription(arg0 *codecommit.UpdatePullRequestDescriptionInput) (*codecommit.UpdatePullRequestDescriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestDescription", arg0)
	ret0, _ := ret[0].(*codecommit.UpdatePullRequestDescriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestDescription indicates an expected call of UpdatePullRequestDescription
func (mr *MockCodeCommitAPIMockRecorder) UpdatePullRequestDescription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestDescription", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdatePullRequestDescription), arg0)
}

// UpdatePullRequestDescriptionRequest mocks base method
func (m *MockCodeCommitAPI) UpdatePullRequestDescriptionRequest(arg0 *codecommit.UpdatePullRequestDescriptionInput) (*request.Request, *codecommit.UpdatePullRequestDescriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestDescriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.UpdatePullRequestDescriptionOutput)
	return ret0, ret1
}

// UpdatePullRequestDescriptionRequest indicates an expected call of UpdatePullRequestDescriptionRequest
func (mr *MockCodeCommitAPIMockRecorder) UpdatePullRequestDescriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestDescriptionRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdatePullRequestDescriptionRequest), arg0)
}

// UpdatePullRequestDescriptionWithContext mocks base method
func (m *MockCodeCommitAPI) UpdatePullRequestDescriptionWithContext(arg0 context.Context, arg1 *codecommit.UpdatePullRequestDescriptionInput, arg2 ...request.Option) (*codecommit.UpdatePullRequestDescriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePullRequestDescriptionWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.UpdatePullRequestDescriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestDescriptionWithContext indicates an expected call of UpdatePullRequestDescriptionWithContext
func (mr *MockCodeCommitAPIMockRecorder) UpdatePullRequestDescriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestDescriptionWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdatePullRequestDescriptionWithContext), varargs...)
}

// UpdatePullRequestStatus mocks base method
func (m *MockCodeCommitAPI) UpdatePullRequestStatus(arg0 *codecommit.UpdatePullRequestStatusInput) (*codecommit.UpdatePullRequestStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestStatus", arg0)
	ret0, _ := ret[0].(*codecommit.UpdatePullRequestStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestStatus indicates an expected call of UpdatePullRequestStatus
func (mr *MockCodeCommitAPIMockRecorder) UpdatePullRequestStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestStatus", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdatePullRequestStatus), arg0)
}

// UpdatePullRequestStatusRequest mocks base method
func (m *MockCodeCommitAPI) UpdatePullRequestStatusRequest(arg0 *codecommit.UpdatePullRequestStatusInput) (*request.Request, *codecommit.UpdatePullRequestStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.UpdatePullRequestStatusOutput)
	return ret0, ret1
}

// UpdatePullRequestStatusRequest indicates an expected call of UpdatePullRequestStatusRequest
func (mr *MockCodeCommitAPIMockRecorder) UpdatePullRequestStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestStatusRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdatePullRequestStatusRequest), arg0)
}

// UpdatePullRequestStatusWithContext mocks base method
func (m *MockCodeCommitAPI) UpdatePullRequestStatusWithContext(arg0 context.Context, arg1 *codecommit.UpdatePullRequestStatusInput, arg2 ...request.Option) (*codecommit.UpdatePullRequestStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePullRequestStatusWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.UpdatePullRequestStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestStatusWithContext indicates an expected call of UpdatePullRequestStatusWithContext
func (mr *MockCodeCommitAPIMockRecorder) UpdatePullRequestStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestStatusWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdatePullRequestStatusWithContext), varargs...)
}

// UpdatePullRequestTitle mocks base method
func (m *MockCodeCommitAPI) UpdatePullRequestTitle(arg0 *codecommit.UpdatePullRequestTitleInput) (*codecommit.UpdatePullRequestTitleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestTitle", arg0)
	ret0, _ := ret[0].(*codecommit.UpdatePullRequestTitleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestTitle indicates an expected call of UpdatePullRequestTitle
func (mr *MockCodeCommitAPIMockRecorder) UpdatePullRequestTitle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestTitle", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdatePullRequestTitle), arg0)
}

// UpdatePullRequestTitleRequest mocks base method
func (m *MockCodeCommitAPI) UpdatePullRequestTitleRequest(arg0 *codecommit.UpdatePullRequestTitleInput) (*request.Request, *codecommit.UpdatePullRequestTitleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestTitleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.UpdatePullRequestTitleOutput)
	return ret0, ret1
}

// UpdatePullRequestTitleRequest indicates an expected call of UpdatePullRequestTitleRequest
func (mr *MockCodeCommitAPIMockRecorder) UpdatePullRequestTitleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestTitleRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdatePullRequestTitleRequest), arg0)
}

// UpdatePullRequestTitleWithContext mocks base method
func (m *MockCodeCommitAPI) UpdatePullRequestTitleWithContext(arg0 context.Context, arg1 *codecommit.UpdatePullRequestTitleInput, arg2 ...request.Option) (*codecommit.UpdatePullRequestTitleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePullRequestTitleWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.UpdatePullRequestTitleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestTitleWithContext indicates an expected call of UpdatePullRequestTitleWithContext
func (mr *MockCodeCommitAPIMockRecorder) UpdatePullRequestTitleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestTitleWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdatePullRequestTitleWithContext), varargs...)
}

// UpdateRepositoryDescription mocks base method
func (m *MockCodeCommitAPI) UpdateRepositoryDescription(arg0 *codecommit.UpdateRepositoryDescriptionInput) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryDescription", arg0)
	ret0, _ := ret[0].(*codecommit.UpdateRepositoryDescriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepositoryDescription indicates an expected call of UpdateRepositoryDescription
func (mr *MockCodeCommitAPIMockRecorder) UpdateRepositoryDescription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryDescription", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateRepositoryDescription), arg0)
}

// UpdateRepositoryDescriptionRequest mocks base method
func (m *MockCodeCommitAPI) UpdateRepositoryDescriptionRequest(arg0 *codecommit.UpdateRepositoryDescriptionInput) (*request.Request, *codecommit.UpdateRepositoryDescriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryDescriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.UpdateRepositoryDescriptionOutput)
	return ret0, ret1
}

// UpdateRepositoryDescriptionRequest indicates an expected call of UpdateRepositoryDescriptionRequest
func (mr *MockCodeCommitAPIMockRecorder) UpdateRepositoryDescriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryDescriptionRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateRepositoryDescriptionRequest), arg0)
}

// UpdateRepositoryDescriptionWithContext mocks base method
func (m *MockCodeCommitAPI) UpdateRepositoryDescriptionWithContext(arg0 context.Context, arg1 *codecommit.UpdateRepositoryDescriptionInput, arg2 ...request.Option) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRepositoryDescriptionWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.UpdateRepositoryDescriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepositoryDescriptionWithContext indicates an expected call of UpdateRepositoryDescriptionWithContext
func (mr *MockCodeCommitAPIMockRecorder) UpdateRepositoryDescriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryDescriptionWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateRepositoryDescriptionWithContext), varargs...)
}

// UpdateRepositoryName mocks base method
func (m *MockCodeCommitAPI) UpdateRepositoryName(arg0 *codecommit.UpdateRepositoryNameInput) (*codecommit.UpdateRepositoryNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryName", arg0)
	ret0, _ := ret[0].(*codecommit.UpdateRepositoryNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepositoryName indicates an expected call of UpdateRepositoryName
func (mr *MockCodeCommitAPIMockRecorder) UpdateRepositoryName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryName", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateRepositoryName), arg0)
}

// UpdateRepositoryNameRequest mocks base method
func (m *MockCodeCommitAPI) UpdateRepositoryNameRequest(arg0 *codecommit.UpdateRepositoryNameInput) (*request.Request, *codecommit.UpdateRepositoryNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codecommit.UpdateRepositoryNameOutput)
	return ret0, ret1
}

// UpdateRepositoryNameRequest indicates an expected call of UpdateRepositoryNameRequest
func (mr *MockCodeCommitAPIMockRecorder) UpdateRepositoryNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryNameRequest", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateRepositoryNameRequest), arg0)
}

// UpdateRepositoryNameWithContext mocks base method
func (m *MockCodeCommitAPI) UpdateRepositoryNameWithContext(arg0 context.Context, arg1 *codecommit.UpdateRepositoryNameInput, arg2 ...request.Option) (*codecommit.UpdateRepositoryNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRepositoryNameWithContext", varargs...)
	ret0, _ := ret[0].(*codecommit.UpdateRepositoryNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepositoryNameWithContext indicates an expected call of UpdateRepositoryNameWithContext
func (mr *MockCodeCommitAPIMockRecorder) UpdateRepositoryNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryNameWithContext", reflect.TypeOf((*MockCodeCommitAPI)(nil).UpdateRepositoryNameWithContext), varargs...)
}
