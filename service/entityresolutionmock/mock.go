// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/entityresolution/entityresolutioniface (interfaces: EntityResolutionAPI)

// Package entityresolutionmock is a generated GoMock package.
package entityresolutionmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	entityresolution "github.com/aws/aws-sdk-go/service/entityresolution"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEntityResolutionAPI is a mock of EntityResolutionAPI interface
type MockEntityResolutionAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEntityResolutionAPIMockRecorder
}

// MockEntityResolutionAPIMockRecorder is the mock recorder for MockEntityResolutionAPI
type MockEntityResolutionAPIMockRecorder struct {
	mock *MockEntityResolutionAPI
}

// NewMockEntityResolutionAPI creates a new mock instance
func NewMockEntityResolutionAPI(ctrl *gomock.Controller) *MockEntityResolutionAPI {
	mock := &MockEntityResolutionAPI{ctrl: ctrl}
	mock.recorder = &MockEntityResolutionAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntityResolutionAPI) EXPECT() *MockEntityResolutionAPIMockRecorder {
	return m.recorder
}

// CreateMatchingWorkflow mocks base method
func (m *MockEntityResolutionAPI) CreateMatchingWorkflow(arg0 *entityresolution.CreateMatchingWorkflowInput) (*entityresolution.CreateMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatchingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.CreateMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatchingWorkflow indicates an expected call of CreateMatchingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) CreateMatchingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateMatchingWorkflow), arg0)
}

// CreateMatchingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) CreateMatchingWorkflowRequest(arg0 *entityresolution.CreateMatchingWorkflowInput) (*request.Request, *entityresolution.CreateMatchingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatchingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.CreateMatchingWorkflowOutput)
	return ret0, ret1
}

// CreateMatchingWorkflowRequest indicates an expected call of CreateMatchingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) CreateMatchingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateMatchingWorkflowRequest), arg0)
}

// CreateMatchingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) CreateMatchingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.CreateMatchingWorkflowInput, arg2 ...request.Option) (*entityresolution.CreateMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMatchingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.CreateMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatchingWorkflowWithContext indicates an expected call of CreateMatchingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) CreateMatchingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateMatchingWorkflowWithContext), varargs...)
}

// CreateSchemaMapping mocks base method
func (m *MockEntityResolutionAPI) CreateSchemaMapping(arg0 *entityresolution.CreateSchemaMappingInput) (*entityresolution.CreateSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaMapping", arg0)
	ret0, _ := ret[0].(*entityresolution.CreateSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchemaMapping indicates an expected call of CreateSchemaMapping
func (mr *MockEntityResolutionAPIMockRecorder) CreateSchemaMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaMapping", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateSchemaMapping), arg0)
}

// CreateSchemaMappingRequest mocks base method
func (m *MockEntityResolutionAPI) CreateSchemaMappingRequest(arg0 *entityresolution.CreateSchemaMappingInput) (*request.Request, *entityresolution.CreateSchemaMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.CreateSchemaMappingOutput)
	return ret0, ret1
}

// CreateSchemaMappingRequest indicates an expected call of CreateSchemaMappingRequest
func (mr *MockEntityResolutionAPIMockRecorder) CreateSchemaMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaMappingRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateSchemaMappingRequest), arg0)
}

// CreateSchemaMappingWithContext mocks base method
func (m *MockEntityResolutionAPI) CreateSchemaMappingWithContext(arg0 context.Context, arg1 *entityresolution.CreateSchemaMappingInput, arg2 ...request.Option) (*entityresolution.CreateSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchemaMappingWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.CreateSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchemaMappingWithContext indicates an expected call of CreateSchemaMappingWithContext
func (mr *MockEntityResolutionAPIMockRecorder) CreateSchemaMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaMappingWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateSchemaMappingWithContext), varargs...)
}

// DeleteMatchingWorkflow mocks base method
func (m *MockEntityResolutionAPI) DeleteMatchingWorkflow(arg0 *entityresolution.DeleteMatchingWorkflowInput) (*entityresolution.DeleteMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMatchingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.DeleteMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMatchingWorkflow indicates an expected call of DeleteMatchingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) DeleteMatchingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteMatchingWorkflow), arg0)
}

// DeleteMatchingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) DeleteMatchingWorkflowRequest(arg0 *entityresolution.DeleteMatchingWorkflowInput) (*request.Request, *entityresolution.DeleteMatchingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMatchingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.DeleteMatchingWorkflowOutput)
	return ret0, ret1
}

// DeleteMatchingWorkflowRequest indicates an expected call of DeleteMatchingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) DeleteMatchingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteMatchingWorkflowRequest), arg0)
}

// DeleteMatchingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) DeleteMatchingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.DeleteMatchingWorkflowInput, arg2 ...request.Option) (*entityresolution.DeleteMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMatchingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.DeleteMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMatchingWorkflowWithContext indicates an expected call of DeleteMatchingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) DeleteMatchingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteMatchingWorkflowWithContext), varargs...)
}

// DeleteSchemaMapping mocks base method
func (m *MockEntityResolutionAPI) DeleteSchemaMapping(arg0 *entityresolution.DeleteSchemaMappingInput) (*entityresolution.DeleteSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaMapping", arg0)
	ret0, _ := ret[0].(*entityresolution.DeleteSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaMapping indicates an expected call of DeleteSchemaMapping
func (mr *MockEntityResolutionAPIMockRecorder) DeleteSchemaMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaMapping", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteSchemaMapping), arg0)
}

// DeleteSchemaMappingRequest mocks base method
func (m *MockEntityResolutionAPI) DeleteSchemaMappingRequest(arg0 *entityresolution.DeleteSchemaMappingInput) (*request.Request, *entityresolution.DeleteSchemaMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.DeleteSchemaMappingOutput)
	return ret0, ret1
}

// DeleteSchemaMappingRequest indicates an expected call of DeleteSchemaMappingRequest
func (mr *MockEntityResolutionAPIMockRecorder) DeleteSchemaMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaMappingRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteSchemaMappingRequest), arg0)
}

// DeleteSchemaMappingWithContext mocks base method
func (m *MockEntityResolutionAPI) DeleteSchemaMappingWithContext(arg0 context.Context, arg1 *entityresolution.DeleteSchemaMappingInput, arg2 ...request.Option) (*entityresolution.DeleteSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchemaMappingWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.DeleteSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaMappingWithContext indicates an expected call of DeleteSchemaMappingWithContext
func (mr *MockEntityResolutionAPIMockRecorder) DeleteSchemaMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaMappingWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteSchemaMappingWithContext), varargs...)
}

// GetMatchId mocks base method
func (m *MockEntityResolutionAPI) GetMatchId(arg0 *entityresolution.GetMatchIdInput) (*entityresolution.GetMatchIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchId", arg0)
	ret0, _ := ret[0].(*entityresolution.GetMatchIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchId indicates an expected call of GetMatchId
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchId", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchId), arg0)
}

// GetMatchIdRequest mocks base method
func (m *MockEntityResolutionAPI) GetMatchIdRequest(arg0 *entityresolution.GetMatchIdInput) (*request.Request, *entityresolution.GetMatchIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetMatchIdOutput)
	return ret0, ret1
}

// GetMatchIdRequest indicates an expected call of GetMatchIdRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchIdRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchIdRequest), arg0)
}

// GetMatchIdWithContext mocks base method
func (m *MockEntityResolutionAPI) GetMatchIdWithContext(arg0 context.Context, arg1 *entityresolution.GetMatchIdInput, arg2 ...request.Option) (*entityresolution.GetMatchIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMatchIdWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetMatchIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchIdWithContext indicates an expected call of GetMatchIdWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchIdWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchIdWithContext), varargs...)
}

// GetMatchingJob mocks base method
func (m *MockEntityResolutionAPI) GetMatchingJob(arg0 *entityresolution.GetMatchingJobInput) (*entityresolution.GetMatchingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingJob", arg0)
	ret0, _ := ret[0].(*entityresolution.GetMatchingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingJob indicates an expected call of GetMatchingJob
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingJob", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingJob), arg0)
}

// GetMatchingJobRequest mocks base method
func (m *MockEntityResolutionAPI) GetMatchingJobRequest(arg0 *entityresolution.GetMatchingJobInput) (*request.Request, *entityresolution.GetMatchingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetMatchingJobOutput)
	return ret0, ret1
}

// GetMatchingJobRequest indicates an expected call of GetMatchingJobRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingJobRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingJobRequest), arg0)
}

// GetMatchingJobWithContext mocks base method
func (m *MockEntityResolutionAPI) GetMatchingJobWithContext(arg0 context.Context, arg1 *entityresolution.GetMatchingJobInput, arg2 ...request.Option) (*entityresolution.GetMatchingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMatchingJobWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetMatchingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingJobWithContext indicates an expected call of GetMatchingJobWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingJobWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingJobWithContext), varargs...)
}

// GetMatchingWorkflow mocks base method
func (m *MockEntityResolutionAPI) GetMatchingWorkflow(arg0 *entityresolution.GetMatchingWorkflowInput) (*entityresolution.GetMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.GetMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingWorkflow indicates an expected call of GetMatchingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingWorkflow), arg0)
}

// GetMatchingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) GetMatchingWorkflowRequest(arg0 *entityresolution.GetMatchingWorkflowInput) (*request.Request, *entityresolution.GetMatchingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetMatchingWorkflowOutput)
	return ret0, ret1
}

// GetMatchingWorkflowRequest indicates an expected call of GetMatchingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingWorkflowRequest), arg0)
}

// GetMatchingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) GetMatchingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.GetMatchingWorkflowInput, arg2 ...request.Option) (*entityresolution.GetMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMatchingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingWorkflowWithContext indicates an expected call of GetMatchingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingWorkflowWithContext), varargs...)
}

// GetSchemaMapping mocks base method
func (m *MockEntityResolutionAPI) GetSchemaMapping(arg0 *entityresolution.GetSchemaMappingInput) (*entityresolution.GetSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaMapping", arg0)
	ret0, _ := ret[0].(*entityresolution.GetSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaMapping indicates an expected call of GetSchemaMapping
func (mr *MockEntityResolutionAPIMockRecorder) GetSchemaMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaMapping", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetSchemaMapping), arg0)
}

// GetSchemaMappingRequest mocks base method
func (m *MockEntityResolutionAPI) GetSchemaMappingRequest(arg0 *entityresolution.GetSchemaMappingInput) (*request.Request, *entityresolution.GetSchemaMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetSchemaMappingOutput)
	return ret0, ret1
}

// GetSchemaMappingRequest indicates an expected call of GetSchemaMappingRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetSchemaMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaMappingRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetSchemaMappingRequest), arg0)
}

// GetSchemaMappingWithContext mocks base method
func (m *MockEntityResolutionAPI) GetSchemaMappingWithContext(arg0 context.Context, arg1 *entityresolution.GetSchemaMappingInput, arg2 ...request.Option) (*entityresolution.GetSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaMappingWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaMappingWithContext indicates an expected call of GetSchemaMappingWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetSchemaMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaMappingWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetSchemaMappingWithContext), varargs...)
}

// ListMatchingJobs mocks base method
func (m *MockEntityResolutionAPI) ListMatchingJobs(arg0 *entityresolution.ListMatchingJobsInput) (*entityresolution.ListMatchingJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingJobs", arg0)
	ret0, _ := ret[0].(*entityresolution.ListMatchingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchingJobs indicates an expected call of ListMatchingJobs
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingJobs", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingJobs), arg0)
}

// ListMatchingJobsPages mocks base method
func (m *MockEntityResolutionAPI) ListMatchingJobsPages(arg0 *entityresolution.ListMatchingJobsInput, arg1 func(*entityresolution.ListMatchingJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMatchingJobsPages indicates an expected call of ListMatchingJobsPages
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingJobsPages", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingJobsPages), arg0, arg1)
}

// ListMatchingJobsPagesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListMatchingJobsPagesWithContext(arg0 context.Context, arg1 *entityresolution.ListMatchingJobsInput, arg2 func(*entityresolution.ListMatchingJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchingJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMatchingJobsPagesWithContext indicates an expected call of ListMatchingJobsPagesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingJobsPagesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingJobsPagesWithContext), varargs...)
}

// ListMatchingJobsRequest mocks base method
func (m *MockEntityResolutionAPI) ListMatchingJobsRequest(arg0 *entityresolution.ListMatchingJobsInput) (*request.Request, *entityresolution.ListMatchingJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListMatchingJobsOutput)
	return ret0, ret1
}

// ListMatchingJobsRequest indicates an expected call of ListMatchingJobsRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingJobsRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingJobsRequest), arg0)
}

// ListMatchingJobsWithContext mocks base method
func (m *MockEntityResolutionAPI) ListMatchingJobsWithContext(arg0 context.Context, arg1 *entityresolution.ListMatchingJobsInput, arg2 ...request.Option) (*entityresolution.ListMatchingJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchingJobsWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListMatchingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchingJobsWithContext indicates an expected call of ListMatchingJobsWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingJobsWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingJobsWithContext), varargs...)
}

// ListMatchingWorkflows mocks base method
func (m *MockEntityResolutionAPI) ListMatchingWorkflows(arg0 *entityresolution.ListMatchingWorkflowsInput) (*entityresolution.ListMatchingWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingWorkflows", arg0)
	ret0, _ := ret[0].(*entityresolution.ListMatchingWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchingWorkflows indicates an expected call of ListMatchingWorkflows
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingWorkflows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingWorkflows", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingWorkflows), arg0)
}

// ListMatchingWorkflowsPages mocks base method
func (m *MockEntityResolutionAPI) ListMatchingWorkflowsPages(arg0 *entityresolution.ListMatchingWorkflowsInput, arg1 func(*entityresolution.ListMatchingWorkflowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingWorkflowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMatchingWorkflowsPages indicates an expected call of ListMatchingWorkflowsPages
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingWorkflowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingWorkflowsPages", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingWorkflowsPages), arg0, arg1)
}

// ListMatchingWorkflowsPagesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListMatchingWorkflowsPagesWithContext(arg0 context.Context, arg1 *entityresolution.ListMatchingWorkflowsInput, arg2 func(*entityresolution.ListMatchingWorkflowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchingWorkflowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMatchingWorkflowsPagesWithContext indicates an expected call of ListMatchingWorkflowsPagesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingWorkflowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingWorkflowsPagesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingWorkflowsPagesWithContext), varargs...)
}

// ListMatchingWorkflowsRequest mocks base method
func (m *MockEntityResolutionAPI) ListMatchingWorkflowsRequest(arg0 *entityresolution.ListMatchingWorkflowsInput) (*request.Request, *entityresolution.ListMatchingWorkflowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingWorkflowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListMatchingWorkflowsOutput)
	return ret0, ret1
}

// ListMatchingWorkflowsRequest indicates an expected call of ListMatchingWorkflowsRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingWorkflowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingWorkflowsRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingWorkflowsRequest), arg0)
}

// ListMatchingWorkflowsWithContext mocks base method
func (m *MockEntityResolutionAPI) ListMatchingWorkflowsWithContext(arg0 context.Context, arg1 *entityresolution.ListMatchingWorkflowsInput, arg2 ...request.Option) (*entityresolution.ListMatchingWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchingWorkflowsWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListMatchingWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchingWorkflowsWithContext indicates an expected call of ListMatchingWorkflowsWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingWorkflowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingWorkflowsWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingWorkflowsWithContext), varargs...)
}

// ListSchemaMappings mocks base method
func (m *MockEntityResolutionAPI) ListSchemaMappings(arg0 *entityresolution.ListSchemaMappingsInput) (*entityresolution.ListSchemaMappingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaMappings", arg0)
	ret0, _ := ret[0].(*entityresolution.ListSchemaMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaMappings indicates an expected call of ListSchemaMappings
func (mr *MockEntityResolutionAPIMockRecorder) ListSchemaMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaMappings", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListSchemaMappings), arg0)
}

// ListSchemaMappingsPages mocks base method
func (m *MockEntityResolutionAPI) ListSchemaMappingsPages(arg0 *entityresolution.ListSchemaMappingsInput, arg1 func(*entityresolution.ListSchemaMappingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaMappingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemaMappingsPages indicates an expected call of ListSchemaMappingsPages
func (mr *MockEntityResolutionAPIMockRecorder) ListSchemaMappingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaMappingsPages", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListSchemaMappingsPages), arg0, arg1)
}

// ListSchemaMappingsPagesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListSchemaMappingsPagesWithContext(arg0 context.Context, arg1 *entityresolution.ListSchemaMappingsInput, arg2 func(*entityresolution.ListSchemaMappingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemaMappingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemaMappingsPagesWithContext indicates an expected call of ListSchemaMappingsPagesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListSchemaMappingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaMappingsPagesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListSchemaMappingsPagesWithContext), varargs...)
}

// ListSchemaMappingsRequest mocks base method
func (m *MockEntityResolutionAPI) ListSchemaMappingsRequest(arg0 *entityresolution.ListSchemaMappingsInput) (*request.Request, *entityresolution.ListSchemaMappingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaMappingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListSchemaMappingsOutput)
	return ret0, ret1
}

// ListSchemaMappingsRequest indicates an expected call of ListSchemaMappingsRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListSchemaMappingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaMappingsRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListSchemaMappingsRequest), arg0)
}

// ListSchemaMappingsWithContext mocks base method
func (m *MockEntityResolutionAPI) ListSchemaMappingsWithContext(arg0 context.Context, arg1 *entityresolution.ListSchemaMappingsInput, arg2 ...request.Option) (*entityresolution.ListSchemaMappingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemaMappingsWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListSchemaMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaMappingsWithContext indicates an expected call of ListSchemaMappingsWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListSchemaMappingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaMappingsWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListSchemaMappingsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockEntityResolutionAPI) ListTagsForResource(arg0 *entityresolution.ListTagsForResourceInput) (*entityresolution.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*entityresolution.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockEntityResolutionAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockEntityResolutionAPI) ListTagsForResourceRequest(arg0 *entityresolution.ListTagsForResourceInput) (*request.Request, *entityresolution.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockEntityResolutionAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *entityresolution.ListTagsForResourceInput, arg2 ...request.Option) (*entityresolution.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartMatchingJob mocks base method
func (m *MockEntityResolutionAPI) StartMatchingJob(arg0 *entityresolution.StartMatchingJobInput) (*entityresolution.StartMatchingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMatchingJob", arg0)
	ret0, _ := ret[0].(*entityresolution.StartMatchingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMatchingJob indicates an expected call of StartMatchingJob
func (mr *MockEntityResolutionAPIMockRecorder) StartMatchingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMatchingJob", reflect.TypeOf((*MockEntityResolutionAPI)(nil).StartMatchingJob), arg0)
}

// StartMatchingJobRequest mocks base method
func (m *MockEntityResolutionAPI) StartMatchingJobRequest(arg0 *entityresolution.StartMatchingJobInput) (*request.Request, *entityresolution.StartMatchingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMatchingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.StartMatchingJobOutput)
	return ret0, ret1
}

// StartMatchingJobRequest indicates an expected call of StartMatchingJobRequest
func (mr *MockEntityResolutionAPIMockRecorder) StartMatchingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMatchingJobRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).StartMatchingJobRequest), arg0)
}

// StartMatchingJobWithContext mocks base method
func (m *MockEntityResolutionAPI) StartMatchingJobWithContext(arg0 context.Context, arg1 *entityresolution.StartMatchingJobInput, arg2 ...request.Option) (*entityresolution.StartMatchingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMatchingJobWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.StartMatchingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMatchingJobWithContext indicates an expected call of StartMatchingJobWithContext
func (mr *MockEntityResolutionAPIMockRecorder) StartMatchingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMatchingJobWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).StartMatchingJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockEntityResolutionAPI) TagResource(arg0 *entityresolution.TagResourceInput) (*entityresolution.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*entityresolution.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockEntityResolutionAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockEntityResolutionAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockEntityResolutionAPI) TagResourceRequest(arg0 *entityresolution.TagResourceInput) (*request.Request, *entityresolution.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockEntityResolutionAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockEntityResolutionAPI) TagResourceWithContext(arg0 context.Context, arg1 *entityresolution.TagResourceInput, arg2 ...request.Option) (*entityresolution.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockEntityResolutionAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockEntityResolutionAPI) UntagResource(arg0 *entityresolution.UntagResourceInput) (*entityresolution.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*entityresolution.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockEntityResolutionAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockEntityResolutionAPI) UntagResourceRequest(arg0 *entityresolution.UntagResourceInput) (*request.Request, *entityresolution.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockEntityResolutionAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockEntityResolutionAPI) UntagResourceWithContext(arg0 context.Context, arg1 *entityresolution.UntagResourceInput, arg2 ...request.Option) (*entityresolution.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockEntityResolutionAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateMatchingWorkflow mocks base method
func (m *MockEntityResolutionAPI) UpdateMatchingWorkflow(arg0 *entityresolution.UpdateMatchingWorkflowInput) (*entityresolution.UpdateMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.UpdateMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMatchingWorkflow indicates an expected call of UpdateMatchingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) UpdateMatchingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateMatchingWorkflow), arg0)
}

// UpdateMatchingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) UpdateMatchingWorkflowRequest(arg0 *entityresolution.UpdateMatchingWorkflowInput) (*request.Request, *entityresolution.UpdateMatchingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.UpdateMatchingWorkflowOutput)
	return ret0, ret1
}

// UpdateMatchingWorkflowRequest indicates an expected call of UpdateMatchingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) UpdateMatchingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateMatchingWorkflowRequest), arg0)
}

// UpdateMatchingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) UpdateMatchingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.UpdateMatchingWorkflowInput, arg2 ...request.Option) (*entityresolution.UpdateMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMatchingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.UpdateMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMatchingWorkflowWithContext indicates an expected call of UpdateMatchingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) UpdateMatchingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateMatchingWorkflowWithContext), varargs...)
}
