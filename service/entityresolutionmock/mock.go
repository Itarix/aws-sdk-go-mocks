// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/entityresolution/entityresolutioniface (interfaces: EntityResolutionAPI)

// Package entityresolutionmock is a generated GoMock package.
package entityresolutionmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	entityresolution "github.com/aws/aws-sdk-go/service/entityresolution"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEntityResolutionAPI is a mock of EntityResolutionAPI interface
type MockEntityResolutionAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEntityResolutionAPIMockRecorder
}

// MockEntityResolutionAPIMockRecorder is the mock recorder for MockEntityResolutionAPI
type MockEntityResolutionAPIMockRecorder struct {
	mock *MockEntityResolutionAPI
}

// NewMockEntityResolutionAPI creates a new mock instance
func NewMockEntityResolutionAPI(ctrl *gomock.Controller) *MockEntityResolutionAPI {
	mock := &MockEntityResolutionAPI{ctrl: ctrl}
	mock.recorder = &MockEntityResolutionAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntityResolutionAPI) EXPECT() *MockEntityResolutionAPIMockRecorder {
	return m.recorder
}

// AddPolicyStatement mocks base method
func (m *MockEntityResolutionAPI) AddPolicyStatement(arg0 *entityresolution.AddPolicyStatementInput) (*entityresolution.AddPolicyStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicyStatement", arg0)
	ret0, _ := ret[0].(*entityresolution.AddPolicyStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPolicyStatement indicates an expected call of AddPolicyStatement
func (mr *MockEntityResolutionAPIMockRecorder) AddPolicyStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicyStatement", reflect.TypeOf((*MockEntityResolutionAPI)(nil).AddPolicyStatement), arg0)
}

// AddPolicyStatementRequest mocks base method
func (m *MockEntityResolutionAPI) AddPolicyStatementRequest(arg0 *entityresolution.AddPolicyStatementInput) (*request.Request, *entityresolution.AddPolicyStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicyStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.AddPolicyStatementOutput)
	return ret0, ret1
}

// AddPolicyStatementRequest indicates an expected call of AddPolicyStatementRequest
func (mr *MockEntityResolutionAPIMockRecorder) AddPolicyStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicyStatementRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).AddPolicyStatementRequest), arg0)
}

// AddPolicyStatementWithContext mocks base method
func (m *MockEntityResolutionAPI) AddPolicyStatementWithContext(arg0 context.Context, arg1 *entityresolution.AddPolicyStatementInput, arg2 ...request.Option) (*entityresolution.AddPolicyStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPolicyStatementWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.AddPolicyStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPolicyStatementWithContext indicates an expected call of AddPolicyStatementWithContext
func (mr *MockEntityResolutionAPIMockRecorder) AddPolicyStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicyStatementWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).AddPolicyStatementWithContext), varargs...)
}

// BatchDeleteUniqueId mocks base method
func (m *MockEntityResolutionAPI) BatchDeleteUniqueId(arg0 *entityresolution.BatchDeleteUniqueIdInput) (*entityresolution.BatchDeleteUniqueIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteUniqueId", arg0)
	ret0, _ := ret[0].(*entityresolution.BatchDeleteUniqueIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteUniqueId indicates an expected call of BatchDeleteUniqueId
func (mr *MockEntityResolutionAPIMockRecorder) BatchDeleteUniqueId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteUniqueId", reflect.TypeOf((*MockEntityResolutionAPI)(nil).BatchDeleteUniqueId), arg0)
}

// BatchDeleteUniqueIdRequest mocks base method
func (m *MockEntityResolutionAPI) BatchDeleteUniqueIdRequest(arg0 *entityresolution.BatchDeleteUniqueIdInput) (*request.Request, *entityresolution.BatchDeleteUniqueIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteUniqueIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.BatchDeleteUniqueIdOutput)
	return ret0, ret1
}

// BatchDeleteUniqueIdRequest indicates an expected call of BatchDeleteUniqueIdRequest
func (mr *MockEntityResolutionAPIMockRecorder) BatchDeleteUniqueIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteUniqueIdRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).BatchDeleteUniqueIdRequest), arg0)
}

// BatchDeleteUniqueIdWithContext mocks base method
func (m *MockEntityResolutionAPI) BatchDeleteUniqueIdWithContext(arg0 context.Context, arg1 *entityresolution.BatchDeleteUniqueIdInput, arg2 ...request.Option) (*entityresolution.BatchDeleteUniqueIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteUniqueIdWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.BatchDeleteUniqueIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteUniqueIdWithContext indicates an expected call of BatchDeleteUniqueIdWithContext
func (mr *MockEntityResolutionAPIMockRecorder) BatchDeleteUniqueIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteUniqueIdWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).BatchDeleteUniqueIdWithContext), varargs...)
}

// CreateIdMappingWorkflow mocks base method
func (m *MockEntityResolutionAPI) CreateIdMappingWorkflow(arg0 *entityresolution.CreateIdMappingWorkflowInput) (*entityresolution.CreateIdMappingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdMappingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.CreateIdMappingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdMappingWorkflow indicates an expected call of CreateIdMappingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) CreateIdMappingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdMappingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateIdMappingWorkflow), arg0)
}

// CreateIdMappingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) CreateIdMappingWorkflowRequest(arg0 *entityresolution.CreateIdMappingWorkflowInput) (*request.Request, *entityresolution.CreateIdMappingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdMappingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.CreateIdMappingWorkflowOutput)
	return ret0, ret1
}

// CreateIdMappingWorkflowRequest indicates an expected call of CreateIdMappingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) CreateIdMappingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdMappingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateIdMappingWorkflowRequest), arg0)
}

// CreateIdMappingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) CreateIdMappingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.CreateIdMappingWorkflowInput, arg2 ...request.Option) (*entityresolution.CreateIdMappingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIdMappingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.CreateIdMappingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdMappingWorkflowWithContext indicates an expected call of CreateIdMappingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) CreateIdMappingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdMappingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateIdMappingWorkflowWithContext), varargs...)
}

// CreateIdNamespace mocks base method
func (m *MockEntityResolutionAPI) CreateIdNamespace(arg0 *entityresolution.CreateIdNamespaceInput) (*entityresolution.CreateIdNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdNamespace", arg0)
	ret0, _ := ret[0].(*entityresolution.CreateIdNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdNamespace indicates an expected call of CreateIdNamespace
func (mr *MockEntityResolutionAPIMockRecorder) CreateIdNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdNamespace", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateIdNamespace), arg0)
}

// CreateIdNamespaceRequest mocks base method
func (m *MockEntityResolutionAPI) CreateIdNamespaceRequest(arg0 *entityresolution.CreateIdNamespaceInput) (*request.Request, *entityresolution.CreateIdNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.CreateIdNamespaceOutput)
	return ret0, ret1
}

// CreateIdNamespaceRequest indicates an expected call of CreateIdNamespaceRequest
func (mr *MockEntityResolutionAPIMockRecorder) CreateIdNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdNamespaceRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateIdNamespaceRequest), arg0)
}

// CreateIdNamespaceWithContext mocks base method
func (m *MockEntityResolutionAPI) CreateIdNamespaceWithContext(arg0 context.Context, arg1 *entityresolution.CreateIdNamespaceInput, arg2 ...request.Option) (*entityresolution.CreateIdNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIdNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.CreateIdNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdNamespaceWithContext indicates an expected call of CreateIdNamespaceWithContext
func (mr *MockEntityResolutionAPIMockRecorder) CreateIdNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdNamespaceWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateIdNamespaceWithContext), varargs...)
}

// CreateMatchingWorkflow mocks base method
func (m *MockEntityResolutionAPI) CreateMatchingWorkflow(arg0 *entityresolution.CreateMatchingWorkflowInput) (*entityresolution.CreateMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatchingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.CreateMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatchingWorkflow indicates an expected call of CreateMatchingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) CreateMatchingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateMatchingWorkflow), arg0)
}

// CreateMatchingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) CreateMatchingWorkflowRequest(arg0 *entityresolution.CreateMatchingWorkflowInput) (*request.Request, *entityresolution.CreateMatchingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatchingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.CreateMatchingWorkflowOutput)
	return ret0, ret1
}

// CreateMatchingWorkflowRequest indicates an expected call of CreateMatchingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) CreateMatchingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateMatchingWorkflowRequest), arg0)
}

// CreateMatchingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) CreateMatchingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.CreateMatchingWorkflowInput, arg2 ...request.Option) (*entityresolution.CreateMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMatchingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.CreateMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatchingWorkflowWithContext indicates an expected call of CreateMatchingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) CreateMatchingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateMatchingWorkflowWithContext), varargs...)
}

// CreateSchemaMapping mocks base method
func (m *MockEntityResolutionAPI) CreateSchemaMapping(arg0 *entityresolution.CreateSchemaMappingInput) (*entityresolution.CreateSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaMapping", arg0)
	ret0, _ := ret[0].(*entityresolution.CreateSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchemaMapping indicates an expected call of CreateSchemaMapping
func (mr *MockEntityResolutionAPIMockRecorder) CreateSchemaMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaMapping", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateSchemaMapping), arg0)
}

// CreateSchemaMappingRequest mocks base method
func (m *MockEntityResolutionAPI) CreateSchemaMappingRequest(arg0 *entityresolution.CreateSchemaMappingInput) (*request.Request, *entityresolution.CreateSchemaMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.CreateSchemaMappingOutput)
	return ret0, ret1
}

// CreateSchemaMappingRequest indicates an expected call of CreateSchemaMappingRequest
func (mr *MockEntityResolutionAPIMockRecorder) CreateSchemaMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaMappingRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateSchemaMappingRequest), arg0)
}

// CreateSchemaMappingWithContext mocks base method
func (m *MockEntityResolutionAPI) CreateSchemaMappingWithContext(arg0 context.Context, arg1 *entityresolution.CreateSchemaMappingInput, arg2 ...request.Option) (*entityresolution.CreateSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchemaMappingWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.CreateSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchemaMappingWithContext indicates an expected call of CreateSchemaMappingWithContext
func (mr *MockEntityResolutionAPIMockRecorder) CreateSchemaMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaMappingWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).CreateSchemaMappingWithContext), varargs...)
}

// DeleteIdMappingWorkflow mocks base method
func (m *MockEntityResolutionAPI) DeleteIdMappingWorkflow(arg0 *entityresolution.DeleteIdMappingWorkflowInput) (*entityresolution.DeleteIdMappingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdMappingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.DeleteIdMappingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIdMappingWorkflow indicates an expected call of DeleteIdMappingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) DeleteIdMappingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdMappingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteIdMappingWorkflow), arg0)
}

// DeleteIdMappingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) DeleteIdMappingWorkflowRequest(arg0 *entityresolution.DeleteIdMappingWorkflowInput) (*request.Request, *entityresolution.DeleteIdMappingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdMappingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.DeleteIdMappingWorkflowOutput)
	return ret0, ret1
}

// DeleteIdMappingWorkflowRequest indicates an expected call of DeleteIdMappingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) DeleteIdMappingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdMappingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteIdMappingWorkflowRequest), arg0)
}

// DeleteIdMappingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) DeleteIdMappingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.DeleteIdMappingWorkflowInput, arg2 ...request.Option) (*entityresolution.DeleteIdMappingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIdMappingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.DeleteIdMappingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIdMappingWorkflowWithContext indicates an expected call of DeleteIdMappingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) DeleteIdMappingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdMappingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteIdMappingWorkflowWithContext), varargs...)
}

// DeleteIdNamespace mocks base method
func (m *MockEntityResolutionAPI) DeleteIdNamespace(arg0 *entityresolution.DeleteIdNamespaceInput) (*entityresolution.DeleteIdNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdNamespace", arg0)
	ret0, _ := ret[0].(*entityresolution.DeleteIdNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIdNamespace indicates an expected call of DeleteIdNamespace
func (mr *MockEntityResolutionAPIMockRecorder) DeleteIdNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdNamespace", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteIdNamespace), arg0)
}

// DeleteIdNamespaceRequest mocks base method
func (m *MockEntityResolutionAPI) DeleteIdNamespaceRequest(arg0 *entityresolution.DeleteIdNamespaceInput) (*request.Request, *entityresolution.DeleteIdNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.DeleteIdNamespaceOutput)
	return ret0, ret1
}

// DeleteIdNamespaceRequest indicates an expected call of DeleteIdNamespaceRequest
func (mr *MockEntityResolutionAPIMockRecorder) DeleteIdNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdNamespaceRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteIdNamespaceRequest), arg0)
}

// DeleteIdNamespaceWithContext mocks base method
func (m *MockEntityResolutionAPI) DeleteIdNamespaceWithContext(arg0 context.Context, arg1 *entityresolution.DeleteIdNamespaceInput, arg2 ...request.Option) (*entityresolution.DeleteIdNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIdNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.DeleteIdNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIdNamespaceWithContext indicates an expected call of DeleteIdNamespaceWithContext
func (mr *MockEntityResolutionAPIMockRecorder) DeleteIdNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdNamespaceWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteIdNamespaceWithContext), varargs...)
}

// DeleteMatchingWorkflow mocks base method
func (m *MockEntityResolutionAPI) DeleteMatchingWorkflow(arg0 *entityresolution.DeleteMatchingWorkflowInput) (*entityresolution.DeleteMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMatchingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.DeleteMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMatchingWorkflow indicates an expected call of DeleteMatchingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) DeleteMatchingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteMatchingWorkflow), arg0)
}

// DeleteMatchingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) DeleteMatchingWorkflowRequest(arg0 *entityresolution.DeleteMatchingWorkflowInput) (*request.Request, *entityresolution.DeleteMatchingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMatchingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.DeleteMatchingWorkflowOutput)
	return ret0, ret1
}

// DeleteMatchingWorkflowRequest indicates an expected call of DeleteMatchingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) DeleteMatchingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteMatchingWorkflowRequest), arg0)
}

// DeleteMatchingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) DeleteMatchingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.DeleteMatchingWorkflowInput, arg2 ...request.Option) (*entityresolution.DeleteMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMatchingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.DeleteMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMatchingWorkflowWithContext indicates an expected call of DeleteMatchingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) DeleteMatchingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatchingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteMatchingWorkflowWithContext), varargs...)
}

// DeletePolicyStatement mocks base method
func (m *MockEntityResolutionAPI) DeletePolicyStatement(arg0 *entityresolution.DeletePolicyStatementInput) (*entityresolution.DeletePolicyStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyStatement", arg0)
	ret0, _ := ret[0].(*entityresolution.DeletePolicyStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyStatement indicates an expected call of DeletePolicyStatement
func (mr *MockEntityResolutionAPIMockRecorder) DeletePolicyStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyStatement", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeletePolicyStatement), arg0)
}

// DeletePolicyStatementRequest mocks base method
func (m *MockEntityResolutionAPI) DeletePolicyStatementRequest(arg0 *entityresolution.DeletePolicyStatementInput) (*request.Request, *entityresolution.DeletePolicyStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.DeletePolicyStatementOutput)
	return ret0, ret1
}

// DeletePolicyStatementRequest indicates an expected call of DeletePolicyStatementRequest
func (mr *MockEntityResolutionAPIMockRecorder) DeletePolicyStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyStatementRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeletePolicyStatementRequest), arg0)
}

// DeletePolicyStatementWithContext mocks base method
func (m *MockEntityResolutionAPI) DeletePolicyStatementWithContext(arg0 context.Context, arg1 *entityresolution.DeletePolicyStatementInput, arg2 ...request.Option) (*entityresolution.DeletePolicyStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicyStatementWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.DeletePolicyStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyStatementWithContext indicates an expected call of DeletePolicyStatementWithContext
func (mr *MockEntityResolutionAPIMockRecorder) DeletePolicyStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyStatementWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeletePolicyStatementWithContext), varargs...)
}

// DeleteSchemaMapping mocks base method
func (m *MockEntityResolutionAPI) DeleteSchemaMapping(arg0 *entityresolution.DeleteSchemaMappingInput) (*entityresolution.DeleteSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaMapping", arg0)
	ret0, _ := ret[0].(*entityresolution.DeleteSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaMapping indicates an expected call of DeleteSchemaMapping
func (mr *MockEntityResolutionAPIMockRecorder) DeleteSchemaMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaMapping", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteSchemaMapping), arg0)
}

// DeleteSchemaMappingRequest mocks base method
func (m *MockEntityResolutionAPI) DeleteSchemaMappingRequest(arg0 *entityresolution.DeleteSchemaMappingInput) (*request.Request, *entityresolution.DeleteSchemaMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.DeleteSchemaMappingOutput)
	return ret0, ret1
}

// DeleteSchemaMappingRequest indicates an expected call of DeleteSchemaMappingRequest
func (mr *MockEntityResolutionAPIMockRecorder) DeleteSchemaMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaMappingRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteSchemaMappingRequest), arg0)
}

// DeleteSchemaMappingWithContext mocks base method
func (m *MockEntityResolutionAPI) DeleteSchemaMappingWithContext(arg0 context.Context, arg1 *entityresolution.DeleteSchemaMappingInput, arg2 ...request.Option) (*entityresolution.DeleteSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchemaMappingWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.DeleteSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaMappingWithContext indicates an expected call of DeleteSchemaMappingWithContext
func (mr *MockEntityResolutionAPIMockRecorder) DeleteSchemaMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaMappingWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).DeleteSchemaMappingWithContext), varargs...)
}

// GetIdMappingJob mocks base method
func (m *MockEntityResolutionAPI) GetIdMappingJob(arg0 *entityresolution.GetIdMappingJobInput) (*entityresolution.GetIdMappingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdMappingJob", arg0)
	ret0, _ := ret[0].(*entityresolution.GetIdMappingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdMappingJob indicates an expected call of GetIdMappingJob
func (mr *MockEntityResolutionAPIMockRecorder) GetIdMappingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdMappingJob", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetIdMappingJob), arg0)
}

// GetIdMappingJobRequest mocks base method
func (m *MockEntityResolutionAPI) GetIdMappingJobRequest(arg0 *entityresolution.GetIdMappingJobInput) (*request.Request, *entityresolution.GetIdMappingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdMappingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetIdMappingJobOutput)
	return ret0, ret1
}

// GetIdMappingJobRequest indicates an expected call of GetIdMappingJobRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetIdMappingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdMappingJobRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetIdMappingJobRequest), arg0)
}

// GetIdMappingJobWithContext mocks base method
func (m *MockEntityResolutionAPI) GetIdMappingJobWithContext(arg0 context.Context, arg1 *entityresolution.GetIdMappingJobInput, arg2 ...request.Option) (*entityresolution.GetIdMappingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdMappingJobWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetIdMappingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdMappingJobWithContext indicates an expected call of GetIdMappingJobWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetIdMappingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdMappingJobWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetIdMappingJobWithContext), varargs...)
}

// GetIdMappingWorkflow mocks base method
func (m *MockEntityResolutionAPI) GetIdMappingWorkflow(arg0 *entityresolution.GetIdMappingWorkflowInput) (*entityresolution.GetIdMappingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdMappingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.GetIdMappingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdMappingWorkflow indicates an expected call of GetIdMappingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) GetIdMappingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdMappingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetIdMappingWorkflow), arg0)
}

// GetIdMappingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) GetIdMappingWorkflowRequest(arg0 *entityresolution.GetIdMappingWorkflowInput) (*request.Request, *entityresolution.GetIdMappingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdMappingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetIdMappingWorkflowOutput)
	return ret0, ret1
}

// GetIdMappingWorkflowRequest indicates an expected call of GetIdMappingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetIdMappingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdMappingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetIdMappingWorkflowRequest), arg0)
}

// GetIdMappingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) GetIdMappingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.GetIdMappingWorkflowInput, arg2 ...request.Option) (*entityresolution.GetIdMappingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdMappingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetIdMappingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdMappingWorkflowWithContext indicates an expected call of GetIdMappingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetIdMappingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdMappingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetIdMappingWorkflowWithContext), varargs...)
}

// GetIdNamespace mocks base method
func (m *MockEntityResolutionAPI) GetIdNamespace(arg0 *entityresolution.GetIdNamespaceInput) (*entityresolution.GetIdNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdNamespace", arg0)
	ret0, _ := ret[0].(*entityresolution.GetIdNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdNamespace indicates an expected call of GetIdNamespace
func (mr *MockEntityResolutionAPIMockRecorder) GetIdNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdNamespace", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetIdNamespace), arg0)
}

// GetIdNamespaceRequest mocks base method
func (m *MockEntityResolutionAPI) GetIdNamespaceRequest(arg0 *entityresolution.GetIdNamespaceInput) (*request.Request, *entityresolution.GetIdNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetIdNamespaceOutput)
	return ret0, ret1
}

// GetIdNamespaceRequest indicates an expected call of GetIdNamespaceRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetIdNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdNamespaceRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetIdNamespaceRequest), arg0)
}

// GetIdNamespaceWithContext mocks base method
func (m *MockEntityResolutionAPI) GetIdNamespaceWithContext(arg0 context.Context, arg1 *entityresolution.GetIdNamespaceInput, arg2 ...request.Option) (*entityresolution.GetIdNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetIdNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdNamespaceWithContext indicates an expected call of GetIdNamespaceWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetIdNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdNamespaceWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetIdNamespaceWithContext), varargs...)
}

// GetMatchId mocks base method
func (m *MockEntityResolutionAPI) GetMatchId(arg0 *entityresolution.GetMatchIdInput) (*entityresolution.GetMatchIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchId", arg0)
	ret0, _ := ret[0].(*entityresolution.GetMatchIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchId indicates an expected call of GetMatchId
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchId", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchId), arg0)
}

// GetMatchIdRequest mocks base method
func (m *MockEntityResolutionAPI) GetMatchIdRequest(arg0 *entityresolution.GetMatchIdInput) (*request.Request, *entityresolution.GetMatchIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetMatchIdOutput)
	return ret0, ret1
}

// GetMatchIdRequest indicates an expected call of GetMatchIdRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchIdRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchIdRequest), arg0)
}

// GetMatchIdWithContext mocks base method
func (m *MockEntityResolutionAPI) GetMatchIdWithContext(arg0 context.Context, arg1 *entityresolution.GetMatchIdInput, arg2 ...request.Option) (*entityresolution.GetMatchIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMatchIdWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetMatchIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchIdWithContext indicates an expected call of GetMatchIdWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchIdWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchIdWithContext), varargs...)
}

// GetMatchingJob mocks base method
func (m *MockEntityResolutionAPI) GetMatchingJob(arg0 *entityresolution.GetMatchingJobInput) (*entityresolution.GetMatchingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingJob", arg0)
	ret0, _ := ret[0].(*entityresolution.GetMatchingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingJob indicates an expected call of GetMatchingJob
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingJob", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingJob), arg0)
}

// GetMatchingJobRequest mocks base method
func (m *MockEntityResolutionAPI) GetMatchingJobRequest(arg0 *entityresolution.GetMatchingJobInput) (*request.Request, *entityresolution.GetMatchingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetMatchingJobOutput)
	return ret0, ret1
}

// GetMatchingJobRequest indicates an expected call of GetMatchingJobRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingJobRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingJobRequest), arg0)
}

// GetMatchingJobWithContext mocks base method
func (m *MockEntityResolutionAPI) GetMatchingJobWithContext(arg0 context.Context, arg1 *entityresolution.GetMatchingJobInput, arg2 ...request.Option) (*entityresolution.GetMatchingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMatchingJobWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetMatchingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingJobWithContext indicates an expected call of GetMatchingJobWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingJobWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingJobWithContext), varargs...)
}

// GetMatchingWorkflow mocks base method
func (m *MockEntityResolutionAPI) GetMatchingWorkflow(arg0 *entityresolution.GetMatchingWorkflowInput) (*entityresolution.GetMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.GetMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingWorkflow indicates an expected call of GetMatchingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingWorkflow), arg0)
}

// GetMatchingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) GetMatchingWorkflowRequest(arg0 *entityresolution.GetMatchingWorkflowInput) (*request.Request, *entityresolution.GetMatchingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetMatchingWorkflowOutput)
	return ret0, ret1
}

// GetMatchingWorkflowRequest indicates an expected call of GetMatchingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingWorkflowRequest), arg0)
}

// GetMatchingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) GetMatchingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.GetMatchingWorkflowInput, arg2 ...request.Option) (*entityresolution.GetMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMatchingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingWorkflowWithContext indicates an expected call of GetMatchingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetMatchingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetMatchingWorkflowWithContext), varargs...)
}

// GetPolicy mocks base method
func (m *MockEntityResolutionAPI) GetPolicy(arg0 *entityresolution.GetPolicyInput) (*entityresolution.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0)
	ret0, _ := ret[0].(*entityresolution.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockEntityResolutionAPIMockRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetPolicy), arg0)
}

// GetPolicyRequest mocks base method
func (m *MockEntityResolutionAPI) GetPolicyRequest(arg0 *entityresolution.GetPolicyInput) (*request.Request, *entityresolution.GetPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetPolicyOutput)
	return ret0, ret1
}

// GetPolicyRequest indicates an expected call of GetPolicyRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetPolicyRequest), arg0)
}

// GetPolicyWithContext mocks base method
func (m *MockEntityResolutionAPI) GetPolicyWithContext(arg0 context.Context, arg1 *entityresolution.GetPolicyInput, arg2 ...request.Option) (*entityresolution.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyWithContext indicates an expected call of GetPolicyWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetPolicyWithContext), varargs...)
}

// GetSchemaMapping mocks base method
func (m *MockEntityResolutionAPI) GetSchemaMapping(arg0 *entityresolution.GetSchemaMappingInput) (*entityresolution.GetSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaMapping", arg0)
	ret0, _ := ret[0].(*entityresolution.GetSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaMapping indicates an expected call of GetSchemaMapping
func (mr *MockEntityResolutionAPIMockRecorder) GetSchemaMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaMapping", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetSchemaMapping), arg0)
}

// GetSchemaMappingRequest mocks base method
func (m *MockEntityResolutionAPI) GetSchemaMappingRequest(arg0 *entityresolution.GetSchemaMappingInput) (*request.Request, *entityresolution.GetSchemaMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.GetSchemaMappingOutput)
	return ret0, ret1
}

// GetSchemaMappingRequest indicates an expected call of GetSchemaMappingRequest
func (mr *MockEntityResolutionAPIMockRecorder) GetSchemaMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaMappingRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetSchemaMappingRequest), arg0)
}

// GetSchemaMappingWithContext mocks base method
func (m *MockEntityResolutionAPI) GetSchemaMappingWithContext(arg0 context.Context, arg1 *entityresolution.GetSchemaMappingInput, arg2 ...request.Option) (*entityresolution.GetSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaMappingWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.GetSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaMappingWithContext indicates an expected call of GetSchemaMappingWithContext
func (mr *MockEntityResolutionAPIMockRecorder) GetSchemaMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaMappingWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).GetSchemaMappingWithContext), varargs...)
}

// ListIdMappingJobs mocks base method
func (m *MockEntityResolutionAPI) ListIdMappingJobs(arg0 *entityresolution.ListIdMappingJobsInput) (*entityresolution.ListIdMappingJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdMappingJobs", arg0)
	ret0, _ := ret[0].(*entityresolution.ListIdMappingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdMappingJobs indicates an expected call of ListIdMappingJobs
func (mr *MockEntityResolutionAPIMockRecorder) ListIdMappingJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdMappingJobs", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdMappingJobs), arg0)
}

// ListIdMappingJobsPages mocks base method
func (m *MockEntityResolutionAPI) ListIdMappingJobsPages(arg0 *entityresolution.ListIdMappingJobsInput, arg1 func(*entityresolution.ListIdMappingJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdMappingJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIdMappingJobsPages indicates an expected call of ListIdMappingJobsPages
func (mr *MockEntityResolutionAPIMockRecorder) ListIdMappingJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdMappingJobsPages", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdMappingJobsPages), arg0, arg1)
}

// ListIdMappingJobsPagesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListIdMappingJobsPagesWithContext(arg0 context.Context, arg1 *entityresolution.ListIdMappingJobsInput, arg2 func(*entityresolution.ListIdMappingJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdMappingJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIdMappingJobsPagesWithContext indicates an expected call of ListIdMappingJobsPagesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListIdMappingJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdMappingJobsPagesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdMappingJobsPagesWithContext), varargs...)
}

// ListIdMappingJobsRequest mocks base method
func (m *MockEntityResolutionAPI) ListIdMappingJobsRequest(arg0 *entityresolution.ListIdMappingJobsInput) (*request.Request, *entityresolution.ListIdMappingJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdMappingJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListIdMappingJobsOutput)
	return ret0, ret1
}

// ListIdMappingJobsRequest indicates an expected call of ListIdMappingJobsRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListIdMappingJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdMappingJobsRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdMappingJobsRequest), arg0)
}

// ListIdMappingJobsWithContext mocks base method
func (m *MockEntityResolutionAPI) ListIdMappingJobsWithContext(arg0 context.Context, arg1 *entityresolution.ListIdMappingJobsInput, arg2 ...request.Option) (*entityresolution.ListIdMappingJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdMappingJobsWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListIdMappingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdMappingJobsWithContext indicates an expected call of ListIdMappingJobsWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListIdMappingJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdMappingJobsWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdMappingJobsWithContext), varargs...)
}

// ListIdMappingWorkflows mocks base method
func (m *MockEntityResolutionAPI) ListIdMappingWorkflows(arg0 *entityresolution.ListIdMappingWorkflowsInput) (*entityresolution.ListIdMappingWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdMappingWorkflows", arg0)
	ret0, _ := ret[0].(*entityresolution.ListIdMappingWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdMappingWorkflows indicates an expected call of ListIdMappingWorkflows
func (mr *MockEntityResolutionAPIMockRecorder) ListIdMappingWorkflows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdMappingWorkflows", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdMappingWorkflows), arg0)
}

// ListIdMappingWorkflowsPages mocks base method
func (m *MockEntityResolutionAPI) ListIdMappingWorkflowsPages(arg0 *entityresolution.ListIdMappingWorkflowsInput, arg1 func(*entityresolution.ListIdMappingWorkflowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdMappingWorkflowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIdMappingWorkflowsPages indicates an expected call of ListIdMappingWorkflowsPages
func (mr *MockEntityResolutionAPIMockRecorder) ListIdMappingWorkflowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdMappingWorkflowsPages", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdMappingWorkflowsPages), arg0, arg1)
}

// ListIdMappingWorkflowsPagesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListIdMappingWorkflowsPagesWithContext(arg0 context.Context, arg1 *entityresolution.ListIdMappingWorkflowsInput, arg2 func(*entityresolution.ListIdMappingWorkflowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdMappingWorkflowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIdMappingWorkflowsPagesWithContext indicates an expected call of ListIdMappingWorkflowsPagesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListIdMappingWorkflowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdMappingWorkflowsPagesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdMappingWorkflowsPagesWithContext), varargs...)
}

// ListIdMappingWorkflowsRequest mocks base method
func (m *MockEntityResolutionAPI) ListIdMappingWorkflowsRequest(arg0 *entityresolution.ListIdMappingWorkflowsInput) (*request.Request, *entityresolution.ListIdMappingWorkflowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdMappingWorkflowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListIdMappingWorkflowsOutput)
	return ret0, ret1
}

// ListIdMappingWorkflowsRequest indicates an expected call of ListIdMappingWorkflowsRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListIdMappingWorkflowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdMappingWorkflowsRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdMappingWorkflowsRequest), arg0)
}

// ListIdMappingWorkflowsWithContext mocks base method
func (m *MockEntityResolutionAPI) ListIdMappingWorkflowsWithContext(arg0 context.Context, arg1 *entityresolution.ListIdMappingWorkflowsInput, arg2 ...request.Option) (*entityresolution.ListIdMappingWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdMappingWorkflowsWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListIdMappingWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdMappingWorkflowsWithContext indicates an expected call of ListIdMappingWorkflowsWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListIdMappingWorkflowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdMappingWorkflowsWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdMappingWorkflowsWithContext), varargs...)
}

// ListIdNamespaces mocks base method
func (m *MockEntityResolutionAPI) ListIdNamespaces(arg0 *entityresolution.ListIdNamespacesInput) (*entityresolution.ListIdNamespacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdNamespaces", arg0)
	ret0, _ := ret[0].(*entityresolution.ListIdNamespacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdNamespaces indicates an expected call of ListIdNamespaces
func (mr *MockEntityResolutionAPIMockRecorder) ListIdNamespaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdNamespaces", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdNamespaces), arg0)
}

// ListIdNamespacesPages mocks base method
func (m *MockEntityResolutionAPI) ListIdNamespacesPages(arg0 *entityresolution.ListIdNamespacesInput, arg1 func(*entityresolution.ListIdNamespacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdNamespacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIdNamespacesPages indicates an expected call of ListIdNamespacesPages
func (mr *MockEntityResolutionAPIMockRecorder) ListIdNamespacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdNamespacesPages", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdNamespacesPages), arg0, arg1)
}

// ListIdNamespacesPagesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListIdNamespacesPagesWithContext(arg0 context.Context, arg1 *entityresolution.ListIdNamespacesInput, arg2 func(*entityresolution.ListIdNamespacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdNamespacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIdNamespacesPagesWithContext indicates an expected call of ListIdNamespacesPagesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListIdNamespacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdNamespacesPagesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdNamespacesPagesWithContext), varargs...)
}

// ListIdNamespacesRequest mocks base method
func (m *MockEntityResolutionAPI) ListIdNamespacesRequest(arg0 *entityresolution.ListIdNamespacesInput) (*request.Request, *entityresolution.ListIdNamespacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdNamespacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListIdNamespacesOutput)
	return ret0, ret1
}

// ListIdNamespacesRequest indicates an expected call of ListIdNamespacesRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListIdNamespacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdNamespacesRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdNamespacesRequest), arg0)
}

// ListIdNamespacesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListIdNamespacesWithContext(arg0 context.Context, arg1 *entityresolution.ListIdNamespacesInput, arg2 ...request.Option) (*entityresolution.ListIdNamespacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdNamespacesWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListIdNamespacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdNamespacesWithContext indicates an expected call of ListIdNamespacesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListIdNamespacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdNamespacesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListIdNamespacesWithContext), varargs...)
}

// ListMatchingJobs mocks base method
func (m *MockEntityResolutionAPI) ListMatchingJobs(arg0 *entityresolution.ListMatchingJobsInput) (*entityresolution.ListMatchingJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingJobs", arg0)
	ret0, _ := ret[0].(*entityresolution.ListMatchingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchingJobs indicates an expected call of ListMatchingJobs
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingJobs", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingJobs), arg0)
}

// ListMatchingJobsPages mocks base method
func (m *MockEntityResolutionAPI) ListMatchingJobsPages(arg0 *entityresolution.ListMatchingJobsInput, arg1 func(*entityresolution.ListMatchingJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMatchingJobsPages indicates an expected call of ListMatchingJobsPages
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingJobsPages", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingJobsPages), arg0, arg1)
}

// ListMatchingJobsPagesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListMatchingJobsPagesWithContext(arg0 context.Context, arg1 *entityresolution.ListMatchingJobsInput, arg2 func(*entityresolution.ListMatchingJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchingJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMatchingJobsPagesWithContext indicates an expected call of ListMatchingJobsPagesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingJobsPagesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingJobsPagesWithContext), varargs...)
}

// ListMatchingJobsRequest mocks base method
func (m *MockEntityResolutionAPI) ListMatchingJobsRequest(arg0 *entityresolution.ListMatchingJobsInput) (*request.Request, *entityresolution.ListMatchingJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListMatchingJobsOutput)
	return ret0, ret1
}

// ListMatchingJobsRequest indicates an expected call of ListMatchingJobsRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingJobsRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingJobsRequest), arg0)
}

// ListMatchingJobsWithContext mocks base method
func (m *MockEntityResolutionAPI) ListMatchingJobsWithContext(arg0 context.Context, arg1 *entityresolution.ListMatchingJobsInput, arg2 ...request.Option) (*entityresolution.ListMatchingJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchingJobsWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListMatchingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchingJobsWithContext indicates an expected call of ListMatchingJobsWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingJobsWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingJobsWithContext), varargs...)
}

// ListMatchingWorkflows mocks base method
func (m *MockEntityResolutionAPI) ListMatchingWorkflows(arg0 *entityresolution.ListMatchingWorkflowsInput) (*entityresolution.ListMatchingWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingWorkflows", arg0)
	ret0, _ := ret[0].(*entityresolution.ListMatchingWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchingWorkflows indicates an expected call of ListMatchingWorkflows
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingWorkflows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingWorkflows", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingWorkflows), arg0)
}

// ListMatchingWorkflowsPages mocks base method
func (m *MockEntityResolutionAPI) ListMatchingWorkflowsPages(arg0 *entityresolution.ListMatchingWorkflowsInput, arg1 func(*entityresolution.ListMatchingWorkflowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingWorkflowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMatchingWorkflowsPages indicates an expected call of ListMatchingWorkflowsPages
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingWorkflowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingWorkflowsPages", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingWorkflowsPages), arg0, arg1)
}

// ListMatchingWorkflowsPagesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListMatchingWorkflowsPagesWithContext(arg0 context.Context, arg1 *entityresolution.ListMatchingWorkflowsInput, arg2 func(*entityresolution.ListMatchingWorkflowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchingWorkflowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMatchingWorkflowsPagesWithContext indicates an expected call of ListMatchingWorkflowsPagesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingWorkflowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingWorkflowsPagesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingWorkflowsPagesWithContext), varargs...)
}

// ListMatchingWorkflowsRequest mocks base method
func (m *MockEntityResolutionAPI) ListMatchingWorkflowsRequest(arg0 *entityresolution.ListMatchingWorkflowsInput) (*request.Request, *entityresolution.ListMatchingWorkflowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingWorkflowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListMatchingWorkflowsOutput)
	return ret0, ret1
}

// ListMatchingWorkflowsRequest indicates an expected call of ListMatchingWorkflowsRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingWorkflowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingWorkflowsRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingWorkflowsRequest), arg0)
}

// ListMatchingWorkflowsWithContext mocks base method
func (m *MockEntityResolutionAPI) ListMatchingWorkflowsWithContext(arg0 context.Context, arg1 *entityresolution.ListMatchingWorkflowsInput, arg2 ...request.Option) (*entityresolution.ListMatchingWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMatchingWorkflowsWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListMatchingWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchingWorkflowsWithContext indicates an expected call of ListMatchingWorkflowsWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListMatchingWorkflowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingWorkflowsWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListMatchingWorkflowsWithContext), varargs...)
}

// ListProviderServices mocks base method
func (m *MockEntityResolutionAPI) ListProviderServices(arg0 *entityresolution.ListProviderServicesInput) (*entityresolution.ListProviderServicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProviderServices", arg0)
	ret0, _ := ret[0].(*entityresolution.ListProviderServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProviderServices indicates an expected call of ListProviderServices
func (mr *MockEntityResolutionAPIMockRecorder) ListProviderServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderServices", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListProviderServices), arg0)
}

// ListProviderServicesPages mocks base method
func (m *MockEntityResolutionAPI) ListProviderServicesPages(arg0 *entityresolution.ListProviderServicesInput, arg1 func(*entityresolution.ListProviderServicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProviderServicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProviderServicesPages indicates an expected call of ListProviderServicesPages
func (mr *MockEntityResolutionAPIMockRecorder) ListProviderServicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderServicesPages", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListProviderServicesPages), arg0, arg1)
}

// ListProviderServicesPagesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListProviderServicesPagesWithContext(arg0 context.Context, arg1 *entityresolution.ListProviderServicesInput, arg2 func(*entityresolution.ListProviderServicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProviderServicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProviderServicesPagesWithContext indicates an expected call of ListProviderServicesPagesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListProviderServicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderServicesPagesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListProviderServicesPagesWithContext), varargs...)
}

// ListProviderServicesRequest mocks base method
func (m *MockEntityResolutionAPI) ListProviderServicesRequest(arg0 *entityresolution.ListProviderServicesInput) (*request.Request, *entityresolution.ListProviderServicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProviderServicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListProviderServicesOutput)
	return ret0, ret1
}

// ListProviderServicesRequest indicates an expected call of ListProviderServicesRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListProviderServicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderServicesRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListProviderServicesRequest), arg0)
}

// ListProviderServicesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListProviderServicesWithContext(arg0 context.Context, arg1 *entityresolution.ListProviderServicesInput, arg2 ...request.Option) (*entityresolution.ListProviderServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProviderServicesWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListProviderServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProviderServicesWithContext indicates an expected call of ListProviderServicesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListProviderServicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderServicesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListProviderServicesWithContext), varargs...)
}

// ListSchemaMappings mocks base method
func (m *MockEntityResolutionAPI) ListSchemaMappings(arg0 *entityresolution.ListSchemaMappingsInput) (*entityresolution.ListSchemaMappingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaMappings", arg0)
	ret0, _ := ret[0].(*entityresolution.ListSchemaMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaMappings indicates an expected call of ListSchemaMappings
func (mr *MockEntityResolutionAPIMockRecorder) ListSchemaMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaMappings", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListSchemaMappings), arg0)
}

// ListSchemaMappingsPages mocks base method
func (m *MockEntityResolutionAPI) ListSchemaMappingsPages(arg0 *entityresolution.ListSchemaMappingsInput, arg1 func(*entityresolution.ListSchemaMappingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaMappingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemaMappingsPages indicates an expected call of ListSchemaMappingsPages
func (mr *MockEntityResolutionAPIMockRecorder) ListSchemaMappingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaMappingsPages", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListSchemaMappingsPages), arg0, arg1)
}

// ListSchemaMappingsPagesWithContext mocks base method
func (m *MockEntityResolutionAPI) ListSchemaMappingsPagesWithContext(arg0 context.Context, arg1 *entityresolution.ListSchemaMappingsInput, arg2 func(*entityresolution.ListSchemaMappingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemaMappingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemaMappingsPagesWithContext indicates an expected call of ListSchemaMappingsPagesWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListSchemaMappingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaMappingsPagesWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListSchemaMappingsPagesWithContext), varargs...)
}

// ListSchemaMappingsRequest mocks base method
func (m *MockEntityResolutionAPI) ListSchemaMappingsRequest(arg0 *entityresolution.ListSchemaMappingsInput) (*request.Request, *entityresolution.ListSchemaMappingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaMappingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListSchemaMappingsOutput)
	return ret0, ret1
}

// ListSchemaMappingsRequest indicates an expected call of ListSchemaMappingsRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListSchemaMappingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaMappingsRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListSchemaMappingsRequest), arg0)
}

// ListSchemaMappingsWithContext mocks base method
func (m *MockEntityResolutionAPI) ListSchemaMappingsWithContext(arg0 context.Context, arg1 *entityresolution.ListSchemaMappingsInput, arg2 ...request.Option) (*entityresolution.ListSchemaMappingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemaMappingsWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListSchemaMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaMappingsWithContext indicates an expected call of ListSchemaMappingsWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListSchemaMappingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaMappingsWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListSchemaMappingsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockEntityResolutionAPI) ListTagsForResource(arg0 *entityresolution.ListTagsForResourceInput) (*entityresolution.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*entityresolution.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockEntityResolutionAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockEntityResolutionAPI) ListTagsForResourceRequest(arg0 *entityresolution.ListTagsForResourceInput) (*request.Request, *entityresolution.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockEntityResolutionAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockEntityResolutionAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *entityresolution.ListTagsForResourceInput, arg2 ...request.Option) (*entityresolution.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockEntityResolutionAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutPolicy mocks base method
func (m *MockEntityResolutionAPI) PutPolicy(arg0 *entityresolution.PutPolicyInput) (*entityresolution.PutPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPolicy", arg0)
	ret0, _ := ret[0].(*entityresolution.PutPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPolicy indicates an expected call of PutPolicy
func (mr *MockEntityResolutionAPIMockRecorder) PutPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPolicy", reflect.TypeOf((*MockEntityResolutionAPI)(nil).PutPolicy), arg0)
}

// PutPolicyRequest mocks base method
func (m *MockEntityResolutionAPI) PutPolicyRequest(arg0 *entityresolution.PutPolicyInput) (*request.Request, *entityresolution.PutPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.PutPolicyOutput)
	return ret0, ret1
}

// PutPolicyRequest indicates an expected call of PutPolicyRequest
func (mr *MockEntityResolutionAPIMockRecorder) PutPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPolicyRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).PutPolicyRequest), arg0)
}

// PutPolicyWithContext mocks base method
func (m *MockEntityResolutionAPI) PutPolicyWithContext(arg0 context.Context, arg1 *entityresolution.PutPolicyInput, arg2 ...request.Option) (*entityresolution.PutPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.PutPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPolicyWithContext indicates an expected call of PutPolicyWithContext
func (mr *MockEntityResolutionAPIMockRecorder) PutPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPolicyWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).PutPolicyWithContext), varargs...)
}

// StartIdMappingJob mocks base method
func (m *MockEntityResolutionAPI) StartIdMappingJob(arg0 *entityresolution.StartIdMappingJobInput) (*entityresolution.StartIdMappingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartIdMappingJob", arg0)
	ret0, _ := ret[0].(*entityresolution.StartIdMappingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartIdMappingJob indicates an expected call of StartIdMappingJob
func (mr *MockEntityResolutionAPIMockRecorder) StartIdMappingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIdMappingJob", reflect.TypeOf((*MockEntityResolutionAPI)(nil).StartIdMappingJob), arg0)
}

// StartIdMappingJobRequest mocks base method
func (m *MockEntityResolutionAPI) StartIdMappingJobRequest(arg0 *entityresolution.StartIdMappingJobInput) (*request.Request, *entityresolution.StartIdMappingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartIdMappingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.StartIdMappingJobOutput)
	return ret0, ret1
}

// StartIdMappingJobRequest indicates an expected call of StartIdMappingJobRequest
func (mr *MockEntityResolutionAPIMockRecorder) StartIdMappingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIdMappingJobRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).StartIdMappingJobRequest), arg0)
}

// StartIdMappingJobWithContext mocks base method
func (m *MockEntityResolutionAPI) StartIdMappingJobWithContext(arg0 context.Context, arg1 *entityresolution.StartIdMappingJobInput, arg2 ...request.Option) (*entityresolution.StartIdMappingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartIdMappingJobWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.StartIdMappingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartIdMappingJobWithContext indicates an expected call of StartIdMappingJobWithContext
func (mr *MockEntityResolutionAPIMockRecorder) StartIdMappingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIdMappingJobWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).StartIdMappingJobWithContext), varargs...)
}

// StartMatchingJob mocks base method
func (m *MockEntityResolutionAPI) StartMatchingJob(arg0 *entityresolution.StartMatchingJobInput) (*entityresolution.StartMatchingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMatchingJob", arg0)
	ret0, _ := ret[0].(*entityresolution.StartMatchingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMatchingJob indicates an expected call of StartMatchingJob
func (mr *MockEntityResolutionAPIMockRecorder) StartMatchingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMatchingJob", reflect.TypeOf((*MockEntityResolutionAPI)(nil).StartMatchingJob), arg0)
}

// StartMatchingJobRequest mocks base method
func (m *MockEntityResolutionAPI) StartMatchingJobRequest(arg0 *entityresolution.StartMatchingJobInput) (*request.Request, *entityresolution.StartMatchingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMatchingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.StartMatchingJobOutput)
	return ret0, ret1
}

// StartMatchingJobRequest indicates an expected call of StartMatchingJobRequest
func (mr *MockEntityResolutionAPIMockRecorder) StartMatchingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMatchingJobRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).StartMatchingJobRequest), arg0)
}

// StartMatchingJobWithContext mocks base method
func (m *MockEntityResolutionAPI) StartMatchingJobWithContext(arg0 context.Context, arg1 *entityresolution.StartMatchingJobInput, arg2 ...request.Option) (*entityresolution.StartMatchingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMatchingJobWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.StartMatchingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMatchingJobWithContext indicates an expected call of StartMatchingJobWithContext
func (mr *MockEntityResolutionAPIMockRecorder) StartMatchingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMatchingJobWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).StartMatchingJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockEntityResolutionAPI) TagResource(arg0 *entityresolution.TagResourceInput) (*entityresolution.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*entityresolution.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockEntityResolutionAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockEntityResolutionAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockEntityResolutionAPI) TagResourceRequest(arg0 *entityresolution.TagResourceInput) (*request.Request, *entityresolution.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockEntityResolutionAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockEntityResolutionAPI) TagResourceWithContext(arg0 context.Context, arg1 *entityresolution.TagResourceInput, arg2 ...request.Option) (*entityresolution.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockEntityResolutionAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockEntityResolutionAPI) UntagResource(arg0 *entityresolution.UntagResourceInput) (*entityresolution.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*entityresolution.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockEntityResolutionAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockEntityResolutionAPI) UntagResourceRequest(arg0 *entityresolution.UntagResourceInput) (*request.Request, *entityresolution.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockEntityResolutionAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockEntityResolutionAPI) UntagResourceWithContext(arg0 context.Context, arg1 *entityresolution.UntagResourceInput, arg2 ...request.Option) (*entityresolution.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockEntityResolutionAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateIdMappingWorkflow mocks base method
func (m *MockEntityResolutionAPI) UpdateIdMappingWorkflow(arg0 *entityresolution.UpdateIdMappingWorkflowInput) (*entityresolution.UpdateIdMappingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdMappingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.UpdateIdMappingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdMappingWorkflow indicates an expected call of UpdateIdMappingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) UpdateIdMappingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdMappingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateIdMappingWorkflow), arg0)
}

// UpdateIdMappingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) UpdateIdMappingWorkflowRequest(arg0 *entityresolution.UpdateIdMappingWorkflowInput) (*request.Request, *entityresolution.UpdateIdMappingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdMappingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.UpdateIdMappingWorkflowOutput)
	return ret0, ret1
}

// UpdateIdMappingWorkflowRequest indicates an expected call of UpdateIdMappingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) UpdateIdMappingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdMappingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateIdMappingWorkflowRequest), arg0)
}

// UpdateIdMappingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) UpdateIdMappingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.UpdateIdMappingWorkflowInput, arg2 ...request.Option) (*entityresolution.UpdateIdMappingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIdMappingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.UpdateIdMappingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdMappingWorkflowWithContext indicates an expected call of UpdateIdMappingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) UpdateIdMappingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdMappingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateIdMappingWorkflowWithContext), varargs...)
}

// UpdateIdNamespace mocks base method
func (m *MockEntityResolutionAPI) UpdateIdNamespace(arg0 *entityresolution.UpdateIdNamespaceInput) (*entityresolution.UpdateIdNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdNamespace", arg0)
	ret0, _ := ret[0].(*entityresolution.UpdateIdNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdNamespace indicates an expected call of UpdateIdNamespace
func (mr *MockEntityResolutionAPIMockRecorder) UpdateIdNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdNamespace", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateIdNamespace), arg0)
}

// UpdateIdNamespaceRequest mocks base method
func (m *MockEntityResolutionAPI) UpdateIdNamespaceRequest(arg0 *entityresolution.UpdateIdNamespaceInput) (*request.Request, *entityresolution.UpdateIdNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.UpdateIdNamespaceOutput)
	return ret0, ret1
}

// UpdateIdNamespaceRequest indicates an expected call of UpdateIdNamespaceRequest
func (mr *MockEntityResolutionAPIMockRecorder) UpdateIdNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdNamespaceRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateIdNamespaceRequest), arg0)
}

// UpdateIdNamespaceWithContext mocks base method
func (m *MockEntityResolutionAPI) UpdateIdNamespaceWithContext(arg0 context.Context, arg1 *entityresolution.UpdateIdNamespaceInput, arg2 ...request.Option) (*entityresolution.UpdateIdNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIdNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.UpdateIdNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdNamespaceWithContext indicates an expected call of UpdateIdNamespaceWithContext
func (mr *MockEntityResolutionAPIMockRecorder) UpdateIdNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdNamespaceWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateIdNamespaceWithContext), varargs...)
}

// UpdateMatchingWorkflow mocks base method
func (m *MockEntityResolutionAPI) UpdateMatchingWorkflow(arg0 *entityresolution.UpdateMatchingWorkflowInput) (*entityresolution.UpdateMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchingWorkflow", arg0)
	ret0, _ := ret[0].(*entityresolution.UpdateMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMatchingWorkflow indicates an expected call of UpdateMatchingWorkflow
func (mr *MockEntityResolutionAPIMockRecorder) UpdateMatchingWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchingWorkflow", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateMatchingWorkflow), arg0)
}

// UpdateMatchingWorkflowRequest mocks base method
func (m *MockEntityResolutionAPI) UpdateMatchingWorkflowRequest(arg0 *entityresolution.UpdateMatchingWorkflowInput) (*request.Request, *entityresolution.UpdateMatchingWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchingWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.UpdateMatchingWorkflowOutput)
	return ret0, ret1
}

// UpdateMatchingWorkflowRequest indicates an expected call of UpdateMatchingWorkflowRequest
func (mr *MockEntityResolutionAPIMockRecorder) UpdateMatchingWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchingWorkflowRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateMatchingWorkflowRequest), arg0)
}

// UpdateMatchingWorkflowWithContext mocks base method
func (m *MockEntityResolutionAPI) UpdateMatchingWorkflowWithContext(arg0 context.Context, arg1 *entityresolution.UpdateMatchingWorkflowInput, arg2 ...request.Option) (*entityresolution.UpdateMatchingWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMatchingWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.UpdateMatchingWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMatchingWorkflowWithContext indicates an expected call of UpdateMatchingWorkflowWithContext
func (mr *MockEntityResolutionAPIMockRecorder) UpdateMatchingWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchingWorkflowWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateMatchingWorkflowWithContext), varargs...)
}

// UpdateSchemaMapping mocks base method
func (m *MockEntityResolutionAPI) UpdateSchemaMapping(arg0 *entityresolution.UpdateSchemaMappingInput) (*entityresolution.UpdateSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchemaMapping", arg0)
	ret0, _ := ret[0].(*entityresolution.UpdateSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchemaMapping indicates an expected call of UpdateSchemaMapping
func (mr *MockEntityResolutionAPIMockRecorder) UpdateSchemaMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaMapping", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateSchemaMapping), arg0)
}

// UpdateSchemaMappingRequest mocks base method
func (m *MockEntityResolutionAPI) UpdateSchemaMappingRequest(arg0 *entityresolution.UpdateSchemaMappingInput) (*request.Request, *entityresolution.UpdateSchemaMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchemaMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*entityresolution.UpdateSchemaMappingOutput)
	return ret0, ret1
}

// UpdateSchemaMappingRequest indicates an expected call of UpdateSchemaMappingRequest
func (mr *MockEntityResolutionAPIMockRecorder) UpdateSchemaMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaMappingRequest", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateSchemaMappingRequest), arg0)
}

// UpdateSchemaMappingWithContext mocks base method
func (m *MockEntityResolutionAPI) UpdateSchemaMappingWithContext(arg0 context.Context, arg1 *entityresolution.UpdateSchemaMappingInput, arg2 ...request.Option) (*entityresolution.UpdateSchemaMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchemaMappingWithContext", varargs...)
	ret0, _ := ret[0].(*entityresolution.UpdateSchemaMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchemaMappingWithContext indicates an expected call of UpdateSchemaMappingWithContext
func (mr *MockEntityResolutionAPIMockRecorder) UpdateSchemaMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaMappingWithContext", reflect.TypeOf((*MockEntityResolutionAPI)(nil).UpdateSchemaMappingWithContext), varargs...)
}
