// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/kendraranking/kendrarankingiface (interfaces: KendraRankingAPI)

// Package kendrarankingmock is a generated GoMock package.
package kendrarankingmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	kendraranking "github.com/aws/aws-sdk-go/service/kendraranking"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKendraRankingAPI is a mock of KendraRankingAPI interface
type MockKendraRankingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKendraRankingAPIMockRecorder
}

// MockKendraRankingAPIMockRecorder is the mock recorder for MockKendraRankingAPI
type MockKendraRankingAPIMockRecorder struct {
	mock *MockKendraRankingAPI
}

// NewMockKendraRankingAPI creates a new mock instance
func NewMockKendraRankingAPI(ctrl *gomock.Controller) *MockKendraRankingAPI {
	mock := &MockKendraRankingAPI{ctrl: ctrl}
	mock.recorder = &MockKendraRankingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKendraRankingAPI) EXPECT() *MockKendraRankingAPIMockRecorder {
	return m.recorder
}

// CreateRescoreExecutionPlan mocks base method
func (m *MockKendraRankingAPI) CreateRescoreExecutionPlan(arg0 *kendraranking.CreateRescoreExecutionPlanInput) (*kendraranking.CreateRescoreExecutionPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRescoreExecutionPlan", arg0)
	ret0, _ := ret[0].(*kendraranking.CreateRescoreExecutionPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRescoreExecutionPlan indicates an expected call of CreateRescoreExecutionPlan
func (mr *MockKendraRankingAPIMockRecorder) CreateRescoreExecutionPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRescoreExecutionPlan", reflect.TypeOf((*MockKendraRankingAPI)(nil).CreateRescoreExecutionPlan), arg0)
}

// CreateRescoreExecutionPlanRequest mocks base method
func (m *MockKendraRankingAPI) CreateRescoreExecutionPlanRequest(arg0 *kendraranking.CreateRescoreExecutionPlanInput) (*request.Request, *kendraranking.CreateRescoreExecutionPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRescoreExecutionPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kendraranking.CreateRescoreExecutionPlanOutput)
	return ret0, ret1
}

// CreateRescoreExecutionPlanRequest indicates an expected call of CreateRescoreExecutionPlanRequest
func (mr *MockKendraRankingAPIMockRecorder) CreateRescoreExecutionPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRescoreExecutionPlanRequest", reflect.TypeOf((*MockKendraRankingAPI)(nil).CreateRescoreExecutionPlanRequest), arg0)
}

// CreateRescoreExecutionPlanWithContext mocks base method
func (m *MockKendraRankingAPI) CreateRescoreExecutionPlanWithContext(arg0 context.Context, arg1 *kendraranking.CreateRescoreExecutionPlanInput, arg2 ...request.Option) (*kendraranking.CreateRescoreExecutionPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRescoreExecutionPlanWithContext", varargs...)
	ret0, _ := ret[0].(*kendraranking.CreateRescoreExecutionPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRescoreExecutionPlanWithContext indicates an expected call of CreateRescoreExecutionPlanWithContext
func (mr *MockKendraRankingAPIMockRecorder) CreateRescoreExecutionPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRescoreExecutionPlanWithContext", reflect.TypeOf((*MockKendraRankingAPI)(nil).CreateRescoreExecutionPlanWithContext), varargs...)
}

// DeleteRescoreExecutionPlan mocks base method
func (m *MockKendraRankingAPI) DeleteRescoreExecutionPlan(arg0 *kendraranking.DeleteRescoreExecutionPlanInput) (*kendraranking.DeleteRescoreExecutionPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRescoreExecutionPlan", arg0)
	ret0, _ := ret[0].(*kendraranking.DeleteRescoreExecutionPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRescoreExecutionPlan indicates an expected call of DeleteRescoreExecutionPlan
func (mr *MockKendraRankingAPIMockRecorder) DeleteRescoreExecutionPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRescoreExecutionPlan", reflect.TypeOf((*MockKendraRankingAPI)(nil).DeleteRescoreExecutionPlan), arg0)
}

// DeleteRescoreExecutionPlanRequest mocks base method
func (m *MockKendraRankingAPI) DeleteRescoreExecutionPlanRequest(arg0 *kendraranking.DeleteRescoreExecutionPlanInput) (*request.Request, *kendraranking.DeleteRescoreExecutionPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRescoreExecutionPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kendraranking.DeleteRescoreExecutionPlanOutput)
	return ret0, ret1
}

// DeleteRescoreExecutionPlanRequest indicates an expected call of DeleteRescoreExecutionPlanRequest
func (mr *MockKendraRankingAPIMockRecorder) DeleteRescoreExecutionPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRescoreExecutionPlanRequest", reflect.TypeOf((*MockKendraRankingAPI)(nil).DeleteRescoreExecutionPlanRequest), arg0)
}

// DeleteRescoreExecutionPlanWithContext mocks base method
func (m *MockKendraRankingAPI) DeleteRescoreExecutionPlanWithContext(arg0 context.Context, arg1 *kendraranking.DeleteRescoreExecutionPlanInput, arg2 ...request.Option) (*kendraranking.DeleteRescoreExecutionPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRescoreExecutionPlanWithContext", varargs...)
	ret0, _ := ret[0].(*kendraranking.DeleteRescoreExecutionPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRescoreExecutionPlanWithContext indicates an expected call of DeleteRescoreExecutionPlanWithContext
func (mr *MockKendraRankingAPIMockRecorder) DeleteRescoreExecutionPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRescoreExecutionPlanWithContext", reflect.TypeOf((*MockKendraRankingAPI)(nil).DeleteRescoreExecutionPlanWithContext), varargs...)
}

// DescribeRescoreExecutionPlan mocks base method
func (m *MockKendraRankingAPI) DescribeRescoreExecutionPlan(arg0 *kendraranking.DescribeRescoreExecutionPlanInput) (*kendraranking.DescribeRescoreExecutionPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRescoreExecutionPlan", arg0)
	ret0, _ := ret[0].(*kendraranking.DescribeRescoreExecutionPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRescoreExecutionPlan indicates an expected call of DescribeRescoreExecutionPlan
func (mr *MockKendraRankingAPIMockRecorder) DescribeRescoreExecutionPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRescoreExecutionPlan", reflect.TypeOf((*MockKendraRankingAPI)(nil).DescribeRescoreExecutionPlan), arg0)
}

// DescribeRescoreExecutionPlanRequest mocks base method
func (m *MockKendraRankingAPI) DescribeRescoreExecutionPlanRequest(arg0 *kendraranking.DescribeRescoreExecutionPlanInput) (*request.Request, *kendraranking.DescribeRescoreExecutionPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRescoreExecutionPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kendraranking.DescribeRescoreExecutionPlanOutput)
	return ret0, ret1
}

// DescribeRescoreExecutionPlanRequest indicates an expected call of DescribeRescoreExecutionPlanRequest
func (mr *MockKendraRankingAPIMockRecorder) DescribeRescoreExecutionPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRescoreExecutionPlanRequest", reflect.TypeOf((*MockKendraRankingAPI)(nil).DescribeRescoreExecutionPlanRequest), arg0)
}

// DescribeRescoreExecutionPlanWithContext mocks base method
func (m *MockKendraRankingAPI) DescribeRescoreExecutionPlanWithContext(arg0 context.Context, arg1 *kendraranking.DescribeRescoreExecutionPlanInput, arg2 ...request.Option) (*kendraranking.DescribeRescoreExecutionPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRescoreExecutionPlanWithContext", varargs...)
	ret0, _ := ret[0].(*kendraranking.DescribeRescoreExecutionPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRescoreExecutionPlanWithContext indicates an expected call of DescribeRescoreExecutionPlanWithContext
func (mr *MockKendraRankingAPIMockRecorder) DescribeRescoreExecutionPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRescoreExecutionPlanWithContext", reflect.TypeOf((*MockKendraRankingAPI)(nil).DescribeRescoreExecutionPlanWithContext), varargs...)
}

// ListRescoreExecutionPlans mocks base method
func (m *MockKendraRankingAPI) ListRescoreExecutionPlans(arg0 *kendraranking.ListRescoreExecutionPlansInput) (*kendraranking.ListRescoreExecutionPlansOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRescoreExecutionPlans", arg0)
	ret0, _ := ret[0].(*kendraranking.ListRescoreExecutionPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRescoreExecutionPlans indicates an expected call of ListRescoreExecutionPlans
func (mr *MockKendraRankingAPIMockRecorder) ListRescoreExecutionPlans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRescoreExecutionPlans", reflect.TypeOf((*MockKendraRankingAPI)(nil).ListRescoreExecutionPlans), arg0)
}

// ListRescoreExecutionPlansPages mocks base method
func (m *MockKendraRankingAPI) ListRescoreExecutionPlansPages(arg0 *kendraranking.ListRescoreExecutionPlansInput, arg1 func(*kendraranking.ListRescoreExecutionPlansOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRescoreExecutionPlansPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRescoreExecutionPlansPages indicates an expected call of ListRescoreExecutionPlansPages
func (mr *MockKendraRankingAPIMockRecorder) ListRescoreExecutionPlansPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRescoreExecutionPlansPages", reflect.TypeOf((*MockKendraRankingAPI)(nil).ListRescoreExecutionPlansPages), arg0, arg1)
}

// ListRescoreExecutionPlansPagesWithContext mocks base method
func (m *MockKendraRankingAPI) ListRescoreExecutionPlansPagesWithContext(arg0 context.Context, arg1 *kendraranking.ListRescoreExecutionPlansInput, arg2 func(*kendraranking.ListRescoreExecutionPlansOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRescoreExecutionPlansPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRescoreExecutionPlansPagesWithContext indicates an expected call of ListRescoreExecutionPlansPagesWithContext
func (mr *MockKendraRankingAPIMockRecorder) ListRescoreExecutionPlansPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRescoreExecutionPlansPagesWithContext", reflect.TypeOf((*MockKendraRankingAPI)(nil).ListRescoreExecutionPlansPagesWithContext), varargs...)
}

// ListRescoreExecutionPlansRequest mocks base method
func (m *MockKendraRankingAPI) ListRescoreExecutionPlansRequest(arg0 *kendraranking.ListRescoreExecutionPlansInput) (*request.Request, *kendraranking.ListRescoreExecutionPlansOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRescoreExecutionPlansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kendraranking.ListRescoreExecutionPlansOutput)
	return ret0, ret1
}

// ListRescoreExecutionPlansRequest indicates an expected call of ListRescoreExecutionPlansRequest
func (mr *MockKendraRankingAPIMockRecorder) ListRescoreExecutionPlansRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRescoreExecutionPlansRequest", reflect.TypeOf((*MockKendraRankingAPI)(nil).ListRescoreExecutionPlansRequest), arg0)
}

// ListRescoreExecutionPlansWithContext mocks base method
func (m *MockKendraRankingAPI) ListRescoreExecutionPlansWithContext(arg0 context.Context, arg1 *kendraranking.ListRescoreExecutionPlansInput, arg2 ...request.Option) (*kendraranking.ListRescoreExecutionPlansOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRescoreExecutionPlansWithContext", varargs...)
	ret0, _ := ret[0].(*kendraranking.ListRescoreExecutionPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRescoreExecutionPlansWithContext indicates an expected call of ListRescoreExecutionPlansWithContext
func (mr *MockKendraRankingAPIMockRecorder) ListRescoreExecutionPlansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRescoreExecutionPlansWithContext", reflect.TypeOf((*MockKendraRankingAPI)(nil).ListRescoreExecutionPlansWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockKendraRankingAPI) ListTagsForResource(arg0 *kendraranking.ListTagsForResourceInput) (*kendraranking.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*kendraranking.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockKendraRankingAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockKendraRankingAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockKendraRankingAPI) ListTagsForResourceRequest(arg0 *kendraranking.ListTagsForResourceInput) (*request.Request, *kendraranking.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kendraranking.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockKendraRankingAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockKendraRankingAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockKendraRankingAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *kendraranking.ListTagsForResourceInput, arg2 ...request.Option) (*kendraranking.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*kendraranking.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockKendraRankingAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockKendraRankingAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// Rescore mocks base method
func (m *MockKendraRankingAPI) Rescore(arg0 *kendraranking.RescoreInput) (*kendraranking.RescoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rescore", arg0)
	ret0, _ := ret[0].(*kendraranking.RescoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rescore indicates an expected call of Rescore
func (mr *MockKendraRankingAPIMockRecorder) Rescore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rescore", reflect.TypeOf((*MockKendraRankingAPI)(nil).Rescore), arg0)
}

// RescoreRequest mocks base method
func (m *MockKendraRankingAPI) RescoreRequest(arg0 *kendraranking.RescoreInput) (*request.Request, *kendraranking.RescoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kendraranking.RescoreOutput)
	return ret0, ret1
}

// RescoreRequest indicates an expected call of RescoreRequest
func (mr *MockKendraRankingAPIMockRecorder) RescoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescoreRequest", reflect.TypeOf((*MockKendraRankingAPI)(nil).RescoreRequest), arg0)
}

// RescoreWithContext mocks base method
func (m *MockKendraRankingAPI) RescoreWithContext(arg0 context.Context, arg1 *kendraranking.RescoreInput, arg2 ...request.Option) (*kendraranking.RescoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RescoreWithContext", varargs...)
	ret0, _ := ret[0].(*kendraranking.RescoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescoreWithContext indicates an expected call of RescoreWithContext
func (mr *MockKendraRankingAPIMockRecorder) RescoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescoreWithContext", reflect.TypeOf((*MockKendraRankingAPI)(nil).RescoreWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockKendraRankingAPI) TagResource(arg0 *kendraranking.TagResourceInput) (*kendraranking.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*kendraranking.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockKendraRankingAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockKendraRankingAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockKendraRankingAPI) TagResourceRequest(arg0 *kendraranking.TagResourceInput) (*request.Request, *kendraranking.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kendraranking.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockKendraRankingAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockKendraRankingAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockKendraRankingAPI) TagResourceWithContext(arg0 context.Context, arg1 *kendraranking.TagResourceInput, arg2 ...request.Option) (*kendraranking.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*kendraranking.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockKendraRankingAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockKendraRankingAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockKendraRankingAPI) UntagResource(arg0 *kendraranking.UntagResourceInput) (*kendraranking.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*kendraranking.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockKendraRankingAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockKendraRankingAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockKendraRankingAPI) UntagResourceRequest(arg0 *kendraranking.UntagResourceInput) (*request.Request, *kendraranking.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kendraranking.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockKendraRankingAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockKendraRankingAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockKendraRankingAPI) UntagResourceWithContext(arg0 context.Context, arg1 *kendraranking.UntagResourceInput, arg2 ...request.Option) (*kendraranking.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*kendraranking.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockKendraRankingAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockKendraRankingAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateRescoreExecutionPlan mocks base method
func (m *MockKendraRankingAPI) UpdateRescoreExecutionPlan(arg0 *kendraranking.UpdateRescoreExecutionPlanInput) (*kendraranking.UpdateRescoreExecutionPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRescoreExecutionPlan", arg0)
	ret0, _ := ret[0].(*kendraranking.UpdateRescoreExecutionPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRescoreExecutionPlan indicates an expected call of UpdateRescoreExecutionPlan
func (mr *MockKendraRankingAPIMockRecorder) UpdateRescoreExecutionPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRescoreExecutionPlan", reflect.TypeOf((*MockKendraRankingAPI)(nil).UpdateRescoreExecutionPlan), arg0)
}

// UpdateRescoreExecutionPlanRequest mocks base method
func (m *MockKendraRankingAPI) UpdateRescoreExecutionPlanRequest(arg0 *kendraranking.UpdateRescoreExecutionPlanInput) (*request.Request, *kendraranking.UpdateRescoreExecutionPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRescoreExecutionPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kendraranking.UpdateRescoreExecutionPlanOutput)
	return ret0, ret1
}

// UpdateRescoreExecutionPlanRequest indicates an expected call of UpdateRescoreExecutionPlanRequest
func (mr *MockKendraRankingAPIMockRecorder) UpdateRescoreExecutionPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRescoreExecutionPlanRequest", reflect.TypeOf((*MockKendraRankingAPI)(nil).UpdateRescoreExecutionPlanRequest), arg0)
}

// UpdateRescoreExecutionPlanWithContext mocks base method
func (m *MockKendraRankingAPI) UpdateRescoreExecutionPlanWithContext(arg0 context.Context, arg1 *kendraranking.UpdateRescoreExecutionPlanInput, arg2 ...request.Option) (*kendraranking.UpdateRescoreExecutionPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRescoreExecutionPlanWithContext", varargs...)
	ret0, _ := ret[0].(*kendraranking.UpdateRescoreExecutionPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRescoreExecutionPlanWithContext indicates an expected call of UpdateRescoreExecutionPlanWithContext
func (mr *MockKendraRankingAPIMockRecorder) UpdateRescoreExecutionPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRescoreExecutionPlanWithContext", reflect.TypeOf((*MockKendraRankingAPI)(nil).UpdateRescoreExecutionPlanWithContext), varargs...)
}
