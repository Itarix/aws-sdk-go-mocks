// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/simspaceweaver/simspaceweaveriface (interfaces: SimSpaceWeaverAPI)

// Package simspaceweavermock is a generated GoMock package.
package simspaceweavermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	simspaceweaver "github.com/aws/aws-sdk-go/service/simspaceweaver"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSimSpaceWeaverAPI is a mock of SimSpaceWeaverAPI interface
type MockSimSpaceWeaverAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSimSpaceWeaverAPIMockRecorder
}

// MockSimSpaceWeaverAPIMockRecorder is the mock recorder for MockSimSpaceWeaverAPI
type MockSimSpaceWeaverAPIMockRecorder struct {
	mock *MockSimSpaceWeaverAPI
}

// NewMockSimSpaceWeaverAPI creates a new mock instance
func NewMockSimSpaceWeaverAPI(ctrl *gomock.Controller) *MockSimSpaceWeaverAPI {
	mock := &MockSimSpaceWeaverAPI{ctrl: ctrl}
	mock.recorder = &MockSimSpaceWeaverAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSimSpaceWeaverAPI) EXPECT() *MockSimSpaceWeaverAPIMockRecorder {
	return m.recorder
}

// CreateSnapshot mocks base method
func (m *MockSimSpaceWeaverAPI) CreateSnapshot(arg0 *simspaceweaver.CreateSnapshotInput) (*simspaceweaver.CreateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0)
	ret0, _ := ret[0].(*simspaceweaver.CreateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot
func (mr *MockSimSpaceWeaverAPIMockRecorder) CreateSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).CreateSnapshot), arg0)
}

// CreateSnapshotRequest mocks base method
func (m *MockSimSpaceWeaverAPI) CreateSnapshotRequest(arg0 *simspaceweaver.CreateSnapshotInput) (*request.Request, *simspaceweaver.CreateSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.CreateSnapshotOutput)
	return ret0, ret1
}

// CreateSnapshotRequest indicates an expected call of CreateSnapshotRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) CreateSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).CreateSnapshotRequest), arg0)
}

// CreateSnapshotWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) CreateSnapshotWithContext(arg0 context.Context, arg1 *simspaceweaver.CreateSnapshotInput, arg2 ...request.Option) (*simspaceweaver.CreateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.CreateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotWithContext indicates an expected call of CreateSnapshotWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) CreateSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).CreateSnapshotWithContext), varargs...)
}

// DeleteApp mocks base method
func (m *MockSimSpaceWeaverAPI) DeleteApp(arg0 *simspaceweaver.DeleteAppInput) (*simspaceweaver.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", arg0)
	ret0, _ := ret[0].(*simspaceweaver.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockSimSpaceWeaverAPIMockRecorder) DeleteApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DeleteApp), arg0)
}

// DeleteAppRequest mocks base method
func (m *MockSimSpaceWeaverAPI) DeleteAppRequest(arg0 *simspaceweaver.DeleteAppInput) (*request.Request, *simspaceweaver.DeleteAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.DeleteAppOutput)
	return ret0, ret1
}

// DeleteAppRequest indicates an expected call of DeleteAppRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) DeleteAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DeleteAppRequest), arg0)
}

// DeleteAppWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) DeleteAppWithContext(arg0 context.Context, arg1 *simspaceweaver.DeleteAppInput, arg2 ...request.Option) (*simspaceweaver.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppWithContext indicates an expected call of DeleteAppWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) DeleteAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DeleteAppWithContext), varargs...)
}

// DeleteSimulation mocks base method
func (m *MockSimSpaceWeaverAPI) DeleteSimulation(arg0 *simspaceweaver.DeleteSimulationInput) (*simspaceweaver.DeleteSimulationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSimulation", arg0)
	ret0, _ := ret[0].(*simspaceweaver.DeleteSimulationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSimulation indicates an expected call of DeleteSimulation
func (mr *MockSimSpaceWeaverAPIMockRecorder) DeleteSimulation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSimulation", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DeleteSimulation), arg0)
}

// DeleteSimulationRequest mocks base method
func (m *MockSimSpaceWeaverAPI) DeleteSimulationRequest(arg0 *simspaceweaver.DeleteSimulationInput) (*request.Request, *simspaceweaver.DeleteSimulationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSimulationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.DeleteSimulationOutput)
	return ret0, ret1
}

// DeleteSimulationRequest indicates an expected call of DeleteSimulationRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) DeleteSimulationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSimulationRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DeleteSimulationRequest), arg0)
}

// DeleteSimulationWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) DeleteSimulationWithContext(arg0 context.Context, arg1 *simspaceweaver.DeleteSimulationInput, arg2 ...request.Option) (*simspaceweaver.DeleteSimulationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSimulationWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.DeleteSimulationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSimulationWithContext indicates an expected call of DeleteSimulationWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) DeleteSimulationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSimulationWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DeleteSimulationWithContext), varargs...)
}

// DescribeApp mocks base method
func (m *MockSimSpaceWeaverAPI) DescribeApp(arg0 *simspaceweaver.DescribeAppInput) (*simspaceweaver.DescribeAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApp", arg0)
	ret0, _ := ret[0].(*simspaceweaver.DescribeAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApp indicates an expected call of DescribeApp
func (mr *MockSimSpaceWeaverAPIMockRecorder) DescribeApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApp", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DescribeApp), arg0)
}

// DescribeAppRequest mocks base method
func (m *MockSimSpaceWeaverAPI) DescribeAppRequest(arg0 *simspaceweaver.DescribeAppInput) (*request.Request, *simspaceweaver.DescribeAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.DescribeAppOutput)
	return ret0, ret1
}

// DescribeAppRequest indicates an expected call of DescribeAppRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) DescribeAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DescribeAppRequest), arg0)
}

// DescribeAppWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) DescribeAppWithContext(arg0 context.Context, arg1 *simspaceweaver.DescribeAppInput, arg2 ...request.Option) (*simspaceweaver.DescribeAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.DescribeAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppWithContext indicates an expected call of DescribeAppWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) DescribeAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DescribeAppWithContext), varargs...)
}

// DescribeSimulation mocks base method
func (m *MockSimSpaceWeaverAPI) DescribeSimulation(arg0 *simspaceweaver.DescribeSimulationInput) (*simspaceweaver.DescribeSimulationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulation", arg0)
	ret0, _ := ret[0].(*simspaceweaver.DescribeSimulationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulation indicates an expected call of DescribeSimulation
func (mr *MockSimSpaceWeaverAPIMockRecorder) DescribeSimulation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulation", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DescribeSimulation), arg0)
}

// DescribeSimulationRequest mocks base method
func (m *MockSimSpaceWeaverAPI) DescribeSimulationRequest(arg0 *simspaceweaver.DescribeSimulationInput) (*request.Request, *simspaceweaver.DescribeSimulationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.DescribeSimulationOutput)
	return ret0, ret1
}

// DescribeSimulationRequest indicates an expected call of DescribeSimulationRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) DescribeSimulationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DescribeSimulationRequest), arg0)
}

// DescribeSimulationWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) DescribeSimulationWithContext(arg0 context.Context, arg1 *simspaceweaver.DescribeSimulationInput, arg2 ...request.Option) (*simspaceweaver.DescribeSimulationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSimulationWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.DescribeSimulationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationWithContext indicates an expected call of DescribeSimulationWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) DescribeSimulationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).DescribeSimulationWithContext), varargs...)
}

// ListApps mocks base method
func (m *MockSimSpaceWeaverAPI) ListApps(arg0 *simspaceweaver.ListAppsInput) (*simspaceweaver.ListAppsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", arg0)
	ret0, _ := ret[0].(*simspaceweaver.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApps indicates an expected call of ListApps
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListApps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListApps), arg0)
}

// ListAppsPages mocks base method
func (m *MockSimSpaceWeaverAPI) ListAppsPages(arg0 *simspaceweaver.ListAppsInput, arg1 func(*simspaceweaver.ListAppsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppsPages indicates an expected call of ListAppsPages
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListAppsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsPages", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListAppsPages), arg0, arg1)
}

// ListAppsPagesWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) ListAppsPagesWithContext(arg0 context.Context, arg1 *simspaceweaver.ListAppsInput, arg2 func(*simspaceweaver.ListAppsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppsPagesWithContext indicates an expected call of ListAppsPagesWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListAppsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsPagesWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListAppsPagesWithContext), varargs...)
}

// ListAppsRequest mocks base method
func (m *MockSimSpaceWeaverAPI) ListAppsRequest(arg0 *simspaceweaver.ListAppsInput) (*request.Request, *simspaceweaver.ListAppsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.ListAppsOutput)
	return ret0, ret1
}

// ListAppsRequest indicates an expected call of ListAppsRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListAppsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListAppsRequest), arg0)
}

// ListAppsWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) ListAppsWithContext(arg0 context.Context, arg1 *simspaceweaver.ListAppsInput, arg2 ...request.Option) (*simspaceweaver.ListAppsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppsWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppsWithContext indicates an expected call of ListAppsWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListAppsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListAppsWithContext), varargs...)
}

// ListSimulations mocks base method
func (m *MockSimSpaceWeaverAPI) ListSimulations(arg0 *simspaceweaver.ListSimulationsInput) (*simspaceweaver.ListSimulationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulations", arg0)
	ret0, _ := ret[0].(*simspaceweaver.ListSimulationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulations indicates an expected call of ListSimulations
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListSimulations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulations", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListSimulations), arg0)
}

// ListSimulationsPages mocks base method
func (m *MockSimSpaceWeaverAPI) ListSimulationsPages(arg0 *simspaceweaver.ListSimulationsInput, arg1 func(*simspaceweaver.ListSimulationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSimulationsPages indicates an expected call of ListSimulationsPages
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListSimulationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationsPages", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListSimulationsPages), arg0, arg1)
}

// ListSimulationsPagesWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) ListSimulationsPagesWithContext(arg0 context.Context, arg1 *simspaceweaver.ListSimulationsInput, arg2 func(*simspaceweaver.ListSimulationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSimulationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSimulationsPagesWithContext indicates an expected call of ListSimulationsPagesWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListSimulationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationsPagesWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListSimulationsPagesWithContext), varargs...)
}

// ListSimulationsRequest mocks base method
func (m *MockSimSpaceWeaverAPI) ListSimulationsRequest(arg0 *simspaceweaver.ListSimulationsInput) (*request.Request, *simspaceweaver.ListSimulationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.ListSimulationsOutput)
	return ret0, ret1
}

// ListSimulationsRequest indicates an expected call of ListSimulationsRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListSimulationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationsRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListSimulationsRequest), arg0)
}

// ListSimulationsWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) ListSimulationsWithContext(arg0 context.Context, arg1 *simspaceweaver.ListSimulationsInput, arg2 ...request.Option) (*simspaceweaver.ListSimulationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSimulationsWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.ListSimulationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationsWithContext indicates an expected call of ListSimulationsWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListSimulationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationsWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListSimulationsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockSimSpaceWeaverAPI) ListTagsForResource(arg0 *simspaceweaver.ListTagsForResourceInput) (*simspaceweaver.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*simspaceweaver.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockSimSpaceWeaverAPI) ListTagsForResourceRequest(arg0 *simspaceweaver.ListTagsForResourceInput) (*request.Request, *simspaceweaver.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *simspaceweaver.ListTagsForResourceInput, arg2 ...request.Option) (*simspaceweaver.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartApp mocks base method
func (m *MockSimSpaceWeaverAPI) StartApp(arg0 *simspaceweaver.StartAppInput) (*simspaceweaver.StartAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApp", arg0)
	ret0, _ := ret[0].(*simspaceweaver.StartAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApp indicates an expected call of StartApp
func (mr *MockSimSpaceWeaverAPIMockRecorder) StartApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApp", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StartApp), arg0)
}

// StartAppRequest mocks base method
func (m *MockSimSpaceWeaverAPI) StartAppRequest(arg0 *simspaceweaver.StartAppInput) (*request.Request, *simspaceweaver.StartAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.StartAppOutput)
	return ret0, ret1
}

// StartAppRequest indicates an expected call of StartAppRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) StartAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StartAppRequest), arg0)
}

// StartAppWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) StartAppWithContext(arg0 context.Context, arg1 *simspaceweaver.StartAppInput, arg2 ...request.Option) (*simspaceweaver.StartAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAppWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.StartAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAppWithContext indicates an expected call of StartAppWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) StartAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StartAppWithContext), varargs...)
}

// StartClock mocks base method
func (m *MockSimSpaceWeaverAPI) StartClock(arg0 *simspaceweaver.StartClockInput) (*simspaceweaver.StartClockOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartClock", arg0)
	ret0, _ := ret[0].(*simspaceweaver.StartClockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartClock indicates an expected call of StartClock
func (mr *MockSimSpaceWeaverAPIMockRecorder) StartClock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartClock", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StartClock), arg0)
}

// StartClockRequest mocks base method
func (m *MockSimSpaceWeaverAPI) StartClockRequest(arg0 *simspaceweaver.StartClockInput) (*request.Request, *simspaceweaver.StartClockOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartClockRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.StartClockOutput)
	return ret0, ret1
}

// StartClockRequest indicates an expected call of StartClockRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) StartClockRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartClockRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StartClockRequest), arg0)
}

// StartClockWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) StartClockWithContext(arg0 context.Context, arg1 *simspaceweaver.StartClockInput, arg2 ...request.Option) (*simspaceweaver.StartClockOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartClockWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.StartClockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartClockWithContext indicates an expected call of StartClockWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) StartClockWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartClockWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StartClockWithContext), varargs...)
}

// StartSimulation mocks base method
func (m *MockSimSpaceWeaverAPI) StartSimulation(arg0 *simspaceweaver.StartSimulationInput) (*simspaceweaver.StartSimulationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSimulation", arg0)
	ret0, _ := ret[0].(*simspaceweaver.StartSimulationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSimulation indicates an expected call of StartSimulation
func (mr *MockSimSpaceWeaverAPIMockRecorder) StartSimulation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSimulation", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StartSimulation), arg0)
}

// StartSimulationRequest mocks base method
func (m *MockSimSpaceWeaverAPI) StartSimulationRequest(arg0 *simspaceweaver.StartSimulationInput) (*request.Request, *simspaceweaver.StartSimulationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSimulationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.StartSimulationOutput)
	return ret0, ret1
}

// StartSimulationRequest indicates an expected call of StartSimulationRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) StartSimulationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSimulationRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StartSimulationRequest), arg0)
}

// StartSimulationWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) StartSimulationWithContext(arg0 context.Context, arg1 *simspaceweaver.StartSimulationInput, arg2 ...request.Option) (*simspaceweaver.StartSimulationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSimulationWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.StartSimulationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSimulationWithContext indicates an expected call of StartSimulationWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) StartSimulationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSimulationWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StartSimulationWithContext), varargs...)
}

// StopApp mocks base method
func (m *MockSimSpaceWeaverAPI) StopApp(arg0 *simspaceweaver.StopAppInput) (*simspaceweaver.StopAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopApp", arg0)
	ret0, _ := ret[0].(*simspaceweaver.StopAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApp indicates an expected call of StopApp
func (mr *MockSimSpaceWeaverAPIMockRecorder) StopApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApp", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StopApp), arg0)
}

// StopAppRequest mocks base method
func (m *MockSimSpaceWeaverAPI) StopAppRequest(arg0 *simspaceweaver.StopAppInput) (*request.Request, *simspaceweaver.StopAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.StopAppOutput)
	return ret0, ret1
}

// StopAppRequest indicates an expected call of StopAppRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) StopAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAppRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StopAppRequest), arg0)
}

// StopAppWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) StopAppWithContext(arg0 context.Context, arg1 *simspaceweaver.StopAppInput, arg2 ...request.Option) (*simspaceweaver.StopAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopAppWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.StopAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopAppWithContext indicates an expected call of StopAppWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) StopAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAppWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StopAppWithContext), varargs...)
}

// StopClock mocks base method
func (m *MockSimSpaceWeaverAPI) StopClock(arg0 *simspaceweaver.StopClockInput) (*simspaceweaver.StopClockOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopClock", arg0)
	ret0, _ := ret[0].(*simspaceweaver.StopClockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopClock indicates an expected call of StopClock
func (mr *MockSimSpaceWeaverAPIMockRecorder) StopClock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopClock", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StopClock), arg0)
}

// StopClockRequest mocks base method
func (m *MockSimSpaceWeaverAPI) StopClockRequest(arg0 *simspaceweaver.StopClockInput) (*request.Request, *simspaceweaver.StopClockOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopClockRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.StopClockOutput)
	return ret0, ret1
}

// StopClockRequest indicates an expected call of StopClockRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) StopClockRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopClockRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StopClockRequest), arg0)
}

// StopClockWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) StopClockWithContext(arg0 context.Context, arg1 *simspaceweaver.StopClockInput, arg2 ...request.Option) (*simspaceweaver.StopClockOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopClockWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.StopClockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopClockWithContext indicates an expected call of StopClockWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) StopClockWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopClockWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StopClockWithContext), varargs...)
}

// StopSimulation mocks base method
func (m *MockSimSpaceWeaverAPI) StopSimulation(arg0 *simspaceweaver.StopSimulationInput) (*simspaceweaver.StopSimulationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSimulation", arg0)
	ret0, _ := ret[0].(*simspaceweaver.StopSimulationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSimulation indicates an expected call of StopSimulation
func (mr *MockSimSpaceWeaverAPIMockRecorder) StopSimulation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSimulation", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StopSimulation), arg0)
}

// StopSimulationRequest mocks base method
func (m *MockSimSpaceWeaverAPI) StopSimulationRequest(arg0 *simspaceweaver.StopSimulationInput) (*request.Request, *simspaceweaver.StopSimulationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSimulationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.StopSimulationOutput)
	return ret0, ret1
}

// StopSimulationRequest indicates an expected call of StopSimulationRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) StopSimulationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSimulationRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StopSimulationRequest), arg0)
}

// StopSimulationWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) StopSimulationWithContext(arg0 context.Context, arg1 *simspaceweaver.StopSimulationInput, arg2 ...request.Option) (*simspaceweaver.StopSimulationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopSimulationWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.StopSimulationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSimulationWithContext indicates an expected call of StopSimulationWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) StopSimulationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSimulationWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).StopSimulationWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockSimSpaceWeaverAPI) TagResource(arg0 *simspaceweaver.TagResourceInput) (*simspaceweaver.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*simspaceweaver.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockSimSpaceWeaverAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockSimSpaceWeaverAPI) TagResourceRequest(arg0 *simspaceweaver.TagResourceInput) (*request.Request, *simspaceweaver.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) TagResourceWithContext(arg0 context.Context, arg1 *simspaceweaver.TagResourceInput, arg2 ...request.Option) (*simspaceweaver.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockSimSpaceWeaverAPI) UntagResource(arg0 *simspaceweaver.UntagResourceInput) (*simspaceweaver.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*simspaceweaver.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockSimSpaceWeaverAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockSimSpaceWeaverAPI) UntagResourceRequest(arg0 *simspaceweaver.UntagResourceInput) (*request.Request, *simspaceweaver.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simspaceweaver.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockSimSpaceWeaverAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockSimSpaceWeaverAPI) UntagResourceWithContext(arg0 context.Context, arg1 *simspaceweaver.UntagResourceInput, arg2 ...request.Option) (*simspaceweaver.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*simspaceweaver.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockSimSpaceWeaverAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSimSpaceWeaverAPI)(nil).UntagResourceWithContext), varargs...)
}
