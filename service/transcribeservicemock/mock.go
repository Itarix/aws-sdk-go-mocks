// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/transcribeservice/transcribeserviceiface (interfaces: TranscribeServiceAPI)

// Package transcribeservicemock is a generated GoMock package.
package transcribeservicemock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	transcribeservice "github.com/aws/aws-sdk-go/service/transcribeservice"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTranscribeServiceAPI is a mock of TranscribeServiceAPI interface
type MockTranscribeServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTranscribeServiceAPIMockRecorder
}

// MockTranscribeServiceAPIMockRecorder is the mock recorder for MockTranscribeServiceAPI
type MockTranscribeServiceAPIMockRecorder struct {
	mock *MockTranscribeServiceAPI
}

// NewMockTranscribeServiceAPI creates a new mock instance
func NewMockTranscribeServiceAPI(ctrl *gomock.Controller) *MockTranscribeServiceAPI {
	mock := &MockTranscribeServiceAPI{ctrl: ctrl}
	mock.recorder = &MockTranscribeServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTranscribeServiceAPI) EXPECT() *MockTranscribeServiceAPIMockRecorder {
	return m.recorder
}

// CreateVocabulary mocks base method
func (m *MockTranscribeServiceAPI) CreateVocabulary(arg0 *transcribeservice.CreateVocabularyInput) (*transcribeservice.CreateVocabularyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVocabulary", arg0)
	ret0, _ := ret[0].(*transcribeservice.CreateVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVocabulary indicates an expected call of CreateVocabulary
func (mr *MockTranscribeServiceAPIMockRecorder) CreateVocabulary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVocabulary", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).CreateVocabulary), arg0)
}

// CreateVocabularyRequest mocks base method
func (m *MockTranscribeServiceAPI) CreateVocabularyRequest(arg0 *transcribeservice.CreateVocabularyInput) (*request.Request, *transcribeservice.CreateVocabularyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVocabularyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transcribeservice.CreateVocabularyOutput)
	return ret0, ret1
}

// CreateVocabularyRequest indicates an expected call of CreateVocabularyRequest
func (mr *MockTranscribeServiceAPIMockRecorder) CreateVocabularyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVocabularyRequest", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).CreateVocabularyRequest), arg0)
}

// CreateVocabularyWithContext mocks base method
func (m *MockTranscribeServiceAPI) CreateVocabularyWithContext(arg0 aws.Context, arg1 *transcribeservice.CreateVocabularyInput, arg2 ...request.Option) (*transcribeservice.CreateVocabularyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVocabularyWithContext", varargs...)
	ret0, _ := ret[0].(*transcribeservice.CreateVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVocabularyWithContext indicates an expected call of CreateVocabularyWithContext
func (mr *MockTranscribeServiceAPIMockRecorder) CreateVocabularyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVocabularyWithContext", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).CreateVocabularyWithContext), varargs...)
}

// DeleteVocabulary mocks base method
func (m *MockTranscribeServiceAPI) DeleteVocabulary(arg0 *transcribeservice.DeleteVocabularyInput) (*transcribeservice.DeleteVocabularyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVocabulary", arg0)
	ret0, _ := ret[0].(*transcribeservice.DeleteVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVocabulary indicates an expected call of DeleteVocabulary
func (mr *MockTranscribeServiceAPIMockRecorder) DeleteVocabulary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVocabulary", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).DeleteVocabulary), arg0)
}

// DeleteVocabularyRequest mocks base method
func (m *MockTranscribeServiceAPI) DeleteVocabularyRequest(arg0 *transcribeservice.DeleteVocabularyInput) (*request.Request, *transcribeservice.DeleteVocabularyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVocabularyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transcribeservice.DeleteVocabularyOutput)
	return ret0, ret1
}

// DeleteVocabularyRequest indicates an expected call of DeleteVocabularyRequest
func (mr *MockTranscribeServiceAPIMockRecorder) DeleteVocabularyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVocabularyRequest", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).DeleteVocabularyRequest), arg0)
}

// DeleteVocabularyWithContext mocks base method
func (m *MockTranscribeServiceAPI) DeleteVocabularyWithContext(arg0 aws.Context, arg1 *transcribeservice.DeleteVocabularyInput, arg2 ...request.Option) (*transcribeservice.DeleteVocabularyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVocabularyWithContext", varargs...)
	ret0, _ := ret[0].(*transcribeservice.DeleteVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVocabularyWithContext indicates an expected call of DeleteVocabularyWithContext
func (mr *MockTranscribeServiceAPIMockRecorder) DeleteVocabularyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVocabularyWithContext", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).DeleteVocabularyWithContext), varargs...)
}

// GetTranscriptionJob mocks base method
func (m *MockTranscribeServiceAPI) GetTranscriptionJob(arg0 *transcribeservice.GetTranscriptionJobInput) (*transcribeservice.GetTranscriptionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranscriptionJob", arg0)
	ret0, _ := ret[0].(*transcribeservice.GetTranscriptionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranscriptionJob indicates an expected call of GetTranscriptionJob
func (mr *MockTranscribeServiceAPIMockRecorder) GetTranscriptionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranscriptionJob", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).GetTranscriptionJob), arg0)
}

// GetTranscriptionJobRequest mocks base method
func (m *MockTranscribeServiceAPI) GetTranscriptionJobRequest(arg0 *transcribeservice.GetTranscriptionJobInput) (*request.Request, *transcribeservice.GetTranscriptionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranscriptionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transcribeservice.GetTranscriptionJobOutput)
	return ret0, ret1
}

// GetTranscriptionJobRequest indicates an expected call of GetTranscriptionJobRequest
func (mr *MockTranscribeServiceAPIMockRecorder) GetTranscriptionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranscriptionJobRequest", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).GetTranscriptionJobRequest), arg0)
}

// GetTranscriptionJobWithContext mocks base method
func (m *MockTranscribeServiceAPI) GetTranscriptionJobWithContext(arg0 aws.Context, arg1 *transcribeservice.GetTranscriptionJobInput, arg2 ...request.Option) (*transcribeservice.GetTranscriptionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTranscriptionJobWithContext", varargs...)
	ret0, _ := ret[0].(*transcribeservice.GetTranscriptionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranscriptionJobWithContext indicates an expected call of GetTranscriptionJobWithContext
func (mr *MockTranscribeServiceAPIMockRecorder) GetTranscriptionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranscriptionJobWithContext", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).GetTranscriptionJobWithContext), varargs...)
}

// GetVocabulary mocks base method
func (m *MockTranscribeServiceAPI) GetVocabulary(arg0 *transcribeservice.GetVocabularyInput) (*transcribeservice.GetVocabularyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVocabulary", arg0)
	ret0, _ := ret[0].(*transcribeservice.GetVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVocabulary indicates an expected call of GetVocabulary
func (mr *MockTranscribeServiceAPIMockRecorder) GetVocabulary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVocabulary", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).GetVocabulary), arg0)
}

// GetVocabularyRequest mocks base method
func (m *MockTranscribeServiceAPI) GetVocabularyRequest(arg0 *transcribeservice.GetVocabularyInput) (*request.Request, *transcribeservice.GetVocabularyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVocabularyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transcribeservice.GetVocabularyOutput)
	return ret0, ret1
}

// GetVocabularyRequest indicates an expected call of GetVocabularyRequest
func (mr *MockTranscribeServiceAPIMockRecorder) GetVocabularyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVocabularyRequest", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).GetVocabularyRequest), arg0)
}

// GetVocabularyWithContext mocks base method
func (m *MockTranscribeServiceAPI) GetVocabularyWithContext(arg0 aws.Context, arg1 *transcribeservice.GetVocabularyInput, arg2 ...request.Option) (*transcribeservice.GetVocabularyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVocabularyWithContext", varargs...)
	ret0, _ := ret[0].(*transcribeservice.GetVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVocabularyWithContext indicates an expected call of GetVocabularyWithContext
func (mr *MockTranscribeServiceAPIMockRecorder) GetVocabularyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVocabularyWithContext", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).GetVocabularyWithContext), varargs...)
}

// ListTranscriptionJobs mocks base method
func (m *MockTranscribeServiceAPI) ListTranscriptionJobs(arg0 *transcribeservice.ListTranscriptionJobsInput) (*transcribeservice.ListTranscriptionJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTranscriptionJobs", arg0)
	ret0, _ := ret[0].(*transcribeservice.ListTranscriptionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTranscriptionJobs indicates an expected call of ListTranscriptionJobs
func (mr *MockTranscribeServiceAPIMockRecorder) ListTranscriptionJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTranscriptionJobs", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).ListTranscriptionJobs), arg0)
}

// ListTranscriptionJobsPages mocks base method
func (m *MockTranscribeServiceAPI) ListTranscriptionJobsPages(arg0 *transcribeservice.ListTranscriptionJobsInput, arg1 func(*transcribeservice.ListTranscriptionJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTranscriptionJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTranscriptionJobsPages indicates an expected call of ListTranscriptionJobsPages
func (mr *MockTranscribeServiceAPIMockRecorder) ListTranscriptionJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTranscriptionJobsPages", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).ListTranscriptionJobsPages), arg0, arg1)
}

// ListTranscriptionJobsPagesWithContext mocks base method
func (m *MockTranscribeServiceAPI) ListTranscriptionJobsPagesWithContext(arg0 aws.Context, arg1 *transcribeservice.ListTranscriptionJobsInput, arg2 func(*transcribeservice.ListTranscriptionJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTranscriptionJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTranscriptionJobsPagesWithContext indicates an expected call of ListTranscriptionJobsPagesWithContext
func (mr *MockTranscribeServiceAPIMockRecorder) ListTranscriptionJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTranscriptionJobsPagesWithContext", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).ListTranscriptionJobsPagesWithContext), varargs...)
}

// ListTranscriptionJobsRequest mocks base method
func (m *MockTranscribeServiceAPI) ListTranscriptionJobsRequest(arg0 *transcribeservice.ListTranscriptionJobsInput) (*request.Request, *transcribeservice.ListTranscriptionJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTranscriptionJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transcribeservice.ListTranscriptionJobsOutput)
	return ret0, ret1
}

// ListTranscriptionJobsRequest indicates an expected call of ListTranscriptionJobsRequest
func (mr *MockTranscribeServiceAPIMockRecorder) ListTranscriptionJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTranscriptionJobsRequest", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).ListTranscriptionJobsRequest), arg0)
}

// ListTranscriptionJobsWithContext mocks base method
func (m *MockTranscribeServiceAPI) ListTranscriptionJobsWithContext(arg0 aws.Context, arg1 *transcribeservice.ListTranscriptionJobsInput, arg2 ...request.Option) (*transcribeservice.ListTranscriptionJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTranscriptionJobsWithContext", varargs...)
	ret0, _ := ret[0].(*transcribeservice.ListTranscriptionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTranscriptionJobsWithContext indicates an expected call of ListTranscriptionJobsWithContext
func (mr *MockTranscribeServiceAPIMockRecorder) ListTranscriptionJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTranscriptionJobsWithContext", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).ListTranscriptionJobsWithContext), varargs...)
}

// ListVocabularies mocks base method
func (m *MockTranscribeServiceAPI) ListVocabularies(arg0 *transcribeservice.ListVocabulariesInput) (*transcribeservice.ListVocabulariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVocabularies", arg0)
	ret0, _ := ret[0].(*transcribeservice.ListVocabulariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVocabularies indicates an expected call of ListVocabularies
func (mr *MockTranscribeServiceAPIMockRecorder) ListVocabularies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVocabularies", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).ListVocabularies), arg0)
}

// ListVocabulariesPages mocks base method
func (m *MockTranscribeServiceAPI) ListVocabulariesPages(arg0 *transcribeservice.ListVocabulariesInput, arg1 func(*transcribeservice.ListVocabulariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVocabulariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVocabulariesPages indicates an expected call of ListVocabulariesPages
func (mr *MockTranscribeServiceAPIMockRecorder) ListVocabulariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVocabulariesPages", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).ListVocabulariesPages), arg0, arg1)
}

// ListVocabulariesPagesWithContext mocks base method
func (m *MockTranscribeServiceAPI) ListVocabulariesPagesWithContext(arg0 aws.Context, arg1 *transcribeservice.ListVocabulariesInput, arg2 func(*transcribeservice.ListVocabulariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVocabulariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVocabulariesPagesWithContext indicates an expected call of ListVocabulariesPagesWithContext
func (mr *MockTranscribeServiceAPIMockRecorder) ListVocabulariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVocabulariesPagesWithContext", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).ListVocabulariesPagesWithContext), varargs...)
}

// ListVocabulariesRequest mocks base method
func (m *MockTranscribeServiceAPI) ListVocabulariesRequest(arg0 *transcribeservice.ListVocabulariesInput) (*request.Request, *transcribeservice.ListVocabulariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVocabulariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transcribeservice.ListVocabulariesOutput)
	return ret0, ret1
}

// ListVocabulariesRequest indicates an expected call of ListVocabulariesRequest
func (mr *MockTranscribeServiceAPIMockRecorder) ListVocabulariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVocabulariesRequest", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).ListVocabulariesRequest), arg0)
}

// ListVocabulariesWithContext mocks base method
func (m *MockTranscribeServiceAPI) ListVocabulariesWithContext(arg0 aws.Context, arg1 *transcribeservice.ListVocabulariesInput, arg2 ...request.Option) (*transcribeservice.ListVocabulariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVocabulariesWithContext", varargs...)
	ret0, _ := ret[0].(*transcribeservice.ListVocabulariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVocabulariesWithContext indicates an expected call of ListVocabulariesWithContext
func (mr *MockTranscribeServiceAPIMockRecorder) ListVocabulariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVocabulariesWithContext", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).ListVocabulariesWithContext), varargs...)
}

// StartTranscriptionJob mocks base method
func (m *MockTranscribeServiceAPI) StartTranscriptionJob(arg0 *transcribeservice.StartTranscriptionJobInput) (*transcribeservice.StartTranscriptionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTranscriptionJob", arg0)
	ret0, _ := ret[0].(*transcribeservice.StartTranscriptionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTranscriptionJob indicates an expected call of StartTranscriptionJob
func (mr *MockTranscribeServiceAPIMockRecorder) StartTranscriptionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTranscriptionJob", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).StartTranscriptionJob), arg0)
}

// StartTranscriptionJobRequest mocks base method
func (m *MockTranscribeServiceAPI) StartTranscriptionJobRequest(arg0 *transcribeservice.StartTranscriptionJobInput) (*request.Request, *transcribeservice.StartTranscriptionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTranscriptionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transcribeservice.StartTranscriptionJobOutput)
	return ret0, ret1
}

// StartTranscriptionJobRequest indicates an expected call of StartTranscriptionJobRequest
func (mr *MockTranscribeServiceAPIMockRecorder) StartTranscriptionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTranscriptionJobRequest", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).StartTranscriptionJobRequest), arg0)
}

// StartTranscriptionJobWithContext mocks base method
func (m *MockTranscribeServiceAPI) StartTranscriptionJobWithContext(arg0 aws.Context, arg1 *transcribeservice.StartTranscriptionJobInput, arg2 ...request.Option) (*transcribeservice.StartTranscriptionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTranscriptionJobWithContext", varargs...)
	ret0, _ := ret[0].(*transcribeservice.StartTranscriptionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTranscriptionJobWithContext indicates an expected call of StartTranscriptionJobWithContext
func (mr *MockTranscribeServiceAPIMockRecorder) StartTranscriptionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTranscriptionJobWithContext", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).StartTranscriptionJobWithContext), varargs...)
}

// UpdateVocabulary mocks base method
func (m *MockTranscribeServiceAPI) UpdateVocabulary(arg0 *transcribeservice.UpdateVocabularyInput) (*transcribeservice.UpdateVocabularyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVocabulary", arg0)
	ret0, _ := ret[0].(*transcribeservice.UpdateVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVocabulary indicates an expected call of UpdateVocabulary
func (mr *MockTranscribeServiceAPIMockRecorder) UpdateVocabulary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVocabulary", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).UpdateVocabulary), arg0)
}

// UpdateVocabularyRequest mocks base method
func (m *MockTranscribeServiceAPI) UpdateVocabularyRequest(arg0 *transcribeservice.UpdateVocabularyInput) (*request.Request, *transcribeservice.UpdateVocabularyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVocabularyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transcribeservice.UpdateVocabularyOutput)
	return ret0, ret1
}

// UpdateVocabularyRequest indicates an expected call of UpdateVocabularyRequest
func (mr *MockTranscribeServiceAPIMockRecorder) UpdateVocabularyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVocabularyRequest", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).UpdateVocabularyRequest), arg0)
}

// UpdateVocabularyWithContext mocks base method
func (m *MockTranscribeServiceAPI) UpdateVocabularyWithContext(arg0 aws.Context, arg1 *transcribeservice.UpdateVocabularyInput, arg2 ...request.Option) (*transcribeservice.UpdateVocabularyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVocabularyWithContext", varargs...)
	ret0, _ := ret[0].(*transcribeservice.UpdateVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVocabularyWithContext indicates an expected call of UpdateVocabularyWithContext
func (mr *MockTranscribeServiceAPIMockRecorder) UpdateVocabularyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVocabularyWithContext", reflect.TypeOf((*MockTranscribeServiceAPI)(nil).UpdateVocabularyWithContext), varargs...)
}
