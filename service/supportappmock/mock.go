// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/supportapp/supportappiface (interfaces: SupportAppAPI)

// Package supportappmock is a generated GoMock package.
package supportappmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	supportapp "github.com/aws/aws-sdk-go/service/supportapp"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSupportAppAPI is a mock of SupportAppAPI interface
type MockSupportAppAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSupportAppAPIMockRecorder
}

// MockSupportAppAPIMockRecorder is the mock recorder for MockSupportAppAPI
type MockSupportAppAPIMockRecorder struct {
	mock *MockSupportAppAPI
}

// NewMockSupportAppAPI creates a new mock instance
func NewMockSupportAppAPI(ctrl *gomock.Controller) *MockSupportAppAPI {
	mock := &MockSupportAppAPI{ctrl: ctrl}
	mock.recorder = &MockSupportAppAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSupportAppAPI) EXPECT() *MockSupportAppAPIMockRecorder {
	return m.recorder
}

// CreateSlackChannelConfiguration mocks base method
func (m *MockSupportAppAPI) CreateSlackChannelConfiguration(arg0 *supportapp.CreateSlackChannelConfigurationInput) (*supportapp.CreateSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlackChannelConfiguration", arg0)
	ret0, _ := ret[0].(*supportapp.CreateSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlackChannelConfiguration indicates an expected call of CreateSlackChannelConfiguration
func (mr *MockSupportAppAPIMockRecorder) CreateSlackChannelConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlackChannelConfiguration", reflect.TypeOf((*MockSupportAppAPI)(nil).CreateSlackChannelConfiguration), arg0)
}

// CreateSlackChannelConfigurationRequest mocks base method
func (m *MockSupportAppAPI) CreateSlackChannelConfigurationRequest(arg0 *supportapp.CreateSlackChannelConfigurationInput) (*request.Request, *supportapp.CreateSlackChannelConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlackChannelConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*supportapp.CreateSlackChannelConfigurationOutput)
	return ret0, ret1
}

// CreateSlackChannelConfigurationRequest indicates an expected call of CreateSlackChannelConfigurationRequest
func (mr *MockSupportAppAPIMockRecorder) CreateSlackChannelConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlackChannelConfigurationRequest", reflect.TypeOf((*MockSupportAppAPI)(nil).CreateSlackChannelConfigurationRequest), arg0)
}

// CreateSlackChannelConfigurationWithContext mocks base method
func (m *MockSupportAppAPI) CreateSlackChannelConfigurationWithContext(arg0 context.Context, arg1 *supportapp.CreateSlackChannelConfigurationInput, arg2 ...request.Option) (*supportapp.CreateSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSlackChannelConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*supportapp.CreateSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlackChannelConfigurationWithContext indicates an expected call of CreateSlackChannelConfigurationWithContext
func (mr *MockSupportAppAPIMockRecorder) CreateSlackChannelConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlackChannelConfigurationWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).CreateSlackChannelConfigurationWithContext), varargs...)
}

// DeleteAccountAlias mocks base method
func (m *MockSupportAppAPI) DeleteAccountAlias(arg0 *supportapp.DeleteAccountAliasInput) (*supportapp.DeleteAccountAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountAlias", arg0)
	ret0, _ := ret[0].(*supportapp.DeleteAccountAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccountAlias indicates an expected call of DeleteAccountAlias
func (mr *MockSupportAppAPIMockRecorder) DeleteAccountAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountAlias", reflect.TypeOf((*MockSupportAppAPI)(nil).DeleteAccountAlias), arg0)
}

// DeleteAccountAliasRequest mocks base method
func (m *MockSupportAppAPI) DeleteAccountAliasRequest(arg0 *supportapp.DeleteAccountAliasInput) (*request.Request, *supportapp.DeleteAccountAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*supportapp.DeleteAccountAliasOutput)
	return ret0, ret1
}

// DeleteAccountAliasRequest indicates an expected call of DeleteAccountAliasRequest
func (mr *MockSupportAppAPIMockRecorder) DeleteAccountAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountAliasRequest", reflect.TypeOf((*MockSupportAppAPI)(nil).DeleteAccountAliasRequest), arg0)
}

// DeleteAccountAliasWithContext mocks base method
func (m *MockSupportAppAPI) DeleteAccountAliasWithContext(arg0 context.Context, arg1 *supportapp.DeleteAccountAliasInput, arg2 ...request.Option) (*supportapp.DeleteAccountAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccountAliasWithContext", varargs...)
	ret0, _ := ret[0].(*supportapp.DeleteAccountAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccountAliasWithContext indicates an expected call of DeleteAccountAliasWithContext
func (mr *MockSupportAppAPIMockRecorder) DeleteAccountAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountAliasWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).DeleteAccountAliasWithContext), varargs...)
}

// DeleteSlackChannelConfiguration mocks base method
func (m *MockSupportAppAPI) DeleteSlackChannelConfiguration(arg0 *supportapp.DeleteSlackChannelConfigurationInput) (*supportapp.DeleteSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackChannelConfiguration", arg0)
	ret0, _ := ret[0].(*supportapp.DeleteSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackChannelConfiguration indicates an expected call of DeleteSlackChannelConfiguration
func (mr *MockSupportAppAPIMockRecorder) DeleteSlackChannelConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackChannelConfiguration", reflect.TypeOf((*MockSupportAppAPI)(nil).DeleteSlackChannelConfiguration), arg0)
}

// DeleteSlackChannelConfigurationRequest mocks base method
func (m *MockSupportAppAPI) DeleteSlackChannelConfigurationRequest(arg0 *supportapp.DeleteSlackChannelConfigurationInput) (*request.Request, *supportapp.DeleteSlackChannelConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackChannelConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*supportapp.DeleteSlackChannelConfigurationOutput)
	return ret0, ret1
}

// DeleteSlackChannelConfigurationRequest indicates an expected call of DeleteSlackChannelConfigurationRequest
func (mr *MockSupportAppAPIMockRecorder) DeleteSlackChannelConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackChannelConfigurationRequest", reflect.TypeOf((*MockSupportAppAPI)(nil).DeleteSlackChannelConfigurationRequest), arg0)
}

// DeleteSlackChannelConfigurationWithContext mocks base method
func (m *MockSupportAppAPI) DeleteSlackChannelConfigurationWithContext(arg0 context.Context, arg1 *supportapp.DeleteSlackChannelConfigurationInput, arg2 ...request.Option) (*supportapp.DeleteSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSlackChannelConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*supportapp.DeleteSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackChannelConfigurationWithContext indicates an expected call of DeleteSlackChannelConfigurationWithContext
func (mr *MockSupportAppAPIMockRecorder) DeleteSlackChannelConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackChannelConfigurationWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).DeleteSlackChannelConfigurationWithContext), varargs...)
}

// DeleteSlackWorkspaceConfiguration mocks base method
func (m *MockSupportAppAPI) DeleteSlackWorkspaceConfiguration(arg0 *supportapp.DeleteSlackWorkspaceConfigurationInput) (*supportapp.DeleteSlackWorkspaceConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackWorkspaceConfiguration", arg0)
	ret0, _ := ret[0].(*supportapp.DeleteSlackWorkspaceConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackWorkspaceConfiguration indicates an expected call of DeleteSlackWorkspaceConfiguration
func (mr *MockSupportAppAPIMockRecorder) DeleteSlackWorkspaceConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackWorkspaceConfiguration", reflect.TypeOf((*MockSupportAppAPI)(nil).DeleteSlackWorkspaceConfiguration), arg0)
}

// DeleteSlackWorkspaceConfigurationRequest mocks base method
func (m *MockSupportAppAPI) DeleteSlackWorkspaceConfigurationRequest(arg0 *supportapp.DeleteSlackWorkspaceConfigurationInput) (*request.Request, *supportapp.DeleteSlackWorkspaceConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackWorkspaceConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*supportapp.DeleteSlackWorkspaceConfigurationOutput)
	return ret0, ret1
}

// DeleteSlackWorkspaceConfigurationRequest indicates an expected call of DeleteSlackWorkspaceConfigurationRequest
func (mr *MockSupportAppAPIMockRecorder) DeleteSlackWorkspaceConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackWorkspaceConfigurationRequest", reflect.TypeOf((*MockSupportAppAPI)(nil).DeleteSlackWorkspaceConfigurationRequest), arg0)
}

// DeleteSlackWorkspaceConfigurationWithContext mocks base method
func (m *MockSupportAppAPI) DeleteSlackWorkspaceConfigurationWithContext(arg0 context.Context, arg1 *supportapp.DeleteSlackWorkspaceConfigurationInput, arg2 ...request.Option) (*supportapp.DeleteSlackWorkspaceConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSlackWorkspaceConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*supportapp.DeleteSlackWorkspaceConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackWorkspaceConfigurationWithContext indicates an expected call of DeleteSlackWorkspaceConfigurationWithContext
func (mr *MockSupportAppAPIMockRecorder) DeleteSlackWorkspaceConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackWorkspaceConfigurationWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).DeleteSlackWorkspaceConfigurationWithContext), varargs...)
}

// GetAccountAlias mocks base method
func (m *MockSupportAppAPI) GetAccountAlias(arg0 *supportapp.GetAccountAliasInput) (*supportapp.GetAccountAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAlias", arg0)
	ret0, _ := ret[0].(*supportapp.GetAccountAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAlias indicates an expected call of GetAccountAlias
func (mr *MockSupportAppAPIMockRecorder) GetAccountAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAlias", reflect.TypeOf((*MockSupportAppAPI)(nil).GetAccountAlias), arg0)
}

// GetAccountAliasRequest mocks base method
func (m *MockSupportAppAPI) GetAccountAliasRequest(arg0 *supportapp.GetAccountAliasInput) (*request.Request, *supportapp.GetAccountAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*supportapp.GetAccountAliasOutput)
	return ret0, ret1
}

// GetAccountAliasRequest indicates an expected call of GetAccountAliasRequest
func (mr *MockSupportAppAPIMockRecorder) GetAccountAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAliasRequest", reflect.TypeOf((*MockSupportAppAPI)(nil).GetAccountAliasRequest), arg0)
}

// GetAccountAliasWithContext mocks base method
func (m *MockSupportAppAPI) GetAccountAliasWithContext(arg0 context.Context, arg1 *supportapp.GetAccountAliasInput, arg2 ...request.Option) (*supportapp.GetAccountAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountAliasWithContext", varargs...)
	ret0, _ := ret[0].(*supportapp.GetAccountAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAliasWithContext indicates an expected call of GetAccountAliasWithContext
func (mr *MockSupportAppAPIMockRecorder) GetAccountAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAliasWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).GetAccountAliasWithContext), varargs...)
}

// ListSlackChannelConfigurations mocks base method
func (m *MockSupportAppAPI) ListSlackChannelConfigurations(arg0 *supportapp.ListSlackChannelConfigurationsInput) (*supportapp.ListSlackChannelConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlackChannelConfigurations", arg0)
	ret0, _ := ret[0].(*supportapp.ListSlackChannelConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlackChannelConfigurations indicates an expected call of ListSlackChannelConfigurations
func (mr *MockSupportAppAPIMockRecorder) ListSlackChannelConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlackChannelConfigurations", reflect.TypeOf((*MockSupportAppAPI)(nil).ListSlackChannelConfigurations), arg0)
}

// ListSlackChannelConfigurationsPages mocks base method
func (m *MockSupportAppAPI) ListSlackChannelConfigurationsPages(arg0 *supportapp.ListSlackChannelConfigurationsInput, arg1 func(*supportapp.ListSlackChannelConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlackChannelConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSlackChannelConfigurationsPages indicates an expected call of ListSlackChannelConfigurationsPages
func (mr *MockSupportAppAPIMockRecorder) ListSlackChannelConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlackChannelConfigurationsPages", reflect.TypeOf((*MockSupportAppAPI)(nil).ListSlackChannelConfigurationsPages), arg0, arg1)
}

// ListSlackChannelConfigurationsPagesWithContext mocks base method
func (m *MockSupportAppAPI) ListSlackChannelConfigurationsPagesWithContext(arg0 context.Context, arg1 *supportapp.ListSlackChannelConfigurationsInput, arg2 func(*supportapp.ListSlackChannelConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSlackChannelConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSlackChannelConfigurationsPagesWithContext indicates an expected call of ListSlackChannelConfigurationsPagesWithContext
func (mr *MockSupportAppAPIMockRecorder) ListSlackChannelConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlackChannelConfigurationsPagesWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).ListSlackChannelConfigurationsPagesWithContext), varargs...)
}

// ListSlackChannelConfigurationsRequest mocks base method
func (m *MockSupportAppAPI) ListSlackChannelConfigurationsRequest(arg0 *supportapp.ListSlackChannelConfigurationsInput) (*request.Request, *supportapp.ListSlackChannelConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlackChannelConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*supportapp.ListSlackChannelConfigurationsOutput)
	return ret0, ret1
}

// ListSlackChannelConfigurationsRequest indicates an expected call of ListSlackChannelConfigurationsRequest
func (mr *MockSupportAppAPIMockRecorder) ListSlackChannelConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlackChannelConfigurationsRequest", reflect.TypeOf((*MockSupportAppAPI)(nil).ListSlackChannelConfigurationsRequest), arg0)
}

// ListSlackChannelConfigurationsWithContext mocks base method
func (m *MockSupportAppAPI) ListSlackChannelConfigurationsWithContext(arg0 context.Context, arg1 *supportapp.ListSlackChannelConfigurationsInput, arg2 ...request.Option) (*supportapp.ListSlackChannelConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSlackChannelConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*supportapp.ListSlackChannelConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlackChannelConfigurationsWithContext indicates an expected call of ListSlackChannelConfigurationsWithContext
func (mr *MockSupportAppAPIMockRecorder) ListSlackChannelConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlackChannelConfigurationsWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).ListSlackChannelConfigurationsWithContext), varargs...)
}

// ListSlackWorkspaceConfigurations mocks base method
func (m *MockSupportAppAPI) ListSlackWorkspaceConfigurations(arg0 *supportapp.ListSlackWorkspaceConfigurationsInput) (*supportapp.ListSlackWorkspaceConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlackWorkspaceConfigurations", arg0)
	ret0, _ := ret[0].(*supportapp.ListSlackWorkspaceConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlackWorkspaceConfigurations indicates an expected call of ListSlackWorkspaceConfigurations
func (mr *MockSupportAppAPIMockRecorder) ListSlackWorkspaceConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlackWorkspaceConfigurations", reflect.TypeOf((*MockSupportAppAPI)(nil).ListSlackWorkspaceConfigurations), arg0)
}

// ListSlackWorkspaceConfigurationsPages mocks base method
func (m *MockSupportAppAPI) ListSlackWorkspaceConfigurationsPages(arg0 *supportapp.ListSlackWorkspaceConfigurationsInput, arg1 func(*supportapp.ListSlackWorkspaceConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlackWorkspaceConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSlackWorkspaceConfigurationsPages indicates an expected call of ListSlackWorkspaceConfigurationsPages
func (mr *MockSupportAppAPIMockRecorder) ListSlackWorkspaceConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlackWorkspaceConfigurationsPages", reflect.TypeOf((*MockSupportAppAPI)(nil).ListSlackWorkspaceConfigurationsPages), arg0, arg1)
}

// ListSlackWorkspaceConfigurationsPagesWithContext mocks base method
func (m *MockSupportAppAPI) ListSlackWorkspaceConfigurationsPagesWithContext(arg0 context.Context, arg1 *supportapp.ListSlackWorkspaceConfigurationsInput, arg2 func(*supportapp.ListSlackWorkspaceConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSlackWorkspaceConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSlackWorkspaceConfigurationsPagesWithContext indicates an expected call of ListSlackWorkspaceConfigurationsPagesWithContext
func (mr *MockSupportAppAPIMockRecorder) ListSlackWorkspaceConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlackWorkspaceConfigurationsPagesWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).ListSlackWorkspaceConfigurationsPagesWithContext), varargs...)
}

// ListSlackWorkspaceConfigurationsRequest mocks base method
func (m *MockSupportAppAPI) ListSlackWorkspaceConfigurationsRequest(arg0 *supportapp.ListSlackWorkspaceConfigurationsInput) (*request.Request, *supportapp.ListSlackWorkspaceConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlackWorkspaceConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*supportapp.ListSlackWorkspaceConfigurationsOutput)
	return ret0, ret1
}

// ListSlackWorkspaceConfigurationsRequest indicates an expected call of ListSlackWorkspaceConfigurationsRequest
func (mr *MockSupportAppAPIMockRecorder) ListSlackWorkspaceConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlackWorkspaceConfigurationsRequest", reflect.TypeOf((*MockSupportAppAPI)(nil).ListSlackWorkspaceConfigurationsRequest), arg0)
}

// ListSlackWorkspaceConfigurationsWithContext mocks base method
func (m *MockSupportAppAPI) ListSlackWorkspaceConfigurationsWithContext(arg0 context.Context, arg1 *supportapp.ListSlackWorkspaceConfigurationsInput, arg2 ...request.Option) (*supportapp.ListSlackWorkspaceConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSlackWorkspaceConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*supportapp.ListSlackWorkspaceConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlackWorkspaceConfigurationsWithContext indicates an expected call of ListSlackWorkspaceConfigurationsWithContext
func (mr *MockSupportAppAPIMockRecorder) ListSlackWorkspaceConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlackWorkspaceConfigurationsWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).ListSlackWorkspaceConfigurationsWithContext), varargs...)
}

// PutAccountAlias mocks base method
func (m *MockSupportAppAPI) PutAccountAlias(arg0 *supportapp.PutAccountAliasInput) (*supportapp.PutAccountAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountAlias", arg0)
	ret0, _ := ret[0].(*supportapp.PutAccountAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountAlias indicates an expected call of PutAccountAlias
func (mr *MockSupportAppAPIMockRecorder) PutAccountAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountAlias", reflect.TypeOf((*MockSupportAppAPI)(nil).PutAccountAlias), arg0)
}

// PutAccountAliasRequest mocks base method
func (m *MockSupportAppAPI) PutAccountAliasRequest(arg0 *supportapp.PutAccountAliasInput) (*request.Request, *supportapp.PutAccountAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*supportapp.PutAccountAliasOutput)
	return ret0, ret1
}

// PutAccountAliasRequest indicates an expected call of PutAccountAliasRequest
func (mr *MockSupportAppAPIMockRecorder) PutAccountAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountAliasRequest", reflect.TypeOf((*MockSupportAppAPI)(nil).PutAccountAliasRequest), arg0)
}

// PutAccountAliasWithContext mocks base method
func (m *MockSupportAppAPI) PutAccountAliasWithContext(arg0 context.Context, arg1 *supportapp.PutAccountAliasInput, arg2 ...request.Option) (*supportapp.PutAccountAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountAliasWithContext", varargs...)
	ret0, _ := ret[0].(*supportapp.PutAccountAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountAliasWithContext indicates an expected call of PutAccountAliasWithContext
func (mr *MockSupportAppAPIMockRecorder) PutAccountAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountAliasWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).PutAccountAliasWithContext), varargs...)
}

// UpdateSlackChannelConfiguration mocks base method
func (m *MockSupportAppAPI) UpdateSlackChannelConfiguration(arg0 *supportapp.UpdateSlackChannelConfigurationInput) (*supportapp.UpdateSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlackChannelConfiguration", arg0)
	ret0, _ := ret[0].(*supportapp.UpdateSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlackChannelConfiguration indicates an expected call of UpdateSlackChannelConfiguration
func (mr *MockSupportAppAPIMockRecorder) UpdateSlackChannelConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlackChannelConfiguration", reflect.TypeOf((*MockSupportAppAPI)(nil).UpdateSlackChannelConfiguration), arg0)
}

// UpdateSlackChannelConfigurationRequest mocks base method
func (m *MockSupportAppAPI) UpdateSlackChannelConfigurationRequest(arg0 *supportapp.UpdateSlackChannelConfigurationInput) (*request.Request, *supportapp.UpdateSlackChannelConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlackChannelConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*supportapp.UpdateSlackChannelConfigurationOutput)
	return ret0, ret1
}

// UpdateSlackChannelConfigurationRequest indicates an expected call of UpdateSlackChannelConfigurationRequest
func (mr *MockSupportAppAPIMockRecorder) UpdateSlackChannelConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlackChannelConfigurationRequest", reflect.TypeOf((*MockSupportAppAPI)(nil).UpdateSlackChannelConfigurationRequest), arg0)
}

// UpdateSlackChannelConfigurationWithContext mocks base method
func (m *MockSupportAppAPI) UpdateSlackChannelConfigurationWithContext(arg0 context.Context, arg1 *supportapp.UpdateSlackChannelConfigurationInput, arg2 ...request.Option) (*supportapp.UpdateSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSlackChannelConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*supportapp.UpdateSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlackChannelConfigurationWithContext indicates an expected call of UpdateSlackChannelConfigurationWithContext
func (mr *MockSupportAppAPIMockRecorder) UpdateSlackChannelConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlackChannelConfigurationWithContext", reflect.TypeOf((*MockSupportAppAPI)(nil).UpdateSlackChannelConfigurationWithContext), varargs...)
}
