// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/b2bi/b2biiface (interfaces: B2biAPI)

// Package b2bimock is a generated GoMock package.
package b2bimock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	b2bi "github.com/aws/aws-sdk-go/service/b2bi"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockB2biAPI is a mock of B2biAPI interface
type MockB2biAPI struct {
	ctrl     *gomock.Controller
	recorder *MockB2biAPIMockRecorder
}

// MockB2biAPIMockRecorder is the mock recorder for MockB2biAPI
type MockB2biAPIMockRecorder struct {
	mock *MockB2biAPI
}

// NewMockB2biAPI creates a new mock instance
func NewMockB2biAPI(ctrl *gomock.Controller) *MockB2biAPI {
	mock := &MockB2biAPI{ctrl: ctrl}
	mock.recorder = &MockB2biAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockB2biAPI) EXPECT() *MockB2biAPIMockRecorder {
	return m.recorder
}

// CreateCapability mocks base method
func (m *MockB2biAPI) CreateCapability(arg0 *b2bi.CreateCapabilityInput) (*b2bi.CreateCapabilityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCapability", arg0)
	ret0, _ := ret[0].(*b2bi.CreateCapabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCapability indicates an expected call of CreateCapability
func (mr *MockB2biAPIMockRecorder) CreateCapability(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCapability", reflect.TypeOf((*MockB2biAPI)(nil).CreateCapability), arg0)
}

// CreateCapabilityRequest mocks base method
func (m *MockB2biAPI) CreateCapabilityRequest(arg0 *b2bi.CreateCapabilityInput) (*request.Request, *b2bi.CreateCapabilityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCapabilityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.CreateCapabilityOutput)
	return ret0, ret1
}

// CreateCapabilityRequest indicates an expected call of CreateCapabilityRequest
func (mr *MockB2biAPIMockRecorder) CreateCapabilityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCapabilityRequest", reflect.TypeOf((*MockB2biAPI)(nil).CreateCapabilityRequest), arg0)
}

// CreateCapabilityWithContext mocks base method
func (m *MockB2biAPI) CreateCapabilityWithContext(arg0 context.Context, arg1 *b2bi.CreateCapabilityInput, arg2 ...request.Option) (*b2bi.CreateCapabilityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCapabilityWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.CreateCapabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCapabilityWithContext indicates an expected call of CreateCapabilityWithContext
func (mr *MockB2biAPIMockRecorder) CreateCapabilityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCapabilityWithContext", reflect.TypeOf((*MockB2biAPI)(nil).CreateCapabilityWithContext), varargs...)
}

// CreatePartnership mocks base method
func (m *MockB2biAPI) CreatePartnership(arg0 *b2bi.CreatePartnershipInput) (*b2bi.CreatePartnershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartnership", arg0)
	ret0, _ := ret[0].(*b2bi.CreatePartnershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartnership indicates an expected call of CreatePartnership
func (mr *MockB2biAPIMockRecorder) CreatePartnership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnership", reflect.TypeOf((*MockB2biAPI)(nil).CreatePartnership), arg0)
}

// CreatePartnershipRequest mocks base method
func (m *MockB2biAPI) CreatePartnershipRequest(arg0 *b2bi.CreatePartnershipInput) (*request.Request, *b2bi.CreatePartnershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartnershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.CreatePartnershipOutput)
	return ret0, ret1
}

// CreatePartnershipRequest indicates an expected call of CreatePartnershipRequest
func (mr *MockB2biAPIMockRecorder) CreatePartnershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnershipRequest", reflect.TypeOf((*MockB2biAPI)(nil).CreatePartnershipRequest), arg0)
}

// CreatePartnershipWithContext mocks base method
func (m *MockB2biAPI) CreatePartnershipWithContext(arg0 context.Context, arg1 *b2bi.CreatePartnershipInput, arg2 ...request.Option) (*b2bi.CreatePartnershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePartnershipWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.CreatePartnershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartnershipWithContext indicates an expected call of CreatePartnershipWithContext
func (mr *MockB2biAPIMockRecorder) CreatePartnershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnershipWithContext", reflect.TypeOf((*MockB2biAPI)(nil).CreatePartnershipWithContext), varargs...)
}

// CreateProfile mocks base method
func (m *MockB2biAPI) CreateProfile(arg0 *b2bi.CreateProfileInput) (*b2bi.CreateProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0)
	ret0, _ := ret[0].(*b2bi.CreateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockB2biAPIMockRecorder) CreateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockB2biAPI)(nil).CreateProfile), arg0)
}

// CreateProfileRequest mocks base method
func (m *MockB2biAPI) CreateProfileRequest(arg0 *b2bi.CreateProfileInput) (*request.Request, *b2bi.CreateProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.CreateProfileOutput)
	return ret0, ret1
}

// CreateProfileRequest indicates an expected call of CreateProfileRequest
func (mr *MockB2biAPIMockRecorder) CreateProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileRequest", reflect.TypeOf((*MockB2biAPI)(nil).CreateProfileRequest), arg0)
}

// CreateProfileWithContext mocks base method
func (m *MockB2biAPI) CreateProfileWithContext(arg0 context.Context, arg1 *b2bi.CreateProfileInput, arg2 ...request.Option) (*b2bi.CreateProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfileWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.CreateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfileWithContext indicates an expected call of CreateProfileWithContext
func (mr *MockB2biAPIMockRecorder) CreateProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileWithContext", reflect.TypeOf((*MockB2biAPI)(nil).CreateProfileWithContext), varargs...)
}

// CreateTransformer mocks base method
func (m *MockB2biAPI) CreateTransformer(arg0 *b2bi.CreateTransformerInput) (*b2bi.CreateTransformerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransformer", arg0)
	ret0, _ := ret[0].(*b2bi.CreateTransformerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransformer indicates an expected call of CreateTransformer
func (mr *MockB2biAPIMockRecorder) CreateTransformer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransformer", reflect.TypeOf((*MockB2biAPI)(nil).CreateTransformer), arg0)
}

// CreateTransformerRequest mocks base method
func (m *MockB2biAPI) CreateTransformerRequest(arg0 *b2bi.CreateTransformerInput) (*request.Request, *b2bi.CreateTransformerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransformerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.CreateTransformerOutput)
	return ret0, ret1
}

// CreateTransformerRequest indicates an expected call of CreateTransformerRequest
func (mr *MockB2biAPIMockRecorder) CreateTransformerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransformerRequest", reflect.TypeOf((*MockB2biAPI)(nil).CreateTransformerRequest), arg0)
}

// CreateTransformerWithContext mocks base method
func (m *MockB2biAPI) CreateTransformerWithContext(arg0 context.Context, arg1 *b2bi.CreateTransformerInput, arg2 ...request.Option) (*b2bi.CreateTransformerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransformerWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.CreateTransformerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransformerWithContext indicates an expected call of CreateTransformerWithContext
func (mr *MockB2biAPIMockRecorder) CreateTransformerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransformerWithContext", reflect.TypeOf((*MockB2biAPI)(nil).CreateTransformerWithContext), varargs...)
}

// DeleteCapability mocks base method
func (m *MockB2biAPI) DeleteCapability(arg0 *b2bi.DeleteCapabilityInput) (*b2bi.DeleteCapabilityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCapability", arg0)
	ret0, _ := ret[0].(*b2bi.DeleteCapabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCapability indicates an expected call of DeleteCapability
func (mr *MockB2biAPIMockRecorder) DeleteCapability(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCapability", reflect.TypeOf((*MockB2biAPI)(nil).DeleteCapability), arg0)
}

// DeleteCapabilityRequest mocks base method
func (m *MockB2biAPI) DeleteCapabilityRequest(arg0 *b2bi.DeleteCapabilityInput) (*request.Request, *b2bi.DeleteCapabilityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCapabilityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.DeleteCapabilityOutput)
	return ret0, ret1
}

// DeleteCapabilityRequest indicates an expected call of DeleteCapabilityRequest
func (mr *MockB2biAPIMockRecorder) DeleteCapabilityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCapabilityRequest", reflect.TypeOf((*MockB2biAPI)(nil).DeleteCapabilityRequest), arg0)
}

// DeleteCapabilityWithContext mocks base method
func (m *MockB2biAPI) DeleteCapabilityWithContext(arg0 context.Context, arg1 *b2bi.DeleteCapabilityInput, arg2 ...request.Option) (*b2bi.DeleteCapabilityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCapabilityWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.DeleteCapabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCapabilityWithContext indicates an expected call of DeleteCapabilityWithContext
func (mr *MockB2biAPIMockRecorder) DeleteCapabilityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCapabilityWithContext", reflect.TypeOf((*MockB2biAPI)(nil).DeleteCapabilityWithContext), varargs...)
}

// DeletePartnership mocks base method
func (m *MockB2biAPI) DeletePartnership(arg0 *b2bi.DeletePartnershipInput) (*b2bi.DeletePartnershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartnership", arg0)
	ret0, _ := ret[0].(*b2bi.DeletePartnershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePartnership indicates an expected call of DeletePartnership
func (mr *MockB2biAPIMockRecorder) DeletePartnership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnership", reflect.TypeOf((*MockB2biAPI)(nil).DeletePartnership), arg0)
}

// DeletePartnershipRequest mocks base method
func (m *MockB2biAPI) DeletePartnershipRequest(arg0 *b2bi.DeletePartnershipInput) (*request.Request, *b2bi.DeletePartnershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartnershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.DeletePartnershipOutput)
	return ret0, ret1
}

// DeletePartnershipRequest indicates an expected call of DeletePartnershipRequest
func (mr *MockB2biAPIMockRecorder) DeletePartnershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnershipRequest", reflect.TypeOf((*MockB2biAPI)(nil).DeletePartnershipRequest), arg0)
}

// DeletePartnershipWithContext mocks base method
func (m *MockB2biAPI) DeletePartnershipWithContext(arg0 context.Context, arg1 *b2bi.DeletePartnershipInput, arg2 ...request.Option) (*b2bi.DeletePartnershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePartnershipWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.DeletePartnershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePartnershipWithContext indicates an expected call of DeletePartnershipWithContext
func (mr *MockB2biAPIMockRecorder) DeletePartnershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnershipWithContext", reflect.TypeOf((*MockB2biAPI)(nil).DeletePartnershipWithContext), varargs...)
}

// DeleteProfile mocks base method
func (m *MockB2biAPI) DeleteProfile(arg0 *b2bi.DeleteProfileInput) (*b2bi.DeleteProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", arg0)
	ret0, _ := ret[0].(*b2bi.DeleteProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfile indicates an expected call of DeleteProfile
func (mr *MockB2biAPIMockRecorder) DeleteProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockB2biAPI)(nil).DeleteProfile), arg0)
}

// DeleteProfileRequest mocks base method
func (m *MockB2biAPI) DeleteProfileRequest(arg0 *b2bi.DeleteProfileInput) (*request.Request, *b2bi.DeleteProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.DeleteProfileOutput)
	return ret0, ret1
}

// DeleteProfileRequest indicates an expected call of DeleteProfileRequest
func (mr *MockB2biAPIMockRecorder) DeleteProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileRequest", reflect.TypeOf((*MockB2biAPI)(nil).DeleteProfileRequest), arg0)
}

// DeleteProfileWithContext mocks base method
func (m *MockB2biAPI) DeleteProfileWithContext(arg0 context.Context, arg1 *b2bi.DeleteProfileInput, arg2 ...request.Option) (*b2bi.DeleteProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfileWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.DeleteProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileWithContext indicates an expected call of DeleteProfileWithContext
func (mr *MockB2biAPIMockRecorder) DeleteProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileWithContext", reflect.TypeOf((*MockB2biAPI)(nil).DeleteProfileWithContext), varargs...)
}

// DeleteTransformer mocks base method
func (m *MockB2biAPI) DeleteTransformer(arg0 *b2bi.DeleteTransformerInput) (*b2bi.DeleteTransformerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransformer", arg0)
	ret0, _ := ret[0].(*b2bi.DeleteTransformerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransformer indicates an expected call of DeleteTransformer
func (mr *MockB2biAPIMockRecorder) DeleteTransformer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransformer", reflect.TypeOf((*MockB2biAPI)(nil).DeleteTransformer), arg0)
}

// DeleteTransformerRequest mocks base method
func (m *MockB2biAPI) DeleteTransformerRequest(arg0 *b2bi.DeleteTransformerInput) (*request.Request, *b2bi.DeleteTransformerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransformerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.DeleteTransformerOutput)
	return ret0, ret1
}

// DeleteTransformerRequest indicates an expected call of DeleteTransformerRequest
func (mr *MockB2biAPIMockRecorder) DeleteTransformerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransformerRequest", reflect.TypeOf((*MockB2biAPI)(nil).DeleteTransformerRequest), arg0)
}

// DeleteTransformerWithContext mocks base method
func (m *MockB2biAPI) DeleteTransformerWithContext(arg0 context.Context, arg1 *b2bi.DeleteTransformerInput, arg2 ...request.Option) (*b2bi.DeleteTransformerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTransformerWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.DeleteTransformerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransformerWithContext indicates an expected call of DeleteTransformerWithContext
func (mr *MockB2biAPIMockRecorder) DeleteTransformerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransformerWithContext", reflect.TypeOf((*MockB2biAPI)(nil).DeleteTransformerWithContext), varargs...)
}

// GetCapability mocks base method
func (m *MockB2biAPI) GetCapability(arg0 *b2bi.GetCapabilityInput) (*b2bi.GetCapabilityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapability", arg0)
	ret0, _ := ret[0].(*b2bi.GetCapabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapability indicates an expected call of GetCapability
func (mr *MockB2biAPIMockRecorder) GetCapability(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapability", reflect.TypeOf((*MockB2biAPI)(nil).GetCapability), arg0)
}

// GetCapabilityRequest mocks base method
func (m *MockB2biAPI) GetCapabilityRequest(arg0 *b2bi.GetCapabilityInput) (*request.Request, *b2bi.GetCapabilityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapabilityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.GetCapabilityOutput)
	return ret0, ret1
}

// GetCapabilityRequest indicates an expected call of GetCapabilityRequest
func (mr *MockB2biAPIMockRecorder) GetCapabilityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilityRequest", reflect.TypeOf((*MockB2biAPI)(nil).GetCapabilityRequest), arg0)
}

// GetCapabilityWithContext mocks base method
func (m *MockB2biAPI) GetCapabilityWithContext(arg0 context.Context, arg1 *b2bi.GetCapabilityInput, arg2 ...request.Option) (*b2bi.GetCapabilityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCapabilityWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.GetCapabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapabilityWithContext indicates an expected call of GetCapabilityWithContext
func (mr *MockB2biAPIMockRecorder) GetCapabilityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilityWithContext", reflect.TypeOf((*MockB2biAPI)(nil).GetCapabilityWithContext), varargs...)
}

// GetPartnership mocks base method
func (m *MockB2biAPI) GetPartnership(arg0 *b2bi.GetPartnershipInput) (*b2bi.GetPartnershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnership", arg0)
	ret0, _ := ret[0].(*b2bi.GetPartnershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnership indicates an expected call of GetPartnership
func (mr *MockB2biAPIMockRecorder) GetPartnership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnership", reflect.TypeOf((*MockB2biAPI)(nil).GetPartnership), arg0)
}

// GetPartnershipRequest mocks base method
func (m *MockB2biAPI) GetPartnershipRequest(arg0 *b2bi.GetPartnershipInput) (*request.Request, *b2bi.GetPartnershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.GetPartnershipOutput)
	return ret0, ret1
}

// GetPartnershipRequest indicates an expected call of GetPartnershipRequest
func (mr *MockB2biAPIMockRecorder) GetPartnershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnershipRequest", reflect.TypeOf((*MockB2biAPI)(nil).GetPartnershipRequest), arg0)
}

// GetPartnershipWithContext mocks base method
func (m *MockB2biAPI) GetPartnershipWithContext(arg0 context.Context, arg1 *b2bi.GetPartnershipInput, arg2 ...request.Option) (*b2bi.GetPartnershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartnershipWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.GetPartnershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnershipWithContext indicates an expected call of GetPartnershipWithContext
func (mr *MockB2biAPIMockRecorder) GetPartnershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnershipWithContext", reflect.TypeOf((*MockB2biAPI)(nil).GetPartnershipWithContext), varargs...)
}

// GetProfile mocks base method
func (m *MockB2biAPI) GetProfile(arg0 *b2bi.GetProfileInput) (*b2bi.GetProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*b2bi.GetProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockB2biAPIMockRecorder) GetProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockB2biAPI)(nil).GetProfile), arg0)
}

// GetProfileRequest mocks base method
func (m *MockB2biAPI) GetProfileRequest(arg0 *b2bi.GetProfileInput) (*request.Request, *b2bi.GetProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.GetProfileOutput)
	return ret0, ret1
}

// GetProfileRequest indicates an expected call of GetProfileRequest
func (mr *MockB2biAPIMockRecorder) GetProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileRequest", reflect.TypeOf((*MockB2biAPI)(nil).GetProfileRequest), arg0)
}

// GetProfileWithContext mocks base method
func (m *MockB2biAPI) GetProfileWithContext(arg0 context.Context, arg1 *b2bi.GetProfileInput, arg2 ...request.Option) (*b2bi.GetProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfileWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.GetProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileWithContext indicates an expected call of GetProfileWithContext
func (mr *MockB2biAPIMockRecorder) GetProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileWithContext", reflect.TypeOf((*MockB2biAPI)(nil).GetProfileWithContext), varargs...)
}

// GetTransformer mocks base method
func (m *MockB2biAPI) GetTransformer(arg0 *b2bi.GetTransformerInput) (*b2bi.GetTransformerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransformer", arg0)
	ret0, _ := ret[0].(*b2bi.GetTransformerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransformer indicates an expected call of GetTransformer
func (mr *MockB2biAPIMockRecorder) GetTransformer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransformer", reflect.TypeOf((*MockB2biAPI)(nil).GetTransformer), arg0)
}

// GetTransformerJob mocks base method
func (m *MockB2biAPI) GetTransformerJob(arg0 *b2bi.GetTransformerJobInput) (*b2bi.GetTransformerJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransformerJob", arg0)
	ret0, _ := ret[0].(*b2bi.GetTransformerJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransformerJob indicates an expected call of GetTransformerJob
func (mr *MockB2biAPIMockRecorder) GetTransformerJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransformerJob", reflect.TypeOf((*MockB2biAPI)(nil).GetTransformerJob), arg0)
}

// GetTransformerJobRequest mocks base method
func (m *MockB2biAPI) GetTransformerJobRequest(arg0 *b2bi.GetTransformerJobInput) (*request.Request, *b2bi.GetTransformerJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransformerJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.GetTransformerJobOutput)
	return ret0, ret1
}

// GetTransformerJobRequest indicates an expected call of GetTransformerJobRequest
func (mr *MockB2biAPIMockRecorder) GetTransformerJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransformerJobRequest", reflect.TypeOf((*MockB2biAPI)(nil).GetTransformerJobRequest), arg0)
}

// GetTransformerJobWithContext mocks base method
func (m *MockB2biAPI) GetTransformerJobWithContext(arg0 context.Context, arg1 *b2bi.GetTransformerJobInput, arg2 ...request.Option) (*b2bi.GetTransformerJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransformerJobWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.GetTransformerJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransformerJobWithContext indicates an expected call of GetTransformerJobWithContext
func (mr *MockB2biAPIMockRecorder) GetTransformerJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransformerJobWithContext", reflect.TypeOf((*MockB2biAPI)(nil).GetTransformerJobWithContext), varargs...)
}

// GetTransformerRequest mocks base method
func (m *MockB2biAPI) GetTransformerRequest(arg0 *b2bi.GetTransformerInput) (*request.Request, *b2bi.GetTransformerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransformerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.GetTransformerOutput)
	return ret0, ret1
}

// GetTransformerRequest indicates an expected call of GetTransformerRequest
func (mr *MockB2biAPIMockRecorder) GetTransformerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransformerRequest", reflect.TypeOf((*MockB2biAPI)(nil).GetTransformerRequest), arg0)
}

// GetTransformerWithContext mocks base method
func (m *MockB2biAPI) GetTransformerWithContext(arg0 context.Context, arg1 *b2bi.GetTransformerInput, arg2 ...request.Option) (*b2bi.GetTransformerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransformerWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.GetTransformerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransformerWithContext indicates an expected call of GetTransformerWithContext
func (mr *MockB2biAPIMockRecorder) GetTransformerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransformerWithContext", reflect.TypeOf((*MockB2biAPI)(nil).GetTransformerWithContext), varargs...)
}

// ListCapabilities mocks base method
func (m *MockB2biAPI) ListCapabilities(arg0 *b2bi.ListCapabilitiesInput) (*b2bi.ListCapabilitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCapabilities", arg0)
	ret0, _ := ret[0].(*b2bi.ListCapabilitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCapabilities indicates an expected call of ListCapabilities
func (mr *MockB2biAPIMockRecorder) ListCapabilities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCapabilities", reflect.TypeOf((*MockB2biAPI)(nil).ListCapabilities), arg0)
}

// ListCapabilitiesPages mocks base method
func (m *MockB2biAPI) ListCapabilitiesPages(arg0 *b2bi.ListCapabilitiesInput, arg1 func(*b2bi.ListCapabilitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCapabilitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCapabilitiesPages indicates an expected call of ListCapabilitiesPages
func (mr *MockB2biAPIMockRecorder) ListCapabilitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCapabilitiesPages", reflect.TypeOf((*MockB2biAPI)(nil).ListCapabilitiesPages), arg0, arg1)
}

// ListCapabilitiesPagesWithContext mocks base method
func (m *MockB2biAPI) ListCapabilitiesPagesWithContext(arg0 context.Context, arg1 *b2bi.ListCapabilitiesInput, arg2 func(*b2bi.ListCapabilitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCapabilitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCapabilitiesPagesWithContext indicates an expected call of ListCapabilitiesPagesWithContext
func (mr *MockB2biAPIMockRecorder) ListCapabilitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCapabilitiesPagesWithContext", reflect.TypeOf((*MockB2biAPI)(nil).ListCapabilitiesPagesWithContext), varargs...)
}

// ListCapabilitiesRequest mocks base method
func (m *MockB2biAPI) ListCapabilitiesRequest(arg0 *b2bi.ListCapabilitiesInput) (*request.Request, *b2bi.ListCapabilitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCapabilitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.ListCapabilitiesOutput)
	return ret0, ret1
}

// ListCapabilitiesRequest indicates an expected call of ListCapabilitiesRequest
func (mr *MockB2biAPIMockRecorder) ListCapabilitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCapabilitiesRequest", reflect.TypeOf((*MockB2biAPI)(nil).ListCapabilitiesRequest), arg0)
}

// ListCapabilitiesWithContext mocks base method
func (m *MockB2biAPI) ListCapabilitiesWithContext(arg0 context.Context, arg1 *b2bi.ListCapabilitiesInput, arg2 ...request.Option) (*b2bi.ListCapabilitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCapabilitiesWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.ListCapabilitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCapabilitiesWithContext indicates an expected call of ListCapabilitiesWithContext
func (mr *MockB2biAPIMockRecorder) ListCapabilitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCapabilitiesWithContext", reflect.TypeOf((*MockB2biAPI)(nil).ListCapabilitiesWithContext), varargs...)
}

// ListPartnerships mocks base method
func (m *MockB2biAPI) ListPartnerships(arg0 *b2bi.ListPartnershipsInput) (*b2bi.ListPartnershipsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnerships", arg0)
	ret0, _ := ret[0].(*b2bi.ListPartnershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerships indicates an expected call of ListPartnerships
func (mr *MockB2biAPIMockRecorder) ListPartnerships(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerships", reflect.TypeOf((*MockB2biAPI)(nil).ListPartnerships), arg0)
}

// ListPartnershipsPages mocks base method
func (m *MockB2biAPI) ListPartnershipsPages(arg0 *b2bi.ListPartnershipsInput, arg1 func(*b2bi.ListPartnershipsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnershipsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPartnershipsPages indicates an expected call of ListPartnershipsPages
func (mr *MockB2biAPIMockRecorder) ListPartnershipsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnershipsPages", reflect.TypeOf((*MockB2biAPI)(nil).ListPartnershipsPages), arg0, arg1)
}

// ListPartnershipsPagesWithContext mocks base method
func (m *MockB2biAPI) ListPartnershipsPagesWithContext(arg0 context.Context, arg1 *b2bi.ListPartnershipsInput, arg2 func(*b2bi.ListPartnershipsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartnershipsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPartnershipsPagesWithContext indicates an expected call of ListPartnershipsPagesWithContext
func (mr *MockB2biAPIMockRecorder) ListPartnershipsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnershipsPagesWithContext", reflect.TypeOf((*MockB2biAPI)(nil).ListPartnershipsPagesWithContext), varargs...)
}

// ListPartnershipsRequest mocks base method
func (m *MockB2biAPI) ListPartnershipsRequest(arg0 *b2bi.ListPartnershipsInput) (*request.Request, *b2bi.ListPartnershipsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnershipsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.ListPartnershipsOutput)
	return ret0, ret1
}

// ListPartnershipsRequest indicates an expected call of ListPartnershipsRequest
func (mr *MockB2biAPIMockRecorder) ListPartnershipsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnershipsRequest", reflect.TypeOf((*MockB2biAPI)(nil).ListPartnershipsRequest), arg0)
}

// ListPartnershipsWithContext mocks base method
func (m *MockB2biAPI) ListPartnershipsWithContext(arg0 context.Context, arg1 *b2bi.ListPartnershipsInput, arg2 ...request.Option) (*b2bi.ListPartnershipsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartnershipsWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.ListPartnershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnershipsWithContext indicates an expected call of ListPartnershipsWithContext
func (mr *MockB2biAPIMockRecorder) ListPartnershipsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnershipsWithContext", reflect.TypeOf((*MockB2biAPI)(nil).ListPartnershipsWithContext), varargs...)
}

// ListProfiles mocks base method
func (m *MockB2biAPI) ListProfiles(arg0 *b2bi.ListProfilesInput) (*b2bi.ListProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfiles", arg0)
	ret0, _ := ret[0].(*b2bi.ListProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfiles indicates an expected call of ListProfiles
func (mr *MockB2biAPIMockRecorder) ListProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfiles", reflect.TypeOf((*MockB2biAPI)(nil).ListProfiles), arg0)
}

// ListProfilesPages mocks base method
func (m *MockB2biAPI) ListProfilesPages(arg0 *b2bi.ListProfilesInput, arg1 func(*b2bi.ListProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfilesPages indicates an expected call of ListProfilesPages
func (mr *MockB2biAPIMockRecorder) ListProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesPages", reflect.TypeOf((*MockB2biAPI)(nil).ListProfilesPages), arg0, arg1)
}

// ListProfilesPagesWithContext mocks base method
func (m *MockB2biAPI) ListProfilesPagesWithContext(arg0 context.Context, arg1 *b2bi.ListProfilesInput, arg2 func(*b2bi.ListProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfilesPagesWithContext indicates an expected call of ListProfilesPagesWithContext
func (mr *MockB2biAPIMockRecorder) ListProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesPagesWithContext", reflect.TypeOf((*MockB2biAPI)(nil).ListProfilesPagesWithContext), varargs...)
}

// ListProfilesRequest mocks base method
func (m *MockB2biAPI) ListProfilesRequest(arg0 *b2bi.ListProfilesInput) (*request.Request, *b2bi.ListProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.ListProfilesOutput)
	return ret0, ret1
}

// ListProfilesRequest indicates an expected call of ListProfilesRequest
func (mr *MockB2biAPIMockRecorder) ListProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesRequest", reflect.TypeOf((*MockB2biAPI)(nil).ListProfilesRequest), arg0)
}

// ListProfilesWithContext mocks base method
func (m *MockB2biAPI) ListProfilesWithContext(arg0 context.Context, arg1 *b2bi.ListProfilesInput, arg2 ...request.Option) (*b2bi.ListProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.ListProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfilesWithContext indicates an expected call of ListProfilesWithContext
func (mr *MockB2biAPIMockRecorder) ListProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesWithContext", reflect.TypeOf((*MockB2biAPI)(nil).ListProfilesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockB2biAPI) ListTagsForResource(arg0 *b2bi.ListTagsForResourceInput) (*b2bi.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*b2bi.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockB2biAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockB2biAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockB2biAPI) ListTagsForResourceRequest(arg0 *b2bi.ListTagsForResourceInput) (*request.Request, *b2bi.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockB2biAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockB2biAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockB2biAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *b2bi.ListTagsForResourceInput, arg2 ...request.Option) (*b2bi.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockB2biAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockB2biAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTransformers mocks base method
func (m *MockB2biAPI) ListTransformers(arg0 *b2bi.ListTransformersInput) (*b2bi.ListTransformersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransformers", arg0)
	ret0, _ := ret[0].(*b2bi.ListTransformersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransformers indicates an expected call of ListTransformers
func (mr *MockB2biAPIMockRecorder) ListTransformers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformers", reflect.TypeOf((*MockB2biAPI)(nil).ListTransformers), arg0)
}

// ListTransformersPages mocks base method
func (m *MockB2biAPI) ListTransformersPages(arg0 *b2bi.ListTransformersInput, arg1 func(*b2bi.ListTransformersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransformersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransformersPages indicates an expected call of ListTransformersPages
func (mr *MockB2biAPIMockRecorder) ListTransformersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformersPages", reflect.TypeOf((*MockB2biAPI)(nil).ListTransformersPages), arg0, arg1)
}

// ListTransformersPagesWithContext mocks base method
func (m *MockB2biAPI) ListTransformersPagesWithContext(arg0 context.Context, arg1 *b2bi.ListTransformersInput, arg2 func(*b2bi.ListTransformersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransformersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransformersPagesWithContext indicates an expected call of ListTransformersPagesWithContext
func (mr *MockB2biAPIMockRecorder) ListTransformersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformersPagesWithContext", reflect.TypeOf((*MockB2biAPI)(nil).ListTransformersPagesWithContext), varargs...)
}

// ListTransformersRequest mocks base method
func (m *MockB2biAPI) ListTransformersRequest(arg0 *b2bi.ListTransformersInput) (*request.Request, *b2bi.ListTransformersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransformersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.ListTransformersOutput)
	return ret0, ret1
}

// ListTransformersRequest indicates an expected call of ListTransformersRequest
func (mr *MockB2biAPIMockRecorder) ListTransformersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformersRequest", reflect.TypeOf((*MockB2biAPI)(nil).ListTransformersRequest), arg0)
}

// ListTransformersWithContext mocks base method
func (m *MockB2biAPI) ListTransformersWithContext(arg0 context.Context, arg1 *b2bi.ListTransformersInput, arg2 ...request.Option) (*b2bi.ListTransformersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransformersWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.ListTransformersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransformersWithContext indicates an expected call of ListTransformersWithContext
func (mr *MockB2biAPIMockRecorder) ListTransformersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformersWithContext", reflect.TypeOf((*MockB2biAPI)(nil).ListTransformersWithContext), varargs...)
}

// StartTransformerJob mocks base method
func (m *MockB2biAPI) StartTransformerJob(arg0 *b2bi.StartTransformerJobInput) (*b2bi.StartTransformerJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransformerJob", arg0)
	ret0, _ := ret[0].(*b2bi.StartTransformerJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransformerJob indicates an expected call of StartTransformerJob
func (mr *MockB2biAPIMockRecorder) StartTransformerJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransformerJob", reflect.TypeOf((*MockB2biAPI)(nil).StartTransformerJob), arg0)
}

// StartTransformerJobRequest mocks base method
func (m *MockB2biAPI) StartTransformerJobRequest(arg0 *b2bi.StartTransformerJobInput) (*request.Request, *b2bi.StartTransformerJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransformerJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.StartTransformerJobOutput)
	return ret0, ret1
}

// StartTransformerJobRequest indicates an expected call of StartTransformerJobRequest
func (mr *MockB2biAPIMockRecorder) StartTransformerJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransformerJobRequest", reflect.TypeOf((*MockB2biAPI)(nil).StartTransformerJobRequest), arg0)
}

// StartTransformerJobWithContext mocks base method
func (m *MockB2biAPI) StartTransformerJobWithContext(arg0 context.Context, arg1 *b2bi.StartTransformerJobInput, arg2 ...request.Option) (*b2bi.StartTransformerJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTransformerJobWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.StartTransformerJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransformerJobWithContext indicates an expected call of StartTransformerJobWithContext
func (mr *MockB2biAPIMockRecorder) StartTransformerJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransformerJobWithContext", reflect.TypeOf((*MockB2biAPI)(nil).StartTransformerJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockB2biAPI) TagResource(arg0 *b2bi.TagResourceInput) (*b2bi.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*b2bi.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockB2biAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockB2biAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockB2biAPI) TagResourceRequest(arg0 *b2bi.TagResourceInput) (*request.Request, *b2bi.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockB2biAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockB2biAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockB2biAPI) TagResourceWithContext(arg0 context.Context, arg1 *b2bi.TagResourceInput, arg2 ...request.Option) (*b2bi.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockB2biAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockB2biAPI)(nil).TagResourceWithContext), varargs...)
}

// TestMapping mocks base method
func (m *MockB2biAPI) TestMapping(arg0 *b2bi.TestMappingInput) (*b2bi.TestMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestMapping", arg0)
	ret0, _ := ret[0].(*b2bi.TestMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestMapping indicates an expected call of TestMapping
func (mr *MockB2biAPIMockRecorder) TestMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMapping", reflect.TypeOf((*MockB2biAPI)(nil).TestMapping), arg0)
}

// TestMappingRequest mocks base method
func (m *MockB2biAPI) TestMappingRequest(arg0 *b2bi.TestMappingInput) (*request.Request, *b2bi.TestMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.TestMappingOutput)
	return ret0, ret1
}

// TestMappingRequest indicates an expected call of TestMappingRequest
func (mr *MockB2biAPIMockRecorder) TestMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMappingRequest", reflect.TypeOf((*MockB2biAPI)(nil).TestMappingRequest), arg0)
}

// TestMappingWithContext mocks base method
func (m *MockB2biAPI) TestMappingWithContext(arg0 context.Context, arg1 *b2bi.TestMappingInput, arg2 ...request.Option) (*b2bi.TestMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestMappingWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.TestMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestMappingWithContext indicates an expected call of TestMappingWithContext
func (mr *MockB2biAPIMockRecorder) TestMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMappingWithContext", reflect.TypeOf((*MockB2biAPI)(nil).TestMappingWithContext), varargs...)
}

// TestParsing mocks base method
func (m *MockB2biAPI) TestParsing(arg0 *b2bi.TestParsingInput) (*b2bi.TestParsingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestParsing", arg0)
	ret0, _ := ret[0].(*b2bi.TestParsingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestParsing indicates an expected call of TestParsing
func (mr *MockB2biAPIMockRecorder) TestParsing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestParsing", reflect.TypeOf((*MockB2biAPI)(nil).TestParsing), arg0)
}

// TestParsingRequest mocks base method
func (m *MockB2biAPI) TestParsingRequest(arg0 *b2bi.TestParsingInput) (*request.Request, *b2bi.TestParsingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestParsingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.TestParsingOutput)
	return ret0, ret1
}

// TestParsingRequest indicates an expected call of TestParsingRequest
func (mr *MockB2biAPIMockRecorder) TestParsingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestParsingRequest", reflect.TypeOf((*MockB2biAPI)(nil).TestParsingRequest), arg0)
}

// TestParsingWithContext mocks base method
func (m *MockB2biAPI) TestParsingWithContext(arg0 context.Context, arg1 *b2bi.TestParsingInput, arg2 ...request.Option) (*b2bi.TestParsingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestParsingWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.TestParsingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestParsingWithContext indicates an expected call of TestParsingWithContext
func (mr *MockB2biAPIMockRecorder) TestParsingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestParsingWithContext", reflect.TypeOf((*MockB2biAPI)(nil).TestParsingWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockB2biAPI) UntagResource(arg0 *b2bi.UntagResourceInput) (*b2bi.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*b2bi.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockB2biAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockB2biAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockB2biAPI) UntagResourceRequest(arg0 *b2bi.UntagResourceInput) (*request.Request, *b2bi.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockB2biAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockB2biAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockB2biAPI) UntagResourceWithContext(arg0 context.Context, arg1 *b2bi.UntagResourceInput, arg2 ...request.Option) (*b2bi.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockB2biAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockB2biAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCapability mocks base method
func (m *MockB2biAPI) UpdateCapability(arg0 *b2bi.UpdateCapabilityInput) (*b2bi.UpdateCapabilityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCapability", arg0)
	ret0, _ := ret[0].(*b2bi.UpdateCapabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCapability indicates an expected call of UpdateCapability
func (mr *MockB2biAPIMockRecorder) UpdateCapability(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCapability", reflect.TypeOf((*MockB2biAPI)(nil).UpdateCapability), arg0)
}

// UpdateCapabilityRequest mocks base method
func (m *MockB2biAPI) UpdateCapabilityRequest(arg0 *b2bi.UpdateCapabilityInput) (*request.Request, *b2bi.UpdateCapabilityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCapabilityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.UpdateCapabilityOutput)
	return ret0, ret1
}

// UpdateCapabilityRequest indicates an expected call of UpdateCapabilityRequest
func (mr *MockB2biAPIMockRecorder) UpdateCapabilityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCapabilityRequest", reflect.TypeOf((*MockB2biAPI)(nil).UpdateCapabilityRequest), arg0)
}

// UpdateCapabilityWithContext mocks base method
func (m *MockB2biAPI) UpdateCapabilityWithContext(arg0 context.Context, arg1 *b2bi.UpdateCapabilityInput, arg2 ...request.Option) (*b2bi.UpdateCapabilityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCapabilityWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.UpdateCapabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCapabilityWithContext indicates an expected call of UpdateCapabilityWithContext
func (mr *MockB2biAPIMockRecorder) UpdateCapabilityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCapabilityWithContext", reflect.TypeOf((*MockB2biAPI)(nil).UpdateCapabilityWithContext), varargs...)
}

// UpdatePartnership mocks base method
func (m *MockB2biAPI) UpdatePartnership(arg0 *b2bi.UpdatePartnershipInput) (*b2bi.UpdatePartnershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartnership", arg0)
	ret0, _ := ret[0].(*b2bi.UpdatePartnershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartnership indicates an expected call of UpdatePartnership
func (mr *MockB2biAPIMockRecorder) UpdatePartnership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnership", reflect.TypeOf((*MockB2biAPI)(nil).UpdatePartnership), arg0)
}

// UpdatePartnershipRequest mocks base method
func (m *MockB2biAPI) UpdatePartnershipRequest(arg0 *b2bi.UpdatePartnershipInput) (*request.Request, *b2bi.UpdatePartnershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartnershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.UpdatePartnershipOutput)
	return ret0, ret1
}

// UpdatePartnershipRequest indicates an expected call of UpdatePartnershipRequest
func (mr *MockB2biAPIMockRecorder) UpdatePartnershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnershipRequest", reflect.TypeOf((*MockB2biAPI)(nil).UpdatePartnershipRequest), arg0)
}

// UpdatePartnershipWithContext mocks base method
func (m *MockB2biAPI) UpdatePartnershipWithContext(arg0 context.Context, arg1 *b2bi.UpdatePartnershipInput, arg2 ...request.Option) (*b2bi.UpdatePartnershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePartnershipWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.UpdatePartnershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartnershipWithContext indicates an expected call of UpdatePartnershipWithContext
func (mr *MockB2biAPIMockRecorder) UpdatePartnershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnershipWithContext", reflect.TypeOf((*MockB2biAPI)(nil).UpdatePartnershipWithContext), varargs...)
}

// UpdateProfile mocks base method
func (m *MockB2biAPI) UpdateProfile(arg0 *b2bi.UpdateProfileInput) (*b2bi.UpdateProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0)
	ret0, _ := ret[0].(*b2bi.UpdateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockB2biAPIMockRecorder) UpdateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockB2biAPI)(nil).UpdateProfile), arg0)
}

// UpdateProfileRequest mocks base method
func (m *MockB2biAPI) UpdateProfileRequest(arg0 *b2bi.UpdateProfileInput) (*request.Request, *b2bi.UpdateProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.UpdateProfileOutput)
	return ret0, ret1
}

// UpdateProfileRequest indicates an expected call of UpdateProfileRequest
func (mr *MockB2biAPIMockRecorder) UpdateProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileRequest", reflect.TypeOf((*MockB2biAPI)(nil).UpdateProfileRequest), arg0)
}

// UpdateProfileWithContext mocks base method
func (m *MockB2biAPI) UpdateProfileWithContext(arg0 context.Context, arg1 *b2bi.UpdateProfileInput, arg2 ...request.Option) (*b2bi.UpdateProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfileWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.UpdateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfileWithContext indicates an expected call of UpdateProfileWithContext
func (mr *MockB2biAPIMockRecorder) UpdateProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileWithContext", reflect.TypeOf((*MockB2biAPI)(nil).UpdateProfileWithContext), varargs...)
}

// UpdateTransformer mocks base method
func (m *MockB2biAPI) UpdateTransformer(arg0 *b2bi.UpdateTransformerInput) (*b2bi.UpdateTransformerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransformer", arg0)
	ret0, _ := ret[0].(*b2bi.UpdateTransformerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransformer indicates an expected call of UpdateTransformer
func (mr *MockB2biAPIMockRecorder) UpdateTransformer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransformer", reflect.TypeOf((*MockB2biAPI)(nil).UpdateTransformer), arg0)
}

// UpdateTransformerRequest mocks base method
func (m *MockB2biAPI) UpdateTransformerRequest(arg0 *b2bi.UpdateTransformerInput) (*request.Request, *b2bi.UpdateTransformerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransformerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*b2bi.UpdateTransformerOutput)
	return ret0, ret1
}

// UpdateTransformerRequest indicates an expected call of UpdateTransformerRequest
func (mr *MockB2biAPIMockRecorder) UpdateTransformerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransformerRequest", reflect.TypeOf((*MockB2biAPI)(nil).UpdateTransformerRequest), arg0)
}

// UpdateTransformerWithContext mocks base method
func (m *MockB2biAPI) UpdateTransformerWithContext(arg0 context.Context, arg1 *b2bi.UpdateTransformerInput, arg2 ...request.Option) (*b2bi.UpdateTransformerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTransformerWithContext", varargs...)
	ret0, _ := ret[0].(*b2bi.UpdateTransformerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransformerWithContext indicates an expected call of UpdateTransformerWithContext
func (mr *MockB2biAPIMockRecorder) UpdateTransformerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransformerWithContext", reflect.TypeOf((*MockB2biAPI)(nil).UpdateTransformerWithContext), varargs...)
}
