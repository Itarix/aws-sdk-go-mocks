// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/iot/iotiface (interfaces: IoTAPI)

// Package iotmock is a generated GoMock package.
package iotmock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	iot "github.com/aws/aws-sdk-go/service/iot"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIoTAPI is a mock of IoTAPI interface
type MockIoTAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIoTAPIMockRecorder
}

// MockIoTAPIMockRecorder is the mock recorder for MockIoTAPI
type MockIoTAPIMockRecorder struct {
	mock *MockIoTAPI
}

// NewMockIoTAPI creates a new mock instance
func NewMockIoTAPI(ctrl *gomock.Controller) *MockIoTAPI {
	mock := &MockIoTAPI{ctrl: ctrl}
	mock.recorder = &MockIoTAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIoTAPI) EXPECT() *MockIoTAPIMockRecorder {
	return m.recorder
}

// AcceptCertificateTransfer mocks base method
func (m *MockIoTAPI) AcceptCertificateTransfer(arg0 *iot.AcceptCertificateTransferInput) (*iot.AcceptCertificateTransferOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptCertificateTransfer", arg0)
	ret0, _ := ret[0].(*iot.AcceptCertificateTransferOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptCertificateTransfer indicates an expected call of AcceptCertificateTransfer
func (mr *MockIoTAPIMockRecorder) AcceptCertificateTransfer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptCertificateTransfer", reflect.TypeOf((*MockIoTAPI)(nil).AcceptCertificateTransfer), arg0)
}

// AcceptCertificateTransferRequest mocks base method
func (m *MockIoTAPI) AcceptCertificateTransferRequest(arg0 *iot.AcceptCertificateTransferInput) (*request.Request, *iot.AcceptCertificateTransferOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptCertificateTransferRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.AcceptCertificateTransferOutput)
	return ret0, ret1
}

// AcceptCertificateTransferRequest indicates an expected call of AcceptCertificateTransferRequest
func (mr *MockIoTAPIMockRecorder) AcceptCertificateTransferRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptCertificateTransferRequest", reflect.TypeOf((*MockIoTAPI)(nil).AcceptCertificateTransferRequest), arg0)
}

// AcceptCertificateTransferWithContext mocks base method
func (m *MockIoTAPI) AcceptCertificateTransferWithContext(arg0 aws.Context, arg1 *iot.AcceptCertificateTransferInput, arg2 ...request.Option) (*iot.AcceptCertificateTransferOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptCertificateTransferWithContext", varargs...)
	ret0, _ := ret[0].(*iot.AcceptCertificateTransferOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptCertificateTransferWithContext indicates an expected call of AcceptCertificateTransferWithContext
func (mr *MockIoTAPIMockRecorder) AcceptCertificateTransferWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptCertificateTransferWithContext", reflect.TypeOf((*MockIoTAPI)(nil).AcceptCertificateTransferWithContext), varargs...)
}

// AddThingToThingGroup mocks base method
func (m *MockIoTAPI) AddThingToThingGroup(arg0 *iot.AddThingToThingGroupInput) (*iot.AddThingToThingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddThingToThingGroup", arg0)
	ret0, _ := ret[0].(*iot.AddThingToThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddThingToThingGroup indicates an expected call of AddThingToThingGroup
func (mr *MockIoTAPIMockRecorder) AddThingToThingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddThingToThingGroup", reflect.TypeOf((*MockIoTAPI)(nil).AddThingToThingGroup), arg0)
}

// AddThingToThingGroupRequest mocks base method
func (m *MockIoTAPI) AddThingToThingGroupRequest(arg0 *iot.AddThingToThingGroupInput) (*request.Request, *iot.AddThingToThingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddThingToThingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.AddThingToThingGroupOutput)
	return ret0, ret1
}

// AddThingToThingGroupRequest indicates an expected call of AddThingToThingGroupRequest
func (mr *MockIoTAPIMockRecorder) AddThingToThingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddThingToThingGroupRequest", reflect.TypeOf((*MockIoTAPI)(nil).AddThingToThingGroupRequest), arg0)
}

// AddThingToThingGroupWithContext mocks base method
func (m *MockIoTAPI) AddThingToThingGroupWithContext(arg0 aws.Context, arg1 *iot.AddThingToThingGroupInput, arg2 ...request.Option) (*iot.AddThingToThingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddThingToThingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iot.AddThingToThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddThingToThingGroupWithContext indicates an expected call of AddThingToThingGroupWithContext
func (mr *MockIoTAPIMockRecorder) AddThingToThingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddThingToThingGroupWithContext", reflect.TypeOf((*MockIoTAPI)(nil).AddThingToThingGroupWithContext), varargs...)
}

// AssociateTargetsWithJob mocks base method
func (m *MockIoTAPI) AssociateTargetsWithJob(arg0 *iot.AssociateTargetsWithJobInput) (*iot.AssociateTargetsWithJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTargetsWithJob", arg0)
	ret0, _ := ret[0].(*iot.AssociateTargetsWithJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateTargetsWithJob indicates an expected call of AssociateTargetsWithJob
func (mr *MockIoTAPIMockRecorder) AssociateTargetsWithJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTargetsWithJob", reflect.TypeOf((*MockIoTAPI)(nil).AssociateTargetsWithJob), arg0)
}

// AssociateTargetsWithJobRequest mocks base method
func (m *MockIoTAPI) AssociateTargetsWithJobRequest(arg0 *iot.AssociateTargetsWithJobInput) (*request.Request, *iot.AssociateTargetsWithJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTargetsWithJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.AssociateTargetsWithJobOutput)
	return ret0, ret1
}

// AssociateTargetsWithJobRequest indicates an expected call of AssociateTargetsWithJobRequest
func (mr *MockIoTAPIMockRecorder) AssociateTargetsWithJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTargetsWithJobRequest", reflect.TypeOf((*MockIoTAPI)(nil).AssociateTargetsWithJobRequest), arg0)
}

// AssociateTargetsWithJobWithContext mocks base method
func (m *MockIoTAPI) AssociateTargetsWithJobWithContext(arg0 aws.Context, arg1 *iot.AssociateTargetsWithJobInput, arg2 ...request.Option) (*iot.AssociateTargetsWithJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateTargetsWithJobWithContext", varargs...)
	ret0, _ := ret[0].(*iot.AssociateTargetsWithJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateTargetsWithJobWithContext indicates an expected call of AssociateTargetsWithJobWithContext
func (mr *MockIoTAPIMockRecorder) AssociateTargetsWithJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTargetsWithJobWithContext", reflect.TypeOf((*MockIoTAPI)(nil).AssociateTargetsWithJobWithContext), varargs...)
}

// AttachPolicy mocks base method
func (m *MockIoTAPI) AttachPolicy(arg0 *iot.AttachPolicyInput) (*iot.AttachPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachPolicy", arg0)
	ret0, _ := ret[0].(*iot.AttachPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPolicy indicates an expected call of AttachPolicy
func (mr *MockIoTAPIMockRecorder) AttachPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPolicy", reflect.TypeOf((*MockIoTAPI)(nil).AttachPolicy), arg0)
}

// AttachPolicyRequest mocks base method
func (m *MockIoTAPI) AttachPolicyRequest(arg0 *iot.AttachPolicyInput) (*request.Request, *iot.AttachPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.AttachPolicyOutput)
	return ret0, ret1
}

// AttachPolicyRequest indicates an expected call of AttachPolicyRequest
func (mr *MockIoTAPIMockRecorder) AttachPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPolicyRequest", reflect.TypeOf((*MockIoTAPI)(nil).AttachPolicyRequest), arg0)
}

// AttachPolicyWithContext mocks base method
func (m *MockIoTAPI) AttachPolicyWithContext(arg0 aws.Context, arg1 *iot.AttachPolicyInput, arg2 ...request.Option) (*iot.AttachPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iot.AttachPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPolicyWithContext indicates an expected call of AttachPolicyWithContext
func (mr *MockIoTAPIMockRecorder) AttachPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPolicyWithContext", reflect.TypeOf((*MockIoTAPI)(nil).AttachPolicyWithContext), varargs...)
}

// AttachPrincipalPolicy mocks base method
func (m *MockIoTAPI) AttachPrincipalPolicy(arg0 *iot.AttachPrincipalPolicyInput) (*iot.AttachPrincipalPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachPrincipalPolicy", arg0)
	ret0, _ := ret[0].(*iot.AttachPrincipalPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPrincipalPolicy indicates an expected call of AttachPrincipalPolicy
func (mr *MockIoTAPIMockRecorder) AttachPrincipalPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPrincipalPolicy", reflect.TypeOf((*MockIoTAPI)(nil).AttachPrincipalPolicy), arg0)
}

// AttachPrincipalPolicyRequest mocks base method
func (m *MockIoTAPI) AttachPrincipalPolicyRequest(arg0 *iot.AttachPrincipalPolicyInput) (*request.Request, *iot.AttachPrincipalPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachPrincipalPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.AttachPrincipalPolicyOutput)
	return ret0, ret1
}

// AttachPrincipalPolicyRequest indicates an expected call of AttachPrincipalPolicyRequest
func (mr *MockIoTAPIMockRecorder) AttachPrincipalPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPrincipalPolicyRequest", reflect.TypeOf((*MockIoTAPI)(nil).AttachPrincipalPolicyRequest), arg0)
}

// AttachPrincipalPolicyWithContext mocks base method
func (m *MockIoTAPI) AttachPrincipalPolicyWithContext(arg0 aws.Context, arg1 *iot.AttachPrincipalPolicyInput, arg2 ...request.Option) (*iot.AttachPrincipalPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachPrincipalPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iot.AttachPrincipalPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPrincipalPolicyWithContext indicates an expected call of AttachPrincipalPolicyWithContext
func (mr *MockIoTAPIMockRecorder) AttachPrincipalPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPrincipalPolicyWithContext", reflect.TypeOf((*MockIoTAPI)(nil).AttachPrincipalPolicyWithContext), varargs...)
}

// AttachThingPrincipal mocks base method
func (m *MockIoTAPI) AttachThingPrincipal(arg0 *iot.AttachThingPrincipalInput) (*iot.AttachThingPrincipalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachThingPrincipal", arg0)
	ret0, _ := ret[0].(*iot.AttachThingPrincipalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachThingPrincipal indicates an expected call of AttachThingPrincipal
func (mr *MockIoTAPIMockRecorder) AttachThingPrincipal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachThingPrincipal", reflect.TypeOf((*MockIoTAPI)(nil).AttachThingPrincipal), arg0)
}

// AttachThingPrincipalRequest mocks base method
func (m *MockIoTAPI) AttachThingPrincipalRequest(arg0 *iot.AttachThingPrincipalInput) (*request.Request, *iot.AttachThingPrincipalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachThingPrincipalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.AttachThingPrincipalOutput)
	return ret0, ret1
}

// AttachThingPrincipalRequest indicates an expected call of AttachThingPrincipalRequest
func (mr *MockIoTAPIMockRecorder) AttachThingPrincipalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachThingPrincipalRequest", reflect.TypeOf((*MockIoTAPI)(nil).AttachThingPrincipalRequest), arg0)
}

// AttachThingPrincipalWithContext mocks base method
func (m *MockIoTAPI) AttachThingPrincipalWithContext(arg0 aws.Context, arg1 *iot.AttachThingPrincipalInput, arg2 ...request.Option) (*iot.AttachThingPrincipalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachThingPrincipalWithContext", varargs...)
	ret0, _ := ret[0].(*iot.AttachThingPrincipalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachThingPrincipalWithContext indicates an expected call of AttachThingPrincipalWithContext
func (mr *MockIoTAPIMockRecorder) AttachThingPrincipalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachThingPrincipalWithContext", reflect.TypeOf((*MockIoTAPI)(nil).AttachThingPrincipalWithContext), varargs...)
}

// CancelCertificateTransfer mocks base method
func (m *MockIoTAPI) CancelCertificateTransfer(arg0 *iot.CancelCertificateTransferInput) (*iot.CancelCertificateTransferOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelCertificateTransfer", arg0)
	ret0, _ := ret[0].(*iot.CancelCertificateTransferOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelCertificateTransfer indicates an expected call of CancelCertificateTransfer
func (mr *MockIoTAPIMockRecorder) CancelCertificateTransfer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelCertificateTransfer", reflect.TypeOf((*MockIoTAPI)(nil).CancelCertificateTransfer), arg0)
}

// CancelCertificateTransferRequest mocks base method
func (m *MockIoTAPI) CancelCertificateTransferRequest(arg0 *iot.CancelCertificateTransferInput) (*request.Request, *iot.CancelCertificateTransferOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelCertificateTransferRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CancelCertificateTransferOutput)
	return ret0, ret1
}

// CancelCertificateTransferRequest indicates an expected call of CancelCertificateTransferRequest
func (mr *MockIoTAPIMockRecorder) CancelCertificateTransferRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelCertificateTransferRequest", reflect.TypeOf((*MockIoTAPI)(nil).CancelCertificateTransferRequest), arg0)
}

// CancelCertificateTransferWithContext mocks base method
func (m *MockIoTAPI) CancelCertificateTransferWithContext(arg0 aws.Context, arg1 *iot.CancelCertificateTransferInput, arg2 ...request.Option) (*iot.CancelCertificateTransferOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelCertificateTransferWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CancelCertificateTransferOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelCertificateTransferWithContext indicates an expected call of CancelCertificateTransferWithContext
func (mr *MockIoTAPIMockRecorder) CancelCertificateTransferWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelCertificateTransferWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CancelCertificateTransferWithContext), varargs...)
}

// CancelJob mocks base method
func (m *MockIoTAPI) CancelJob(arg0 *iot.CancelJobInput) (*iot.CancelJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", arg0)
	ret0, _ := ret[0].(*iot.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJob indicates an expected call of CancelJob
func (mr *MockIoTAPIMockRecorder) CancelJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockIoTAPI)(nil).CancelJob), arg0)
}

// CancelJobExecution mocks base method
func (m *MockIoTAPI) CancelJobExecution(arg0 *iot.CancelJobExecutionInput) (*iot.CancelJobExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobExecution", arg0)
	ret0, _ := ret[0].(*iot.CancelJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobExecution indicates an expected call of CancelJobExecution
func (mr *MockIoTAPIMockRecorder) CancelJobExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobExecution", reflect.TypeOf((*MockIoTAPI)(nil).CancelJobExecution), arg0)
}

// CancelJobExecutionRequest mocks base method
func (m *MockIoTAPI) CancelJobExecutionRequest(arg0 *iot.CancelJobExecutionInput) (*request.Request, *iot.CancelJobExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CancelJobExecutionOutput)
	return ret0, ret1
}

// CancelJobExecutionRequest indicates an expected call of CancelJobExecutionRequest
func (mr *MockIoTAPIMockRecorder) CancelJobExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobExecutionRequest", reflect.TypeOf((*MockIoTAPI)(nil).CancelJobExecutionRequest), arg0)
}

// CancelJobExecutionWithContext mocks base method
func (m *MockIoTAPI) CancelJobExecutionWithContext(arg0 aws.Context, arg1 *iot.CancelJobExecutionInput, arg2 ...request.Option) (*iot.CancelJobExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJobExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CancelJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobExecutionWithContext indicates an expected call of CancelJobExecutionWithContext
func (mr *MockIoTAPIMockRecorder) CancelJobExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobExecutionWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CancelJobExecutionWithContext), varargs...)
}

// CancelJobRequest mocks base method
func (m *MockIoTAPI) CancelJobRequest(arg0 *iot.CancelJobInput) (*request.Request, *iot.CancelJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CancelJobOutput)
	return ret0, ret1
}

// CancelJobRequest indicates an expected call of CancelJobRequest
func (mr *MockIoTAPIMockRecorder) CancelJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRequest", reflect.TypeOf((*MockIoTAPI)(nil).CancelJobRequest), arg0)
}

// CancelJobWithContext mocks base method
func (m *MockIoTAPI) CancelJobWithContext(arg0 aws.Context, arg1 *iot.CancelJobInput, arg2 ...request.Option) (*iot.CancelJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJobWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobWithContext indicates an expected call of CancelJobWithContext
func (mr *MockIoTAPIMockRecorder) CancelJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CancelJobWithContext), varargs...)
}

// ClearDefaultAuthorizer mocks base method
func (m *MockIoTAPI) ClearDefaultAuthorizer(arg0 *iot.ClearDefaultAuthorizerInput) (*iot.ClearDefaultAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDefaultAuthorizer", arg0)
	ret0, _ := ret[0].(*iot.ClearDefaultAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearDefaultAuthorizer indicates an expected call of ClearDefaultAuthorizer
func (mr *MockIoTAPIMockRecorder) ClearDefaultAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDefaultAuthorizer", reflect.TypeOf((*MockIoTAPI)(nil).ClearDefaultAuthorizer), arg0)
}

// ClearDefaultAuthorizerRequest mocks base method
func (m *MockIoTAPI) ClearDefaultAuthorizerRequest(arg0 *iot.ClearDefaultAuthorizerInput) (*request.Request, *iot.ClearDefaultAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDefaultAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ClearDefaultAuthorizerOutput)
	return ret0, ret1
}

// ClearDefaultAuthorizerRequest indicates an expected call of ClearDefaultAuthorizerRequest
func (mr *MockIoTAPIMockRecorder) ClearDefaultAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDefaultAuthorizerRequest", reflect.TypeOf((*MockIoTAPI)(nil).ClearDefaultAuthorizerRequest), arg0)
}

// ClearDefaultAuthorizerWithContext mocks base method
func (m *MockIoTAPI) ClearDefaultAuthorizerWithContext(arg0 aws.Context, arg1 *iot.ClearDefaultAuthorizerInput, arg2 ...request.Option) (*iot.ClearDefaultAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearDefaultAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ClearDefaultAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearDefaultAuthorizerWithContext indicates an expected call of ClearDefaultAuthorizerWithContext
func (mr *MockIoTAPIMockRecorder) ClearDefaultAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDefaultAuthorizerWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ClearDefaultAuthorizerWithContext), varargs...)
}

// CreateAuthorizer mocks base method
func (m *MockIoTAPI) CreateAuthorizer(arg0 *iot.CreateAuthorizerInput) (*iot.CreateAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorizer", arg0)
	ret0, _ := ret[0].(*iot.CreateAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthorizer indicates an expected call of CreateAuthorizer
func (mr *MockIoTAPIMockRecorder) CreateAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizer", reflect.TypeOf((*MockIoTAPI)(nil).CreateAuthorizer), arg0)
}

// CreateAuthorizerRequest mocks base method
func (m *MockIoTAPI) CreateAuthorizerRequest(arg0 *iot.CreateAuthorizerInput) (*request.Request, *iot.CreateAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateAuthorizerOutput)
	return ret0, ret1
}

// CreateAuthorizerRequest indicates an expected call of CreateAuthorizerRequest
func (mr *MockIoTAPIMockRecorder) CreateAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizerRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateAuthorizerRequest), arg0)
}

// CreateAuthorizerWithContext mocks base method
func (m *MockIoTAPI) CreateAuthorizerWithContext(arg0 aws.Context, arg1 *iot.CreateAuthorizerInput, arg2 ...request.Option) (*iot.CreateAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthorizerWithContext indicates an expected call of CreateAuthorizerWithContext
func (mr *MockIoTAPIMockRecorder) CreateAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizerWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateAuthorizerWithContext), varargs...)
}

// CreateCertificateFromCsr mocks base method
func (m *MockIoTAPI) CreateCertificateFromCsr(arg0 *iot.CreateCertificateFromCsrInput) (*iot.CreateCertificateFromCsrOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateFromCsr", arg0)
	ret0, _ := ret[0].(*iot.CreateCertificateFromCsrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificateFromCsr indicates an expected call of CreateCertificateFromCsr
func (mr *MockIoTAPIMockRecorder) CreateCertificateFromCsr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateFromCsr", reflect.TypeOf((*MockIoTAPI)(nil).CreateCertificateFromCsr), arg0)
}

// CreateCertificateFromCsrRequest mocks base method
func (m *MockIoTAPI) CreateCertificateFromCsrRequest(arg0 *iot.CreateCertificateFromCsrInput) (*request.Request, *iot.CreateCertificateFromCsrOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateFromCsrRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateCertificateFromCsrOutput)
	return ret0, ret1
}

// CreateCertificateFromCsrRequest indicates an expected call of CreateCertificateFromCsrRequest
func (mr *MockIoTAPIMockRecorder) CreateCertificateFromCsrRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateFromCsrRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateCertificateFromCsrRequest), arg0)
}

// CreateCertificateFromCsrWithContext mocks base method
func (m *MockIoTAPI) CreateCertificateFromCsrWithContext(arg0 aws.Context, arg1 *iot.CreateCertificateFromCsrInput, arg2 ...request.Option) (*iot.CreateCertificateFromCsrOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCertificateFromCsrWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateCertificateFromCsrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificateFromCsrWithContext indicates an expected call of CreateCertificateFromCsrWithContext
func (mr *MockIoTAPIMockRecorder) CreateCertificateFromCsrWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateFromCsrWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateCertificateFromCsrWithContext), varargs...)
}

// CreateJob mocks base method
func (m *MockIoTAPI) CreateJob(arg0 *iot.CreateJobInput) (*iot.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0)
	ret0, _ := ret[0].(*iot.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob
func (mr *MockIoTAPIMockRecorder) CreateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockIoTAPI)(nil).CreateJob), arg0)
}

// CreateJobRequest mocks base method
func (m *MockIoTAPI) CreateJobRequest(arg0 *iot.CreateJobInput) (*request.Request, *iot.CreateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateJobOutput)
	return ret0, ret1
}

// CreateJobRequest indicates an expected call of CreateJobRequest
func (mr *MockIoTAPIMockRecorder) CreateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateJobRequest), arg0)
}

// CreateJobWithContext mocks base method
func (m *MockIoTAPI) CreateJobWithContext(arg0 aws.Context, arg1 *iot.CreateJobInput, arg2 ...request.Option) (*iot.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithContext indicates an expected call of CreateJobWithContext
func (mr *MockIoTAPIMockRecorder) CreateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateJobWithContext), varargs...)
}

// CreateKeysAndCertificate mocks base method
func (m *MockIoTAPI) CreateKeysAndCertificate(arg0 *iot.CreateKeysAndCertificateInput) (*iot.CreateKeysAndCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeysAndCertificate", arg0)
	ret0, _ := ret[0].(*iot.CreateKeysAndCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeysAndCertificate indicates an expected call of CreateKeysAndCertificate
func (mr *MockIoTAPIMockRecorder) CreateKeysAndCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeysAndCertificate", reflect.TypeOf((*MockIoTAPI)(nil).CreateKeysAndCertificate), arg0)
}

// CreateKeysAndCertificateRequest mocks base method
func (m *MockIoTAPI) CreateKeysAndCertificateRequest(arg0 *iot.CreateKeysAndCertificateInput) (*request.Request, *iot.CreateKeysAndCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeysAndCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateKeysAndCertificateOutput)
	return ret0, ret1
}

// CreateKeysAndCertificateRequest indicates an expected call of CreateKeysAndCertificateRequest
func (mr *MockIoTAPIMockRecorder) CreateKeysAndCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeysAndCertificateRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateKeysAndCertificateRequest), arg0)
}

// CreateKeysAndCertificateWithContext mocks base method
func (m *MockIoTAPI) CreateKeysAndCertificateWithContext(arg0 aws.Context, arg1 *iot.CreateKeysAndCertificateInput, arg2 ...request.Option) (*iot.CreateKeysAndCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeysAndCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateKeysAndCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeysAndCertificateWithContext indicates an expected call of CreateKeysAndCertificateWithContext
func (mr *MockIoTAPIMockRecorder) CreateKeysAndCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeysAndCertificateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateKeysAndCertificateWithContext), varargs...)
}

// CreateOTAUpdate mocks base method
func (m *MockIoTAPI) CreateOTAUpdate(arg0 *iot.CreateOTAUpdateInput) (*iot.CreateOTAUpdateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOTAUpdate", arg0)
	ret0, _ := ret[0].(*iot.CreateOTAUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOTAUpdate indicates an expected call of CreateOTAUpdate
func (mr *MockIoTAPIMockRecorder) CreateOTAUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOTAUpdate", reflect.TypeOf((*MockIoTAPI)(nil).CreateOTAUpdate), arg0)
}

// CreateOTAUpdateRequest mocks base method
func (m *MockIoTAPI) CreateOTAUpdateRequest(arg0 *iot.CreateOTAUpdateInput) (*request.Request, *iot.CreateOTAUpdateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOTAUpdateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateOTAUpdateOutput)
	return ret0, ret1
}

// CreateOTAUpdateRequest indicates an expected call of CreateOTAUpdateRequest
func (mr *MockIoTAPIMockRecorder) CreateOTAUpdateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOTAUpdateRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateOTAUpdateRequest), arg0)
}

// CreateOTAUpdateWithContext mocks base method
func (m *MockIoTAPI) CreateOTAUpdateWithContext(arg0 aws.Context, arg1 *iot.CreateOTAUpdateInput, arg2 ...request.Option) (*iot.CreateOTAUpdateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOTAUpdateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateOTAUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOTAUpdateWithContext indicates an expected call of CreateOTAUpdateWithContext
func (mr *MockIoTAPIMockRecorder) CreateOTAUpdateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOTAUpdateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateOTAUpdateWithContext), varargs...)
}

// CreatePolicy mocks base method
func (m *MockIoTAPI) CreatePolicy(arg0 *iot.CreatePolicyInput) (*iot.CreatePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0)
	ret0, _ := ret[0].(*iot.CreatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy
func (mr *MockIoTAPIMockRecorder) CreatePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockIoTAPI)(nil).CreatePolicy), arg0)
}

// CreatePolicyRequest mocks base method
func (m *MockIoTAPI) CreatePolicyRequest(arg0 *iot.CreatePolicyInput) (*request.Request, *iot.CreatePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreatePolicyOutput)
	return ret0, ret1
}

// CreatePolicyRequest indicates an expected call of CreatePolicyRequest
func (mr *MockIoTAPIMockRecorder) CreatePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreatePolicyRequest), arg0)
}

// CreatePolicyVersion mocks base method
func (m *MockIoTAPI) CreatePolicyVersion(arg0 *iot.CreatePolicyVersionInput) (*iot.CreatePolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyVersion", arg0)
	ret0, _ := ret[0].(*iot.CreatePolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyVersion indicates an expected call of CreatePolicyVersion
func (mr *MockIoTAPIMockRecorder) CreatePolicyVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyVersion", reflect.TypeOf((*MockIoTAPI)(nil).CreatePolicyVersion), arg0)
}

// CreatePolicyVersionRequest mocks base method
func (m *MockIoTAPI) CreatePolicyVersionRequest(arg0 *iot.CreatePolicyVersionInput) (*request.Request, *iot.CreatePolicyVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreatePolicyVersionOutput)
	return ret0, ret1
}

// CreatePolicyVersionRequest indicates an expected call of CreatePolicyVersionRequest
func (mr *MockIoTAPIMockRecorder) CreatePolicyVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyVersionRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreatePolicyVersionRequest), arg0)
}

// CreatePolicyVersionWithContext mocks base method
func (m *MockIoTAPI) CreatePolicyVersionWithContext(arg0 aws.Context, arg1 *iot.CreatePolicyVersionInput, arg2 ...request.Option) (*iot.CreatePolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicyVersionWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreatePolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyVersionWithContext indicates an expected call of CreatePolicyVersionWithContext
func (mr *MockIoTAPIMockRecorder) CreatePolicyVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyVersionWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreatePolicyVersionWithContext), varargs...)
}

// CreatePolicyWithContext mocks base method
func (m *MockIoTAPI) CreatePolicyWithContext(arg0 aws.Context, arg1 *iot.CreatePolicyInput, arg2 ...request.Option) (*iot.CreatePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyWithContext indicates an expected call of CreatePolicyWithContext
func (mr *MockIoTAPIMockRecorder) CreatePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreatePolicyWithContext), varargs...)
}

// CreateRoleAlias mocks base method
func (m *MockIoTAPI) CreateRoleAlias(arg0 *iot.CreateRoleAliasInput) (*iot.CreateRoleAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleAlias", arg0)
	ret0, _ := ret[0].(*iot.CreateRoleAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleAlias indicates an expected call of CreateRoleAlias
func (mr *MockIoTAPIMockRecorder) CreateRoleAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleAlias", reflect.TypeOf((*MockIoTAPI)(nil).CreateRoleAlias), arg0)
}

// CreateRoleAliasRequest mocks base method
func (m *MockIoTAPI) CreateRoleAliasRequest(arg0 *iot.CreateRoleAliasInput) (*request.Request, *iot.CreateRoleAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateRoleAliasOutput)
	return ret0, ret1
}

// CreateRoleAliasRequest indicates an expected call of CreateRoleAliasRequest
func (mr *MockIoTAPIMockRecorder) CreateRoleAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleAliasRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateRoleAliasRequest), arg0)
}

// CreateRoleAliasWithContext mocks base method
func (m *MockIoTAPI) CreateRoleAliasWithContext(arg0 aws.Context, arg1 *iot.CreateRoleAliasInput, arg2 ...request.Option) (*iot.CreateRoleAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoleAliasWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateRoleAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleAliasWithContext indicates an expected call of CreateRoleAliasWithContext
func (mr *MockIoTAPIMockRecorder) CreateRoleAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleAliasWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateRoleAliasWithContext), varargs...)
}

// CreateStream mocks base method
func (m *MockIoTAPI) CreateStream(arg0 *iot.CreateStreamInput) (*iot.CreateStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", arg0)
	ret0, _ := ret[0].(*iot.CreateStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream
func (mr *MockIoTAPIMockRecorder) CreateStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockIoTAPI)(nil).CreateStream), arg0)
}

// CreateStreamRequest mocks base method
func (m *MockIoTAPI) CreateStreamRequest(arg0 *iot.CreateStreamInput) (*request.Request, *iot.CreateStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateStreamOutput)
	return ret0, ret1
}

// CreateStreamRequest indicates an expected call of CreateStreamRequest
func (mr *MockIoTAPIMockRecorder) CreateStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateStreamRequest), arg0)
}

// CreateStreamWithContext mocks base method
func (m *MockIoTAPI) CreateStreamWithContext(arg0 aws.Context, arg1 *iot.CreateStreamInput, arg2 ...request.Option) (*iot.CreateStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamWithContext indicates an expected call of CreateStreamWithContext
func (mr *MockIoTAPIMockRecorder) CreateStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateStreamWithContext), varargs...)
}

// CreateThing mocks base method
func (m *MockIoTAPI) CreateThing(arg0 *iot.CreateThingInput) (*iot.CreateThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThing", arg0)
	ret0, _ := ret[0].(*iot.CreateThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThing indicates an expected call of CreateThing
func (mr *MockIoTAPIMockRecorder) CreateThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThing", reflect.TypeOf((*MockIoTAPI)(nil).CreateThing), arg0)
}

// CreateThingGroup mocks base method
func (m *MockIoTAPI) CreateThingGroup(arg0 *iot.CreateThingGroupInput) (*iot.CreateThingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThingGroup", arg0)
	ret0, _ := ret[0].(*iot.CreateThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThingGroup indicates an expected call of CreateThingGroup
func (mr *MockIoTAPIMockRecorder) CreateThingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThingGroup", reflect.TypeOf((*MockIoTAPI)(nil).CreateThingGroup), arg0)
}

// CreateThingGroupRequest mocks base method
func (m *MockIoTAPI) CreateThingGroupRequest(arg0 *iot.CreateThingGroupInput) (*request.Request, *iot.CreateThingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateThingGroupOutput)
	return ret0, ret1
}

// CreateThingGroupRequest indicates an expected call of CreateThingGroupRequest
func (mr *MockIoTAPIMockRecorder) CreateThingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThingGroupRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateThingGroupRequest), arg0)
}

// CreateThingGroupWithContext mocks base method
func (m *MockIoTAPI) CreateThingGroupWithContext(arg0 aws.Context, arg1 *iot.CreateThingGroupInput, arg2 ...request.Option) (*iot.CreateThingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateThingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThingGroupWithContext indicates an expected call of CreateThingGroupWithContext
func (mr *MockIoTAPIMockRecorder) CreateThingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThingGroupWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateThingGroupWithContext), varargs...)
}

// CreateThingRequest mocks base method
func (m *MockIoTAPI) CreateThingRequest(arg0 *iot.CreateThingInput) (*request.Request, *iot.CreateThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateThingOutput)
	return ret0, ret1
}

// CreateThingRequest indicates an expected call of CreateThingRequest
func (mr *MockIoTAPIMockRecorder) CreateThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThingRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateThingRequest), arg0)
}

// CreateThingType mocks base method
func (m *MockIoTAPI) CreateThingType(arg0 *iot.CreateThingTypeInput) (*iot.CreateThingTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThingType", arg0)
	ret0, _ := ret[0].(*iot.CreateThingTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThingType indicates an expected call of CreateThingType
func (mr *MockIoTAPIMockRecorder) CreateThingType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThingType", reflect.TypeOf((*MockIoTAPI)(nil).CreateThingType), arg0)
}

// CreateThingTypeRequest mocks base method
func (m *MockIoTAPI) CreateThingTypeRequest(arg0 *iot.CreateThingTypeInput) (*request.Request, *iot.CreateThingTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThingTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateThingTypeOutput)
	return ret0, ret1
}

// CreateThingTypeRequest indicates an expected call of CreateThingTypeRequest
func (mr *MockIoTAPIMockRecorder) CreateThingTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThingTypeRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateThingTypeRequest), arg0)
}

// CreateThingTypeWithContext mocks base method
func (m *MockIoTAPI) CreateThingTypeWithContext(arg0 aws.Context, arg1 *iot.CreateThingTypeInput, arg2 ...request.Option) (*iot.CreateThingTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateThingTypeWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateThingTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThingTypeWithContext indicates an expected call of CreateThingTypeWithContext
func (mr *MockIoTAPIMockRecorder) CreateThingTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThingTypeWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateThingTypeWithContext), varargs...)
}

// CreateThingWithContext mocks base method
func (m *MockIoTAPI) CreateThingWithContext(arg0 aws.Context, arg1 *iot.CreateThingInput, arg2 ...request.Option) (*iot.CreateThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateThingWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThingWithContext indicates an expected call of CreateThingWithContext
func (mr *MockIoTAPIMockRecorder) CreateThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThingWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateThingWithContext), varargs...)
}

// CreateTopicRule mocks base method
func (m *MockIoTAPI) CreateTopicRule(arg0 *iot.CreateTopicRuleInput) (*iot.CreateTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopicRule", arg0)
	ret0, _ := ret[0].(*iot.CreateTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopicRule indicates an expected call of CreateTopicRule
func (mr *MockIoTAPIMockRecorder) CreateTopicRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicRule", reflect.TypeOf((*MockIoTAPI)(nil).CreateTopicRule), arg0)
}

// CreateTopicRuleRequest mocks base method
func (m *MockIoTAPI) CreateTopicRuleRequest(arg0 *iot.CreateTopicRuleInput) (*request.Request, *iot.CreateTopicRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopicRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.CreateTopicRuleOutput)
	return ret0, ret1
}

// CreateTopicRuleRequest indicates an expected call of CreateTopicRuleRequest
func (mr *MockIoTAPIMockRecorder) CreateTopicRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicRuleRequest", reflect.TypeOf((*MockIoTAPI)(nil).CreateTopicRuleRequest), arg0)
}

// CreateTopicRuleWithContext mocks base method
func (m *MockIoTAPI) CreateTopicRuleWithContext(arg0 aws.Context, arg1 *iot.CreateTopicRuleInput, arg2 ...request.Option) (*iot.CreateTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTopicRuleWithContext", varargs...)
	ret0, _ := ret[0].(*iot.CreateTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopicRuleWithContext indicates an expected call of CreateTopicRuleWithContext
func (mr *MockIoTAPIMockRecorder) CreateTopicRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicRuleWithContext", reflect.TypeOf((*MockIoTAPI)(nil).CreateTopicRuleWithContext), varargs...)
}

// DeleteAuthorizer mocks base method
func (m *MockIoTAPI) DeleteAuthorizer(arg0 *iot.DeleteAuthorizerInput) (*iot.DeleteAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizer", arg0)
	ret0, _ := ret[0].(*iot.DeleteAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorizer indicates an expected call of DeleteAuthorizer
func (mr *MockIoTAPIMockRecorder) DeleteAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizer", reflect.TypeOf((*MockIoTAPI)(nil).DeleteAuthorizer), arg0)
}

// DeleteAuthorizerRequest mocks base method
func (m *MockIoTAPI) DeleteAuthorizerRequest(arg0 *iot.DeleteAuthorizerInput) (*request.Request, *iot.DeleteAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteAuthorizerOutput)
	return ret0, ret1
}

// DeleteAuthorizerRequest indicates an expected call of DeleteAuthorizerRequest
func (mr *MockIoTAPIMockRecorder) DeleteAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizerRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteAuthorizerRequest), arg0)
}

// DeleteAuthorizerWithContext mocks base method
func (m *MockIoTAPI) DeleteAuthorizerWithContext(arg0 aws.Context, arg1 *iot.DeleteAuthorizerInput, arg2 ...request.Option) (*iot.DeleteAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorizerWithContext indicates an expected call of DeleteAuthorizerWithContext
func (mr *MockIoTAPIMockRecorder) DeleteAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizerWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteAuthorizerWithContext), varargs...)
}

// DeleteCACertificate mocks base method
func (m *MockIoTAPI) DeleteCACertificate(arg0 *iot.DeleteCACertificateInput) (*iot.DeleteCACertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCACertificate", arg0)
	ret0, _ := ret[0].(*iot.DeleteCACertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCACertificate indicates an expected call of DeleteCACertificate
func (mr *MockIoTAPIMockRecorder) DeleteCACertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCACertificate", reflect.TypeOf((*MockIoTAPI)(nil).DeleteCACertificate), arg0)
}

// DeleteCACertificateRequest mocks base method
func (m *MockIoTAPI) DeleteCACertificateRequest(arg0 *iot.DeleteCACertificateInput) (*request.Request, *iot.DeleteCACertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCACertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteCACertificateOutput)
	return ret0, ret1
}

// DeleteCACertificateRequest indicates an expected call of DeleteCACertificateRequest
func (mr *MockIoTAPIMockRecorder) DeleteCACertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCACertificateRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteCACertificateRequest), arg0)
}

// DeleteCACertificateWithContext mocks base method
func (m *MockIoTAPI) DeleteCACertificateWithContext(arg0 aws.Context, arg1 *iot.DeleteCACertificateInput, arg2 ...request.Option) (*iot.DeleteCACertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCACertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteCACertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCACertificateWithContext indicates an expected call of DeleteCACertificateWithContext
func (mr *MockIoTAPIMockRecorder) DeleteCACertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCACertificateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteCACertificateWithContext), varargs...)
}

// DeleteCertificate mocks base method
func (m *MockIoTAPI) DeleteCertificate(arg0 *iot.DeleteCertificateInput) (*iot.DeleteCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", arg0)
	ret0, _ := ret[0].(*iot.DeleteCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCertificate indicates an expected call of DeleteCertificate
func (mr *MockIoTAPIMockRecorder) DeleteCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockIoTAPI)(nil).DeleteCertificate), arg0)
}

// DeleteCertificateRequest mocks base method
func (m *MockIoTAPI) DeleteCertificateRequest(arg0 *iot.DeleteCertificateInput) (*request.Request, *iot.DeleteCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteCertificateOutput)
	return ret0, ret1
}

// DeleteCertificateRequest indicates an expected call of DeleteCertificateRequest
func (mr *MockIoTAPIMockRecorder) DeleteCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteCertificateRequest), arg0)
}

// DeleteCertificateWithContext mocks base method
func (m *MockIoTAPI) DeleteCertificateWithContext(arg0 aws.Context, arg1 *iot.DeleteCertificateInput, arg2 ...request.Option) (*iot.DeleteCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCertificateWithContext indicates an expected call of DeleteCertificateWithContext
func (mr *MockIoTAPIMockRecorder) DeleteCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteCertificateWithContext), varargs...)
}

// DeleteJob mocks base method
func (m *MockIoTAPI) DeleteJob(arg0 *iot.DeleteJobInput) (*iot.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(*iot.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob
func (mr *MockIoTAPIMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockIoTAPI)(nil).DeleteJob), arg0)
}

// DeleteJobExecution mocks base method
func (m *MockIoTAPI) DeleteJobExecution(arg0 *iot.DeleteJobExecutionInput) (*iot.DeleteJobExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobExecution", arg0)
	ret0, _ := ret[0].(*iot.DeleteJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobExecution indicates an expected call of DeleteJobExecution
func (mr *MockIoTAPIMockRecorder) DeleteJobExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobExecution", reflect.TypeOf((*MockIoTAPI)(nil).DeleteJobExecution), arg0)
}

// DeleteJobExecutionRequest mocks base method
func (m *MockIoTAPI) DeleteJobExecutionRequest(arg0 *iot.DeleteJobExecutionInput) (*request.Request, *iot.DeleteJobExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteJobExecutionOutput)
	return ret0, ret1
}

// DeleteJobExecutionRequest indicates an expected call of DeleteJobExecutionRequest
func (mr *MockIoTAPIMockRecorder) DeleteJobExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobExecutionRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteJobExecutionRequest), arg0)
}

// DeleteJobExecutionWithContext mocks base method
func (m *MockIoTAPI) DeleteJobExecutionWithContext(arg0 aws.Context, arg1 *iot.DeleteJobExecutionInput, arg2 ...request.Option) (*iot.DeleteJobExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobExecutionWithContext indicates an expected call of DeleteJobExecutionWithContext
func (mr *MockIoTAPIMockRecorder) DeleteJobExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobExecutionWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteJobExecutionWithContext), varargs...)
}

// DeleteJobRequest mocks base method
func (m *MockIoTAPI) DeleteJobRequest(arg0 *iot.DeleteJobInput) (*request.Request, *iot.DeleteJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteJobOutput)
	return ret0, ret1
}

// DeleteJobRequest indicates an expected call of DeleteJobRequest
func (mr *MockIoTAPIMockRecorder) DeleteJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteJobRequest), arg0)
}

// DeleteJobWithContext mocks base method
func (m *MockIoTAPI) DeleteJobWithContext(arg0 aws.Context, arg1 *iot.DeleteJobInput, arg2 ...request.Option) (*iot.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobWithContext indicates an expected call of DeleteJobWithContext
func (mr *MockIoTAPIMockRecorder) DeleteJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteJobWithContext), varargs...)
}

// DeleteOTAUpdate mocks base method
func (m *MockIoTAPI) DeleteOTAUpdate(arg0 *iot.DeleteOTAUpdateInput) (*iot.DeleteOTAUpdateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOTAUpdate", arg0)
	ret0, _ := ret[0].(*iot.DeleteOTAUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOTAUpdate indicates an expected call of DeleteOTAUpdate
func (mr *MockIoTAPIMockRecorder) DeleteOTAUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOTAUpdate", reflect.TypeOf((*MockIoTAPI)(nil).DeleteOTAUpdate), arg0)
}

// DeleteOTAUpdateRequest mocks base method
func (m *MockIoTAPI) DeleteOTAUpdateRequest(arg0 *iot.DeleteOTAUpdateInput) (*request.Request, *iot.DeleteOTAUpdateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOTAUpdateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteOTAUpdateOutput)
	return ret0, ret1
}

// DeleteOTAUpdateRequest indicates an expected call of DeleteOTAUpdateRequest
func (mr *MockIoTAPIMockRecorder) DeleteOTAUpdateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOTAUpdateRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteOTAUpdateRequest), arg0)
}

// DeleteOTAUpdateWithContext mocks base method
func (m *MockIoTAPI) DeleteOTAUpdateWithContext(arg0 aws.Context, arg1 *iot.DeleteOTAUpdateInput, arg2 ...request.Option) (*iot.DeleteOTAUpdateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOTAUpdateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteOTAUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOTAUpdateWithContext indicates an expected call of DeleteOTAUpdateWithContext
func (mr *MockIoTAPIMockRecorder) DeleteOTAUpdateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOTAUpdateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteOTAUpdateWithContext), varargs...)
}

// DeletePolicy mocks base method
func (m *MockIoTAPI) DeletePolicy(arg0 *iot.DeletePolicyInput) (*iot.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0)
	ret0, _ := ret[0].(*iot.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockIoTAPIMockRecorder) DeletePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockIoTAPI)(nil).DeletePolicy), arg0)
}

// DeletePolicyRequest mocks base method
func (m *MockIoTAPI) DeletePolicyRequest(arg0 *iot.DeletePolicyInput) (*request.Request, *iot.DeletePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeletePolicyOutput)
	return ret0, ret1
}

// DeletePolicyRequest indicates an expected call of DeletePolicyRequest
func (mr *MockIoTAPIMockRecorder) DeletePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeletePolicyRequest), arg0)
}

// DeletePolicyVersion mocks base method
func (m *MockIoTAPI) DeletePolicyVersion(arg0 *iot.DeletePolicyVersionInput) (*iot.DeletePolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyVersion", arg0)
	ret0, _ := ret[0].(*iot.DeletePolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyVersion indicates an expected call of DeletePolicyVersion
func (mr *MockIoTAPIMockRecorder) DeletePolicyVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyVersion", reflect.TypeOf((*MockIoTAPI)(nil).DeletePolicyVersion), arg0)
}

// DeletePolicyVersionRequest mocks base method
func (m *MockIoTAPI) DeletePolicyVersionRequest(arg0 *iot.DeletePolicyVersionInput) (*request.Request, *iot.DeletePolicyVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeletePolicyVersionOutput)
	return ret0, ret1
}

// DeletePolicyVersionRequest indicates an expected call of DeletePolicyVersionRequest
func (mr *MockIoTAPIMockRecorder) DeletePolicyVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyVersionRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeletePolicyVersionRequest), arg0)
}

// DeletePolicyVersionWithContext mocks base method
func (m *MockIoTAPI) DeletePolicyVersionWithContext(arg0 aws.Context, arg1 *iot.DeletePolicyVersionInput, arg2 ...request.Option) (*iot.DeletePolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicyVersionWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeletePolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyVersionWithContext indicates an expected call of DeletePolicyVersionWithContext
func (mr *MockIoTAPIMockRecorder) DeletePolicyVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyVersionWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeletePolicyVersionWithContext), varargs...)
}

// DeletePolicyWithContext mocks base method
func (m *MockIoTAPI) DeletePolicyWithContext(arg0 aws.Context, arg1 *iot.DeletePolicyInput, arg2 ...request.Option) (*iot.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyWithContext indicates an expected call of DeletePolicyWithContext
func (mr *MockIoTAPIMockRecorder) DeletePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeletePolicyWithContext), varargs...)
}

// DeleteRegistrationCode mocks base method
func (m *MockIoTAPI) DeleteRegistrationCode(arg0 *iot.DeleteRegistrationCodeInput) (*iot.DeleteRegistrationCodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistrationCode", arg0)
	ret0, _ := ret[0].(*iot.DeleteRegistrationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationCode indicates an expected call of DeleteRegistrationCode
func (mr *MockIoTAPIMockRecorder) DeleteRegistrationCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationCode", reflect.TypeOf((*MockIoTAPI)(nil).DeleteRegistrationCode), arg0)
}

// DeleteRegistrationCodeRequest mocks base method
func (m *MockIoTAPI) DeleteRegistrationCodeRequest(arg0 *iot.DeleteRegistrationCodeInput) (*request.Request, *iot.DeleteRegistrationCodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistrationCodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteRegistrationCodeOutput)
	return ret0, ret1
}

// DeleteRegistrationCodeRequest indicates an expected call of DeleteRegistrationCodeRequest
func (mr *MockIoTAPIMockRecorder) DeleteRegistrationCodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationCodeRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteRegistrationCodeRequest), arg0)
}

// DeleteRegistrationCodeWithContext mocks base method
func (m *MockIoTAPI) DeleteRegistrationCodeWithContext(arg0 aws.Context, arg1 *iot.DeleteRegistrationCodeInput, arg2 ...request.Option) (*iot.DeleteRegistrationCodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegistrationCodeWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteRegistrationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationCodeWithContext indicates an expected call of DeleteRegistrationCodeWithContext
func (mr *MockIoTAPIMockRecorder) DeleteRegistrationCodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationCodeWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteRegistrationCodeWithContext), varargs...)
}

// DeleteRoleAlias mocks base method
func (m *MockIoTAPI) DeleteRoleAlias(arg0 *iot.DeleteRoleAliasInput) (*iot.DeleteRoleAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleAlias", arg0)
	ret0, _ := ret[0].(*iot.DeleteRoleAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoleAlias indicates an expected call of DeleteRoleAlias
func (mr *MockIoTAPIMockRecorder) DeleteRoleAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleAlias", reflect.TypeOf((*MockIoTAPI)(nil).DeleteRoleAlias), arg0)
}

// DeleteRoleAliasRequest mocks base method
func (m *MockIoTAPI) DeleteRoleAliasRequest(arg0 *iot.DeleteRoleAliasInput) (*request.Request, *iot.DeleteRoleAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteRoleAliasOutput)
	return ret0, ret1
}

// DeleteRoleAliasRequest indicates an expected call of DeleteRoleAliasRequest
func (mr *MockIoTAPIMockRecorder) DeleteRoleAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleAliasRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteRoleAliasRequest), arg0)
}

// DeleteRoleAliasWithContext mocks base method
func (m *MockIoTAPI) DeleteRoleAliasWithContext(arg0 aws.Context, arg1 *iot.DeleteRoleAliasInput, arg2 ...request.Option) (*iot.DeleteRoleAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoleAliasWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteRoleAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoleAliasWithContext indicates an expected call of DeleteRoleAliasWithContext
func (mr *MockIoTAPIMockRecorder) DeleteRoleAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleAliasWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteRoleAliasWithContext), varargs...)
}

// DeleteStream mocks base method
func (m *MockIoTAPI) DeleteStream(arg0 *iot.DeleteStreamInput) (*iot.DeleteStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", arg0)
	ret0, _ := ret[0].(*iot.DeleteStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStream indicates an expected call of DeleteStream
func (mr *MockIoTAPIMockRecorder) DeleteStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockIoTAPI)(nil).DeleteStream), arg0)
}

// DeleteStreamRequest mocks base method
func (m *MockIoTAPI) DeleteStreamRequest(arg0 *iot.DeleteStreamInput) (*request.Request, *iot.DeleteStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteStreamOutput)
	return ret0, ret1
}

// DeleteStreamRequest indicates an expected call of DeleteStreamRequest
func (mr *MockIoTAPIMockRecorder) DeleteStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteStreamRequest), arg0)
}

// DeleteStreamWithContext mocks base method
func (m *MockIoTAPI) DeleteStreamWithContext(arg0 aws.Context, arg1 *iot.DeleteStreamInput, arg2 ...request.Option) (*iot.DeleteStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStreamWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamWithContext indicates an expected call of DeleteStreamWithContext
func (mr *MockIoTAPIMockRecorder) DeleteStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteStreamWithContext), varargs...)
}

// DeleteThing mocks base method
func (m *MockIoTAPI) DeleteThing(arg0 *iot.DeleteThingInput) (*iot.DeleteThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThing", arg0)
	ret0, _ := ret[0].(*iot.DeleteThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteThing indicates an expected call of DeleteThing
func (mr *MockIoTAPIMockRecorder) DeleteThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThing", reflect.TypeOf((*MockIoTAPI)(nil).DeleteThing), arg0)
}

// DeleteThingGroup mocks base method
func (m *MockIoTAPI) DeleteThingGroup(arg0 *iot.DeleteThingGroupInput) (*iot.DeleteThingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThingGroup", arg0)
	ret0, _ := ret[0].(*iot.DeleteThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteThingGroup indicates an expected call of DeleteThingGroup
func (mr *MockIoTAPIMockRecorder) DeleteThingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingGroup", reflect.TypeOf((*MockIoTAPI)(nil).DeleteThingGroup), arg0)
}

// DeleteThingGroupRequest mocks base method
func (m *MockIoTAPI) DeleteThingGroupRequest(arg0 *iot.DeleteThingGroupInput) (*request.Request, *iot.DeleteThingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteThingGroupOutput)
	return ret0, ret1
}

// DeleteThingGroupRequest indicates an expected call of DeleteThingGroupRequest
func (mr *MockIoTAPIMockRecorder) DeleteThingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingGroupRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteThingGroupRequest), arg0)
}

// DeleteThingGroupWithContext mocks base method
func (m *MockIoTAPI) DeleteThingGroupWithContext(arg0 aws.Context, arg1 *iot.DeleteThingGroupInput, arg2 ...request.Option) (*iot.DeleteThingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteThingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteThingGroupWithContext indicates an expected call of DeleteThingGroupWithContext
func (mr *MockIoTAPIMockRecorder) DeleteThingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingGroupWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteThingGroupWithContext), varargs...)
}

// DeleteThingRequest mocks base method
func (m *MockIoTAPI) DeleteThingRequest(arg0 *iot.DeleteThingInput) (*request.Request, *iot.DeleteThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteThingOutput)
	return ret0, ret1
}

// DeleteThingRequest indicates an expected call of DeleteThingRequest
func (mr *MockIoTAPIMockRecorder) DeleteThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteThingRequest), arg0)
}

// DeleteThingType mocks base method
func (m *MockIoTAPI) DeleteThingType(arg0 *iot.DeleteThingTypeInput) (*iot.DeleteThingTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThingType", arg0)
	ret0, _ := ret[0].(*iot.DeleteThingTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteThingType indicates an expected call of DeleteThingType
func (mr *MockIoTAPIMockRecorder) DeleteThingType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingType", reflect.TypeOf((*MockIoTAPI)(nil).DeleteThingType), arg0)
}

// DeleteThingTypeRequest mocks base method
func (m *MockIoTAPI) DeleteThingTypeRequest(arg0 *iot.DeleteThingTypeInput) (*request.Request, *iot.DeleteThingTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThingTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteThingTypeOutput)
	return ret0, ret1
}

// DeleteThingTypeRequest indicates an expected call of DeleteThingTypeRequest
func (mr *MockIoTAPIMockRecorder) DeleteThingTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingTypeRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteThingTypeRequest), arg0)
}

// DeleteThingTypeWithContext mocks base method
func (m *MockIoTAPI) DeleteThingTypeWithContext(arg0 aws.Context, arg1 *iot.DeleteThingTypeInput, arg2 ...request.Option) (*iot.DeleteThingTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteThingTypeWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteThingTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteThingTypeWithContext indicates an expected call of DeleteThingTypeWithContext
func (mr *MockIoTAPIMockRecorder) DeleteThingTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingTypeWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteThingTypeWithContext), varargs...)
}

// DeleteThingWithContext mocks base method
func (m *MockIoTAPI) DeleteThingWithContext(arg0 aws.Context, arg1 *iot.DeleteThingInput, arg2 ...request.Option) (*iot.DeleteThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteThingWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteThingWithContext indicates an expected call of DeleteThingWithContext
func (mr *MockIoTAPIMockRecorder) DeleteThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteThingWithContext), varargs...)
}

// DeleteTopicRule mocks base method
func (m *MockIoTAPI) DeleteTopicRule(arg0 *iot.DeleteTopicRuleInput) (*iot.DeleteTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicRule", arg0)
	ret0, _ := ret[0].(*iot.DeleteTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopicRule indicates an expected call of DeleteTopicRule
func (mr *MockIoTAPIMockRecorder) DeleteTopicRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicRule", reflect.TypeOf((*MockIoTAPI)(nil).DeleteTopicRule), arg0)
}

// DeleteTopicRuleRequest mocks base method
func (m *MockIoTAPI) DeleteTopicRuleRequest(arg0 *iot.DeleteTopicRuleInput) (*request.Request, *iot.DeleteTopicRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteTopicRuleOutput)
	return ret0, ret1
}

// DeleteTopicRuleRequest indicates an expected call of DeleteTopicRuleRequest
func (mr *MockIoTAPIMockRecorder) DeleteTopicRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicRuleRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteTopicRuleRequest), arg0)
}

// DeleteTopicRuleWithContext mocks base method
func (m *MockIoTAPI) DeleteTopicRuleWithContext(arg0 aws.Context, arg1 *iot.DeleteTopicRuleInput, arg2 ...request.Option) (*iot.DeleteTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTopicRuleWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopicRuleWithContext indicates an expected call of DeleteTopicRuleWithContext
func (mr *MockIoTAPIMockRecorder) DeleteTopicRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicRuleWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteTopicRuleWithContext), varargs...)
}

// DeleteV2LoggingLevel mocks base method
func (m *MockIoTAPI) DeleteV2LoggingLevel(arg0 *iot.DeleteV2LoggingLevelInput) (*iot.DeleteV2LoggingLevelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteV2LoggingLevel", arg0)
	ret0, _ := ret[0].(*iot.DeleteV2LoggingLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteV2LoggingLevel indicates an expected call of DeleteV2LoggingLevel
func (mr *MockIoTAPIMockRecorder) DeleteV2LoggingLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV2LoggingLevel", reflect.TypeOf((*MockIoTAPI)(nil).DeleteV2LoggingLevel), arg0)
}

// DeleteV2LoggingLevelRequest mocks base method
func (m *MockIoTAPI) DeleteV2LoggingLevelRequest(arg0 *iot.DeleteV2LoggingLevelInput) (*request.Request, *iot.DeleteV2LoggingLevelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteV2LoggingLevelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeleteV2LoggingLevelOutput)
	return ret0, ret1
}

// DeleteV2LoggingLevelRequest indicates an expected call of DeleteV2LoggingLevelRequest
func (mr *MockIoTAPIMockRecorder) DeleteV2LoggingLevelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV2LoggingLevelRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeleteV2LoggingLevelRequest), arg0)
}

// DeleteV2LoggingLevelWithContext mocks base method
func (m *MockIoTAPI) DeleteV2LoggingLevelWithContext(arg0 aws.Context, arg1 *iot.DeleteV2LoggingLevelInput, arg2 ...request.Option) (*iot.DeleteV2LoggingLevelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteV2LoggingLevelWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeleteV2LoggingLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteV2LoggingLevelWithContext indicates an expected call of DeleteV2LoggingLevelWithContext
func (mr *MockIoTAPIMockRecorder) DeleteV2LoggingLevelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV2LoggingLevelWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeleteV2LoggingLevelWithContext), varargs...)
}

// DeprecateThingType mocks base method
func (m *MockIoTAPI) DeprecateThingType(arg0 *iot.DeprecateThingTypeInput) (*iot.DeprecateThingTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeprecateThingType", arg0)
	ret0, _ := ret[0].(*iot.DeprecateThingTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeprecateThingType indicates an expected call of DeprecateThingType
func (mr *MockIoTAPIMockRecorder) DeprecateThingType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprecateThingType", reflect.TypeOf((*MockIoTAPI)(nil).DeprecateThingType), arg0)
}

// DeprecateThingTypeRequest mocks base method
func (m *MockIoTAPI) DeprecateThingTypeRequest(arg0 *iot.DeprecateThingTypeInput) (*request.Request, *iot.DeprecateThingTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeprecateThingTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DeprecateThingTypeOutput)
	return ret0, ret1
}

// DeprecateThingTypeRequest indicates an expected call of DeprecateThingTypeRequest
func (mr *MockIoTAPIMockRecorder) DeprecateThingTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprecateThingTypeRequest", reflect.TypeOf((*MockIoTAPI)(nil).DeprecateThingTypeRequest), arg0)
}

// DeprecateThingTypeWithContext mocks base method
func (m *MockIoTAPI) DeprecateThingTypeWithContext(arg0 aws.Context, arg1 *iot.DeprecateThingTypeInput, arg2 ...request.Option) (*iot.DeprecateThingTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeprecateThingTypeWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DeprecateThingTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeprecateThingTypeWithContext indicates an expected call of DeprecateThingTypeWithContext
func (mr *MockIoTAPIMockRecorder) DeprecateThingTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprecateThingTypeWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DeprecateThingTypeWithContext), varargs...)
}

// DescribeAuthorizer mocks base method
func (m *MockIoTAPI) DescribeAuthorizer(arg0 *iot.DescribeAuthorizerInput) (*iot.DescribeAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAuthorizer", arg0)
	ret0, _ := ret[0].(*iot.DescribeAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAuthorizer indicates an expected call of DescribeAuthorizer
func (mr *MockIoTAPIMockRecorder) DescribeAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAuthorizer", reflect.TypeOf((*MockIoTAPI)(nil).DescribeAuthorizer), arg0)
}

// DescribeAuthorizerRequest mocks base method
func (m *MockIoTAPI) DescribeAuthorizerRequest(arg0 *iot.DescribeAuthorizerInput) (*request.Request, *iot.DescribeAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeAuthorizerOutput)
	return ret0, ret1
}

// DescribeAuthorizerRequest indicates an expected call of DescribeAuthorizerRequest
func (mr *MockIoTAPIMockRecorder) DescribeAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAuthorizerRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeAuthorizerRequest), arg0)
}

// DescribeAuthorizerWithContext mocks base method
func (m *MockIoTAPI) DescribeAuthorizerWithContext(arg0 aws.Context, arg1 *iot.DescribeAuthorizerInput, arg2 ...request.Option) (*iot.DescribeAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAuthorizerWithContext indicates an expected call of DescribeAuthorizerWithContext
func (mr *MockIoTAPIMockRecorder) DescribeAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAuthorizerWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeAuthorizerWithContext), varargs...)
}

// DescribeCACertificate mocks base method
func (m *MockIoTAPI) DescribeCACertificate(arg0 *iot.DescribeCACertificateInput) (*iot.DescribeCACertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCACertificate", arg0)
	ret0, _ := ret[0].(*iot.DescribeCACertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCACertificate indicates an expected call of DescribeCACertificate
func (mr *MockIoTAPIMockRecorder) DescribeCACertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCACertificate", reflect.TypeOf((*MockIoTAPI)(nil).DescribeCACertificate), arg0)
}

// DescribeCACertificateRequest mocks base method
func (m *MockIoTAPI) DescribeCACertificateRequest(arg0 *iot.DescribeCACertificateInput) (*request.Request, *iot.DescribeCACertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCACertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeCACertificateOutput)
	return ret0, ret1
}

// DescribeCACertificateRequest indicates an expected call of DescribeCACertificateRequest
func (mr *MockIoTAPIMockRecorder) DescribeCACertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCACertificateRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeCACertificateRequest), arg0)
}

// DescribeCACertificateWithContext mocks base method
func (m *MockIoTAPI) DescribeCACertificateWithContext(arg0 aws.Context, arg1 *iot.DescribeCACertificateInput, arg2 ...request.Option) (*iot.DescribeCACertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCACertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeCACertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCACertificateWithContext indicates an expected call of DescribeCACertificateWithContext
func (mr *MockIoTAPIMockRecorder) DescribeCACertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCACertificateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeCACertificateWithContext), varargs...)
}

// DescribeCertificate mocks base method
func (m *MockIoTAPI) DescribeCertificate(arg0 *iot.DescribeCertificateInput) (*iot.DescribeCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificate", arg0)
	ret0, _ := ret[0].(*iot.DescribeCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificate indicates an expected call of DescribeCertificate
func (mr *MockIoTAPIMockRecorder) DescribeCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificate", reflect.TypeOf((*MockIoTAPI)(nil).DescribeCertificate), arg0)
}

// DescribeCertificateRequest mocks base method
func (m *MockIoTAPI) DescribeCertificateRequest(arg0 *iot.DescribeCertificateInput) (*request.Request, *iot.DescribeCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeCertificateOutput)
	return ret0, ret1
}

// DescribeCertificateRequest indicates an expected call of DescribeCertificateRequest
func (mr *MockIoTAPIMockRecorder) DescribeCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeCertificateRequest), arg0)
}

// DescribeCertificateWithContext mocks base method
func (m *MockIoTAPI) DescribeCertificateWithContext(arg0 aws.Context, arg1 *iot.DescribeCertificateInput, arg2 ...request.Option) (*iot.DescribeCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificateWithContext indicates an expected call of DescribeCertificateWithContext
func (mr *MockIoTAPIMockRecorder) DescribeCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeCertificateWithContext), varargs...)
}

// DescribeDefaultAuthorizer mocks base method
func (m *MockIoTAPI) DescribeDefaultAuthorizer(arg0 *iot.DescribeDefaultAuthorizerInput) (*iot.DescribeDefaultAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDefaultAuthorizer", arg0)
	ret0, _ := ret[0].(*iot.DescribeDefaultAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDefaultAuthorizer indicates an expected call of DescribeDefaultAuthorizer
func (mr *MockIoTAPIMockRecorder) DescribeDefaultAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultAuthorizer", reflect.TypeOf((*MockIoTAPI)(nil).DescribeDefaultAuthorizer), arg0)
}

// DescribeDefaultAuthorizerRequest mocks base method
func (m *MockIoTAPI) DescribeDefaultAuthorizerRequest(arg0 *iot.DescribeDefaultAuthorizerInput) (*request.Request, *iot.DescribeDefaultAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDefaultAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeDefaultAuthorizerOutput)
	return ret0, ret1
}

// DescribeDefaultAuthorizerRequest indicates an expected call of DescribeDefaultAuthorizerRequest
func (mr *MockIoTAPIMockRecorder) DescribeDefaultAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultAuthorizerRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeDefaultAuthorizerRequest), arg0)
}

// DescribeDefaultAuthorizerWithContext mocks base method
func (m *MockIoTAPI) DescribeDefaultAuthorizerWithContext(arg0 aws.Context, arg1 *iot.DescribeDefaultAuthorizerInput, arg2 ...request.Option) (*iot.DescribeDefaultAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDefaultAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeDefaultAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDefaultAuthorizerWithContext indicates an expected call of DescribeDefaultAuthorizerWithContext
func (mr *MockIoTAPIMockRecorder) DescribeDefaultAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultAuthorizerWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeDefaultAuthorizerWithContext), varargs...)
}

// DescribeEndpoint mocks base method
func (m *MockIoTAPI) DescribeEndpoint(arg0 *iot.DescribeEndpointInput) (*iot.DescribeEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpoint", arg0)
	ret0, _ := ret[0].(*iot.DescribeEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpoint indicates an expected call of DescribeEndpoint
func (mr *MockIoTAPIMockRecorder) DescribeEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpoint", reflect.TypeOf((*MockIoTAPI)(nil).DescribeEndpoint), arg0)
}

// DescribeEndpointRequest mocks base method
func (m *MockIoTAPI) DescribeEndpointRequest(arg0 *iot.DescribeEndpointInput) (*request.Request, *iot.DescribeEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeEndpointOutput)
	return ret0, ret1
}

// DescribeEndpointRequest indicates an expected call of DescribeEndpointRequest
func (mr *MockIoTAPIMockRecorder) DescribeEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeEndpointRequest), arg0)
}

// DescribeEndpointWithContext mocks base method
func (m *MockIoTAPI) DescribeEndpointWithContext(arg0 aws.Context, arg1 *iot.DescribeEndpointInput, arg2 ...request.Option) (*iot.DescribeEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointWithContext indicates an expected call of DescribeEndpointWithContext
func (mr *MockIoTAPIMockRecorder) DescribeEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeEndpointWithContext), varargs...)
}

// DescribeEventConfigurations mocks base method
func (m *MockIoTAPI) DescribeEventConfigurations(arg0 *iot.DescribeEventConfigurationsInput) (*iot.DescribeEventConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventConfigurations", arg0)
	ret0, _ := ret[0].(*iot.DescribeEventConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventConfigurations indicates an expected call of DescribeEventConfigurations
func (mr *MockIoTAPIMockRecorder) DescribeEventConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventConfigurations", reflect.TypeOf((*MockIoTAPI)(nil).DescribeEventConfigurations), arg0)
}

// DescribeEventConfigurationsRequest mocks base method
func (m *MockIoTAPI) DescribeEventConfigurationsRequest(arg0 *iot.DescribeEventConfigurationsInput) (*request.Request, *iot.DescribeEventConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeEventConfigurationsOutput)
	return ret0, ret1
}

// DescribeEventConfigurationsRequest indicates an expected call of DescribeEventConfigurationsRequest
func (mr *MockIoTAPIMockRecorder) DescribeEventConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventConfigurationsRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeEventConfigurationsRequest), arg0)
}

// DescribeEventConfigurationsWithContext mocks base method
func (m *MockIoTAPI) DescribeEventConfigurationsWithContext(arg0 aws.Context, arg1 *iot.DescribeEventConfigurationsInput, arg2 ...request.Option) (*iot.DescribeEventConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeEventConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventConfigurationsWithContext indicates an expected call of DescribeEventConfigurationsWithContext
func (mr *MockIoTAPIMockRecorder) DescribeEventConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventConfigurationsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeEventConfigurationsWithContext), varargs...)
}

// DescribeIndex mocks base method
func (m *MockIoTAPI) DescribeIndex(arg0 *iot.DescribeIndexInput) (*iot.DescribeIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeIndex", arg0)
	ret0, _ := ret[0].(*iot.DescribeIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIndex indicates an expected call of DescribeIndex
func (mr *MockIoTAPIMockRecorder) DescribeIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIndex", reflect.TypeOf((*MockIoTAPI)(nil).DescribeIndex), arg0)
}

// DescribeIndexRequest mocks base method
func (m *MockIoTAPI) DescribeIndexRequest(arg0 *iot.DescribeIndexInput) (*request.Request, *iot.DescribeIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeIndexOutput)
	return ret0, ret1
}

// DescribeIndexRequest indicates an expected call of DescribeIndexRequest
func (mr *MockIoTAPIMockRecorder) DescribeIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIndexRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeIndexRequest), arg0)
}

// DescribeIndexWithContext mocks base method
func (m *MockIoTAPI) DescribeIndexWithContext(arg0 aws.Context, arg1 *iot.DescribeIndexInput, arg2 ...request.Option) (*iot.DescribeIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIndexWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIndexWithContext indicates an expected call of DescribeIndexWithContext
func (mr *MockIoTAPIMockRecorder) DescribeIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIndexWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeIndexWithContext), varargs...)
}

// DescribeJob mocks base method
func (m *MockIoTAPI) DescribeJob(arg0 *iot.DescribeJobInput) (*iot.DescribeJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJob", arg0)
	ret0, _ := ret[0].(*iot.DescribeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJob indicates an expected call of DescribeJob
func (mr *MockIoTAPIMockRecorder) DescribeJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJob", reflect.TypeOf((*MockIoTAPI)(nil).DescribeJob), arg0)
}

// DescribeJobExecution mocks base method
func (m *MockIoTAPI) DescribeJobExecution(arg0 *iot.DescribeJobExecutionInput) (*iot.DescribeJobExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobExecution", arg0)
	ret0, _ := ret[0].(*iot.DescribeJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobExecution indicates an expected call of DescribeJobExecution
func (mr *MockIoTAPIMockRecorder) DescribeJobExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobExecution", reflect.TypeOf((*MockIoTAPI)(nil).DescribeJobExecution), arg0)
}

// DescribeJobExecutionRequest mocks base method
func (m *MockIoTAPI) DescribeJobExecutionRequest(arg0 *iot.DescribeJobExecutionInput) (*request.Request, *iot.DescribeJobExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeJobExecutionOutput)
	return ret0, ret1
}

// DescribeJobExecutionRequest indicates an expected call of DescribeJobExecutionRequest
func (mr *MockIoTAPIMockRecorder) DescribeJobExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobExecutionRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeJobExecutionRequest), arg0)
}

// DescribeJobExecutionWithContext mocks base method
func (m *MockIoTAPI) DescribeJobExecutionWithContext(arg0 aws.Context, arg1 *iot.DescribeJobExecutionInput, arg2 ...request.Option) (*iot.DescribeJobExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobExecutionWithContext indicates an expected call of DescribeJobExecutionWithContext
func (mr *MockIoTAPIMockRecorder) DescribeJobExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobExecutionWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeJobExecutionWithContext), varargs...)
}

// DescribeJobRequest mocks base method
func (m *MockIoTAPI) DescribeJobRequest(arg0 *iot.DescribeJobInput) (*request.Request, *iot.DescribeJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeJobOutput)
	return ret0, ret1
}

// DescribeJobRequest indicates an expected call of DescribeJobRequest
func (mr *MockIoTAPIMockRecorder) DescribeJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeJobRequest), arg0)
}

// DescribeJobWithContext mocks base method
func (m *MockIoTAPI) DescribeJobWithContext(arg0 aws.Context, arg1 *iot.DescribeJobInput, arg2 ...request.Option) (*iot.DescribeJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobWithContext indicates an expected call of DescribeJobWithContext
func (mr *MockIoTAPIMockRecorder) DescribeJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeJobWithContext), varargs...)
}

// DescribeRoleAlias mocks base method
func (m *MockIoTAPI) DescribeRoleAlias(arg0 *iot.DescribeRoleAliasInput) (*iot.DescribeRoleAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRoleAlias", arg0)
	ret0, _ := ret[0].(*iot.DescribeRoleAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoleAlias indicates an expected call of DescribeRoleAlias
func (mr *MockIoTAPIMockRecorder) DescribeRoleAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoleAlias", reflect.TypeOf((*MockIoTAPI)(nil).DescribeRoleAlias), arg0)
}

// DescribeRoleAliasRequest mocks base method
func (m *MockIoTAPI) DescribeRoleAliasRequest(arg0 *iot.DescribeRoleAliasInput) (*request.Request, *iot.DescribeRoleAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRoleAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeRoleAliasOutput)
	return ret0, ret1
}

// DescribeRoleAliasRequest indicates an expected call of DescribeRoleAliasRequest
func (mr *MockIoTAPIMockRecorder) DescribeRoleAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoleAliasRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeRoleAliasRequest), arg0)
}

// DescribeRoleAliasWithContext mocks base method
func (m *MockIoTAPI) DescribeRoleAliasWithContext(arg0 aws.Context, arg1 *iot.DescribeRoleAliasInput, arg2 ...request.Option) (*iot.DescribeRoleAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRoleAliasWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeRoleAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoleAliasWithContext indicates an expected call of DescribeRoleAliasWithContext
func (mr *MockIoTAPIMockRecorder) DescribeRoleAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoleAliasWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeRoleAliasWithContext), varargs...)
}

// DescribeStream mocks base method
func (m *MockIoTAPI) DescribeStream(arg0 *iot.DescribeStreamInput) (*iot.DescribeStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStream", arg0)
	ret0, _ := ret[0].(*iot.DescribeStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStream indicates an expected call of DescribeStream
func (mr *MockIoTAPIMockRecorder) DescribeStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStream", reflect.TypeOf((*MockIoTAPI)(nil).DescribeStream), arg0)
}

// DescribeStreamRequest mocks base method
func (m *MockIoTAPI) DescribeStreamRequest(arg0 *iot.DescribeStreamInput) (*request.Request, *iot.DescribeStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeStreamOutput)
	return ret0, ret1
}

// DescribeStreamRequest indicates an expected call of DescribeStreamRequest
func (mr *MockIoTAPIMockRecorder) DescribeStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStreamRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeStreamRequest), arg0)
}

// DescribeStreamWithContext mocks base method
func (m *MockIoTAPI) DescribeStreamWithContext(arg0 aws.Context, arg1 *iot.DescribeStreamInput, arg2 ...request.Option) (*iot.DescribeStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStreamWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStreamWithContext indicates an expected call of DescribeStreamWithContext
func (mr *MockIoTAPIMockRecorder) DescribeStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStreamWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeStreamWithContext), varargs...)
}

// DescribeThing mocks base method
func (m *MockIoTAPI) DescribeThing(arg0 *iot.DescribeThingInput) (*iot.DescribeThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeThing", arg0)
	ret0, _ := ret[0].(*iot.DescribeThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThing indicates an expected call of DescribeThing
func (mr *MockIoTAPIMockRecorder) DescribeThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThing", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThing), arg0)
}

// DescribeThingGroup mocks base method
func (m *MockIoTAPI) DescribeThingGroup(arg0 *iot.DescribeThingGroupInput) (*iot.DescribeThingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeThingGroup", arg0)
	ret0, _ := ret[0].(*iot.DescribeThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThingGroup indicates an expected call of DescribeThingGroup
func (mr *MockIoTAPIMockRecorder) DescribeThingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingGroup", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingGroup), arg0)
}

// DescribeThingGroupRequest mocks base method
func (m *MockIoTAPI) DescribeThingGroupRequest(arg0 *iot.DescribeThingGroupInput) (*request.Request, *iot.DescribeThingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeThingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeThingGroupOutput)
	return ret0, ret1
}

// DescribeThingGroupRequest indicates an expected call of DescribeThingGroupRequest
func (mr *MockIoTAPIMockRecorder) DescribeThingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingGroupRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingGroupRequest), arg0)
}

// DescribeThingGroupWithContext mocks base method
func (m *MockIoTAPI) DescribeThingGroupWithContext(arg0 aws.Context, arg1 *iot.DescribeThingGroupInput, arg2 ...request.Option) (*iot.DescribeThingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeThingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThingGroupWithContext indicates an expected call of DescribeThingGroupWithContext
func (mr *MockIoTAPIMockRecorder) DescribeThingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingGroupWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingGroupWithContext), varargs...)
}

// DescribeThingRegistrationTask mocks base method
func (m *MockIoTAPI) DescribeThingRegistrationTask(arg0 *iot.DescribeThingRegistrationTaskInput) (*iot.DescribeThingRegistrationTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeThingRegistrationTask", arg0)
	ret0, _ := ret[0].(*iot.DescribeThingRegistrationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThingRegistrationTask indicates an expected call of DescribeThingRegistrationTask
func (mr *MockIoTAPIMockRecorder) DescribeThingRegistrationTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingRegistrationTask", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingRegistrationTask), arg0)
}

// DescribeThingRegistrationTaskRequest mocks base method
func (m *MockIoTAPI) DescribeThingRegistrationTaskRequest(arg0 *iot.DescribeThingRegistrationTaskInput) (*request.Request, *iot.DescribeThingRegistrationTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeThingRegistrationTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeThingRegistrationTaskOutput)
	return ret0, ret1
}

// DescribeThingRegistrationTaskRequest indicates an expected call of DescribeThingRegistrationTaskRequest
func (mr *MockIoTAPIMockRecorder) DescribeThingRegistrationTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingRegistrationTaskRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingRegistrationTaskRequest), arg0)
}

// DescribeThingRegistrationTaskWithContext mocks base method
func (m *MockIoTAPI) DescribeThingRegistrationTaskWithContext(arg0 aws.Context, arg1 *iot.DescribeThingRegistrationTaskInput, arg2 ...request.Option) (*iot.DescribeThingRegistrationTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeThingRegistrationTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeThingRegistrationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThingRegistrationTaskWithContext indicates an expected call of DescribeThingRegistrationTaskWithContext
func (mr *MockIoTAPIMockRecorder) DescribeThingRegistrationTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingRegistrationTaskWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingRegistrationTaskWithContext), varargs...)
}

// DescribeThingRequest mocks base method
func (m *MockIoTAPI) DescribeThingRequest(arg0 *iot.DescribeThingInput) (*request.Request, *iot.DescribeThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeThingOutput)
	return ret0, ret1
}

// DescribeThingRequest indicates an expected call of DescribeThingRequest
func (mr *MockIoTAPIMockRecorder) DescribeThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingRequest), arg0)
}

// DescribeThingType mocks base method
func (m *MockIoTAPI) DescribeThingType(arg0 *iot.DescribeThingTypeInput) (*iot.DescribeThingTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeThingType", arg0)
	ret0, _ := ret[0].(*iot.DescribeThingTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThingType indicates an expected call of DescribeThingType
func (mr *MockIoTAPIMockRecorder) DescribeThingType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingType", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingType), arg0)
}

// DescribeThingTypeRequest mocks base method
func (m *MockIoTAPI) DescribeThingTypeRequest(arg0 *iot.DescribeThingTypeInput) (*request.Request, *iot.DescribeThingTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeThingTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DescribeThingTypeOutput)
	return ret0, ret1
}

// DescribeThingTypeRequest indicates an expected call of DescribeThingTypeRequest
func (mr *MockIoTAPIMockRecorder) DescribeThingTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingTypeRequest", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingTypeRequest), arg0)
}

// DescribeThingTypeWithContext mocks base method
func (m *MockIoTAPI) DescribeThingTypeWithContext(arg0 aws.Context, arg1 *iot.DescribeThingTypeInput, arg2 ...request.Option) (*iot.DescribeThingTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeThingTypeWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeThingTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThingTypeWithContext indicates an expected call of DescribeThingTypeWithContext
func (mr *MockIoTAPIMockRecorder) DescribeThingTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingTypeWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingTypeWithContext), varargs...)
}

// DescribeThingWithContext mocks base method
func (m *MockIoTAPI) DescribeThingWithContext(arg0 aws.Context, arg1 *iot.DescribeThingInput, arg2 ...request.Option) (*iot.DescribeThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeThingWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DescribeThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThingWithContext indicates an expected call of DescribeThingWithContext
func (mr *MockIoTAPIMockRecorder) DescribeThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DescribeThingWithContext), varargs...)
}

// DetachPolicy mocks base method
func (m *MockIoTAPI) DetachPolicy(arg0 *iot.DetachPolicyInput) (*iot.DetachPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachPolicy", arg0)
	ret0, _ := ret[0].(*iot.DetachPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachPolicy indicates an expected call of DetachPolicy
func (mr *MockIoTAPIMockRecorder) DetachPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPolicy", reflect.TypeOf((*MockIoTAPI)(nil).DetachPolicy), arg0)
}

// DetachPolicyRequest mocks base method
func (m *MockIoTAPI) DetachPolicyRequest(arg0 *iot.DetachPolicyInput) (*request.Request, *iot.DetachPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DetachPolicyOutput)
	return ret0, ret1
}

// DetachPolicyRequest indicates an expected call of DetachPolicyRequest
func (mr *MockIoTAPIMockRecorder) DetachPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPolicyRequest", reflect.TypeOf((*MockIoTAPI)(nil).DetachPolicyRequest), arg0)
}

// DetachPolicyWithContext mocks base method
func (m *MockIoTAPI) DetachPolicyWithContext(arg0 aws.Context, arg1 *iot.DetachPolicyInput, arg2 ...request.Option) (*iot.DetachPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DetachPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachPolicyWithContext indicates an expected call of DetachPolicyWithContext
func (mr *MockIoTAPIMockRecorder) DetachPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPolicyWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DetachPolicyWithContext), varargs...)
}

// DetachPrincipalPolicy mocks base method
func (m *MockIoTAPI) DetachPrincipalPolicy(arg0 *iot.DetachPrincipalPolicyInput) (*iot.DetachPrincipalPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachPrincipalPolicy", arg0)
	ret0, _ := ret[0].(*iot.DetachPrincipalPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachPrincipalPolicy indicates an expected call of DetachPrincipalPolicy
func (mr *MockIoTAPIMockRecorder) DetachPrincipalPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPrincipalPolicy", reflect.TypeOf((*MockIoTAPI)(nil).DetachPrincipalPolicy), arg0)
}

// DetachPrincipalPolicyRequest mocks base method
func (m *MockIoTAPI) DetachPrincipalPolicyRequest(arg0 *iot.DetachPrincipalPolicyInput) (*request.Request, *iot.DetachPrincipalPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachPrincipalPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DetachPrincipalPolicyOutput)
	return ret0, ret1
}

// DetachPrincipalPolicyRequest indicates an expected call of DetachPrincipalPolicyRequest
func (mr *MockIoTAPIMockRecorder) DetachPrincipalPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPrincipalPolicyRequest", reflect.TypeOf((*MockIoTAPI)(nil).DetachPrincipalPolicyRequest), arg0)
}

// DetachPrincipalPolicyWithContext mocks base method
func (m *MockIoTAPI) DetachPrincipalPolicyWithContext(arg0 aws.Context, arg1 *iot.DetachPrincipalPolicyInput, arg2 ...request.Option) (*iot.DetachPrincipalPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachPrincipalPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DetachPrincipalPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachPrincipalPolicyWithContext indicates an expected call of DetachPrincipalPolicyWithContext
func (mr *MockIoTAPIMockRecorder) DetachPrincipalPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPrincipalPolicyWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DetachPrincipalPolicyWithContext), varargs...)
}

// DetachThingPrincipal mocks base method
func (m *MockIoTAPI) DetachThingPrincipal(arg0 *iot.DetachThingPrincipalInput) (*iot.DetachThingPrincipalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachThingPrincipal", arg0)
	ret0, _ := ret[0].(*iot.DetachThingPrincipalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachThingPrincipal indicates an expected call of DetachThingPrincipal
func (mr *MockIoTAPIMockRecorder) DetachThingPrincipal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachThingPrincipal", reflect.TypeOf((*MockIoTAPI)(nil).DetachThingPrincipal), arg0)
}

// DetachThingPrincipalRequest mocks base method
func (m *MockIoTAPI) DetachThingPrincipalRequest(arg0 *iot.DetachThingPrincipalInput) (*request.Request, *iot.DetachThingPrincipalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachThingPrincipalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DetachThingPrincipalOutput)
	return ret0, ret1
}

// DetachThingPrincipalRequest indicates an expected call of DetachThingPrincipalRequest
func (mr *MockIoTAPIMockRecorder) DetachThingPrincipalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachThingPrincipalRequest", reflect.TypeOf((*MockIoTAPI)(nil).DetachThingPrincipalRequest), arg0)
}

// DetachThingPrincipalWithContext mocks base method
func (m *MockIoTAPI) DetachThingPrincipalWithContext(arg0 aws.Context, arg1 *iot.DetachThingPrincipalInput, arg2 ...request.Option) (*iot.DetachThingPrincipalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachThingPrincipalWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DetachThingPrincipalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachThingPrincipalWithContext indicates an expected call of DetachThingPrincipalWithContext
func (mr *MockIoTAPIMockRecorder) DetachThingPrincipalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachThingPrincipalWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DetachThingPrincipalWithContext), varargs...)
}

// DisableTopicRule mocks base method
func (m *MockIoTAPI) DisableTopicRule(arg0 *iot.DisableTopicRuleInput) (*iot.DisableTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableTopicRule", arg0)
	ret0, _ := ret[0].(*iot.DisableTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableTopicRule indicates an expected call of DisableTopicRule
func (mr *MockIoTAPIMockRecorder) DisableTopicRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTopicRule", reflect.TypeOf((*MockIoTAPI)(nil).DisableTopicRule), arg0)
}

// DisableTopicRuleRequest mocks base method
func (m *MockIoTAPI) DisableTopicRuleRequest(arg0 *iot.DisableTopicRuleInput) (*request.Request, *iot.DisableTopicRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableTopicRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.DisableTopicRuleOutput)
	return ret0, ret1
}

// DisableTopicRuleRequest indicates an expected call of DisableTopicRuleRequest
func (mr *MockIoTAPIMockRecorder) DisableTopicRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTopicRuleRequest", reflect.TypeOf((*MockIoTAPI)(nil).DisableTopicRuleRequest), arg0)
}

// DisableTopicRuleWithContext mocks base method
func (m *MockIoTAPI) DisableTopicRuleWithContext(arg0 aws.Context, arg1 *iot.DisableTopicRuleInput, arg2 ...request.Option) (*iot.DisableTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableTopicRuleWithContext", varargs...)
	ret0, _ := ret[0].(*iot.DisableTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableTopicRuleWithContext indicates an expected call of DisableTopicRuleWithContext
func (mr *MockIoTAPIMockRecorder) DisableTopicRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTopicRuleWithContext", reflect.TypeOf((*MockIoTAPI)(nil).DisableTopicRuleWithContext), varargs...)
}

// EnableTopicRule mocks base method
func (m *MockIoTAPI) EnableTopicRule(arg0 *iot.EnableTopicRuleInput) (*iot.EnableTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTopicRule", arg0)
	ret0, _ := ret[0].(*iot.EnableTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableTopicRule indicates an expected call of EnableTopicRule
func (mr *MockIoTAPIMockRecorder) EnableTopicRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTopicRule", reflect.TypeOf((*MockIoTAPI)(nil).EnableTopicRule), arg0)
}

// EnableTopicRuleRequest mocks base method
func (m *MockIoTAPI) EnableTopicRuleRequest(arg0 *iot.EnableTopicRuleInput) (*request.Request, *iot.EnableTopicRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTopicRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.EnableTopicRuleOutput)
	return ret0, ret1
}

// EnableTopicRuleRequest indicates an expected call of EnableTopicRuleRequest
func (mr *MockIoTAPIMockRecorder) EnableTopicRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTopicRuleRequest", reflect.TypeOf((*MockIoTAPI)(nil).EnableTopicRuleRequest), arg0)
}

// EnableTopicRuleWithContext mocks base method
func (m *MockIoTAPI) EnableTopicRuleWithContext(arg0 aws.Context, arg1 *iot.EnableTopicRuleInput, arg2 ...request.Option) (*iot.EnableTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableTopicRuleWithContext", varargs...)
	ret0, _ := ret[0].(*iot.EnableTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableTopicRuleWithContext indicates an expected call of EnableTopicRuleWithContext
func (mr *MockIoTAPIMockRecorder) EnableTopicRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTopicRuleWithContext", reflect.TypeOf((*MockIoTAPI)(nil).EnableTopicRuleWithContext), varargs...)
}

// GetEffectivePolicies mocks base method
func (m *MockIoTAPI) GetEffectivePolicies(arg0 *iot.GetEffectivePoliciesInput) (*iot.GetEffectivePoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectivePolicies", arg0)
	ret0, _ := ret[0].(*iot.GetEffectivePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectivePolicies indicates an expected call of GetEffectivePolicies
func (mr *MockIoTAPIMockRecorder) GetEffectivePolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectivePolicies", reflect.TypeOf((*MockIoTAPI)(nil).GetEffectivePolicies), arg0)
}

// GetEffectivePoliciesRequest mocks base method
func (m *MockIoTAPI) GetEffectivePoliciesRequest(arg0 *iot.GetEffectivePoliciesInput) (*request.Request, *iot.GetEffectivePoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectivePoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.GetEffectivePoliciesOutput)
	return ret0, ret1
}

// GetEffectivePoliciesRequest indicates an expected call of GetEffectivePoliciesRequest
func (mr *MockIoTAPIMockRecorder) GetEffectivePoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectivePoliciesRequest", reflect.TypeOf((*MockIoTAPI)(nil).GetEffectivePoliciesRequest), arg0)
}

// GetEffectivePoliciesWithContext mocks base method
func (m *MockIoTAPI) GetEffectivePoliciesWithContext(arg0 aws.Context, arg1 *iot.GetEffectivePoliciesInput, arg2 ...request.Option) (*iot.GetEffectivePoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEffectivePoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.GetEffectivePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectivePoliciesWithContext indicates an expected call of GetEffectivePoliciesWithContext
func (mr *MockIoTAPIMockRecorder) GetEffectivePoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectivePoliciesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).GetEffectivePoliciesWithContext), varargs...)
}

// GetIndexingConfiguration mocks base method
func (m *MockIoTAPI) GetIndexingConfiguration(arg0 *iot.GetIndexingConfigurationInput) (*iot.GetIndexingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexingConfiguration", arg0)
	ret0, _ := ret[0].(*iot.GetIndexingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexingConfiguration indicates an expected call of GetIndexingConfiguration
func (mr *MockIoTAPIMockRecorder) GetIndexingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexingConfiguration", reflect.TypeOf((*MockIoTAPI)(nil).GetIndexingConfiguration), arg0)
}

// GetIndexingConfigurationRequest mocks base method
func (m *MockIoTAPI) GetIndexingConfigurationRequest(arg0 *iot.GetIndexingConfigurationInput) (*request.Request, *iot.GetIndexingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.GetIndexingConfigurationOutput)
	return ret0, ret1
}

// GetIndexingConfigurationRequest indicates an expected call of GetIndexingConfigurationRequest
func (mr *MockIoTAPIMockRecorder) GetIndexingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexingConfigurationRequest", reflect.TypeOf((*MockIoTAPI)(nil).GetIndexingConfigurationRequest), arg0)
}

// GetIndexingConfigurationWithContext mocks base method
func (m *MockIoTAPI) GetIndexingConfigurationWithContext(arg0 aws.Context, arg1 *iot.GetIndexingConfigurationInput, arg2 ...request.Option) (*iot.GetIndexingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIndexingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iot.GetIndexingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexingConfigurationWithContext indicates an expected call of GetIndexingConfigurationWithContext
func (mr *MockIoTAPIMockRecorder) GetIndexingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexingConfigurationWithContext", reflect.TypeOf((*MockIoTAPI)(nil).GetIndexingConfigurationWithContext), varargs...)
}

// GetJobDocument mocks base method
func (m *MockIoTAPI) GetJobDocument(arg0 *iot.GetJobDocumentInput) (*iot.GetJobDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobDocument", arg0)
	ret0, _ := ret[0].(*iot.GetJobDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobDocument indicates an expected call of GetJobDocument
func (mr *MockIoTAPIMockRecorder) GetJobDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobDocument", reflect.TypeOf((*MockIoTAPI)(nil).GetJobDocument), arg0)
}

// GetJobDocumentRequest mocks base method
func (m *MockIoTAPI) GetJobDocumentRequest(arg0 *iot.GetJobDocumentInput) (*request.Request, *iot.GetJobDocumentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobDocumentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.GetJobDocumentOutput)
	return ret0, ret1
}

// GetJobDocumentRequest indicates an expected call of GetJobDocumentRequest
func (mr *MockIoTAPIMockRecorder) GetJobDocumentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobDocumentRequest", reflect.TypeOf((*MockIoTAPI)(nil).GetJobDocumentRequest), arg0)
}

// GetJobDocumentWithContext mocks base method
func (m *MockIoTAPI) GetJobDocumentWithContext(arg0 aws.Context, arg1 *iot.GetJobDocumentInput, arg2 ...request.Option) (*iot.GetJobDocumentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobDocumentWithContext", varargs...)
	ret0, _ := ret[0].(*iot.GetJobDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobDocumentWithContext indicates an expected call of GetJobDocumentWithContext
func (mr *MockIoTAPIMockRecorder) GetJobDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobDocumentWithContext", reflect.TypeOf((*MockIoTAPI)(nil).GetJobDocumentWithContext), varargs...)
}

// GetLoggingOptions mocks base method
func (m *MockIoTAPI) GetLoggingOptions(arg0 *iot.GetLoggingOptionsInput) (*iot.GetLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingOptions", arg0)
	ret0, _ := ret[0].(*iot.GetLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingOptions indicates an expected call of GetLoggingOptions
func (mr *MockIoTAPIMockRecorder) GetLoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingOptions", reflect.TypeOf((*MockIoTAPI)(nil).GetLoggingOptions), arg0)
}

// GetLoggingOptionsRequest mocks base method
func (m *MockIoTAPI) GetLoggingOptionsRequest(arg0 *iot.GetLoggingOptionsInput) (*request.Request, *iot.GetLoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.GetLoggingOptionsOutput)
	return ret0, ret1
}

// GetLoggingOptionsRequest indicates an expected call of GetLoggingOptionsRequest
func (mr *MockIoTAPIMockRecorder) GetLoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingOptionsRequest", reflect.TypeOf((*MockIoTAPI)(nil).GetLoggingOptionsRequest), arg0)
}

// GetLoggingOptionsWithContext mocks base method
func (m *MockIoTAPI) GetLoggingOptionsWithContext(arg0 aws.Context, arg1 *iot.GetLoggingOptionsInput, arg2 ...request.Option) (*iot.GetLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.GetLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingOptionsWithContext indicates an expected call of GetLoggingOptionsWithContext
func (mr *MockIoTAPIMockRecorder) GetLoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingOptionsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).GetLoggingOptionsWithContext), varargs...)
}

// GetOTAUpdate mocks base method
func (m *MockIoTAPI) GetOTAUpdate(arg0 *iot.GetOTAUpdateInput) (*iot.GetOTAUpdateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOTAUpdate", arg0)
	ret0, _ := ret[0].(*iot.GetOTAUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOTAUpdate indicates an expected call of GetOTAUpdate
func (mr *MockIoTAPIMockRecorder) GetOTAUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTAUpdate", reflect.TypeOf((*MockIoTAPI)(nil).GetOTAUpdate), arg0)
}

// GetOTAUpdateRequest mocks base method
func (m *MockIoTAPI) GetOTAUpdateRequest(arg0 *iot.GetOTAUpdateInput) (*request.Request, *iot.GetOTAUpdateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOTAUpdateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.GetOTAUpdateOutput)
	return ret0, ret1
}

// GetOTAUpdateRequest indicates an expected call of GetOTAUpdateRequest
func (mr *MockIoTAPIMockRecorder) GetOTAUpdateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTAUpdateRequest", reflect.TypeOf((*MockIoTAPI)(nil).GetOTAUpdateRequest), arg0)
}

// GetOTAUpdateWithContext mocks base method
func (m *MockIoTAPI) GetOTAUpdateWithContext(arg0 aws.Context, arg1 *iot.GetOTAUpdateInput, arg2 ...request.Option) (*iot.GetOTAUpdateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOTAUpdateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.GetOTAUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOTAUpdateWithContext indicates an expected call of GetOTAUpdateWithContext
func (mr *MockIoTAPIMockRecorder) GetOTAUpdateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTAUpdateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).GetOTAUpdateWithContext), varargs...)
}

// GetPolicy mocks base method
func (m *MockIoTAPI) GetPolicy(arg0 *iot.GetPolicyInput) (*iot.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0)
	ret0, _ := ret[0].(*iot.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockIoTAPIMockRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockIoTAPI)(nil).GetPolicy), arg0)
}

// GetPolicyRequest mocks base method
func (m *MockIoTAPI) GetPolicyRequest(arg0 *iot.GetPolicyInput) (*request.Request, *iot.GetPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.GetPolicyOutput)
	return ret0, ret1
}

// GetPolicyRequest indicates an expected call of GetPolicyRequest
func (mr *MockIoTAPIMockRecorder) GetPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyRequest", reflect.TypeOf((*MockIoTAPI)(nil).GetPolicyRequest), arg0)
}

// GetPolicyVersion mocks base method
func (m *MockIoTAPI) GetPolicyVersion(arg0 *iot.GetPolicyVersionInput) (*iot.GetPolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyVersion", arg0)
	ret0, _ := ret[0].(*iot.GetPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyVersion indicates an expected call of GetPolicyVersion
func (mr *MockIoTAPIMockRecorder) GetPolicyVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyVersion", reflect.TypeOf((*MockIoTAPI)(nil).GetPolicyVersion), arg0)
}

// GetPolicyVersionRequest mocks base method
func (m *MockIoTAPI) GetPolicyVersionRequest(arg0 *iot.GetPolicyVersionInput) (*request.Request, *iot.GetPolicyVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.GetPolicyVersionOutput)
	return ret0, ret1
}

// GetPolicyVersionRequest indicates an expected call of GetPolicyVersionRequest
func (mr *MockIoTAPIMockRecorder) GetPolicyVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyVersionRequest", reflect.TypeOf((*MockIoTAPI)(nil).GetPolicyVersionRequest), arg0)
}

// GetPolicyVersionWithContext mocks base method
func (m *MockIoTAPI) GetPolicyVersionWithContext(arg0 aws.Context, arg1 *iot.GetPolicyVersionInput, arg2 ...request.Option) (*iot.GetPolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyVersionWithContext", varargs...)
	ret0, _ := ret[0].(*iot.GetPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyVersionWithContext indicates an expected call of GetPolicyVersionWithContext
func (mr *MockIoTAPIMockRecorder) GetPolicyVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyVersionWithContext", reflect.TypeOf((*MockIoTAPI)(nil).GetPolicyVersionWithContext), varargs...)
}

// GetPolicyWithContext mocks base method
func (m *MockIoTAPI) GetPolicyWithContext(arg0 aws.Context, arg1 *iot.GetPolicyInput, arg2 ...request.Option) (*iot.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iot.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyWithContext indicates an expected call of GetPolicyWithContext
func (mr *MockIoTAPIMockRecorder) GetPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyWithContext", reflect.TypeOf((*MockIoTAPI)(nil).GetPolicyWithContext), varargs...)
}

// GetRegistrationCode mocks base method
func (m *MockIoTAPI) GetRegistrationCode(arg0 *iot.GetRegistrationCodeInput) (*iot.GetRegistrationCodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrationCode", arg0)
	ret0, _ := ret[0].(*iot.GetRegistrationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationCode indicates an expected call of GetRegistrationCode
func (mr *MockIoTAPIMockRecorder) GetRegistrationCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationCode", reflect.TypeOf((*MockIoTAPI)(nil).GetRegistrationCode), arg0)
}

// GetRegistrationCodeRequest mocks base method
func (m *MockIoTAPI) GetRegistrationCodeRequest(arg0 *iot.GetRegistrationCodeInput) (*request.Request, *iot.GetRegistrationCodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrationCodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.GetRegistrationCodeOutput)
	return ret0, ret1
}

// GetRegistrationCodeRequest indicates an expected call of GetRegistrationCodeRequest
func (mr *MockIoTAPIMockRecorder) GetRegistrationCodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationCodeRequest", reflect.TypeOf((*MockIoTAPI)(nil).GetRegistrationCodeRequest), arg0)
}

// GetRegistrationCodeWithContext mocks base method
func (m *MockIoTAPI) GetRegistrationCodeWithContext(arg0 aws.Context, arg1 *iot.GetRegistrationCodeInput, arg2 ...request.Option) (*iot.GetRegistrationCodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegistrationCodeWithContext", varargs...)
	ret0, _ := ret[0].(*iot.GetRegistrationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationCodeWithContext indicates an expected call of GetRegistrationCodeWithContext
func (mr *MockIoTAPIMockRecorder) GetRegistrationCodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationCodeWithContext", reflect.TypeOf((*MockIoTAPI)(nil).GetRegistrationCodeWithContext), varargs...)
}

// GetTopicRule mocks base method
func (m *MockIoTAPI) GetTopicRule(arg0 *iot.GetTopicRuleInput) (*iot.GetTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicRule", arg0)
	ret0, _ := ret[0].(*iot.GetTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicRule indicates an expected call of GetTopicRule
func (mr *MockIoTAPIMockRecorder) GetTopicRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicRule", reflect.TypeOf((*MockIoTAPI)(nil).GetTopicRule), arg0)
}

// GetTopicRuleRequest mocks base method
func (m *MockIoTAPI) GetTopicRuleRequest(arg0 *iot.GetTopicRuleInput) (*request.Request, *iot.GetTopicRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.GetTopicRuleOutput)
	return ret0, ret1
}

// GetTopicRuleRequest indicates an expected call of GetTopicRuleRequest
func (mr *MockIoTAPIMockRecorder) GetTopicRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicRuleRequest", reflect.TypeOf((*MockIoTAPI)(nil).GetTopicRuleRequest), arg0)
}

// GetTopicRuleWithContext mocks base method
func (m *MockIoTAPI) GetTopicRuleWithContext(arg0 aws.Context, arg1 *iot.GetTopicRuleInput, arg2 ...request.Option) (*iot.GetTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopicRuleWithContext", varargs...)
	ret0, _ := ret[0].(*iot.GetTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicRuleWithContext indicates an expected call of GetTopicRuleWithContext
func (mr *MockIoTAPIMockRecorder) GetTopicRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicRuleWithContext", reflect.TypeOf((*MockIoTAPI)(nil).GetTopicRuleWithContext), varargs...)
}

// GetV2LoggingOptions mocks base method
func (m *MockIoTAPI) GetV2LoggingOptions(arg0 *iot.GetV2LoggingOptionsInput) (*iot.GetV2LoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV2LoggingOptions", arg0)
	ret0, _ := ret[0].(*iot.GetV2LoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2LoggingOptions indicates an expected call of GetV2LoggingOptions
func (mr *MockIoTAPIMockRecorder) GetV2LoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2LoggingOptions", reflect.TypeOf((*MockIoTAPI)(nil).GetV2LoggingOptions), arg0)
}

// GetV2LoggingOptionsRequest mocks base method
func (m *MockIoTAPI) GetV2LoggingOptionsRequest(arg0 *iot.GetV2LoggingOptionsInput) (*request.Request, *iot.GetV2LoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV2LoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.GetV2LoggingOptionsOutput)
	return ret0, ret1
}

// GetV2LoggingOptionsRequest indicates an expected call of GetV2LoggingOptionsRequest
func (mr *MockIoTAPIMockRecorder) GetV2LoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2LoggingOptionsRequest", reflect.TypeOf((*MockIoTAPI)(nil).GetV2LoggingOptionsRequest), arg0)
}

// GetV2LoggingOptionsWithContext mocks base method
func (m *MockIoTAPI) GetV2LoggingOptionsWithContext(arg0 aws.Context, arg1 *iot.GetV2LoggingOptionsInput, arg2 ...request.Option) (*iot.GetV2LoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2LoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.GetV2LoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2LoggingOptionsWithContext indicates an expected call of GetV2LoggingOptionsWithContext
func (mr *MockIoTAPIMockRecorder) GetV2LoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2LoggingOptionsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).GetV2LoggingOptionsWithContext), varargs...)
}

// ListAttachedPolicies mocks base method
func (m *MockIoTAPI) ListAttachedPolicies(arg0 *iot.ListAttachedPoliciesInput) (*iot.ListAttachedPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedPolicies", arg0)
	ret0, _ := ret[0].(*iot.ListAttachedPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachedPolicies indicates an expected call of ListAttachedPolicies
func (mr *MockIoTAPIMockRecorder) ListAttachedPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedPolicies", reflect.TypeOf((*MockIoTAPI)(nil).ListAttachedPolicies), arg0)
}

// ListAttachedPoliciesRequest mocks base method
func (m *MockIoTAPI) ListAttachedPoliciesRequest(arg0 *iot.ListAttachedPoliciesInput) (*request.Request, *iot.ListAttachedPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListAttachedPoliciesOutput)
	return ret0, ret1
}

// ListAttachedPoliciesRequest indicates an expected call of ListAttachedPoliciesRequest
func (mr *MockIoTAPIMockRecorder) ListAttachedPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedPoliciesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListAttachedPoliciesRequest), arg0)
}

// ListAttachedPoliciesWithContext mocks base method
func (m *MockIoTAPI) ListAttachedPoliciesWithContext(arg0 aws.Context, arg1 *iot.ListAttachedPoliciesInput, arg2 ...request.Option) (*iot.ListAttachedPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttachedPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListAttachedPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachedPoliciesWithContext indicates an expected call of ListAttachedPoliciesWithContext
func (mr *MockIoTAPIMockRecorder) ListAttachedPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedPoliciesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListAttachedPoliciesWithContext), varargs...)
}

// ListAuthorizers mocks base method
func (m *MockIoTAPI) ListAuthorizers(arg0 *iot.ListAuthorizersInput) (*iot.ListAuthorizersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthorizers", arg0)
	ret0, _ := ret[0].(*iot.ListAuthorizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthorizers indicates an expected call of ListAuthorizers
func (mr *MockIoTAPIMockRecorder) ListAuthorizers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthorizers", reflect.TypeOf((*MockIoTAPI)(nil).ListAuthorizers), arg0)
}

// ListAuthorizersRequest mocks base method
func (m *MockIoTAPI) ListAuthorizersRequest(arg0 *iot.ListAuthorizersInput) (*request.Request, *iot.ListAuthorizersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthorizersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListAuthorizersOutput)
	return ret0, ret1
}

// ListAuthorizersRequest indicates an expected call of ListAuthorizersRequest
func (mr *MockIoTAPIMockRecorder) ListAuthorizersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthorizersRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListAuthorizersRequest), arg0)
}

// ListAuthorizersWithContext mocks base method
func (m *MockIoTAPI) ListAuthorizersWithContext(arg0 aws.Context, arg1 *iot.ListAuthorizersInput, arg2 ...request.Option) (*iot.ListAuthorizersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuthorizersWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListAuthorizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthorizersWithContext indicates an expected call of ListAuthorizersWithContext
func (mr *MockIoTAPIMockRecorder) ListAuthorizersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthorizersWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListAuthorizersWithContext), varargs...)
}

// ListCACertificates mocks base method
func (m *MockIoTAPI) ListCACertificates(arg0 *iot.ListCACertificatesInput) (*iot.ListCACertificatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCACertificates", arg0)
	ret0, _ := ret[0].(*iot.ListCACertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCACertificates indicates an expected call of ListCACertificates
func (mr *MockIoTAPIMockRecorder) ListCACertificates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCACertificates", reflect.TypeOf((*MockIoTAPI)(nil).ListCACertificates), arg0)
}

// ListCACertificatesRequest mocks base method
func (m *MockIoTAPI) ListCACertificatesRequest(arg0 *iot.ListCACertificatesInput) (*request.Request, *iot.ListCACertificatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCACertificatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListCACertificatesOutput)
	return ret0, ret1
}

// ListCACertificatesRequest indicates an expected call of ListCACertificatesRequest
func (mr *MockIoTAPIMockRecorder) ListCACertificatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCACertificatesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListCACertificatesRequest), arg0)
}

// ListCACertificatesWithContext mocks base method
func (m *MockIoTAPI) ListCACertificatesWithContext(arg0 aws.Context, arg1 *iot.ListCACertificatesInput, arg2 ...request.Option) (*iot.ListCACertificatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCACertificatesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListCACertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCACertificatesWithContext indicates an expected call of ListCACertificatesWithContext
func (mr *MockIoTAPIMockRecorder) ListCACertificatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCACertificatesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListCACertificatesWithContext), varargs...)
}

// ListCertificates mocks base method
func (m *MockIoTAPI) ListCertificates(arg0 *iot.ListCertificatesInput) (*iot.ListCertificatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificates", arg0)
	ret0, _ := ret[0].(*iot.ListCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificates indicates an expected call of ListCertificates
func (mr *MockIoTAPIMockRecorder) ListCertificates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificates", reflect.TypeOf((*MockIoTAPI)(nil).ListCertificates), arg0)
}

// ListCertificatesByCA mocks base method
func (m *MockIoTAPI) ListCertificatesByCA(arg0 *iot.ListCertificatesByCAInput) (*iot.ListCertificatesByCAOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificatesByCA", arg0)
	ret0, _ := ret[0].(*iot.ListCertificatesByCAOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificatesByCA indicates an expected call of ListCertificatesByCA
func (mr *MockIoTAPIMockRecorder) ListCertificatesByCA(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificatesByCA", reflect.TypeOf((*MockIoTAPI)(nil).ListCertificatesByCA), arg0)
}

// ListCertificatesByCARequest mocks base method
func (m *MockIoTAPI) ListCertificatesByCARequest(arg0 *iot.ListCertificatesByCAInput) (*request.Request, *iot.ListCertificatesByCAOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificatesByCARequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListCertificatesByCAOutput)
	return ret0, ret1
}

// ListCertificatesByCARequest indicates an expected call of ListCertificatesByCARequest
func (mr *MockIoTAPIMockRecorder) ListCertificatesByCARequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificatesByCARequest", reflect.TypeOf((*MockIoTAPI)(nil).ListCertificatesByCARequest), arg0)
}

// ListCertificatesByCAWithContext mocks base method
func (m *MockIoTAPI) ListCertificatesByCAWithContext(arg0 aws.Context, arg1 *iot.ListCertificatesByCAInput, arg2 ...request.Option) (*iot.ListCertificatesByCAOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificatesByCAWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListCertificatesByCAOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificatesByCAWithContext indicates an expected call of ListCertificatesByCAWithContext
func (mr *MockIoTAPIMockRecorder) ListCertificatesByCAWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificatesByCAWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListCertificatesByCAWithContext), varargs...)
}

// ListCertificatesRequest mocks base method
func (m *MockIoTAPI) ListCertificatesRequest(arg0 *iot.ListCertificatesInput) (*request.Request, *iot.ListCertificatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListCertificatesOutput)
	return ret0, ret1
}

// ListCertificatesRequest indicates an expected call of ListCertificatesRequest
func (mr *MockIoTAPIMockRecorder) ListCertificatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificatesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListCertificatesRequest), arg0)
}

// ListCertificatesWithContext mocks base method
func (m *MockIoTAPI) ListCertificatesWithContext(arg0 aws.Context, arg1 *iot.ListCertificatesInput, arg2 ...request.Option) (*iot.ListCertificatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificatesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificatesWithContext indicates an expected call of ListCertificatesWithContext
func (mr *MockIoTAPIMockRecorder) ListCertificatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificatesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListCertificatesWithContext), varargs...)
}

// ListIndices mocks base method
func (m *MockIoTAPI) ListIndices(arg0 *iot.ListIndicesInput) (*iot.ListIndicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndices", arg0)
	ret0, _ := ret[0].(*iot.ListIndicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndices indicates an expected call of ListIndices
func (mr *MockIoTAPIMockRecorder) ListIndices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndices", reflect.TypeOf((*MockIoTAPI)(nil).ListIndices), arg0)
}

// ListIndicesRequest mocks base method
func (m *MockIoTAPI) ListIndicesRequest(arg0 *iot.ListIndicesInput) (*request.Request, *iot.ListIndicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListIndicesOutput)
	return ret0, ret1
}

// ListIndicesRequest indicates an expected call of ListIndicesRequest
func (mr *MockIoTAPIMockRecorder) ListIndicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndicesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListIndicesRequest), arg0)
}

// ListIndicesWithContext mocks base method
func (m *MockIoTAPI) ListIndicesWithContext(arg0 aws.Context, arg1 *iot.ListIndicesInput, arg2 ...request.Option) (*iot.ListIndicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndicesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListIndicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndicesWithContext indicates an expected call of ListIndicesWithContext
func (mr *MockIoTAPIMockRecorder) ListIndicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndicesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListIndicesWithContext), varargs...)
}

// ListJobExecutionsForJob mocks base method
func (m *MockIoTAPI) ListJobExecutionsForJob(arg0 *iot.ListJobExecutionsForJobInput) (*iot.ListJobExecutionsForJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobExecutionsForJob", arg0)
	ret0, _ := ret[0].(*iot.ListJobExecutionsForJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobExecutionsForJob indicates an expected call of ListJobExecutionsForJob
func (mr *MockIoTAPIMockRecorder) ListJobExecutionsForJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobExecutionsForJob", reflect.TypeOf((*MockIoTAPI)(nil).ListJobExecutionsForJob), arg0)
}

// ListJobExecutionsForJobRequest mocks base method
func (m *MockIoTAPI) ListJobExecutionsForJobRequest(arg0 *iot.ListJobExecutionsForJobInput) (*request.Request, *iot.ListJobExecutionsForJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobExecutionsForJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListJobExecutionsForJobOutput)
	return ret0, ret1
}

// ListJobExecutionsForJobRequest indicates an expected call of ListJobExecutionsForJobRequest
func (mr *MockIoTAPIMockRecorder) ListJobExecutionsForJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobExecutionsForJobRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListJobExecutionsForJobRequest), arg0)
}

// ListJobExecutionsForJobWithContext mocks base method
func (m *MockIoTAPI) ListJobExecutionsForJobWithContext(arg0 aws.Context, arg1 *iot.ListJobExecutionsForJobInput, arg2 ...request.Option) (*iot.ListJobExecutionsForJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobExecutionsForJobWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListJobExecutionsForJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobExecutionsForJobWithContext indicates an expected call of ListJobExecutionsForJobWithContext
func (mr *MockIoTAPIMockRecorder) ListJobExecutionsForJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobExecutionsForJobWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListJobExecutionsForJobWithContext), varargs...)
}

// ListJobExecutionsForThing mocks base method
func (m *MockIoTAPI) ListJobExecutionsForThing(arg0 *iot.ListJobExecutionsForThingInput) (*iot.ListJobExecutionsForThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobExecutionsForThing", arg0)
	ret0, _ := ret[0].(*iot.ListJobExecutionsForThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobExecutionsForThing indicates an expected call of ListJobExecutionsForThing
func (mr *MockIoTAPIMockRecorder) ListJobExecutionsForThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobExecutionsForThing", reflect.TypeOf((*MockIoTAPI)(nil).ListJobExecutionsForThing), arg0)
}

// ListJobExecutionsForThingRequest mocks base method
func (m *MockIoTAPI) ListJobExecutionsForThingRequest(arg0 *iot.ListJobExecutionsForThingInput) (*request.Request, *iot.ListJobExecutionsForThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobExecutionsForThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListJobExecutionsForThingOutput)
	return ret0, ret1
}

// ListJobExecutionsForThingRequest indicates an expected call of ListJobExecutionsForThingRequest
func (mr *MockIoTAPIMockRecorder) ListJobExecutionsForThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobExecutionsForThingRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListJobExecutionsForThingRequest), arg0)
}

// ListJobExecutionsForThingWithContext mocks base method
func (m *MockIoTAPI) ListJobExecutionsForThingWithContext(arg0 aws.Context, arg1 *iot.ListJobExecutionsForThingInput, arg2 ...request.Option) (*iot.ListJobExecutionsForThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobExecutionsForThingWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListJobExecutionsForThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobExecutionsForThingWithContext indicates an expected call of ListJobExecutionsForThingWithContext
func (mr *MockIoTAPIMockRecorder) ListJobExecutionsForThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobExecutionsForThingWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListJobExecutionsForThingWithContext), varargs...)
}

// ListJobs mocks base method
func (m *MockIoTAPI) ListJobs(arg0 *iot.ListJobsInput) (*iot.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*iot.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs
func (mr *MockIoTAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockIoTAPI)(nil).ListJobs), arg0)
}

// ListJobsRequest mocks base method
func (m *MockIoTAPI) ListJobsRequest(arg0 *iot.ListJobsInput) (*request.Request, *iot.ListJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest
func (mr *MockIoTAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method
func (m *MockIoTAPI) ListJobsWithContext(arg0 aws.Context, arg1 *iot.ListJobsInput, arg2 ...request.Option) (*iot.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext
func (mr *MockIoTAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListJobsWithContext), varargs...)
}

// ListOTAUpdates mocks base method
func (m *MockIoTAPI) ListOTAUpdates(arg0 *iot.ListOTAUpdatesInput) (*iot.ListOTAUpdatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOTAUpdates", arg0)
	ret0, _ := ret[0].(*iot.ListOTAUpdatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOTAUpdates indicates an expected call of ListOTAUpdates
func (mr *MockIoTAPIMockRecorder) ListOTAUpdates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOTAUpdates", reflect.TypeOf((*MockIoTAPI)(nil).ListOTAUpdates), arg0)
}

// ListOTAUpdatesRequest mocks base method
func (m *MockIoTAPI) ListOTAUpdatesRequest(arg0 *iot.ListOTAUpdatesInput) (*request.Request, *iot.ListOTAUpdatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOTAUpdatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListOTAUpdatesOutput)
	return ret0, ret1
}

// ListOTAUpdatesRequest indicates an expected call of ListOTAUpdatesRequest
func (mr *MockIoTAPIMockRecorder) ListOTAUpdatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOTAUpdatesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListOTAUpdatesRequest), arg0)
}

// ListOTAUpdatesWithContext mocks base method
func (m *MockIoTAPI) ListOTAUpdatesWithContext(arg0 aws.Context, arg1 *iot.ListOTAUpdatesInput, arg2 ...request.Option) (*iot.ListOTAUpdatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOTAUpdatesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListOTAUpdatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOTAUpdatesWithContext indicates an expected call of ListOTAUpdatesWithContext
func (mr *MockIoTAPIMockRecorder) ListOTAUpdatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOTAUpdatesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListOTAUpdatesWithContext), varargs...)
}

// ListOutgoingCertificates mocks base method
func (m *MockIoTAPI) ListOutgoingCertificates(arg0 *iot.ListOutgoingCertificatesInput) (*iot.ListOutgoingCertificatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutgoingCertificates", arg0)
	ret0, _ := ret[0].(*iot.ListOutgoingCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutgoingCertificates indicates an expected call of ListOutgoingCertificates
func (mr *MockIoTAPIMockRecorder) ListOutgoingCertificates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingCertificates", reflect.TypeOf((*MockIoTAPI)(nil).ListOutgoingCertificates), arg0)
}

// ListOutgoingCertificatesRequest mocks base method
func (m *MockIoTAPI) ListOutgoingCertificatesRequest(arg0 *iot.ListOutgoingCertificatesInput) (*request.Request, *iot.ListOutgoingCertificatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutgoingCertificatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListOutgoingCertificatesOutput)
	return ret0, ret1
}

// ListOutgoingCertificatesRequest indicates an expected call of ListOutgoingCertificatesRequest
func (mr *MockIoTAPIMockRecorder) ListOutgoingCertificatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingCertificatesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListOutgoingCertificatesRequest), arg0)
}

// ListOutgoingCertificatesWithContext mocks base method
func (m *MockIoTAPI) ListOutgoingCertificatesWithContext(arg0 aws.Context, arg1 *iot.ListOutgoingCertificatesInput, arg2 ...request.Option) (*iot.ListOutgoingCertificatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutgoingCertificatesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListOutgoingCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutgoingCertificatesWithContext indicates an expected call of ListOutgoingCertificatesWithContext
func (mr *MockIoTAPIMockRecorder) ListOutgoingCertificatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingCertificatesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListOutgoingCertificatesWithContext), varargs...)
}

// ListPolicies mocks base method
func (m *MockIoTAPI) ListPolicies(arg0 *iot.ListPoliciesInput) (*iot.ListPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicies", arg0)
	ret0, _ := ret[0].(*iot.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies
func (mr *MockIoTAPIMockRecorder) ListPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockIoTAPI)(nil).ListPolicies), arg0)
}

// ListPoliciesRequest mocks base method
func (m *MockIoTAPI) ListPoliciesRequest(arg0 *iot.ListPoliciesInput) (*request.Request, *iot.ListPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListPoliciesOutput)
	return ret0, ret1
}

// ListPoliciesRequest indicates an expected call of ListPoliciesRequest
func (mr *MockIoTAPIMockRecorder) ListPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListPoliciesRequest), arg0)
}

// ListPoliciesWithContext mocks base method
func (m *MockIoTAPI) ListPoliciesWithContext(arg0 aws.Context, arg1 *iot.ListPoliciesInput, arg2 ...request.Option) (*iot.ListPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoliciesWithContext indicates an expected call of ListPoliciesWithContext
func (mr *MockIoTAPIMockRecorder) ListPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListPoliciesWithContext), varargs...)
}

// ListPolicyPrincipals mocks base method
func (m *MockIoTAPI) ListPolicyPrincipals(arg0 *iot.ListPolicyPrincipalsInput) (*iot.ListPolicyPrincipalsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyPrincipals", arg0)
	ret0, _ := ret[0].(*iot.ListPolicyPrincipalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyPrincipals indicates an expected call of ListPolicyPrincipals
func (mr *MockIoTAPIMockRecorder) ListPolicyPrincipals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyPrincipals", reflect.TypeOf((*MockIoTAPI)(nil).ListPolicyPrincipals), arg0)
}

// ListPolicyPrincipalsRequest mocks base method
func (m *MockIoTAPI) ListPolicyPrincipalsRequest(arg0 *iot.ListPolicyPrincipalsInput) (*request.Request, *iot.ListPolicyPrincipalsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyPrincipalsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListPolicyPrincipalsOutput)
	return ret0, ret1
}

// ListPolicyPrincipalsRequest indicates an expected call of ListPolicyPrincipalsRequest
func (mr *MockIoTAPIMockRecorder) ListPolicyPrincipalsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyPrincipalsRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListPolicyPrincipalsRequest), arg0)
}

// ListPolicyPrincipalsWithContext mocks base method
func (m *MockIoTAPI) ListPolicyPrincipalsWithContext(arg0 aws.Context, arg1 *iot.ListPolicyPrincipalsInput, arg2 ...request.Option) (*iot.ListPolicyPrincipalsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyPrincipalsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListPolicyPrincipalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyPrincipalsWithContext indicates an expected call of ListPolicyPrincipalsWithContext
func (mr *MockIoTAPIMockRecorder) ListPolicyPrincipalsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyPrincipalsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListPolicyPrincipalsWithContext), varargs...)
}

// ListPolicyVersions mocks base method
func (m *MockIoTAPI) ListPolicyVersions(arg0 *iot.ListPolicyVersionsInput) (*iot.ListPolicyVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyVersions", arg0)
	ret0, _ := ret[0].(*iot.ListPolicyVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyVersions indicates an expected call of ListPolicyVersions
func (mr *MockIoTAPIMockRecorder) ListPolicyVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyVersions", reflect.TypeOf((*MockIoTAPI)(nil).ListPolicyVersions), arg0)
}

// ListPolicyVersionsRequest mocks base method
func (m *MockIoTAPI) ListPolicyVersionsRequest(arg0 *iot.ListPolicyVersionsInput) (*request.Request, *iot.ListPolicyVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListPolicyVersionsOutput)
	return ret0, ret1
}

// ListPolicyVersionsRequest indicates an expected call of ListPolicyVersionsRequest
func (mr *MockIoTAPIMockRecorder) ListPolicyVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyVersionsRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListPolicyVersionsRequest), arg0)
}

// ListPolicyVersionsWithContext mocks base method
func (m *MockIoTAPI) ListPolicyVersionsWithContext(arg0 aws.Context, arg1 *iot.ListPolicyVersionsInput, arg2 ...request.Option) (*iot.ListPolicyVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListPolicyVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyVersionsWithContext indicates an expected call of ListPolicyVersionsWithContext
func (mr *MockIoTAPIMockRecorder) ListPolicyVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyVersionsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListPolicyVersionsWithContext), varargs...)
}

// ListPrincipalPolicies mocks base method
func (m *MockIoTAPI) ListPrincipalPolicies(arg0 *iot.ListPrincipalPoliciesInput) (*iot.ListPrincipalPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrincipalPolicies", arg0)
	ret0, _ := ret[0].(*iot.ListPrincipalPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipalPolicies indicates an expected call of ListPrincipalPolicies
func (mr *MockIoTAPIMockRecorder) ListPrincipalPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalPolicies", reflect.TypeOf((*MockIoTAPI)(nil).ListPrincipalPolicies), arg0)
}

// ListPrincipalPoliciesRequest mocks base method
func (m *MockIoTAPI) ListPrincipalPoliciesRequest(arg0 *iot.ListPrincipalPoliciesInput) (*request.Request, *iot.ListPrincipalPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrincipalPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListPrincipalPoliciesOutput)
	return ret0, ret1
}

// ListPrincipalPoliciesRequest indicates an expected call of ListPrincipalPoliciesRequest
func (mr *MockIoTAPIMockRecorder) ListPrincipalPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalPoliciesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListPrincipalPoliciesRequest), arg0)
}

// ListPrincipalPoliciesWithContext mocks base method
func (m *MockIoTAPI) ListPrincipalPoliciesWithContext(arg0 aws.Context, arg1 *iot.ListPrincipalPoliciesInput, arg2 ...request.Option) (*iot.ListPrincipalPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrincipalPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListPrincipalPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipalPoliciesWithContext indicates an expected call of ListPrincipalPoliciesWithContext
func (mr *MockIoTAPIMockRecorder) ListPrincipalPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalPoliciesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListPrincipalPoliciesWithContext), varargs...)
}

// ListPrincipalThings mocks base method
func (m *MockIoTAPI) ListPrincipalThings(arg0 *iot.ListPrincipalThingsInput) (*iot.ListPrincipalThingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrincipalThings", arg0)
	ret0, _ := ret[0].(*iot.ListPrincipalThingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipalThings indicates an expected call of ListPrincipalThings
func (mr *MockIoTAPIMockRecorder) ListPrincipalThings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalThings", reflect.TypeOf((*MockIoTAPI)(nil).ListPrincipalThings), arg0)
}

// ListPrincipalThingsRequest mocks base method
func (m *MockIoTAPI) ListPrincipalThingsRequest(arg0 *iot.ListPrincipalThingsInput) (*request.Request, *iot.ListPrincipalThingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrincipalThingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListPrincipalThingsOutput)
	return ret0, ret1
}

// ListPrincipalThingsRequest indicates an expected call of ListPrincipalThingsRequest
func (mr *MockIoTAPIMockRecorder) ListPrincipalThingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalThingsRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListPrincipalThingsRequest), arg0)
}

// ListPrincipalThingsWithContext mocks base method
func (m *MockIoTAPI) ListPrincipalThingsWithContext(arg0 aws.Context, arg1 *iot.ListPrincipalThingsInput, arg2 ...request.Option) (*iot.ListPrincipalThingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrincipalThingsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListPrincipalThingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipalThingsWithContext indicates an expected call of ListPrincipalThingsWithContext
func (mr *MockIoTAPIMockRecorder) ListPrincipalThingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalThingsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListPrincipalThingsWithContext), varargs...)
}

// ListRoleAliases mocks base method
func (m *MockIoTAPI) ListRoleAliases(arg0 *iot.ListRoleAliasesInput) (*iot.ListRoleAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleAliases", arg0)
	ret0, _ := ret[0].(*iot.ListRoleAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleAliases indicates an expected call of ListRoleAliases
func (mr *MockIoTAPIMockRecorder) ListRoleAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleAliases", reflect.TypeOf((*MockIoTAPI)(nil).ListRoleAliases), arg0)
}

// ListRoleAliasesRequest mocks base method
func (m *MockIoTAPI) ListRoleAliasesRequest(arg0 *iot.ListRoleAliasesInput) (*request.Request, *iot.ListRoleAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListRoleAliasesOutput)
	return ret0, ret1
}

// ListRoleAliasesRequest indicates an expected call of ListRoleAliasesRequest
func (mr *MockIoTAPIMockRecorder) ListRoleAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleAliasesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListRoleAliasesRequest), arg0)
}

// ListRoleAliasesWithContext mocks base method
func (m *MockIoTAPI) ListRoleAliasesWithContext(arg0 aws.Context, arg1 *iot.ListRoleAliasesInput, arg2 ...request.Option) (*iot.ListRoleAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoleAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListRoleAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleAliasesWithContext indicates an expected call of ListRoleAliasesWithContext
func (mr *MockIoTAPIMockRecorder) ListRoleAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleAliasesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListRoleAliasesWithContext), varargs...)
}

// ListStreams mocks base method
func (m *MockIoTAPI) ListStreams(arg0 *iot.ListStreamsInput) (*iot.ListStreamsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreams", arg0)
	ret0, _ := ret[0].(*iot.ListStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreams indicates an expected call of ListStreams
func (mr *MockIoTAPIMockRecorder) ListStreams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreams", reflect.TypeOf((*MockIoTAPI)(nil).ListStreams), arg0)
}

// ListStreamsRequest mocks base method
func (m *MockIoTAPI) ListStreamsRequest(arg0 *iot.ListStreamsInput) (*request.Request, *iot.ListStreamsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListStreamsOutput)
	return ret0, ret1
}

// ListStreamsRequest indicates an expected call of ListStreamsRequest
func (mr *MockIoTAPIMockRecorder) ListStreamsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamsRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListStreamsRequest), arg0)
}

// ListStreamsWithContext mocks base method
func (m *MockIoTAPI) ListStreamsWithContext(arg0 aws.Context, arg1 *iot.ListStreamsInput, arg2 ...request.Option) (*iot.ListStreamsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamsWithContext indicates an expected call of ListStreamsWithContext
func (mr *MockIoTAPIMockRecorder) ListStreamsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListStreamsWithContext), varargs...)
}

// ListTargetsForPolicy mocks base method
func (m *MockIoTAPI) ListTargetsForPolicy(arg0 *iot.ListTargetsForPolicyInput) (*iot.ListTargetsForPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetsForPolicy", arg0)
	ret0, _ := ret[0].(*iot.ListTargetsForPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsForPolicy indicates an expected call of ListTargetsForPolicy
func (mr *MockIoTAPIMockRecorder) ListTargetsForPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsForPolicy", reflect.TypeOf((*MockIoTAPI)(nil).ListTargetsForPolicy), arg0)
}

// ListTargetsForPolicyRequest mocks base method
func (m *MockIoTAPI) ListTargetsForPolicyRequest(arg0 *iot.ListTargetsForPolicyInput) (*request.Request, *iot.ListTargetsForPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetsForPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListTargetsForPolicyOutput)
	return ret0, ret1
}

// ListTargetsForPolicyRequest indicates an expected call of ListTargetsForPolicyRequest
func (mr *MockIoTAPIMockRecorder) ListTargetsForPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsForPolicyRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListTargetsForPolicyRequest), arg0)
}

// ListTargetsForPolicyWithContext mocks base method
func (m *MockIoTAPI) ListTargetsForPolicyWithContext(arg0 aws.Context, arg1 *iot.ListTargetsForPolicyInput, arg2 ...request.Option) (*iot.ListTargetsForPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsForPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListTargetsForPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsForPolicyWithContext indicates an expected call of ListTargetsForPolicyWithContext
func (mr *MockIoTAPIMockRecorder) ListTargetsForPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsForPolicyWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListTargetsForPolicyWithContext), varargs...)
}

// ListThingGroups mocks base method
func (m *MockIoTAPI) ListThingGroups(arg0 *iot.ListThingGroupsInput) (*iot.ListThingGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingGroups", arg0)
	ret0, _ := ret[0].(*iot.ListThingGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingGroups indicates an expected call of ListThingGroups
func (mr *MockIoTAPIMockRecorder) ListThingGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingGroups", reflect.TypeOf((*MockIoTAPI)(nil).ListThingGroups), arg0)
}

// ListThingGroupsForThing mocks base method
func (m *MockIoTAPI) ListThingGroupsForThing(arg0 *iot.ListThingGroupsForThingInput) (*iot.ListThingGroupsForThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingGroupsForThing", arg0)
	ret0, _ := ret[0].(*iot.ListThingGroupsForThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingGroupsForThing indicates an expected call of ListThingGroupsForThing
func (mr *MockIoTAPIMockRecorder) ListThingGroupsForThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingGroupsForThing", reflect.TypeOf((*MockIoTAPI)(nil).ListThingGroupsForThing), arg0)
}

// ListThingGroupsForThingRequest mocks base method
func (m *MockIoTAPI) ListThingGroupsForThingRequest(arg0 *iot.ListThingGroupsForThingInput) (*request.Request, *iot.ListThingGroupsForThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingGroupsForThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListThingGroupsForThingOutput)
	return ret0, ret1
}

// ListThingGroupsForThingRequest indicates an expected call of ListThingGroupsForThingRequest
func (mr *MockIoTAPIMockRecorder) ListThingGroupsForThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingGroupsForThingRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListThingGroupsForThingRequest), arg0)
}

// ListThingGroupsForThingWithContext mocks base method
func (m *MockIoTAPI) ListThingGroupsForThingWithContext(arg0 aws.Context, arg1 *iot.ListThingGroupsForThingInput, arg2 ...request.Option) (*iot.ListThingGroupsForThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingGroupsForThingWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListThingGroupsForThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingGroupsForThingWithContext indicates an expected call of ListThingGroupsForThingWithContext
func (mr *MockIoTAPIMockRecorder) ListThingGroupsForThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingGroupsForThingWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListThingGroupsForThingWithContext), varargs...)
}

// ListThingGroupsRequest mocks base method
func (m *MockIoTAPI) ListThingGroupsRequest(arg0 *iot.ListThingGroupsInput) (*request.Request, *iot.ListThingGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListThingGroupsOutput)
	return ret0, ret1
}

// ListThingGroupsRequest indicates an expected call of ListThingGroupsRequest
func (mr *MockIoTAPIMockRecorder) ListThingGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingGroupsRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListThingGroupsRequest), arg0)
}

// ListThingGroupsWithContext mocks base method
func (m *MockIoTAPI) ListThingGroupsWithContext(arg0 aws.Context, arg1 *iot.ListThingGroupsInput, arg2 ...request.Option) (*iot.ListThingGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListThingGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingGroupsWithContext indicates an expected call of ListThingGroupsWithContext
func (mr *MockIoTAPIMockRecorder) ListThingGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingGroupsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListThingGroupsWithContext), varargs...)
}

// ListThingPrincipals mocks base method
func (m *MockIoTAPI) ListThingPrincipals(arg0 *iot.ListThingPrincipalsInput) (*iot.ListThingPrincipalsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingPrincipals", arg0)
	ret0, _ := ret[0].(*iot.ListThingPrincipalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingPrincipals indicates an expected call of ListThingPrincipals
func (mr *MockIoTAPIMockRecorder) ListThingPrincipals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingPrincipals", reflect.TypeOf((*MockIoTAPI)(nil).ListThingPrincipals), arg0)
}

// ListThingPrincipalsRequest mocks base method
func (m *MockIoTAPI) ListThingPrincipalsRequest(arg0 *iot.ListThingPrincipalsInput) (*request.Request, *iot.ListThingPrincipalsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingPrincipalsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListThingPrincipalsOutput)
	return ret0, ret1
}

// ListThingPrincipalsRequest indicates an expected call of ListThingPrincipalsRequest
func (mr *MockIoTAPIMockRecorder) ListThingPrincipalsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingPrincipalsRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListThingPrincipalsRequest), arg0)
}

// ListThingPrincipalsWithContext mocks base method
func (m *MockIoTAPI) ListThingPrincipalsWithContext(arg0 aws.Context, arg1 *iot.ListThingPrincipalsInput, arg2 ...request.Option) (*iot.ListThingPrincipalsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingPrincipalsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListThingPrincipalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingPrincipalsWithContext indicates an expected call of ListThingPrincipalsWithContext
func (mr *MockIoTAPIMockRecorder) ListThingPrincipalsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingPrincipalsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListThingPrincipalsWithContext), varargs...)
}

// ListThingRegistrationTaskReports mocks base method
func (m *MockIoTAPI) ListThingRegistrationTaskReports(arg0 *iot.ListThingRegistrationTaskReportsInput) (*iot.ListThingRegistrationTaskReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingRegistrationTaskReports", arg0)
	ret0, _ := ret[0].(*iot.ListThingRegistrationTaskReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingRegistrationTaskReports indicates an expected call of ListThingRegistrationTaskReports
func (mr *MockIoTAPIMockRecorder) ListThingRegistrationTaskReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingRegistrationTaskReports", reflect.TypeOf((*MockIoTAPI)(nil).ListThingRegistrationTaskReports), arg0)
}

// ListThingRegistrationTaskReportsRequest mocks base method
func (m *MockIoTAPI) ListThingRegistrationTaskReportsRequest(arg0 *iot.ListThingRegistrationTaskReportsInput) (*request.Request, *iot.ListThingRegistrationTaskReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingRegistrationTaskReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListThingRegistrationTaskReportsOutput)
	return ret0, ret1
}

// ListThingRegistrationTaskReportsRequest indicates an expected call of ListThingRegistrationTaskReportsRequest
func (mr *MockIoTAPIMockRecorder) ListThingRegistrationTaskReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingRegistrationTaskReportsRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListThingRegistrationTaskReportsRequest), arg0)
}

// ListThingRegistrationTaskReportsWithContext mocks base method
func (m *MockIoTAPI) ListThingRegistrationTaskReportsWithContext(arg0 aws.Context, arg1 *iot.ListThingRegistrationTaskReportsInput, arg2 ...request.Option) (*iot.ListThingRegistrationTaskReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingRegistrationTaskReportsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListThingRegistrationTaskReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingRegistrationTaskReportsWithContext indicates an expected call of ListThingRegistrationTaskReportsWithContext
func (mr *MockIoTAPIMockRecorder) ListThingRegistrationTaskReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingRegistrationTaskReportsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListThingRegistrationTaskReportsWithContext), varargs...)
}

// ListThingRegistrationTasks mocks base method
func (m *MockIoTAPI) ListThingRegistrationTasks(arg0 *iot.ListThingRegistrationTasksInput) (*iot.ListThingRegistrationTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingRegistrationTasks", arg0)
	ret0, _ := ret[0].(*iot.ListThingRegistrationTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingRegistrationTasks indicates an expected call of ListThingRegistrationTasks
func (mr *MockIoTAPIMockRecorder) ListThingRegistrationTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingRegistrationTasks", reflect.TypeOf((*MockIoTAPI)(nil).ListThingRegistrationTasks), arg0)
}

// ListThingRegistrationTasksRequest mocks base method
func (m *MockIoTAPI) ListThingRegistrationTasksRequest(arg0 *iot.ListThingRegistrationTasksInput) (*request.Request, *iot.ListThingRegistrationTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingRegistrationTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListThingRegistrationTasksOutput)
	return ret0, ret1
}

// ListThingRegistrationTasksRequest indicates an expected call of ListThingRegistrationTasksRequest
func (mr *MockIoTAPIMockRecorder) ListThingRegistrationTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingRegistrationTasksRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListThingRegistrationTasksRequest), arg0)
}

// ListThingRegistrationTasksWithContext mocks base method
func (m *MockIoTAPI) ListThingRegistrationTasksWithContext(arg0 aws.Context, arg1 *iot.ListThingRegistrationTasksInput, arg2 ...request.Option) (*iot.ListThingRegistrationTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingRegistrationTasksWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListThingRegistrationTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingRegistrationTasksWithContext indicates an expected call of ListThingRegistrationTasksWithContext
func (mr *MockIoTAPIMockRecorder) ListThingRegistrationTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingRegistrationTasksWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListThingRegistrationTasksWithContext), varargs...)
}

// ListThingTypes mocks base method
func (m *MockIoTAPI) ListThingTypes(arg0 *iot.ListThingTypesInput) (*iot.ListThingTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingTypes", arg0)
	ret0, _ := ret[0].(*iot.ListThingTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingTypes indicates an expected call of ListThingTypes
func (mr *MockIoTAPIMockRecorder) ListThingTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingTypes", reflect.TypeOf((*MockIoTAPI)(nil).ListThingTypes), arg0)
}

// ListThingTypesRequest mocks base method
func (m *MockIoTAPI) ListThingTypesRequest(arg0 *iot.ListThingTypesInput) (*request.Request, *iot.ListThingTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListThingTypesOutput)
	return ret0, ret1
}

// ListThingTypesRequest indicates an expected call of ListThingTypesRequest
func (mr *MockIoTAPIMockRecorder) ListThingTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingTypesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListThingTypesRequest), arg0)
}

// ListThingTypesWithContext mocks base method
func (m *MockIoTAPI) ListThingTypesWithContext(arg0 aws.Context, arg1 *iot.ListThingTypesInput, arg2 ...request.Option) (*iot.ListThingTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingTypesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListThingTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingTypesWithContext indicates an expected call of ListThingTypesWithContext
func (mr *MockIoTAPIMockRecorder) ListThingTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingTypesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListThingTypesWithContext), varargs...)
}

// ListThings mocks base method
func (m *MockIoTAPI) ListThings(arg0 *iot.ListThingsInput) (*iot.ListThingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThings", arg0)
	ret0, _ := ret[0].(*iot.ListThingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThings indicates an expected call of ListThings
func (mr *MockIoTAPIMockRecorder) ListThings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThings", reflect.TypeOf((*MockIoTAPI)(nil).ListThings), arg0)
}

// ListThingsInThingGroup mocks base method
func (m *MockIoTAPI) ListThingsInThingGroup(arg0 *iot.ListThingsInThingGroupInput) (*iot.ListThingsInThingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingsInThingGroup", arg0)
	ret0, _ := ret[0].(*iot.ListThingsInThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingsInThingGroup indicates an expected call of ListThingsInThingGroup
func (mr *MockIoTAPIMockRecorder) ListThingsInThingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingsInThingGroup", reflect.TypeOf((*MockIoTAPI)(nil).ListThingsInThingGroup), arg0)
}

// ListThingsInThingGroupRequest mocks base method
func (m *MockIoTAPI) ListThingsInThingGroupRequest(arg0 *iot.ListThingsInThingGroupInput) (*request.Request, *iot.ListThingsInThingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingsInThingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListThingsInThingGroupOutput)
	return ret0, ret1
}

// ListThingsInThingGroupRequest indicates an expected call of ListThingsInThingGroupRequest
func (mr *MockIoTAPIMockRecorder) ListThingsInThingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingsInThingGroupRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListThingsInThingGroupRequest), arg0)
}

// ListThingsInThingGroupWithContext mocks base method
func (m *MockIoTAPI) ListThingsInThingGroupWithContext(arg0 aws.Context, arg1 *iot.ListThingsInThingGroupInput, arg2 ...request.Option) (*iot.ListThingsInThingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingsInThingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListThingsInThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingsInThingGroupWithContext indicates an expected call of ListThingsInThingGroupWithContext
func (mr *MockIoTAPIMockRecorder) ListThingsInThingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingsInThingGroupWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListThingsInThingGroupWithContext), varargs...)
}

// ListThingsRequest mocks base method
func (m *MockIoTAPI) ListThingsRequest(arg0 *iot.ListThingsInput) (*request.Request, *iot.ListThingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListThingsOutput)
	return ret0, ret1
}

// ListThingsRequest indicates an expected call of ListThingsRequest
func (mr *MockIoTAPIMockRecorder) ListThingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingsRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListThingsRequest), arg0)
}

// ListThingsWithContext mocks base method
func (m *MockIoTAPI) ListThingsWithContext(arg0 aws.Context, arg1 *iot.ListThingsInput, arg2 ...request.Option) (*iot.ListThingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListThingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingsWithContext indicates an expected call of ListThingsWithContext
func (mr *MockIoTAPIMockRecorder) ListThingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListThingsWithContext), varargs...)
}

// ListTopicRules mocks base method
func (m *MockIoTAPI) ListTopicRules(arg0 *iot.ListTopicRulesInput) (*iot.ListTopicRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopicRules", arg0)
	ret0, _ := ret[0].(*iot.ListTopicRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopicRules indicates an expected call of ListTopicRules
func (mr *MockIoTAPIMockRecorder) ListTopicRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicRules", reflect.TypeOf((*MockIoTAPI)(nil).ListTopicRules), arg0)
}

// ListTopicRulesRequest mocks base method
func (m *MockIoTAPI) ListTopicRulesRequest(arg0 *iot.ListTopicRulesInput) (*request.Request, *iot.ListTopicRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopicRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListTopicRulesOutput)
	return ret0, ret1
}

// ListTopicRulesRequest indicates an expected call of ListTopicRulesRequest
func (mr *MockIoTAPIMockRecorder) ListTopicRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicRulesRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListTopicRulesRequest), arg0)
}

// ListTopicRulesWithContext mocks base method
func (m *MockIoTAPI) ListTopicRulesWithContext(arg0 aws.Context, arg1 *iot.ListTopicRulesInput, arg2 ...request.Option) (*iot.ListTopicRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopicRulesWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListTopicRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopicRulesWithContext indicates an expected call of ListTopicRulesWithContext
func (mr *MockIoTAPIMockRecorder) ListTopicRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicRulesWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListTopicRulesWithContext), varargs...)
}

// ListV2LoggingLevels mocks base method
func (m *MockIoTAPI) ListV2LoggingLevels(arg0 *iot.ListV2LoggingLevelsInput) (*iot.ListV2LoggingLevelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListV2LoggingLevels", arg0)
	ret0, _ := ret[0].(*iot.ListV2LoggingLevelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListV2LoggingLevels indicates an expected call of ListV2LoggingLevels
func (mr *MockIoTAPIMockRecorder) ListV2LoggingLevels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListV2LoggingLevels", reflect.TypeOf((*MockIoTAPI)(nil).ListV2LoggingLevels), arg0)
}

// ListV2LoggingLevelsRequest mocks base method
func (m *MockIoTAPI) ListV2LoggingLevelsRequest(arg0 *iot.ListV2LoggingLevelsInput) (*request.Request, *iot.ListV2LoggingLevelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListV2LoggingLevelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ListV2LoggingLevelsOutput)
	return ret0, ret1
}

// ListV2LoggingLevelsRequest indicates an expected call of ListV2LoggingLevelsRequest
func (mr *MockIoTAPIMockRecorder) ListV2LoggingLevelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListV2LoggingLevelsRequest", reflect.TypeOf((*MockIoTAPI)(nil).ListV2LoggingLevelsRequest), arg0)
}

// ListV2LoggingLevelsWithContext mocks base method
func (m *MockIoTAPI) ListV2LoggingLevelsWithContext(arg0 aws.Context, arg1 *iot.ListV2LoggingLevelsInput, arg2 ...request.Option) (*iot.ListV2LoggingLevelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListV2LoggingLevelsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ListV2LoggingLevelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListV2LoggingLevelsWithContext indicates an expected call of ListV2LoggingLevelsWithContext
func (mr *MockIoTAPIMockRecorder) ListV2LoggingLevelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListV2LoggingLevelsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ListV2LoggingLevelsWithContext), varargs...)
}

// RegisterCACertificate mocks base method
func (m *MockIoTAPI) RegisterCACertificate(arg0 *iot.RegisterCACertificateInput) (*iot.RegisterCACertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCACertificate", arg0)
	ret0, _ := ret[0].(*iot.RegisterCACertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCACertificate indicates an expected call of RegisterCACertificate
func (mr *MockIoTAPIMockRecorder) RegisterCACertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCACertificate", reflect.TypeOf((*MockIoTAPI)(nil).RegisterCACertificate), arg0)
}

// RegisterCACertificateRequest mocks base method
func (m *MockIoTAPI) RegisterCACertificateRequest(arg0 *iot.RegisterCACertificateInput) (*request.Request, *iot.RegisterCACertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCACertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.RegisterCACertificateOutput)
	return ret0, ret1
}

// RegisterCACertificateRequest indicates an expected call of RegisterCACertificateRequest
func (mr *MockIoTAPIMockRecorder) RegisterCACertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCACertificateRequest", reflect.TypeOf((*MockIoTAPI)(nil).RegisterCACertificateRequest), arg0)
}

// RegisterCACertificateWithContext mocks base method
func (m *MockIoTAPI) RegisterCACertificateWithContext(arg0 aws.Context, arg1 *iot.RegisterCACertificateInput, arg2 ...request.Option) (*iot.RegisterCACertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterCACertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.RegisterCACertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCACertificateWithContext indicates an expected call of RegisterCACertificateWithContext
func (mr *MockIoTAPIMockRecorder) RegisterCACertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCACertificateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).RegisterCACertificateWithContext), varargs...)
}

// RegisterCertificate mocks base method
func (m *MockIoTAPI) RegisterCertificate(arg0 *iot.RegisterCertificateInput) (*iot.RegisterCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCertificate", arg0)
	ret0, _ := ret[0].(*iot.RegisterCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCertificate indicates an expected call of RegisterCertificate
func (mr *MockIoTAPIMockRecorder) RegisterCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCertificate", reflect.TypeOf((*MockIoTAPI)(nil).RegisterCertificate), arg0)
}

// RegisterCertificateRequest mocks base method
func (m *MockIoTAPI) RegisterCertificateRequest(arg0 *iot.RegisterCertificateInput) (*request.Request, *iot.RegisterCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.RegisterCertificateOutput)
	return ret0, ret1
}

// RegisterCertificateRequest indicates an expected call of RegisterCertificateRequest
func (mr *MockIoTAPIMockRecorder) RegisterCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCertificateRequest", reflect.TypeOf((*MockIoTAPI)(nil).RegisterCertificateRequest), arg0)
}

// RegisterCertificateWithContext mocks base method
func (m *MockIoTAPI) RegisterCertificateWithContext(arg0 aws.Context, arg1 *iot.RegisterCertificateInput, arg2 ...request.Option) (*iot.RegisterCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.RegisterCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCertificateWithContext indicates an expected call of RegisterCertificateWithContext
func (mr *MockIoTAPIMockRecorder) RegisterCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCertificateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).RegisterCertificateWithContext), varargs...)
}

// RegisterThing mocks base method
func (m *MockIoTAPI) RegisterThing(arg0 *iot.RegisterThingInput) (*iot.RegisterThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterThing", arg0)
	ret0, _ := ret[0].(*iot.RegisterThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterThing indicates an expected call of RegisterThing
func (mr *MockIoTAPIMockRecorder) RegisterThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterThing", reflect.TypeOf((*MockIoTAPI)(nil).RegisterThing), arg0)
}

// RegisterThingRequest mocks base method
func (m *MockIoTAPI) RegisterThingRequest(arg0 *iot.RegisterThingInput) (*request.Request, *iot.RegisterThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.RegisterThingOutput)
	return ret0, ret1
}

// RegisterThingRequest indicates an expected call of RegisterThingRequest
func (mr *MockIoTAPIMockRecorder) RegisterThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterThingRequest", reflect.TypeOf((*MockIoTAPI)(nil).RegisterThingRequest), arg0)
}

// RegisterThingWithContext mocks base method
func (m *MockIoTAPI) RegisterThingWithContext(arg0 aws.Context, arg1 *iot.RegisterThingInput, arg2 ...request.Option) (*iot.RegisterThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterThingWithContext", varargs...)
	ret0, _ := ret[0].(*iot.RegisterThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterThingWithContext indicates an expected call of RegisterThingWithContext
func (mr *MockIoTAPIMockRecorder) RegisterThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterThingWithContext", reflect.TypeOf((*MockIoTAPI)(nil).RegisterThingWithContext), varargs...)
}

// RejectCertificateTransfer mocks base method
func (m *MockIoTAPI) RejectCertificateTransfer(arg0 *iot.RejectCertificateTransferInput) (*iot.RejectCertificateTransferOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectCertificateTransfer", arg0)
	ret0, _ := ret[0].(*iot.RejectCertificateTransferOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectCertificateTransfer indicates an expected call of RejectCertificateTransfer
func (mr *MockIoTAPIMockRecorder) RejectCertificateTransfer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectCertificateTransfer", reflect.TypeOf((*MockIoTAPI)(nil).RejectCertificateTransfer), arg0)
}

// RejectCertificateTransferRequest mocks base method
func (m *MockIoTAPI) RejectCertificateTransferRequest(arg0 *iot.RejectCertificateTransferInput) (*request.Request, *iot.RejectCertificateTransferOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectCertificateTransferRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.RejectCertificateTransferOutput)
	return ret0, ret1
}

// RejectCertificateTransferRequest indicates an expected call of RejectCertificateTransferRequest
func (mr *MockIoTAPIMockRecorder) RejectCertificateTransferRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectCertificateTransferRequest", reflect.TypeOf((*MockIoTAPI)(nil).RejectCertificateTransferRequest), arg0)
}

// RejectCertificateTransferWithContext mocks base method
func (m *MockIoTAPI) RejectCertificateTransferWithContext(arg0 aws.Context, arg1 *iot.RejectCertificateTransferInput, arg2 ...request.Option) (*iot.RejectCertificateTransferOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectCertificateTransferWithContext", varargs...)
	ret0, _ := ret[0].(*iot.RejectCertificateTransferOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectCertificateTransferWithContext indicates an expected call of RejectCertificateTransferWithContext
func (mr *MockIoTAPIMockRecorder) RejectCertificateTransferWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectCertificateTransferWithContext", reflect.TypeOf((*MockIoTAPI)(nil).RejectCertificateTransferWithContext), varargs...)
}

// RemoveThingFromThingGroup mocks base method
func (m *MockIoTAPI) RemoveThingFromThingGroup(arg0 *iot.RemoveThingFromThingGroupInput) (*iot.RemoveThingFromThingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveThingFromThingGroup", arg0)
	ret0, _ := ret[0].(*iot.RemoveThingFromThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveThingFromThingGroup indicates an expected call of RemoveThingFromThingGroup
func (mr *MockIoTAPIMockRecorder) RemoveThingFromThingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveThingFromThingGroup", reflect.TypeOf((*MockIoTAPI)(nil).RemoveThingFromThingGroup), arg0)
}

// RemoveThingFromThingGroupRequest mocks base method
func (m *MockIoTAPI) RemoveThingFromThingGroupRequest(arg0 *iot.RemoveThingFromThingGroupInput) (*request.Request, *iot.RemoveThingFromThingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveThingFromThingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.RemoveThingFromThingGroupOutput)
	return ret0, ret1
}

// RemoveThingFromThingGroupRequest indicates an expected call of RemoveThingFromThingGroupRequest
func (mr *MockIoTAPIMockRecorder) RemoveThingFromThingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveThingFromThingGroupRequest", reflect.TypeOf((*MockIoTAPI)(nil).RemoveThingFromThingGroupRequest), arg0)
}

// RemoveThingFromThingGroupWithContext mocks base method
func (m *MockIoTAPI) RemoveThingFromThingGroupWithContext(arg0 aws.Context, arg1 *iot.RemoveThingFromThingGroupInput, arg2 ...request.Option) (*iot.RemoveThingFromThingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveThingFromThingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iot.RemoveThingFromThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveThingFromThingGroupWithContext indicates an expected call of RemoveThingFromThingGroupWithContext
func (mr *MockIoTAPIMockRecorder) RemoveThingFromThingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveThingFromThingGroupWithContext", reflect.TypeOf((*MockIoTAPI)(nil).RemoveThingFromThingGroupWithContext), varargs...)
}

// ReplaceTopicRule mocks base method
func (m *MockIoTAPI) ReplaceTopicRule(arg0 *iot.ReplaceTopicRuleInput) (*iot.ReplaceTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceTopicRule", arg0)
	ret0, _ := ret[0].(*iot.ReplaceTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceTopicRule indicates an expected call of ReplaceTopicRule
func (mr *MockIoTAPIMockRecorder) ReplaceTopicRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceTopicRule", reflect.TypeOf((*MockIoTAPI)(nil).ReplaceTopicRule), arg0)
}

// ReplaceTopicRuleRequest mocks base method
func (m *MockIoTAPI) ReplaceTopicRuleRequest(arg0 *iot.ReplaceTopicRuleInput) (*request.Request, *iot.ReplaceTopicRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceTopicRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.ReplaceTopicRuleOutput)
	return ret0, ret1
}

// ReplaceTopicRuleRequest indicates an expected call of ReplaceTopicRuleRequest
func (mr *MockIoTAPIMockRecorder) ReplaceTopicRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceTopicRuleRequest", reflect.TypeOf((*MockIoTAPI)(nil).ReplaceTopicRuleRequest), arg0)
}

// ReplaceTopicRuleWithContext mocks base method
func (m *MockIoTAPI) ReplaceTopicRuleWithContext(arg0 aws.Context, arg1 *iot.ReplaceTopicRuleInput, arg2 ...request.Option) (*iot.ReplaceTopicRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplaceTopicRuleWithContext", varargs...)
	ret0, _ := ret[0].(*iot.ReplaceTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceTopicRuleWithContext indicates an expected call of ReplaceTopicRuleWithContext
func (mr *MockIoTAPIMockRecorder) ReplaceTopicRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceTopicRuleWithContext", reflect.TypeOf((*MockIoTAPI)(nil).ReplaceTopicRuleWithContext), varargs...)
}

// SearchIndex mocks base method
func (m *MockIoTAPI) SearchIndex(arg0 *iot.SearchIndexInput) (*iot.SearchIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIndex", arg0)
	ret0, _ := ret[0].(*iot.SearchIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIndex indicates an expected call of SearchIndex
func (mr *MockIoTAPIMockRecorder) SearchIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIndex", reflect.TypeOf((*MockIoTAPI)(nil).SearchIndex), arg0)
}

// SearchIndexRequest mocks base method
func (m *MockIoTAPI) SearchIndexRequest(arg0 *iot.SearchIndexInput) (*request.Request, *iot.SearchIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.SearchIndexOutput)
	return ret0, ret1
}

// SearchIndexRequest indicates an expected call of SearchIndexRequest
func (mr *MockIoTAPIMockRecorder) SearchIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIndexRequest", reflect.TypeOf((*MockIoTAPI)(nil).SearchIndexRequest), arg0)
}

// SearchIndexWithContext mocks base method
func (m *MockIoTAPI) SearchIndexWithContext(arg0 aws.Context, arg1 *iot.SearchIndexInput, arg2 ...request.Option) (*iot.SearchIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchIndexWithContext", varargs...)
	ret0, _ := ret[0].(*iot.SearchIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIndexWithContext indicates an expected call of SearchIndexWithContext
func (mr *MockIoTAPIMockRecorder) SearchIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIndexWithContext", reflect.TypeOf((*MockIoTAPI)(nil).SearchIndexWithContext), varargs...)
}

// SetDefaultAuthorizer mocks base method
func (m *MockIoTAPI) SetDefaultAuthorizer(arg0 *iot.SetDefaultAuthorizerInput) (*iot.SetDefaultAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultAuthorizer", arg0)
	ret0, _ := ret[0].(*iot.SetDefaultAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultAuthorizer indicates an expected call of SetDefaultAuthorizer
func (mr *MockIoTAPIMockRecorder) SetDefaultAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultAuthorizer", reflect.TypeOf((*MockIoTAPI)(nil).SetDefaultAuthorizer), arg0)
}

// SetDefaultAuthorizerRequest mocks base method
func (m *MockIoTAPI) SetDefaultAuthorizerRequest(arg0 *iot.SetDefaultAuthorizerInput) (*request.Request, *iot.SetDefaultAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.SetDefaultAuthorizerOutput)
	return ret0, ret1
}

// SetDefaultAuthorizerRequest indicates an expected call of SetDefaultAuthorizerRequest
func (mr *MockIoTAPIMockRecorder) SetDefaultAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultAuthorizerRequest", reflect.TypeOf((*MockIoTAPI)(nil).SetDefaultAuthorizerRequest), arg0)
}

// SetDefaultAuthorizerWithContext mocks base method
func (m *MockIoTAPI) SetDefaultAuthorizerWithContext(arg0 aws.Context, arg1 *iot.SetDefaultAuthorizerInput, arg2 ...request.Option) (*iot.SetDefaultAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDefaultAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*iot.SetDefaultAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultAuthorizerWithContext indicates an expected call of SetDefaultAuthorizerWithContext
func (mr *MockIoTAPIMockRecorder) SetDefaultAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultAuthorizerWithContext", reflect.TypeOf((*MockIoTAPI)(nil).SetDefaultAuthorizerWithContext), varargs...)
}

// SetDefaultPolicyVersion mocks base method
func (m *MockIoTAPI) SetDefaultPolicyVersion(arg0 *iot.SetDefaultPolicyVersionInput) (*iot.SetDefaultPolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultPolicyVersion", arg0)
	ret0, _ := ret[0].(*iot.SetDefaultPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultPolicyVersion indicates an expected call of SetDefaultPolicyVersion
func (mr *MockIoTAPIMockRecorder) SetDefaultPolicyVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultPolicyVersion", reflect.TypeOf((*MockIoTAPI)(nil).SetDefaultPolicyVersion), arg0)
}

// SetDefaultPolicyVersionRequest mocks base method
func (m *MockIoTAPI) SetDefaultPolicyVersionRequest(arg0 *iot.SetDefaultPolicyVersionInput) (*request.Request, *iot.SetDefaultPolicyVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultPolicyVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.SetDefaultPolicyVersionOutput)
	return ret0, ret1
}

// SetDefaultPolicyVersionRequest indicates an expected call of SetDefaultPolicyVersionRequest
func (mr *MockIoTAPIMockRecorder) SetDefaultPolicyVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultPolicyVersionRequest", reflect.TypeOf((*MockIoTAPI)(nil).SetDefaultPolicyVersionRequest), arg0)
}

// SetDefaultPolicyVersionWithContext mocks base method
func (m *MockIoTAPI) SetDefaultPolicyVersionWithContext(arg0 aws.Context, arg1 *iot.SetDefaultPolicyVersionInput, arg2 ...request.Option) (*iot.SetDefaultPolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDefaultPolicyVersionWithContext", varargs...)
	ret0, _ := ret[0].(*iot.SetDefaultPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultPolicyVersionWithContext indicates an expected call of SetDefaultPolicyVersionWithContext
func (mr *MockIoTAPIMockRecorder) SetDefaultPolicyVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultPolicyVersionWithContext", reflect.TypeOf((*MockIoTAPI)(nil).SetDefaultPolicyVersionWithContext), varargs...)
}

// SetLoggingOptions mocks base method
func (m *MockIoTAPI) SetLoggingOptions(arg0 *iot.SetLoggingOptionsInput) (*iot.SetLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLoggingOptions", arg0)
	ret0, _ := ret[0].(*iot.SetLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLoggingOptions indicates an expected call of SetLoggingOptions
func (mr *MockIoTAPIMockRecorder) SetLoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoggingOptions", reflect.TypeOf((*MockIoTAPI)(nil).SetLoggingOptions), arg0)
}

// SetLoggingOptionsRequest mocks base method
func (m *MockIoTAPI) SetLoggingOptionsRequest(arg0 *iot.SetLoggingOptionsInput) (*request.Request, *iot.SetLoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.SetLoggingOptionsOutput)
	return ret0, ret1
}

// SetLoggingOptionsRequest indicates an expected call of SetLoggingOptionsRequest
func (mr *MockIoTAPIMockRecorder) SetLoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoggingOptionsRequest", reflect.TypeOf((*MockIoTAPI)(nil).SetLoggingOptionsRequest), arg0)
}

// SetLoggingOptionsWithContext mocks base method
func (m *MockIoTAPI) SetLoggingOptionsWithContext(arg0 aws.Context, arg1 *iot.SetLoggingOptionsInput, arg2 ...request.Option) (*iot.SetLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.SetLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLoggingOptionsWithContext indicates an expected call of SetLoggingOptionsWithContext
func (mr *MockIoTAPIMockRecorder) SetLoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoggingOptionsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).SetLoggingOptionsWithContext), varargs...)
}

// SetV2LoggingLevel mocks base method
func (m *MockIoTAPI) SetV2LoggingLevel(arg0 *iot.SetV2LoggingLevelInput) (*iot.SetV2LoggingLevelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetV2LoggingLevel", arg0)
	ret0, _ := ret[0].(*iot.SetV2LoggingLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetV2LoggingLevel indicates an expected call of SetV2LoggingLevel
func (mr *MockIoTAPIMockRecorder) SetV2LoggingLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetV2LoggingLevel", reflect.TypeOf((*MockIoTAPI)(nil).SetV2LoggingLevel), arg0)
}

// SetV2LoggingLevelRequest mocks base method
func (m *MockIoTAPI) SetV2LoggingLevelRequest(arg0 *iot.SetV2LoggingLevelInput) (*request.Request, *iot.SetV2LoggingLevelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetV2LoggingLevelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.SetV2LoggingLevelOutput)
	return ret0, ret1
}

// SetV2LoggingLevelRequest indicates an expected call of SetV2LoggingLevelRequest
func (mr *MockIoTAPIMockRecorder) SetV2LoggingLevelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetV2LoggingLevelRequest", reflect.TypeOf((*MockIoTAPI)(nil).SetV2LoggingLevelRequest), arg0)
}

// SetV2LoggingLevelWithContext mocks base method
func (m *MockIoTAPI) SetV2LoggingLevelWithContext(arg0 aws.Context, arg1 *iot.SetV2LoggingLevelInput, arg2 ...request.Option) (*iot.SetV2LoggingLevelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetV2LoggingLevelWithContext", varargs...)
	ret0, _ := ret[0].(*iot.SetV2LoggingLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetV2LoggingLevelWithContext indicates an expected call of SetV2LoggingLevelWithContext
func (mr *MockIoTAPIMockRecorder) SetV2LoggingLevelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetV2LoggingLevelWithContext", reflect.TypeOf((*MockIoTAPI)(nil).SetV2LoggingLevelWithContext), varargs...)
}

// SetV2LoggingOptions mocks base method
func (m *MockIoTAPI) SetV2LoggingOptions(arg0 *iot.SetV2LoggingOptionsInput) (*iot.SetV2LoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetV2LoggingOptions", arg0)
	ret0, _ := ret[0].(*iot.SetV2LoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetV2LoggingOptions indicates an expected call of SetV2LoggingOptions
func (mr *MockIoTAPIMockRecorder) SetV2LoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetV2LoggingOptions", reflect.TypeOf((*MockIoTAPI)(nil).SetV2LoggingOptions), arg0)
}

// SetV2LoggingOptionsRequest mocks base method
func (m *MockIoTAPI) SetV2LoggingOptionsRequest(arg0 *iot.SetV2LoggingOptionsInput) (*request.Request, *iot.SetV2LoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetV2LoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.SetV2LoggingOptionsOutput)
	return ret0, ret1
}

// SetV2LoggingOptionsRequest indicates an expected call of SetV2LoggingOptionsRequest
func (mr *MockIoTAPIMockRecorder) SetV2LoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetV2LoggingOptionsRequest", reflect.TypeOf((*MockIoTAPI)(nil).SetV2LoggingOptionsRequest), arg0)
}

// SetV2LoggingOptionsWithContext mocks base method
func (m *MockIoTAPI) SetV2LoggingOptionsWithContext(arg0 aws.Context, arg1 *iot.SetV2LoggingOptionsInput, arg2 ...request.Option) (*iot.SetV2LoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetV2LoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.SetV2LoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetV2LoggingOptionsWithContext indicates an expected call of SetV2LoggingOptionsWithContext
func (mr *MockIoTAPIMockRecorder) SetV2LoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetV2LoggingOptionsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).SetV2LoggingOptionsWithContext), varargs...)
}

// StartThingRegistrationTask mocks base method
func (m *MockIoTAPI) StartThingRegistrationTask(arg0 *iot.StartThingRegistrationTaskInput) (*iot.StartThingRegistrationTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartThingRegistrationTask", arg0)
	ret0, _ := ret[0].(*iot.StartThingRegistrationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartThingRegistrationTask indicates an expected call of StartThingRegistrationTask
func (mr *MockIoTAPIMockRecorder) StartThingRegistrationTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartThingRegistrationTask", reflect.TypeOf((*MockIoTAPI)(nil).StartThingRegistrationTask), arg0)
}

// StartThingRegistrationTaskRequest mocks base method
func (m *MockIoTAPI) StartThingRegistrationTaskRequest(arg0 *iot.StartThingRegistrationTaskInput) (*request.Request, *iot.StartThingRegistrationTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartThingRegistrationTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.StartThingRegistrationTaskOutput)
	return ret0, ret1
}

// StartThingRegistrationTaskRequest indicates an expected call of StartThingRegistrationTaskRequest
func (mr *MockIoTAPIMockRecorder) StartThingRegistrationTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartThingRegistrationTaskRequest", reflect.TypeOf((*MockIoTAPI)(nil).StartThingRegistrationTaskRequest), arg0)
}

// StartThingRegistrationTaskWithContext mocks base method
func (m *MockIoTAPI) StartThingRegistrationTaskWithContext(arg0 aws.Context, arg1 *iot.StartThingRegistrationTaskInput, arg2 ...request.Option) (*iot.StartThingRegistrationTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartThingRegistrationTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iot.StartThingRegistrationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartThingRegistrationTaskWithContext indicates an expected call of StartThingRegistrationTaskWithContext
func (mr *MockIoTAPIMockRecorder) StartThingRegistrationTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartThingRegistrationTaskWithContext", reflect.TypeOf((*MockIoTAPI)(nil).StartThingRegistrationTaskWithContext), varargs...)
}

// StopThingRegistrationTask mocks base method
func (m *MockIoTAPI) StopThingRegistrationTask(arg0 *iot.StopThingRegistrationTaskInput) (*iot.StopThingRegistrationTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopThingRegistrationTask", arg0)
	ret0, _ := ret[0].(*iot.StopThingRegistrationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopThingRegistrationTask indicates an expected call of StopThingRegistrationTask
func (mr *MockIoTAPIMockRecorder) StopThingRegistrationTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopThingRegistrationTask", reflect.TypeOf((*MockIoTAPI)(nil).StopThingRegistrationTask), arg0)
}

// StopThingRegistrationTaskRequest mocks base method
func (m *MockIoTAPI) StopThingRegistrationTaskRequest(arg0 *iot.StopThingRegistrationTaskInput) (*request.Request, *iot.StopThingRegistrationTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopThingRegistrationTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.StopThingRegistrationTaskOutput)
	return ret0, ret1
}

// StopThingRegistrationTaskRequest indicates an expected call of StopThingRegistrationTaskRequest
func (mr *MockIoTAPIMockRecorder) StopThingRegistrationTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopThingRegistrationTaskRequest", reflect.TypeOf((*MockIoTAPI)(nil).StopThingRegistrationTaskRequest), arg0)
}

// StopThingRegistrationTaskWithContext mocks base method
func (m *MockIoTAPI) StopThingRegistrationTaskWithContext(arg0 aws.Context, arg1 *iot.StopThingRegistrationTaskInput, arg2 ...request.Option) (*iot.StopThingRegistrationTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopThingRegistrationTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iot.StopThingRegistrationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopThingRegistrationTaskWithContext indicates an expected call of StopThingRegistrationTaskWithContext
func (mr *MockIoTAPIMockRecorder) StopThingRegistrationTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopThingRegistrationTaskWithContext", reflect.TypeOf((*MockIoTAPI)(nil).StopThingRegistrationTaskWithContext), varargs...)
}

// TestAuthorization mocks base method
func (m *MockIoTAPI) TestAuthorization(arg0 *iot.TestAuthorizationInput) (*iot.TestAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestAuthorization", arg0)
	ret0, _ := ret[0].(*iot.TestAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestAuthorization indicates an expected call of TestAuthorization
func (mr *MockIoTAPIMockRecorder) TestAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestAuthorization", reflect.TypeOf((*MockIoTAPI)(nil).TestAuthorization), arg0)
}

// TestAuthorizationRequest mocks base method
func (m *MockIoTAPI) TestAuthorizationRequest(arg0 *iot.TestAuthorizationInput) (*request.Request, *iot.TestAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.TestAuthorizationOutput)
	return ret0, ret1
}

// TestAuthorizationRequest indicates an expected call of TestAuthorizationRequest
func (mr *MockIoTAPIMockRecorder) TestAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestAuthorizationRequest", reflect.TypeOf((*MockIoTAPI)(nil).TestAuthorizationRequest), arg0)
}

// TestAuthorizationWithContext mocks base method
func (m *MockIoTAPI) TestAuthorizationWithContext(arg0 aws.Context, arg1 *iot.TestAuthorizationInput, arg2 ...request.Option) (*iot.TestAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*iot.TestAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestAuthorizationWithContext indicates an expected call of TestAuthorizationWithContext
func (mr *MockIoTAPIMockRecorder) TestAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestAuthorizationWithContext", reflect.TypeOf((*MockIoTAPI)(nil).TestAuthorizationWithContext), varargs...)
}

// TestInvokeAuthorizer mocks base method
func (m *MockIoTAPI) TestInvokeAuthorizer(arg0 *iot.TestInvokeAuthorizerInput) (*iot.TestInvokeAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestInvokeAuthorizer", arg0)
	ret0, _ := ret[0].(*iot.TestInvokeAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestInvokeAuthorizer indicates an expected call of TestInvokeAuthorizer
func (mr *MockIoTAPIMockRecorder) TestInvokeAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestInvokeAuthorizer", reflect.TypeOf((*MockIoTAPI)(nil).TestInvokeAuthorizer), arg0)
}

// TestInvokeAuthorizerRequest mocks base method
func (m *MockIoTAPI) TestInvokeAuthorizerRequest(arg0 *iot.TestInvokeAuthorizerInput) (*request.Request, *iot.TestInvokeAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestInvokeAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.TestInvokeAuthorizerOutput)
	return ret0, ret1
}

// TestInvokeAuthorizerRequest indicates an expected call of TestInvokeAuthorizerRequest
func (mr *MockIoTAPIMockRecorder) TestInvokeAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestInvokeAuthorizerRequest", reflect.TypeOf((*MockIoTAPI)(nil).TestInvokeAuthorizerRequest), arg0)
}

// TestInvokeAuthorizerWithContext mocks base method
func (m *MockIoTAPI) TestInvokeAuthorizerWithContext(arg0 aws.Context, arg1 *iot.TestInvokeAuthorizerInput, arg2 ...request.Option) (*iot.TestInvokeAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestInvokeAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*iot.TestInvokeAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestInvokeAuthorizerWithContext indicates an expected call of TestInvokeAuthorizerWithContext
func (mr *MockIoTAPIMockRecorder) TestInvokeAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestInvokeAuthorizerWithContext", reflect.TypeOf((*MockIoTAPI)(nil).TestInvokeAuthorizerWithContext), varargs...)
}

// TransferCertificate mocks base method
func (m *MockIoTAPI) TransferCertificate(arg0 *iot.TransferCertificateInput) (*iot.TransferCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferCertificate", arg0)
	ret0, _ := ret[0].(*iot.TransferCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferCertificate indicates an expected call of TransferCertificate
func (mr *MockIoTAPIMockRecorder) TransferCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferCertificate", reflect.TypeOf((*MockIoTAPI)(nil).TransferCertificate), arg0)
}

// TransferCertificateRequest mocks base method
func (m *MockIoTAPI) TransferCertificateRequest(arg0 *iot.TransferCertificateInput) (*request.Request, *iot.TransferCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.TransferCertificateOutput)
	return ret0, ret1
}

// TransferCertificateRequest indicates an expected call of TransferCertificateRequest
func (mr *MockIoTAPIMockRecorder) TransferCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferCertificateRequest", reflect.TypeOf((*MockIoTAPI)(nil).TransferCertificateRequest), arg0)
}

// TransferCertificateWithContext mocks base method
func (m *MockIoTAPI) TransferCertificateWithContext(arg0 aws.Context, arg1 *iot.TransferCertificateInput, arg2 ...request.Option) (*iot.TransferCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransferCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.TransferCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferCertificateWithContext indicates an expected call of TransferCertificateWithContext
func (mr *MockIoTAPIMockRecorder) TransferCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferCertificateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).TransferCertificateWithContext), varargs...)
}

// UpdateAuthorizer mocks base method
func (m *MockIoTAPI) UpdateAuthorizer(arg0 *iot.UpdateAuthorizerInput) (*iot.UpdateAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorizer", arg0)
	ret0, _ := ret[0].(*iot.UpdateAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorizer indicates an expected call of UpdateAuthorizer
func (mr *MockIoTAPIMockRecorder) UpdateAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizer", reflect.TypeOf((*MockIoTAPI)(nil).UpdateAuthorizer), arg0)
}

// UpdateAuthorizerRequest mocks base method
func (m *MockIoTAPI) UpdateAuthorizerRequest(arg0 *iot.UpdateAuthorizerInput) (*request.Request, *iot.UpdateAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.UpdateAuthorizerOutput)
	return ret0, ret1
}

// UpdateAuthorizerRequest indicates an expected call of UpdateAuthorizerRequest
func (mr *MockIoTAPIMockRecorder) UpdateAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizerRequest", reflect.TypeOf((*MockIoTAPI)(nil).UpdateAuthorizerRequest), arg0)
}

// UpdateAuthorizerWithContext mocks base method
func (m *MockIoTAPI) UpdateAuthorizerWithContext(arg0 aws.Context, arg1 *iot.UpdateAuthorizerInput, arg2 ...request.Option) (*iot.UpdateAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*iot.UpdateAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorizerWithContext indicates an expected call of UpdateAuthorizerWithContext
func (mr *MockIoTAPIMockRecorder) UpdateAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizerWithContext", reflect.TypeOf((*MockIoTAPI)(nil).UpdateAuthorizerWithContext), varargs...)
}

// UpdateCACertificate mocks base method
func (m *MockIoTAPI) UpdateCACertificate(arg0 *iot.UpdateCACertificateInput) (*iot.UpdateCACertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCACertificate", arg0)
	ret0, _ := ret[0].(*iot.UpdateCACertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCACertificate indicates an expected call of UpdateCACertificate
func (mr *MockIoTAPIMockRecorder) UpdateCACertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCACertificate", reflect.TypeOf((*MockIoTAPI)(nil).UpdateCACertificate), arg0)
}

// UpdateCACertificateRequest mocks base method
func (m *MockIoTAPI) UpdateCACertificateRequest(arg0 *iot.UpdateCACertificateInput) (*request.Request, *iot.UpdateCACertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCACertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.UpdateCACertificateOutput)
	return ret0, ret1
}

// UpdateCACertificateRequest indicates an expected call of UpdateCACertificateRequest
func (mr *MockIoTAPIMockRecorder) UpdateCACertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCACertificateRequest", reflect.TypeOf((*MockIoTAPI)(nil).UpdateCACertificateRequest), arg0)
}

// UpdateCACertificateWithContext mocks base method
func (m *MockIoTAPI) UpdateCACertificateWithContext(arg0 aws.Context, arg1 *iot.UpdateCACertificateInput, arg2 ...request.Option) (*iot.UpdateCACertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCACertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.UpdateCACertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCACertificateWithContext indicates an expected call of UpdateCACertificateWithContext
func (mr *MockIoTAPIMockRecorder) UpdateCACertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCACertificateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).UpdateCACertificateWithContext), varargs...)
}

// UpdateCertificate mocks base method
func (m *MockIoTAPI) UpdateCertificate(arg0 *iot.UpdateCertificateInput) (*iot.UpdateCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificate", arg0)
	ret0, _ := ret[0].(*iot.UpdateCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCertificate indicates an expected call of UpdateCertificate
func (mr *MockIoTAPIMockRecorder) UpdateCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificate", reflect.TypeOf((*MockIoTAPI)(nil).UpdateCertificate), arg0)
}

// UpdateCertificateRequest mocks base method
func (m *MockIoTAPI) UpdateCertificateRequest(arg0 *iot.UpdateCertificateInput) (*request.Request, *iot.UpdateCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.UpdateCertificateOutput)
	return ret0, ret1
}

// UpdateCertificateRequest indicates an expected call of UpdateCertificateRequest
func (mr *MockIoTAPIMockRecorder) UpdateCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequest", reflect.TypeOf((*MockIoTAPI)(nil).UpdateCertificateRequest), arg0)
}

// UpdateCertificateWithContext mocks base method
func (m *MockIoTAPI) UpdateCertificateWithContext(arg0 aws.Context, arg1 *iot.UpdateCertificateInput, arg2 ...request.Option) (*iot.UpdateCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iot.UpdateCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCertificateWithContext indicates an expected call of UpdateCertificateWithContext
func (mr *MockIoTAPIMockRecorder) UpdateCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateWithContext", reflect.TypeOf((*MockIoTAPI)(nil).UpdateCertificateWithContext), varargs...)
}

// UpdateEventConfigurations mocks base method
func (m *MockIoTAPI) UpdateEventConfigurations(arg0 *iot.UpdateEventConfigurationsInput) (*iot.UpdateEventConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventConfigurations", arg0)
	ret0, _ := ret[0].(*iot.UpdateEventConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventConfigurations indicates an expected call of UpdateEventConfigurations
func (mr *MockIoTAPIMockRecorder) UpdateEventConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventConfigurations", reflect.TypeOf((*MockIoTAPI)(nil).UpdateEventConfigurations), arg0)
}

// UpdateEventConfigurationsRequest mocks base method
func (m *MockIoTAPI) UpdateEventConfigurationsRequest(arg0 *iot.UpdateEventConfigurationsInput) (*request.Request, *iot.UpdateEventConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.UpdateEventConfigurationsOutput)
	return ret0, ret1
}

// UpdateEventConfigurationsRequest indicates an expected call of UpdateEventConfigurationsRequest
func (mr *MockIoTAPIMockRecorder) UpdateEventConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventConfigurationsRequest", reflect.TypeOf((*MockIoTAPI)(nil).UpdateEventConfigurationsRequest), arg0)
}

// UpdateEventConfigurationsWithContext mocks base method
func (m *MockIoTAPI) UpdateEventConfigurationsWithContext(arg0 aws.Context, arg1 *iot.UpdateEventConfigurationsInput, arg2 ...request.Option) (*iot.UpdateEventConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEventConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*iot.UpdateEventConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventConfigurationsWithContext indicates an expected call of UpdateEventConfigurationsWithContext
func (mr *MockIoTAPIMockRecorder) UpdateEventConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventConfigurationsWithContext", reflect.TypeOf((*MockIoTAPI)(nil).UpdateEventConfigurationsWithContext), varargs...)
}

// UpdateIndexingConfiguration mocks base method
func (m *MockIoTAPI) UpdateIndexingConfiguration(arg0 *iot.UpdateIndexingConfigurationInput) (*iot.UpdateIndexingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndexingConfiguration", arg0)
	ret0, _ := ret[0].(*iot.UpdateIndexingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIndexingConfiguration indicates an expected call of UpdateIndexingConfiguration
func (mr *MockIoTAPIMockRecorder) UpdateIndexingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexingConfiguration", reflect.TypeOf((*MockIoTAPI)(nil).UpdateIndexingConfiguration), arg0)
}

// UpdateIndexingConfigurationRequest mocks base method
func (m *MockIoTAPI) UpdateIndexingConfigurationRequest(arg0 *iot.UpdateIndexingConfigurationInput) (*request.Request, *iot.UpdateIndexingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndexingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.UpdateIndexingConfigurationOutput)
	return ret0, ret1
}

// UpdateIndexingConfigurationRequest indicates an expected call of UpdateIndexingConfigurationRequest
func (mr *MockIoTAPIMockRecorder) UpdateIndexingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexingConfigurationRequest", reflect.TypeOf((*MockIoTAPI)(nil).UpdateIndexingConfigurationRequest), arg0)
}

// UpdateIndexingConfigurationWithContext mocks base method
func (m *MockIoTAPI) UpdateIndexingConfigurationWithContext(arg0 aws.Context, arg1 *iot.UpdateIndexingConfigurationInput, arg2 ...request.Option) (*iot.UpdateIndexingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIndexingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iot.UpdateIndexingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIndexingConfigurationWithContext indicates an expected call of UpdateIndexingConfigurationWithContext
func (mr *MockIoTAPIMockRecorder) UpdateIndexingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexingConfigurationWithContext", reflect.TypeOf((*MockIoTAPI)(nil).UpdateIndexingConfigurationWithContext), varargs...)
}

// UpdateRoleAlias mocks base method
func (m *MockIoTAPI) UpdateRoleAlias(arg0 *iot.UpdateRoleAliasInput) (*iot.UpdateRoleAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleAlias", arg0)
	ret0, _ := ret[0].(*iot.UpdateRoleAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoleAlias indicates an expected call of UpdateRoleAlias
func (mr *MockIoTAPIMockRecorder) UpdateRoleAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleAlias", reflect.TypeOf((*MockIoTAPI)(nil).UpdateRoleAlias), arg0)
}

// UpdateRoleAliasRequest mocks base method
func (m *MockIoTAPI) UpdateRoleAliasRequest(arg0 *iot.UpdateRoleAliasInput) (*request.Request, *iot.UpdateRoleAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.UpdateRoleAliasOutput)
	return ret0, ret1
}

// UpdateRoleAliasRequest indicates an expected call of UpdateRoleAliasRequest
func (mr *MockIoTAPIMockRecorder) UpdateRoleAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleAliasRequest", reflect.TypeOf((*MockIoTAPI)(nil).UpdateRoleAliasRequest), arg0)
}

// UpdateRoleAliasWithContext mocks base method
func (m *MockIoTAPI) UpdateRoleAliasWithContext(arg0 aws.Context, arg1 *iot.UpdateRoleAliasInput, arg2 ...request.Option) (*iot.UpdateRoleAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleAliasWithContext", varargs...)
	ret0, _ := ret[0].(*iot.UpdateRoleAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoleAliasWithContext indicates an expected call of UpdateRoleAliasWithContext
func (mr *MockIoTAPIMockRecorder) UpdateRoleAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleAliasWithContext", reflect.TypeOf((*MockIoTAPI)(nil).UpdateRoleAliasWithContext), varargs...)
}

// UpdateStream mocks base method
func (m *MockIoTAPI) UpdateStream(arg0 *iot.UpdateStreamInput) (*iot.UpdateStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStream", arg0)
	ret0, _ := ret[0].(*iot.UpdateStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStream indicates an expected call of UpdateStream
func (mr *MockIoTAPIMockRecorder) UpdateStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockIoTAPI)(nil).UpdateStream), arg0)
}

// UpdateStreamRequest mocks base method
func (m *MockIoTAPI) UpdateStreamRequest(arg0 *iot.UpdateStreamInput) (*request.Request, *iot.UpdateStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.UpdateStreamOutput)
	return ret0, ret1
}

// UpdateStreamRequest indicates an expected call of UpdateStreamRequest
func (mr *MockIoTAPIMockRecorder) UpdateStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamRequest", reflect.TypeOf((*MockIoTAPI)(nil).UpdateStreamRequest), arg0)
}

// UpdateStreamWithContext mocks base method
func (m *MockIoTAPI) UpdateStreamWithContext(arg0 aws.Context, arg1 *iot.UpdateStreamInput, arg2 ...request.Option) (*iot.UpdateStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStreamWithContext", varargs...)
	ret0, _ := ret[0].(*iot.UpdateStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStreamWithContext indicates an expected call of UpdateStreamWithContext
func (mr *MockIoTAPIMockRecorder) UpdateStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamWithContext", reflect.TypeOf((*MockIoTAPI)(nil).UpdateStreamWithContext), varargs...)
}

// UpdateThing mocks base method
func (m *MockIoTAPI) UpdateThing(arg0 *iot.UpdateThingInput) (*iot.UpdateThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThing", arg0)
	ret0, _ := ret[0].(*iot.UpdateThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThing indicates an expected call of UpdateThing
func (mr *MockIoTAPIMockRecorder) UpdateThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThing", reflect.TypeOf((*MockIoTAPI)(nil).UpdateThing), arg0)
}

// UpdateThingGroup mocks base method
func (m *MockIoTAPI) UpdateThingGroup(arg0 *iot.UpdateThingGroupInput) (*iot.UpdateThingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThingGroup", arg0)
	ret0, _ := ret[0].(*iot.UpdateThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThingGroup indicates an expected call of UpdateThingGroup
func (mr *MockIoTAPIMockRecorder) UpdateThingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingGroup", reflect.TypeOf((*MockIoTAPI)(nil).UpdateThingGroup), arg0)
}

// UpdateThingGroupRequest mocks base method
func (m *MockIoTAPI) UpdateThingGroupRequest(arg0 *iot.UpdateThingGroupInput) (*request.Request, *iot.UpdateThingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.UpdateThingGroupOutput)
	return ret0, ret1
}

// UpdateThingGroupRequest indicates an expected call of UpdateThingGroupRequest
func (mr *MockIoTAPIMockRecorder) UpdateThingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingGroupRequest", reflect.TypeOf((*MockIoTAPI)(nil).UpdateThingGroupRequest), arg0)
}

// UpdateThingGroupWithContext mocks base method
func (m *MockIoTAPI) UpdateThingGroupWithContext(arg0 aws.Context, arg1 *iot.UpdateThingGroupInput, arg2 ...request.Option) (*iot.UpdateThingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateThingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iot.UpdateThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThingGroupWithContext indicates an expected call of UpdateThingGroupWithContext
func (mr *MockIoTAPIMockRecorder) UpdateThingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingGroupWithContext", reflect.TypeOf((*MockIoTAPI)(nil).UpdateThingGroupWithContext), varargs...)
}

// UpdateThingGroupsForThing mocks base method
func (m *MockIoTAPI) UpdateThingGroupsForThing(arg0 *iot.UpdateThingGroupsForThingInput) (*iot.UpdateThingGroupsForThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThingGroupsForThing", arg0)
	ret0, _ := ret[0].(*iot.UpdateThingGroupsForThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThingGroupsForThing indicates an expected call of UpdateThingGroupsForThing
func (mr *MockIoTAPIMockRecorder) UpdateThingGroupsForThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingGroupsForThing", reflect.TypeOf((*MockIoTAPI)(nil).UpdateThingGroupsForThing), arg0)
}

// UpdateThingGroupsForThingRequest mocks base method
func (m *MockIoTAPI) UpdateThingGroupsForThingRequest(arg0 *iot.UpdateThingGroupsForThingInput) (*request.Request, *iot.UpdateThingGroupsForThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThingGroupsForThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.UpdateThingGroupsForThingOutput)
	return ret0, ret1
}

// UpdateThingGroupsForThingRequest indicates an expected call of UpdateThingGroupsForThingRequest
func (mr *MockIoTAPIMockRecorder) UpdateThingGroupsForThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingGroupsForThingRequest", reflect.TypeOf((*MockIoTAPI)(nil).UpdateThingGroupsForThingRequest), arg0)
}

// UpdateThingGroupsForThingWithContext mocks base method
func (m *MockIoTAPI) UpdateThingGroupsForThingWithContext(arg0 aws.Context, arg1 *iot.UpdateThingGroupsForThingInput, arg2 ...request.Option) (*iot.UpdateThingGroupsForThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateThingGroupsForThingWithContext", varargs...)
	ret0, _ := ret[0].(*iot.UpdateThingGroupsForThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThingGroupsForThingWithContext indicates an expected call of UpdateThingGroupsForThingWithContext
func (mr *MockIoTAPIMockRecorder) UpdateThingGroupsForThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingGroupsForThingWithContext", reflect.TypeOf((*MockIoTAPI)(nil).UpdateThingGroupsForThingWithContext), varargs...)
}

// UpdateThingRequest mocks base method
func (m *MockIoTAPI) UpdateThingRequest(arg0 *iot.UpdateThingInput) (*request.Request, *iot.UpdateThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iot.UpdateThingOutput)
	return ret0, ret1
}

// UpdateThingRequest indicates an expected call of UpdateThingRequest
func (mr *MockIoTAPIMockRecorder) UpdateThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingRequest", reflect.TypeOf((*MockIoTAPI)(nil).UpdateThingRequest), arg0)
}

// UpdateThingWithContext mocks base method
func (m *MockIoTAPI) UpdateThingWithContext(arg0 aws.Context, arg1 *iot.UpdateThingInput, arg2 ...request.Option) (*iot.UpdateThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateThingWithContext", varargs...)
	ret0, _ := ret[0].(*iot.UpdateThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThingWithContext indicates an expected call of UpdateThingWithContext
func (mr *MockIoTAPIMockRecorder) UpdateThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingWithContext", reflect.TypeOf((*MockIoTAPI)(nil).UpdateThingWithContext), varargs...)
}
