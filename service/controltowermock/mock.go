// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/controltower/controltoweriface (interfaces: ControlTowerAPI)

// Package controltowermock is a generated GoMock package.
package controltowermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	controltower "github.com/aws/aws-sdk-go/service/controltower"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockControlTowerAPI is a mock of ControlTowerAPI interface
type MockControlTowerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockControlTowerAPIMockRecorder
}

// MockControlTowerAPIMockRecorder is the mock recorder for MockControlTowerAPI
type MockControlTowerAPIMockRecorder struct {
	mock *MockControlTowerAPI
}

// NewMockControlTowerAPI creates a new mock instance
func NewMockControlTowerAPI(ctrl *gomock.Controller) *MockControlTowerAPI {
	mock := &MockControlTowerAPI{ctrl: ctrl}
	mock.recorder = &MockControlTowerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockControlTowerAPI) EXPECT() *MockControlTowerAPIMockRecorder {
	return m.recorder
}

// DeleteLandingZone mocks base method
func (m *MockControlTowerAPI) DeleteLandingZone(arg0 *controltower.DeleteLandingZoneInput) (*controltower.DeleteLandingZoneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLandingZone", arg0)
	ret0, _ := ret[0].(*controltower.DeleteLandingZoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLandingZone indicates an expected call of DeleteLandingZone
func (mr *MockControlTowerAPIMockRecorder) DeleteLandingZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLandingZone", reflect.TypeOf((*MockControlTowerAPI)(nil).DeleteLandingZone), arg0)
}

// DeleteLandingZoneRequest mocks base method
func (m *MockControlTowerAPI) DeleteLandingZoneRequest(arg0 *controltower.DeleteLandingZoneInput) (*request.Request, *controltower.DeleteLandingZoneOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLandingZoneRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.DeleteLandingZoneOutput)
	return ret0, ret1
}

// DeleteLandingZoneRequest indicates an expected call of DeleteLandingZoneRequest
func (mr *MockControlTowerAPIMockRecorder) DeleteLandingZoneRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLandingZoneRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).DeleteLandingZoneRequest), arg0)
}

// DeleteLandingZoneWithContext mocks base method
func (m *MockControlTowerAPI) DeleteLandingZoneWithContext(arg0 context.Context, arg1 *controltower.DeleteLandingZoneInput, arg2 ...request.Option) (*controltower.DeleteLandingZoneOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLandingZoneWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.DeleteLandingZoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLandingZoneWithContext indicates an expected call of DeleteLandingZoneWithContext
func (mr *MockControlTowerAPIMockRecorder) DeleteLandingZoneWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLandingZoneWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).DeleteLandingZoneWithContext), varargs...)
}

// DisableBaseline mocks base method
func (m *MockControlTowerAPI) DisableBaseline(arg0 *controltower.DisableBaselineInput) (*controltower.DisableBaselineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableBaseline", arg0)
	ret0, _ := ret[0].(*controltower.DisableBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableBaseline indicates an expected call of DisableBaseline
func (mr *MockControlTowerAPIMockRecorder) DisableBaseline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBaseline", reflect.TypeOf((*MockControlTowerAPI)(nil).DisableBaseline), arg0)
}

// DisableBaselineRequest mocks base method
func (m *MockControlTowerAPI) DisableBaselineRequest(arg0 *controltower.DisableBaselineInput) (*request.Request, *controltower.DisableBaselineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableBaselineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.DisableBaselineOutput)
	return ret0, ret1
}

// DisableBaselineRequest indicates an expected call of DisableBaselineRequest
func (mr *MockControlTowerAPIMockRecorder) DisableBaselineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBaselineRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).DisableBaselineRequest), arg0)
}

// DisableBaselineWithContext mocks base method
func (m *MockControlTowerAPI) DisableBaselineWithContext(arg0 context.Context, arg1 *controltower.DisableBaselineInput, arg2 ...request.Option) (*controltower.DisableBaselineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableBaselineWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.DisableBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableBaselineWithContext indicates an expected call of DisableBaselineWithContext
func (mr *MockControlTowerAPIMockRecorder) DisableBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBaselineWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).DisableBaselineWithContext), varargs...)
}

// DisableControl mocks base method
func (m *MockControlTowerAPI) DisableControl(arg0 *controltower.DisableControlInput) (*controltower.DisableControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableControl", arg0)
	ret0, _ := ret[0].(*controltower.DisableControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableControl indicates an expected call of DisableControl
func (mr *MockControlTowerAPIMockRecorder) DisableControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableControl", reflect.TypeOf((*MockControlTowerAPI)(nil).DisableControl), arg0)
}

// DisableControlRequest mocks base method
func (m *MockControlTowerAPI) DisableControlRequest(arg0 *controltower.DisableControlInput) (*request.Request, *controltower.DisableControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.DisableControlOutput)
	return ret0, ret1
}

// DisableControlRequest indicates an expected call of DisableControlRequest
func (mr *MockControlTowerAPIMockRecorder) DisableControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableControlRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).DisableControlRequest), arg0)
}

// DisableControlWithContext mocks base method
func (m *MockControlTowerAPI) DisableControlWithContext(arg0 context.Context, arg1 *controltower.DisableControlInput, arg2 ...request.Option) (*controltower.DisableControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableControlWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.DisableControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableControlWithContext indicates an expected call of DisableControlWithContext
func (mr *MockControlTowerAPIMockRecorder) DisableControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableControlWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).DisableControlWithContext), varargs...)
}

// EnableBaseline mocks base method
func (m *MockControlTowerAPI) EnableBaseline(arg0 *controltower.EnableBaselineInput) (*controltower.EnableBaselineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBaseline", arg0)
	ret0, _ := ret[0].(*controltower.EnableBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableBaseline indicates an expected call of EnableBaseline
func (mr *MockControlTowerAPIMockRecorder) EnableBaseline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBaseline", reflect.TypeOf((*MockControlTowerAPI)(nil).EnableBaseline), arg0)
}

// EnableBaselineRequest mocks base method
func (m *MockControlTowerAPI) EnableBaselineRequest(arg0 *controltower.EnableBaselineInput) (*request.Request, *controltower.EnableBaselineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBaselineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.EnableBaselineOutput)
	return ret0, ret1
}

// EnableBaselineRequest indicates an expected call of EnableBaselineRequest
func (mr *MockControlTowerAPIMockRecorder) EnableBaselineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBaselineRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).EnableBaselineRequest), arg0)
}

// EnableBaselineWithContext mocks base method
func (m *MockControlTowerAPI) EnableBaselineWithContext(arg0 context.Context, arg1 *controltower.EnableBaselineInput, arg2 ...request.Option) (*controltower.EnableBaselineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableBaselineWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.EnableBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableBaselineWithContext indicates an expected call of EnableBaselineWithContext
func (mr *MockControlTowerAPIMockRecorder) EnableBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBaselineWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).EnableBaselineWithContext), varargs...)
}

// EnableControl mocks base method
func (m *MockControlTowerAPI) EnableControl(arg0 *controltower.EnableControlInput) (*controltower.EnableControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableControl", arg0)
	ret0, _ := ret[0].(*controltower.EnableControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableControl indicates an expected call of EnableControl
func (mr *MockControlTowerAPIMockRecorder) EnableControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableControl", reflect.TypeOf((*MockControlTowerAPI)(nil).EnableControl), arg0)
}

// EnableControlRequest mocks base method
func (m *MockControlTowerAPI) EnableControlRequest(arg0 *controltower.EnableControlInput) (*request.Request, *controltower.EnableControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.EnableControlOutput)
	return ret0, ret1
}

// EnableControlRequest indicates an expected call of EnableControlRequest
func (mr *MockControlTowerAPIMockRecorder) EnableControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableControlRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).EnableControlRequest), arg0)
}

// EnableControlWithContext mocks base method
func (m *MockControlTowerAPI) EnableControlWithContext(arg0 context.Context, arg1 *controltower.EnableControlInput, arg2 ...request.Option) (*controltower.EnableControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableControlWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.EnableControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableControlWithContext indicates an expected call of EnableControlWithContext
func (mr *MockControlTowerAPIMockRecorder) EnableControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableControlWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).EnableControlWithContext), varargs...)
}

// GetBaseline mocks base method
func (m *MockControlTowerAPI) GetBaseline(arg0 *controltower.GetBaselineInput) (*controltower.GetBaselineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseline", arg0)
	ret0, _ := ret[0].(*controltower.GetBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseline indicates an expected call of GetBaseline
func (mr *MockControlTowerAPIMockRecorder) GetBaseline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseline", reflect.TypeOf((*MockControlTowerAPI)(nil).GetBaseline), arg0)
}

// GetBaselineOperation mocks base method
func (m *MockControlTowerAPI) GetBaselineOperation(arg0 *controltower.GetBaselineOperationInput) (*controltower.GetBaselineOperationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaselineOperation", arg0)
	ret0, _ := ret[0].(*controltower.GetBaselineOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaselineOperation indicates an expected call of GetBaselineOperation
func (mr *MockControlTowerAPIMockRecorder) GetBaselineOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineOperation", reflect.TypeOf((*MockControlTowerAPI)(nil).GetBaselineOperation), arg0)
}

// GetBaselineOperationRequest mocks base method
func (m *MockControlTowerAPI) GetBaselineOperationRequest(arg0 *controltower.GetBaselineOperationInput) (*request.Request, *controltower.GetBaselineOperationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaselineOperationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.GetBaselineOperationOutput)
	return ret0, ret1
}

// GetBaselineOperationRequest indicates an expected call of GetBaselineOperationRequest
func (mr *MockControlTowerAPIMockRecorder) GetBaselineOperationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineOperationRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).GetBaselineOperationRequest), arg0)
}

// GetBaselineOperationWithContext mocks base method
func (m *MockControlTowerAPI) GetBaselineOperationWithContext(arg0 context.Context, arg1 *controltower.GetBaselineOperationInput, arg2 ...request.Option) (*controltower.GetBaselineOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBaselineOperationWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.GetBaselineOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaselineOperationWithContext indicates an expected call of GetBaselineOperationWithContext
func (mr *MockControlTowerAPIMockRecorder) GetBaselineOperationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineOperationWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).GetBaselineOperationWithContext), varargs...)
}

// GetBaselineRequest mocks base method
func (m *MockControlTowerAPI) GetBaselineRequest(arg0 *controltower.GetBaselineInput) (*request.Request, *controltower.GetBaselineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaselineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.GetBaselineOutput)
	return ret0, ret1
}

// GetBaselineRequest indicates an expected call of GetBaselineRequest
func (mr *MockControlTowerAPIMockRecorder) GetBaselineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).GetBaselineRequest), arg0)
}

// GetBaselineWithContext mocks base method
func (m *MockControlTowerAPI) GetBaselineWithContext(arg0 context.Context, arg1 *controltower.GetBaselineInput, arg2 ...request.Option) (*controltower.GetBaselineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBaselineWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.GetBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaselineWithContext indicates an expected call of GetBaselineWithContext
func (mr *MockControlTowerAPIMockRecorder) GetBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).GetBaselineWithContext), varargs...)
}

// GetControlOperation mocks base method
func (m *MockControlTowerAPI) GetControlOperation(arg0 *controltower.GetControlOperationInput) (*controltower.GetControlOperationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlOperation", arg0)
	ret0, _ := ret[0].(*controltower.GetControlOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlOperation indicates an expected call of GetControlOperation
func (mr *MockControlTowerAPIMockRecorder) GetControlOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlOperation", reflect.TypeOf((*MockControlTowerAPI)(nil).GetControlOperation), arg0)
}

// GetControlOperationRequest mocks base method
func (m *MockControlTowerAPI) GetControlOperationRequest(arg0 *controltower.GetControlOperationInput) (*request.Request, *controltower.GetControlOperationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlOperationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.GetControlOperationOutput)
	return ret0, ret1
}

// GetControlOperationRequest indicates an expected call of GetControlOperationRequest
func (mr *MockControlTowerAPIMockRecorder) GetControlOperationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlOperationRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).GetControlOperationRequest), arg0)
}

// GetControlOperationWithContext mocks base method
func (m *MockControlTowerAPI) GetControlOperationWithContext(arg0 context.Context, arg1 *controltower.GetControlOperationInput, arg2 ...request.Option) (*controltower.GetControlOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetControlOperationWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.GetControlOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlOperationWithContext indicates an expected call of GetControlOperationWithContext
func (mr *MockControlTowerAPIMockRecorder) GetControlOperationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlOperationWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).GetControlOperationWithContext), varargs...)
}

// GetEnabledBaseline mocks base method
func (m *MockControlTowerAPI) GetEnabledBaseline(arg0 *controltower.GetEnabledBaselineInput) (*controltower.GetEnabledBaselineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledBaseline", arg0)
	ret0, _ := ret[0].(*controltower.GetEnabledBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledBaseline indicates an expected call of GetEnabledBaseline
func (mr *MockControlTowerAPIMockRecorder) GetEnabledBaseline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledBaseline", reflect.TypeOf((*MockControlTowerAPI)(nil).GetEnabledBaseline), arg0)
}

// GetEnabledBaselineRequest mocks base method
func (m *MockControlTowerAPI) GetEnabledBaselineRequest(arg0 *controltower.GetEnabledBaselineInput) (*request.Request, *controltower.GetEnabledBaselineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledBaselineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.GetEnabledBaselineOutput)
	return ret0, ret1
}

// GetEnabledBaselineRequest indicates an expected call of GetEnabledBaselineRequest
func (mr *MockControlTowerAPIMockRecorder) GetEnabledBaselineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledBaselineRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).GetEnabledBaselineRequest), arg0)
}

// GetEnabledBaselineWithContext mocks base method
func (m *MockControlTowerAPI) GetEnabledBaselineWithContext(arg0 context.Context, arg1 *controltower.GetEnabledBaselineInput, arg2 ...request.Option) (*controltower.GetEnabledBaselineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnabledBaselineWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.GetEnabledBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledBaselineWithContext indicates an expected call of GetEnabledBaselineWithContext
func (mr *MockControlTowerAPIMockRecorder) GetEnabledBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledBaselineWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).GetEnabledBaselineWithContext), varargs...)
}

// GetEnabledControl mocks base method
func (m *MockControlTowerAPI) GetEnabledControl(arg0 *controltower.GetEnabledControlInput) (*controltower.GetEnabledControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledControl", arg0)
	ret0, _ := ret[0].(*controltower.GetEnabledControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledControl indicates an expected call of GetEnabledControl
func (mr *MockControlTowerAPIMockRecorder) GetEnabledControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledControl", reflect.TypeOf((*MockControlTowerAPI)(nil).GetEnabledControl), arg0)
}

// GetEnabledControlRequest mocks base method
func (m *MockControlTowerAPI) GetEnabledControlRequest(arg0 *controltower.GetEnabledControlInput) (*request.Request, *controltower.GetEnabledControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.GetEnabledControlOutput)
	return ret0, ret1
}

// GetEnabledControlRequest indicates an expected call of GetEnabledControlRequest
func (mr *MockControlTowerAPIMockRecorder) GetEnabledControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledControlRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).GetEnabledControlRequest), arg0)
}

// GetEnabledControlWithContext mocks base method
func (m *MockControlTowerAPI) GetEnabledControlWithContext(arg0 context.Context, arg1 *controltower.GetEnabledControlInput, arg2 ...request.Option) (*controltower.GetEnabledControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnabledControlWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.GetEnabledControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledControlWithContext indicates an expected call of GetEnabledControlWithContext
func (mr *MockControlTowerAPIMockRecorder) GetEnabledControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledControlWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).GetEnabledControlWithContext), varargs...)
}

// GetLandingZoneOperation mocks base method
func (m *MockControlTowerAPI) GetLandingZoneOperation(arg0 *controltower.GetLandingZoneOperationInput) (*controltower.GetLandingZoneOperationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandingZoneOperation", arg0)
	ret0, _ := ret[0].(*controltower.GetLandingZoneOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandingZoneOperation indicates an expected call of GetLandingZoneOperation
func (mr *MockControlTowerAPIMockRecorder) GetLandingZoneOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandingZoneOperation", reflect.TypeOf((*MockControlTowerAPI)(nil).GetLandingZoneOperation), arg0)
}

// GetLandingZoneOperationRequest mocks base method
func (m *MockControlTowerAPI) GetLandingZoneOperationRequest(arg0 *controltower.GetLandingZoneOperationInput) (*request.Request, *controltower.GetLandingZoneOperationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandingZoneOperationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.GetLandingZoneOperationOutput)
	return ret0, ret1
}

// GetLandingZoneOperationRequest indicates an expected call of GetLandingZoneOperationRequest
func (mr *MockControlTowerAPIMockRecorder) GetLandingZoneOperationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandingZoneOperationRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).GetLandingZoneOperationRequest), arg0)
}

// GetLandingZoneOperationWithContext mocks base method
func (m *MockControlTowerAPI) GetLandingZoneOperationWithContext(arg0 context.Context, arg1 *controltower.GetLandingZoneOperationInput, arg2 ...request.Option) (*controltower.GetLandingZoneOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLandingZoneOperationWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.GetLandingZoneOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandingZoneOperationWithContext indicates an expected call of GetLandingZoneOperationWithContext
func (mr *MockControlTowerAPIMockRecorder) GetLandingZoneOperationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandingZoneOperationWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).GetLandingZoneOperationWithContext), varargs...)
}

// ListBaselines mocks base method
func (m *MockControlTowerAPI) ListBaselines(arg0 *controltower.ListBaselinesInput) (*controltower.ListBaselinesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBaselines", arg0)
	ret0, _ := ret[0].(*controltower.ListBaselinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBaselines indicates an expected call of ListBaselines
func (mr *MockControlTowerAPIMockRecorder) ListBaselines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBaselines", reflect.TypeOf((*MockControlTowerAPI)(nil).ListBaselines), arg0)
}

// ListBaselinesPages mocks base method
func (m *MockControlTowerAPI) ListBaselinesPages(arg0 *controltower.ListBaselinesInput, arg1 func(*controltower.ListBaselinesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBaselinesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBaselinesPages indicates an expected call of ListBaselinesPages
func (mr *MockControlTowerAPIMockRecorder) ListBaselinesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBaselinesPages", reflect.TypeOf((*MockControlTowerAPI)(nil).ListBaselinesPages), arg0, arg1)
}

// ListBaselinesPagesWithContext mocks base method
func (m *MockControlTowerAPI) ListBaselinesPagesWithContext(arg0 context.Context, arg1 *controltower.ListBaselinesInput, arg2 func(*controltower.ListBaselinesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBaselinesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBaselinesPagesWithContext indicates an expected call of ListBaselinesPagesWithContext
func (mr *MockControlTowerAPIMockRecorder) ListBaselinesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBaselinesPagesWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListBaselinesPagesWithContext), varargs...)
}

// ListBaselinesRequest mocks base method
func (m *MockControlTowerAPI) ListBaselinesRequest(arg0 *controltower.ListBaselinesInput) (*request.Request, *controltower.ListBaselinesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBaselinesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.ListBaselinesOutput)
	return ret0, ret1
}

// ListBaselinesRequest indicates an expected call of ListBaselinesRequest
func (mr *MockControlTowerAPIMockRecorder) ListBaselinesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBaselinesRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).ListBaselinesRequest), arg0)
}

// ListBaselinesWithContext mocks base method
func (m *MockControlTowerAPI) ListBaselinesWithContext(arg0 context.Context, arg1 *controltower.ListBaselinesInput, arg2 ...request.Option) (*controltower.ListBaselinesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBaselinesWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.ListBaselinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBaselinesWithContext indicates an expected call of ListBaselinesWithContext
func (mr *MockControlTowerAPIMockRecorder) ListBaselinesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBaselinesWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListBaselinesWithContext), varargs...)
}

// ListControlOperations mocks base method
func (m *MockControlTowerAPI) ListControlOperations(arg0 *controltower.ListControlOperationsInput) (*controltower.ListControlOperationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlOperations", arg0)
	ret0, _ := ret[0].(*controltower.ListControlOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlOperations indicates an expected call of ListControlOperations
func (mr *MockControlTowerAPIMockRecorder) ListControlOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlOperations", reflect.TypeOf((*MockControlTowerAPI)(nil).ListControlOperations), arg0)
}

// ListControlOperationsPages mocks base method
func (m *MockControlTowerAPI) ListControlOperationsPages(arg0 *controltower.ListControlOperationsInput, arg1 func(*controltower.ListControlOperationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlOperationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlOperationsPages indicates an expected call of ListControlOperationsPages
func (mr *MockControlTowerAPIMockRecorder) ListControlOperationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlOperationsPages", reflect.TypeOf((*MockControlTowerAPI)(nil).ListControlOperationsPages), arg0, arg1)
}

// ListControlOperationsPagesWithContext mocks base method
func (m *MockControlTowerAPI) ListControlOperationsPagesWithContext(arg0 context.Context, arg1 *controltower.ListControlOperationsInput, arg2 func(*controltower.ListControlOperationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlOperationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlOperationsPagesWithContext indicates an expected call of ListControlOperationsPagesWithContext
func (mr *MockControlTowerAPIMockRecorder) ListControlOperationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlOperationsPagesWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListControlOperationsPagesWithContext), varargs...)
}

// ListControlOperationsRequest mocks base method
func (m *MockControlTowerAPI) ListControlOperationsRequest(arg0 *controltower.ListControlOperationsInput) (*request.Request, *controltower.ListControlOperationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlOperationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.ListControlOperationsOutput)
	return ret0, ret1
}

// ListControlOperationsRequest indicates an expected call of ListControlOperationsRequest
func (mr *MockControlTowerAPIMockRecorder) ListControlOperationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlOperationsRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).ListControlOperationsRequest), arg0)
}

// ListControlOperationsWithContext mocks base method
func (m *MockControlTowerAPI) ListControlOperationsWithContext(arg0 context.Context, arg1 *controltower.ListControlOperationsInput, arg2 ...request.Option) (*controltower.ListControlOperationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlOperationsWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.ListControlOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlOperationsWithContext indicates an expected call of ListControlOperationsWithContext
func (mr *MockControlTowerAPIMockRecorder) ListControlOperationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlOperationsWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListControlOperationsWithContext), varargs...)
}

// ListEnabledBaselines mocks base method
func (m *MockControlTowerAPI) ListEnabledBaselines(arg0 *controltower.ListEnabledBaselinesInput) (*controltower.ListEnabledBaselinesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledBaselines", arg0)
	ret0, _ := ret[0].(*controltower.ListEnabledBaselinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnabledBaselines indicates an expected call of ListEnabledBaselines
func (mr *MockControlTowerAPIMockRecorder) ListEnabledBaselines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledBaselines", reflect.TypeOf((*MockControlTowerAPI)(nil).ListEnabledBaselines), arg0)
}

// ListEnabledBaselinesPages mocks base method
func (m *MockControlTowerAPI) ListEnabledBaselinesPages(arg0 *controltower.ListEnabledBaselinesInput, arg1 func(*controltower.ListEnabledBaselinesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledBaselinesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnabledBaselinesPages indicates an expected call of ListEnabledBaselinesPages
func (mr *MockControlTowerAPIMockRecorder) ListEnabledBaselinesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledBaselinesPages", reflect.TypeOf((*MockControlTowerAPI)(nil).ListEnabledBaselinesPages), arg0, arg1)
}

// ListEnabledBaselinesPagesWithContext mocks base method
func (m *MockControlTowerAPI) ListEnabledBaselinesPagesWithContext(arg0 context.Context, arg1 *controltower.ListEnabledBaselinesInput, arg2 func(*controltower.ListEnabledBaselinesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnabledBaselinesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnabledBaselinesPagesWithContext indicates an expected call of ListEnabledBaselinesPagesWithContext
func (mr *MockControlTowerAPIMockRecorder) ListEnabledBaselinesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledBaselinesPagesWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListEnabledBaselinesPagesWithContext), varargs...)
}

// ListEnabledBaselinesRequest mocks base method
func (m *MockControlTowerAPI) ListEnabledBaselinesRequest(arg0 *controltower.ListEnabledBaselinesInput) (*request.Request, *controltower.ListEnabledBaselinesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledBaselinesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.ListEnabledBaselinesOutput)
	return ret0, ret1
}

// ListEnabledBaselinesRequest indicates an expected call of ListEnabledBaselinesRequest
func (mr *MockControlTowerAPIMockRecorder) ListEnabledBaselinesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledBaselinesRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).ListEnabledBaselinesRequest), arg0)
}

// ListEnabledBaselinesWithContext mocks base method
func (m *MockControlTowerAPI) ListEnabledBaselinesWithContext(arg0 context.Context, arg1 *controltower.ListEnabledBaselinesInput, arg2 ...request.Option) (*controltower.ListEnabledBaselinesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnabledBaselinesWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.ListEnabledBaselinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnabledBaselinesWithContext indicates an expected call of ListEnabledBaselinesWithContext
func (mr *MockControlTowerAPIMockRecorder) ListEnabledBaselinesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledBaselinesWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListEnabledBaselinesWithContext), varargs...)
}

// ListEnabledControls mocks base method
func (m *MockControlTowerAPI) ListEnabledControls(arg0 *controltower.ListEnabledControlsInput) (*controltower.ListEnabledControlsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledControls", arg0)
	ret0, _ := ret[0].(*controltower.ListEnabledControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnabledControls indicates an expected call of ListEnabledControls
func (mr *MockControlTowerAPIMockRecorder) ListEnabledControls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledControls", reflect.TypeOf((*MockControlTowerAPI)(nil).ListEnabledControls), arg0)
}

// ListEnabledControlsPages mocks base method
func (m *MockControlTowerAPI) ListEnabledControlsPages(arg0 *controltower.ListEnabledControlsInput, arg1 func(*controltower.ListEnabledControlsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledControlsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnabledControlsPages indicates an expected call of ListEnabledControlsPages
func (mr *MockControlTowerAPIMockRecorder) ListEnabledControlsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledControlsPages", reflect.TypeOf((*MockControlTowerAPI)(nil).ListEnabledControlsPages), arg0, arg1)
}

// ListEnabledControlsPagesWithContext mocks base method
func (m *MockControlTowerAPI) ListEnabledControlsPagesWithContext(arg0 context.Context, arg1 *controltower.ListEnabledControlsInput, arg2 func(*controltower.ListEnabledControlsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnabledControlsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnabledControlsPagesWithContext indicates an expected call of ListEnabledControlsPagesWithContext
func (mr *MockControlTowerAPIMockRecorder) ListEnabledControlsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledControlsPagesWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListEnabledControlsPagesWithContext), varargs...)
}

// ListEnabledControlsRequest mocks base method
func (m *MockControlTowerAPI) ListEnabledControlsRequest(arg0 *controltower.ListEnabledControlsInput) (*request.Request, *controltower.ListEnabledControlsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledControlsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.ListEnabledControlsOutput)
	return ret0, ret1
}

// ListEnabledControlsRequest indicates an expected call of ListEnabledControlsRequest
func (mr *MockControlTowerAPIMockRecorder) ListEnabledControlsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledControlsRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).ListEnabledControlsRequest), arg0)
}

// ListEnabledControlsWithContext mocks base method
func (m *MockControlTowerAPI) ListEnabledControlsWithContext(arg0 context.Context, arg1 *controltower.ListEnabledControlsInput, arg2 ...request.Option) (*controltower.ListEnabledControlsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnabledControlsWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.ListEnabledControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnabledControlsWithContext indicates an expected call of ListEnabledControlsWithContext
func (mr *MockControlTowerAPIMockRecorder) ListEnabledControlsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledControlsWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListEnabledControlsWithContext), varargs...)
}

// ListLandingZones mocks base method
func (m *MockControlTowerAPI) ListLandingZones(arg0 *controltower.ListLandingZonesInput) (*controltower.ListLandingZonesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLandingZones", arg0)
	ret0, _ := ret[0].(*controltower.ListLandingZonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLandingZones indicates an expected call of ListLandingZones
func (mr *MockControlTowerAPIMockRecorder) ListLandingZones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLandingZones", reflect.TypeOf((*MockControlTowerAPI)(nil).ListLandingZones), arg0)
}

// ListLandingZonesPages mocks base method
func (m *MockControlTowerAPI) ListLandingZonesPages(arg0 *controltower.ListLandingZonesInput, arg1 func(*controltower.ListLandingZonesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLandingZonesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLandingZonesPages indicates an expected call of ListLandingZonesPages
func (mr *MockControlTowerAPIMockRecorder) ListLandingZonesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLandingZonesPages", reflect.TypeOf((*MockControlTowerAPI)(nil).ListLandingZonesPages), arg0, arg1)
}

// ListLandingZonesPagesWithContext mocks base method
func (m *MockControlTowerAPI) ListLandingZonesPagesWithContext(arg0 context.Context, arg1 *controltower.ListLandingZonesInput, arg2 func(*controltower.ListLandingZonesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLandingZonesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLandingZonesPagesWithContext indicates an expected call of ListLandingZonesPagesWithContext
func (mr *MockControlTowerAPIMockRecorder) ListLandingZonesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLandingZonesPagesWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListLandingZonesPagesWithContext), varargs...)
}

// ListLandingZonesRequest mocks base method
func (m *MockControlTowerAPI) ListLandingZonesRequest(arg0 *controltower.ListLandingZonesInput) (*request.Request, *controltower.ListLandingZonesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLandingZonesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.ListLandingZonesOutput)
	return ret0, ret1
}

// ListLandingZonesRequest indicates an expected call of ListLandingZonesRequest
func (mr *MockControlTowerAPIMockRecorder) ListLandingZonesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLandingZonesRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).ListLandingZonesRequest), arg0)
}

// ListLandingZonesWithContext mocks base method
func (m *MockControlTowerAPI) ListLandingZonesWithContext(arg0 context.Context, arg1 *controltower.ListLandingZonesInput, arg2 ...request.Option) (*controltower.ListLandingZonesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLandingZonesWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.ListLandingZonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLandingZonesWithContext indicates an expected call of ListLandingZonesWithContext
func (mr *MockControlTowerAPIMockRecorder) ListLandingZonesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLandingZonesWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListLandingZonesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockControlTowerAPI) ListTagsForResource(arg0 *controltower.ListTagsForResourceInput) (*controltower.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*controltower.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockControlTowerAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockControlTowerAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockControlTowerAPI) ListTagsForResourceRequest(arg0 *controltower.ListTagsForResourceInput) (*request.Request, *controltower.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockControlTowerAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockControlTowerAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *controltower.ListTagsForResourceInput, arg2 ...request.Option) (*controltower.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockControlTowerAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ResetEnabledBaseline mocks base method
func (m *MockControlTowerAPI) ResetEnabledBaseline(arg0 *controltower.ResetEnabledBaselineInput) (*controltower.ResetEnabledBaselineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetEnabledBaseline", arg0)
	ret0, _ := ret[0].(*controltower.ResetEnabledBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetEnabledBaseline indicates an expected call of ResetEnabledBaseline
func (mr *MockControlTowerAPIMockRecorder) ResetEnabledBaseline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetEnabledBaseline", reflect.TypeOf((*MockControlTowerAPI)(nil).ResetEnabledBaseline), arg0)
}

// ResetEnabledBaselineRequest mocks base method
func (m *MockControlTowerAPI) ResetEnabledBaselineRequest(arg0 *controltower.ResetEnabledBaselineInput) (*request.Request, *controltower.ResetEnabledBaselineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetEnabledBaselineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.ResetEnabledBaselineOutput)
	return ret0, ret1
}

// ResetEnabledBaselineRequest indicates an expected call of ResetEnabledBaselineRequest
func (mr *MockControlTowerAPIMockRecorder) ResetEnabledBaselineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetEnabledBaselineRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).ResetEnabledBaselineRequest), arg0)
}

// ResetEnabledBaselineWithContext mocks base method
func (m *MockControlTowerAPI) ResetEnabledBaselineWithContext(arg0 context.Context, arg1 *controltower.ResetEnabledBaselineInput, arg2 ...request.Option) (*controltower.ResetEnabledBaselineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetEnabledBaselineWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.ResetEnabledBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetEnabledBaselineWithContext indicates an expected call of ResetEnabledBaselineWithContext
func (mr *MockControlTowerAPIMockRecorder) ResetEnabledBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetEnabledBaselineWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ResetEnabledBaselineWithContext), varargs...)
}

// ResetLandingZone mocks base method
func (m *MockControlTowerAPI) ResetLandingZone(arg0 *controltower.ResetLandingZoneInput) (*controltower.ResetLandingZoneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLandingZone", arg0)
	ret0, _ := ret[0].(*controltower.ResetLandingZoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetLandingZone indicates an expected call of ResetLandingZone
func (mr *MockControlTowerAPIMockRecorder) ResetLandingZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLandingZone", reflect.TypeOf((*MockControlTowerAPI)(nil).ResetLandingZone), arg0)
}

// ResetLandingZoneRequest mocks base method
func (m *MockControlTowerAPI) ResetLandingZoneRequest(arg0 *controltower.ResetLandingZoneInput) (*request.Request, *controltower.ResetLandingZoneOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLandingZoneRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.ResetLandingZoneOutput)
	return ret0, ret1
}

// ResetLandingZoneRequest indicates an expected call of ResetLandingZoneRequest
func (mr *MockControlTowerAPIMockRecorder) ResetLandingZoneRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLandingZoneRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).ResetLandingZoneRequest), arg0)
}

// ResetLandingZoneWithContext mocks base method
func (m *MockControlTowerAPI) ResetLandingZoneWithContext(arg0 context.Context, arg1 *controltower.ResetLandingZoneInput, arg2 ...request.Option) (*controltower.ResetLandingZoneOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetLandingZoneWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.ResetLandingZoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetLandingZoneWithContext indicates an expected call of ResetLandingZoneWithContext
func (mr *MockControlTowerAPIMockRecorder) ResetLandingZoneWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLandingZoneWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).ResetLandingZoneWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockControlTowerAPI) TagResource(arg0 *controltower.TagResourceInput) (*controltower.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*controltower.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockControlTowerAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockControlTowerAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockControlTowerAPI) TagResourceRequest(arg0 *controltower.TagResourceInput) (*request.Request, *controltower.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockControlTowerAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockControlTowerAPI) TagResourceWithContext(arg0 context.Context, arg1 *controltower.TagResourceInput, arg2 ...request.Option) (*controltower.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockControlTowerAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockControlTowerAPI) UntagResource(arg0 *controltower.UntagResourceInput) (*controltower.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*controltower.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockControlTowerAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockControlTowerAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockControlTowerAPI) UntagResourceRequest(arg0 *controltower.UntagResourceInput) (*request.Request, *controltower.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockControlTowerAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockControlTowerAPI) UntagResourceWithContext(arg0 context.Context, arg1 *controltower.UntagResourceInput, arg2 ...request.Option) (*controltower.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockControlTowerAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateEnabledBaseline mocks base method
func (m *MockControlTowerAPI) UpdateEnabledBaseline(arg0 *controltower.UpdateEnabledBaselineInput) (*controltower.UpdateEnabledBaselineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnabledBaseline", arg0)
	ret0, _ := ret[0].(*controltower.UpdateEnabledBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnabledBaseline indicates an expected call of UpdateEnabledBaseline
func (mr *MockControlTowerAPIMockRecorder) UpdateEnabledBaseline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnabledBaseline", reflect.TypeOf((*MockControlTowerAPI)(nil).UpdateEnabledBaseline), arg0)
}

// UpdateEnabledBaselineRequest mocks base method
func (m *MockControlTowerAPI) UpdateEnabledBaselineRequest(arg0 *controltower.UpdateEnabledBaselineInput) (*request.Request, *controltower.UpdateEnabledBaselineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnabledBaselineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controltower.UpdateEnabledBaselineOutput)
	return ret0, ret1
}

// UpdateEnabledBaselineRequest indicates an expected call of UpdateEnabledBaselineRequest
func (mr *MockControlTowerAPIMockRecorder) UpdateEnabledBaselineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnabledBaselineRequest", reflect.TypeOf((*MockControlTowerAPI)(nil).UpdateEnabledBaselineRequest), arg0)
}

// UpdateEnabledBaselineWithContext mocks base method
func (m *MockControlTowerAPI) UpdateEnabledBaselineWithContext(arg0 context.Context, arg1 *controltower.UpdateEnabledBaselineInput, arg2 ...request.Option) (*controltower.UpdateEnabledBaselineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnabledBaselineWithContext", varargs...)
	ret0, _ := ret[0].(*controltower.UpdateEnabledBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnabledBaselineWithContext indicates an expected call of UpdateEnabledBaselineWithContext
func (mr *MockControlTowerAPIMockRecorder) UpdateEnabledBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnabledBaselineWithContext", reflect.TypeOf((*MockControlTowerAPI)(nil).UpdateEnabledBaselineWithContext), varargs...)
}
