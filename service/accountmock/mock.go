// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/account/accountiface (interfaces: AccountAPI)

// Package accountmock is a generated GoMock package.
package accountmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	account "github.com/aws/aws-sdk-go/service/account"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountAPI is a mock of AccountAPI interface
type MockAccountAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAPIMockRecorder
}

// MockAccountAPIMockRecorder is the mock recorder for MockAccountAPI
type MockAccountAPIMockRecorder struct {
	mock *MockAccountAPI
}

// NewMockAccountAPI creates a new mock instance
func NewMockAccountAPI(ctrl *gomock.Controller) *MockAccountAPI {
	mock := &MockAccountAPI{ctrl: ctrl}
	mock.recorder = &MockAccountAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountAPI) EXPECT() *MockAccountAPIMockRecorder {
	return m.recorder
}

// DeleteAlternateContact mocks base method
func (m *MockAccountAPI) DeleteAlternateContact(arg0 *account.DeleteAlternateContactInput) (*account.DeleteAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlternateContact", arg0)
	ret0, _ := ret[0].(*account.DeleteAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlternateContact indicates an expected call of DeleteAlternateContact
func (mr *MockAccountAPIMockRecorder) DeleteAlternateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlternateContact", reflect.TypeOf((*MockAccountAPI)(nil).DeleteAlternateContact), arg0)
}

// DeleteAlternateContactRequest mocks base method
func (m *MockAccountAPI) DeleteAlternateContactRequest(arg0 *account.DeleteAlternateContactInput) (*request.Request, *account.DeleteAlternateContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlternateContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.DeleteAlternateContactOutput)
	return ret0, ret1
}

// DeleteAlternateContactRequest indicates an expected call of DeleteAlternateContactRequest
func (mr *MockAccountAPIMockRecorder) DeleteAlternateContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlternateContactRequest", reflect.TypeOf((*MockAccountAPI)(nil).DeleteAlternateContactRequest), arg0)
}

// DeleteAlternateContactWithContext mocks base method
func (m *MockAccountAPI) DeleteAlternateContactWithContext(arg0 context.Context, arg1 *account.DeleteAlternateContactInput, arg2 ...request.Option) (*account.DeleteAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAlternateContactWithContext", varargs...)
	ret0, _ := ret[0].(*account.DeleteAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlternateContactWithContext indicates an expected call of DeleteAlternateContactWithContext
func (mr *MockAccountAPIMockRecorder) DeleteAlternateContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlternateContactWithContext", reflect.TypeOf((*MockAccountAPI)(nil).DeleteAlternateContactWithContext), varargs...)
}

// DisableRegion mocks base method
func (m *MockAccountAPI) DisableRegion(arg0 *account.DisableRegionInput) (*account.DisableRegionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRegion", arg0)
	ret0, _ := ret[0].(*account.DisableRegionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableRegion indicates an expected call of DisableRegion
func (mr *MockAccountAPIMockRecorder) DisableRegion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRegion", reflect.TypeOf((*MockAccountAPI)(nil).DisableRegion), arg0)
}

// DisableRegionRequest mocks base method
func (m *MockAccountAPI) DisableRegionRequest(arg0 *account.DisableRegionInput) (*request.Request, *account.DisableRegionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRegionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.DisableRegionOutput)
	return ret0, ret1
}

// DisableRegionRequest indicates an expected call of DisableRegionRequest
func (mr *MockAccountAPIMockRecorder) DisableRegionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRegionRequest", reflect.TypeOf((*MockAccountAPI)(nil).DisableRegionRequest), arg0)
}

// DisableRegionWithContext mocks base method
func (m *MockAccountAPI) DisableRegionWithContext(arg0 context.Context, arg1 *account.DisableRegionInput, arg2 ...request.Option) (*account.DisableRegionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableRegionWithContext", varargs...)
	ret0, _ := ret[0].(*account.DisableRegionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableRegionWithContext indicates an expected call of DisableRegionWithContext
func (mr *MockAccountAPIMockRecorder) DisableRegionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRegionWithContext", reflect.TypeOf((*MockAccountAPI)(nil).DisableRegionWithContext), varargs...)
}

// EnableRegion mocks base method
func (m *MockAccountAPI) EnableRegion(arg0 *account.EnableRegionInput) (*account.EnableRegionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRegion", arg0)
	ret0, _ := ret[0].(*account.EnableRegionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRegion indicates an expected call of EnableRegion
func (mr *MockAccountAPIMockRecorder) EnableRegion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRegion", reflect.TypeOf((*MockAccountAPI)(nil).EnableRegion), arg0)
}

// EnableRegionRequest mocks base method
func (m *MockAccountAPI) EnableRegionRequest(arg0 *account.EnableRegionInput) (*request.Request, *account.EnableRegionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRegionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.EnableRegionOutput)
	return ret0, ret1
}

// EnableRegionRequest indicates an expected call of EnableRegionRequest
func (mr *MockAccountAPIMockRecorder) EnableRegionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRegionRequest", reflect.TypeOf((*MockAccountAPI)(nil).EnableRegionRequest), arg0)
}

// EnableRegionWithContext mocks base method
func (m *MockAccountAPI) EnableRegionWithContext(arg0 context.Context, arg1 *account.EnableRegionInput, arg2 ...request.Option) (*account.EnableRegionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableRegionWithContext", varargs...)
	ret0, _ := ret[0].(*account.EnableRegionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRegionWithContext indicates an expected call of EnableRegionWithContext
func (mr *MockAccountAPIMockRecorder) EnableRegionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRegionWithContext", reflect.TypeOf((*MockAccountAPI)(nil).EnableRegionWithContext), varargs...)
}

// GetAlternateContact mocks base method
func (m *MockAccountAPI) GetAlternateContact(arg0 *account.GetAlternateContactInput) (*account.GetAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlternateContact", arg0)
	ret0, _ := ret[0].(*account.GetAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlternateContact indicates an expected call of GetAlternateContact
func (mr *MockAccountAPIMockRecorder) GetAlternateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlternateContact", reflect.TypeOf((*MockAccountAPI)(nil).GetAlternateContact), arg0)
}

// GetAlternateContactRequest mocks base method
func (m *MockAccountAPI) GetAlternateContactRequest(arg0 *account.GetAlternateContactInput) (*request.Request, *account.GetAlternateContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlternateContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.GetAlternateContactOutput)
	return ret0, ret1
}

// GetAlternateContactRequest indicates an expected call of GetAlternateContactRequest
func (mr *MockAccountAPIMockRecorder) GetAlternateContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlternateContactRequest", reflect.TypeOf((*MockAccountAPI)(nil).GetAlternateContactRequest), arg0)
}

// GetAlternateContactWithContext mocks base method
func (m *MockAccountAPI) GetAlternateContactWithContext(arg0 context.Context, arg1 *account.GetAlternateContactInput, arg2 ...request.Option) (*account.GetAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlternateContactWithContext", varargs...)
	ret0, _ := ret[0].(*account.GetAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlternateContactWithContext indicates an expected call of GetAlternateContactWithContext
func (mr *MockAccountAPIMockRecorder) GetAlternateContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlternateContactWithContext", reflect.TypeOf((*MockAccountAPI)(nil).GetAlternateContactWithContext), varargs...)
}

// GetContactInformation mocks base method
func (m *MockAccountAPI) GetContactInformation(arg0 *account.GetContactInformationInput) (*account.GetContactInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactInformation", arg0)
	ret0, _ := ret[0].(*account.GetContactInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactInformation indicates an expected call of GetContactInformation
func (mr *MockAccountAPIMockRecorder) GetContactInformation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactInformation", reflect.TypeOf((*MockAccountAPI)(nil).GetContactInformation), arg0)
}

// GetContactInformationRequest mocks base method
func (m *MockAccountAPI) GetContactInformationRequest(arg0 *account.GetContactInformationInput) (*request.Request, *account.GetContactInformationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactInformationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.GetContactInformationOutput)
	return ret0, ret1
}

// GetContactInformationRequest indicates an expected call of GetContactInformationRequest
func (mr *MockAccountAPIMockRecorder) GetContactInformationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactInformationRequest", reflect.TypeOf((*MockAccountAPI)(nil).GetContactInformationRequest), arg0)
}

// GetContactInformationWithContext mocks base method
func (m *MockAccountAPI) GetContactInformationWithContext(arg0 context.Context, arg1 *account.GetContactInformationInput, arg2 ...request.Option) (*account.GetContactInformationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContactInformationWithContext", varargs...)
	ret0, _ := ret[0].(*account.GetContactInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactInformationWithContext indicates an expected call of GetContactInformationWithContext
func (mr *MockAccountAPIMockRecorder) GetContactInformationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactInformationWithContext", reflect.TypeOf((*MockAccountAPI)(nil).GetContactInformationWithContext), varargs...)
}

// GetRegionOptStatus mocks base method
func (m *MockAccountAPI) GetRegionOptStatus(arg0 *account.GetRegionOptStatusInput) (*account.GetRegionOptStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionOptStatus", arg0)
	ret0, _ := ret[0].(*account.GetRegionOptStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionOptStatus indicates an expected call of GetRegionOptStatus
func (mr *MockAccountAPIMockRecorder) GetRegionOptStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionOptStatus", reflect.TypeOf((*MockAccountAPI)(nil).GetRegionOptStatus), arg0)
}

// GetRegionOptStatusRequest mocks base method
func (m *MockAccountAPI) GetRegionOptStatusRequest(arg0 *account.GetRegionOptStatusInput) (*request.Request, *account.GetRegionOptStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionOptStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.GetRegionOptStatusOutput)
	return ret0, ret1
}

// GetRegionOptStatusRequest indicates an expected call of GetRegionOptStatusRequest
func (mr *MockAccountAPIMockRecorder) GetRegionOptStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionOptStatusRequest", reflect.TypeOf((*MockAccountAPI)(nil).GetRegionOptStatusRequest), arg0)
}

// GetRegionOptStatusWithContext mocks base method
func (m *MockAccountAPI) GetRegionOptStatusWithContext(arg0 context.Context, arg1 *account.GetRegionOptStatusInput, arg2 ...request.Option) (*account.GetRegionOptStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegionOptStatusWithContext", varargs...)
	ret0, _ := ret[0].(*account.GetRegionOptStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionOptStatusWithContext indicates an expected call of GetRegionOptStatusWithContext
func (mr *MockAccountAPIMockRecorder) GetRegionOptStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionOptStatusWithContext", reflect.TypeOf((*MockAccountAPI)(nil).GetRegionOptStatusWithContext), varargs...)
}

// ListRegions mocks base method
func (m *MockAccountAPI) ListRegions(arg0 *account.ListRegionsInput) (*account.ListRegionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", arg0)
	ret0, _ := ret[0].(*account.ListRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegions indicates an expected call of ListRegions
func (mr *MockAccountAPIMockRecorder) ListRegions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockAccountAPI)(nil).ListRegions), arg0)
}

// ListRegionsPages mocks base method
func (m *MockAccountAPI) ListRegionsPages(arg0 *account.ListRegionsInput, arg1 func(*account.ListRegionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegionsPages indicates an expected call of ListRegionsPages
func (mr *MockAccountAPIMockRecorder) ListRegionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionsPages", reflect.TypeOf((*MockAccountAPI)(nil).ListRegionsPages), arg0, arg1)
}

// ListRegionsPagesWithContext mocks base method
func (m *MockAccountAPI) ListRegionsPagesWithContext(arg0 context.Context, arg1 *account.ListRegionsInput, arg2 func(*account.ListRegionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegionsPagesWithContext indicates an expected call of ListRegionsPagesWithContext
func (mr *MockAccountAPIMockRecorder) ListRegionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionsPagesWithContext", reflect.TypeOf((*MockAccountAPI)(nil).ListRegionsPagesWithContext), varargs...)
}

// ListRegionsRequest mocks base method
func (m *MockAccountAPI) ListRegionsRequest(arg0 *account.ListRegionsInput) (*request.Request, *account.ListRegionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.ListRegionsOutput)
	return ret0, ret1
}

// ListRegionsRequest indicates an expected call of ListRegionsRequest
func (mr *MockAccountAPIMockRecorder) ListRegionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionsRequest", reflect.TypeOf((*MockAccountAPI)(nil).ListRegionsRequest), arg0)
}

// ListRegionsWithContext mocks base method
func (m *MockAccountAPI) ListRegionsWithContext(arg0 context.Context, arg1 *account.ListRegionsInput, arg2 ...request.Option) (*account.ListRegionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegionsWithContext", varargs...)
	ret0, _ := ret[0].(*account.ListRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegionsWithContext indicates an expected call of ListRegionsWithContext
func (mr *MockAccountAPIMockRecorder) ListRegionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionsWithContext", reflect.TypeOf((*MockAccountAPI)(nil).ListRegionsWithContext), varargs...)
}

// PutAlternateContact mocks base method
func (m *MockAccountAPI) PutAlternateContact(arg0 *account.PutAlternateContactInput) (*account.PutAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAlternateContact", arg0)
	ret0, _ := ret[0].(*account.PutAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAlternateContact indicates an expected call of PutAlternateContact
func (mr *MockAccountAPIMockRecorder) PutAlternateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAlternateContact", reflect.TypeOf((*MockAccountAPI)(nil).PutAlternateContact), arg0)
}

// PutAlternateContactRequest mocks base method
func (m *MockAccountAPI) PutAlternateContactRequest(arg0 *account.PutAlternateContactInput) (*request.Request, *account.PutAlternateContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAlternateContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.PutAlternateContactOutput)
	return ret0, ret1
}

// PutAlternateContactRequest indicates an expected call of PutAlternateContactRequest
func (mr *MockAccountAPIMockRecorder) PutAlternateContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAlternateContactRequest", reflect.TypeOf((*MockAccountAPI)(nil).PutAlternateContactRequest), arg0)
}

// PutAlternateContactWithContext mocks base method
func (m *MockAccountAPI) PutAlternateContactWithContext(arg0 context.Context, arg1 *account.PutAlternateContactInput, arg2 ...request.Option) (*account.PutAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAlternateContactWithContext", varargs...)
	ret0, _ := ret[0].(*account.PutAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAlternateContactWithContext indicates an expected call of PutAlternateContactWithContext
func (mr *MockAccountAPIMockRecorder) PutAlternateContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAlternateContactWithContext", reflect.TypeOf((*MockAccountAPI)(nil).PutAlternateContactWithContext), varargs...)
}

// PutContactInformation mocks base method
func (m *MockAccountAPI) PutContactInformation(arg0 *account.PutContactInformationInput) (*account.PutContactInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContactInformation", arg0)
	ret0, _ := ret[0].(*account.PutContactInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContactInformation indicates an expected call of PutContactInformation
func (mr *MockAccountAPIMockRecorder) PutContactInformation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContactInformation", reflect.TypeOf((*MockAccountAPI)(nil).PutContactInformation), arg0)
}

// PutContactInformationRequest mocks base method
func (m *MockAccountAPI) PutContactInformationRequest(arg0 *account.PutContactInformationInput) (*request.Request, *account.PutContactInformationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContactInformationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.PutContactInformationOutput)
	return ret0, ret1
}

// PutContactInformationRequest indicates an expected call of PutContactInformationRequest
func (mr *MockAccountAPIMockRecorder) PutContactInformationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContactInformationRequest", reflect.TypeOf((*MockAccountAPI)(nil).PutContactInformationRequest), arg0)
}

// PutContactInformationWithContext mocks base method
func (m *MockAccountAPI) PutContactInformationWithContext(arg0 context.Context, arg1 *account.PutContactInformationInput, arg2 ...request.Option) (*account.PutContactInformationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutContactInformationWithContext", varargs...)
	ret0, _ := ret[0].(*account.PutContactInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContactInformationWithContext indicates an expected call of PutContactInformationWithContext
func (mr *MockAccountAPIMockRecorder) PutContactInformationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContactInformationWithContext", reflect.TypeOf((*MockAccountAPI)(nil).PutContactInformationWithContext), varargs...)
}
