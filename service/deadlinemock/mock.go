// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/deadline/deadlineiface (interfaces: DeadlineAPI)

// Package deadlinemock is a generated GoMock package.
package deadlinemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	deadline "github.com/aws/aws-sdk-go/service/deadline"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDeadlineAPI is a mock of DeadlineAPI interface
type MockDeadlineAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDeadlineAPIMockRecorder
}

// MockDeadlineAPIMockRecorder is the mock recorder for MockDeadlineAPI
type MockDeadlineAPIMockRecorder struct {
	mock *MockDeadlineAPI
}

// NewMockDeadlineAPI creates a new mock instance
func NewMockDeadlineAPI(ctrl *gomock.Controller) *MockDeadlineAPI {
	mock := &MockDeadlineAPI{ctrl: ctrl}
	mock.recorder = &MockDeadlineAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeadlineAPI) EXPECT() *MockDeadlineAPIMockRecorder {
	return m.recorder
}

// AssociateMemberToFarm mocks base method
func (m *MockDeadlineAPI) AssociateMemberToFarm(arg0 *deadline.AssociateMemberToFarmInput) (*deadline.AssociateMemberToFarmOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberToFarm", arg0)
	ret0, _ := ret[0].(*deadline.AssociateMemberToFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberToFarm indicates an expected call of AssociateMemberToFarm
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToFarm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToFarm", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToFarm), arg0)
}

// AssociateMemberToFarmRequest mocks base method
func (m *MockDeadlineAPI) AssociateMemberToFarmRequest(arg0 *deadline.AssociateMemberToFarmInput) (*request.Request, *deadline.AssociateMemberToFarmOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberToFarmRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.AssociateMemberToFarmOutput)
	return ret0, ret1
}

// AssociateMemberToFarmRequest indicates an expected call of AssociateMemberToFarmRequest
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToFarmRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToFarmRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToFarmRequest), arg0)
}

// AssociateMemberToFarmWithContext mocks base method
func (m *MockDeadlineAPI) AssociateMemberToFarmWithContext(arg0 context.Context, arg1 *deadline.AssociateMemberToFarmInput, arg2 ...request.Option) (*deadline.AssociateMemberToFarmOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateMemberToFarmWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.AssociateMemberToFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberToFarmWithContext indicates an expected call of AssociateMemberToFarmWithContext
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToFarmWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToFarmWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToFarmWithContext), varargs...)
}

// AssociateMemberToFleet mocks base method
func (m *MockDeadlineAPI) AssociateMemberToFleet(arg0 *deadline.AssociateMemberToFleetInput) (*deadline.AssociateMemberToFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberToFleet", arg0)
	ret0, _ := ret[0].(*deadline.AssociateMemberToFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberToFleet indicates an expected call of AssociateMemberToFleet
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToFleet", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToFleet), arg0)
}

// AssociateMemberToFleetRequest mocks base method
func (m *MockDeadlineAPI) AssociateMemberToFleetRequest(arg0 *deadline.AssociateMemberToFleetInput) (*request.Request, *deadline.AssociateMemberToFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberToFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.AssociateMemberToFleetOutput)
	return ret0, ret1
}

// AssociateMemberToFleetRequest indicates an expected call of AssociateMemberToFleetRequest
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToFleetRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToFleetRequest), arg0)
}

// AssociateMemberToFleetWithContext mocks base method
func (m *MockDeadlineAPI) AssociateMemberToFleetWithContext(arg0 context.Context, arg1 *deadline.AssociateMemberToFleetInput, arg2 ...request.Option) (*deadline.AssociateMemberToFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateMemberToFleetWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.AssociateMemberToFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberToFleetWithContext indicates an expected call of AssociateMemberToFleetWithContext
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToFleetWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToFleetWithContext), varargs...)
}

// AssociateMemberToJob mocks base method
func (m *MockDeadlineAPI) AssociateMemberToJob(arg0 *deadline.AssociateMemberToJobInput) (*deadline.AssociateMemberToJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberToJob", arg0)
	ret0, _ := ret[0].(*deadline.AssociateMemberToJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberToJob indicates an expected call of AssociateMemberToJob
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToJob", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToJob), arg0)
}

// AssociateMemberToJobRequest mocks base method
func (m *MockDeadlineAPI) AssociateMemberToJobRequest(arg0 *deadline.AssociateMemberToJobInput) (*request.Request, *deadline.AssociateMemberToJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberToJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.AssociateMemberToJobOutput)
	return ret0, ret1
}

// AssociateMemberToJobRequest indicates an expected call of AssociateMemberToJobRequest
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToJobRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToJobRequest), arg0)
}

// AssociateMemberToJobWithContext mocks base method
func (m *MockDeadlineAPI) AssociateMemberToJobWithContext(arg0 context.Context, arg1 *deadline.AssociateMemberToJobInput, arg2 ...request.Option) (*deadline.AssociateMemberToJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateMemberToJobWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.AssociateMemberToJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberToJobWithContext indicates an expected call of AssociateMemberToJobWithContext
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToJobWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToJobWithContext), varargs...)
}

// AssociateMemberToQueue mocks base method
func (m *MockDeadlineAPI) AssociateMemberToQueue(arg0 *deadline.AssociateMemberToQueueInput) (*deadline.AssociateMemberToQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberToQueue", arg0)
	ret0, _ := ret[0].(*deadline.AssociateMemberToQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberToQueue indicates an expected call of AssociateMemberToQueue
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToQueue", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToQueue), arg0)
}

// AssociateMemberToQueueRequest mocks base method
func (m *MockDeadlineAPI) AssociateMemberToQueueRequest(arg0 *deadline.AssociateMemberToQueueInput) (*request.Request, *deadline.AssociateMemberToQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberToQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.AssociateMemberToQueueOutput)
	return ret0, ret1
}

// AssociateMemberToQueueRequest indicates an expected call of AssociateMemberToQueueRequest
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToQueueRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToQueueRequest), arg0)
}

// AssociateMemberToQueueWithContext mocks base method
func (m *MockDeadlineAPI) AssociateMemberToQueueWithContext(arg0 context.Context, arg1 *deadline.AssociateMemberToQueueInput, arg2 ...request.Option) (*deadline.AssociateMemberToQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateMemberToQueueWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.AssociateMemberToQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberToQueueWithContext indicates an expected call of AssociateMemberToQueueWithContext
func (mr *MockDeadlineAPIMockRecorder) AssociateMemberToQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToQueueWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).AssociateMemberToQueueWithContext), varargs...)
}

// AssumeFleetRoleForRead mocks base method
func (m *MockDeadlineAPI) AssumeFleetRoleForRead(arg0 *deadline.AssumeFleetRoleForReadInput) (*deadline.AssumeFleetRoleForReadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeFleetRoleForRead", arg0)
	ret0, _ := ret[0].(*deadline.AssumeFleetRoleForReadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeFleetRoleForRead indicates an expected call of AssumeFleetRoleForRead
func (mr *MockDeadlineAPIMockRecorder) AssumeFleetRoleForRead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeFleetRoleForRead", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeFleetRoleForRead), arg0)
}

// AssumeFleetRoleForReadRequest mocks base method
func (m *MockDeadlineAPI) AssumeFleetRoleForReadRequest(arg0 *deadline.AssumeFleetRoleForReadInput) (*request.Request, *deadline.AssumeFleetRoleForReadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeFleetRoleForReadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.AssumeFleetRoleForReadOutput)
	return ret0, ret1
}

// AssumeFleetRoleForReadRequest indicates an expected call of AssumeFleetRoleForReadRequest
func (mr *MockDeadlineAPIMockRecorder) AssumeFleetRoleForReadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeFleetRoleForReadRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeFleetRoleForReadRequest), arg0)
}

// AssumeFleetRoleForReadWithContext mocks base method
func (m *MockDeadlineAPI) AssumeFleetRoleForReadWithContext(arg0 context.Context, arg1 *deadline.AssumeFleetRoleForReadInput, arg2 ...request.Option) (*deadline.AssumeFleetRoleForReadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssumeFleetRoleForReadWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.AssumeFleetRoleForReadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeFleetRoleForReadWithContext indicates an expected call of AssumeFleetRoleForReadWithContext
func (mr *MockDeadlineAPIMockRecorder) AssumeFleetRoleForReadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeFleetRoleForReadWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeFleetRoleForReadWithContext), varargs...)
}

// AssumeFleetRoleForWorker mocks base method
func (m *MockDeadlineAPI) AssumeFleetRoleForWorker(arg0 *deadline.AssumeFleetRoleForWorkerInput) (*deadline.AssumeFleetRoleForWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeFleetRoleForWorker", arg0)
	ret0, _ := ret[0].(*deadline.AssumeFleetRoleForWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeFleetRoleForWorker indicates an expected call of AssumeFleetRoleForWorker
func (mr *MockDeadlineAPIMockRecorder) AssumeFleetRoleForWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeFleetRoleForWorker", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeFleetRoleForWorker), arg0)
}

// AssumeFleetRoleForWorkerRequest mocks base method
func (m *MockDeadlineAPI) AssumeFleetRoleForWorkerRequest(arg0 *deadline.AssumeFleetRoleForWorkerInput) (*request.Request, *deadline.AssumeFleetRoleForWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeFleetRoleForWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.AssumeFleetRoleForWorkerOutput)
	return ret0, ret1
}

// AssumeFleetRoleForWorkerRequest indicates an expected call of AssumeFleetRoleForWorkerRequest
func (mr *MockDeadlineAPIMockRecorder) AssumeFleetRoleForWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeFleetRoleForWorkerRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeFleetRoleForWorkerRequest), arg0)
}

// AssumeFleetRoleForWorkerWithContext mocks base method
func (m *MockDeadlineAPI) AssumeFleetRoleForWorkerWithContext(arg0 context.Context, arg1 *deadline.AssumeFleetRoleForWorkerInput, arg2 ...request.Option) (*deadline.AssumeFleetRoleForWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssumeFleetRoleForWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.AssumeFleetRoleForWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeFleetRoleForWorkerWithContext indicates an expected call of AssumeFleetRoleForWorkerWithContext
func (mr *MockDeadlineAPIMockRecorder) AssumeFleetRoleForWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeFleetRoleForWorkerWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeFleetRoleForWorkerWithContext), varargs...)
}

// AssumeQueueRoleForRead mocks base method
func (m *MockDeadlineAPI) AssumeQueueRoleForRead(arg0 *deadline.AssumeQueueRoleForReadInput) (*deadline.AssumeQueueRoleForReadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeQueueRoleForRead", arg0)
	ret0, _ := ret[0].(*deadline.AssumeQueueRoleForReadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeQueueRoleForRead indicates an expected call of AssumeQueueRoleForRead
func (mr *MockDeadlineAPIMockRecorder) AssumeQueueRoleForRead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeQueueRoleForRead", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeQueueRoleForRead), arg0)
}

// AssumeQueueRoleForReadRequest mocks base method
func (m *MockDeadlineAPI) AssumeQueueRoleForReadRequest(arg0 *deadline.AssumeQueueRoleForReadInput) (*request.Request, *deadline.AssumeQueueRoleForReadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeQueueRoleForReadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.AssumeQueueRoleForReadOutput)
	return ret0, ret1
}

// AssumeQueueRoleForReadRequest indicates an expected call of AssumeQueueRoleForReadRequest
func (mr *MockDeadlineAPIMockRecorder) AssumeQueueRoleForReadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeQueueRoleForReadRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeQueueRoleForReadRequest), arg0)
}

// AssumeQueueRoleForReadWithContext mocks base method
func (m *MockDeadlineAPI) AssumeQueueRoleForReadWithContext(arg0 context.Context, arg1 *deadline.AssumeQueueRoleForReadInput, arg2 ...request.Option) (*deadline.AssumeQueueRoleForReadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssumeQueueRoleForReadWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.AssumeQueueRoleForReadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeQueueRoleForReadWithContext indicates an expected call of AssumeQueueRoleForReadWithContext
func (mr *MockDeadlineAPIMockRecorder) AssumeQueueRoleForReadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeQueueRoleForReadWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeQueueRoleForReadWithContext), varargs...)
}

// AssumeQueueRoleForUser mocks base method
func (m *MockDeadlineAPI) AssumeQueueRoleForUser(arg0 *deadline.AssumeQueueRoleForUserInput) (*deadline.AssumeQueueRoleForUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeQueueRoleForUser", arg0)
	ret0, _ := ret[0].(*deadline.AssumeQueueRoleForUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeQueueRoleForUser indicates an expected call of AssumeQueueRoleForUser
func (mr *MockDeadlineAPIMockRecorder) AssumeQueueRoleForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeQueueRoleForUser", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeQueueRoleForUser), arg0)
}

// AssumeQueueRoleForUserRequest mocks base method
func (m *MockDeadlineAPI) AssumeQueueRoleForUserRequest(arg0 *deadline.AssumeQueueRoleForUserInput) (*request.Request, *deadline.AssumeQueueRoleForUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeQueueRoleForUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.AssumeQueueRoleForUserOutput)
	return ret0, ret1
}

// AssumeQueueRoleForUserRequest indicates an expected call of AssumeQueueRoleForUserRequest
func (mr *MockDeadlineAPIMockRecorder) AssumeQueueRoleForUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeQueueRoleForUserRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeQueueRoleForUserRequest), arg0)
}

// AssumeQueueRoleForUserWithContext mocks base method
func (m *MockDeadlineAPI) AssumeQueueRoleForUserWithContext(arg0 context.Context, arg1 *deadline.AssumeQueueRoleForUserInput, arg2 ...request.Option) (*deadline.AssumeQueueRoleForUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssumeQueueRoleForUserWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.AssumeQueueRoleForUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeQueueRoleForUserWithContext indicates an expected call of AssumeQueueRoleForUserWithContext
func (mr *MockDeadlineAPIMockRecorder) AssumeQueueRoleForUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeQueueRoleForUserWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeQueueRoleForUserWithContext), varargs...)
}

// AssumeQueueRoleForWorker mocks base method
func (m *MockDeadlineAPI) AssumeQueueRoleForWorker(arg0 *deadline.AssumeQueueRoleForWorkerInput) (*deadline.AssumeQueueRoleForWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeQueueRoleForWorker", arg0)
	ret0, _ := ret[0].(*deadline.AssumeQueueRoleForWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeQueueRoleForWorker indicates an expected call of AssumeQueueRoleForWorker
func (mr *MockDeadlineAPIMockRecorder) AssumeQueueRoleForWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeQueueRoleForWorker", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeQueueRoleForWorker), arg0)
}

// AssumeQueueRoleForWorkerRequest mocks base method
func (m *MockDeadlineAPI) AssumeQueueRoleForWorkerRequest(arg0 *deadline.AssumeQueueRoleForWorkerInput) (*request.Request, *deadline.AssumeQueueRoleForWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeQueueRoleForWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.AssumeQueueRoleForWorkerOutput)
	return ret0, ret1
}

// AssumeQueueRoleForWorkerRequest indicates an expected call of AssumeQueueRoleForWorkerRequest
func (mr *MockDeadlineAPIMockRecorder) AssumeQueueRoleForWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeQueueRoleForWorkerRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeQueueRoleForWorkerRequest), arg0)
}

// AssumeQueueRoleForWorkerWithContext mocks base method
func (m *MockDeadlineAPI) AssumeQueueRoleForWorkerWithContext(arg0 context.Context, arg1 *deadline.AssumeQueueRoleForWorkerInput, arg2 ...request.Option) (*deadline.AssumeQueueRoleForWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssumeQueueRoleForWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.AssumeQueueRoleForWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeQueueRoleForWorkerWithContext indicates an expected call of AssumeQueueRoleForWorkerWithContext
func (mr *MockDeadlineAPIMockRecorder) AssumeQueueRoleForWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeQueueRoleForWorkerWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).AssumeQueueRoleForWorkerWithContext), varargs...)
}

// BatchGetJobEntity mocks base method
func (m *MockDeadlineAPI) BatchGetJobEntity(arg0 *deadline.BatchGetJobEntityInput) (*deadline.BatchGetJobEntityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetJobEntity", arg0)
	ret0, _ := ret[0].(*deadline.BatchGetJobEntityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetJobEntity indicates an expected call of BatchGetJobEntity
func (mr *MockDeadlineAPIMockRecorder) BatchGetJobEntity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetJobEntity", reflect.TypeOf((*MockDeadlineAPI)(nil).BatchGetJobEntity), arg0)
}

// BatchGetJobEntityRequest mocks base method
func (m *MockDeadlineAPI) BatchGetJobEntityRequest(arg0 *deadline.BatchGetJobEntityInput) (*request.Request, *deadline.BatchGetJobEntityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetJobEntityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.BatchGetJobEntityOutput)
	return ret0, ret1
}

// BatchGetJobEntityRequest indicates an expected call of BatchGetJobEntityRequest
func (mr *MockDeadlineAPIMockRecorder) BatchGetJobEntityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetJobEntityRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).BatchGetJobEntityRequest), arg0)
}

// BatchGetJobEntityWithContext mocks base method
func (m *MockDeadlineAPI) BatchGetJobEntityWithContext(arg0 context.Context, arg1 *deadline.BatchGetJobEntityInput, arg2 ...request.Option) (*deadline.BatchGetJobEntityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetJobEntityWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.BatchGetJobEntityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetJobEntityWithContext indicates an expected call of BatchGetJobEntityWithContext
func (mr *MockDeadlineAPIMockRecorder) BatchGetJobEntityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetJobEntityWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).BatchGetJobEntityWithContext), varargs...)
}

// CopyJobTemplate mocks base method
func (m *MockDeadlineAPI) CopyJobTemplate(arg0 *deadline.CopyJobTemplateInput) (*deadline.CopyJobTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyJobTemplate", arg0)
	ret0, _ := ret[0].(*deadline.CopyJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyJobTemplate indicates an expected call of CopyJobTemplate
func (mr *MockDeadlineAPIMockRecorder) CopyJobTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyJobTemplate", reflect.TypeOf((*MockDeadlineAPI)(nil).CopyJobTemplate), arg0)
}

// CopyJobTemplateRequest mocks base method
func (m *MockDeadlineAPI) CopyJobTemplateRequest(arg0 *deadline.CopyJobTemplateInput) (*request.Request, *deadline.CopyJobTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyJobTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CopyJobTemplateOutput)
	return ret0, ret1
}

// CopyJobTemplateRequest indicates an expected call of CopyJobTemplateRequest
func (mr *MockDeadlineAPIMockRecorder) CopyJobTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyJobTemplateRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CopyJobTemplateRequest), arg0)
}

// CopyJobTemplateWithContext mocks base method
func (m *MockDeadlineAPI) CopyJobTemplateWithContext(arg0 context.Context, arg1 *deadline.CopyJobTemplateInput, arg2 ...request.Option) (*deadline.CopyJobTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyJobTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CopyJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyJobTemplateWithContext indicates an expected call of CopyJobTemplateWithContext
func (mr *MockDeadlineAPIMockRecorder) CopyJobTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyJobTemplateWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CopyJobTemplateWithContext), varargs...)
}

// CreateBudget mocks base method
func (m *MockDeadlineAPI) CreateBudget(arg0 *deadline.CreateBudgetInput) (*deadline.CreateBudgetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBudget", arg0)
	ret0, _ := ret[0].(*deadline.CreateBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBudget indicates an expected call of CreateBudget
func (mr *MockDeadlineAPIMockRecorder) CreateBudget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBudget", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateBudget), arg0)
}

// CreateBudgetRequest mocks base method
func (m *MockDeadlineAPI) CreateBudgetRequest(arg0 *deadline.CreateBudgetInput) (*request.Request, *deadline.CreateBudgetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBudgetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateBudgetOutput)
	return ret0, ret1
}

// CreateBudgetRequest indicates an expected call of CreateBudgetRequest
func (mr *MockDeadlineAPIMockRecorder) CreateBudgetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBudgetRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateBudgetRequest), arg0)
}

// CreateBudgetWithContext mocks base method
func (m *MockDeadlineAPI) CreateBudgetWithContext(arg0 context.Context, arg1 *deadline.CreateBudgetInput, arg2 ...request.Option) (*deadline.CreateBudgetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBudgetWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBudgetWithContext indicates an expected call of CreateBudgetWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateBudgetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBudgetWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateBudgetWithContext), varargs...)
}

// CreateFarm mocks base method
func (m *MockDeadlineAPI) CreateFarm(arg0 *deadline.CreateFarmInput) (*deadline.CreateFarmOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFarm", arg0)
	ret0, _ := ret[0].(*deadline.CreateFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFarm indicates an expected call of CreateFarm
func (mr *MockDeadlineAPIMockRecorder) CreateFarm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFarm", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateFarm), arg0)
}

// CreateFarmRequest mocks base method
func (m *MockDeadlineAPI) CreateFarmRequest(arg0 *deadline.CreateFarmInput) (*request.Request, *deadline.CreateFarmOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFarmRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateFarmOutput)
	return ret0, ret1
}

// CreateFarmRequest indicates an expected call of CreateFarmRequest
func (mr *MockDeadlineAPIMockRecorder) CreateFarmRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFarmRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateFarmRequest), arg0)
}

// CreateFarmWithContext mocks base method
func (m *MockDeadlineAPI) CreateFarmWithContext(arg0 context.Context, arg1 *deadline.CreateFarmInput, arg2 ...request.Option) (*deadline.CreateFarmOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFarmWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFarmWithContext indicates an expected call of CreateFarmWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateFarmWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFarmWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateFarmWithContext), varargs...)
}

// CreateFleet mocks base method
func (m *MockDeadlineAPI) CreateFleet(arg0 *deadline.CreateFleetInput) (*deadline.CreateFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleet", arg0)
	ret0, _ := ret[0].(*deadline.CreateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleet indicates an expected call of CreateFleet
func (mr *MockDeadlineAPIMockRecorder) CreateFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleet", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateFleet), arg0)
}

// CreateFleetRequest mocks base method
func (m *MockDeadlineAPI) CreateFleetRequest(arg0 *deadline.CreateFleetInput) (*request.Request, *deadline.CreateFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateFleetOutput)
	return ret0, ret1
}

// CreateFleetRequest indicates an expected call of CreateFleetRequest
func (mr *MockDeadlineAPIMockRecorder) CreateFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleetRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateFleetRequest), arg0)
}

// CreateFleetWithContext mocks base method
func (m *MockDeadlineAPI) CreateFleetWithContext(arg0 context.Context, arg1 *deadline.CreateFleetInput, arg2 ...request.Option) (*deadline.CreateFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFleetWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleetWithContext indicates an expected call of CreateFleetWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleetWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateFleetWithContext), varargs...)
}

// CreateJob mocks base method
func (m *MockDeadlineAPI) CreateJob(arg0 *deadline.CreateJobInput) (*deadline.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0)
	ret0, _ := ret[0].(*deadline.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob
func (mr *MockDeadlineAPIMockRecorder) CreateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateJob), arg0)
}

// CreateJobRequest mocks base method
func (m *MockDeadlineAPI) CreateJobRequest(arg0 *deadline.CreateJobInput) (*request.Request, *deadline.CreateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateJobOutput)
	return ret0, ret1
}

// CreateJobRequest indicates an expected call of CreateJobRequest
func (mr *MockDeadlineAPIMockRecorder) CreateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateJobRequest), arg0)
}

// CreateJobWithContext mocks base method
func (m *MockDeadlineAPI) CreateJobWithContext(arg0 context.Context, arg1 *deadline.CreateJobInput, arg2 ...request.Option) (*deadline.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithContext indicates an expected call of CreateJobWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateJobWithContext), varargs...)
}

// CreateLicenseEndpoint mocks base method
func (m *MockDeadlineAPI) CreateLicenseEndpoint(arg0 *deadline.CreateLicenseEndpointInput) (*deadline.CreateLicenseEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLicenseEndpoint", arg0)
	ret0, _ := ret[0].(*deadline.CreateLicenseEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLicenseEndpoint indicates an expected call of CreateLicenseEndpoint
func (mr *MockDeadlineAPIMockRecorder) CreateLicenseEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLicenseEndpoint", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateLicenseEndpoint), arg0)
}

// CreateLicenseEndpointRequest mocks base method
func (m *MockDeadlineAPI) CreateLicenseEndpointRequest(arg0 *deadline.CreateLicenseEndpointInput) (*request.Request, *deadline.CreateLicenseEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLicenseEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateLicenseEndpointOutput)
	return ret0, ret1
}

// CreateLicenseEndpointRequest indicates an expected call of CreateLicenseEndpointRequest
func (mr *MockDeadlineAPIMockRecorder) CreateLicenseEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLicenseEndpointRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateLicenseEndpointRequest), arg0)
}

// CreateLicenseEndpointWithContext mocks base method
func (m *MockDeadlineAPI) CreateLicenseEndpointWithContext(arg0 context.Context, arg1 *deadline.CreateLicenseEndpointInput, arg2 ...request.Option) (*deadline.CreateLicenseEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLicenseEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateLicenseEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLicenseEndpointWithContext indicates an expected call of CreateLicenseEndpointWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateLicenseEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLicenseEndpointWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateLicenseEndpointWithContext), varargs...)
}

// CreateMonitor mocks base method
func (m *MockDeadlineAPI) CreateMonitor(arg0 *deadline.CreateMonitorInput) (*deadline.CreateMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitor", arg0)
	ret0, _ := ret[0].(*deadline.CreateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitor indicates an expected call of CreateMonitor
func (mr *MockDeadlineAPIMockRecorder) CreateMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitor", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateMonitor), arg0)
}

// CreateMonitorRequest mocks base method
func (m *MockDeadlineAPI) CreateMonitorRequest(arg0 *deadline.CreateMonitorInput) (*request.Request, *deadline.CreateMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateMonitorOutput)
	return ret0, ret1
}

// CreateMonitorRequest indicates an expected call of CreateMonitorRequest
func (mr *MockDeadlineAPIMockRecorder) CreateMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitorRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateMonitorRequest), arg0)
}

// CreateMonitorWithContext mocks base method
func (m *MockDeadlineAPI) CreateMonitorWithContext(arg0 context.Context, arg1 *deadline.CreateMonitorInput, arg2 ...request.Option) (*deadline.CreateMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitorWithContext indicates an expected call of CreateMonitorWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitorWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateMonitorWithContext), varargs...)
}

// CreateQueue mocks base method
func (m *MockDeadlineAPI) CreateQueue(arg0 *deadline.CreateQueueInput) (*deadline.CreateQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueue", arg0)
	ret0, _ := ret[0].(*deadline.CreateQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueue indicates an expected call of CreateQueue
func (mr *MockDeadlineAPIMockRecorder) CreateQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateQueue), arg0)
}

// CreateQueueEnvironment mocks base method
func (m *MockDeadlineAPI) CreateQueueEnvironment(arg0 *deadline.CreateQueueEnvironmentInput) (*deadline.CreateQueueEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueueEnvironment", arg0)
	ret0, _ := ret[0].(*deadline.CreateQueueEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueueEnvironment indicates an expected call of CreateQueueEnvironment
func (mr *MockDeadlineAPIMockRecorder) CreateQueueEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueEnvironment", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateQueueEnvironment), arg0)
}

// CreateQueueEnvironmentRequest mocks base method
func (m *MockDeadlineAPI) CreateQueueEnvironmentRequest(arg0 *deadline.CreateQueueEnvironmentInput) (*request.Request, *deadline.CreateQueueEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueueEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateQueueEnvironmentOutput)
	return ret0, ret1
}

// CreateQueueEnvironmentRequest indicates an expected call of CreateQueueEnvironmentRequest
func (mr *MockDeadlineAPIMockRecorder) CreateQueueEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueEnvironmentRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateQueueEnvironmentRequest), arg0)
}

// CreateQueueEnvironmentWithContext mocks base method
func (m *MockDeadlineAPI) CreateQueueEnvironmentWithContext(arg0 context.Context, arg1 *deadline.CreateQueueEnvironmentInput, arg2 ...request.Option) (*deadline.CreateQueueEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQueueEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateQueueEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueueEnvironmentWithContext indicates an expected call of CreateQueueEnvironmentWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateQueueEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueEnvironmentWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateQueueEnvironmentWithContext), varargs...)
}

// CreateQueueFleetAssociation mocks base method
func (m *MockDeadlineAPI) CreateQueueFleetAssociation(arg0 *deadline.CreateQueueFleetAssociationInput) (*deadline.CreateQueueFleetAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueueFleetAssociation", arg0)
	ret0, _ := ret[0].(*deadline.CreateQueueFleetAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueueFleetAssociation indicates an expected call of CreateQueueFleetAssociation
func (mr *MockDeadlineAPIMockRecorder) CreateQueueFleetAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueFleetAssociation", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateQueueFleetAssociation), arg0)
}

// CreateQueueFleetAssociationRequest mocks base method
func (m *MockDeadlineAPI) CreateQueueFleetAssociationRequest(arg0 *deadline.CreateQueueFleetAssociationInput) (*request.Request, *deadline.CreateQueueFleetAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueueFleetAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateQueueFleetAssociationOutput)
	return ret0, ret1
}

// CreateQueueFleetAssociationRequest indicates an expected call of CreateQueueFleetAssociationRequest
func (mr *MockDeadlineAPIMockRecorder) CreateQueueFleetAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueFleetAssociationRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateQueueFleetAssociationRequest), arg0)
}

// CreateQueueFleetAssociationWithContext mocks base method
func (m *MockDeadlineAPI) CreateQueueFleetAssociationWithContext(arg0 context.Context, arg1 *deadline.CreateQueueFleetAssociationInput, arg2 ...request.Option) (*deadline.CreateQueueFleetAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQueueFleetAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateQueueFleetAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueueFleetAssociationWithContext indicates an expected call of CreateQueueFleetAssociationWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateQueueFleetAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueFleetAssociationWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateQueueFleetAssociationWithContext), varargs...)
}

// CreateQueueRequest mocks base method
func (m *MockDeadlineAPI) CreateQueueRequest(arg0 *deadline.CreateQueueInput) (*request.Request, *deadline.CreateQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateQueueOutput)
	return ret0, ret1
}

// CreateQueueRequest indicates an expected call of CreateQueueRequest
func (mr *MockDeadlineAPIMockRecorder) CreateQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateQueueRequest), arg0)
}

// CreateQueueWithContext mocks base method
func (m *MockDeadlineAPI) CreateQueueWithContext(arg0 context.Context, arg1 *deadline.CreateQueueInput, arg2 ...request.Option) (*deadline.CreateQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQueueWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueueWithContext indicates an expected call of CreateQueueWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateQueueWithContext), varargs...)
}

// CreateStorageProfile mocks base method
func (m *MockDeadlineAPI) CreateStorageProfile(arg0 *deadline.CreateStorageProfileInput) (*deadline.CreateStorageProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorageProfile", arg0)
	ret0, _ := ret[0].(*deadline.CreateStorageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorageProfile indicates an expected call of CreateStorageProfile
func (mr *MockDeadlineAPIMockRecorder) CreateStorageProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageProfile", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateStorageProfile), arg0)
}

// CreateStorageProfileRequest mocks base method
func (m *MockDeadlineAPI) CreateStorageProfileRequest(arg0 *deadline.CreateStorageProfileInput) (*request.Request, *deadline.CreateStorageProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorageProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateStorageProfileOutput)
	return ret0, ret1
}

// CreateStorageProfileRequest indicates an expected call of CreateStorageProfileRequest
func (mr *MockDeadlineAPIMockRecorder) CreateStorageProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageProfileRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateStorageProfileRequest), arg0)
}

// CreateStorageProfileWithContext mocks base method
func (m *MockDeadlineAPI) CreateStorageProfileWithContext(arg0 context.Context, arg1 *deadline.CreateStorageProfileInput, arg2 ...request.Option) (*deadline.CreateStorageProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStorageProfileWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateStorageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorageProfileWithContext indicates an expected call of CreateStorageProfileWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateStorageProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageProfileWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateStorageProfileWithContext), varargs...)
}

// CreateWorker mocks base method
func (m *MockDeadlineAPI) CreateWorker(arg0 *deadline.CreateWorkerInput) (*deadline.CreateWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorker", arg0)
	ret0, _ := ret[0].(*deadline.CreateWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorker indicates an expected call of CreateWorker
func (mr *MockDeadlineAPIMockRecorder) CreateWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorker", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateWorker), arg0)
}

// CreateWorkerRequest mocks base method
func (m *MockDeadlineAPI) CreateWorkerRequest(arg0 *deadline.CreateWorkerInput) (*request.Request, *deadline.CreateWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.CreateWorkerOutput)
	return ret0, ret1
}

// CreateWorkerRequest indicates an expected call of CreateWorkerRequest
func (mr *MockDeadlineAPIMockRecorder) CreateWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateWorkerRequest), arg0)
}

// CreateWorkerWithContext mocks base method
func (m *MockDeadlineAPI) CreateWorkerWithContext(arg0 context.Context, arg1 *deadline.CreateWorkerInput, arg2 ...request.Option) (*deadline.CreateWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.CreateWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerWithContext indicates an expected call of CreateWorkerWithContext
func (mr *MockDeadlineAPIMockRecorder) CreateWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).CreateWorkerWithContext), varargs...)
}

// DeleteBudget mocks base method
func (m *MockDeadlineAPI) DeleteBudget(arg0 *deadline.DeleteBudgetInput) (*deadline.DeleteBudgetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBudget", arg0)
	ret0, _ := ret[0].(*deadline.DeleteBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBudget indicates an expected call of DeleteBudget
func (mr *MockDeadlineAPIMockRecorder) DeleteBudget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBudget", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteBudget), arg0)
}

// DeleteBudgetRequest mocks base method
func (m *MockDeadlineAPI) DeleteBudgetRequest(arg0 *deadline.DeleteBudgetInput) (*request.Request, *deadline.DeleteBudgetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBudgetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteBudgetOutput)
	return ret0, ret1
}

// DeleteBudgetRequest indicates an expected call of DeleteBudgetRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteBudgetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBudgetRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteBudgetRequest), arg0)
}

// DeleteBudgetWithContext mocks base method
func (m *MockDeadlineAPI) DeleteBudgetWithContext(arg0 context.Context, arg1 *deadline.DeleteBudgetInput, arg2 ...request.Option) (*deadline.DeleteBudgetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBudgetWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBudgetWithContext indicates an expected call of DeleteBudgetWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteBudgetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBudgetWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteBudgetWithContext), varargs...)
}

// DeleteFarm mocks base method
func (m *MockDeadlineAPI) DeleteFarm(arg0 *deadline.DeleteFarmInput) (*deadline.DeleteFarmOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFarm", arg0)
	ret0, _ := ret[0].(*deadline.DeleteFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFarm indicates an expected call of DeleteFarm
func (mr *MockDeadlineAPIMockRecorder) DeleteFarm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFarm", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteFarm), arg0)
}

// DeleteFarmRequest mocks base method
func (m *MockDeadlineAPI) DeleteFarmRequest(arg0 *deadline.DeleteFarmInput) (*request.Request, *deadline.DeleteFarmOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFarmRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteFarmOutput)
	return ret0, ret1
}

// DeleteFarmRequest indicates an expected call of DeleteFarmRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteFarmRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFarmRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteFarmRequest), arg0)
}

// DeleteFarmWithContext mocks base method
func (m *MockDeadlineAPI) DeleteFarmWithContext(arg0 context.Context, arg1 *deadline.DeleteFarmInput, arg2 ...request.Option) (*deadline.DeleteFarmOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFarmWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFarmWithContext indicates an expected call of DeleteFarmWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteFarmWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFarmWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteFarmWithContext), varargs...)
}

// DeleteFleet mocks base method
func (m *MockDeadlineAPI) DeleteFleet(arg0 *deadline.DeleteFleetInput) (*deadline.DeleteFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleet", arg0)
	ret0, _ := ret[0].(*deadline.DeleteFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFleet indicates an expected call of DeleteFleet
func (mr *MockDeadlineAPIMockRecorder) DeleteFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleet", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteFleet), arg0)
}

// DeleteFleetRequest mocks base method
func (m *MockDeadlineAPI) DeleteFleetRequest(arg0 *deadline.DeleteFleetInput) (*request.Request, *deadline.DeleteFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteFleetOutput)
	return ret0, ret1
}

// DeleteFleetRequest indicates an expected call of DeleteFleetRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleetRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteFleetRequest), arg0)
}

// DeleteFleetWithContext mocks base method
func (m *MockDeadlineAPI) DeleteFleetWithContext(arg0 context.Context, arg1 *deadline.DeleteFleetInput, arg2 ...request.Option) (*deadline.DeleteFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFleetWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFleetWithContext indicates an expected call of DeleteFleetWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleetWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteFleetWithContext), varargs...)
}

// DeleteLicenseEndpoint mocks base method
func (m *MockDeadlineAPI) DeleteLicenseEndpoint(arg0 *deadline.DeleteLicenseEndpointInput) (*deadline.DeleteLicenseEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLicenseEndpoint", arg0)
	ret0, _ := ret[0].(*deadline.DeleteLicenseEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLicenseEndpoint indicates an expected call of DeleteLicenseEndpoint
func (mr *MockDeadlineAPIMockRecorder) DeleteLicenseEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLicenseEndpoint", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteLicenseEndpoint), arg0)
}

// DeleteLicenseEndpointRequest mocks base method
func (m *MockDeadlineAPI) DeleteLicenseEndpointRequest(arg0 *deadline.DeleteLicenseEndpointInput) (*request.Request, *deadline.DeleteLicenseEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLicenseEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteLicenseEndpointOutput)
	return ret0, ret1
}

// DeleteLicenseEndpointRequest indicates an expected call of DeleteLicenseEndpointRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteLicenseEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLicenseEndpointRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteLicenseEndpointRequest), arg0)
}

// DeleteLicenseEndpointWithContext mocks base method
func (m *MockDeadlineAPI) DeleteLicenseEndpointWithContext(arg0 context.Context, arg1 *deadline.DeleteLicenseEndpointInput, arg2 ...request.Option) (*deadline.DeleteLicenseEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLicenseEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteLicenseEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLicenseEndpointWithContext indicates an expected call of DeleteLicenseEndpointWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteLicenseEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLicenseEndpointWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteLicenseEndpointWithContext), varargs...)
}

// DeleteMeteredProduct mocks base method
func (m *MockDeadlineAPI) DeleteMeteredProduct(arg0 *deadline.DeleteMeteredProductInput) (*deadline.DeleteMeteredProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeteredProduct", arg0)
	ret0, _ := ret[0].(*deadline.DeleteMeteredProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMeteredProduct indicates an expected call of DeleteMeteredProduct
func (mr *MockDeadlineAPIMockRecorder) DeleteMeteredProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeteredProduct", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteMeteredProduct), arg0)
}

// DeleteMeteredProductRequest mocks base method
func (m *MockDeadlineAPI) DeleteMeteredProductRequest(arg0 *deadline.DeleteMeteredProductInput) (*request.Request, *deadline.DeleteMeteredProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeteredProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteMeteredProductOutput)
	return ret0, ret1
}

// DeleteMeteredProductRequest indicates an expected call of DeleteMeteredProductRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteMeteredProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeteredProductRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteMeteredProductRequest), arg0)
}

// DeleteMeteredProductWithContext mocks base method
func (m *MockDeadlineAPI) DeleteMeteredProductWithContext(arg0 context.Context, arg1 *deadline.DeleteMeteredProductInput, arg2 ...request.Option) (*deadline.DeleteMeteredProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeteredProductWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteMeteredProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMeteredProductWithContext indicates an expected call of DeleteMeteredProductWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteMeteredProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeteredProductWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteMeteredProductWithContext), varargs...)
}

// DeleteMonitor mocks base method
func (m *MockDeadlineAPI) DeleteMonitor(arg0 *deadline.DeleteMonitorInput) (*deadline.DeleteMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitor", arg0)
	ret0, _ := ret[0].(*deadline.DeleteMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMonitor indicates an expected call of DeleteMonitor
func (mr *MockDeadlineAPIMockRecorder) DeleteMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitor", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteMonitor), arg0)
}

// DeleteMonitorRequest mocks base method
func (m *MockDeadlineAPI) DeleteMonitorRequest(arg0 *deadline.DeleteMonitorInput) (*request.Request, *deadline.DeleteMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteMonitorOutput)
	return ret0, ret1
}

// DeleteMonitorRequest indicates an expected call of DeleteMonitorRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitorRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteMonitorRequest), arg0)
}

// DeleteMonitorWithContext mocks base method
func (m *MockDeadlineAPI) DeleteMonitorWithContext(arg0 context.Context, arg1 *deadline.DeleteMonitorInput, arg2 ...request.Option) (*deadline.DeleteMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMonitorWithContext indicates an expected call of DeleteMonitorWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitorWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteMonitorWithContext), varargs...)
}

// DeleteQueue mocks base method
func (m *MockDeadlineAPI) DeleteQueue(arg0 *deadline.DeleteQueueInput) (*deadline.DeleteQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueue", arg0)
	ret0, _ := ret[0].(*deadline.DeleteQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueue indicates an expected call of DeleteQueue
func (mr *MockDeadlineAPIMockRecorder) DeleteQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueue", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteQueue), arg0)
}

// DeleteQueueEnvironment mocks base method
func (m *MockDeadlineAPI) DeleteQueueEnvironment(arg0 *deadline.DeleteQueueEnvironmentInput) (*deadline.DeleteQueueEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueueEnvironment", arg0)
	ret0, _ := ret[0].(*deadline.DeleteQueueEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueueEnvironment indicates an expected call of DeleteQueueEnvironment
func (mr *MockDeadlineAPIMockRecorder) DeleteQueueEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueEnvironment", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteQueueEnvironment), arg0)
}

// DeleteQueueEnvironmentRequest mocks base method
func (m *MockDeadlineAPI) DeleteQueueEnvironmentRequest(arg0 *deadline.DeleteQueueEnvironmentInput) (*request.Request, *deadline.DeleteQueueEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueueEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteQueueEnvironmentOutput)
	return ret0, ret1
}

// DeleteQueueEnvironmentRequest indicates an expected call of DeleteQueueEnvironmentRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteQueueEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueEnvironmentRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteQueueEnvironmentRequest), arg0)
}

// DeleteQueueEnvironmentWithContext mocks base method
func (m *MockDeadlineAPI) DeleteQueueEnvironmentWithContext(arg0 context.Context, arg1 *deadline.DeleteQueueEnvironmentInput, arg2 ...request.Option) (*deadline.DeleteQueueEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQueueEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteQueueEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueueEnvironmentWithContext indicates an expected call of DeleteQueueEnvironmentWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteQueueEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueEnvironmentWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteQueueEnvironmentWithContext), varargs...)
}

// DeleteQueueFleetAssociation mocks base method
func (m *MockDeadlineAPI) DeleteQueueFleetAssociation(arg0 *deadline.DeleteQueueFleetAssociationInput) (*deadline.DeleteQueueFleetAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueueFleetAssociation", arg0)
	ret0, _ := ret[0].(*deadline.DeleteQueueFleetAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueueFleetAssociation indicates an expected call of DeleteQueueFleetAssociation
func (mr *MockDeadlineAPIMockRecorder) DeleteQueueFleetAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueFleetAssociation", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteQueueFleetAssociation), arg0)
}

// DeleteQueueFleetAssociationRequest mocks base method
func (m *MockDeadlineAPI) DeleteQueueFleetAssociationRequest(arg0 *deadline.DeleteQueueFleetAssociationInput) (*request.Request, *deadline.DeleteQueueFleetAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueueFleetAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteQueueFleetAssociationOutput)
	return ret0, ret1
}

// DeleteQueueFleetAssociationRequest indicates an expected call of DeleteQueueFleetAssociationRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteQueueFleetAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueFleetAssociationRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteQueueFleetAssociationRequest), arg0)
}

// DeleteQueueFleetAssociationWithContext mocks base method
func (m *MockDeadlineAPI) DeleteQueueFleetAssociationWithContext(arg0 context.Context, arg1 *deadline.DeleteQueueFleetAssociationInput, arg2 ...request.Option) (*deadline.DeleteQueueFleetAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQueueFleetAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteQueueFleetAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueueFleetAssociationWithContext indicates an expected call of DeleteQueueFleetAssociationWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteQueueFleetAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueFleetAssociationWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteQueueFleetAssociationWithContext), varargs...)
}

// DeleteQueueRequest mocks base method
func (m *MockDeadlineAPI) DeleteQueueRequest(arg0 *deadline.DeleteQueueInput) (*request.Request, *deadline.DeleteQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteQueueOutput)
	return ret0, ret1
}

// DeleteQueueRequest indicates an expected call of DeleteQueueRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteQueueRequest), arg0)
}

// DeleteQueueWithContext mocks base method
func (m *MockDeadlineAPI) DeleteQueueWithContext(arg0 context.Context, arg1 *deadline.DeleteQueueInput, arg2 ...request.Option) (*deadline.DeleteQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQueueWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueueWithContext indicates an expected call of DeleteQueueWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteQueueWithContext), varargs...)
}

// DeleteStorageProfile mocks base method
func (m *MockDeadlineAPI) DeleteStorageProfile(arg0 *deadline.DeleteStorageProfileInput) (*deadline.DeleteStorageProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageProfile", arg0)
	ret0, _ := ret[0].(*deadline.DeleteStorageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStorageProfile indicates an expected call of DeleteStorageProfile
func (mr *MockDeadlineAPIMockRecorder) DeleteStorageProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageProfile", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteStorageProfile), arg0)
}

// DeleteStorageProfileRequest mocks base method
func (m *MockDeadlineAPI) DeleteStorageProfileRequest(arg0 *deadline.DeleteStorageProfileInput) (*request.Request, *deadline.DeleteStorageProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteStorageProfileOutput)
	return ret0, ret1
}

// DeleteStorageProfileRequest indicates an expected call of DeleteStorageProfileRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteStorageProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageProfileRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteStorageProfileRequest), arg0)
}

// DeleteStorageProfileWithContext mocks base method
func (m *MockDeadlineAPI) DeleteStorageProfileWithContext(arg0 context.Context, arg1 *deadline.DeleteStorageProfileInput, arg2 ...request.Option) (*deadline.DeleteStorageProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStorageProfileWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteStorageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStorageProfileWithContext indicates an expected call of DeleteStorageProfileWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteStorageProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageProfileWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteStorageProfileWithContext), varargs...)
}

// DeleteWorker mocks base method
func (m *MockDeadlineAPI) DeleteWorker(arg0 *deadline.DeleteWorkerInput) (*deadline.DeleteWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorker", arg0)
	ret0, _ := ret[0].(*deadline.DeleteWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorker indicates an expected call of DeleteWorker
func (mr *MockDeadlineAPIMockRecorder) DeleteWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorker", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteWorker), arg0)
}

// DeleteWorkerRequest mocks base method
func (m *MockDeadlineAPI) DeleteWorkerRequest(arg0 *deadline.DeleteWorkerInput) (*request.Request, *deadline.DeleteWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DeleteWorkerOutput)
	return ret0, ret1
}

// DeleteWorkerRequest indicates an expected call of DeleteWorkerRequest
func (mr *MockDeadlineAPIMockRecorder) DeleteWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteWorkerRequest), arg0)
}

// DeleteWorkerWithContext mocks base method
func (m *MockDeadlineAPI) DeleteWorkerWithContext(arg0 context.Context, arg1 *deadline.DeleteWorkerInput, arg2 ...request.Option) (*deadline.DeleteWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DeleteWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkerWithContext indicates an expected call of DeleteWorkerWithContext
func (mr *MockDeadlineAPIMockRecorder) DeleteWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DeleteWorkerWithContext), varargs...)
}

// DisassociateMemberFromFarm mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromFarm(arg0 *deadline.DisassociateMemberFromFarmInput) (*deadline.DisassociateMemberFromFarmOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberFromFarm", arg0)
	ret0, _ := ret[0].(*deadline.DisassociateMemberFromFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberFromFarm indicates an expected call of DisassociateMemberFromFarm
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromFarm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromFarm", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromFarm), arg0)
}

// DisassociateMemberFromFarmRequest mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromFarmRequest(arg0 *deadline.DisassociateMemberFromFarmInput) (*request.Request, *deadline.DisassociateMemberFromFarmOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberFromFarmRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DisassociateMemberFromFarmOutput)
	return ret0, ret1
}

// DisassociateMemberFromFarmRequest indicates an expected call of DisassociateMemberFromFarmRequest
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromFarmRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromFarmRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromFarmRequest), arg0)
}

// DisassociateMemberFromFarmWithContext mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromFarmWithContext(arg0 context.Context, arg1 *deadline.DisassociateMemberFromFarmInput, arg2 ...request.Option) (*deadline.DisassociateMemberFromFarmOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMemberFromFarmWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DisassociateMemberFromFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberFromFarmWithContext indicates an expected call of DisassociateMemberFromFarmWithContext
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromFarmWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromFarmWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromFarmWithContext), varargs...)
}

// DisassociateMemberFromFleet mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromFleet(arg0 *deadline.DisassociateMemberFromFleetInput) (*deadline.DisassociateMemberFromFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberFromFleet", arg0)
	ret0, _ := ret[0].(*deadline.DisassociateMemberFromFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberFromFleet indicates an expected call of DisassociateMemberFromFleet
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromFleet", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromFleet), arg0)
}

// DisassociateMemberFromFleetRequest mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromFleetRequest(arg0 *deadline.DisassociateMemberFromFleetInput) (*request.Request, *deadline.DisassociateMemberFromFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberFromFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DisassociateMemberFromFleetOutput)
	return ret0, ret1
}

// DisassociateMemberFromFleetRequest indicates an expected call of DisassociateMemberFromFleetRequest
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromFleetRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromFleetRequest), arg0)
}

// DisassociateMemberFromFleetWithContext mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromFleetWithContext(arg0 context.Context, arg1 *deadline.DisassociateMemberFromFleetInput, arg2 ...request.Option) (*deadline.DisassociateMemberFromFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMemberFromFleetWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DisassociateMemberFromFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberFromFleetWithContext indicates an expected call of DisassociateMemberFromFleetWithContext
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromFleetWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromFleetWithContext), varargs...)
}

// DisassociateMemberFromJob mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromJob(arg0 *deadline.DisassociateMemberFromJobInput) (*deadline.DisassociateMemberFromJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberFromJob", arg0)
	ret0, _ := ret[0].(*deadline.DisassociateMemberFromJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberFromJob indicates an expected call of DisassociateMemberFromJob
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromJob", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromJob), arg0)
}

// DisassociateMemberFromJobRequest mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromJobRequest(arg0 *deadline.DisassociateMemberFromJobInput) (*request.Request, *deadline.DisassociateMemberFromJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberFromJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DisassociateMemberFromJobOutput)
	return ret0, ret1
}

// DisassociateMemberFromJobRequest indicates an expected call of DisassociateMemberFromJobRequest
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromJobRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromJobRequest), arg0)
}

// DisassociateMemberFromJobWithContext mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromJobWithContext(arg0 context.Context, arg1 *deadline.DisassociateMemberFromJobInput, arg2 ...request.Option) (*deadline.DisassociateMemberFromJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMemberFromJobWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DisassociateMemberFromJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberFromJobWithContext indicates an expected call of DisassociateMemberFromJobWithContext
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromJobWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromJobWithContext), varargs...)
}

// DisassociateMemberFromQueue mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromQueue(arg0 *deadline.DisassociateMemberFromQueueInput) (*deadline.DisassociateMemberFromQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberFromQueue", arg0)
	ret0, _ := ret[0].(*deadline.DisassociateMemberFromQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberFromQueue indicates an expected call of DisassociateMemberFromQueue
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromQueue", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromQueue), arg0)
}

// DisassociateMemberFromQueueRequest mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromQueueRequest(arg0 *deadline.DisassociateMemberFromQueueInput) (*request.Request, *deadline.DisassociateMemberFromQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberFromQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.DisassociateMemberFromQueueOutput)
	return ret0, ret1
}

// DisassociateMemberFromQueueRequest indicates an expected call of DisassociateMemberFromQueueRequest
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromQueueRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromQueueRequest), arg0)
}

// DisassociateMemberFromQueueWithContext mocks base method
func (m *MockDeadlineAPI) DisassociateMemberFromQueueWithContext(arg0 context.Context, arg1 *deadline.DisassociateMemberFromQueueInput, arg2 ...request.Option) (*deadline.DisassociateMemberFromQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMemberFromQueueWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.DisassociateMemberFromQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberFromQueueWithContext indicates an expected call of DisassociateMemberFromQueueWithContext
func (mr *MockDeadlineAPIMockRecorder) DisassociateMemberFromQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromQueueWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).DisassociateMemberFromQueueWithContext), varargs...)
}

// GetBudget mocks base method
func (m *MockDeadlineAPI) GetBudget(arg0 *deadline.GetBudgetInput) (*deadline.GetBudgetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudget", arg0)
	ret0, _ := ret[0].(*deadline.GetBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudget indicates an expected call of GetBudget
func (mr *MockDeadlineAPIMockRecorder) GetBudget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudget", reflect.TypeOf((*MockDeadlineAPI)(nil).GetBudget), arg0)
}

// GetBudgetRequest mocks base method
func (m *MockDeadlineAPI) GetBudgetRequest(arg0 *deadline.GetBudgetInput) (*request.Request, *deadline.GetBudgetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetBudgetOutput)
	return ret0, ret1
}

// GetBudgetRequest indicates an expected call of GetBudgetRequest
func (mr *MockDeadlineAPIMockRecorder) GetBudgetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgetRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetBudgetRequest), arg0)
}

// GetBudgetWithContext mocks base method
func (m *MockDeadlineAPI) GetBudgetWithContext(arg0 context.Context, arg1 *deadline.GetBudgetInput, arg2 ...request.Option) (*deadline.GetBudgetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBudgetWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgetWithContext indicates an expected call of GetBudgetWithContext
func (mr *MockDeadlineAPIMockRecorder) GetBudgetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgetWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetBudgetWithContext), varargs...)
}

// GetFarm mocks base method
func (m *MockDeadlineAPI) GetFarm(arg0 *deadline.GetFarmInput) (*deadline.GetFarmOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarm", arg0)
	ret0, _ := ret[0].(*deadline.GetFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarm indicates an expected call of GetFarm
func (mr *MockDeadlineAPIMockRecorder) GetFarm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarm", reflect.TypeOf((*MockDeadlineAPI)(nil).GetFarm), arg0)
}

// GetFarmRequest mocks base method
func (m *MockDeadlineAPI) GetFarmRequest(arg0 *deadline.GetFarmInput) (*request.Request, *deadline.GetFarmOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarmRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetFarmOutput)
	return ret0, ret1
}

// GetFarmRequest indicates an expected call of GetFarmRequest
func (mr *MockDeadlineAPIMockRecorder) GetFarmRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarmRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetFarmRequest), arg0)
}

// GetFarmWithContext mocks base method
func (m *MockDeadlineAPI) GetFarmWithContext(arg0 context.Context, arg1 *deadline.GetFarmInput, arg2 ...request.Option) (*deadline.GetFarmOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFarmWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarmWithContext indicates an expected call of GetFarmWithContext
func (mr *MockDeadlineAPIMockRecorder) GetFarmWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarmWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetFarmWithContext), varargs...)
}

// GetFleet mocks base method
func (m *MockDeadlineAPI) GetFleet(arg0 *deadline.GetFleetInput) (*deadline.GetFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFleet", arg0)
	ret0, _ := ret[0].(*deadline.GetFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFleet indicates an expected call of GetFleet
func (mr *MockDeadlineAPIMockRecorder) GetFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleet", reflect.TypeOf((*MockDeadlineAPI)(nil).GetFleet), arg0)
}

// GetFleetRequest mocks base method
func (m *MockDeadlineAPI) GetFleetRequest(arg0 *deadline.GetFleetInput) (*request.Request, *deadline.GetFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetFleetOutput)
	return ret0, ret1
}

// GetFleetRequest indicates an expected call of GetFleetRequest
func (mr *MockDeadlineAPIMockRecorder) GetFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleetRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetFleetRequest), arg0)
}

// GetFleetWithContext mocks base method
func (m *MockDeadlineAPI) GetFleetWithContext(arg0 context.Context, arg1 *deadline.GetFleetInput, arg2 ...request.Option) (*deadline.GetFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFleetWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFleetWithContext indicates an expected call of GetFleetWithContext
func (mr *MockDeadlineAPIMockRecorder) GetFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleetWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetFleetWithContext), varargs...)
}

// GetJob mocks base method
func (m *MockDeadlineAPI) GetJob(arg0 *deadline.GetJobInput) (*deadline.GetJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*deadline.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob
func (mr *MockDeadlineAPIMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockDeadlineAPI)(nil).GetJob), arg0)
}

// GetJobRequest mocks base method
func (m *MockDeadlineAPI) GetJobRequest(arg0 *deadline.GetJobInput) (*request.Request, *deadline.GetJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetJobOutput)
	return ret0, ret1
}

// GetJobRequest indicates an expected call of GetJobRequest
func (mr *MockDeadlineAPIMockRecorder) GetJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetJobRequest), arg0)
}

// GetJobWithContext mocks base method
func (m *MockDeadlineAPI) GetJobWithContext(arg0 context.Context, arg1 *deadline.GetJobInput, arg2 ...request.Option) (*deadline.GetJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobWithContext indicates an expected call of GetJobWithContext
func (mr *MockDeadlineAPIMockRecorder) GetJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetJobWithContext), varargs...)
}

// GetLicenseEndpoint mocks base method
func (m *MockDeadlineAPI) GetLicenseEndpoint(arg0 *deadline.GetLicenseEndpointInput) (*deadline.GetLicenseEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseEndpoint", arg0)
	ret0, _ := ret[0].(*deadline.GetLicenseEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseEndpoint indicates an expected call of GetLicenseEndpoint
func (mr *MockDeadlineAPIMockRecorder) GetLicenseEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseEndpoint", reflect.TypeOf((*MockDeadlineAPI)(nil).GetLicenseEndpoint), arg0)
}

// GetLicenseEndpointRequest mocks base method
func (m *MockDeadlineAPI) GetLicenseEndpointRequest(arg0 *deadline.GetLicenseEndpointInput) (*request.Request, *deadline.GetLicenseEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetLicenseEndpointOutput)
	return ret0, ret1
}

// GetLicenseEndpointRequest indicates an expected call of GetLicenseEndpointRequest
func (mr *MockDeadlineAPIMockRecorder) GetLicenseEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseEndpointRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetLicenseEndpointRequest), arg0)
}

// GetLicenseEndpointWithContext mocks base method
func (m *MockDeadlineAPI) GetLicenseEndpointWithContext(arg0 context.Context, arg1 *deadline.GetLicenseEndpointInput, arg2 ...request.Option) (*deadline.GetLicenseEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLicenseEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetLicenseEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseEndpointWithContext indicates an expected call of GetLicenseEndpointWithContext
func (mr *MockDeadlineAPIMockRecorder) GetLicenseEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseEndpointWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetLicenseEndpointWithContext), varargs...)
}

// GetMonitor mocks base method
func (m *MockDeadlineAPI) GetMonitor(arg0 *deadline.GetMonitorInput) (*deadline.GetMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitor", arg0)
	ret0, _ := ret[0].(*deadline.GetMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitor indicates an expected call of GetMonitor
func (mr *MockDeadlineAPIMockRecorder) GetMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitor", reflect.TypeOf((*MockDeadlineAPI)(nil).GetMonitor), arg0)
}

// GetMonitorRequest mocks base method
func (m *MockDeadlineAPI) GetMonitorRequest(arg0 *deadline.GetMonitorInput) (*request.Request, *deadline.GetMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetMonitorOutput)
	return ret0, ret1
}

// GetMonitorRequest indicates an expected call of GetMonitorRequest
func (mr *MockDeadlineAPIMockRecorder) GetMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetMonitorRequest), arg0)
}

// GetMonitorWithContext mocks base method
func (m *MockDeadlineAPI) GetMonitorWithContext(arg0 context.Context, arg1 *deadline.GetMonitorInput, arg2 ...request.Option) (*deadline.GetMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitorWithContext indicates an expected call of GetMonitorWithContext
func (mr *MockDeadlineAPIMockRecorder) GetMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetMonitorWithContext), varargs...)
}

// GetQueue mocks base method
func (m *MockDeadlineAPI) GetQueue(arg0 *deadline.GetQueueInput) (*deadline.GetQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue", arg0)
	ret0, _ := ret[0].(*deadline.GetQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueue indicates an expected call of GetQueue
func (mr *MockDeadlineAPIMockRecorder) GetQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*MockDeadlineAPI)(nil).GetQueue), arg0)
}

// GetQueueEnvironment mocks base method
func (m *MockDeadlineAPI) GetQueueEnvironment(arg0 *deadline.GetQueueEnvironmentInput) (*deadline.GetQueueEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueEnvironment", arg0)
	ret0, _ := ret[0].(*deadline.GetQueueEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueEnvironment indicates an expected call of GetQueueEnvironment
func (mr *MockDeadlineAPIMockRecorder) GetQueueEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueEnvironment", reflect.TypeOf((*MockDeadlineAPI)(nil).GetQueueEnvironment), arg0)
}

// GetQueueEnvironmentRequest mocks base method
func (m *MockDeadlineAPI) GetQueueEnvironmentRequest(arg0 *deadline.GetQueueEnvironmentInput) (*request.Request, *deadline.GetQueueEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetQueueEnvironmentOutput)
	return ret0, ret1
}

// GetQueueEnvironmentRequest indicates an expected call of GetQueueEnvironmentRequest
func (mr *MockDeadlineAPIMockRecorder) GetQueueEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueEnvironmentRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetQueueEnvironmentRequest), arg0)
}

// GetQueueEnvironmentWithContext mocks base method
func (m *MockDeadlineAPI) GetQueueEnvironmentWithContext(arg0 context.Context, arg1 *deadline.GetQueueEnvironmentInput, arg2 ...request.Option) (*deadline.GetQueueEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueueEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetQueueEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueEnvironmentWithContext indicates an expected call of GetQueueEnvironmentWithContext
func (mr *MockDeadlineAPIMockRecorder) GetQueueEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueEnvironmentWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetQueueEnvironmentWithContext), varargs...)
}

// GetQueueFleetAssociation mocks base method
func (m *MockDeadlineAPI) GetQueueFleetAssociation(arg0 *deadline.GetQueueFleetAssociationInput) (*deadline.GetQueueFleetAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueFleetAssociation", arg0)
	ret0, _ := ret[0].(*deadline.GetQueueFleetAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueFleetAssociation indicates an expected call of GetQueueFleetAssociation
func (mr *MockDeadlineAPIMockRecorder) GetQueueFleetAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueFleetAssociation", reflect.TypeOf((*MockDeadlineAPI)(nil).GetQueueFleetAssociation), arg0)
}

// GetQueueFleetAssociationRequest mocks base method
func (m *MockDeadlineAPI) GetQueueFleetAssociationRequest(arg0 *deadline.GetQueueFleetAssociationInput) (*request.Request, *deadline.GetQueueFleetAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueFleetAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetQueueFleetAssociationOutput)
	return ret0, ret1
}

// GetQueueFleetAssociationRequest indicates an expected call of GetQueueFleetAssociationRequest
func (mr *MockDeadlineAPIMockRecorder) GetQueueFleetAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueFleetAssociationRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetQueueFleetAssociationRequest), arg0)
}

// GetQueueFleetAssociationWithContext mocks base method
func (m *MockDeadlineAPI) GetQueueFleetAssociationWithContext(arg0 context.Context, arg1 *deadline.GetQueueFleetAssociationInput, arg2 ...request.Option) (*deadline.GetQueueFleetAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueueFleetAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetQueueFleetAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueFleetAssociationWithContext indicates an expected call of GetQueueFleetAssociationWithContext
func (mr *MockDeadlineAPIMockRecorder) GetQueueFleetAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueFleetAssociationWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetQueueFleetAssociationWithContext), varargs...)
}

// GetQueueRequest mocks base method
func (m *MockDeadlineAPI) GetQueueRequest(arg0 *deadline.GetQueueInput) (*request.Request, *deadline.GetQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetQueueOutput)
	return ret0, ret1
}

// GetQueueRequest indicates an expected call of GetQueueRequest
func (mr *MockDeadlineAPIMockRecorder) GetQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetQueueRequest), arg0)
}

// GetQueueWithContext mocks base method
func (m *MockDeadlineAPI) GetQueueWithContext(arg0 context.Context, arg1 *deadline.GetQueueInput, arg2 ...request.Option) (*deadline.GetQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueueWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueWithContext indicates an expected call of GetQueueWithContext
func (mr *MockDeadlineAPIMockRecorder) GetQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetQueueWithContext), varargs...)
}

// GetSession mocks base method
func (m *MockDeadlineAPI) GetSession(arg0 *deadline.GetSessionInput) (*deadline.GetSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0)
	ret0, _ := ret[0].(*deadline.GetSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession
func (mr *MockDeadlineAPIMockRecorder) GetSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSession), arg0)
}

// GetSessionAction mocks base method
func (m *MockDeadlineAPI) GetSessionAction(arg0 *deadline.GetSessionActionInput) (*deadline.GetSessionActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionAction", arg0)
	ret0, _ := ret[0].(*deadline.GetSessionActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionAction indicates an expected call of GetSessionAction
func (mr *MockDeadlineAPIMockRecorder) GetSessionAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionAction", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSessionAction), arg0)
}

// GetSessionActionRequest mocks base method
func (m *MockDeadlineAPI) GetSessionActionRequest(arg0 *deadline.GetSessionActionInput) (*request.Request, *deadline.GetSessionActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetSessionActionOutput)
	return ret0, ret1
}

// GetSessionActionRequest indicates an expected call of GetSessionActionRequest
func (mr *MockDeadlineAPIMockRecorder) GetSessionActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionActionRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSessionActionRequest), arg0)
}

// GetSessionActionWithContext mocks base method
func (m *MockDeadlineAPI) GetSessionActionWithContext(arg0 context.Context, arg1 *deadline.GetSessionActionInput, arg2 ...request.Option) (*deadline.GetSessionActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSessionActionWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetSessionActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionActionWithContext indicates an expected call of GetSessionActionWithContext
func (mr *MockDeadlineAPIMockRecorder) GetSessionActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionActionWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSessionActionWithContext), varargs...)
}

// GetSessionRequest mocks base method
func (m *MockDeadlineAPI) GetSessionRequest(arg0 *deadline.GetSessionInput) (*request.Request, *deadline.GetSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetSessionOutput)
	return ret0, ret1
}

// GetSessionRequest indicates an expected call of GetSessionRequest
func (mr *MockDeadlineAPIMockRecorder) GetSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSessionRequest), arg0)
}

// GetSessionWithContext mocks base method
func (m *MockDeadlineAPI) GetSessionWithContext(arg0 context.Context, arg1 *deadline.GetSessionInput, arg2 ...request.Option) (*deadline.GetSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSessionWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionWithContext indicates an expected call of GetSessionWithContext
func (mr *MockDeadlineAPIMockRecorder) GetSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSessionWithContext), varargs...)
}

// GetSessionsStatisticsAggregation mocks base method
func (m *MockDeadlineAPI) GetSessionsStatisticsAggregation(arg0 *deadline.GetSessionsStatisticsAggregationInput) (*deadline.GetSessionsStatisticsAggregationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsStatisticsAggregation", arg0)
	ret0, _ := ret[0].(*deadline.GetSessionsStatisticsAggregationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionsStatisticsAggregation indicates an expected call of GetSessionsStatisticsAggregation
func (mr *MockDeadlineAPIMockRecorder) GetSessionsStatisticsAggregation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsStatisticsAggregation", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSessionsStatisticsAggregation), arg0)
}

// GetSessionsStatisticsAggregationPages mocks base method
func (m *MockDeadlineAPI) GetSessionsStatisticsAggregationPages(arg0 *deadline.GetSessionsStatisticsAggregationInput, arg1 func(*deadline.GetSessionsStatisticsAggregationOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsStatisticsAggregationPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSessionsStatisticsAggregationPages indicates an expected call of GetSessionsStatisticsAggregationPages
func (mr *MockDeadlineAPIMockRecorder) GetSessionsStatisticsAggregationPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsStatisticsAggregationPages", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSessionsStatisticsAggregationPages), arg0, arg1)
}

// GetSessionsStatisticsAggregationPagesWithContext mocks base method
func (m *MockDeadlineAPI) GetSessionsStatisticsAggregationPagesWithContext(arg0 context.Context, arg1 *deadline.GetSessionsStatisticsAggregationInput, arg2 func(*deadline.GetSessionsStatisticsAggregationOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSessionsStatisticsAggregationPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSessionsStatisticsAggregationPagesWithContext indicates an expected call of GetSessionsStatisticsAggregationPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) GetSessionsStatisticsAggregationPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsStatisticsAggregationPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSessionsStatisticsAggregationPagesWithContext), varargs...)
}

// GetSessionsStatisticsAggregationRequest mocks base method
func (m *MockDeadlineAPI) GetSessionsStatisticsAggregationRequest(arg0 *deadline.GetSessionsStatisticsAggregationInput) (*request.Request, *deadline.GetSessionsStatisticsAggregationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsStatisticsAggregationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetSessionsStatisticsAggregationOutput)
	return ret0, ret1
}

// GetSessionsStatisticsAggregationRequest indicates an expected call of GetSessionsStatisticsAggregationRequest
func (mr *MockDeadlineAPIMockRecorder) GetSessionsStatisticsAggregationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsStatisticsAggregationRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSessionsStatisticsAggregationRequest), arg0)
}

// GetSessionsStatisticsAggregationWithContext mocks base method
func (m *MockDeadlineAPI) GetSessionsStatisticsAggregationWithContext(arg0 context.Context, arg1 *deadline.GetSessionsStatisticsAggregationInput, arg2 ...request.Option) (*deadline.GetSessionsStatisticsAggregationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSessionsStatisticsAggregationWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetSessionsStatisticsAggregationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionsStatisticsAggregationWithContext indicates an expected call of GetSessionsStatisticsAggregationWithContext
func (mr *MockDeadlineAPIMockRecorder) GetSessionsStatisticsAggregationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsStatisticsAggregationWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetSessionsStatisticsAggregationWithContext), varargs...)
}

// GetStep mocks base method
func (m *MockDeadlineAPI) GetStep(arg0 *deadline.GetStepInput) (*deadline.GetStepOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStep", arg0)
	ret0, _ := ret[0].(*deadline.GetStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStep indicates an expected call of GetStep
func (mr *MockDeadlineAPIMockRecorder) GetStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStep", reflect.TypeOf((*MockDeadlineAPI)(nil).GetStep), arg0)
}

// GetStepRequest mocks base method
func (m *MockDeadlineAPI) GetStepRequest(arg0 *deadline.GetStepInput) (*request.Request, *deadline.GetStepOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetStepOutput)
	return ret0, ret1
}

// GetStepRequest indicates an expected call of GetStepRequest
func (mr *MockDeadlineAPIMockRecorder) GetStepRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetStepRequest), arg0)
}

// GetStepWithContext mocks base method
func (m *MockDeadlineAPI) GetStepWithContext(arg0 context.Context, arg1 *deadline.GetStepInput, arg2 ...request.Option) (*deadline.GetStepOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStepWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepWithContext indicates an expected call of GetStepWithContext
func (mr *MockDeadlineAPIMockRecorder) GetStepWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetStepWithContext), varargs...)
}

// GetStorageProfile mocks base method
func (m *MockDeadlineAPI) GetStorageProfile(arg0 *deadline.GetStorageProfileInput) (*deadline.GetStorageProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageProfile", arg0)
	ret0, _ := ret[0].(*deadline.GetStorageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageProfile indicates an expected call of GetStorageProfile
func (mr *MockDeadlineAPIMockRecorder) GetStorageProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageProfile", reflect.TypeOf((*MockDeadlineAPI)(nil).GetStorageProfile), arg0)
}

// GetStorageProfileForQueue mocks base method
func (m *MockDeadlineAPI) GetStorageProfileForQueue(arg0 *deadline.GetStorageProfileForQueueInput) (*deadline.GetStorageProfileForQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageProfileForQueue", arg0)
	ret0, _ := ret[0].(*deadline.GetStorageProfileForQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageProfileForQueue indicates an expected call of GetStorageProfileForQueue
func (mr *MockDeadlineAPIMockRecorder) GetStorageProfileForQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageProfileForQueue", reflect.TypeOf((*MockDeadlineAPI)(nil).GetStorageProfileForQueue), arg0)
}

// GetStorageProfileForQueueRequest mocks base method
func (m *MockDeadlineAPI) GetStorageProfileForQueueRequest(arg0 *deadline.GetStorageProfileForQueueInput) (*request.Request, *deadline.GetStorageProfileForQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageProfileForQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetStorageProfileForQueueOutput)
	return ret0, ret1
}

// GetStorageProfileForQueueRequest indicates an expected call of GetStorageProfileForQueueRequest
func (mr *MockDeadlineAPIMockRecorder) GetStorageProfileForQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageProfileForQueueRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetStorageProfileForQueueRequest), arg0)
}

// GetStorageProfileForQueueWithContext mocks base method
func (m *MockDeadlineAPI) GetStorageProfileForQueueWithContext(arg0 context.Context, arg1 *deadline.GetStorageProfileForQueueInput, arg2 ...request.Option) (*deadline.GetStorageProfileForQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageProfileForQueueWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetStorageProfileForQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageProfileForQueueWithContext indicates an expected call of GetStorageProfileForQueueWithContext
func (mr *MockDeadlineAPIMockRecorder) GetStorageProfileForQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageProfileForQueueWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetStorageProfileForQueueWithContext), varargs...)
}

// GetStorageProfileRequest mocks base method
func (m *MockDeadlineAPI) GetStorageProfileRequest(arg0 *deadline.GetStorageProfileInput) (*request.Request, *deadline.GetStorageProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetStorageProfileOutput)
	return ret0, ret1
}

// GetStorageProfileRequest indicates an expected call of GetStorageProfileRequest
func (mr *MockDeadlineAPIMockRecorder) GetStorageProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageProfileRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetStorageProfileRequest), arg0)
}

// GetStorageProfileWithContext mocks base method
func (m *MockDeadlineAPI) GetStorageProfileWithContext(arg0 context.Context, arg1 *deadline.GetStorageProfileInput, arg2 ...request.Option) (*deadline.GetStorageProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageProfileWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetStorageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageProfileWithContext indicates an expected call of GetStorageProfileWithContext
func (mr *MockDeadlineAPIMockRecorder) GetStorageProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageProfileWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetStorageProfileWithContext), varargs...)
}

// GetTask mocks base method
func (m *MockDeadlineAPI) GetTask(arg0 *deadline.GetTaskInput) (*deadline.GetTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0)
	ret0, _ := ret[0].(*deadline.GetTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *MockDeadlineAPIMockRecorder) GetTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockDeadlineAPI)(nil).GetTask), arg0)
}

// GetTaskRequest mocks base method
func (m *MockDeadlineAPI) GetTaskRequest(arg0 *deadline.GetTaskInput) (*request.Request, *deadline.GetTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetTaskOutput)
	return ret0, ret1
}

// GetTaskRequest indicates an expected call of GetTaskRequest
func (mr *MockDeadlineAPIMockRecorder) GetTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetTaskRequest), arg0)
}

// GetTaskWithContext mocks base method
func (m *MockDeadlineAPI) GetTaskWithContext(arg0 context.Context, arg1 *deadline.GetTaskInput, arg2 ...request.Option) (*deadline.GetTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTaskWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskWithContext indicates an expected call of GetTaskWithContext
func (mr *MockDeadlineAPIMockRecorder) GetTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetTaskWithContext), varargs...)
}

// GetWorker mocks base method
func (m *MockDeadlineAPI) GetWorker(arg0 *deadline.GetWorkerInput) (*deadline.GetWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorker", arg0)
	ret0, _ := ret[0].(*deadline.GetWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorker indicates an expected call of GetWorker
func (mr *MockDeadlineAPIMockRecorder) GetWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorker", reflect.TypeOf((*MockDeadlineAPI)(nil).GetWorker), arg0)
}

// GetWorkerRequest mocks base method
func (m *MockDeadlineAPI) GetWorkerRequest(arg0 *deadline.GetWorkerInput) (*request.Request, *deadline.GetWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.GetWorkerOutput)
	return ret0, ret1
}

// GetWorkerRequest indicates an expected call of GetWorkerRequest
func (mr *MockDeadlineAPIMockRecorder) GetWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).GetWorkerRequest), arg0)
}

// GetWorkerWithContext mocks base method
func (m *MockDeadlineAPI) GetWorkerWithContext(arg0 context.Context, arg1 *deadline.GetWorkerInput, arg2 ...request.Option) (*deadline.GetWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.GetWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerWithContext indicates an expected call of GetWorkerWithContext
func (mr *MockDeadlineAPIMockRecorder) GetWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).GetWorkerWithContext), varargs...)
}

// ListAvailableMeteredProducts mocks base method
func (m *MockDeadlineAPI) ListAvailableMeteredProducts(arg0 *deadline.ListAvailableMeteredProductsInput) (*deadline.ListAvailableMeteredProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableMeteredProducts", arg0)
	ret0, _ := ret[0].(*deadline.ListAvailableMeteredProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableMeteredProducts indicates an expected call of ListAvailableMeteredProducts
func (mr *MockDeadlineAPIMockRecorder) ListAvailableMeteredProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableMeteredProducts", reflect.TypeOf((*MockDeadlineAPI)(nil).ListAvailableMeteredProducts), arg0)
}

// ListAvailableMeteredProductsPages mocks base method
func (m *MockDeadlineAPI) ListAvailableMeteredProductsPages(arg0 *deadline.ListAvailableMeteredProductsInput, arg1 func(*deadline.ListAvailableMeteredProductsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableMeteredProductsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAvailableMeteredProductsPages indicates an expected call of ListAvailableMeteredProductsPages
func (mr *MockDeadlineAPIMockRecorder) ListAvailableMeteredProductsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableMeteredProductsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListAvailableMeteredProductsPages), arg0, arg1)
}

// ListAvailableMeteredProductsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListAvailableMeteredProductsPagesWithContext(arg0 context.Context, arg1 *deadline.ListAvailableMeteredProductsInput, arg2 func(*deadline.ListAvailableMeteredProductsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAvailableMeteredProductsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAvailableMeteredProductsPagesWithContext indicates an expected call of ListAvailableMeteredProductsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListAvailableMeteredProductsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableMeteredProductsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListAvailableMeteredProductsPagesWithContext), varargs...)
}

// ListAvailableMeteredProductsRequest mocks base method
func (m *MockDeadlineAPI) ListAvailableMeteredProductsRequest(arg0 *deadline.ListAvailableMeteredProductsInput) (*request.Request, *deadline.ListAvailableMeteredProductsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableMeteredProductsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListAvailableMeteredProductsOutput)
	return ret0, ret1
}

// ListAvailableMeteredProductsRequest indicates an expected call of ListAvailableMeteredProductsRequest
func (mr *MockDeadlineAPIMockRecorder) ListAvailableMeteredProductsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableMeteredProductsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListAvailableMeteredProductsRequest), arg0)
}

// ListAvailableMeteredProductsWithContext mocks base method
func (m *MockDeadlineAPI) ListAvailableMeteredProductsWithContext(arg0 context.Context, arg1 *deadline.ListAvailableMeteredProductsInput, arg2 ...request.Option) (*deadline.ListAvailableMeteredProductsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAvailableMeteredProductsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListAvailableMeteredProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableMeteredProductsWithContext indicates an expected call of ListAvailableMeteredProductsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListAvailableMeteredProductsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableMeteredProductsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListAvailableMeteredProductsWithContext), varargs...)
}

// ListBudgets mocks base method
func (m *MockDeadlineAPI) ListBudgets(arg0 *deadline.ListBudgetsInput) (*deadline.ListBudgetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBudgets", arg0)
	ret0, _ := ret[0].(*deadline.ListBudgetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBudgets indicates an expected call of ListBudgets
func (mr *MockDeadlineAPIMockRecorder) ListBudgets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgets", reflect.TypeOf((*MockDeadlineAPI)(nil).ListBudgets), arg0)
}

// ListBudgetsPages mocks base method
func (m *MockDeadlineAPI) ListBudgetsPages(arg0 *deadline.ListBudgetsInput, arg1 func(*deadline.ListBudgetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBudgetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBudgetsPages indicates an expected call of ListBudgetsPages
func (mr *MockDeadlineAPIMockRecorder) ListBudgetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgetsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListBudgetsPages), arg0, arg1)
}

// ListBudgetsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListBudgetsPagesWithContext(arg0 context.Context, arg1 *deadline.ListBudgetsInput, arg2 func(*deadline.ListBudgetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBudgetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBudgetsPagesWithContext indicates an expected call of ListBudgetsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListBudgetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgetsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListBudgetsPagesWithContext), varargs...)
}

// ListBudgetsRequest mocks base method
func (m *MockDeadlineAPI) ListBudgetsRequest(arg0 *deadline.ListBudgetsInput) (*request.Request, *deadline.ListBudgetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBudgetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListBudgetsOutput)
	return ret0, ret1
}

// ListBudgetsRequest indicates an expected call of ListBudgetsRequest
func (mr *MockDeadlineAPIMockRecorder) ListBudgetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgetsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListBudgetsRequest), arg0)
}

// ListBudgetsWithContext mocks base method
func (m *MockDeadlineAPI) ListBudgetsWithContext(arg0 context.Context, arg1 *deadline.ListBudgetsInput, arg2 ...request.Option) (*deadline.ListBudgetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBudgetsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListBudgetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBudgetsWithContext indicates an expected call of ListBudgetsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListBudgetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgetsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListBudgetsWithContext), varargs...)
}

// ListFarmMembers mocks base method
func (m *MockDeadlineAPI) ListFarmMembers(arg0 *deadline.ListFarmMembersInput) (*deadline.ListFarmMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFarmMembers", arg0)
	ret0, _ := ret[0].(*deadline.ListFarmMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFarmMembers indicates an expected call of ListFarmMembers
func (mr *MockDeadlineAPIMockRecorder) ListFarmMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFarmMembers", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFarmMembers), arg0)
}

// ListFarmMembersPages mocks base method
func (m *MockDeadlineAPI) ListFarmMembersPages(arg0 *deadline.ListFarmMembersInput, arg1 func(*deadline.ListFarmMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFarmMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFarmMembersPages indicates an expected call of ListFarmMembersPages
func (mr *MockDeadlineAPIMockRecorder) ListFarmMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFarmMembersPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFarmMembersPages), arg0, arg1)
}

// ListFarmMembersPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListFarmMembersPagesWithContext(arg0 context.Context, arg1 *deadline.ListFarmMembersInput, arg2 func(*deadline.ListFarmMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFarmMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFarmMembersPagesWithContext indicates an expected call of ListFarmMembersPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListFarmMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFarmMembersPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFarmMembersPagesWithContext), varargs...)
}

// ListFarmMembersRequest mocks base method
func (m *MockDeadlineAPI) ListFarmMembersRequest(arg0 *deadline.ListFarmMembersInput) (*request.Request, *deadline.ListFarmMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFarmMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListFarmMembersOutput)
	return ret0, ret1
}

// ListFarmMembersRequest indicates an expected call of ListFarmMembersRequest
func (mr *MockDeadlineAPIMockRecorder) ListFarmMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFarmMembersRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFarmMembersRequest), arg0)
}

// ListFarmMembersWithContext mocks base method
func (m *MockDeadlineAPI) ListFarmMembersWithContext(arg0 context.Context, arg1 *deadline.ListFarmMembersInput, arg2 ...request.Option) (*deadline.ListFarmMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFarmMembersWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListFarmMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFarmMembersWithContext indicates an expected call of ListFarmMembersWithContext
func (mr *MockDeadlineAPIMockRecorder) ListFarmMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFarmMembersWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFarmMembersWithContext), varargs...)
}

// ListFarms mocks base method
func (m *MockDeadlineAPI) ListFarms(arg0 *deadline.ListFarmsInput) (*deadline.ListFarmsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFarms", arg0)
	ret0, _ := ret[0].(*deadline.ListFarmsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFarms indicates an expected call of ListFarms
func (mr *MockDeadlineAPIMockRecorder) ListFarms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFarms", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFarms), arg0)
}

// ListFarmsPages mocks base method
func (m *MockDeadlineAPI) ListFarmsPages(arg0 *deadline.ListFarmsInput, arg1 func(*deadline.ListFarmsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFarmsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFarmsPages indicates an expected call of ListFarmsPages
func (mr *MockDeadlineAPIMockRecorder) ListFarmsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFarmsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFarmsPages), arg0, arg1)
}

// ListFarmsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListFarmsPagesWithContext(arg0 context.Context, arg1 *deadline.ListFarmsInput, arg2 func(*deadline.ListFarmsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFarmsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFarmsPagesWithContext indicates an expected call of ListFarmsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListFarmsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFarmsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFarmsPagesWithContext), varargs...)
}

// ListFarmsRequest mocks base method
func (m *MockDeadlineAPI) ListFarmsRequest(arg0 *deadline.ListFarmsInput) (*request.Request, *deadline.ListFarmsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFarmsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListFarmsOutput)
	return ret0, ret1
}

// ListFarmsRequest indicates an expected call of ListFarmsRequest
func (mr *MockDeadlineAPIMockRecorder) ListFarmsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFarmsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFarmsRequest), arg0)
}

// ListFarmsWithContext mocks base method
func (m *MockDeadlineAPI) ListFarmsWithContext(arg0 context.Context, arg1 *deadline.ListFarmsInput, arg2 ...request.Option) (*deadline.ListFarmsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFarmsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListFarmsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFarmsWithContext indicates an expected call of ListFarmsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListFarmsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFarmsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFarmsWithContext), varargs...)
}

// ListFleetMembers mocks base method
func (m *MockDeadlineAPI) ListFleetMembers(arg0 *deadline.ListFleetMembersInput) (*deadline.ListFleetMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetMembers", arg0)
	ret0, _ := ret[0].(*deadline.ListFleetMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleetMembers indicates an expected call of ListFleetMembers
func (mr *MockDeadlineAPIMockRecorder) ListFleetMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetMembers", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFleetMembers), arg0)
}

// ListFleetMembersPages mocks base method
func (m *MockDeadlineAPI) ListFleetMembersPages(arg0 *deadline.ListFleetMembersInput, arg1 func(*deadline.ListFleetMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFleetMembersPages indicates an expected call of ListFleetMembersPages
func (mr *MockDeadlineAPIMockRecorder) ListFleetMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetMembersPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFleetMembersPages), arg0, arg1)
}

// ListFleetMembersPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListFleetMembersPagesWithContext(arg0 context.Context, arg1 *deadline.ListFleetMembersInput, arg2 func(*deadline.ListFleetMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFleetMembersPagesWithContext indicates an expected call of ListFleetMembersPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListFleetMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetMembersPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFleetMembersPagesWithContext), varargs...)
}

// ListFleetMembersRequest mocks base method
func (m *MockDeadlineAPI) ListFleetMembersRequest(arg0 *deadline.ListFleetMembersInput) (*request.Request, *deadline.ListFleetMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListFleetMembersOutput)
	return ret0, ret1
}

// ListFleetMembersRequest indicates an expected call of ListFleetMembersRequest
func (mr *MockDeadlineAPIMockRecorder) ListFleetMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetMembersRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFleetMembersRequest), arg0)
}

// ListFleetMembersWithContext mocks base method
func (m *MockDeadlineAPI) ListFleetMembersWithContext(arg0 context.Context, arg1 *deadline.ListFleetMembersInput, arg2 ...request.Option) (*deadline.ListFleetMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetMembersWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListFleetMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleetMembersWithContext indicates an expected call of ListFleetMembersWithContext
func (mr *MockDeadlineAPIMockRecorder) ListFleetMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetMembersWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFleetMembersWithContext), varargs...)
}

// ListFleets mocks base method
func (m *MockDeadlineAPI) ListFleets(arg0 *deadline.ListFleetsInput) (*deadline.ListFleetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleets", arg0)
	ret0, _ := ret[0].(*deadline.ListFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleets indicates an expected call of ListFleets
func (mr *MockDeadlineAPIMockRecorder) ListFleets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleets", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFleets), arg0)
}

// ListFleetsPages mocks base method
func (m *MockDeadlineAPI) ListFleetsPages(arg0 *deadline.ListFleetsInput, arg1 func(*deadline.ListFleetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFleetsPages indicates an expected call of ListFleetsPages
func (mr *MockDeadlineAPIMockRecorder) ListFleetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFleetsPages), arg0, arg1)
}

// ListFleetsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListFleetsPagesWithContext(arg0 context.Context, arg1 *deadline.ListFleetsInput, arg2 func(*deadline.ListFleetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFleetsPagesWithContext indicates an expected call of ListFleetsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListFleetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFleetsPagesWithContext), varargs...)
}

// ListFleetsRequest mocks base method
func (m *MockDeadlineAPI) ListFleetsRequest(arg0 *deadline.ListFleetsInput) (*request.Request, *deadline.ListFleetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListFleetsOutput)
	return ret0, ret1
}

// ListFleetsRequest indicates an expected call of ListFleetsRequest
func (mr *MockDeadlineAPIMockRecorder) ListFleetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFleetsRequest), arg0)
}

// ListFleetsWithContext mocks base method
func (m *MockDeadlineAPI) ListFleetsWithContext(arg0 context.Context, arg1 *deadline.ListFleetsInput, arg2 ...request.Option) (*deadline.ListFleetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleetsWithContext indicates an expected call of ListFleetsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListFleetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListFleetsWithContext), varargs...)
}

// ListJobMembers mocks base method
func (m *MockDeadlineAPI) ListJobMembers(arg0 *deadline.ListJobMembersInput) (*deadline.ListJobMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobMembers", arg0)
	ret0, _ := ret[0].(*deadline.ListJobMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobMembers indicates an expected call of ListJobMembers
func (mr *MockDeadlineAPIMockRecorder) ListJobMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobMembers", reflect.TypeOf((*MockDeadlineAPI)(nil).ListJobMembers), arg0)
}

// ListJobMembersPages mocks base method
func (m *MockDeadlineAPI) ListJobMembersPages(arg0 *deadline.ListJobMembersInput, arg1 func(*deadline.ListJobMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobMembersPages indicates an expected call of ListJobMembersPages
func (mr *MockDeadlineAPIMockRecorder) ListJobMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobMembersPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListJobMembersPages), arg0, arg1)
}

// ListJobMembersPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListJobMembersPagesWithContext(arg0 context.Context, arg1 *deadline.ListJobMembersInput, arg2 func(*deadline.ListJobMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobMembersPagesWithContext indicates an expected call of ListJobMembersPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListJobMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobMembersPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListJobMembersPagesWithContext), varargs...)
}

// ListJobMembersRequest mocks base method
func (m *MockDeadlineAPI) ListJobMembersRequest(arg0 *deadline.ListJobMembersInput) (*request.Request, *deadline.ListJobMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListJobMembersOutput)
	return ret0, ret1
}

// ListJobMembersRequest indicates an expected call of ListJobMembersRequest
func (mr *MockDeadlineAPIMockRecorder) ListJobMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobMembersRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListJobMembersRequest), arg0)
}

// ListJobMembersWithContext mocks base method
func (m *MockDeadlineAPI) ListJobMembersWithContext(arg0 context.Context, arg1 *deadline.ListJobMembersInput, arg2 ...request.Option) (*deadline.ListJobMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobMembersWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListJobMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobMembersWithContext indicates an expected call of ListJobMembersWithContext
func (mr *MockDeadlineAPIMockRecorder) ListJobMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobMembersWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListJobMembersWithContext), varargs...)
}

// ListJobs mocks base method
func (m *MockDeadlineAPI) ListJobs(arg0 *deadline.ListJobsInput) (*deadline.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*deadline.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs
func (mr *MockDeadlineAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockDeadlineAPI)(nil).ListJobs), arg0)
}

// ListJobsPages mocks base method
func (m *MockDeadlineAPI) ListJobsPages(arg0 *deadline.ListJobsInput, arg1 func(*deadline.ListJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPages indicates an expected call of ListJobsPages
func (mr *MockDeadlineAPIMockRecorder) ListJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListJobsPages), arg0, arg1)
}

// ListJobsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListJobsPagesWithContext(arg0 context.Context, arg1 *deadline.ListJobsInput, arg2 func(*deadline.ListJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPagesWithContext indicates an expected call of ListJobsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListJobsPagesWithContext), varargs...)
}

// ListJobsRequest mocks base method
func (m *MockDeadlineAPI) ListJobsRequest(arg0 *deadline.ListJobsInput) (*request.Request, *deadline.ListJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest
func (mr *MockDeadlineAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method
func (m *MockDeadlineAPI) ListJobsWithContext(arg0 context.Context, arg1 *deadline.ListJobsInput, arg2 ...request.Option) (*deadline.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListJobsWithContext), varargs...)
}

// ListLicenseEndpoints mocks base method
func (m *MockDeadlineAPI) ListLicenseEndpoints(arg0 *deadline.ListLicenseEndpointsInput) (*deadline.ListLicenseEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLicenseEndpoints", arg0)
	ret0, _ := ret[0].(*deadline.ListLicenseEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLicenseEndpoints indicates an expected call of ListLicenseEndpoints
func (mr *MockDeadlineAPIMockRecorder) ListLicenseEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseEndpoints", reflect.TypeOf((*MockDeadlineAPI)(nil).ListLicenseEndpoints), arg0)
}

// ListLicenseEndpointsPages mocks base method
func (m *MockDeadlineAPI) ListLicenseEndpointsPages(arg0 *deadline.ListLicenseEndpointsInput, arg1 func(*deadline.ListLicenseEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLicenseEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLicenseEndpointsPages indicates an expected call of ListLicenseEndpointsPages
func (mr *MockDeadlineAPIMockRecorder) ListLicenseEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseEndpointsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListLicenseEndpointsPages), arg0, arg1)
}

// ListLicenseEndpointsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListLicenseEndpointsPagesWithContext(arg0 context.Context, arg1 *deadline.ListLicenseEndpointsInput, arg2 func(*deadline.ListLicenseEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLicenseEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLicenseEndpointsPagesWithContext indicates an expected call of ListLicenseEndpointsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListLicenseEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseEndpointsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListLicenseEndpointsPagesWithContext), varargs...)
}

// ListLicenseEndpointsRequest mocks base method
func (m *MockDeadlineAPI) ListLicenseEndpointsRequest(arg0 *deadline.ListLicenseEndpointsInput) (*request.Request, *deadline.ListLicenseEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLicenseEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListLicenseEndpointsOutput)
	return ret0, ret1
}

// ListLicenseEndpointsRequest indicates an expected call of ListLicenseEndpointsRequest
func (mr *MockDeadlineAPIMockRecorder) ListLicenseEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseEndpointsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListLicenseEndpointsRequest), arg0)
}

// ListLicenseEndpointsWithContext mocks base method
func (m *MockDeadlineAPI) ListLicenseEndpointsWithContext(arg0 context.Context, arg1 *deadline.ListLicenseEndpointsInput, arg2 ...request.Option) (*deadline.ListLicenseEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLicenseEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListLicenseEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLicenseEndpointsWithContext indicates an expected call of ListLicenseEndpointsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListLicenseEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseEndpointsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListLicenseEndpointsWithContext), varargs...)
}

// ListMeteredProducts mocks base method
func (m *MockDeadlineAPI) ListMeteredProducts(arg0 *deadline.ListMeteredProductsInput) (*deadline.ListMeteredProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeteredProducts", arg0)
	ret0, _ := ret[0].(*deadline.ListMeteredProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeteredProducts indicates an expected call of ListMeteredProducts
func (mr *MockDeadlineAPIMockRecorder) ListMeteredProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeteredProducts", reflect.TypeOf((*MockDeadlineAPI)(nil).ListMeteredProducts), arg0)
}

// ListMeteredProductsPages mocks base method
func (m *MockDeadlineAPI) ListMeteredProductsPages(arg0 *deadline.ListMeteredProductsInput, arg1 func(*deadline.ListMeteredProductsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeteredProductsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMeteredProductsPages indicates an expected call of ListMeteredProductsPages
func (mr *MockDeadlineAPIMockRecorder) ListMeteredProductsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeteredProductsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListMeteredProductsPages), arg0, arg1)
}

// ListMeteredProductsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListMeteredProductsPagesWithContext(arg0 context.Context, arg1 *deadline.ListMeteredProductsInput, arg2 func(*deadline.ListMeteredProductsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeteredProductsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMeteredProductsPagesWithContext indicates an expected call of ListMeteredProductsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListMeteredProductsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeteredProductsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListMeteredProductsPagesWithContext), varargs...)
}

// ListMeteredProductsRequest mocks base method
func (m *MockDeadlineAPI) ListMeteredProductsRequest(arg0 *deadline.ListMeteredProductsInput) (*request.Request, *deadline.ListMeteredProductsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeteredProductsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListMeteredProductsOutput)
	return ret0, ret1
}

// ListMeteredProductsRequest indicates an expected call of ListMeteredProductsRequest
func (mr *MockDeadlineAPIMockRecorder) ListMeteredProductsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeteredProductsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListMeteredProductsRequest), arg0)
}

// ListMeteredProductsWithContext mocks base method
func (m *MockDeadlineAPI) ListMeteredProductsWithContext(arg0 context.Context, arg1 *deadline.ListMeteredProductsInput, arg2 ...request.Option) (*deadline.ListMeteredProductsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMeteredProductsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListMeteredProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeteredProductsWithContext indicates an expected call of ListMeteredProductsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListMeteredProductsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeteredProductsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListMeteredProductsWithContext), varargs...)
}

// ListMonitors mocks base method
func (m *MockDeadlineAPI) ListMonitors(arg0 *deadline.ListMonitorsInput) (*deadline.ListMonitorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitors", arg0)
	ret0, _ := ret[0].(*deadline.ListMonitorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitors indicates an expected call of ListMonitors
func (mr *MockDeadlineAPIMockRecorder) ListMonitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitors", reflect.TypeOf((*MockDeadlineAPI)(nil).ListMonitors), arg0)
}

// ListMonitorsPages mocks base method
func (m *MockDeadlineAPI) ListMonitorsPages(arg0 *deadline.ListMonitorsInput, arg1 func(*deadline.ListMonitorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMonitorsPages indicates an expected call of ListMonitorsPages
func (mr *MockDeadlineAPIMockRecorder) ListMonitorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListMonitorsPages), arg0, arg1)
}

// ListMonitorsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListMonitorsPagesWithContext(arg0 context.Context, arg1 *deadline.ListMonitorsInput, arg2 func(*deadline.ListMonitorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMonitorsPagesWithContext indicates an expected call of ListMonitorsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListMonitorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListMonitorsPagesWithContext), varargs...)
}

// ListMonitorsRequest mocks base method
func (m *MockDeadlineAPI) ListMonitorsRequest(arg0 *deadline.ListMonitorsInput) (*request.Request, *deadline.ListMonitorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListMonitorsOutput)
	return ret0, ret1
}

// ListMonitorsRequest indicates an expected call of ListMonitorsRequest
func (mr *MockDeadlineAPIMockRecorder) ListMonitorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListMonitorsRequest), arg0)
}

// ListMonitorsWithContext mocks base method
func (m *MockDeadlineAPI) ListMonitorsWithContext(arg0 context.Context, arg1 *deadline.ListMonitorsInput, arg2 ...request.Option) (*deadline.ListMonitorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitorsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListMonitorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitorsWithContext indicates an expected call of ListMonitorsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListMonitorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListMonitorsWithContext), varargs...)
}

// ListQueueEnvironments mocks base method
func (m *MockDeadlineAPI) ListQueueEnvironments(arg0 *deadline.ListQueueEnvironmentsInput) (*deadline.ListQueueEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueueEnvironments", arg0)
	ret0, _ := ret[0].(*deadline.ListQueueEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueueEnvironments indicates an expected call of ListQueueEnvironments
func (mr *MockDeadlineAPIMockRecorder) ListQueueEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueEnvironments", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueEnvironments), arg0)
}

// ListQueueEnvironmentsPages mocks base method
func (m *MockDeadlineAPI) ListQueueEnvironmentsPages(arg0 *deadline.ListQueueEnvironmentsInput, arg1 func(*deadline.ListQueueEnvironmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueueEnvironmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueueEnvironmentsPages indicates an expected call of ListQueueEnvironmentsPages
func (mr *MockDeadlineAPIMockRecorder) ListQueueEnvironmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueEnvironmentsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueEnvironmentsPages), arg0, arg1)
}

// ListQueueEnvironmentsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListQueueEnvironmentsPagesWithContext(arg0 context.Context, arg1 *deadline.ListQueueEnvironmentsInput, arg2 func(*deadline.ListQueueEnvironmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueueEnvironmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueueEnvironmentsPagesWithContext indicates an expected call of ListQueueEnvironmentsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListQueueEnvironmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueEnvironmentsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueEnvironmentsPagesWithContext), varargs...)
}

// ListQueueEnvironmentsRequest mocks base method
func (m *MockDeadlineAPI) ListQueueEnvironmentsRequest(arg0 *deadline.ListQueueEnvironmentsInput) (*request.Request, *deadline.ListQueueEnvironmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueueEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListQueueEnvironmentsOutput)
	return ret0, ret1
}

// ListQueueEnvironmentsRequest indicates an expected call of ListQueueEnvironmentsRequest
func (mr *MockDeadlineAPIMockRecorder) ListQueueEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueEnvironmentsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueEnvironmentsRequest), arg0)
}

// ListQueueEnvironmentsWithContext mocks base method
func (m *MockDeadlineAPI) ListQueueEnvironmentsWithContext(arg0 context.Context, arg1 *deadline.ListQueueEnvironmentsInput, arg2 ...request.Option) (*deadline.ListQueueEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueueEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListQueueEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueueEnvironmentsWithContext indicates an expected call of ListQueueEnvironmentsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListQueueEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueEnvironmentsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueEnvironmentsWithContext), varargs...)
}

// ListQueueFleetAssociations mocks base method
func (m *MockDeadlineAPI) ListQueueFleetAssociations(arg0 *deadline.ListQueueFleetAssociationsInput) (*deadline.ListQueueFleetAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueueFleetAssociations", arg0)
	ret0, _ := ret[0].(*deadline.ListQueueFleetAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueueFleetAssociations indicates an expected call of ListQueueFleetAssociations
func (mr *MockDeadlineAPIMockRecorder) ListQueueFleetAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueFleetAssociations", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueFleetAssociations), arg0)
}

// ListQueueFleetAssociationsPages mocks base method
func (m *MockDeadlineAPI) ListQueueFleetAssociationsPages(arg0 *deadline.ListQueueFleetAssociationsInput, arg1 func(*deadline.ListQueueFleetAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueueFleetAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueueFleetAssociationsPages indicates an expected call of ListQueueFleetAssociationsPages
func (mr *MockDeadlineAPIMockRecorder) ListQueueFleetAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueFleetAssociationsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueFleetAssociationsPages), arg0, arg1)
}

// ListQueueFleetAssociationsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListQueueFleetAssociationsPagesWithContext(arg0 context.Context, arg1 *deadline.ListQueueFleetAssociationsInput, arg2 func(*deadline.ListQueueFleetAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueueFleetAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueueFleetAssociationsPagesWithContext indicates an expected call of ListQueueFleetAssociationsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListQueueFleetAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueFleetAssociationsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueFleetAssociationsPagesWithContext), varargs...)
}

// ListQueueFleetAssociationsRequest mocks base method
func (m *MockDeadlineAPI) ListQueueFleetAssociationsRequest(arg0 *deadline.ListQueueFleetAssociationsInput) (*request.Request, *deadline.ListQueueFleetAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueueFleetAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListQueueFleetAssociationsOutput)
	return ret0, ret1
}

// ListQueueFleetAssociationsRequest indicates an expected call of ListQueueFleetAssociationsRequest
func (mr *MockDeadlineAPIMockRecorder) ListQueueFleetAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueFleetAssociationsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueFleetAssociationsRequest), arg0)
}

// ListQueueFleetAssociationsWithContext mocks base method
func (m *MockDeadlineAPI) ListQueueFleetAssociationsWithContext(arg0 context.Context, arg1 *deadline.ListQueueFleetAssociationsInput, arg2 ...request.Option) (*deadline.ListQueueFleetAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueueFleetAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListQueueFleetAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueueFleetAssociationsWithContext indicates an expected call of ListQueueFleetAssociationsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListQueueFleetAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueFleetAssociationsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueFleetAssociationsWithContext), varargs...)
}

// ListQueueMembers mocks base method
func (m *MockDeadlineAPI) ListQueueMembers(arg0 *deadline.ListQueueMembersInput) (*deadline.ListQueueMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueueMembers", arg0)
	ret0, _ := ret[0].(*deadline.ListQueueMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueueMembers indicates an expected call of ListQueueMembers
func (mr *MockDeadlineAPIMockRecorder) ListQueueMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueMembers", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueMembers), arg0)
}

// ListQueueMembersPages mocks base method
func (m *MockDeadlineAPI) ListQueueMembersPages(arg0 *deadline.ListQueueMembersInput, arg1 func(*deadline.ListQueueMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueueMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueueMembersPages indicates an expected call of ListQueueMembersPages
func (mr *MockDeadlineAPIMockRecorder) ListQueueMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueMembersPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueMembersPages), arg0, arg1)
}

// ListQueueMembersPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListQueueMembersPagesWithContext(arg0 context.Context, arg1 *deadline.ListQueueMembersInput, arg2 func(*deadline.ListQueueMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueueMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueueMembersPagesWithContext indicates an expected call of ListQueueMembersPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListQueueMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueMembersPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueMembersPagesWithContext), varargs...)
}

// ListQueueMembersRequest mocks base method
func (m *MockDeadlineAPI) ListQueueMembersRequest(arg0 *deadline.ListQueueMembersInput) (*request.Request, *deadline.ListQueueMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueueMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListQueueMembersOutput)
	return ret0, ret1
}

// ListQueueMembersRequest indicates an expected call of ListQueueMembersRequest
func (mr *MockDeadlineAPIMockRecorder) ListQueueMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueMembersRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueMembersRequest), arg0)
}

// ListQueueMembersWithContext mocks base method
func (m *MockDeadlineAPI) ListQueueMembersWithContext(arg0 context.Context, arg1 *deadline.ListQueueMembersInput, arg2 ...request.Option) (*deadline.ListQueueMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueueMembersWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListQueueMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueueMembersWithContext indicates an expected call of ListQueueMembersWithContext
func (mr *MockDeadlineAPIMockRecorder) ListQueueMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueMembersWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueueMembersWithContext), varargs...)
}

// ListQueues mocks base method
func (m *MockDeadlineAPI) ListQueues(arg0 *deadline.ListQueuesInput) (*deadline.ListQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueues", arg0)
	ret0, _ := ret[0].(*deadline.ListQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueues indicates an expected call of ListQueues
func (mr *MockDeadlineAPIMockRecorder) ListQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueues", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueues), arg0)
}

// ListQueuesPages mocks base method
func (m *MockDeadlineAPI) ListQueuesPages(arg0 *deadline.ListQueuesInput, arg1 func(*deadline.ListQueuesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueuesPages indicates an expected call of ListQueuesPages
func (mr *MockDeadlineAPIMockRecorder) ListQueuesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueuesPages), arg0, arg1)
}

// ListQueuesPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListQueuesPagesWithContext(arg0 context.Context, arg1 *deadline.ListQueuesInput, arg2 func(*deadline.ListQueuesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueuesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueuesPagesWithContext indicates an expected call of ListQueuesPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListQueuesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueuesPagesWithContext), varargs...)
}

// ListQueuesRequest mocks base method
func (m *MockDeadlineAPI) ListQueuesRequest(arg0 *deadline.ListQueuesInput) (*request.Request, *deadline.ListQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListQueuesOutput)
	return ret0, ret1
}

// ListQueuesRequest indicates an expected call of ListQueuesRequest
func (mr *MockDeadlineAPIMockRecorder) ListQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueuesRequest), arg0)
}

// ListQueuesWithContext mocks base method
func (m *MockDeadlineAPI) ListQueuesWithContext(arg0 context.Context, arg1 *deadline.ListQueuesInput, arg2 ...request.Option) (*deadline.ListQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueuesWithContext indicates an expected call of ListQueuesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListQueuesWithContext), varargs...)
}

// ListSessionActions mocks base method
func (m *MockDeadlineAPI) ListSessionActions(arg0 *deadline.ListSessionActionsInput) (*deadline.ListSessionActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionActions", arg0)
	ret0, _ := ret[0].(*deadline.ListSessionActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessionActions indicates an expected call of ListSessionActions
func (mr *MockDeadlineAPIMockRecorder) ListSessionActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionActions", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionActions), arg0)
}

// ListSessionActionsPages mocks base method
func (m *MockDeadlineAPI) ListSessionActionsPages(arg0 *deadline.ListSessionActionsInput, arg1 func(*deadline.ListSessionActionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionActionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSessionActionsPages indicates an expected call of ListSessionActionsPages
func (mr *MockDeadlineAPIMockRecorder) ListSessionActionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionActionsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionActionsPages), arg0, arg1)
}

// ListSessionActionsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListSessionActionsPagesWithContext(arg0 context.Context, arg1 *deadline.ListSessionActionsInput, arg2 func(*deadline.ListSessionActionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSessionActionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSessionActionsPagesWithContext indicates an expected call of ListSessionActionsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListSessionActionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionActionsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionActionsPagesWithContext), varargs...)
}

// ListSessionActionsRequest mocks base method
func (m *MockDeadlineAPI) ListSessionActionsRequest(arg0 *deadline.ListSessionActionsInput) (*request.Request, *deadline.ListSessionActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListSessionActionsOutput)
	return ret0, ret1
}

// ListSessionActionsRequest indicates an expected call of ListSessionActionsRequest
func (mr *MockDeadlineAPIMockRecorder) ListSessionActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionActionsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionActionsRequest), arg0)
}

// ListSessionActionsWithContext mocks base method
func (m *MockDeadlineAPI) ListSessionActionsWithContext(arg0 context.Context, arg1 *deadline.ListSessionActionsInput, arg2 ...request.Option) (*deadline.ListSessionActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSessionActionsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListSessionActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessionActionsWithContext indicates an expected call of ListSessionActionsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListSessionActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionActionsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionActionsWithContext), varargs...)
}

// ListSessions mocks base method
func (m *MockDeadlineAPI) ListSessions(arg0 *deadline.ListSessionsInput) (*deadline.ListSessionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessions", arg0)
	ret0, _ := ret[0].(*deadline.ListSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessions indicates an expected call of ListSessions
func (mr *MockDeadlineAPIMockRecorder) ListSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessions", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessions), arg0)
}

// ListSessionsForWorker mocks base method
func (m *MockDeadlineAPI) ListSessionsForWorker(arg0 *deadline.ListSessionsForWorkerInput) (*deadline.ListSessionsForWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionsForWorker", arg0)
	ret0, _ := ret[0].(*deadline.ListSessionsForWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessionsForWorker indicates an expected call of ListSessionsForWorker
func (mr *MockDeadlineAPIMockRecorder) ListSessionsForWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsForWorker", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionsForWorker), arg0)
}

// ListSessionsForWorkerPages mocks base method
func (m *MockDeadlineAPI) ListSessionsForWorkerPages(arg0 *deadline.ListSessionsForWorkerInput, arg1 func(*deadline.ListSessionsForWorkerOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionsForWorkerPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSessionsForWorkerPages indicates an expected call of ListSessionsForWorkerPages
func (mr *MockDeadlineAPIMockRecorder) ListSessionsForWorkerPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsForWorkerPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionsForWorkerPages), arg0, arg1)
}

// ListSessionsForWorkerPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListSessionsForWorkerPagesWithContext(arg0 context.Context, arg1 *deadline.ListSessionsForWorkerInput, arg2 func(*deadline.ListSessionsForWorkerOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSessionsForWorkerPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSessionsForWorkerPagesWithContext indicates an expected call of ListSessionsForWorkerPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListSessionsForWorkerPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsForWorkerPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionsForWorkerPagesWithContext), varargs...)
}

// ListSessionsForWorkerRequest mocks base method
func (m *MockDeadlineAPI) ListSessionsForWorkerRequest(arg0 *deadline.ListSessionsForWorkerInput) (*request.Request, *deadline.ListSessionsForWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionsForWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListSessionsForWorkerOutput)
	return ret0, ret1
}

// ListSessionsForWorkerRequest indicates an expected call of ListSessionsForWorkerRequest
func (mr *MockDeadlineAPIMockRecorder) ListSessionsForWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsForWorkerRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionsForWorkerRequest), arg0)
}

// ListSessionsForWorkerWithContext mocks base method
func (m *MockDeadlineAPI) ListSessionsForWorkerWithContext(arg0 context.Context, arg1 *deadline.ListSessionsForWorkerInput, arg2 ...request.Option) (*deadline.ListSessionsForWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSessionsForWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListSessionsForWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessionsForWorkerWithContext indicates an expected call of ListSessionsForWorkerWithContext
func (mr *MockDeadlineAPIMockRecorder) ListSessionsForWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsForWorkerWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionsForWorkerWithContext), varargs...)
}

// ListSessionsPages mocks base method
func (m *MockDeadlineAPI) ListSessionsPages(arg0 *deadline.ListSessionsInput, arg1 func(*deadline.ListSessionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSessionsPages indicates an expected call of ListSessionsPages
func (mr *MockDeadlineAPIMockRecorder) ListSessionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionsPages), arg0, arg1)
}

// ListSessionsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListSessionsPagesWithContext(arg0 context.Context, arg1 *deadline.ListSessionsInput, arg2 func(*deadline.ListSessionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSessionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSessionsPagesWithContext indicates an expected call of ListSessionsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListSessionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionsPagesWithContext), varargs...)
}

// ListSessionsRequest mocks base method
func (m *MockDeadlineAPI) ListSessionsRequest(arg0 *deadline.ListSessionsInput) (*request.Request, *deadline.ListSessionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListSessionsOutput)
	return ret0, ret1
}

// ListSessionsRequest indicates an expected call of ListSessionsRequest
func (mr *MockDeadlineAPIMockRecorder) ListSessionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionsRequest), arg0)
}

// ListSessionsWithContext mocks base method
func (m *MockDeadlineAPI) ListSessionsWithContext(arg0 context.Context, arg1 *deadline.ListSessionsInput, arg2 ...request.Option) (*deadline.ListSessionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSessionsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessionsWithContext indicates an expected call of ListSessionsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListSessionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSessionsWithContext), varargs...)
}

// ListStepConsumers mocks base method
func (m *MockDeadlineAPI) ListStepConsumers(arg0 *deadline.ListStepConsumersInput) (*deadline.ListStepConsumersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStepConsumers", arg0)
	ret0, _ := ret[0].(*deadline.ListStepConsumersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStepConsumers indicates an expected call of ListStepConsumers
func (mr *MockDeadlineAPIMockRecorder) ListStepConsumers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepConsumers", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepConsumers), arg0)
}

// ListStepConsumersPages mocks base method
func (m *MockDeadlineAPI) ListStepConsumersPages(arg0 *deadline.ListStepConsumersInput, arg1 func(*deadline.ListStepConsumersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStepConsumersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStepConsumersPages indicates an expected call of ListStepConsumersPages
func (mr *MockDeadlineAPIMockRecorder) ListStepConsumersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepConsumersPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepConsumersPages), arg0, arg1)
}

// ListStepConsumersPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListStepConsumersPagesWithContext(arg0 context.Context, arg1 *deadline.ListStepConsumersInput, arg2 func(*deadline.ListStepConsumersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStepConsumersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStepConsumersPagesWithContext indicates an expected call of ListStepConsumersPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListStepConsumersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepConsumersPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepConsumersPagesWithContext), varargs...)
}

// ListStepConsumersRequest mocks base method
func (m *MockDeadlineAPI) ListStepConsumersRequest(arg0 *deadline.ListStepConsumersInput) (*request.Request, *deadline.ListStepConsumersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStepConsumersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListStepConsumersOutput)
	return ret0, ret1
}

// ListStepConsumersRequest indicates an expected call of ListStepConsumersRequest
func (mr *MockDeadlineAPIMockRecorder) ListStepConsumersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepConsumersRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepConsumersRequest), arg0)
}

// ListStepConsumersWithContext mocks base method
func (m *MockDeadlineAPI) ListStepConsumersWithContext(arg0 context.Context, arg1 *deadline.ListStepConsumersInput, arg2 ...request.Option) (*deadline.ListStepConsumersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStepConsumersWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListStepConsumersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStepConsumersWithContext indicates an expected call of ListStepConsumersWithContext
func (mr *MockDeadlineAPIMockRecorder) ListStepConsumersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepConsumersWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepConsumersWithContext), varargs...)
}

// ListStepDependencies mocks base method
func (m *MockDeadlineAPI) ListStepDependencies(arg0 *deadline.ListStepDependenciesInput) (*deadline.ListStepDependenciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStepDependencies", arg0)
	ret0, _ := ret[0].(*deadline.ListStepDependenciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStepDependencies indicates an expected call of ListStepDependencies
func (mr *MockDeadlineAPIMockRecorder) ListStepDependencies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepDependencies", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepDependencies), arg0)
}

// ListStepDependenciesPages mocks base method
func (m *MockDeadlineAPI) ListStepDependenciesPages(arg0 *deadline.ListStepDependenciesInput, arg1 func(*deadline.ListStepDependenciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStepDependenciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStepDependenciesPages indicates an expected call of ListStepDependenciesPages
func (mr *MockDeadlineAPIMockRecorder) ListStepDependenciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepDependenciesPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepDependenciesPages), arg0, arg1)
}

// ListStepDependenciesPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListStepDependenciesPagesWithContext(arg0 context.Context, arg1 *deadline.ListStepDependenciesInput, arg2 func(*deadline.ListStepDependenciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStepDependenciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStepDependenciesPagesWithContext indicates an expected call of ListStepDependenciesPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListStepDependenciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepDependenciesPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepDependenciesPagesWithContext), varargs...)
}

// ListStepDependenciesRequest mocks base method
func (m *MockDeadlineAPI) ListStepDependenciesRequest(arg0 *deadline.ListStepDependenciesInput) (*request.Request, *deadline.ListStepDependenciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStepDependenciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListStepDependenciesOutput)
	return ret0, ret1
}

// ListStepDependenciesRequest indicates an expected call of ListStepDependenciesRequest
func (mr *MockDeadlineAPIMockRecorder) ListStepDependenciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepDependenciesRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepDependenciesRequest), arg0)
}

// ListStepDependenciesWithContext mocks base method
func (m *MockDeadlineAPI) ListStepDependenciesWithContext(arg0 context.Context, arg1 *deadline.ListStepDependenciesInput, arg2 ...request.Option) (*deadline.ListStepDependenciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStepDependenciesWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListStepDependenciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStepDependenciesWithContext indicates an expected call of ListStepDependenciesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListStepDependenciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepDependenciesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepDependenciesWithContext), varargs...)
}

// ListSteps mocks base method
func (m *MockDeadlineAPI) ListSteps(arg0 *deadline.ListStepsInput) (*deadline.ListStepsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSteps", arg0)
	ret0, _ := ret[0].(*deadline.ListStepsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSteps indicates an expected call of ListSteps
func (mr *MockDeadlineAPIMockRecorder) ListSteps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSteps", reflect.TypeOf((*MockDeadlineAPI)(nil).ListSteps), arg0)
}

// ListStepsPages mocks base method
func (m *MockDeadlineAPI) ListStepsPages(arg0 *deadline.ListStepsInput, arg1 func(*deadline.ListStepsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStepsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStepsPages indicates an expected call of ListStepsPages
func (mr *MockDeadlineAPIMockRecorder) ListStepsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepsPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepsPages), arg0, arg1)
}

// ListStepsPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListStepsPagesWithContext(arg0 context.Context, arg1 *deadline.ListStepsInput, arg2 func(*deadline.ListStepsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStepsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStepsPagesWithContext indicates an expected call of ListStepsPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListStepsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepsPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepsPagesWithContext), varargs...)
}

// ListStepsRequest mocks base method
func (m *MockDeadlineAPI) ListStepsRequest(arg0 *deadline.ListStepsInput) (*request.Request, *deadline.ListStepsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStepsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListStepsOutput)
	return ret0, ret1
}

// ListStepsRequest indicates an expected call of ListStepsRequest
func (mr *MockDeadlineAPIMockRecorder) ListStepsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepsRequest), arg0)
}

// ListStepsWithContext mocks base method
func (m *MockDeadlineAPI) ListStepsWithContext(arg0 context.Context, arg1 *deadline.ListStepsInput, arg2 ...request.Option) (*deadline.ListStepsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStepsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListStepsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStepsWithContext indicates an expected call of ListStepsWithContext
func (mr *MockDeadlineAPIMockRecorder) ListStepsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStepsWithContext), varargs...)
}

// ListStorageProfiles mocks base method
func (m *MockDeadlineAPI) ListStorageProfiles(arg0 *deadline.ListStorageProfilesInput) (*deadline.ListStorageProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageProfiles", arg0)
	ret0, _ := ret[0].(*deadline.ListStorageProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageProfiles indicates an expected call of ListStorageProfiles
func (mr *MockDeadlineAPIMockRecorder) ListStorageProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageProfiles", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStorageProfiles), arg0)
}

// ListStorageProfilesForQueue mocks base method
func (m *MockDeadlineAPI) ListStorageProfilesForQueue(arg0 *deadline.ListStorageProfilesForQueueInput) (*deadline.ListStorageProfilesForQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageProfilesForQueue", arg0)
	ret0, _ := ret[0].(*deadline.ListStorageProfilesForQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageProfilesForQueue indicates an expected call of ListStorageProfilesForQueue
func (mr *MockDeadlineAPIMockRecorder) ListStorageProfilesForQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageProfilesForQueue", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStorageProfilesForQueue), arg0)
}

// ListStorageProfilesForQueuePages mocks base method
func (m *MockDeadlineAPI) ListStorageProfilesForQueuePages(arg0 *deadline.ListStorageProfilesForQueueInput, arg1 func(*deadline.ListStorageProfilesForQueueOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageProfilesForQueuePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStorageProfilesForQueuePages indicates an expected call of ListStorageProfilesForQueuePages
func (mr *MockDeadlineAPIMockRecorder) ListStorageProfilesForQueuePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageProfilesForQueuePages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStorageProfilesForQueuePages), arg0, arg1)
}

// ListStorageProfilesForQueuePagesWithContext mocks base method
func (m *MockDeadlineAPI) ListStorageProfilesForQueuePagesWithContext(arg0 context.Context, arg1 *deadline.ListStorageProfilesForQueueInput, arg2 func(*deadline.ListStorageProfilesForQueueOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStorageProfilesForQueuePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStorageProfilesForQueuePagesWithContext indicates an expected call of ListStorageProfilesForQueuePagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListStorageProfilesForQueuePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageProfilesForQueuePagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStorageProfilesForQueuePagesWithContext), varargs...)
}

// ListStorageProfilesForQueueRequest mocks base method
func (m *MockDeadlineAPI) ListStorageProfilesForQueueRequest(arg0 *deadline.ListStorageProfilesForQueueInput) (*request.Request, *deadline.ListStorageProfilesForQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageProfilesForQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListStorageProfilesForQueueOutput)
	return ret0, ret1
}

// ListStorageProfilesForQueueRequest indicates an expected call of ListStorageProfilesForQueueRequest
func (mr *MockDeadlineAPIMockRecorder) ListStorageProfilesForQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageProfilesForQueueRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStorageProfilesForQueueRequest), arg0)
}

// ListStorageProfilesForQueueWithContext mocks base method
func (m *MockDeadlineAPI) ListStorageProfilesForQueueWithContext(arg0 context.Context, arg1 *deadline.ListStorageProfilesForQueueInput, arg2 ...request.Option) (*deadline.ListStorageProfilesForQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStorageProfilesForQueueWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListStorageProfilesForQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageProfilesForQueueWithContext indicates an expected call of ListStorageProfilesForQueueWithContext
func (mr *MockDeadlineAPIMockRecorder) ListStorageProfilesForQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageProfilesForQueueWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStorageProfilesForQueueWithContext), varargs...)
}

// ListStorageProfilesPages mocks base method
func (m *MockDeadlineAPI) ListStorageProfilesPages(arg0 *deadline.ListStorageProfilesInput, arg1 func(*deadline.ListStorageProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStorageProfilesPages indicates an expected call of ListStorageProfilesPages
func (mr *MockDeadlineAPIMockRecorder) ListStorageProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageProfilesPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStorageProfilesPages), arg0, arg1)
}

// ListStorageProfilesPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListStorageProfilesPagesWithContext(arg0 context.Context, arg1 *deadline.ListStorageProfilesInput, arg2 func(*deadline.ListStorageProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStorageProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStorageProfilesPagesWithContext indicates an expected call of ListStorageProfilesPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListStorageProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageProfilesPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStorageProfilesPagesWithContext), varargs...)
}

// ListStorageProfilesRequest mocks base method
func (m *MockDeadlineAPI) ListStorageProfilesRequest(arg0 *deadline.ListStorageProfilesInput) (*request.Request, *deadline.ListStorageProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListStorageProfilesOutput)
	return ret0, ret1
}

// ListStorageProfilesRequest indicates an expected call of ListStorageProfilesRequest
func (mr *MockDeadlineAPIMockRecorder) ListStorageProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageProfilesRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStorageProfilesRequest), arg0)
}

// ListStorageProfilesWithContext mocks base method
func (m *MockDeadlineAPI) ListStorageProfilesWithContext(arg0 context.Context, arg1 *deadline.ListStorageProfilesInput, arg2 ...request.Option) (*deadline.ListStorageProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStorageProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListStorageProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageProfilesWithContext indicates an expected call of ListStorageProfilesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListStorageProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageProfilesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListStorageProfilesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockDeadlineAPI) ListTagsForResource(arg0 *deadline.ListTagsForResourceInput) (*deadline.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*deadline.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockDeadlineAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDeadlineAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockDeadlineAPI) ListTagsForResourceRequest(arg0 *deadline.ListTagsForResourceInput) (*request.Request, *deadline.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockDeadlineAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockDeadlineAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *deadline.ListTagsForResourceInput, arg2 ...request.Option) (*deadline.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockDeadlineAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTasks mocks base method
func (m *MockDeadlineAPI) ListTasks(arg0 *deadline.ListTasksInput) (*deadline.ListTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", arg0)
	ret0, _ := ret[0].(*deadline.ListTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks
func (mr *MockDeadlineAPIMockRecorder) ListTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockDeadlineAPI)(nil).ListTasks), arg0)
}

// ListTasksPages mocks base method
func (m *MockDeadlineAPI) ListTasksPages(arg0 *deadline.ListTasksInput, arg1 func(*deadline.ListTasksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTasksPages indicates an expected call of ListTasksPages
func (mr *MockDeadlineAPIMockRecorder) ListTasksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListTasksPages), arg0, arg1)
}

// ListTasksPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListTasksPagesWithContext(arg0 context.Context, arg1 *deadline.ListTasksInput, arg2 func(*deadline.ListTasksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTasksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTasksPagesWithContext indicates an expected call of ListTasksPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListTasksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListTasksPagesWithContext), varargs...)
}

// ListTasksRequest mocks base method
func (m *MockDeadlineAPI) ListTasksRequest(arg0 *deadline.ListTasksInput) (*request.Request, *deadline.ListTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListTasksOutput)
	return ret0, ret1
}

// ListTasksRequest indicates an expected call of ListTasksRequest
func (mr *MockDeadlineAPIMockRecorder) ListTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListTasksRequest), arg0)
}

// ListTasksWithContext mocks base method
func (m *MockDeadlineAPI) ListTasksWithContext(arg0 context.Context, arg1 *deadline.ListTasksInput, arg2 ...request.Option) (*deadline.ListTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTasksWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasksWithContext indicates an expected call of ListTasksWithContext
func (mr *MockDeadlineAPIMockRecorder) ListTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListTasksWithContext), varargs...)
}

// ListWorkers mocks base method
func (m *MockDeadlineAPI) ListWorkers(arg0 *deadline.ListWorkersInput) (*deadline.ListWorkersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkers", arg0)
	ret0, _ := ret[0].(*deadline.ListWorkersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkers indicates an expected call of ListWorkers
func (mr *MockDeadlineAPIMockRecorder) ListWorkers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkers", reflect.TypeOf((*MockDeadlineAPI)(nil).ListWorkers), arg0)
}

// ListWorkersPages mocks base method
func (m *MockDeadlineAPI) ListWorkersPages(arg0 *deadline.ListWorkersInput, arg1 func(*deadline.ListWorkersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkersPages indicates an expected call of ListWorkersPages
func (mr *MockDeadlineAPIMockRecorder) ListWorkersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkersPages", reflect.TypeOf((*MockDeadlineAPI)(nil).ListWorkersPages), arg0, arg1)
}

// ListWorkersPagesWithContext mocks base method
func (m *MockDeadlineAPI) ListWorkersPagesWithContext(arg0 context.Context, arg1 *deadline.ListWorkersInput, arg2 func(*deadline.ListWorkersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkersPagesWithContext indicates an expected call of ListWorkersPagesWithContext
func (mr *MockDeadlineAPIMockRecorder) ListWorkersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkersPagesWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListWorkersPagesWithContext), varargs...)
}

// ListWorkersRequest mocks base method
func (m *MockDeadlineAPI) ListWorkersRequest(arg0 *deadline.ListWorkersInput) (*request.Request, *deadline.ListWorkersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.ListWorkersOutput)
	return ret0, ret1
}

// ListWorkersRequest indicates an expected call of ListWorkersRequest
func (mr *MockDeadlineAPIMockRecorder) ListWorkersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkersRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).ListWorkersRequest), arg0)
}

// ListWorkersWithContext mocks base method
func (m *MockDeadlineAPI) ListWorkersWithContext(arg0 context.Context, arg1 *deadline.ListWorkersInput, arg2 ...request.Option) (*deadline.ListWorkersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkersWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.ListWorkersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkersWithContext indicates an expected call of ListWorkersWithContext
func (mr *MockDeadlineAPIMockRecorder) ListWorkersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkersWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).ListWorkersWithContext), varargs...)
}

// PutMeteredProduct mocks base method
func (m *MockDeadlineAPI) PutMeteredProduct(arg0 *deadline.PutMeteredProductInput) (*deadline.PutMeteredProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMeteredProduct", arg0)
	ret0, _ := ret[0].(*deadline.PutMeteredProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMeteredProduct indicates an expected call of PutMeteredProduct
func (mr *MockDeadlineAPIMockRecorder) PutMeteredProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMeteredProduct", reflect.TypeOf((*MockDeadlineAPI)(nil).PutMeteredProduct), arg0)
}

// PutMeteredProductRequest mocks base method
func (m *MockDeadlineAPI) PutMeteredProductRequest(arg0 *deadline.PutMeteredProductInput) (*request.Request, *deadline.PutMeteredProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMeteredProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.PutMeteredProductOutput)
	return ret0, ret1
}

// PutMeteredProductRequest indicates an expected call of PutMeteredProductRequest
func (mr *MockDeadlineAPIMockRecorder) PutMeteredProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMeteredProductRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).PutMeteredProductRequest), arg0)
}

// PutMeteredProductWithContext mocks base method
func (m *MockDeadlineAPI) PutMeteredProductWithContext(arg0 context.Context, arg1 *deadline.PutMeteredProductInput, arg2 ...request.Option) (*deadline.PutMeteredProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMeteredProductWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.PutMeteredProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMeteredProductWithContext indicates an expected call of PutMeteredProductWithContext
func (mr *MockDeadlineAPIMockRecorder) PutMeteredProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMeteredProductWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).PutMeteredProductWithContext), varargs...)
}

// SearchJobs mocks base method
func (m *MockDeadlineAPI) SearchJobs(arg0 *deadline.SearchJobsInput) (*deadline.SearchJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchJobs", arg0)
	ret0, _ := ret[0].(*deadline.SearchJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchJobs indicates an expected call of SearchJobs
func (mr *MockDeadlineAPIMockRecorder) SearchJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchJobs", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchJobs), arg0)
}

// SearchJobsRequest mocks base method
func (m *MockDeadlineAPI) SearchJobsRequest(arg0 *deadline.SearchJobsInput) (*request.Request, *deadline.SearchJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.SearchJobsOutput)
	return ret0, ret1
}

// SearchJobsRequest indicates an expected call of SearchJobsRequest
func (mr *MockDeadlineAPIMockRecorder) SearchJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchJobsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchJobsRequest), arg0)
}

// SearchJobsWithContext mocks base method
func (m *MockDeadlineAPI) SearchJobsWithContext(arg0 context.Context, arg1 *deadline.SearchJobsInput, arg2 ...request.Option) (*deadline.SearchJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchJobsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.SearchJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchJobsWithContext indicates an expected call of SearchJobsWithContext
func (mr *MockDeadlineAPIMockRecorder) SearchJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchJobsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchJobsWithContext), varargs...)
}

// SearchSteps mocks base method
func (m *MockDeadlineAPI) SearchSteps(arg0 *deadline.SearchStepsInput) (*deadline.SearchStepsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSteps", arg0)
	ret0, _ := ret[0].(*deadline.SearchStepsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSteps indicates an expected call of SearchSteps
func (mr *MockDeadlineAPIMockRecorder) SearchSteps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSteps", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchSteps), arg0)
}

// SearchStepsRequest mocks base method
func (m *MockDeadlineAPI) SearchStepsRequest(arg0 *deadline.SearchStepsInput) (*request.Request, *deadline.SearchStepsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStepsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.SearchStepsOutput)
	return ret0, ret1
}

// SearchStepsRequest indicates an expected call of SearchStepsRequest
func (mr *MockDeadlineAPIMockRecorder) SearchStepsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStepsRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchStepsRequest), arg0)
}

// SearchStepsWithContext mocks base method
func (m *MockDeadlineAPI) SearchStepsWithContext(arg0 context.Context, arg1 *deadline.SearchStepsInput, arg2 ...request.Option) (*deadline.SearchStepsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchStepsWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.SearchStepsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStepsWithContext indicates an expected call of SearchStepsWithContext
func (mr *MockDeadlineAPIMockRecorder) SearchStepsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStepsWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchStepsWithContext), varargs...)
}

// SearchTasks mocks base method
func (m *MockDeadlineAPI) SearchTasks(arg0 *deadline.SearchTasksInput) (*deadline.SearchTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTasks", arg0)
	ret0, _ := ret[0].(*deadline.SearchTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTasks indicates an expected call of SearchTasks
func (mr *MockDeadlineAPIMockRecorder) SearchTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTasks", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchTasks), arg0)
}

// SearchTasksRequest mocks base method
func (m *MockDeadlineAPI) SearchTasksRequest(arg0 *deadline.SearchTasksInput) (*request.Request, *deadline.SearchTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.SearchTasksOutput)
	return ret0, ret1
}

// SearchTasksRequest indicates an expected call of SearchTasksRequest
func (mr *MockDeadlineAPIMockRecorder) SearchTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTasksRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchTasksRequest), arg0)
}

// SearchTasksWithContext mocks base method
func (m *MockDeadlineAPI) SearchTasksWithContext(arg0 context.Context, arg1 *deadline.SearchTasksInput, arg2 ...request.Option) (*deadline.SearchTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTasksWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.SearchTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTasksWithContext indicates an expected call of SearchTasksWithContext
func (mr *MockDeadlineAPIMockRecorder) SearchTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTasksWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchTasksWithContext), varargs...)
}

// SearchWorkers mocks base method
func (m *MockDeadlineAPI) SearchWorkers(arg0 *deadline.SearchWorkersInput) (*deadline.SearchWorkersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWorkers", arg0)
	ret0, _ := ret[0].(*deadline.SearchWorkersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWorkers indicates an expected call of SearchWorkers
func (mr *MockDeadlineAPIMockRecorder) SearchWorkers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWorkers", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchWorkers), arg0)
}

// SearchWorkersRequest mocks base method
func (m *MockDeadlineAPI) SearchWorkersRequest(arg0 *deadline.SearchWorkersInput) (*request.Request, *deadline.SearchWorkersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWorkersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.SearchWorkersOutput)
	return ret0, ret1
}

// SearchWorkersRequest indicates an expected call of SearchWorkersRequest
func (mr *MockDeadlineAPIMockRecorder) SearchWorkersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWorkersRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchWorkersRequest), arg0)
}

// SearchWorkersWithContext mocks base method
func (m *MockDeadlineAPI) SearchWorkersWithContext(arg0 context.Context, arg1 *deadline.SearchWorkersInput, arg2 ...request.Option) (*deadline.SearchWorkersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchWorkersWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.SearchWorkersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWorkersWithContext indicates an expected call of SearchWorkersWithContext
func (mr *MockDeadlineAPIMockRecorder) SearchWorkersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWorkersWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).SearchWorkersWithContext), varargs...)
}

// StartSessionsStatisticsAggregation mocks base method
func (m *MockDeadlineAPI) StartSessionsStatisticsAggregation(arg0 *deadline.StartSessionsStatisticsAggregationInput) (*deadline.StartSessionsStatisticsAggregationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSessionsStatisticsAggregation", arg0)
	ret0, _ := ret[0].(*deadline.StartSessionsStatisticsAggregationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSessionsStatisticsAggregation indicates an expected call of StartSessionsStatisticsAggregation
func (mr *MockDeadlineAPIMockRecorder) StartSessionsStatisticsAggregation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSessionsStatisticsAggregation", reflect.TypeOf((*MockDeadlineAPI)(nil).StartSessionsStatisticsAggregation), arg0)
}

// StartSessionsStatisticsAggregationRequest mocks base method
func (m *MockDeadlineAPI) StartSessionsStatisticsAggregationRequest(arg0 *deadline.StartSessionsStatisticsAggregationInput) (*request.Request, *deadline.StartSessionsStatisticsAggregationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSessionsStatisticsAggregationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.StartSessionsStatisticsAggregationOutput)
	return ret0, ret1
}

// StartSessionsStatisticsAggregationRequest indicates an expected call of StartSessionsStatisticsAggregationRequest
func (mr *MockDeadlineAPIMockRecorder) StartSessionsStatisticsAggregationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSessionsStatisticsAggregationRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).StartSessionsStatisticsAggregationRequest), arg0)
}

// StartSessionsStatisticsAggregationWithContext mocks base method
func (m *MockDeadlineAPI) StartSessionsStatisticsAggregationWithContext(arg0 context.Context, arg1 *deadline.StartSessionsStatisticsAggregationInput, arg2 ...request.Option) (*deadline.StartSessionsStatisticsAggregationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSessionsStatisticsAggregationWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.StartSessionsStatisticsAggregationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSessionsStatisticsAggregationWithContext indicates an expected call of StartSessionsStatisticsAggregationWithContext
func (mr *MockDeadlineAPIMockRecorder) StartSessionsStatisticsAggregationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSessionsStatisticsAggregationWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).StartSessionsStatisticsAggregationWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockDeadlineAPI) TagResource(arg0 *deadline.TagResourceInput) (*deadline.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*deadline.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockDeadlineAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockDeadlineAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockDeadlineAPI) TagResourceRequest(arg0 *deadline.TagResourceInput) (*request.Request, *deadline.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockDeadlineAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockDeadlineAPI) TagResourceWithContext(arg0 context.Context, arg1 *deadline.TagResourceInput, arg2 ...request.Option) (*deadline.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockDeadlineAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockDeadlineAPI) UntagResource(arg0 *deadline.UntagResourceInput) (*deadline.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*deadline.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockDeadlineAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockDeadlineAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockDeadlineAPI) UntagResourceRequest(arg0 *deadline.UntagResourceInput) (*request.Request, *deadline.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockDeadlineAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockDeadlineAPI) UntagResourceWithContext(arg0 context.Context, arg1 *deadline.UntagResourceInput, arg2 ...request.Option) (*deadline.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockDeadlineAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateBudget mocks base method
func (m *MockDeadlineAPI) UpdateBudget(arg0 *deadline.UpdateBudgetInput) (*deadline.UpdateBudgetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBudget", arg0)
	ret0, _ := ret[0].(*deadline.UpdateBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBudget indicates an expected call of UpdateBudget
func (mr *MockDeadlineAPIMockRecorder) UpdateBudget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBudget", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateBudget), arg0)
}

// UpdateBudgetRequest mocks base method
func (m *MockDeadlineAPI) UpdateBudgetRequest(arg0 *deadline.UpdateBudgetInput) (*request.Request, *deadline.UpdateBudgetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBudgetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateBudgetOutput)
	return ret0, ret1
}

// UpdateBudgetRequest indicates an expected call of UpdateBudgetRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateBudgetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBudgetRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateBudgetRequest), arg0)
}

// UpdateBudgetWithContext mocks base method
func (m *MockDeadlineAPI) UpdateBudgetWithContext(arg0 context.Context, arg1 *deadline.UpdateBudgetInput, arg2 ...request.Option) (*deadline.UpdateBudgetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBudgetWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBudgetWithContext indicates an expected call of UpdateBudgetWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateBudgetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBudgetWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateBudgetWithContext), varargs...)
}

// UpdateFarm mocks base method
func (m *MockDeadlineAPI) UpdateFarm(arg0 *deadline.UpdateFarmInput) (*deadline.UpdateFarmOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFarm", arg0)
	ret0, _ := ret[0].(*deadline.UpdateFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFarm indicates an expected call of UpdateFarm
func (mr *MockDeadlineAPIMockRecorder) UpdateFarm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFarm", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateFarm), arg0)
}

// UpdateFarmRequest mocks base method
func (m *MockDeadlineAPI) UpdateFarmRequest(arg0 *deadline.UpdateFarmInput) (*request.Request, *deadline.UpdateFarmOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFarmRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateFarmOutput)
	return ret0, ret1
}

// UpdateFarmRequest indicates an expected call of UpdateFarmRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateFarmRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFarmRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateFarmRequest), arg0)
}

// UpdateFarmWithContext mocks base method
func (m *MockDeadlineAPI) UpdateFarmWithContext(arg0 context.Context, arg1 *deadline.UpdateFarmInput, arg2 ...request.Option) (*deadline.UpdateFarmOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFarmWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateFarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFarmWithContext indicates an expected call of UpdateFarmWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateFarmWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFarmWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateFarmWithContext), varargs...)
}

// UpdateFleet mocks base method
func (m *MockDeadlineAPI) UpdateFleet(arg0 *deadline.UpdateFleetInput) (*deadline.UpdateFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFleet", arg0)
	ret0, _ := ret[0].(*deadline.UpdateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFleet indicates an expected call of UpdateFleet
func (mr *MockDeadlineAPIMockRecorder) UpdateFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleet", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateFleet), arg0)
}

// UpdateFleetRequest mocks base method
func (m *MockDeadlineAPI) UpdateFleetRequest(arg0 *deadline.UpdateFleetInput) (*request.Request, *deadline.UpdateFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateFleetOutput)
	return ret0, ret1
}

// UpdateFleetRequest indicates an expected call of UpdateFleetRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleetRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateFleetRequest), arg0)
}

// UpdateFleetWithContext mocks base method
func (m *MockDeadlineAPI) UpdateFleetWithContext(arg0 context.Context, arg1 *deadline.UpdateFleetInput, arg2 ...request.Option) (*deadline.UpdateFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFleetWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFleetWithContext indicates an expected call of UpdateFleetWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleetWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateFleetWithContext), varargs...)
}

// UpdateJob mocks base method
func (m *MockDeadlineAPI) UpdateJob(arg0 *deadline.UpdateJobInput) (*deadline.UpdateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", arg0)
	ret0, _ := ret[0].(*deadline.UpdateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJob indicates an expected call of UpdateJob
func (mr *MockDeadlineAPIMockRecorder) UpdateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateJob), arg0)
}

// UpdateJobRequest mocks base method
func (m *MockDeadlineAPI) UpdateJobRequest(arg0 *deadline.UpdateJobInput) (*request.Request, *deadline.UpdateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateJobOutput)
	return ret0, ret1
}

// UpdateJobRequest indicates an expected call of UpdateJobRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateJobRequest), arg0)
}

// UpdateJobWithContext mocks base method
func (m *MockDeadlineAPI) UpdateJobWithContext(arg0 context.Context, arg1 *deadline.UpdateJobInput, arg2 ...request.Option) (*deadline.UpdateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobWithContext indicates an expected call of UpdateJobWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateJobWithContext), varargs...)
}

// UpdateMonitor mocks base method
func (m *MockDeadlineAPI) UpdateMonitor(arg0 *deadline.UpdateMonitorInput) (*deadline.UpdateMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitor", arg0)
	ret0, _ := ret[0].(*deadline.UpdateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonitor indicates an expected call of UpdateMonitor
func (mr *MockDeadlineAPIMockRecorder) UpdateMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitor", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateMonitor), arg0)
}

// UpdateMonitorRequest mocks base method
func (m *MockDeadlineAPI) UpdateMonitorRequest(arg0 *deadline.UpdateMonitorInput) (*request.Request, *deadline.UpdateMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateMonitorOutput)
	return ret0, ret1
}

// UpdateMonitorRequest indicates an expected call of UpdateMonitorRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitorRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateMonitorRequest), arg0)
}

// UpdateMonitorWithContext mocks base method
func (m *MockDeadlineAPI) UpdateMonitorWithContext(arg0 context.Context, arg1 *deadline.UpdateMonitorInput, arg2 ...request.Option) (*deadline.UpdateMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonitorWithContext indicates an expected call of UpdateMonitorWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitorWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateMonitorWithContext), varargs...)
}

// UpdateQueue mocks base method
func (m *MockDeadlineAPI) UpdateQueue(arg0 *deadline.UpdateQueueInput) (*deadline.UpdateQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueue", arg0)
	ret0, _ := ret[0].(*deadline.UpdateQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueue indicates an expected call of UpdateQueue
func (mr *MockDeadlineAPIMockRecorder) UpdateQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueue", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateQueue), arg0)
}

// UpdateQueueEnvironment mocks base method
func (m *MockDeadlineAPI) UpdateQueueEnvironment(arg0 *deadline.UpdateQueueEnvironmentInput) (*deadline.UpdateQueueEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueEnvironment", arg0)
	ret0, _ := ret[0].(*deadline.UpdateQueueEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueEnvironment indicates an expected call of UpdateQueueEnvironment
func (mr *MockDeadlineAPIMockRecorder) UpdateQueueEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueEnvironment", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateQueueEnvironment), arg0)
}

// UpdateQueueEnvironmentRequest mocks base method
func (m *MockDeadlineAPI) UpdateQueueEnvironmentRequest(arg0 *deadline.UpdateQueueEnvironmentInput) (*request.Request, *deadline.UpdateQueueEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateQueueEnvironmentOutput)
	return ret0, ret1
}

// UpdateQueueEnvironmentRequest indicates an expected call of UpdateQueueEnvironmentRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateQueueEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueEnvironmentRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateQueueEnvironmentRequest), arg0)
}

// UpdateQueueEnvironmentWithContext mocks base method
func (m *MockDeadlineAPI) UpdateQueueEnvironmentWithContext(arg0 context.Context, arg1 *deadline.UpdateQueueEnvironmentInput, arg2 ...request.Option) (*deadline.UpdateQueueEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQueueEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateQueueEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueEnvironmentWithContext indicates an expected call of UpdateQueueEnvironmentWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateQueueEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueEnvironmentWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateQueueEnvironmentWithContext), varargs...)
}

// UpdateQueueFleetAssociation mocks base method
func (m *MockDeadlineAPI) UpdateQueueFleetAssociation(arg0 *deadline.UpdateQueueFleetAssociationInput) (*deadline.UpdateQueueFleetAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueFleetAssociation", arg0)
	ret0, _ := ret[0].(*deadline.UpdateQueueFleetAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueFleetAssociation indicates an expected call of UpdateQueueFleetAssociation
func (mr *MockDeadlineAPIMockRecorder) UpdateQueueFleetAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueFleetAssociation", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateQueueFleetAssociation), arg0)
}

// UpdateQueueFleetAssociationRequest mocks base method
func (m *MockDeadlineAPI) UpdateQueueFleetAssociationRequest(arg0 *deadline.UpdateQueueFleetAssociationInput) (*request.Request, *deadline.UpdateQueueFleetAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueFleetAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateQueueFleetAssociationOutput)
	return ret0, ret1
}

// UpdateQueueFleetAssociationRequest indicates an expected call of UpdateQueueFleetAssociationRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateQueueFleetAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueFleetAssociationRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateQueueFleetAssociationRequest), arg0)
}

// UpdateQueueFleetAssociationWithContext mocks base method
func (m *MockDeadlineAPI) UpdateQueueFleetAssociationWithContext(arg0 context.Context, arg1 *deadline.UpdateQueueFleetAssociationInput, arg2 ...request.Option) (*deadline.UpdateQueueFleetAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQueueFleetAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateQueueFleetAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueFleetAssociationWithContext indicates an expected call of UpdateQueueFleetAssociationWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateQueueFleetAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueFleetAssociationWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateQueueFleetAssociationWithContext), varargs...)
}

// UpdateQueueRequest mocks base method
func (m *MockDeadlineAPI) UpdateQueueRequest(arg0 *deadline.UpdateQueueInput) (*request.Request, *deadline.UpdateQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateQueueOutput)
	return ret0, ret1
}

// UpdateQueueRequest indicates an expected call of UpdateQueueRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateQueueRequest), arg0)
}

// UpdateQueueWithContext mocks base method
func (m *MockDeadlineAPI) UpdateQueueWithContext(arg0 context.Context, arg1 *deadline.UpdateQueueInput, arg2 ...request.Option) (*deadline.UpdateQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQueueWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueWithContext indicates an expected call of UpdateQueueWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateQueueWithContext), varargs...)
}

// UpdateSession mocks base method
func (m *MockDeadlineAPI) UpdateSession(arg0 *deadline.UpdateSessionInput) (*deadline.UpdateSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", arg0)
	ret0, _ := ret[0].(*deadline.UpdateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSession indicates an expected call of UpdateSession
func (mr *MockDeadlineAPIMockRecorder) UpdateSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateSession), arg0)
}

// UpdateSessionRequest mocks base method
func (m *MockDeadlineAPI) UpdateSessionRequest(arg0 *deadline.UpdateSessionInput) (*request.Request, *deadline.UpdateSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateSessionOutput)
	return ret0, ret1
}

// UpdateSessionRequest indicates an expected call of UpdateSessionRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateSessionRequest), arg0)
}

// UpdateSessionWithContext mocks base method
func (m *MockDeadlineAPI) UpdateSessionWithContext(arg0 context.Context, arg1 *deadline.UpdateSessionInput, arg2 ...request.Option) (*deadline.UpdateSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSessionWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSessionWithContext indicates an expected call of UpdateSessionWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateSessionWithContext), varargs...)
}

// UpdateStep mocks base method
func (m *MockDeadlineAPI) UpdateStep(arg0 *deadline.UpdateStepInput) (*deadline.UpdateStepOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStep", arg0)
	ret0, _ := ret[0].(*deadline.UpdateStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStep indicates an expected call of UpdateStep
func (mr *MockDeadlineAPIMockRecorder) UpdateStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStep", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateStep), arg0)
}

// UpdateStepRequest mocks base method
func (m *MockDeadlineAPI) UpdateStepRequest(arg0 *deadline.UpdateStepInput) (*request.Request, *deadline.UpdateStepOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStepRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateStepOutput)
	return ret0, ret1
}

// UpdateStepRequest indicates an expected call of UpdateStepRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateStepRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStepRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateStepRequest), arg0)
}

// UpdateStepWithContext mocks base method
func (m *MockDeadlineAPI) UpdateStepWithContext(arg0 context.Context, arg1 *deadline.UpdateStepInput, arg2 ...request.Option) (*deadline.UpdateStepOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStepWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateStepOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStepWithContext indicates an expected call of UpdateStepWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateStepWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStepWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateStepWithContext), varargs...)
}

// UpdateStorageProfile mocks base method
func (m *MockDeadlineAPI) UpdateStorageProfile(arg0 *deadline.UpdateStorageProfileInput) (*deadline.UpdateStorageProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorageProfile", arg0)
	ret0, _ := ret[0].(*deadline.UpdateStorageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStorageProfile indicates an expected call of UpdateStorageProfile
func (mr *MockDeadlineAPIMockRecorder) UpdateStorageProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageProfile", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateStorageProfile), arg0)
}

// UpdateStorageProfileRequest mocks base method
func (m *MockDeadlineAPI) UpdateStorageProfileRequest(arg0 *deadline.UpdateStorageProfileInput) (*request.Request, *deadline.UpdateStorageProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorageProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateStorageProfileOutput)
	return ret0, ret1
}

// UpdateStorageProfileRequest indicates an expected call of UpdateStorageProfileRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateStorageProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageProfileRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateStorageProfileRequest), arg0)
}

// UpdateStorageProfileWithContext mocks base method
func (m *MockDeadlineAPI) UpdateStorageProfileWithContext(arg0 context.Context, arg1 *deadline.UpdateStorageProfileInput, arg2 ...request.Option) (*deadline.UpdateStorageProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStorageProfileWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateStorageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStorageProfileWithContext indicates an expected call of UpdateStorageProfileWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateStorageProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageProfileWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateStorageProfileWithContext), varargs...)
}

// UpdateTask mocks base method
func (m *MockDeadlineAPI) UpdateTask(arg0 *deadline.UpdateTaskInput) (*deadline.UpdateTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0)
	ret0, _ := ret[0].(*deadline.UpdateTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask
func (mr *MockDeadlineAPIMockRecorder) UpdateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateTask), arg0)
}

// UpdateTaskRequest mocks base method
func (m *MockDeadlineAPI) UpdateTaskRequest(arg0 *deadline.UpdateTaskInput) (*request.Request, *deadline.UpdateTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateTaskOutput)
	return ret0, ret1
}

// UpdateTaskRequest indicates an expected call of UpdateTaskRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateTaskRequest), arg0)
}

// UpdateTaskWithContext mocks base method
func (m *MockDeadlineAPI) UpdateTaskWithContext(arg0 context.Context, arg1 *deadline.UpdateTaskInput, arg2 ...request.Option) (*deadline.UpdateTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTaskWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskWithContext indicates an expected call of UpdateTaskWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateTaskWithContext), varargs...)
}

// UpdateWorker mocks base method
func (m *MockDeadlineAPI) UpdateWorker(arg0 *deadline.UpdateWorkerInput) (*deadline.UpdateWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorker", arg0)
	ret0, _ := ret[0].(*deadline.UpdateWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorker indicates an expected call of UpdateWorker
func (mr *MockDeadlineAPIMockRecorder) UpdateWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorker", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateWorker), arg0)
}

// UpdateWorkerRequest mocks base method
func (m *MockDeadlineAPI) UpdateWorkerRequest(arg0 *deadline.UpdateWorkerInput) (*request.Request, *deadline.UpdateWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateWorkerOutput)
	return ret0, ret1
}

// UpdateWorkerRequest indicates an expected call of UpdateWorkerRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateWorkerRequest), arg0)
}

// UpdateWorkerSchedule mocks base method
func (m *MockDeadlineAPI) UpdateWorkerSchedule(arg0 *deadline.UpdateWorkerScheduleInput) (*deadline.UpdateWorkerScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerSchedule", arg0)
	ret0, _ := ret[0].(*deadline.UpdateWorkerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkerSchedule indicates an expected call of UpdateWorkerSchedule
func (mr *MockDeadlineAPIMockRecorder) UpdateWorkerSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerSchedule", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateWorkerSchedule), arg0)
}

// UpdateWorkerScheduleRequest mocks base method
func (m *MockDeadlineAPI) UpdateWorkerScheduleRequest(arg0 *deadline.UpdateWorkerScheduleInput) (*request.Request, *deadline.UpdateWorkerScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*deadline.UpdateWorkerScheduleOutput)
	return ret0, ret1
}

// UpdateWorkerScheduleRequest indicates an expected call of UpdateWorkerScheduleRequest
func (mr *MockDeadlineAPIMockRecorder) UpdateWorkerScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerScheduleRequest", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateWorkerScheduleRequest), arg0)
}

// UpdateWorkerScheduleWithContext mocks base method
func (m *MockDeadlineAPI) UpdateWorkerScheduleWithContext(arg0 context.Context, arg1 *deadline.UpdateWorkerScheduleInput, arg2 ...request.Option) (*deadline.UpdateWorkerScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkerScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateWorkerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkerScheduleWithContext indicates an expected call of UpdateWorkerScheduleWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateWorkerScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerScheduleWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateWorkerScheduleWithContext), varargs...)
}

// UpdateWorkerWithContext mocks base method
func (m *MockDeadlineAPI) UpdateWorkerWithContext(arg0 context.Context, arg1 *deadline.UpdateWorkerInput, arg2 ...request.Option) (*deadline.UpdateWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*deadline.UpdateWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkerWithContext indicates an expected call of UpdateWorkerWithContext
func (mr *MockDeadlineAPIMockRecorder) UpdateWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).UpdateWorkerWithContext), varargs...)
}

// WaitUntilFleetActive mocks base method
func (m *MockDeadlineAPI) WaitUntilFleetActive(arg0 *deadline.GetFleetInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilFleetActive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFleetActive indicates an expected call of WaitUntilFleetActive
func (mr *MockDeadlineAPIMockRecorder) WaitUntilFleetActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFleetActive", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilFleetActive), arg0)
}

// WaitUntilFleetActiveWithContext mocks base method
func (m *MockDeadlineAPI) WaitUntilFleetActiveWithContext(arg0 context.Context, arg1 *deadline.GetFleetInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilFleetActiveWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFleetActiveWithContext indicates an expected call of WaitUntilFleetActiveWithContext
func (mr *MockDeadlineAPIMockRecorder) WaitUntilFleetActiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFleetActiveWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilFleetActiveWithContext), varargs...)
}

// WaitUntilJobCreateComplete mocks base method
func (m *MockDeadlineAPI) WaitUntilJobCreateComplete(arg0 *deadline.GetJobInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilJobCreateComplete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilJobCreateComplete indicates an expected call of WaitUntilJobCreateComplete
func (mr *MockDeadlineAPIMockRecorder) WaitUntilJobCreateComplete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilJobCreateComplete", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilJobCreateComplete), arg0)
}

// WaitUntilJobCreateCompleteWithContext mocks base method
func (m *MockDeadlineAPI) WaitUntilJobCreateCompleteWithContext(arg0 context.Context, arg1 *deadline.GetJobInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilJobCreateCompleteWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilJobCreateCompleteWithContext indicates an expected call of WaitUntilJobCreateCompleteWithContext
func (mr *MockDeadlineAPIMockRecorder) WaitUntilJobCreateCompleteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilJobCreateCompleteWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilJobCreateCompleteWithContext), varargs...)
}

// WaitUntilLicenseEndpointDeleted mocks base method
func (m *MockDeadlineAPI) WaitUntilLicenseEndpointDeleted(arg0 *deadline.GetLicenseEndpointInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilLicenseEndpointDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilLicenseEndpointDeleted indicates an expected call of WaitUntilLicenseEndpointDeleted
func (mr *MockDeadlineAPIMockRecorder) WaitUntilLicenseEndpointDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilLicenseEndpointDeleted", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilLicenseEndpointDeleted), arg0)
}

// WaitUntilLicenseEndpointDeletedWithContext mocks base method
func (m *MockDeadlineAPI) WaitUntilLicenseEndpointDeletedWithContext(arg0 context.Context, arg1 *deadline.GetLicenseEndpointInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilLicenseEndpointDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilLicenseEndpointDeletedWithContext indicates an expected call of WaitUntilLicenseEndpointDeletedWithContext
func (mr *MockDeadlineAPIMockRecorder) WaitUntilLicenseEndpointDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilLicenseEndpointDeletedWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilLicenseEndpointDeletedWithContext), varargs...)
}

// WaitUntilLicenseEndpointValid mocks base method
func (m *MockDeadlineAPI) WaitUntilLicenseEndpointValid(arg0 *deadline.GetLicenseEndpointInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilLicenseEndpointValid", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilLicenseEndpointValid indicates an expected call of WaitUntilLicenseEndpointValid
func (mr *MockDeadlineAPIMockRecorder) WaitUntilLicenseEndpointValid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilLicenseEndpointValid", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilLicenseEndpointValid), arg0)
}

// WaitUntilLicenseEndpointValidWithContext mocks base method
func (m *MockDeadlineAPI) WaitUntilLicenseEndpointValidWithContext(arg0 context.Context, arg1 *deadline.GetLicenseEndpointInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilLicenseEndpointValidWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilLicenseEndpointValidWithContext indicates an expected call of WaitUntilLicenseEndpointValidWithContext
func (mr *MockDeadlineAPIMockRecorder) WaitUntilLicenseEndpointValidWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilLicenseEndpointValidWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilLicenseEndpointValidWithContext), varargs...)
}

// WaitUntilQueueFleetAssociationStopped mocks base method
func (m *MockDeadlineAPI) WaitUntilQueueFleetAssociationStopped(arg0 *deadline.GetQueueFleetAssociationInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilQueueFleetAssociationStopped", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilQueueFleetAssociationStopped indicates an expected call of WaitUntilQueueFleetAssociationStopped
func (mr *MockDeadlineAPIMockRecorder) WaitUntilQueueFleetAssociationStopped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilQueueFleetAssociationStopped", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilQueueFleetAssociationStopped), arg0)
}

// WaitUntilQueueFleetAssociationStoppedWithContext mocks base method
func (m *MockDeadlineAPI) WaitUntilQueueFleetAssociationStoppedWithContext(arg0 context.Context, arg1 *deadline.GetQueueFleetAssociationInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilQueueFleetAssociationStoppedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilQueueFleetAssociationStoppedWithContext indicates an expected call of WaitUntilQueueFleetAssociationStoppedWithContext
func (mr *MockDeadlineAPIMockRecorder) WaitUntilQueueFleetAssociationStoppedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilQueueFleetAssociationStoppedWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilQueueFleetAssociationStoppedWithContext), varargs...)
}

// WaitUntilQueueScheduling mocks base method
func (m *MockDeadlineAPI) WaitUntilQueueScheduling(arg0 *deadline.GetQueueInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilQueueScheduling", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilQueueScheduling indicates an expected call of WaitUntilQueueScheduling
func (mr *MockDeadlineAPIMockRecorder) WaitUntilQueueScheduling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilQueueScheduling", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilQueueScheduling), arg0)
}

// WaitUntilQueueSchedulingBlocked mocks base method
func (m *MockDeadlineAPI) WaitUntilQueueSchedulingBlocked(arg0 *deadline.GetQueueInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilQueueSchedulingBlocked", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilQueueSchedulingBlocked indicates an expected call of WaitUntilQueueSchedulingBlocked
func (mr *MockDeadlineAPIMockRecorder) WaitUntilQueueSchedulingBlocked(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilQueueSchedulingBlocked", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilQueueSchedulingBlocked), arg0)
}

// WaitUntilQueueSchedulingBlockedWithContext mocks base method
func (m *MockDeadlineAPI) WaitUntilQueueSchedulingBlockedWithContext(arg0 context.Context, arg1 *deadline.GetQueueInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilQueueSchedulingBlockedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilQueueSchedulingBlockedWithContext indicates an expected call of WaitUntilQueueSchedulingBlockedWithContext
func (mr *MockDeadlineAPIMockRecorder) WaitUntilQueueSchedulingBlockedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilQueueSchedulingBlockedWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilQueueSchedulingBlockedWithContext), varargs...)
}

// WaitUntilQueueSchedulingWithContext mocks base method
func (m *MockDeadlineAPI) WaitUntilQueueSchedulingWithContext(arg0 context.Context, arg1 *deadline.GetQueueInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilQueueSchedulingWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilQueueSchedulingWithContext indicates an expected call of WaitUntilQueueSchedulingWithContext
func (mr *MockDeadlineAPIMockRecorder) WaitUntilQueueSchedulingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilQueueSchedulingWithContext", reflect.TypeOf((*MockDeadlineAPI)(nil).WaitUntilQueueSchedulingWithContext), varargs...)
}
