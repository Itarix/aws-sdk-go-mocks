// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/mailmanager/mailmanageriface (interfaces: MailManagerAPI)

// Package mailmanagermock is a generated GoMock package.
package mailmanagermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	mailmanager "github.com/aws/aws-sdk-go/service/mailmanager"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMailManagerAPI is a mock of MailManagerAPI interface
type MockMailManagerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMailManagerAPIMockRecorder
}

// MockMailManagerAPIMockRecorder is the mock recorder for MockMailManagerAPI
type MockMailManagerAPIMockRecorder struct {
	mock *MockMailManagerAPI
}

// NewMockMailManagerAPI creates a new mock instance
func NewMockMailManagerAPI(ctrl *gomock.Controller) *MockMailManagerAPI {
	mock := &MockMailManagerAPI{ctrl: ctrl}
	mock.recorder = &MockMailManagerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailManagerAPI) EXPECT() *MockMailManagerAPIMockRecorder {
	return m.recorder
}

// CreateAddonInstance mocks base method
func (m *MockMailManagerAPI) CreateAddonInstance(arg0 *mailmanager.CreateAddonInstanceInput) (*mailmanager.CreateAddonInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddonInstance", arg0)
	ret0, _ := ret[0].(*mailmanager.CreateAddonInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddonInstance indicates an expected call of CreateAddonInstance
func (mr *MockMailManagerAPIMockRecorder) CreateAddonInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddonInstance", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateAddonInstance), arg0)
}

// CreateAddonInstanceRequest mocks base method
func (m *MockMailManagerAPI) CreateAddonInstanceRequest(arg0 *mailmanager.CreateAddonInstanceInput) (*request.Request, *mailmanager.CreateAddonInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddonInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.CreateAddonInstanceOutput)
	return ret0, ret1
}

// CreateAddonInstanceRequest indicates an expected call of CreateAddonInstanceRequest
func (mr *MockMailManagerAPIMockRecorder) CreateAddonInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddonInstanceRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateAddonInstanceRequest), arg0)
}

// CreateAddonInstanceWithContext mocks base method
func (m *MockMailManagerAPI) CreateAddonInstanceWithContext(arg0 context.Context, arg1 *mailmanager.CreateAddonInstanceInput, arg2 ...request.Option) (*mailmanager.CreateAddonInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAddonInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.CreateAddonInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddonInstanceWithContext indicates an expected call of CreateAddonInstanceWithContext
func (mr *MockMailManagerAPIMockRecorder) CreateAddonInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddonInstanceWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateAddonInstanceWithContext), varargs...)
}

// CreateAddonSubscription mocks base method
func (m *MockMailManagerAPI) CreateAddonSubscription(arg0 *mailmanager.CreateAddonSubscriptionInput) (*mailmanager.CreateAddonSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddonSubscription", arg0)
	ret0, _ := ret[0].(*mailmanager.CreateAddonSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddonSubscription indicates an expected call of CreateAddonSubscription
func (mr *MockMailManagerAPIMockRecorder) CreateAddonSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddonSubscription", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateAddonSubscription), arg0)
}

// CreateAddonSubscriptionRequest mocks base method
func (m *MockMailManagerAPI) CreateAddonSubscriptionRequest(arg0 *mailmanager.CreateAddonSubscriptionInput) (*request.Request, *mailmanager.CreateAddonSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddonSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.CreateAddonSubscriptionOutput)
	return ret0, ret1
}

// CreateAddonSubscriptionRequest indicates an expected call of CreateAddonSubscriptionRequest
func (mr *MockMailManagerAPIMockRecorder) CreateAddonSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddonSubscriptionRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateAddonSubscriptionRequest), arg0)
}

// CreateAddonSubscriptionWithContext mocks base method
func (m *MockMailManagerAPI) CreateAddonSubscriptionWithContext(arg0 context.Context, arg1 *mailmanager.CreateAddonSubscriptionInput, arg2 ...request.Option) (*mailmanager.CreateAddonSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAddonSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.CreateAddonSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddonSubscriptionWithContext indicates an expected call of CreateAddonSubscriptionWithContext
func (mr *MockMailManagerAPIMockRecorder) CreateAddonSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddonSubscriptionWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateAddonSubscriptionWithContext), varargs...)
}

// CreateArchive mocks base method
func (m *MockMailManagerAPI) CreateArchive(arg0 *mailmanager.CreateArchiveInput) (*mailmanager.CreateArchiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArchive", arg0)
	ret0, _ := ret[0].(*mailmanager.CreateArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArchive indicates an expected call of CreateArchive
func (mr *MockMailManagerAPIMockRecorder) CreateArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchive", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateArchive), arg0)
}

// CreateArchiveRequest mocks base method
func (m *MockMailManagerAPI) CreateArchiveRequest(arg0 *mailmanager.CreateArchiveInput) (*request.Request, *mailmanager.CreateArchiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArchiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.CreateArchiveOutput)
	return ret0, ret1
}

// CreateArchiveRequest indicates an expected call of CreateArchiveRequest
func (mr *MockMailManagerAPIMockRecorder) CreateArchiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchiveRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateArchiveRequest), arg0)
}

// CreateArchiveWithContext mocks base method
func (m *MockMailManagerAPI) CreateArchiveWithContext(arg0 context.Context, arg1 *mailmanager.CreateArchiveInput, arg2 ...request.Option) (*mailmanager.CreateArchiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateArchiveWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.CreateArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArchiveWithContext indicates an expected call of CreateArchiveWithContext
func (mr *MockMailManagerAPIMockRecorder) CreateArchiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchiveWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateArchiveWithContext), varargs...)
}

// CreateIngressPoint mocks base method
func (m *MockMailManagerAPI) CreateIngressPoint(arg0 *mailmanager.CreateIngressPointInput) (*mailmanager.CreateIngressPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngressPoint", arg0)
	ret0, _ := ret[0].(*mailmanager.CreateIngressPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngressPoint indicates an expected call of CreateIngressPoint
func (mr *MockMailManagerAPIMockRecorder) CreateIngressPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngressPoint", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateIngressPoint), arg0)
}

// CreateIngressPointRequest mocks base method
func (m *MockMailManagerAPI) CreateIngressPointRequest(arg0 *mailmanager.CreateIngressPointInput) (*request.Request, *mailmanager.CreateIngressPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngressPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.CreateIngressPointOutput)
	return ret0, ret1
}

// CreateIngressPointRequest indicates an expected call of CreateIngressPointRequest
func (mr *MockMailManagerAPIMockRecorder) CreateIngressPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngressPointRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateIngressPointRequest), arg0)
}

// CreateIngressPointWithContext mocks base method
func (m *MockMailManagerAPI) CreateIngressPointWithContext(arg0 context.Context, arg1 *mailmanager.CreateIngressPointInput, arg2 ...request.Option) (*mailmanager.CreateIngressPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIngressPointWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.CreateIngressPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngressPointWithContext indicates an expected call of CreateIngressPointWithContext
func (mr *MockMailManagerAPIMockRecorder) CreateIngressPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngressPointWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateIngressPointWithContext), varargs...)
}

// CreateRelay mocks base method
func (m *MockMailManagerAPI) CreateRelay(arg0 *mailmanager.CreateRelayInput) (*mailmanager.CreateRelayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelay", arg0)
	ret0, _ := ret[0].(*mailmanager.CreateRelayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRelay indicates an expected call of CreateRelay
func (mr *MockMailManagerAPIMockRecorder) CreateRelay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelay", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateRelay), arg0)
}

// CreateRelayRequest mocks base method
func (m *MockMailManagerAPI) CreateRelayRequest(arg0 *mailmanager.CreateRelayInput) (*request.Request, *mailmanager.CreateRelayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.CreateRelayOutput)
	return ret0, ret1
}

// CreateRelayRequest indicates an expected call of CreateRelayRequest
func (mr *MockMailManagerAPIMockRecorder) CreateRelayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelayRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateRelayRequest), arg0)
}

// CreateRelayWithContext mocks base method
func (m *MockMailManagerAPI) CreateRelayWithContext(arg0 context.Context, arg1 *mailmanager.CreateRelayInput, arg2 ...request.Option) (*mailmanager.CreateRelayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRelayWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.CreateRelayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRelayWithContext indicates an expected call of CreateRelayWithContext
func (mr *MockMailManagerAPIMockRecorder) CreateRelayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelayWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateRelayWithContext), varargs...)
}

// CreateRuleSet mocks base method
func (m *MockMailManagerAPI) CreateRuleSet(arg0 *mailmanager.CreateRuleSetInput) (*mailmanager.CreateRuleSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleSet", arg0)
	ret0, _ := ret[0].(*mailmanager.CreateRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleSet indicates an expected call of CreateRuleSet
func (mr *MockMailManagerAPIMockRecorder) CreateRuleSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleSet", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateRuleSet), arg0)
}

// CreateRuleSetRequest mocks base method
func (m *MockMailManagerAPI) CreateRuleSetRequest(arg0 *mailmanager.CreateRuleSetInput) (*request.Request, *mailmanager.CreateRuleSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.CreateRuleSetOutput)
	return ret0, ret1
}

// CreateRuleSetRequest indicates an expected call of CreateRuleSetRequest
func (mr *MockMailManagerAPIMockRecorder) CreateRuleSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleSetRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateRuleSetRequest), arg0)
}

// CreateRuleSetWithContext mocks base method
func (m *MockMailManagerAPI) CreateRuleSetWithContext(arg0 context.Context, arg1 *mailmanager.CreateRuleSetInput, arg2 ...request.Option) (*mailmanager.CreateRuleSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleSetWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.CreateRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleSetWithContext indicates an expected call of CreateRuleSetWithContext
func (mr *MockMailManagerAPIMockRecorder) CreateRuleSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleSetWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateRuleSetWithContext), varargs...)
}

// CreateTrafficPolicy mocks base method
func (m *MockMailManagerAPI) CreateTrafficPolicy(arg0 *mailmanager.CreateTrafficPolicyInput) (*mailmanager.CreateTrafficPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrafficPolicy", arg0)
	ret0, _ := ret[0].(*mailmanager.CreateTrafficPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrafficPolicy indicates an expected call of CreateTrafficPolicy
func (mr *MockMailManagerAPIMockRecorder) CreateTrafficPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficPolicy", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateTrafficPolicy), arg0)
}

// CreateTrafficPolicyRequest mocks base method
func (m *MockMailManagerAPI) CreateTrafficPolicyRequest(arg0 *mailmanager.CreateTrafficPolicyInput) (*request.Request, *mailmanager.CreateTrafficPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrafficPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.CreateTrafficPolicyOutput)
	return ret0, ret1
}

// CreateTrafficPolicyRequest indicates an expected call of CreateTrafficPolicyRequest
func (mr *MockMailManagerAPIMockRecorder) CreateTrafficPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficPolicyRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateTrafficPolicyRequest), arg0)
}

// CreateTrafficPolicyWithContext mocks base method
func (m *MockMailManagerAPI) CreateTrafficPolicyWithContext(arg0 context.Context, arg1 *mailmanager.CreateTrafficPolicyInput, arg2 ...request.Option) (*mailmanager.CreateTrafficPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrafficPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.CreateTrafficPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrafficPolicyWithContext indicates an expected call of CreateTrafficPolicyWithContext
func (mr *MockMailManagerAPIMockRecorder) CreateTrafficPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrafficPolicyWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).CreateTrafficPolicyWithContext), varargs...)
}

// DeleteAddonInstance mocks base method
func (m *MockMailManagerAPI) DeleteAddonInstance(arg0 *mailmanager.DeleteAddonInstanceInput) (*mailmanager.DeleteAddonInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddonInstance", arg0)
	ret0, _ := ret[0].(*mailmanager.DeleteAddonInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAddonInstance indicates an expected call of DeleteAddonInstance
func (mr *MockMailManagerAPIMockRecorder) DeleteAddonInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddonInstance", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteAddonInstance), arg0)
}

// DeleteAddonInstanceRequest mocks base method
func (m *MockMailManagerAPI) DeleteAddonInstanceRequest(arg0 *mailmanager.DeleteAddonInstanceInput) (*request.Request, *mailmanager.DeleteAddonInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddonInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.DeleteAddonInstanceOutput)
	return ret0, ret1
}

// DeleteAddonInstanceRequest indicates an expected call of DeleteAddonInstanceRequest
func (mr *MockMailManagerAPIMockRecorder) DeleteAddonInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddonInstanceRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteAddonInstanceRequest), arg0)
}

// DeleteAddonInstanceWithContext mocks base method
func (m *MockMailManagerAPI) DeleteAddonInstanceWithContext(arg0 context.Context, arg1 *mailmanager.DeleteAddonInstanceInput, arg2 ...request.Option) (*mailmanager.DeleteAddonInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAddonInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.DeleteAddonInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAddonInstanceWithContext indicates an expected call of DeleteAddonInstanceWithContext
func (mr *MockMailManagerAPIMockRecorder) DeleteAddonInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddonInstanceWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteAddonInstanceWithContext), varargs...)
}

// DeleteAddonSubscription mocks base method
func (m *MockMailManagerAPI) DeleteAddonSubscription(arg0 *mailmanager.DeleteAddonSubscriptionInput) (*mailmanager.DeleteAddonSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddonSubscription", arg0)
	ret0, _ := ret[0].(*mailmanager.DeleteAddonSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAddonSubscription indicates an expected call of DeleteAddonSubscription
func (mr *MockMailManagerAPIMockRecorder) DeleteAddonSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddonSubscription", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteAddonSubscription), arg0)
}

// DeleteAddonSubscriptionRequest mocks base method
func (m *MockMailManagerAPI) DeleteAddonSubscriptionRequest(arg0 *mailmanager.DeleteAddonSubscriptionInput) (*request.Request, *mailmanager.DeleteAddonSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddonSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.DeleteAddonSubscriptionOutput)
	return ret0, ret1
}

// DeleteAddonSubscriptionRequest indicates an expected call of DeleteAddonSubscriptionRequest
func (mr *MockMailManagerAPIMockRecorder) DeleteAddonSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddonSubscriptionRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteAddonSubscriptionRequest), arg0)
}

// DeleteAddonSubscriptionWithContext mocks base method
func (m *MockMailManagerAPI) DeleteAddonSubscriptionWithContext(arg0 context.Context, arg1 *mailmanager.DeleteAddonSubscriptionInput, arg2 ...request.Option) (*mailmanager.DeleteAddonSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAddonSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.DeleteAddonSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAddonSubscriptionWithContext indicates an expected call of DeleteAddonSubscriptionWithContext
func (mr *MockMailManagerAPIMockRecorder) DeleteAddonSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddonSubscriptionWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteAddonSubscriptionWithContext), varargs...)
}

// DeleteArchive mocks base method
func (m *MockMailManagerAPI) DeleteArchive(arg0 *mailmanager.DeleteArchiveInput) (*mailmanager.DeleteArchiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArchive", arg0)
	ret0, _ := ret[0].(*mailmanager.DeleteArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArchive indicates an expected call of DeleteArchive
func (mr *MockMailManagerAPIMockRecorder) DeleteArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArchive", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteArchive), arg0)
}

// DeleteArchiveRequest mocks base method
func (m *MockMailManagerAPI) DeleteArchiveRequest(arg0 *mailmanager.DeleteArchiveInput) (*request.Request, *mailmanager.DeleteArchiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArchiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.DeleteArchiveOutput)
	return ret0, ret1
}

// DeleteArchiveRequest indicates an expected call of DeleteArchiveRequest
func (mr *MockMailManagerAPIMockRecorder) DeleteArchiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArchiveRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteArchiveRequest), arg0)
}

// DeleteArchiveWithContext mocks base method
func (m *MockMailManagerAPI) DeleteArchiveWithContext(arg0 context.Context, arg1 *mailmanager.DeleteArchiveInput, arg2 ...request.Option) (*mailmanager.DeleteArchiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteArchiveWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.DeleteArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArchiveWithContext indicates an expected call of DeleteArchiveWithContext
func (mr *MockMailManagerAPIMockRecorder) DeleteArchiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArchiveWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteArchiveWithContext), varargs...)
}

// DeleteIngressPoint mocks base method
func (m *MockMailManagerAPI) DeleteIngressPoint(arg0 *mailmanager.DeleteIngressPointInput) (*mailmanager.DeleteIngressPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngressPoint", arg0)
	ret0, _ := ret[0].(*mailmanager.DeleteIngressPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIngressPoint indicates an expected call of DeleteIngressPoint
func (mr *MockMailManagerAPIMockRecorder) DeleteIngressPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngressPoint", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteIngressPoint), arg0)
}

// DeleteIngressPointRequest mocks base method
func (m *MockMailManagerAPI) DeleteIngressPointRequest(arg0 *mailmanager.DeleteIngressPointInput) (*request.Request, *mailmanager.DeleteIngressPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngressPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.DeleteIngressPointOutput)
	return ret0, ret1
}

// DeleteIngressPointRequest indicates an expected call of DeleteIngressPointRequest
func (mr *MockMailManagerAPIMockRecorder) DeleteIngressPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngressPointRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteIngressPointRequest), arg0)
}

// DeleteIngressPointWithContext mocks base method
func (m *MockMailManagerAPI) DeleteIngressPointWithContext(arg0 context.Context, arg1 *mailmanager.DeleteIngressPointInput, arg2 ...request.Option) (*mailmanager.DeleteIngressPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIngressPointWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.DeleteIngressPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIngressPointWithContext indicates an expected call of DeleteIngressPointWithContext
func (mr *MockMailManagerAPIMockRecorder) DeleteIngressPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngressPointWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteIngressPointWithContext), varargs...)
}

// DeleteRelay mocks base method
func (m *MockMailManagerAPI) DeleteRelay(arg0 *mailmanager.DeleteRelayInput) (*mailmanager.DeleteRelayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelay", arg0)
	ret0, _ := ret[0].(*mailmanager.DeleteRelayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRelay indicates an expected call of DeleteRelay
func (mr *MockMailManagerAPIMockRecorder) DeleteRelay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelay", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteRelay), arg0)
}

// DeleteRelayRequest mocks base method
func (m *MockMailManagerAPI) DeleteRelayRequest(arg0 *mailmanager.DeleteRelayInput) (*request.Request, *mailmanager.DeleteRelayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.DeleteRelayOutput)
	return ret0, ret1
}

// DeleteRelayRequest indicates an expected call of DeleteRelayRequest
func (mr *MockMailManagerAPIMockRecorder) DeleteRelayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelayRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteRelayRequest), arg0)
}

// DeleteRelayWithContext mocks base method
func (m *MockMailManagerAPI) DeleteRelayWithContext(arg0 context.Context, arg1 *mailmanager.DeleteRelayInput, arg2 ...request.Option) (*mailmanager.DeleteRelayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRelayWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.DeleteRelayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRelayWithContext indicates an expected call of DeleteRelayWithContext
func (mr *MockMailManagerAPIMockRecorder) DeleteRelayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelayWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteRelayWithContext), varargs...)
}

// DeleteRuleSet mocks base method
func (m *MockMailManagerAPI) DeleteRuleSet(arg0 *mailmanager.DeleteRuleSetInput) (*mailmanager.DeleteRuleSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleSet", arg0)
	ret0, _ := ret[0].(*mailmanager.DeleteRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleSet indicates an expected call of DeleteRuleSet
func (mr *MockMailManagerAPIMockRecorder) DeleteRuleSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleSet", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteRuleSet), arg0)
}

// DeleteRuleSetRequest mocks base method
func (m *MockMailManagerAPI) DeleteRuleSetRequest(arg0 *mailmanager.DeleteRuleSetInput) (*request.Request, *mailmanager.DeleteRuleSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.DeleteRuleSetOutput)
	return ret0, ret1
}

// DeleteRuleSetRequest indicates an expected call of DeleteRuleSetRequest
func (mr *MockMailManagerAPIMockRecorder) DeleteRuleSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleSetRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteRuleSetRequest), arg0)
}

// DeleteRuleSetWithContext mocks base method
func (m *MockMailManagerAPI) DeleteRuleSetWithContext(arg0 context.Context, arg1 *mailmanager.DeleteRuleSetInput, arg2 ...request.Option) (*mailmanager.DeleteRuleSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleSetWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.DeleteRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleSetWithContext indicates an expected call of DeleteRuleSetWithContext
func (mr *MockMailManagerAPIMockRecorder) DeleteRuleSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleSetWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteRuleSetWithContext), varargs...)
}

// DeleteTrafficPolicy mocks base method
func (m *MockMailManagerAPI) DeleteTrafficPolicy(arg0 *mailmanager.DeleteTrafficPolicyInput) (*mailmanager.DeleteTrafficPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrafficPolicy", arg0)
	ret0, _ := ret[0].(*mailmanager.DeleteTrafficPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrafficPolicy indicates an expected call of DeleteTrafficPolicy
func (mr *MockMailManagerAPIMockRecorder) DeleteTrafficPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficPolicy", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteTrafficPolicy), arg0)
}

// DeleteTrafficPolicyRequest mocks base method
func (m *MockMailManagerAPI) DeleteTrafficPolicyRequest(arg0 *mailmanager.DeleteTrafficPolicyInput) (*request.Request, *mailmanager.DeleteTrafficPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrafficPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.DeleteTrafficPolicyOutput)
	return ret0, ret1
}

// DeleteTrafficPolicyRequest indicates an expected call of DeleteTrafficPolicyRequest
func (mr *MockMailManagerAPIMockRecorder) DeleteTrafficPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficPolicyRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteTrafficPolicyRequest), arg0)
}

// DeleteTrafficPolicyWithContext mocks base method
func (m *MockMailManagerAPI) DeleteTrafficPolicyWithContext(arg0 context.Context, arg1 *mailmanager.DeleteTrafficPolicyInput, arg2 ...request.Option) (*mailmanager.DeleteTrafficPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrafficPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.DeleteTrafficPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrafficPolicyWithContext indicates an expected call of DeleteTrafficPolicyWithContext
func (mr *MockMailManagerAPIMockRecorder) DeleteTrafficPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrafficPolicyWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).DeleteTrafficPolicyWithContext), varargs...)
}

// GetAddonInstance mocks base method
func (m *MockMailManagerAPI) GetAddonInstance(arg0 *mailmanager.GetAddonInstanceInput) (*mailmanager.GetAddonInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonInstance", arg0)
	ret0, _ := ret[0].(*mailmanager.GetAddonInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddonInstance indicates an expected call of GetAddonInstance
func (mr *MockMailManagerAPIMockRecorder) GetAddonInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonInstance", reflect.TypeOf((*MockMailManagerAPI)(nil).GetAddonInstance), arg0)
}

// GetAddonInstanceRequest mocks base method
func (m *MockMailManagerAPI) GetAddonInstanceRequest(arg0 *mailmanager.GetAddonInstanceInput) (*request.Request, *mailmanager.GetAddonInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetAddonInstanceOutput)
	return ret0, ret1
}

// GetAddonInstanceRequest indicates an expected call of GetAddonInstanceRequest
func (mr *MockMailManagerAPIMockRecorder) GetAddonInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonInstanceRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetAddonInstanceRequest), arg0)
}

// GetAddonInstanceWithContext mocks base method
func (m *MockMailManagerAPI) GetAddonInstanceWithContext(arg0 context.Context, arg1 *mailmanager.GetAddonInstanceInput, arg2 ...request.Option) (*mailmanager.GetAddonInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAddonInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetAddonInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddonInstanceWithContext indicates an expected call of GetAddonInstanceWithContext
func (mr *MockMailManagerAPIMockRecorder) GetAddonInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonInstanceWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetAddonInstanceWithContext), varargs...)
}

// GetAddonSubscription mocks base method
func (m *MockMailManagerAPI) GetAddonSubscription(arg0 *mailmanager.GetAddonSubscriptionInput) (*mailmanager.GetAddonSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonSubscription", arg0)
	ret0, _ := ret[0].(*mailmanager.GetAddonSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddonSubscription indicates an expected call of GetAddonSubscription
func (mr *MockMailManagerAPIMockRecorder) GetAddonSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonSubscription", reflect.TypeOf((*MockMailManagerAPI)(nil).GetAddonSubscription), arg0)
}

// GetAddonSubscriptionRequest mocks base method
func (m *MockMailManagerAPI) GetAddonSubscriptionRequest(arg0 *mailmanager.GetAddonSubscriptionInput) (*request.Request, *mailmanager.GetAddonSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetAddonSubscriptionOutput)
	return ret0, ret1
}

// GetAddonSubscriptionRequest indicates an expected call of GetAddonSubscriptionRequest
func (mr *MockMailManagerAPIMockRecorder) GetAddonSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonSubscriptionRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetAddonSubscriptionRequest), arg0)
}

// GetAddonSubscriptionWithContext mocks base method
func (m *MockMailManagerAPI) GetAddonSubscriptionWithContext(arg0 context.Context, arg1 *mailmanager.GetAddonSubscriptionInput, arg2 ...request.Option) (*mailmanager.GetAddonSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAddonSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetAddonSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddonSubscriptionWithContext indicates an expected call of GetAddonSubscriptionWithContext
func (mr *MockMailManagerAPIMockRecorder) GetAddonSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonSubscriptionWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetAddonSubscriptionWithContext), varargs...)
}

// GetArchive mocks base method
func (m *MockMailManagerAPI) GetArchive(arg0 *mailmanager.GetArchiveInput) (*mailmanager.GetArchiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchive", arg0)
	ret0, _ := ret[0].(*mailmanager.GetArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchive indicates an expected call of GetArchive
func (mr *MockMailManagerAPIMockRecorder) GetArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchive", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchive), arg0)
}

// GetArchiveExport mocks base method
func (m *MockMailManagerAPI) GetArchiveExport(arg0 *mailmanager.GetArchiveExportInput) (*mailmanager.GetArchiveExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveExport", arg0)
	ret0, _ := ret[0].(*mailmanager.GetArchiveExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveExport indicates an expected call of GetArchiveExport
func (mr *MockMailManagerAPIMockRecorder) GetArchiveExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveExport", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveExport), arg0)
}

// GetArchiveExportRequest mocks base method
func (m *MockMailManagerAPI) GetArchiveExportRequest(arg0 *mailmanager.GetArchiveExportInput) (*request.Request, *mailmanager.GetArchiveExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetArchiveExportOutput)
	return ret0, ret1
}

// GetArchiveExportRequest indicates an expected call of GetArchiveExportRequest
func (mr *MockMailManagerAPIMockRecorder) GetArchiveExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveExportRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveExportRequest), arg0)
}

// GetArchiveExportWithContext mocks base method
func (m *MockMailManagerAPI) GetArchiveExportWithContext(arg0 context.Context, arg1 *mailmanager.GetArchiveExportInput, arg2 ...request.Option) (*mailmanager.GetArchiveExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchiveExportWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetArchiveExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveExportWithContext indicates an expected call of GetArchiveExportWithContext
func (mr *MockMailManagerAPIMockRecorder) GetArchiveExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveExportWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveExportWithContext), varargs...)
}

// GetArchiveMessage mocks base method
func (m *MockMailManagerAPI) GetArchiveMessage(arg0 *mailmanager.GetArchiveMessageInput) (*mailmanager.GetArchiveMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveMessage", arg0)
	ret0, _ := ret[0].(*mailmanager.GetArchiveMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveMessage indicates an expected call of GetArchiveMessage
func (mr *MockMailManagerAPIMockRecorder) GetArchiveMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveMessage", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveMessage), arg0)
}

// GetArchiveMessageContent mocks base method
func (m *MockMailManagerAPI) GetArchiveMessageContent(arg0 *mailmanager.GetArchiveMessageContentInput) (*mailmanager.GetArchiveMessageContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveMessageContent", arg0)
	ret0, _ := ret[0].(*mailmanager.GetArchiveMessageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveMessageContent indicates an expected call of GetArchiveMessageContent
func (mr *MockMailManagerAPIMockRecorder) GetArchiveMessageContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveMessageContent", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveMessageContent), arg0)
}

// GetArchiveMessageContentRequest mocks base method
func (m *MockMailManagerAPI) GetArchiveMessageContentRequest(arg0 *mailmanager.GetArchiveMessageContentInput) (*request.Request, *mailmanager.GetArchiveMessageContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveMessageContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetArchiveMessageContentOutput)
	return ret0, ret1
}

// GetArchiveMessageContentRequest indicates an expected call of GetArchiveMessageContentRequest
func (mr *MockMailManagerAPIMockRecorder) GetArchiveMessageContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveMessageContentRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveMessageContentRequest), arg0)
}

// GetArchiveMessageContentWithContext mocks base method
func (m *MockMailManagerAPI) GetArchiveMessageContentWithContext(arg0 context.Context, arg1 *mailmanager.GetArchiveMessageContentInput, arg2 ...request.Option) (*mailmanager.GetArchiveMessageContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchiveMessageContentWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetArchiveMessageContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveMessageContentWithContext indicates an expected call of GetArchiveMessageContentWithContext
func (mr *MockMailManagerAPIMockRecorder) GetArchiveMessageContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveMessageContentWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveMessageContentWithContext), varargs...)
}

// GetArchiveMessageRequest mocks base method
func (m *MockMailManagerAPI) GetArchiveMessageRequest(arg0 *mailmanager.GetArchiveMessageInput) (*request.Request, *mailmanager.GetArchiveMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetArchiveMessageOutput)
	return ret0, ret1
}

// GetArchiveMessageRequest indicates an expected call of GetArchiveMessageRequest
func (mr *MockMailManagerAPIMockRecorder) GetArchiveMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveMessageRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveMessageRequest), arg0)
}

// GetArchiveMessageWithContext mocks base method
func (m *MockMailManagerAPI) GetArchiveMessageWithContext(arg0 context.Context, arg1 *mailmanager.GetArchiveMessageInput, arg2 ...request.Option) (*mailmanager.GetArchiveMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchiveMessageWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetArchiveMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveMessageWithContext indicates an expected call of GetArchiveMessageWithContext
func (mr *MockMailManagerAPIMockRecorder) GetArchiveMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveMessageWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveMessageWithContext), varargs...)
}

// GetArchiveRequest mocks base method
func (m *MockMailManagerAPI) GetArchiveRequest(arg0 *mailmanager.GetArchiveInput) (*request.Request, *mailmanager.GetArchiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetArchiveOutput)
	return ret0, ret1
}

// GetArchiveRequest indicates an expected call of GetArchiveRequest
func (mr *MockMailManagerAPIMockRecorder) GetArchiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveRequest), arg0)
}

// GetArchiveSearch mocks base method
func (m *MockMailManagerAPI) GetArchiveSearch(arg0 *mailmanager.GetArchiveSearchInput) (*mailmanager.GetArchiveSearchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveSearch", arg0)
	ret0, _ := ret[0].(*mailmanager.GetArchiveSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveSearch indicates an expected call of GetArchiveSearch
func (mr *MockMailManagerAPIMockRecorder) GetArchiveSearch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveSearch", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveSearch), arg0)
}

// GetArchiveSearchRequest mocks base method
func (m *MockMailManagerAPI) GetArchiveSearchRequest(arg0 *mailmanager.GetArchiveSearchInput) (*request.Request, *mailmanager.GetArchiveSearchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveSearchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetArchiveSearchOutput)
	return ret0, ret1
}

// GetArchiveSearchRequest indicates an expected call of GetArchiveSearchRequest
func (mr *MockMailManagerAPIMockRecorder) GetArchiveSearchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveSearchRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveSearchRequest), arg0)
}

// GetArchiveSearchResults mocks base method
func (m *MockMailManagerAPI) GetArchiveSearchResults(arg0 *mailmanager.GetArchiveSearchResultsInput) (*mailmanager.GetArchiveSearchResultsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveSearchResults", arg0)
	ret0, _ := ret[0].(*mailmanager.GetArchiveSearchResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveSearchResults indicates an expected call of GetArchiveSearchResults
func (mr *MockMailManagerAPIMockRecorder) GetArchiveSearchResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveSearchResults", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveSearchResults), arg0)
}

// GetArchiveSearchResultsRequest mocks base method
func (m *MockMailManagerAPI) GetArchiveSearchResultsRequest(arg0 *mailmanager.GetArchiveSearchResultsInput) (*request.Request, *mailmanager.GetArchiveSearchResultsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveSearchResultsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetArchiveSearchResultsOutput)
	return ret0, ret1
}

// GetArchiveSearchResultsRequest indicates an expected call of GetArchiveSearchResultsRequest
func (mr *MockMailManagerAPIMockRecorder) GetArchiveSearchResultsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveSearchResultsRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveSearchResultsRequest), arg0)
}

// GetArchiveSearchResultsWithContext mocks base method
func (m *MockMailManagerAPI) GetArchiveSearchResultsWithContext(arg0 context.Context, arg1 *mailmanager.GetArchiveSearchResultsInput, arg2 ...request.Option) (*mailmanager.GetArchiveSearchResultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchiveSearchResultsWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetArchiveSearchResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveSearchResultsWithContext indicates an expected call of GetArchiveSearchResultsWithContext
func (mr *MockMailManagerAPIMockRecorder) GetArchiveSearchResultsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveSearchResultsWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveSearchResultsWithContext), varargs...)
}

// GetArchiveSearchWithContext mocks base method
func (m *MockMailManagerAPI) GetArchiveSearchWithContext(arg0 context.Context, arg1 *mailmanager.GetArchiveSearchInput, arg2 ...request.Option) (*mailmanager.GetArchiveSearchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchiveSearchWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetArchiveSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveSearchWithContext indicates an expected call of GetArchiveSearchWithContext
func (mr *MockMailManagerAPIMockRecorder) GetArchiveSearchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveSearchWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveSearchWithContext), varargs...)
}

// GetArchiveWithContext mocks base method
func (m *MockMailManagerAPI) GetArchiveWithContext(arg0 context.Context, arg1 *mailmanager.GetArchiveInput, arg2 ...request.Option) (*mailmanager.GetArchiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchiveWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveWithContext indicates an expected call of GetArchiveWithContext
func (mr *MockMailManagerAPIMockRecorder) GetArchiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetArchiveWithContext), varargs...)
}

// GetIngressPoint mocks base method
func (m *MockMailManagerAPI) GetIngressPoint(arg0 *mailmanager.GetIngressPointInput) (*mailmanager.GetIngressPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngressPoint", arg0)
	ret0, _ := ret[0].(*mailmanager.GetIngressPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngressPoint indicates an expected call of GetIngressPoint
func (mr *MockMailManagerAPIMockRecorder) GetIngressPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngressPoint", reflect.TypeOf((*MockMailManagerAPI)(nil).GetIngressPoint), arg0)
}

// GetIngressPointRequest mocks base method
func (m *MockMailManagerAPI) GetIngressPointRequest(arg0 *mailmanager.GetIngressPointInput) (*request.Request, *mailmanager.GetIngressPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngressPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetIngressPointOutput)
	return ret0, ret1
}

// GetIngressPointRequest indicates an expected call of GetIngressPointRequest
func (mr *MockMailManagerAPIMockRecorder) GetIngressPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngressPointRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetIngressPointRequest), arg0)
}

// GetIngressPointWithContext mocks base method
func (m *MockMailManagerAPI) GetIngressPointWithContext(arg0 context.Context, arg1 *mailmanager.GetIngressPointInput, arg2 ...request.Option) (*mailmanager.GetIngressPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIngressPointWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetIngressPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngressPointWithContext indicates an expected call of GetIngressPointWithContext
func (mr *MockMailManagerAPIMockRecorder) GetIngressPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngressPointWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetIngressPointWithContext), varargs...)
}

// GetRelay mocks base method
func (m *MockMailManagerAPI) GetRelay(arg0 *mailmanager.GetRelayInput) (*mailmanager.GetRelayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelay", arg0)
	ret0, _ := ret[0].(*mailmanager.GetRelayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelay indicates an expected call of GetRelay
func (mr *MockMailManagerAPIMockRecorder) GetRelay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelay", reflect.TypeOf((*MockMailManagerAPI)(nil).GetRelay), arg0)
}

// GetRelayRequest mocks base method
func (m *MockMailManagerAPI) GetRelayRequest(arg0 *mailmanager.GetRelayInput) (*request.Request, *mailmanager.GetRelayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetRelayOutput)
	return ret0, ret1
}

// GetRelayRequest indicates an expected call of GetRelayRequest
func (mr *MockMailManagerAPIMockRecorder) GetRelayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelayRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetRelayRequest), arg0)
}

// GetRelayWithContext mocks base method
func (m *MockMailManagerAPI) GetRelayWithContext(arg0 context.Context, arg1 *mailmanager.GetRelayInput, arg2 ...request.Option) (*mailmanager.GetRelayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelayWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetRelayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelayWithContext indicates an expected call of GetRelayWithContext
func (mr *MockMailManagerAPIMockRecorder) GetRelayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelayWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetRelayWithContext), varargs...)
}

// GetRuleSet mocks base method
func (m *MockMailManagerAPI) GetRuleSet(arg0 *mailmanager.GetRuleSetInput) (*mailmanager.GetRuleSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleSet", arg0)
	ret0, _ := ret[0].(*mailmanager.GetRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleSet indicates an expected call of GetRuleSet
func (mr *MockMailManagerAPIMockRecorder) GetRuleSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleSet", reflect.TypeOf((*MockMailManagerAPI)(nil).GetRuleSet), arg0)
}

// GetRuleSetRequest mocks base method
func (m *MockMailManagerAPI) GetRuleSetRequest(arg0 *mailmanager.GetRuleSetInput) (*request.Request, *mailmanager.GetRuleSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetRuleSetOutput)
	return ret0, ret1
}

// GetRuleSetRequest indicates an expected call of GetRuleSetRequest
func (mr *MockMailManagerAPIMockRecorder) GetRuleSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleSetRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetRuleSetRequest), arg0)
}

// GetRuleSetWithContext mocks base method
func (m *MockMailManagerAPI) GetRuleSetWithContext(arg0 context.Context, arg1 *mailmanager.GetRuleSetInput, arg2 ...request.Option) (*mailmanager.GetRuleSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuleSetWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleSetWithContext indicates an expected call of GetRuleSetWithContext
func (mr *MockMailManagerAPIMockRecorder) GetRuleSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleSetWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetRuleSetWithContext), varargs...)
}

// GetTrafficPolicy mocks base method
func (m *MockMailManagerAPI) GetTrafficPolicy(arg0 *mailmanager.GetTrafficPolicyInput) (*mailmanager.GetTrafficPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficPolicy", arg0)
	ret0, _ := ret[0].(*mailmanager.GetTrafficPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficPolicy indicates an expected call of GetTrafficPolicy
func (mr *MockMailManagerAPIMockRecorder) GetTrafficPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicy", reflect.TypeOf((*MockMailManagerAPI)(nil).GetTrafficPolicy), arg0)
}

// GetTrafficPolicyRequest mocks base method
func (m *MockMailManagerAPI) GetTrafficPolicyRequest(arg0 *mailmanager.GetTrafficPolicyInput) (*request.Request, *mailmanager.GetTrafficPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrafficPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.GetTrafficPolicyOutput)
	return ret0, ret1
}

// GetTrafficPolicyRequest indicates an expected call of GetTrafficPolicyRequest
func (mr *MockMailManagerAPIMockRecorder) GetTrafficPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicyRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).GetTrafficPolicyRequest), arg0)
}

// GetTrafficPolicyWithContext mocks base method
func (m *MockMailManagerAPI) GetTrafficPolicyWithContext(arg0 context.Context, arg1 *mailmanager.GetTrafficPolicyInput, arg2 ...request.Option) (*mailmanager.GetTrafficPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrafficPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.GetTrafficPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficPolicyWithContext indicates an expected call of GetTrafficPolicyWithContext
func (mr *MockMailManagerAPIMockRecorder) GetTrafficPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicyWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).GetTrafficPolicyWithContext), varargs...)
}

// ListAddonInstances mocks base method
func (m *MockMailManagerAPI) ListAddonInstances(arg0 *mailmanager.ListAddonInstancesInput) (*mailmanager.ListAddonInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddonInstances", arg0)
	ret0, _ := ret[0].(*mailmanager.ListAddonInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddonInstances indicates an expected call of ListAddonInstances
func (mr *MockMailManagerAPIMockRecorder) ListAddonInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonInstances", reflect.TypeOf((*MockMailManagerAPI)(nil).ListAddonInstances), arg0)
}

// ListAddonInstancesPages mocks base method
func (m *MockMailManagerAPI) ListAddonInstancesPages(arg0 *mailmanager.ListAddonInstancesInput, arg1 func(*mailmanager.ListAddonInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddonInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAddonInstancesPages indicates an expected call of ListAddonInstancesPages
func (mr *MockMailManagerAPIMockRecorder) ListAddonInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonInstancesPages", reflect.TypeOf((*MockMailManagerAPI)(nil).ListAddonInstancesPages), arg0, arg1)
}

// ListAddonInstancesPagesWithContext mocks base method
func (m *MockMailManagerAPI) ListAddonInstancesPagesWithContext(arg0 context.Context, arg1 *mailmanager.ListAddonInstancesInput, arg2 func(*mailmanager.ListAddonInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAddonInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAddonInstancesPagesWithContext indicates an expected call of ListAddonInstancesPagesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListAddonInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonInstancesPagesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListAddonInstancesPagesWithContext), varargs...)
}

// ListAddonInstancesRequest mocks base method
func (m *MockMailManagerAPI) ListAddonInstancesRequest(arg0 *mailmanager.ListAddonInstancesInput) (*request.Request, *mailmanager.ListAddonInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddonInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.ListAddonInstancesOutput)
	return ret0, ret1
}

// ListAddonInstancesRequest indicates an expected call of ListAddonInstancesRequest
func (mr *MockMailManagerAPIMockRecorder) ListAddonInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonInstancesRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).ListAddonInstancesRequest), arg0)
}

// ListAddonInstancesWithContext mocks base method
func (m *MockMailManagerAPI) ListAddonInstancesWithContext(arg0 context.Context, arg1 *mailmanager.ListAddonInstancesInput, arg2 ...request.Option) (*mailmanager.ListAddonInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAddonInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.ListAddonInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddonInstancesWithContext indicates an expected call of ListAddonInstancesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListAddonInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonInstancesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListAddonInstancesWithContext), varargs...)
}

// ListAddonSubscriptions mocks base method
func (m *MockMailManagerAPI) ListAddonSubscriptions(arg0 *mailmanager.ListAddonSubscriptionsInput) (*mailmanager.ListAddonSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddonSubscriptions", arg0)
	ret0, _ := ret[0].(*mailmanager.ListAddonSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddonSubscriptions indicates an expected call of ListAddonSubscriptions
func (mr *MockMailManagerAPIMockRecorder) ListAddonSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonSubscriptions", reflect.TypeOf((*MockMailManagerAPI)(nil).ListAddonSubscriptions), arg0)
}

// ListAddonSubscriptionsPages mocks base method
func (m *MockMailManagerAPI) ListAddonSubscriptionsPages(arg0 *mailmanager.ListAddonSubscriptionsInput, arg1 func(*mailmanager.ListAddonSubscriptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddonSubscriptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAddonSubscriptionsPages indicates an expected call of ListAddonSubscriptionsPages
func (mr *MockMailManagerAPIMockRecorder) ListAddonSubscriptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonSubscriptionsPages", reflect.TypeOf((*MockMailManagerAPI)(nil).ListAddonSubscriptionsPages), arg0, arg1)
}

// ListAddonSubscriptionsPagesWithContext mocks base method
func (m *MockMailManagerAPI) ListAddonSubscriptionsPagesWithContext(arg0 context.Context, arg1 *mailmanager.ListAddonSubscriptionsInput, arg2 func(*mailmanager.ListAddonSubscriptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAddonSubscriptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAddonSubscriptionsPagesWithContext indicates an expected call of ListAddonSubscriptionsPagesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListAddonSubscriptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonSubscriptionsPagesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListAddonSubscriptionsPagesWithContext), varargs...)
}

// ListAddonSubscriptionsRequest mocks base method
func (m *MockMailManagerAPI) ListAddonSubscriptionsRequest(arg0 *mailmanager.ListAddonSubscriptionsInput) (*request.Request, *mailmanager.ListAddonSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddonSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.ListAddonSubscriptionsOutput)
	return ret0, ret1
}

// ListAddonSubscriptionsRequest indicates an expected call of ListAddonSubscriptionsRequest
func (mr *MockMailManagerAPIMockRecorder) ListAddonSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonSubscriptionsRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).ListAddonSubscriptionsRequest), arg0)
}

// ListAddonSubscriptionsWithContext mocks base method
func (m *MockMailManagerAPI) ListAddonSubscriptionsWithContext(arg0 context.Context, arg1 *mailmanager.ListAddonSubscriptionsInput, arg2 ...request.Option) (*mailmanager.ListAddonSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAddonSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.ListAddonSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddonSubscriptionsWithContext indicates an expected call of ListAddonSubscriptionsWithContext
func (mr *MockMailManagerAPIMockRecorder) ListAddonSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonSubscriptionsWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListAddonSubscriptionsWithContext), varargs...)
}

// ListArchiveExports mocks base method
func (m *MockMailManagerAPI) ListArchiveExports(arg0 *mailmanager.ListArchiveExportsInput) (*mailmanager.ListArchiveExportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchiveExports", arg0)
	ret0, _ := ret[0].(*mailmanager.ListArchiveExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchiveExports indicates an expected call of ListArchiveExports
func (mr *MockMailManagerAPIMockRecorder) ListArchiveExports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveExports", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchiveExports), arg0)
}

// ListArchiveExportsPages mocks base method
func (m *MockMailManagerAPI) ListArchiveExportsPages(arg0 *mailmanager.ListArchiveExportsInput, arg1 func(*mailmanager.ListArchiveExportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchiveExportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListArchiveExportsPages indicates an expected call of ListArchiveExportsPages
func (mr *MockMailManagerAPIMockRecorder) ListArchiveExportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveExportsPages", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchiveExportsPages), arg0, arg1)
}

// ListArchiveExportsPagesWithContext mocks base method
func (m *MockMailManagerAPI) ListArchiveExportsPagesWithContext(arg0 context.Context, arg1 *mailmanager.ListArchiveExportsInput, arg2 func(*mailmanager.ListArchiveExportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchiveExportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListArchiveExportsPagesWithContext indicates an expected call of ListArchiveExportsPagesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListArchiveExportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveExportsPagesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchiveExportsPagesWithContext), varargs...)
}

// ListArchiveExportsRequest mocks base method
func (m *MockMailManagerAPI) ListArchiveExportsRequest(arg0 *mailmanager.ListArchiveExportsInput) (*request.Request, *mailmanager.ListArchiveExportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchiveExportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.ListArchiveExportsOutput)
	return ret0, ret1
}

// ListArchiveExportsRequest indicates an expected call of ListArchiveExportsRequest
func (mr *MockMailManagerAPIMockRecorder) ListArchiveExportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveExportsRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchiveExportsRequest), arg0)
}

// ListArchiveExportsWithContext mocks base method
func (m *MockMailManagerAPI) ListArchiveExportsWithContext(arg0 context.Context, arg1 *mailmanager.ListArchiveExportsInput, arg2 ...request.Option) (*mailmanager.ListArchiveExportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchiveExportsWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.ListArchiveExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchiveExportsWithContext indicates an expected call of ListArchiveExportsWithContext
func (mr *MockMailManagerAPIMockRecorder) ListArchiveExportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveExportsWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchiveExportsWithContext), varargs...)
}

// ListArchiveSearches mocks base method
func (m *MockMailManagerAPI) ListArchiveSearches(arg0 *mailmanager.ListArchiveSearchesInput) (*mailmanager.ListArchiveSearchesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchiveSearches", arg0)
	ret0, _ := ret[0].(*mailmanager.ListArchiveSearchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchiveSearches indicates an expected call of ListArchiveSearches
func (mr *MockMailManagerAPIMockRecorder) ListArchiveSearches(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveSearches", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchiveSearches), arg0)
}

// ListArchiveSearchesPages mocks base method
func (m *MockMailManagerAPI) ListArchiveSearchesPages(arg0 *mailmanager.ListArchiveSearchesInput, arg1 func(*mailmanager.ListArchiveSearchesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchiveSearchesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListArchiveSearchesPages indicates an expected call of ListArchiveSearchesPages
func (mr *MockMailManagerAPIMockRecorder) ListArchiveSearchesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveSearchesPages", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchiveSearchesPages), arg0, arg1)
}

// ListArchiveSearchesPagesWithContext mocks base method
func (m *MockMailManagerAPI) ListArchiveSearchesPagesWithContext(arg0 context.Context, arg1 *mailmanager.ListArchiveSearchesInput, arg2 func(*mailmanager.ListArchiveSearchesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchiveSearchesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListArchiveSearchesPagesWithContext indicates an expected call of ListArchiveSearchesPagesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListArchiveSearchesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveSearchesPagesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchiveSearchesPagesWithContext), varargs...)
}

// ListArchiveSearchesRequest mocks base method
func (m *MockMailManagerAPI) ListArchiveSearchesRequest(arg0 *mailmanager.ListArchiveSearchesInput) (*request.Request, *mailmanager.ListArchiveSearchesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchiveSearchesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.ListArchiveSearchesOutput)
	return ret0, ret1
}

// ListArchiveSearchesRequest indicates an expected call of ListArchiveSearchesRequest
func (mr *MockMailManagerAPIMockRecorder) ListArchiveSearchesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveSearchesRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchiveSearchesRequest), arg0)
}

// ListArchiveSearchesWithContext mocks base method
func (m *MockMailManagerAPI) ListArchiveSearchesWithContext(arg0 context.Context, arg1 *mailmanager.ListArchiveSearchesInput, arg2 ...request.Option) (*mailmanager.ListArchiveSearchesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchiveSearchesWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.ListArchiveSearchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchiveSearchesWithContext indicates an expected call of ListArchiveSearchesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListArchiveSearchesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveSearchesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchiveSearchesWithContext), varargs...)
}

// ListArchives mocks base method
func (m *MockMailManagerAPI) ListArchives(arg0 *mailmanager.ListArchivesInput) (*mailmanager.ListArchivesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchives", arg0)
	ret0, _ := ret[0].(*mailmanager.ListArchivesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchives indicates an expected call of ListArchives
func (mr *MockMailManagerAPIMockRecorder) ListArchives(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchives", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchives), arg0)
}

// ListArchivesPages mocks base method
func (m *MockMailManagerAPI) ListArchivesPages(arg0 *mailmanager.ListArchivesInput, arg1 func(*mailmanager.ListArchivesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchivesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListArchivesPages indicates an expected call of ListArchivesPages
func (mr *MockMailManagerAPIMockRecorder) ListArchivesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchivesPages", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchivesPages), arg0, arg1)
}

// ListArchivesPagesWithContext mocks base method
func (m *MockMailManagerAPI) ListArchivesPagesWithContext(arg0 context.Context, arg1 *mailmanager.ListArchivesInput, arg2 func(*mailmanager.ListArchivesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchivesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListArchivesPagesWithContext indicates an expected call of ListArchivesPagesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListArchivesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchivesPagesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchivesPagesWithContext), varargs...)
}

// ListArchivesRequest mocks base method
func (m *MockMailManagerAPI) ListArchivesRequest(arg0 *mailmanager.ListArchivesInput) (*request.Request, *mailmanager.ListArchivesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchivesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.ListArchivesOutput)
	return ret0, ret1
}

// ListArchivesRequest indicates an expected call of ListArchivesRequest
func (mr *MockMailManagerAPIMockRecorder) ListArchivesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchivesRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchivesRequest), arg0)
}

// ListArchivesWithContext mocks base method
func (m *MockMailManagerAPI) ListArchivesWithContext(arg0 context.Context, arg1 *mailmanager.ListArchivesInput, arg2 ...request.Option) (*mailmanager.ListArchivesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchivesWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.ListArchivesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchivesWithContext indicates an expected call of ListArchivesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListArchivesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchivesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListArchivesWithContext), varargs...)
}

// ListIngressPoints mocks base method
func (m *MockMailManagerAPI) ListIngressPoints(arg0 *mailmanager.ListIngressPointsInput) (*mailmanager.ListIngressPointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngressPoints", arg0)
	ret0, _ := ret[0].(*mailmanager.ListIngressPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngressPoints indicates an expected call of ListIngressPoints
func (mr *MockMailManagerAPIMockRecorder) ListIngressPoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngressPoints", reflect.TypeOf((*MockMailManagerAPI)(nil).ListIngressPoints), arg0)
}

// ListIngressPointsPages mocks base method
func (m *MockMailManagerAPI) ListIngressPointsPages(arg0 *mailmanager.ListIngressPointsInput, arg1 func(*mailmanager.ListIngressPointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngressPointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIngressPointsPages indicates an expected call of ListIngressPointsPages
func (mr *MockMailManagerAPIMockRecorder) ListIngressPointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngressPointsPages", reflect.TypeOf((*MockMailManagerAPI)(nil).ListIngressPointsPages), arg0, arg1)
}

// ListIngressPointsPagesWithContext mocks base method
func (m *MockMailManagerAPI) ListIngressPointsPagesWithContext(arg0 context.Context, arg1 *mailmanager.ListIngressPointsInput, arg2 func(*mailmanager.ListIngressPointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIngressPointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIngressPointsPagesWithContext indicates an expected call of ListIngressPointsPagesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListIngressPointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngressPointsPagesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListIngressPointsPagesWithContext), varargs...)
}

// ListIngressPointsRequest mocks base method
func (m *MockMailManagerAPI) ListIngressPointsRequest(arg0 *mailmanager.ListIngressPointsInput) (*request.Request, *mailmanager.ListIngressPointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngressPointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.ListIngressPointsOutput)
	return ret0, ret1
}

// ListIngressPointsRequest indicates an expected call of ListIngressPointsRequest
func (mr *MockMailManagerAPIMockRecorder) ListIngressPointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngressPointsRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).ListIngressPointsRequest), arg0)
}

// ListIngressPointsWithContext mocks base method
func (m *MockMailManagerAPI) ListIngressPointsWithContext(arg0 context.Context, arg1 *mailmanager.ListIngressPointsInput, arg2 ...request.Option) (*mailmanager.ListIngressPointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIngressPointsWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.ListIngressPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngressPointsWithContext indicates an expected call of ListIngressPointsWithContext
func (mr *MockMailManagerAPIMockRecorder) ListIngressPointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngressPointsWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListIngressPointsWithContext), varargs...)
}

// ListRelays mocks base method
func (m *MockMailManagerAPI) ListRelays(arg0 *mailmanager.ListRelaysInput) (*mailmanager.ListRelaysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelays", arg0)
	ret0, _ := ret[0].(*mailmanager.ListRelaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelays indicates an expected call of ListRelays
func (mr *MockMailManagerAPIMockRecorder) ListRelays(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelays", reflect.TypeOf((*MockMailManagerAPI)(nil).ListRelays), arg0)
}

// ListRelaysPages mocks base method
func (m *MockMailManagerAPI) ListRelaysPages(arg0 *mailmanager.ListRelaysInput, arg1 func(*mailmanager.ListRelaysOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelaysPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRelaysPages indicates an expected call of ListRelaysPages
func (mr *MockMailManagerAPIMockRecorder) ListRelaysPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelaysPages", reflect.TypeOf((*MockMailManagerAPI)(nil).ListRelaysPages), arg0, arg1)
}

// ListRelaysPagesWithContext mocks base method
func (m *MockMailManagerAPI) ListRelaysPagesWithContext(arg0 context.Context, arg1 *mailmanager.ListRelaysInput, arg2 func(*mailmanager.ListRelaysOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRelaysPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRelaysPagesWithContext indicates an expected call of ListRelaysPagesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListRelaysPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelaysPagesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListRelaysPagesWithContext), varargs...)
}

// ListRelaysRequest mocks base method
func (m *MockMailManagerAPI) ListRelaysRequest(arg0 *mailmanager.ListRelaysInput) (*request.Request, *mailmanager.ListRelaysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelaysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.ListRelaysOutput)
	return ret0, ret1
}

// ListRelaysRequest indicates an expected call of ListRelaysRequest
func (mr *MockMailManagerAPIMockRecorder) ListRelaysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelaysRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).ListRelaysRequest), arg0)
}

// ListRelaysWithContext mocks base method
func (m *MockMailManagerAPI) ListRelaysWithContext(arg0 context.Context, arg1 *mailmanager.ListRelaysInput, arg2 ...request.Option) (*mailmanager.ListRelaysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRelaysWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.ListRelaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelaysWithContext indicates an expected call of ListRelaysWithContext
func (mr *MockMailManagerAPIMockRecorder) ListRelaysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelaysWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListRelaysWithContext), varargs...)
}

// ListRuleSets mocks base method
func (m *MockMailManagerAPI) ListRuleSets(arg0 *mailmanager.ListRuleSetsInput) (*mailmanager.ListRuleSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleSets", arg0)
	ret0, _ := ret[0].(*mailmanager.ListRuleSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleSets indicates an expected call of ListRuleSets
func (mr *MockMailManagerAPIMockRecorder) ListRuleSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleSets", reflect.TypeOf((*MockMailManagerAPI)(nil).ListRuleSets), arg0)
}

// ListRuleSetsPages mocks base method
func (m *MockMailManagerAPI) ListRuleSetsPages(arg0 *mailmanager.ListRuleSetsInput, arg1 func(*mailmanager.ListRuleSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRuleSetsPages indicates an expected call of ListRuleSetsPages
func (mr *MockMailManagerAPIMockRecorder) ListRuleSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleSetsPages", reflect.TypeOf((*MockMailManagerAPI)(nil).ListRuleSetsPages), arg0, arg1)
}

// ListRuleSetsPagesWithContext mocks base method
func (m *MockMailManagerAPI) ListRuleSetsPagesWithContext(arg0 context.Context, arg1 *mailmanager.ListRuleSetsInput, arg2 func(*mailmanager.ListRuleSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRuleSetsPagesWithContext indicates an expected call of ListRuleSetsPagesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListRuleSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleSetsPagesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListRuleSetsPagesWithContext), varargs...)
}

// ListRuleSetsRequest mocks base method
func (m *MockMailManagerAPI) ListRuleSetsRequest(arg0 *mailmanager.ListRuleSetsInput) (*request.Request, *mailmanager.ListRuleSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.ListRuleSetsOutput)
	return ret0, ret1
}

// ListRuleSetsRequest indicates an expected call of ListRuleSetsRequest
func (mr *MockMailManagerAPIMockRecorder) ListRuleSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleSetsRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).ListRuleSetsRequest), arg0)
}

// ListRuleSetsWithContext mocks base method
func (m *MockMailManagerAPI) ListRuleSetsWithContext(arg0 context.Context, arg1 *mailmanager.ListRuleSetsInput, arg2 ...request.Option) (*mailmanager.ListRuleSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleSetsWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.ListRuleSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleSetsWithContext indicates an expected call of ListRuleSetsWithContext
func (mr *MockMailManagerAPIMockRecorder) ListRuleSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleSetsWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListRuleSetsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockMailManagerAPI) ListTagsForResource(arg0 *mailmanager.ListTagsForResourceInput) (*mailmanager.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*mailmanager.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockMailManagerAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMailManagerAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockMailManagerAPI) ListTagsForResourceRequest(arg0 *mailmanager.ListTagsForResourceInput) (*request.Request, *mailmanager.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockMailManagerAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockMailManagerAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *mailmanager.ListTagsForResourceInput, arg2 ...request.Option) (*mailmanager.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockMailManagerAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTrafficPolicies mocks base method
func (m *MockMailManagerAPI) ListTrafficPolicies(arg0 *mailmanager.ListTrafficPoliciesInput) (*mailmanager.ListTrafficPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficPolicies", arg0)
	ret0, _ := ret[0].(*mailmanager.ListTrafficPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicies indicates an expected call of ListTrafficPolicies
func (mr *MockMailManagerAPIMockRecorder) ListTrafficPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicies", reflect.TypeOf((*MockMailManagerAPI)(nil).ListTrafficPolicies), arg0)
}

// ListTrafficPoliciesPages mocks base method
func (m *MockMailManagerAPI) ListTrafficPoliciesPages(arg0 *mailmanager.ListTrafficPoliciesInput, arg1 func(*mailmanager.ListTrafficPoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficPoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrafficPoliciesPages indicates an expected call of ListTrafficPoliciesPages
func (mr *MockMailManagerAPIMockRecorder) ListTrafficPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPoliciesPages", reflect.TypeOf((*MockMailManagerAPI)(nil).ListTrafficPoliciesPages), arg0, arg1)
}

// ListTrafficPoliciesPagesWithContext mocks base method
func (m *MockMailManagerAPI) ListTrafficPoliciesPagesWithContext(arg0 context.Context, arg1 *mailmanager.ListTrafficPoliciesInput, arg2 func(*mailmanager.ListTrafficPoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrafficPoliciesPagesWithContext indicates an expected call of ListTrafficPoliciesPagesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListTrafficPoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPoliciesPagesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListTrafficPoliciesPagesWithContext), varargs...)
}

// ListTrafficPoliciesRequest mocks base method
func (m *MockMailManagerAPI) ListTrafficPoliciesRequest(arg0 *mailmanager.ListTrafficPoliciesInput) (*request.Request, *mailmanager.ListTrafficPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.ListTrafficPoliciesOutput)
	return ret0, ret1
}

// ListTrafficPoliciesRequest indicates an expected call of ListTrafficPoliciesRequest
func (mr *MockMailManagerAPIMockRecorder) ListTrafficPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPoliciesRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).ListTrafficPoliciesRequest), arg0)
}

// ListTrafficPoliciesWithContext mocks base method
func (m *MockMailManagerAPI) ListTrafficPoliciesWithContext(arg0 context.Context, arg1 *mailmanager.ListTrafficPoliciesInput, arg2 ...request.Option) (*mailmanager.ListTrafficPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.ListTrafficPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPoliciesWithContext indicates an expected call of ListTrafficPoliciesWithContext
func (mr *MockMailManagerAPIMockRecorder) ListTrafficPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPoliciesWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).ListTrafficPoliciesWithContext), varargs...)
}

// StartArchiveExport mocks base method
func (m *MockMailManagerAPI) StartArchiveExport(arg0 *mailmanager.StartArchiveExportInput) (*mailmanager.StartArchiveExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartArchiveExport", arg0)
	ret0, _ := ret[0].(*mailmanager.StartArchiveExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartArchiveExport indicates an expected call of StartArchiveExport
func (mr *MockMailManagerAPIMockRecorder) StartArchiveExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartArchiveExport", reflect.TypeOf((*MockMailManagerAPI)(nil).StartArchiveExport), arg0)
}

// StartArchiveExportRequest mocks base method
func (m *MockMailManagerAPI) StartArchiveExportRequest(arg0 *mailmanager.StartArchiveExportInput) (*request.Request, *mailmanager.StartArchiveExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartArchiveExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.StartArchiveExportOutput)
	return ret0, ret1
}

// StartArchiveExportRequest indicates an expected call of StartArchiveExportRequest
func (mr *MockMailManagerAPIMockRecorder) StartArchiveExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartArchiveExportRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).StartArchiveExportRequest), arg0)
}

// StartArchiveExportWithContext mocks base method
func (m *MockMailManagerAPI) StartArchiveExportWithContext(arg0 context.Context, arg1 *mailmanager.StartArchiveExportInput, arg2 ...request.Option) (*mailmanager.StartArchiveExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartArchiveExportWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.StartArchiveExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartArchiveExportWithContext indicates an expected call of StartArchiveExportWithContext
func (mr *MockMailManagerAPIMockRecorder) StartArchiveExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartArchiveExportWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).StartArchiveExportWithContext), varargs...)
}

// StartArchiveSearch mocks base method
func (m *MockMailManagerAPI) StartArchiveSearch(arg0 *mailmanager.StartArchiveSearchInput) (*mailmanager.StartArchiveSearchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartArchiveSearch", arg0)
	ret0, _ := ret[0].(*mailmanager.StartArchiveSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartArchiveSearch indicates an expected call of StartArchiveSearch
func (mr *MockMailManagerAPIMockRecorder) StartArchiveSearch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartArchiveSearch", reflect.TypeOf((*MockMailManagerAPI)(nil).StartArchiveSearch), arg0)
}

// StartArchiveSearchRequest mocks base method
func (m *MockMailManagerAPI) StartArchiveSearchRequest(arg0 *mailmanager.StartArchiveSearchInput) (*request.Request, *mailmanager.StartArchiveSearchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartArchiveSearchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.StartArchiveSearchOutput)
	return ret0, ret1
}

// StartArchiveSearchRequest indicates an expected call of StartArchiveSearchRequest
func (mr *MockMailManagerAPIMockRecorder) StartArchiveSearchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartArchiveSearchRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).StartArchiveSearchRequest), arg0)
}

// StartArchiveSearchWithContext mocks base method
func (m *MockMailManagerAPI) StartArchiveSearchWithContext(arg0 context.Context, arg1 *mailmanager.StartArchiveSearchInput, arg2 ...request.Option) (*mailmanager.StartArchiveSearchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartArchiveSearchWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.StartArchiveSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartArchiveSearchWithContext indicates an expected call of StartArchiveSearchWithContext
func (mr *MockMailManagerAPIMockRecorder) StartArchiveSearchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartArchiveSearchWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).StartArchiveSearchWithContext), varargs...)
}

// StopArchiveExport mocks base method
func (m *MockMailManagerAPI) StopArchiveExport(arg0 *mailmanager.StopArchiveExportInput) (*mailmanager.StopArchiveExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopArchiveExport", arg0)
	ret0, _ := ret[0].(*mailmanager.StopArchiveExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopArchiveExport indicates an expected call of StopArchiveExport
func (mr *MockMailManagerAPIMockRecorder) StopArchiveExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopArchiveExport", reflect.TypeOf((*MockMailManagerAPI)(nil).StopArchiveExport), arg0)
}

// StopArchiveExportRequest mocks base method
func (m *MockMailManagerAPI) StopArchiveExportRequest(arg0 *mailmanager.StopArchiveExportInput) (*request.Request, *mailmanager.StopArchiveExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopArchiveExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.StopArchiveExportOutput)
	return ret0, ret1
}

// StopArchiveExportRequest indicates an expected call of StopArchiveExportRequest
func (mr *MockMailManagerAPIMockRecorder) StopArchiveExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopArchiveExportRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).StopArchiveExportRequest), arg0)
}

// StopArchiveExportWithContext mocks base method
func (m *MockMailManagerAPI) StopArchiveExportWithContext(arg0 context.Context, arg1 *mailmanager.StopArchiveExportInput, arg2 ...request.Option) (*mailmanager.StopArchiveExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopArchiveExportWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.StopArchiveExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopArchiveExportWithContext indicates an expected call of StopArchiveExportWithContext
func (mr *MockMailManagerAPIMockRecorder) StopArchiveExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopArchiveExportWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).StopArchiveExportWithContext), varargs...)
}

// StopArchiveSearch mocks base method
func (m *MockMailManagerAPI) StopArchiveSearch(arg0 *mailmanager.StopArchiveSearchInput) (*mailmanager.StopArchiveSearchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopArchiveSearch", arg0)
	ret0, _ := ret[0].(*mailmanager.StopArchiveSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopArchiveSearch indicates an expected call of StopArchiveSearch
func (mr *MockMailManagerAPIMockRecorder) StopArchiveSearch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopArchiveSearch", reflect.TypeOf((*MockMailManagerAPI)(nil).StopArchiveSearch), arg0)
}

// StopArchiveSearchRequest mocks base method
func (m *MockMailManagerAPI) StopArchiveSearchRequest(arg0 *mailmanager.StopArchiveSearchInput) (*request.Request, *mailmanager.StopArchiveSearchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopArchiveSearchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.StopArchiveSearchOutput)
	return ret0, ret1
}

// StopArchiveSearchRequest indicates an expected call of StopArchiveSearchRequest
func (mr *MockMailManagerAPIMockRecorder) StopArchiveSearchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopArchiveSearchRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).StopArchiveSearchRequest), arg0)
}

// StopArchiveSearchWithContext mocks base method
func (m *MockMailManagerAPI) StopArchiveSearchWithContext(arg0 context.Context, arg1 *mailmanager.StopArchiveSearchInput, arg2 ...request.Option) (*mailmanager.StopArchiveSearchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopArchiveSearchWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.StopArchiveSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopArchiveSearchWithContext indicates an expected call of StopArchiveSearchWithContext
func (mr *MockMailManagerAPIMockRecorder) StopArchiveSearchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopArchiveSearchWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).StopArchiveSearchWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockMailManagerAPI) TagResource(arg0 *mailmanager.TagResourceInput) (*mailmanager.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*mailmanager.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockMailManagerAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMailManagerAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockMailManagerAPI) TagResourceRequest(arg0 *mailmanager.TagResourceInput) (*request.Request, *mailmanager.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockMailManagerAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockMailManagerAPI) TagResourceWithContext(arg0 context.Context, arg1 *mailmanager.TagResourceInput, arg2 ...request.Option) (*mailmanager.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockMailManagerAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockMailManagerAPI) UntagResource(arg0 *mailmanager.UntagResourceInput) (*mailmanager.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*mailmanager.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockMailManagerAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMailManagerAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockMailManagerAPI) UntagResourceRequest(arg0 *mailmanager.UntagResourceInput) (*request.Request, *mailmanager.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockMailManagerAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockMailManagerAPI) UntagResourceWithContext(arg0 context.Context, arg1 *mailmanager.UntagResourceInput, arg2 ...request.Option) (*mailmanager.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockMailManagerAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateArchive mocks base method
func (m *MockMailManagerAPI) UpdateArchive(arg0 *mailmanager.UpdateArchiveInput) (*mailmanager.UpdateArchiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArchive", arg0)
	ret0, _ := ret[0].(*mailmanager.UpdateArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArchive indicates an expected call of UpdateArchive
func (mr *MockMailManagerAPIMockRecorder) UpdateArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArchive", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateArchive), arg0)
}

// UpdateArchiveRequest mocks base method
func (m *MockMailManagerAPI) UpdateArchiveRequest(arg0 *mailmanager.UpdateArchiveInput) (*request.Request, *mailmanager.UpdateArchiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArchiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.UpdateArchiveOutput)
	return ret0, ret1
}

// UpdateArchiveRequest indicates an expected call of UpdateArchiveRequest
func (mr *MockMailManagerAPIMockRecorder) UpdateArchiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArchiveRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateArchiveRequest), arg0)
}

// UpdateArchiveWithContext mocks base method
func (m *MockMailManagerAPI) UpdateArchiveWithContext(arg0 context.Context, arg1 *mailmanager.UpdateArchiveInput, arg2 ...request.Option) (*mailmanager.UpdateArchiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateArchiveWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.UpdateArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArchiveWithContext indicates an expected call of UpdateArchiveWithContext
func (mr *MockMailManagerAPIMockRecorder) UpdateArchiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArchiveWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateArchiveWithContext), varargs...)
}

// UpdateIngressPoint mocks base method
func (m *MockMailManagerAPI) UpdateIngressPoint(arg0 *mailmanager.UpdateIngressPointInput) (*mailmanager.UpdateIngressPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngressPoint", arg0)
	ret0, _ := ret[0].(*mailmanager.UpdateIngressPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngressPoint indicates an expected call of UpdateIngressPoint
func (mr *MockMailManagerAPIMockRecorder) UpdateIngressPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngressPoint", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateIngressPoint), arg0)
}

// UpdateIngressPointRequest mocks base method
func (m *MockMailManagerAPI) UpdateIngressPointRequest(arg0 *mailmanager.UpdateIngressPointInput) (*request.Request, *mailmanager.UpdateIngressPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngressPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.UpdateIngressPointOutput)
	return ret0, ret1
}

// UpdateIngressPointRequest indicates an expected call of UpdateIngressPointRequest
func (mr *MockMailManagerAPIMockRecorder) UpdateIngressPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngressPointRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateIngressPointRequest), arg0)
}

// UpdateIngressPointWithContext mocks base method
func (m *MockMailManagerAPI) UpdateIngressPointWithContext(arg0 context.Context, arg1 *mailmanager.UpdateIngressPointInput, arg2 ...request.Option) (*mailmanager.UpdateIngressPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIngressPointWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.UpdateIngressPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngressPointWithContext indicates an expected call of UpdateIngressPointWithContext
func (mr *MockMailManagerAPIMockRecorder) UpdateIngressPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngressPointWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateIngressPointWithContext), varargs...)
}

// UpdateRelay mocks base method
func (m *MockMailManagerAPI) UpdateRelay(arg0 *mailmanager.UpdateRelayInput) (*mailmanager.UpdateRelayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRelay", arg0)
	ret0, _ := ret[0].(*mailmanager.UpdateRelayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRelay indicates an expected call of UpdateRelay
func (mr *MockMailManagerAPIMockRecorder) UpdateRelay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelay", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateRelay), arg0)
}

// UpdateRelayRequest mocks base method
func (m *MockMailManagerAPI) UpdateRelayRequest(arg0 *mailmanager.UpdateRelayInput) (*request.Request, *mailmanager.UpdateRelayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRelayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.UpdateRelayOutput)
	return ret0, ret1
}

// UpdateRelayRequest indicates an expected call of UpdateRelayRequest
func (mr *MockMailManagerAPIMockRecorder) UpdateRelayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelayRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateRelayRequest), arg0)
}

// UpdateRelayWithContext mocks base method
func (m *MockMailManagerAPI) UpdateRelayWithContext(arg0 context.Context, arg1 *mailmanager.UpdateRelayInput, arg2 ...request.Option) (*mailmanager.UpdateRelayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRelayWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.UpdateRelayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRelayWithContext indicates an expected call of UpdateRelayWithContext
func (mr *MockMailManagerAPIMockRecorder) UpdateRelayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelayWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateRelayWithContext), varargs...)
}

// UpdateRuleSet mocks base method
func (m *MockMailManagerAPI) UpdateRuleSet(arg0 *mailmanager.UpdateRuleSetInput) (*mailmanager.UpdateRuleSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleSet", arg0)
	ret0, _ := ret[0].(*mailmanager.UpdateRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleSet indicates an expected call of UpdateRuleSet
func (mr *MockMailManagerAPIMockRecorder) UpdateRuleSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleSet", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateRuleSet), arg0)
}

// UpdateRuleSetRequest mocks base method
func (m *MockMailManagerAPI) UpdateRuleSetRequest(arg0 *mailmanager.UpdateRuleSetInput) (*request.Request, *mailmanager.UpdateRuleSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.UpdateRuleSetOutput)
	return ret0, ret1
}

// UpdateRuleSetRequest indicates an expected call of UpdateRuleSetRequest
func (mr *MockMailManagerAPIMockRecorder) UpdateRuleSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleSetRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateRuleSetRequest), arg0)
}

// UpdateRuleSetWithContext mocks base method
func (m *MockMailManagerAPI) UpdateRuleSetWithContext(arg0 context.Context, arg1 *mailmanager.UpdateRuleSetInput, arg2 ...request.Option) (*mailmanager.UpdateRuleSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleSetWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.UpdateRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleSetWithContext indicates an expected call of UpdateRuleSetWithContext
func (mr *MockMailManagerAPIMockRecorder) UpdateRuleSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleSetWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateRuleSetWithContext), varargs...)
}

// UpdateTrafficPolicy mocks base method
func (m *MockMailManagerAPI) UpdateTrafficPolicy(arg0 *mailmanager.UpdateTrafficPolicyInput) (*mailmanager.UpdateTrafficPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrafficPolicy", arg0)
	ret0, _ := ret[0].(*mailmanager.UpdateTrafficPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrafficPolicy indicates an expected call of UpdateTrafficPolicy
func (mr *MockMailManagerAPIMockRecorder) UpdateTrafficPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicy", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateTrafficPolicy), arg0)
}

// UpdateTrafficPolicyRequest mocks base method
func (m *MockMailManagerAPI) UpdateTrafficPolicyRequest(arg0 *mailmanager.UpdateTrafficPolicyInput) (*request.Request, *mailmanager.UpdateTrafficPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrafficPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mailmanager.UpdateTrafficPolicyOutput)
	return ret0, ret1
}

// UpdateTrafficPolicyRequest indicates an expected call of UpdateTrafficPolicyRequest
func (mr *MockMailManagerAPIMockRecorder) UpdateTrafficPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicyRequest", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateTrafficPolicyRequest), arg0)
}

// UpdateTrafficPolicyWithContext mocks base method
func (m *MockMailManagerAPI) UpdateTrafficPolicyWithContext(arg0 context.Context, arg1 *mailmanager.UpdateTrafficPolicyInput, arg2 ...request.Option) (*mailmanager.UpdateTrafficPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrafficPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mailmanager.UpdateTrafficPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrafficPolicyWithContext indicates an expected call of UpdateTrafficPolicyWithContext
func (mr *MockMailManagerAPIMockRecorder) UpdateTrafficPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrafficPolicyWithContext", reflect.TypeOf((*MockMailManagerAPI)(nil).UpdateTrafficPolicyWithContext), varargs...)
}
