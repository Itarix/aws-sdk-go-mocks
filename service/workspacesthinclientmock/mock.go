// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/workspacesthinclient/workspacesthinclientiface (interfaces: WorkSpacesThinClientAPI)

// Package workspacesthinclientmock is a generated GoMock package.
package workspacesthinclientmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	workspacesthinclient "github.com/aws/aws-sdk-go/service/workspacesthinclient"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWorkSpacesThinClientAPI is a mock of WorkSpacesThinClientAPI interface
type MockWorkSpacesThinClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWorkSpacesThinClientAPIMockRecorder
}

// MockWorkSpacesThinClientAPIMockRecorder is the mock recorder for MockWorkSpacesThinClientAPI
type MockWorkSpacesThinClientAPIMockRecorder struct {
	mock *MockWorkSpacesThinClientAPI
}

// NewMockWorkSpacesThinClientAPI creates a new mock instance
func NewMockWorkSpacesThinClientAPI(ctrl *gomock.Controller) *MockWorkSpacesThinClientAPI {
	mock := &MockWorkSpacesThinClientAPI{ctrl: ctrl}
	mock.recorder = &MockWorkSpacesThinClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkSpacesThinClientAPI) EXPECT() *MockWorkSpacesThinClientAPIMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method
func (m *MockWorkSpacesThinClientAPI) CreateEnvironment(arg0 *workspacesthinclient.CreateEnvironmentInput) (*workspacesthinclient.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockWorkSpacesThinClientAPIMockRecorder) CreateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).CreateEnvironment), arg0)
}

// CreateEnvironmentRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) CreateEnvironmentRequest(arg0 *workspacesthinclient.CreateEnvironmentInput) (*request.Request, *workspacesthinclient.CreateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.CreateEnvironmentOutput)
	return ret0, ret1
}

// CreateEnvironmentRequest indicates an expected call of CreateEnvironmentRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) CreateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).CreateEnvironmentRequest), arg0)
}

// CreateEnvironmentWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) CreateEnvironmentWithContext(arg0 context.Context, arg1 *workspacesthinclient.CreateEnvironmentInput, arg2 ...request.Option) (*workspacesthinclient.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentWithContext indicates an expected call of CreateEnvironmentWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) CreateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).CreateEnvironmentWithContext), varargs...)
}

// DeleteDevice mocks base method
func (m *MockWorkSpacesThinClientAPI) DeleteDevice(arg0 *workspacesthinclient.DeleteDeviceInput) (*workspacesthinclient.DeleteDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.DeleteDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDevice indicates an expected call of DeleteDevice
func (mr *MockWorkSpacesThinClientAPIMockRecorder) DeleteDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).DeleteDevice), arg0)
}

// DeleteDeviceRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) DeleteDeviceRequest(arg0 *workspacesthinclient.DeleteDeviceInput) (*request.Request, *workspacesthinclient.DeleteDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.DeleteDeviceOutput)
	return ret0, ret1
}

// DeleteDeviceRequest indicates an expected call of DeleteDeviceRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) DeleteDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).DeleteDeviceRequest), arg0)
}

// DeleteDeviceWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) DeleteDeviceWithContext(arg0 context.Context, arg1 *workspacesthinclient.DeleteDeviceInput, arg2 ...request.Option) (*workspacesthinclient.DeleteDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.DeleteDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeviceWithContext indicates an expected call of DeleteDeviceWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) DeleteDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).DeleteDeviceWithContext), varargs...)
}

// DeleteEnvironment mocks base method
func (m *MockWorkSpacesThinClientAPI) DeleteEnvironment(arg0 *workspacesthinclient.DeleteEnvironmentInput) (*workspacesthinclient.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockWorkSpacesThinClientAPIMockRecorder) DeleteEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).DeleteEnvironment), arg0)
}

// DeleteEnvironmentRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) DeleteEnvironmentRequest(arg0 *workspacesthinclient.DeleteEnvironmentInput) (*request.Request, *workspacesthinclient.DeleteEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.DeleteEnvironmentOutput)
	return ret0, ret1
}

// DeleteEnvironmentRequest indicates an expected call of DeleteEnvironmentRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) DeleteEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).DeleteEnvironmentRequest), arg0)
}

// DeleteEnvironmentWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) DeleteEnvironmentWithContext(arg0 context.Context, arg1 *workspacesthinclient.DeleteEnvironmentInput, arg2 ...request.Option) (*workspacesthinclient.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentWithContext indicates an expected call of DeleteEnvironmentWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) DeleteEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).DeleteEnvironmentWithContext), varargs...)
}

// DeregisterDevice mocks base method
func (m *MockWorkSpacesThinClientAPI) DeregisterDevice(arg0 *workspacesthinclient.DeregisterDeviceInput) (*workspacesthinclient.DeregisterDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterDevice", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.DeregisterDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterDevice indicates an expected call of DeregisterDevice
func (mr *MockWorkSpacesThinClientAPIMockRecorder) DeregisterDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterDevice", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).DeregisterDevice), arg0)
}

// DeregisterDeviceRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) DeregisterDeviceRequest(arg0 *workspacesthinclient.DeregisterDeviceInput) (*request.Request, *workspacesthinclient.DeregisterDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.DeregisterDeviceOutput)
	return ret0, ret1
}

// DeregisterDeviceRequest indicates an expected call of DeregisterDeviceRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) DeregisterDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterDeviceRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).DeregisterDeviceRequest), arg0)
}

// DeregisterDeviceWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) DeregisterDeviceWithContext(arg0 context.Context, arg1 *workspacesthinclient.DeregisterDeviceInput, arg2 ...request.Option) (*workspacesthinclient.DeregisterDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.DeregisterDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterDeviceWithContext indicates an expected call of DeregisterDeviceWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) DeregisterDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterDeviceWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).DeregisterDeviceWithContext), varargs...)
}

// GetDevice mocks base method
func (m *MockWorkSpacesThinClientAPI) GetDevice(arg0 *workspacesthinclient.GetDeviceInput) (*workspacesthinclient.GetDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.GetDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice
func (mr *MockWorkSpacesThinClientAPIMockRecorder) GetDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).GetDevice), arg0)
}

// GetDeviceRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) GetDeviceRequest(arg0 *workspacesthinclient.GetDeviceInput) (*request.Request, *workspacesthinclient.GetDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.GetDeviceOutput)
	return ret0, ret1
}

// GetDeviceRequest indicates an expected call of GetDeviceRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) GetDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).GetDeviceRequest), arg0)
}

// GetDeviceWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) GetDeviceWithContext(arg0 context.Context, arg1 *workspacesthinclient.GetDeviceInput, arg2 ...request.Option) (*workspacesthinclient.GetDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.GetDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceWithContext indicates an expected call of GetDeviceWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) GetDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).GetDeviceWithContext), varargs...)
}

// GetEnvironment mocks base method
func (m *MockWorkSpacesThinClientAPI) GetEnvironment(arg0 *workspacesthinclient.GetEnvironmentInput) (*workspacesthinclient.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockWorkSpacesThinClientAPIMockRecorder) GetEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).GetEnvironment), arg0)
}

// GetEnvironmentRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) GetEnvironmentRequest(arg0 *workspacesthinclient.GetEnvironmentInput) (*request.Request, *workspacesthinclient.GetEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.GetEnvironmentOutput)
	return ret0, ret1
}

// GetEnvironmentRequest indicates an expected call of GetEnvironmentRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) GetEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).GetEnvironmentRequest), arg0)
}

// GetEnvironmentWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) GetEnvironmentWithContext(arg0 context.Context, arg1 *workspacesthinclient.GetEnvironmentInput, arg2 ...request.Option) (*workspacesthinclient.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentWithContext indicates an expected call of GetEnvironmentWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) GetEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).GetEnvironmentWithContext), varargs...)
}

// GetSoftwareSet mocks base method
func (m *MockWorkSpacesThinClientAPI) GetSoftwareSet(arg0 *workspacesthinclient.GetSoftwareSetInput) (*workspacesthinclient.GetSoftwareSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoftwareSet", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.GetSoftwareSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoftwareSet indicates an expected call of GetSoftwareSet
func (mr *MockWorkSpacesThinClientAPIMockRecorder) GetSoftwareSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoftwareSet", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).GetSoftwareSet), arg0)
}

// GetSoftwareSetRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) GetSoftwareSetRequest(arg0 *workspacesthinclient.GetSoftwareSetInput) (*request.Request, *workspacesthinclient.GetSoftwareSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoftwareSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.GetSoftwareSetOutput)
	return ret0, ret1
}

// GetSoftwareSetRequest indicates an expected call of GetSoftwareSetRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) GetSoftwareSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoftwareSetRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).GetSoftwareSetRequest), arg0)
}

// GetSoftwareSetWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) GetSoftwareSetWithContext(arg0 context.Context, arg1 *workspacesthinclient.GetSoftwareSetInput, arg2 ...request.Option) (*workspacesthinclient.GetSoftwareSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSoftwareSetWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.GetSoftwareSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoftwareSetWithContext indicates an expected call of GetSoftwareSetWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) GetSoftwareSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoftwareSetWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).GetSoftwareSetWithContext), varargs...)
}

// ListDevices mocks base method
func (m *MockWorkSpacesThinClientAPI) ListDevices(arg0 *workspacesthinclient.ListDevicesInput) (*workspacesthinclient.ListDevicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.ListDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListDevices), arg0)
}

// ListDevicesPages mocks base method
func (m *MockWorkSpacesThinClientAPI) ListDevicesPages(arg0 *workspacesthinclient.ListDevicesInput, arg1 func(*workspacesthinclient.ListDevicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevicesPages indicates an expected call of ListDevicesPages
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListDevicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesPages", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListDevicesPages), arg0, arg1)
}

// ListDevicesPagesWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) ListDevicesPagesWithContext(arg0 context.Context, arg1 *workspacesthinclient.ListDevicesInput, arg2 func(*workspacesthinclient.ListDevicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevicesPagesWithContext indicates an expected call of ListDevicesPagesWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListDevicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesPagesWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListDevicesPagesWithContext), varargs...)
}

// ListDevicesRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) ListDevicesRequest(arg0 *workspacesthinclient.ListDevicesInput) (*request.Request, *workspacesthinclient.ListDevicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.ListDevicesOutput)
	return ret0, ret1
}

// ListDevicesRequest indicates an expected call of ListDevicesRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListDevicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListDevicesRequest), arg0)
}

// ListDevicesWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) ListDevicesWithContext(arg0 context.Context, arg1 *workspacesthinclient.ListDevicesInput, arg2 ...request.Option) (*workspacesthinclient.ListDevicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevicesWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.ListDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevicesWithContext indicates an expected call of ListDevicesWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListDevicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListDevicesWithContext), varargs...)
}

// ListEnvironments mocks base method
func (m *MockWorkSpacesThinClientAPI) ListEnvironments(arg0 *workspacesthinclient.ListEnvironmentsInput) (*workspacesthinclient.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListEnvironments), arg0)
}

// ListEnvironmentsPages mocks base method
func (m *MockWorkSpacesThinClientAPI) ListEnvironmentsPages(arg0 *workspacesthinclient.ListEnvironmentsInput, arg1 func(*workspacesthinclient.ListEnvironmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPages indicates an expected call of ListEnvironmentsPages
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListEnvironmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPages", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListEnvironmentsPages), arg0, arg1)
}

// ListEnvironmentsPagesWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) ListEnvironmentsPagesWithContext(arg0 context.Context, arg1 *workspacesthinclient.ListEnvironmentsInput, arg2 func(*workspacesthinclient.ListEnvironmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPagesWithContext indicates an expected call of ListEnvironmentsPagesWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListEnvironmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPagesWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListEnvironmentsPagesWithContext), varargs...)
}

// ListEnvironmentsRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) ListEnvironmentsRequest(arg0 *workspacesthinclient.ListEnvironmentsInput) (*request.Request, *workspacesthinclient.ListEnvironmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.ListEnvironmentsOutput)
	return ret0, ret1
}

// ListEnvironmentsRequest indicates an expected call of ListEnvironmentsRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListEnvironmentsRequest), arg0)
}

// ListEnvironmentsWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) ListEnvironmentsWithContext(arg0 context.Context, arg1 *workspacesthinclient.ListEnvironmentsInput, arg2 ...request.Option) (*workspacesthinclient.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsWithContext indicates an expected call of ListEnvironmentsWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListEnvironmentsWithContext), varargs...)
}

// ListSoftwareSets mocks base method
func (m *MockWorkSpacesThinClientAPI) ListSoftwareSets(arg0 *workspacesthinclient.ListSoftwareSetsInput) (*workspacesthinclient.ListSoftwareSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSoftwareSets", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.ListSoftwareSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSoftwareSets indicates an expected call of ListSoftwareSets
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListSoftwareSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSoftwareSets", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListSoftwareSets), arg0)
}

// ListSoftwareSetsPages mocks base method
func (m *MockWorkSpacesThinClientAPI) ListSoftwareSetsPages(arg0 *workspacesthinclient.ListSoftwareSetsInput, arg1 func(*workspacesthinclient.ListSoftwareSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSoftwareSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSoftwareSetsPages indicates an expected call of ListSoftwareSetsPages
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListSoftwareSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSoftwareSetsPages", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListSoftwareSetsPages), arg0, arg1)
}

// ListSoftwareSetsPagesWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) ListSoftwareSetsPagesWithContext(arg0 context.Context, arg1 *workspacesthinclient.ListSoftwareSetsInput, arg2 func(*workspacesthinclient.ListSoftwareSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSoftwareSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSoftwareSetsPagesWithContext indicates an expected call of ListSoftwareSetsPagesWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListSoftwareSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSoftwareSetsPagesWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListSoftwareSetsPagesWithContext), varargs...)
}

// ListSoftwareSetsRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) ListSoftwareSetsRequest(arg0 *workspacesthinclient.ListSoftwareSetsInput) (*request.Request, *workspacesthinclient.ListSoftwareSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSoftwareSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.ListSoftwareSetsOutput)
	return ret0, ret1
}

// ListSoftwareSetsRequest indicates an expected call of ListSoftwareSetsRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListSoftwareSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSoftwareSetsRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListSoftwareSetsRequest), arg0)
}

// ListSoftwareSetsWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) ListSoftwareSetsWithContext(arg0 context.Context, arg1 *workspacesthinclient.ListSoftwareSetsInput, arg2 ...request.Option) (*workspacesthinclient.ListSoftwareSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSoftwareSetsWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.ListSoftwareSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSoftwareSetsWithContext indicates an expected call of ListSoftwareSetsWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListSoftwareSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSoftwareSetsWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListSoftwareSetsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockWorkSpacesThinClientAPI) ListTagsForResource(arg0 *workspacesthinclient.ListTagsForResourceInput) (*workspacesthinclient.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) ListTagsForResourceRequest(arg0 *workspacesthinclient.ListTagsForResourceInput) (*request.Request, *workspacesthinclient.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *workspacesthinclient.ListTagsForResourceInput, arg2 ...request.Option) (*workspacesthinclient.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockWorkSpacesThinClientAPI) TagResource(arg0 *workspacesthinclient.TagResourceInput) (*workspacesthinclient.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockWorkSpacesThinClientAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) TagResourceRequest(arg0 *workspacesthinclient.TagResourceInput) (*request.Request, *workspacesthinclient.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) TagResourceWithContext(arg0 context.Context, arg1 *workspacesthinclient.TagResourceInput, arg2 ...request.Option) (*workspacesthinclient.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockWorkSpacesThinClientAPI) UntagResource(arg0 *workspacesthinclient.UntagResourceInput) (*workspacesthinclient.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) UntagResourceRequest(arg0 *workspacesthinclient.UntagResourceInput) (*request.Request, *workspacesthinclient.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) UntagResourceWithContext(arg0 context.Context, arg1 *workspacesthinclient.UntagResourceInput, arg2 ...request.Option) (*workspacesthinclient.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDevice mocks base method
func (m *MockWorkSpacesThinClientAPI) UpdateDevice(arg0 *workspacesthinclient.UpdateDeviceInput) (*workspacesthinclient.UpdateDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.UpdateDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevice indicates an expected call of UpdateDevice
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UpdateDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UpdateDevice), arg0)
}

// UpdateDeviceRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) UpdateDeviceRequest(arg0 *workspacesthinclient.UpdateDeviceInput) (*request.Request, *workspacesthinclient.UpdateDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.UpdateDeviceOutput)
	return ret0, ret1
}

// UpdateDeviceRequest indicates an expected call of UpdateDeviceRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UpdateDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UpdateDeviceRequest), arg0)
}

// UpdateDeviceWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) UpdateDeviceWithContext(arg0 context.Context, arg1 *workspacesthinclient.UpdateDeviceInput, arg2 ...request.Option) (*workspacesthinclient.UpdateDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.UpdateDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceWithContext indicates an expected call of UpdateDeviceWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UpdateDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UpdateDeviceWithContext), varargs...)
}

// UpdateEnvironment mocks base method
func (m *MockWorkSpacesThinClientAPI) UpdateEnvironment(arg0 *workspacesthinclient.UpdateEnvironmentInput) (*workspacesthinclient.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UpdateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UpdateEnvironment), arg0)
}

// UpdateEnvironmentRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) UpdateEnvironmentRequest(arg0 *workspacesthinclient.UpdateEnvironmentInput) (*request.Request, *workspacesthinclient.UpdateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.UpdateEnvironmentOutput)
	return ret0, ret1
}

// UpdateEnvironmentRequest indicates an expected call of UpdateEnvironmentRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UpdateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UpdateEnvironmentRequest), arg0)
}

// UpdateEnvironmentWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) UpdateEnvironmentWithContext(arg0 context.Context, arg1 *workspacesthinclient.UpdateEnvironmentInput, arg2 ...request.Option) (*workspacesthinclient.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentWithContext indicates an expected call of UpdateEnvironmentWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UpdateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UpdateEnvironmentWithContext), varargs...)
}

// UpdateSoftwareSet mocks base method
func (m *MockWorkSpacesThinClientAPI) UpdateSoftwareSet(arg0 *workspacesthinclient.UpdateSoftwareSetInput) (*workspacesthinclient.UpdateSoftwareSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSoftwareSet", arg0)
	ret0, _ := ret[0].(*workspacesthinclient.UpdateSoftwareSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSoftwareSet indicates an expected call of UpdateSoftwareSet
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UpdateSoftwareSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSoftwareSet", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UpdateSoftwareSet), arg0)
}

// UpdateSoftwareSetRequest mocks base method
func (m *MockWorkSpacesThinClientAPI) UpdateSoftwareSetRequest(arg0 *workspacesthinclient.UpdateSoftwareSetInput) (*request.Request, *workspacesthinclient.UpdateSoftwareSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSoftwareSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspacesthinclient.UpdateSoftwareSetOutput)
	return ret0, ret1
}

// UpdateSoftwareSetRequest indicates an expected call of UpdateSoftwareSetRequest
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UpdateSoftwareSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSoftwareSetRequest", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UpdateSoftwareSetRequest), arg0)
}

// UpdateSoftwareSetWithContext mocks base method
func (m *MockWorkSpacesThinClientAPI) UpdateSoftwareSetWithContext(arg0 context.Context, arg1 *workspacesthinclient.UpdateSoftwareSetInput, arg2 ...request.Option) (*workspacesthinclient.UpdateSoftwareSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSoftwareSetWithContext", varargs...)
	ret0, _ := ret[0].(*workspacesthinclient.UpdateSoftwareSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSoftwareSetWithContext indicates an expected call of UpdateSoftwareSetWithContext
func (mr *MockWorkSpacesThinClientAPIMockRecorder) UpdateSoftwareSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSoftwareSetWithContext", reflect.TypeOf((*MockWorkSpacesThinClientAPI)(nil).UpdateSoftwareSetWithContext), varargs...)
}
