// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/xray/xrayiface (interfaces: XRayAPI)

// Package xraymock is a generated GoMock package.
package xraymock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	xray "github.com/aws/aws-sdk-go/service/xray"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockXRayAPI is a mock of XRayAPI interface
type MockXRayAPI struct {
	ctrl     *gomock.Controller
	recorder *MockXRayAPIMockRecorder
}

// MockXRayAPIMockRecorder is the mock recorder for MockXRayAPI
type MockXRayAPIMockRecorder struct {
	mock *MockXRayAPI
}

// NewMockXRayAPI creates a new mock instance
func NewMockXRayAPI(ctrl *gomock.Controller) *MockXRayAPI {
	mock := &MockXRayAPI{ctrl: ctrl}
	mock.recorder = &MockXRayAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockXRayAPI) EXPECT() *MockXRayAPIMockRecorder {
	return m.recorder
}

// BatchGetTraces mocks base method
func (m *MockXRayAPI) BatchGetTraces(arg0 *xray.BatchGetTracesInput) (*xray.BatchGetTracesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTraces", arg0)
	ret0, _ := ret[0].(*xray.BatchGetTracesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTraces indicates an expected call of BatchGetTraces
func (mr *MockXRayAPIMockRecorder) BatchGetTraces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTraces", reflect.TypeOf((*MockXRayAPI)(nil).BatchGetTraces), arg0)
}

// BatchGetTracesPages mocks base method
func (m *MockXRayAPI) BatchGetTracesPages(arg0 *xray.BatchGetTracesInput, arg1 func(*xray.BatchGetTracesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTracesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchGetTracesPages indicates an expected call of BatchGetTracesPages
func (mr *MockXRayAPIMockRecorder) BatchGetTracesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTracesPages", reflect.TypeOf((*MockXRayAPI)(nil).BatchGetTracesPages), arg0, arg1)
}

// BatchGetTracesPagesWithContext mocks base method
func (m *MockXRayAPI) BatchGetTracesPagesWithContext(arg0 aws.Context, arg1 *xray.BatchGetTracesInput, arg2 func(*xray.BatchGetTracesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetTracesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchGetTracesPagesWithContext indicates an expected call of BatchGetTracesPagesWithContext
func (mr *MockXRayAPIMockRecorder) BatchGetTracesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTracesPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).BatchGetTracesPagesWithContext), varargs...)
}

// BatchGetTracesRequest mocks base method
func (m *MockXRayAPI) BatchGetTracesRequest(arg0 *xray.BatchGetTracesInput) (*request.Request, *xray.BatchGetTracesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTracesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.BatchGetTracesOutput)
	return ret0, ret1
}

// BatchGetTracesRequest indicates an expected call of BatchGetTracesRequest
func (mr *MockXRayAPIMockRecorder) BatchGetTracesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTracesRequest", reflect.TypeOf((*MockXRayAPI)(nil).BatchGetTracesRequest), arg0)
}

// BatchGetTracesWithContext mocks base method
func (m *MockXRayAPI) BatchGetTracesWithContext(arg0 aws.Context, arg1 *xray.BatchGetTracesInput, arg2 ...request.Option) (*xray.BatchGetTracesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetTracesWithContext", varargs...)
	ret0, _ := ret[0].(*xray.BatchGetTracesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTracesWithContext indicates an expected call of BatchGetTracesWithContext
func (mr *MockXRayAPIMockRecorder) BatchGetTracesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTracesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).BatchGetTracesWithContext), varargs...)
}

// GetEncryptionConfig mocks base method
func (m *MockXRayAPI) GetEncryptionConfig(arg0 *xray.GetEncryptionConfigInput) (*xray.GetEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptionConfig", arg0)
	ret0, _ := ret[0].(*xray.GetEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionConfig indicates an expected call of GetEncryptionConfig
func (mr *MockXRayAPIMockRecorder) GetEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionConfig", reflect.TypeOf((*MockXRayAPI)(nil).GetEncryptionConfig), arg0)
}

// GetEncryptionConfigRequest mocks base method
func (m *MockXRayAPI) GetEncryptionConfigRequest(arg0 *xray.GetEncryptionConfigInput) (*request.Request, *xray.GetEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetEncryptionConfigOutput)
	return ret0, ret1
}

// GetEncryptionConfigRequest indicates an expected call of GetEncryptionConfigRequest
func (mr *MockXRayAPIMockRecorder) GetEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionConfigRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetEncryptionConfigRequest), arg0)
}

// GetEncryptionConfigWithContext mocks base method
func (m *MockXRayAPI) GetEncryptionConfigWithContext(arg0 aws.Context, arg1 *xray.GetEncryptionConfigInput, arg2 ...request.Option) (*xray.GetEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionConfigWithContext indicates an expected call of GetEncryptionConfigWithContext
func (mr *MockXRayAPIMockRecorder) GetEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionConfigWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetEncryptionConfigWithContext), varargs...)
}

// GetServiceGraph mocks base method
func (m *MockXRayAPI) GetServiceGraph(arg0 *xray.GetServiceGraphInput) (*xray.GetServiceGraphOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceGraph", arg0)
	ret0, _ := ret[0].(*xray.GetServiceGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceGraph indicates an expected call of GetServiceGraph
func (mr *MockXRayAPIMockRecorder) GetServiceGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraph", reflect.TypeOf((*MockXRayAPI)(nil).GetServiceGraph), arg0)
}

// GetServiceGraphPages mocks base method
func (m *MockXRayAPI) GetServiceGraphPages(arg0 *xray.GetServiceGraphInput, arg1 func(*xray.GetServiceGraphOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceGraphPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetServiceGraphPages indicates an expected call of GetServiceGraphPages
func (mr *MockXRayAPIMockRecorder) GetServiceGraphPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraphPages", reflect.TypeOf((*MockXRayAPI)(nil).GetServiceGraphPages), arg0, arg1)
}

// GetServiceGraphPagesWithContext mocks base method
func (m *MockXRayAPI) GetServiceGraphPagesWithContext(arg0 aws.Context, arg1 *xray.GetServiceGraphInput, arg2 func(*xray.GetServiceGraphOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceGraphPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetServiceGraphPagesWithContext indicates an expected call of GetServiceGraphPagesWithContext
func (mr *MockXRayAPIMockRecorder) GetServiceGraphPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraphPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetServiceGraphPagesWithContext), varargs...)
}

// GetServiceGraphRequest mocks base method
func (m *MockXRayAPI) GetServiceGraphRequest(arg0 *xray.GetServiceGraphInput) (*request.Request, *xray.GetServiceGraphOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceGraphRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetServiceGraphOutput)
	return ret0, ret1
}

// GetServiceGraphRequest indicates an expected call of GetServiceGraphRequest
func (mr *MockXRayAPIMockRecorder) GetServiceGraphRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraphRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetServiceGraphRequest), arg0)
}

// GetServiceGraphWithContext mocks base method
func (m *MockXRayAPI) GetServiceGraphWithContext(arg0 aws.Context, arg1 *xray.GetServiceGraphInput, arg2 ...request.Option) (*xray.GetServiceGraphOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceGraphWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetServiceGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceGraphWithContext indicates an expected call of GetServiceGraphWithContext
func (mr *MockXRayAPIMockRecorder) GetServiceGraphWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraphWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetServiceGraphWithContext), varargs...)
}

// GetTraceGraph mocks base method
func (m *MockXRayAPI) GetTraceGraph(arg0 *xray.GetTraceGraphInput) (*xray.GetTraceGraphOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceGraph", arg0)
	ret0, _ := ret[0].(*xray.GetTraceGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceGraph indicates an expected call of GetTraceGraph
func (mr *MockXRayAPIMockRecorder) GetTraceGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraph", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceGraph), arg0)
}

// GetTraceGraphPages mocks base method
func (m *MockXRayAPI) GetTraceGraphPages(arg0 *xray.GetTraceGraphInput, arg1 func(*xray.GetTraceGraphOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceGraphPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTraceGraphPages indicates an expected call of GetTraceGraphPages
func (mr *MockXRayAPIMockRecorder) GetTraceGraphPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraphPages", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceGraphPages), arg0, arg1)
}

// GetTraceGraphPagesWithContext mocks base method
func (m *MockXRayAPI) GetTraceGraphPagesWithContext(arg0 aws.Context, arg1 *xray.GetTraceGraphInput, arg2 func(*xray.GetTraceGraphOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceGraphPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTraceGraphPagesWithContext indicates an expected call of GetTraceGraphPagesWithContext
func (mr *MockXRayAPIMockRecorder) GetTraceGraphPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraphPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceGraphPagesWithContext), varargs...)
}

// GetTraceGraphRequest mocks base method
func (m *MockXRayAPI) GetTraceGraphRequest(arg0 *xray.GetTraceGraphInput) (*request.Request, *xray.GetTraceGraphOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceGraphRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetTraceGraphOutput)
	return ret0, ret1
}

// GetTraceGraphRequest indicates an expected call of GetTraceGraphRequest
func (mr *MockXRayAPIMockRecorder) GetTraceGraphRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraphRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceGraphRequest), arg0)
}

// GetTraceGraphWithContext mocks base method
func (m *MockXRayAPI) GetTraceGraphWithContext(arg0 aws.Context, arg1 *xray.GetTraceGraphInput, arg2 ...request.Option) (*xray.GetTraceGraphOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceGraphWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetTraceGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceGraphWithContext indicates an expected call of GetTraceGraphWithContext
func (mr *MockXRayAPIMockRecorder) GetTraceGraphWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraphWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceGraphWithContext), varargs...)
}

// GetTraceSummaries mocks base method
func (m *MockXRayAPI) GetTraceSummaries(arg0 *xray.GetTraceSummariesInput) (*xray.GetTraceSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceSummaries", arg0)
	ret0, _ := ret[0].(*xray.GetTraceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceSummaries indicates an expected call of GetTraceSummaries
func (mr *MockXRayAPIMockRecorder) GetTraceSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummaries", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceSummaries), arg0)
}

// GetTraceSummariesPages mocks base method
func (m *MockXRayAPI) GetTraceSummariesPages(arg0 *xray.GetTraceSummariesInput, arg1 func(*xray.GetTraceSummariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceSummariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTraceSummariesPages indicates an expected call of GetTraceSummariesPages
func (mr *MockXRayAPIMockRecorder) GetTraceSummariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummariesPages", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceSummariesPages), arg0, arg1)
}

// GetTraceSummariesPagesWithContext mocks base method
func (m *MockXRayAPI) GetTraceSummariesPagesWithContext(arg0 aws.Context, arg1 *xray.GetTraceSummariesInput, arg2 func(*xray.GetTraceSummariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceSummariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTraceSummariesPagesWithContext indicates an expected call of GetTraceSummariesPagesWithContext
func (mr *MockXRayAPIMockRecorder) GetTraceSummariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummariesPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceSummariesPagesWithContext), varargs...)
}

// GetTraceSummariesRequest mocks base method
func (m *MockXRayAPI) GetTraceSummariesRequest(arg0 *xray.GetTraceSummariesInput) (*request.Request, *xray.GetTraceSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetTraceSummariesOutput)
	return ret0, ret1
}

// GetTraceSummariesRequest indicates an expected call of GetTraceSummariesRequest
func (mr *MockXRayAPIMockRecorder) GetTraceSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummariesRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceSummariesRequest), arg0)
}

// GetTraceSummariesWithContext mocks base method
func (m *MockXRayAPI) GetTraceSummariesWithContext(arg0 aws.Context, arg1 *xray.GetTraceSummariesInput, arg2 ...request.Option) (*xray.GetTraceSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetTraceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceSummariesWithContext indicates an expected call of GetTraceSummariesWithContext
func (mr *MockXRayAPIMockRecorder) GetTraceSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummariesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceSummariesWithContext), varargs...)
}

// PutEncryptionConfig mocks base method
func (m *MockXRayAPI) PutEncryptionConfig(arg0 *xray.PutEncryptionConfigInput) (*xray.PutEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEncryptionConfig", arg0)
	ret0, _ := ret[0].(*xray.PutEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEncryptionConfig indicates an expected call of PutEncryptionConfig
func (mr *MockXRayAPIMockRecorder) PutEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEncryptionConfig", reflect.TypeOf((*MockXRayAPI)(nil).PutEncryptionConfig), arg0)
}

// PutEncryptionConfigRequest mocks base method
func (m *MockXRayAPI) PutEncryptionConfigRequest(arg0 *xray.PutEncryptionConfigInput) (*request.Request, *xray.PutEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.PutEncryptionConfigOutput)
	return ret0, ret1
}

// PutEncryptionConfigRequest indicates an expected call of PutEncryptionConfigRequest
func (mr *MockXRayAPIMockRecorder) PutEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEncryptionConfigRequest", reflect.TypeOf((*MockXRayAPI)(nil).PutEncryptionConfigRequest), arg0)
}

// PutEncryptionConfigWithContext mocks base method
func (m *MockXRayAPI) PutEncryptionConfigWithContext(arg0 aws.Context, arg1 *xray.PutEncryptionConfigInput, arg2 ...request.Option) (*xray.PutEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*xray.PutEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEncryptionConfigWithContext indicates an expected call of PutEncryptionConfigWithContext
func (mr *MockXRayAPIMockRecorder) PutEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEncryptionConfigWithContext", reflect.TypeOf((*MockXRayAPI)(nil).PutEncryptionConfigWithContext), varargs...)
}

// PutTelemetryRecords mocks base method
func (m *MockXRayAPI) PutTelemetryRecords(arg0 *xray.PutTelemetryRecordsInput) (*xray.PutTelemetryRecordsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTelemetryRecords", arg0)
	ret0, _ := ret[0].(*xray.PutTelemetryRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTelemetryRecords indicates an expected call of PutTelemetryRecords
func (mr *MockXRayAPIMockRecorder) PutTelemetryRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTelemetryRecords", reflect.TypeOf((*MockXRayAPI)(nil).PutTelemetryRecords), arg0)
}

// PutTelemetryRecordsRequest mocks base method
func (m *MockXRayAPI) PutTelemetryRecordsRequest(arg0 *xray.PutTelemetryRecordsInput) (*request.Request, *xray.PutTelemetryRecordsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTelemetryRecordsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.PutTelemetryRecordsOutput)
	return ret0, ret1
}

// PutTelemetryRecordsRequest indicates an expected call of PutTelemetryRecordsRequest
func (mr *MockXRayAPIMockRecorder) PutTelemetryRecordsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTelemetryRecordsRequest", reflect.TypeOf((*MockXRayAPI)(nil).PutTelemetryRecordsRequest), arg0)
}

// PutTelemetryRecordsWithContext mocks base method
func (m *MockXRayAPI) PutTelemetryRecordsWithContext(arg0 aws.Context, arg1 *xray.PutTelemetryRecordsInput, arg2 ...request.Option) (*xray.PutTelemetryRecordsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTelemetryRecordsWithContext", varargs...)
	ret0, _ := ret[0].(*xray.PutTelemetryRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTelemetryRecordsWithContext indicates an expected call of PutTelemetryRecordsWithContext
func (mr *MockXRayAPIMockRecorder) PutTelemetryRecordsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTelemetryRecordsWithContext", reflect.TypeOf((*MockXRayAPI)(nil).PutTelemetryRecordsWithContext), varargs...)
}

// PutTraceSegments mocks base method
func (m *MockXRayAPI) PutTraceSegments(arg0 *xray.PutTraceSegmentsInput) (*xray.PutTraceSegmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTraceSegments", arg0)
	ret0, _ := ret[0].(*xray.PutTraceSegmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTraceSegments indicates an expected call of PutTraceSegments
func (mr *MockXRayAPIMockRecorder) PutTraceSegments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTraceSegments", reflect.TypeOf((*MockXRayAPI)(nil).PutTraceSegments), arg0)
}

// PutTraceSegmentsRequest mocks base method
func (m *MockXRayAPI) PutTraceSegmentsRequest(arg0 *xray.PutTraceSegmentsInput) (*request.Request, *xray.PutTraceSegmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTraceSegmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.PutTraceSegmentsOutput)
	return ret0, ret1
}

// PutTraceSegmentsRequest indicates an expected call of PutTraceSegmentsRequest
func (mr *MockXRayAPIMockRecorder) PutTraceSegmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTraceSegmentsRequest", reflect.TypeOf((*MockXRayAPI)(nil).PutTraceSegmentsRequest), arg0)
}

// PutTraceSegmentsWithContext mocks base method
func (m *MockXRayAPI) PutTraceSegmentsWithContext(arg0 aws.Context, arg1 *xray.PutTraceSegmentsInput, arg2 ...request.Option) (*xray.PutTraceSegmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTraceSegmentsWithContext", varargs...)
	ret0, _ := ret[0].(*xray.PutTraceSegmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTraceSegmentsWithContext indicates an expected call of PutTraceSegmentsWithContext
func (mr *MockXRayAPIMockRecorder) PutTraceSegmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTraceSegmentsWithContext", reflect.TypeOf((*MockXRayAPI)(nil).PutTraceSegmentsWithContext), varargs...)
}
