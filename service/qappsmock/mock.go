// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/qapps/qappsiface (interfaces: QAppsAPI)

// Package qappsmock is a generated GoMock package.
package qappsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	qapps "github.com/aws/aws-sdk-go/service/qapps"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQAppsAPI is a mock of QAppsAPI interface
type MockQAppsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockQAppsAPIMockRecorder
}

// MockQAppsAPIMockRecorder is the mock recorder for MockQAppsAPI
type MockQAppsAPIMockRecorder struct {
	mock *MockQAppsAPI
}

// NewMockQAppsAPI creates a new mock instance
func NewMockQAppsAPI(ctrl *gomock.Controller) *MockQAppsAPI {
	mock := &MockQAppsAPI{ctrl: ctrl}
	mock.recorder = &MockQAppsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQAppsAPI) EXPECT() *MockQAppsAPIMockRecorder {
	return m.recorder
}

// AssociateLibraryItemReview mocks base method
func (m *MockQAppsAPI) AssociateLibraryItemReview(arg0 *qapps.AssociateLibraryItemReviewInput) (*qapps.AssociateLibraryItemReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLibraryItemReview", arg0)
	ret0, _ := ret[0].(*qapps.AssociateLibraryItemReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLibraryItemReview indicates an expected call of AssociateLibraryItemReview
func (mr *MockQAppsAPIMockRecorder) AssociateLibraryItemReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLibraryItemReview", reflect.TypeOf((*MockQAppsAPI)(nil).AssociateLibraryItemReview), arg0)
}

// AssociateLibraryItemReviewRequest mocks base method
func (m *MockQAppsAPI) AssociateLibraryItemReviewRequest(arg0 *qapps.AssociateLibraryItemReviewInput) (*request.Request, *qapps.AssociateLibraryItemReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLibraryItemReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.AssociateLibraryItemReviewOutput)
	return ret0, ret1
}

// AssociateLibraryItemReviewRequest indicates an expected call of AssociateLibraryItemReviewRequest
func (mr *MockQAppsAPIMockRecorder) AssociateLibraryItemReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLibraryItemReviewRequest", reflect.TypeOf((*MockQAppsAPI)(nil).AssociateLibraryItemReviewRequest), arg0)
}

// AssociateLibraryItemReviewWithContext mocks base method
func (m *MockQAppsAPI) AssociateLibraryItemReviewWithContext(arg0 context.Context, arg1 *qapps.AssociateLibraryItemReviewInput, arg2 ...request.Option) (*qapps.AssociateLibraryItemReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateLibraryItemReviewWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.AssociateLibraryItemReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLibraryItemReviewWithContext indicates an expected call of AssociateLibraryItemReviewWithContext
func (mr *MockQAppsAPIMockRecorder) AssociateLibraryItemReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLibraryItemReviewWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).AssociateLibraryItemReviewWithContext), varargs...)
}

// AssociateQAppWithUser mocks base method
func (m *MockQAppsAPI) AssociateQAppWithUser(arg0 *qapps.AssociateQAppWithUserInput) (*qapps.AssociateQAppWithUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateQAppWithUser", arg0)
	ret0, _ := ret[0].(*qapps.AssociateQAppWithUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateQAppWithUser indicates an expected call of AssociateQAppWithUser
func (mr *MockQAppsAPIMockRecorder) AssociateQAppWithUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateQAppWithUser", reflect.TypeOf((*MockQAppsAPI)(nil).AssociateQAppWithUser), arg0)
}

// AssociateQAppWithUserRequest mocks base method
func (m *MockQAppsAPI) AssociateQAppWithUserRequest(arg0 *qapps.AssociateQAppWithUserInput) (*request.Request, *qapps.AssociateQAppWithUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateQAppWithUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.AssociateQAppWithUserOutput)
	return ret0, ret1
}

// AssociateQAppWithUserRequest indicates an expected call of AssociateQAppWithUserRequest
func (mr *MockQAppsAPIMockRecorder) AssociateQAppWithUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateQAppWithUserRequest", reflect.TypeOf((*MockQAppsAPI)(nil).AssociateQAppWithUserRequest), arg0)
}

// AssociateQAppWithUserWithContext mocks base method
func (m *MockQAppsAPI) AssociateQAppWithUserWithContext(arg0 context.Context, arg1 *qapps.AssociateQAppWithUserInput, arg2 ...request.Option) (*qapps.AssociateQAppWithUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateQAppWithUserWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.AssociateQAppWithUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateQAppWithUserWithContext indicates an expected call of AssociateQAppWithUserWithContext
func (mr *MockQAppsAPIMockRecorder) AssociateQAppWithUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateQAppWithUserWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).AssociateQAppWithUserWithContext), varargs...)
}

// CreateLibraryItem mocks base method
func (m *MockQAppsAPI) CreateLibraryItem(arg0 *qapps.CreateLibraryItemInput) (*qapps.CreateLibraryItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLibraryItem", arg0)
	ret0, _ := ret[0].(*qapps.CreateLibraryItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLibraryItem indicates an expected call of CreateLibraryItem
func (mr *MockQAppsAPIMockRecorder) CreateLibraryItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLibraryItem", reflect.TypeOf((*MockQAppsAPI)(nil).CreateLibraryItem), arg0)
}

// CreateLibraryItemRequest mocks base method
func (m *MockQAppsAPI) CreateLibraryItemRequest(arg0 *qapps.CreateLibraryItemInput) (*request.Request, *qapps.CreateLibraryItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLibraryItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.CreateLibraryItemOutput)
	return ret0, ret1
}

// CreateLibraryItemRequest indicates an expected call of CreateLibraryItemRequest
func (mr *MockQAppsAPIMockRecorder) CreateLibraryItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLibraryItemRequest", reflect.TypeOf((*MockQAppsAPI)(nil).CreateLibraryItemRequest), arg0)
}

// CreateLibraryItemWithContext mocks base method
func (m *MockQAppsAPI) CreateLibraryItemWithContext(arg0 context.Context, arg1 *qapps.CreateLibraryItemInput, arg2 ...request.Option) (*qapps.CreateLibraryItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLibraryItemWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.CreateLibraryItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLibraryItemWithContext indicates an expected call of CreateLibraryItemWithContext
func (mr *MockQAppsAPIMockRecorder) CreateLibraryItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLibraryItemWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).CreateLibraryItemWithContext), varargs...)
}

// CreateQApp mocks base method
func (m *MockQAppsAPI) CreateQApp(arg0 *qapps.CreateQAppInput) (*qapps.CreateQAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQApp", arg0)
	ret0, _ := ret[0].(*qapps.CreateQAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQApp indicates an expected call of CreateQApp
func (mr *MockQAppsAPIMockRecorder) CreateQApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQApp", reflect.TypeOf((*MockQAppsAPI)(nil).CreateQApp), arg0)
}

// CreateQAppRequest mocks base method
func (m *MockQAppsAPI) CreateQAppRequest(arg0 *qapps.CreateQAppInput) (*request.Request, *qapps.CreateQAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.CreateQAppOutput)
	return ret0, ret1
}

// CreateQAppRequest indicates an expected call of CreateQAppRequest
func (mr *MockQAppsAPIMockRecorder) CreateQAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQAppRequest", reflect.TypeOf((*MockQAppsAPI)(nil).CreateQAppRequest), arg0)
}

// CreateQAppWithContext mocks base method
func (m *MockQAppsAPI) CreateQAppWithContext(arg0 context.Context, arg1 *qapps.CreateQAppInput, arg2 ...request.Option) (*qapps.CreateQAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQAppWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.CreateQAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQAppWithContext indicates an expected call of CreateQAppWithContext
func (mr *MockQAppsAPIMockRecorder) CreateQAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQAppWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).CreateQAppWithContext), varargs...)
}

// DeleteLibraryItem mocks base method
func (m *MockQAppsAPI) DeleteLibraryItem(arg0 *qapps.DeleteLibraryItemInput) (*qapps.DeleteLibraryItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLibraryItem", arg0)
	ret0, _ := ret[0].(*qapps.DeleteLibraryItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLibraryItem indicates an expected call of DeleteLibraryItem
func (mr *MockQAppsAPIMockRecorder) DeleteLibraryItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLibraryItem", reflect.TypeOf((*MockQAppsAPI)(nil).DeleteLibraryItem), arg0)
}

// DeleteLibraryItemRequest mocks base method
func (m *MockQAppsAPI) DeleteLibraryItemRequest(arg0 *qapps.DeleteLibraryItemInput) (*request.Request, *qapps.DeleteLibraryItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLibraryItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.DeleteLibraryItemOutput)
	return ret0, ret1
}

// DeleteLibraryItemRequest indicates an expected call of DeleteLibraryItemRequest
func (mr *MockQAppsAPIMockRecorder) DeleteLibraryItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLibraryItemRequest", reflect.TypeOf((*MockQAppsAPI)(nil).DeleteLibraryItemRequest), arg0)
}

// DeleteLibraryItemWithContext mocks base method
func (m *MockQAppsAPI) DeleteLibraryItemWithContext(arg0 context.Context, arg1 *qapps.DeleteLibraryItemInput, arg2 ...request.Option) (*qapps.DeleteLibraryItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLibraryItemWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.DeleteLibraryItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLibraryItemWithContext indicates an expected call of DeleteLibraryItemWithContext
func (mr *MockQAppsAPIMockRecorder) DeleteLibraryItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLibraryItemWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).DeleteLibraryItemWithContext), varargs...)
}

// DeleteQApp mocks base method
func (m *MockQAppsAPI) DeleteQApp(arg0 *qapps.DeleteQAppInput) (*qapps.DeleteQAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQApp", arg0)
	ret0, _ := ret[0].(*qapps.DeleteQAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQApp indicates an expected call of DeleteQApp
func (mr *MockQAppsAPIMockRecorder) DeleteQApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQApp", reflect.TypeOf((*MockQAppsAPI)(nil).DeleteQApp), arg0)
}

// DeleteQAppRequest mocks base method
func (m *MockQAppsAPI) DeleteQAppRequest(arg0 *qapps.DeleteQAppInput) (*request.Request, *qapps.DeleteQAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.DeleteQAppOutput)
	return ret0, ret1
}

// DeleteQAppRequest indicates an expected call of DeleteQAppRequest
func (mr *MockQAppsAPIMockRecorder) DeleteQAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQAppRequest", reflect.TypeOf((*MockQAppsAPI)(nil).DeleteQAppRequest), arg0)
}

// DeleteQAppWithContext mocks base method
func (m *MockQAppsAPI) DeleteQAppWithContext(arg0 context.Context, arg1 *qapps.DeleteQAppInput, arg2 ...request.Option) (*qapps.DeleteQAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQAppWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.DeleteQAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQAppWithContext indicates an expected call of DeleteQAppWithContext
func (mr *MockQAppsAPIMockRecorder) DeleteQAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQAppWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).DeleteQAppWithContext), varargs...)
}

// DisassociateLibraryItemReview mocks base method
func (m *MockQAppsAPI) DisassociateLibraryItemReview(arg0 *qapps.DisassociateLibraryItemReviewInput) (*qapps.DisassociateLibraryItemReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLibraryItemReview", arg0)
	ret0, _ := ret[0].(*qapps.DisassociateLibraryItemReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLibraryItemReview indicates an expected call of DisassociateLibraryItemReview
func (mr *MockQAppsAPIMockRecorder) DisassociateLibraryItemReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLibraryItemReview", reflect.TypeOf((*MockQAppsAPI)(nil).DisassociateLibraryItemReview), arg0)
}

// DisassociateLibraryItemReviewRequest mocks base method
func (m *MockQAppsAPI) DisassociateLibraryItemReviewRequest(arg0 *qapps.DisassociateLibraryItemReviewInput) (*request.Request, *qapps.DisassociateLibraryItemReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLibraryItemReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.DisassociateLibraryItemReviewOutput)
	return ret0, ret1
}

// DisassociateLibraryItemReviewRequest indicates an expected call of DisassociateLibraryItemReviewRequest
func (mr *MockQAppsAPIMockRecorder) DisassociateLibraryItemReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLibraryItemReviewRequest", reflect.TypeOf((*MockQAppsAPI)(nil).DisassociateLibraryItemReviewRequest), arg0)
}

// DisassociateLibraryItemReviewWithContext mocks base method
func (m *MockQAppsAPI) DisassociateLibraryItemReviewWithContext(arg0 context.Context, arg1 *qapps.DisassociateLibraryItemReviewInput, arg2 ...request.Option) (*qapps.DisassociateLibraryItemReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateLibraryItemReviewWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.DisassociateLibraryItemReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLibraryItemReviewWithContext indicates an expected call of DisassociateLibraryItemReviewWithContext
func (mr *MockQAppsAPIMockRecorder) DisassociateLibraryItemReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLibraryItemReviewWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).DisassociateLibraryItemReviewWithContext), varargs...)
}

// DisassociateQAppFromUser mocks base method
func (m *MockQAppsAPI) DisassociateQAppFromUser(arg0 *qapps.DisassociateQAppFromUserInput) (*qapps.DisassociateQAppFromUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateQAppFromUser", arg0)
	ret0, _ := ret[0].(*qapps.DisassociateQAppFromUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateQAppFromUser indicates an expected call of DisassociateQAppFromUser
func (mr *MockQAppsAPIMockRecorder) DisassociateQAppFromUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateQAppFromUser", reflect.TypeOf((*MockQAppsAPI)(nil).DisassociateQAppFromUser), arg0)
}

// DisassociateQAppFromUserRequest mocks base method
func (m *MockQAppsAPI) DisassociateQAppFromUserRequest(arg0 *qapps.DisassociateQAppFromUserInput) (*request.Request, *qapps.DisassociateQAppFromUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateQAppFromUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.DisassociateQAppFromUserOutput)
	return ret0, ret1
}

// DisassociateQAppFromUserRequest indicates an expected call of DisassociateQAppFromUserRequest
func (mr *MockQAppsAPIMockRecorder) DisassociateQAppFromUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateQAppFromUserRequest", reflect.TypeOf((*MockQAppsAPI)(nil).DisassociateQAppFromUserRequest), arg0)
}

// DisassociateQAppFromUserWithContext mocks base method
func (m *MockQAppsAPI) DisassociateQAppFromUserWithContext(arg0 context.Context, arg1 *qapps.DisassociateQAppFromUserInput, arg2 ...request.Option) (*qapps.DisassociateQAppFromUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateQAppFromUserWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.DisassociateQAppFromUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateQAppFromUserWithContext indicates an expected call of DisassociateQAppFromUserWithContext
func (mr *MockQAppsAPIMockRecorder) DisassociateQAppFromUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateQAppFromUserWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).DisassociateQAppFromUserWithContext), varargs...)
}

// GetLibraryItem mocks base method
func (m *MockQAppsAPI) GetLibraryItem(arg0 *qapps.GetLibraryItemInput) (*qapps.GetLibraryItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibraryItem", arg0)
	ret0, _ := ret[0].(*qapps.GetLibraryItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLibraryItem indicates an expected call of GetLibraryItem
func (mr *MockQAppsAPIMockRecorder) GetLibraryItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibraryItem", reflect.TypeOf((*MockQAppsAPI)(nil).GetLibraryItem), arg0)
}

// GetLibraryItemRequest mocks base method
func (m *MockQAppsAPI) GetLibraryItemRequest(arg0 *qapps.GetLibraryItemInput) (*request.Request, *qapps.GetLibraryItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibraryItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.GetLibraryItemOutput)
	return ret0, ret1
}

// GetLibraryItemRequest indicates an expected call of GetLibraryItemRequest
func (mr *MockQAppsAPIMockRecorder) GetLibraryItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibraryItemRequest", reflect.TypeOf((*MockQAppsAPI)(nil).GetLibraryItemRequest), arg0)
}

// GetLibraryItemWithContext mocks base method
func (m *MockQAppsAPI) GetLibraryItemWithContext(arg0 context.Context, arg1 *qapps.GetLibraryItemInput, arg2 ...request.Option) (*qapps.GetLibraryItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLibraryItemWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.GetLibraryItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLibraryItemWithContext indicates an expected call of GetLibraryItemWithContext
func (mr *MockQAppsAPIMockRecorder) GetLibraryItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibraryItemWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).GetLibraryItemWithContext), varargs...)
}

// GetQApp mocks base method
func (m *MockQAppsAPI) GetQApp(arg0 *qapps.GetQAppInput) (*qapps.GetQAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQApp", arg0)
	ret0, _ := ret[0].(*qapps.GetQAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQApp indicates an expected call of GetQApp
func (mr *MockQAppsAPIMockRecorder) GetQApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQApp", reflect.TypeOf((*MockQAppsAPI)(nil).GetQApp), arg0)
}

// GetQAppRequest mocks base method
func (m *MockQAppsAPI) GetQAppRequest(arg0 *qapps.GetQAppInput) (*request.Request, *qapps.GetQAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.GetQAppOutput)
	return ret0, ret1
}

// GetQAppRequest indicates an expected call of GetQAppRequest
func (mr *MockQAppsAPIMockRecorder) GetQAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAppRequest", reflect.TypeOf((*MockQAppsAPI)(nil).GetQAppRequest), arg0)
}

// GetQAppSession mocks base method
func (m *MockQAppsAPI) GetQAppSession(arg0 *qapps.GetQAppSessionInput) (*qapps.GetQAppSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAppSession", arg0)
	ret0, _ := ret[0].(*qapps.GetQAppSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAppSession indicates an expected call of GetQAppSession
func (mr *MockQAppsAPIMockRecorder) GetQAppSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAppSession", reflect.TypeOf((*MockQAppsAPI)(nil).GetQAppSession), arg0)
}

// GetQAppSessionRequest mocks base method
func (m *MockQAppsAPI) GetQAppSessionRequest(arg0 *qapps.GetQAppSessionInput) (*request.Request, *qapps.GetQAppSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQAppSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.GetQAppSessionOutput)
	return ret0, ret1
}

// GetQAppSessionRequest indicates an expected call of GetQAppSessionRequest
func (mr *MockQAppsAPIMockRecorder) GetQAppSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAppSessionRequest", reflect.TypeOf((*MockQAppsAPI)(nil).GetQAppSessionRequest), arg0)
}

// GetQAppSessionWithContext mocks base method
func (m *MockQAppsAPI) GetQAppSessionWithContext(arg0 context.Context, arg1 *qapps.GetQAppSessionInput, arg2 ...request.Option) (*qapps.GetQAppSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQAppSessionWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.GetQAppSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAppSessionWithContext indicates an expected call of GetQAppSessionWithContext
func (mr *MockQAppsAPIMockRecorder) GetQAppSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAppSessionWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).GetQAppSessionWithContext), varargs...)
}

// GetQAppWithContext mocks base method
func (m *MockQAppsAPI) GetQAppWithContext(arg0 context.Context, arg1 *qapps.GetQAppInput, arg2 ...request.Option) (*qapps.GetQAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQAppWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.GetQAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQAppWithContext indicates an expected call of GetQAppWithContext
func (mr *MockQAppsAPIMockRecorder) GetQAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQAppWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).GetQAppWithContext), varargs...)
}

// ImportDocument mocks base method
func (m *MockQAppsAPI) ImportDocument(arg0 *qapps.ImportDocumentInput) (*qapps.ImportDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDocument", arg0)
	ret0, _ := ret[0].(*qapps.ImportDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDocument indicates an expected call of ImportDocument
func (mr *MockQAppsAPIMockRecorder) ImportDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDocument", reflect.TypeOf((*MockQAppsAPI)(nil).ImportDocument), arg0)
}

// ImportDocumentRequest mocks base method
func (m *MockQAppsAPI) ImportDocumentRequest(arg0 *qapps.ImportDocumentInput) (*request.Request, *qapps.ImportDocumentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDocumentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.ImportDocumentOutput)
	return ret0, ret1
}

// ImportDocumentRequest indicates an expected call of ImportDocumentRequest
func (mr *MockQAppsAPIMockRecorder) ImportDocumentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDocumentRequest", reflect.TypeOf((*MockQAppsAPI)(nil).ImportDocumentRequest), arg0)
}

// ImportDocumentWithContext mocks base method
func (m *MockQAppsAPI) ImportDocumentWithContext(arg0 context.Context, arg1 *qapps.ImportDocumentInput, arg2 ...request.Option) (*qapps.ImportDocumentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportDocumentWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.ImportDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDocumentWithContext indicates an expected call of ImportDocumentWithContext
func (mr *MockQAppsAPIMockRecorder) ImportDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDocumentWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).ImportDocumentWithContext), varargs...)
}

// ListLibraryItems mocks base method
func (m *MockQAppsAPI) ListLibraryItems(arg0 *qapps.ListLibraryItemsInput) (*qapps.ListLibraryItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLibraryItems", arg0)
	ret0, _ := ret[0].(*qapps.ListLibraryItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLibraryItems indicates an expected call of ListLibraryItems
func (mr *MockQAppsAPIMockRecorder) ListLibraryItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLibraryItems", reflect.TypeOf((*MockQAppsAPI)(nil).ListLibraryItems), arg0)
}

// ListLibraryItemsPages mocks base method
func (m *MockQAppsAPI) ListLibraryItemsPages(arg0 *qapps.ListLibraryItemsInput, arg1 func(*qapps.ListLibraryItemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLibraryItemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLibraryItemsPages indicates an expected call of ListLibraryItemsPages
func (mr *MockQAppsAPIMockRecorder) ListLibraryItemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLibraryItemsPages", reflect.TypeOf((*MockQAppsAPI)(nil).ListLibraryItemsPages), arg0, arg1)
}

// ListLibraryItemsPagesWithContext mocks base method
func (m *MockQAppsAPI) ListLibraryItemsPagesWithContext(arg0 context.Context, arg1 *qapps.ListLibraryItemsInput, arg2 func(*qapps.ListLibraryItemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLibraryItemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLibraryItemsPagesWithContext indicates an expected call of ListLibraryItemsPagesWithContext
func (mr *MockQAppsAPIMockRecorder) ListLibraryItemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLibraryItemsPagesWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).ListLibraryItemsPagesWithContext), varargs...)
}

// ListLibraryItemsRequest mocks base method
func (m *MockQAppsAPI) ListLibraryItemsRequest(arg0 *qapps.ListLibraryItemsInput) (*request.Request, *qapps.ListLibraryItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLibraryItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.ListLibraryItemsOutput)
	return ret0, ret1
}

// ListLibraryItemsRequest indicates an expected call of ListLibraryItemsRequest
func (mr *MockQAppsAPIMockRecorder) ListLibraryItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLibraryItemsRequest", reflect.TypeOf((*MockQAppsAPI)(nil).ListLibraryItemsRequest), arg0)
}

// ListLibraryItemsWithContext mocks base method
func (m *MockQAppsAPI) ListLibraryItemsWithContext(arg0 context.Context, arg1 *qapps.ListLibraryItemsInput, arg2 ...request.Option) (*qapps.ListLibraryItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLibraryItemsWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.ListLibraryItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLibraryItemsWithContext indicates an expected call of ListLibraryItemsWithContext
func (mr *MockQAppsAPIMockRecorder) ListLibraryItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLibraryItemsWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).ListLibraryItemsWithContext), varargs...)
}

// ListQApps mocks base method
func (m *MockQAppsAPI) ListQApps(arg0 *qapps.ListQAppsInput) (*qapps.ListQAppsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQApps", arg0)
	ret0, _ := ret[0].(*qapps.ListQAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQApps indicates an expected call of ListQApps
func (mr *MockQAppsAPIMockRecorder) ListQApps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQApps", reflect.TypeOf((*MockQAppsAPI)(nil).ListQApps), arg0)
}

// ListQAppsPages mocks base method
func (m *MockQAppsAPI) ListQAppsPages(arg0 *qapps.ListQAppsInput, arg1 func(*qapps.ListQAppsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQAppsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQAppsPages indicates an expected call of ListQAppsPages
func (mr *MockQAppsAPIMockRecorder) ListQAppsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQAppsPages", reflect.TypeOf((*MockQAppsAPI)(nil).ListQAppsPages), arg0, arg1)
}

// ListQAppsPagesWithContext mocks base method
func (m *MockQAppsAPI) ListQAppsPagesWithContext(arg0 context.Context, arg1 *qapps.ListQAppsInput, arg2 func(*qapps.ListQAppsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQAppsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQAppsPagesWithContext indicates an expected call of ListQAppsPagesWithContext
func (mr *MockQAppsAPIMockRecorder) ListQAppsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQAppsPagesWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).ListQAppsPagesWithContext), varargs...)
}

// ListQAppsRequest mocks base method
func (m *MockQAppsAPI) ListQAppsRequest(arg0 *qapps.ListQAppsInput) (*request.Request, *qapps.ListQAppsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQAppsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.ListQAppsOutput)
	return ret0, ret1
}

// ListQAppsRequest indicates an expected call of ListQAppsRequest
func (mr *MockQAppsAPIMockRecorder) ListQAppsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQAppsRequest", reflect.TypeOf((*MockQAppsAPI)(nil).ListQAppsRequest), arg0)
}

// ListQAppsWithContext mocks base method
func (m *MockQAppsAPI) ListQAppsWithContext(arg0 context.Context, arg1 *qapps.ListQAppsInput, arg2 ...request.Option) (*qapps.ListQAppsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQAppsWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.ListQAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQAppsWithContext indicates an expected call of ListQAppsWithContext
func (mr *MockQAppsAPIMockRecorder) ListQAppsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQAppsWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).ListQAppsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockQAppsAPI) ListTagsForResource(arg0 *qapps.ListTagsForResourceInput) (*qapps.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*qapps.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockQAppsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockQAppsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockQAppsAPI) ListTagsForResourceRequest(arg0 *qapps.ListTagsForResourceInput) (*request.Request, *qapps.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockQAppsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockQAppsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockQAppsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *qapps.ListTagsForResourceInput, arg2 ...request.Option) (*qapps.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockQAppsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PredictQApp mocks base method
func (m *MockQAppsAPI) PredictQApp(arg0 *qapps.PredictQAppInput) (*qapps.PredictQAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PredictQApp", arg0)
	ret0, _ := ret[0].(*qapps.PredictQAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredictQApp indicates an expected call of PredictQApp
func (mr *MockQAppsAPIMockRecorder) PredictQApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictQApp", reflect.TypeOf((*MockQAppsAPI)(nil).PredictQApp), arg0)
}

// PredictQAppRequest mocks base method
func (m *MockQAppsAPI) PredictQAppRequest(arg0 *qapps.PredictQAppInput) (*request.Request, *qapps.PredictQAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PredictQAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.PredictQAppOutput)
	return ret0, ret1
}

// PredictQAppRequest indicates an expected call of PredictQAppRequest
func (mr *MockQAppsAPIMockRecorder) PredictQAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictQAppRequest", reflect.TypeOf((*MockQAppsAPI)(nil).PredictQAppRequest), arg0)
}

// PredictQAppWithContext mocks base method
func (m *MockQAppsAPI) PredictQAppWithContext(arg0 context.Context, arg1 *qapps.PredictQAppInput, arg2 ...request.Option) (*qapps.PredictQAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PredictQAppWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.PredictQAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredictQAppWithContext indicates an expected call of PredictQAppWithContext
func (mr *MockQAppsAPIMockRecorder) PredictQAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictQAppWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).PredictQAppWithContext), varargs...)
}

// StartQAppSession mocks base method
func (m *MockQAppsAPI) StartQAppSession(arg0 *qapps.StartQAppSessionInput) (*qapps.StartQAppSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartQAppSession", arg0)
	ret0, _ := ret[0].(*qapps.StartQAppSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartQAppSession indicates an expected call of StartQAppSession
func (mr *MockQAppsAPIMockRecorder) StartQAppSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQAppSession", reflect.TypeOf((*MockQAppsAPI)(nil).StartQAppSession), arg0)
}

// StartQAppSessionRequest mocks base method
func (m *MockQAppsAPI) StartQAppSessionRequest(arg0 *qapps.StartQAppSessionInput) (*request.Request, *qapps.StartQAppSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartQAppSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.StartQAppSessionOutput)
	return ret0, ret1
}

// StartQAppSessionRequest indicates an expected call of StartQAppSessionRequest
func (mr *MockQAppsAPIMockRecorder) StartQAppSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQAppSessionRequest", reflect.TypeOf((*MockQAppsAPI)(nil).StartQAppSessionRequest), arg0)
}

// StartQAppSessionWithContext mocks base method
func (m *MockQAppsAPI) StartQAppSessionWithContext(arg0 context.Context, arg1 *qapps.StartQAppSessionInput, arg2 ...request.Option) (*qapps.StartQAppSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartQAppSessionWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.StartQAppSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartQAppSessionWithContext indicates an expected call of StartQAppSessionWithContext
func (mr *MockQAppsAPIMockRecorder) StartQAppSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQAppSessionWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).StartQAppSessionWithContext), varargs...)
}

// StopQAppSession mocks base method
func (m *MockQAppsAPI) StopQAppSession(arg0 *qapps.StopQAppSessionInput) (*qapps.StopQAppSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopQAppSession", arg0)
	ret0, _ := ret[0].(*qapps.StopQAppSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopQAppSession indicates an expected call of StopQAppSession
func (mr *MockQAppsAPIMockRecorder) StopQAppSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopQAppSession", reflect.TypeOf((*MockQAppsAPI)(nil).StopQAppSession), arg0)
}

// StopQAppSessionRequest mocks base method
func (m *MockQAppsAPI) StopQAppSessionRequest(arg0 *qapps.StopQAppSessionInput) (*request.Request, *qapps.StopQAppSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopQAppSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.StopQAppSessionOutput)
	return ret0, ret1
}

// StopQAppSessionRequest indicates an expected call of StopQAppSessionRequest
func (mr *MockQAppsAPIMockRecorder) StopQAppSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopQAppSessionRequest", reflect.TypeOf((*MockQAppsAPI)(nil).StopQAppSessionRequest), arg0)
}

// StopQAppSessionWithContext mocks base method
func (m *MockQAppsAPI) StopQAppSessionWithContext(arg0 context.Context, arg1 *qapps.StopQAppSessionInput, arg2 ...request.Option) (*qapps.StopQAppSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopQAppSessionWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.StopQAppSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopQAppSessionWithContext indicates an expected call of StopQAppSessionWithContext
func (mr *MockQAppsAPIMockRecorder) StopQAppSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopQAppSessionWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).StopQAppSessionWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockQAppsAPI) TagResource(arg0 *qapps.TagResourceInput) (*qapps.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*qapps.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockQAppsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockQAppsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockQAppsAPI) TagResourceRequest(arg0 *qapps.TagResourceInput) (*request.Request, *qapps.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockQAppsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockQAppsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockQAppsAPI) TagResourceWithContext(arg0 context.Context, arg1 *qapps.TagResourceInput, arg2 ...request.Option) (*qapps.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockQAppsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockQAppsAPI) UntagResource(arg0 *qapps.UntagResourceInput) (*qapps.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*qapps.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockQAppsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockQAppsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockQAppsAPI) UntagResourceRequest(arg0 *qapps.UntagResourceInput) (*request.Request, *qapps.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockQAppsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockQAppsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockQAppsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *qapps.UntagResourceInput, arg2 ...request.Option) (*qapps.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockQAppsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateLibraryItem mocks base method
func (m *MockQAppsAPI) UpdateLibraryItem(arg0 *qapps.UpdateLibraryItemInput) (*qapps.UpdateLibraryItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLibraryItem", arg0)
	ret0, _ := ret[0].(*qapps.UpdateLibraryItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLibraryItem indicates an expected call of UpdateLibraryItem
func (mr *MockQAppsAPIMockRecorder) UpdateLibraryItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLibraryItem", reflect.TypeOf((*MockQAppsAPI)(nil).UpdateLibraryItem), arg0)
}

// UpdateLibraryItemRequest mocks base method
func (m *MockQAppsAPI) UpdateLibraryItemRequest(arg0 *qapps.UpdateLibraryItemInput) (*request.Request, *qapps.UpdateLibraryItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLibraryItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.UpdateLibraryItemOutput)
	return ret0, ret1
}

// UpdateLibraryItemRequest indicates an expected call of UpdateLibraryItemRequest
func (mr *MockQAppsAPIMockRecorder) UpdateLibraryItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLibraryItemRequest", reflect.TypeOf((*MockQAppsAPI)(nil).UpdateLibraryItemRequest), arg0)
}

// UpdateLibraryItemWithContext mocks base method
func (m *MockQAppsAPI) UpdateLibraryItemWithContext(arg0 context.Context, arg1 *qapps.UpdateLibraryItemInput, arg2 ...request.Option) (*qapps.UpdateLibraryItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLibraryItemWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.UpdateLibraryItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLibraryItemWithContext indicates an expected call of UpdateLibraryItemWithContext
func (mr *MockQAppsAPIMockRecorder) UpdateLibraryItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLibraryItemWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).UpdateLibraryItemWithContext), varargs...)
}

// UpdateQApp mocks base method
func (m *MockQAppsAPI) UpdateQApp(arg0 *qapps.UpdateQAppInput) (*qapps.UpdateQAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQApp", arg0)
	ret0, _ := ret[0].(*qapps.UpdateQAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQApp indicates an expected call of UpdateQApp
func (mr *MockQAppsAPIMockRecorder) UpdateQApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQApp", reflect.TypeOf((*MockQAppsAPI)(nil).UpdateQApp), arg0)
}

// UpdateQAppRequest mocks base method
func (m *MockQAppsAPI) UpdateQAppRequest(arg0 *qapps.UpdateQAppInput) (*request.Request, *qapps.UpdateQAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.UpdateQAppOutput)
	return ret0, ret1
}

// UpdateQAppRequest indicates an expected call of UpdateQAppRequest
func (mr *MockQAppsAPIMockRecorder) UpdateQAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQAppRequest", reflect.TypeOf((*MockQAppsAPI)(nil).UpdateQAppRequest), arg0)
}

// UpdateQAppSession mocks base method
func (m *MockQAppsAPI) UpdateQAppSession(arg0 *qapps.UpdateQAppSessionInput) (*qapps.UpdateQAppSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQAppSession", arg0)
	ret0, _ := ret[0].(*qapps.UpdateQAppSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQAppSession indicates an expected call of UpdateQAppSession
func (mr *MockQAppsAPIMockRecorder) UpdateQAppSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQAppSession", reflect.TypeOf((*MockQAppsAPI)(nil).UpdateQAppSession), arg0)
}

// UpdateQAppSessionRequest mocks base method
func (m *MockQAppsAPI) UpdateQAppSessionRequest(arg0 *qapps.UpdateQAppSessionInput) (*request.Request, *qapps.UpdateQAppSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQAppSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qapps.UpdateQAppSessionOutput)
	return ret0, ret1
}

// UpdateQAppSessionRequest indicates an expected call of UpdateQAppSessionRequest
func (mr *MockQAppsAPIMockRecorder) UpdateQAppSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQAppSessionRequest", reflect.TypeOf((*MockQAppsAPI)(nil).UpdateQAppSessionRequest), arg0)
}

// UpdateQAppSessionWithContext mocks base method
func (m *MockQAppsAPI) UpdateQAppSessionWithContext(arg0 context.Context, arg1 *qapps.UpdateQAppSessionInput, arg2 ...request.Option) (*qapps.UpdateQAppSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQAppSessionWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.UpdateQAppSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQAppSessionWithContext indicates an expected call of UpdateQAppSessionWithContext
func (mr *MockQAppsAPIMockRecorder) UpdateQAppSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQAppSessionWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).UpdateQAppSessionWithContext), varargs...)
}

// UpdateQAppWithContext mocks base method
func (m *MockQAppsAPI) UpdateQAppWithContext(arg0 context.Context, arg1 *qapps.UpdateQAppInput, arg2 ...request.Option) (*qapps.UpdateQAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQAppWithContext", varargs...)
	ret0, _ := ret[0].(*qapps.UpdateQAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQAppWithContext indicates an expected call of UpdateQAppWithContext
func (mr *MockQAppsAPIMockRecorder) UpdateQAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQAppWithContext", reflect.TypeOf((*MockQAppsAPI)(nil).UpdateQAppWithContext), varargs...)
}
