// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ivschat/ivschatiface (interfaces: IvschatAPI)

// Package ivschatmock is a generated GoMock package.
package ivschatmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	ivschat "github.com/aws/aws-sdk-go/service/ivschat"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIvschatAPI is a mock of IvschatAPI interface
type MockIvschatAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIvschatAPIMockRecorder
}

// MockIvschatAPIMockRecorder is the mock recorder for MockIvschatAPI
type MockIvschatAPIMockRecorder struct {
	mock *MockIvschatAPI
}

// NewMockIvschatAPI creates a new mock instance
func NewMockIvschatAPI(ctrl *gomock.Controller) *MockIvschatAPI {
	mock := &MockIvschatAPI{ctrl: ctrl}
	mock.recorder = &MockIvschatAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIvschatAPI) EXPECT() *MockIvschatAPIMockRecorder {
	return m.recorder
}

// CreateChatToken mocks base method
func (m *MockIvschatAPI) CreateChatToken(arg0 *ivschat.CreateChatTokenInput) (*ivschat.CreateChatTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatToken", arg0)
	ret0, _ := ret[0].(*ivschat.CreateChatTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatToken indicates an expected call of CreateChatToken
func (mr *MockIvschatAPIMockRecorder) CreateChatToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatToken", reflect.TypeOf((*MockIvschatAPI)(nil).CreateChatToken), arg0)
}

// CreateChatTokenRequest mocks base method
func (m *MockIvschatAPI) CreateChatTokenRequest(arg0 *ivschat.CreateChatTokenInput) (*request.Request, *ivschat.CreateChatTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.CreateChatTokenOutput)
	return ret0, ret1
}

// CreateChatTokenRequest indicates an expected call of CreateChatTokenRequest
func (mr *MockIvschatAPIMockRecorder) CreateChatTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatTokenRequest", reflect.TypeOf((*MockIvschatAPI)(nil).CreateChatTokenRequest), arg0)
}

// CreateChatTokenWithContext mocks base method
func (m *MockIvschatAPI) CreateChatTokenWithContext(arg0 context.Context, arg1 *ivschat.CreateChatTokenInput, arg2 ...request.Option) (*ivschat.CreateChatTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChatTokenWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.CreateChatTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatTokenWithContext indicates an expected call of CreateChatTokenWithContext
func (mr *MockIvschatAPIMockRecorder) CreateChatTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatTokenWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).CreateChatTokenWithContext), varargs...)
}

// CreateRoom mocks base method
func (m *MockIvschatAPI) CreateRoom(arg0 *ivschat.CreateRoomInput) (*ivschat.CreateRoomOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", arg0)
	ret0, _ := ret[0].(*ivschat.CreateRoomOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom
func (mr *MockIvschatAPIMockRecorder) CreateRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockIvschatAPI)(nil).CreateRoom), arg0)
}

// CreateRoomRequest mocks base method
func (m *MockIvschatAPI) CreateRoomRequest(arg0 *ivschat.CreateRoomInput) (*request.Request, *ivschat.CreateRoomOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.CreateRoomOutput)
	return ret0, ret1
}

// CreateRoomRequest indicates an expected call of CreateRoomRequest
func (mr *MockIvschatAPIMockRecorder) CreateRoomRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomRequest", reflect.TypeOf((*MockIvschatAPI)(nil).CreateRoomRequest), arg0)
}

// CreateRoomWithContext mocks base method
func (m *MockIvschatAPI) CreateRoomWithContext(arg0 context.Context, arg1 *ivschat.CreateRoomInput, arg2 ...request.Option) (*ivschat.CreateRoomOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoomWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.CreateRoomOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoomWithContext indicates an expected call of CreateRoomWithContext
func (mr *MockIvschatAPIMockRecorder) CreateRoomWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).CreateRoomWithContext), varargs...)
}

// DeleteMessage mocks base method
func (m *MockIvschatAPI) DeleteMessage(arg0 *ivschat.DeleteMessageInput) (*ivschat.DeleteMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0)
	ret0, _ := ret[0].(*ivschat.DeleteMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage
func (mr *MockIvschatAPIMockRecorder) DeleteMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockIvschatAPI)(nil).DeleteMessage), arg0)
}

// DeleteMessageRequest mocks base method
func (m *MockIvschatAPI) DeleteMessageRequest(arg0 *ivschat.DeleteMessageInput) (*request.Request, *ivschat.DeleteMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.DeleteMessageOutput)
	return ret0, ret1
}

// DeleteMessageRequest indicates an expected call of DeleteMessageRequest
func (mr *MockIvschatAPIMockRecorder) DeleteMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageRequest", reflect.TypeOf((*MockIvschatAPI)(nil).DeleteMessageRequest), arg0)
}

// DeleteMessageWithContext mocks base method
func (m *MockIvschatAPI) DeleteMessageWithContext(arg0 context.Context, arg1 *ivschat.DeleteMessageInput, arg2 ...request.Option) (*ivschat.DeleteMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMessageWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.DeleteMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessageWithContext indicates an expected call of DeleteMessageWithContext
func (mr *MockIvschatAPIMockRecorder) DeleteMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).DeleteMessageWithContext), varargs...)
}

// DeleteRoom mocks base method
func (m *MockIvschatAPI) DeleteRoom(arg0 *ivschat.DeleteRoomInput) (*ivschat.DeleteRoomOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", arg0)
	ret0, _ := ret[0].(*ivschat.DeleteRoomOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoom indicates an expected call of DeleteRoom
func (mr *MockIvschatAPIMockRecorder) DeleteRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockIvschatAPI)(nil).DeleteRoom), arg0)
}

// DeleteRoomRequest mocks base method
func (m *MockIvschatAPI) DeleteRoomRequest(arg0 *ivschat.DeleteRoomInput) (*request.Request, *ivschat.DeleteRoomOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.DeleteRoomOutput)
	return ret0, ret1
}

// DeleteRoomRequest indicates an expected call of DeleteRoomRequest
func (mr *MockIvschatAPIMockRecorder) DeleteRoomRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomRequest", reflect.TypeOf((*MockIvschatAPI)(nil).DeleteRoomRequest), arg0)
}

// DeleteRoomWithContext mocks base method
func (m *MockIvschatAPI) DeleteRoomWithContext(arg0 context.Context, arg1 *ivschat.DeleteRoomInput, arg2 ...request.Option) (*ivschat.DeleteRoomOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoomWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.DeleteRoomOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoomWithContext indicates an expected call of DeleteRoomWithContext
func (mr *MockIvschatAPIMockRecorder) DeleteRoomWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).DeleteRoomWithContext), varargs...)
}

// DisconnectUser mocks base method
func (m *MockIvschatAPI) DisconnectUser(arg0 *ivschat.DisconnectUserInput) (*ivschat.DisconnectUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectUser", arg0)
	ret0, _ := ret[0].(*ivschat.DisconnectUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectUser indicates an expected call of DisconnectUser
func (mr *MockIvschatAPIMockRecorder) DisconnectUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectUser", reflect.TypeOf((*MockIvschatAPI)(nil).DisconnectUser), arg0)
}

// DisconnectUserRequest mocks base method
func (m *MockIvschatAPI) DisconnectUserRequest(arg0 *ivschat.DisconnectUserInput) (*request.Request, *ivschat.DisconnectUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.DisconnectUserOutput)
	return ret0, ret1
}

// DisconnectUserRequest indicates an expected call of DisconnectUserRequest
func (mr *MockIvschatAPIMockRecorder) DisconnectUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectUserRequest", reflect.TypeOf((*MockIvschatAPI)(nil).DisconnectUserRequest), arg0)
}

// DisconnectUserWithContext mocks base method
func (m *MockIvschatAPI) DisconnectUserWithContext(arg0 context.Context, arg1 *ivschat.DisconnectUserInput, arg2 ...request.Option) (*ivschat.DisconnectUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectUserWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.DisconnectUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectUserWithContext indicates an expected call of DisconnectUserWithContext
func (mr *MockIvschatAPIMockRecorder) DisconnectUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectUserWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).DisconnectUserWithContext), varargs...)
}

// GetRoom mocks base method
func (m *MockIvschatAPI) GetRoom(arg0 *ivschat.GetRoomInput) (*ivschat.GetRoomOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", arg0)
	ret0, _ := ret[0].(*ivschat.GetRoomOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom
func (mr *MockIvschatAPIMockRecorder) GetRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockIvschatAPI)(nil).GetRoom), arg0)
}

// GetRoomRequest mocks base method
func (m *MockIvschatAPI) GetRoomRequest(arg0 *ivschat.GetRoomInput) (*request.Request, *ivschat.GetRoomOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.GetRoomOutput)
	return ret0, ret1
}

// GetRoomRequest indicates an expected call of GetRoomRequest
func (mr *MockIvschatAPIMockRecorder) GetRoomRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomRequest", reflect.TypeOf((*MockIvschatAPI)(nil).GetRoomRequest), arg0)
}

// GetRoomWithContext mocks base method
func (m *MockIvschatAPI) GetRoomWithContext(arg0 context.Context, arg1 *ivschat.GetRoomInput, arg2 ...request.Option) (*ivschat.GetRoomOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoomWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.GetRoomOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomWithContext indicates an expected call of GetRoomWithContext
func (mr *MockIvschatAPIMockRecorder) GetRoomWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).GetRoomWithContext), varargs...)
}

// ListRooms mocks base method
func (m *MockIvschatAPI) ListRooms(arg0 *ivschat.ListRoomsInput) (*ivschat.ListRoomsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRooms", arg0)
	ret0, _ := ret[0].(*ivschat.ListRoomsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRooms indicates an expected call of ListRooms
func (mr *MockIvschatAPIMockRecorder) ListRooms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRooms", reflect.TypeOf((*MockIvschatAPI)(nil).ListRooms), arg0)
}

// ListRoomsPages mocks base method
func (m *MockIvschatAPI) ListRoomsPages(arg0 *ivschat.ListRoomsInput, arg1 func(*ivschat.ListRoomsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoomsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoomsPages indicates an expected call of ListRoomsPages
func (mr *MockIvschatAPIMockRecorder) ListRoomsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoomsPages", reflect.TypeOf((*MockIvschatAPI)(nil).ListRoomsPages), arg0, arg1)
}

// ListRoomsPagesWithContext mocks base method
func (m *MockIvschatAPI) ListRoomsPagesWithContext(arg0 context.Context, arg1 *ivschat.ListRoomsInput, arg2 func(*ivschat.ListRoomsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoomsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoomsPagesWithContext indicates an expected call of ListRoomsPagesWithContext
func (mr *MockIvschatAPIMockRecorder) ListRoomsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoomsPagesWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).ListRoomsPagesWithContext), varargs...)
}

// ListRoomsRequest mocks base method
func (m *MockIvschatAPI) ListRoomsRequest(arg0 *ivschat.ListRoomsInput) (*request.Request, *ivschat.ListRoomsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoomsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.ListRoomsOutput)
	return ret0, ret1
}

// ListRoomsRequest indicates an expected call of ListRoomsRequest
func (mr *MockIvschatAPIMockRecorder) ListRoomsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoomsRequest", reflect.TypeOf((*MockIvschatAPI)(nil).ListRoomsRequest), arg0)
}

// ListRoomsWithContext mocks base method
func (m *MockIvschatAPI) ListRoomsWithContext(arg0 context.Context, arg1 *ivschat.ListRoomsInput, arg2 ...request.Option) (*ivschat.ListRoomsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoomsWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.ListRoomsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoomsWithContext indicates an expected call of ListRoomsWithContext
func (mr *MockIvschatAPIMockRecorder) ListRoomsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoomsWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).ListRoomsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockIvschatAPI) ListTagsForResource(arg0 *ivschat.ListTagsForResourceInput) (*ivschat.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*ivschat.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockIvschatAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIvschatAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockIvschatAPI) ListTagsForResourceRequest(arg0 *ivschat.ListTagsForResourceInput) (*request.Request, *ivschat.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockIvschatAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockIvschatAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockIvschatAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *ivschat.ListTagsForResourceInput, arg2 ...request.Option) (*ivschat.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockIvschatAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// SendEvent mocks base method
func (m *MockIvschatAPI) SendEvent(arg0 *ivschat.SendEventInput) (*ivschat.SendEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", arg0)
	ret0, _ := ret[0].(*ivschat.SendEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEvent indicates an expected call of SendEvent
func (mr *MockIvschatAPIMockRecorder) SendEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockIvschatAPI)(nil).SendEvent), arg0)
}

// SendEventRequest mocks base method
func (m *MockIvschatAPI) SendEventRequest(arg0 *ivschat.SendEventInput) (*request.Request, *ivschat.SendEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.SendEventOutput)
	return ret0, ret1
}

// SendEventRequest indicates an expected call of SendEventRequest
func (mr *MockIvschatAPIMockRecorder) SendEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEventRequest", reflect.TypeOf((*MockIvschatAPI)(nil).SendEventRequest), arg0)
}

// SendEventWithContext mocks base method
func (m *MockIvschatAPI) SendEventWithContext(arg0 context.Context, arg1 *ivschat.SendEventInput, arg2 ...request.Option) (*ivschat.SendEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEventWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.SendEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEventWithContext indicates an expected call of SendEventWithContext
func (mr *MockIvschatAPIMockRecorder) SendEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEventWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).SendEventWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockIvschatAPI) TagResource(arg0 *ivschat.TagResourceInput) (*ivschat.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*ivschat.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockIvschatAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockIvschatAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockIvschatAPI) TagResourceRequest(arg0 *ivschat.TagResourceInput) (*request.Request, *ivschat.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockIvschatAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockIvschatAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockIvschatAPI) TagResourceWithContext(arg0 context.Context, arg1 *ivschat.TagResourceInput, arg2 ...request.Option) (*ivschat.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockIvschatAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockIvschatAPI) UntagResource(arg0 *ivschat.UntagResourceInput) (*ivschat.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*ivschat.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockIvschatAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockIvschatAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockIvschatAPI) UntagResourceRequest(arg0 *ivschat.UntagResourceInput) (*request.Request, *ivschat.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockIvschatAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockIvschatAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockIvschatAPI) UntagResourceWithContext(arg0 context.Context, arg1 *ivschat.UntagResourceInput, arg2 ...request.Option) (*ivschat.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockIvschatAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateRoom mocks base method
func (m *MockIvschatAPI) UpdateRoom(arg0 *ivschat.UpdateRoomInput) (*ivschat.UpdateRoomOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", arg0)
	ret0, _ := ret[0].(*ivschat.UpdateRoomOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoom indicates an expected call of UpdateRoom
func (mr *MockIvschatAPIMockRecorder) UpdateRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockIvschatAPI)(nil).UpdateRoom), arg0)
}

// UpdateRoomRequest mocks base method
func (m *MockIvschatAPI) UpdateRoomRequest(arg0 *ivschat.UpdateRoomInput) (*request.Request, *ivschat.UpdateRoomOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivschat.UpdateRoomOutput)
	return ret0, ret1
}

// UpdateRoomRequest indicates an expected call of UpdateRoomRequest
func (mr *MockIvschatAPIMockRecorder) UpdateRoomRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomRequest", reflect.TypeOf((*MockIvschatAPI)(nil).UpdateRoomRequest), arg0)
}

// UpdateRoomWithContext mocks base method
func (m *MockIvschatAPI) UpdateRoomWithContext(arg0 context.Context, arg1 *ivschat.UpdateRoomInput, arg2 ...request.Option) (*ivschat.UpdateRoomOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoomWithContext", varargs...)
	ret0, _ := ret[0].(*ivschat.UpdateRoomOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoomWithContext indicates an expected call of UpdateRoomWithContext
func (mr *MockIvschatAPIMockRecorder) UpdateRoomWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomWithContext", reflect.TypeOf((*MockIvschatAPI)(nil).UpdateRoomWithContext), varargs...)
}
