// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ivsrealtime/ivsrealtimeiface (interfaces: IVSRealTimeAPI)

// Package ivsrealtimemock is a generated GoMock package.
package ivsrealtimemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	ivsrealtime "github.com/aws/aws-sdk-go/service/ivsrealtime"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIVSRealTimeAPI is a mock of IVSRealTimeAPI interface
type MockIVSRealTimeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIVSRealTimeAPIMockRecorder
}

// MockIVSRealTimeAPIMockRecorder is the mock recorder for MockIVSRealTimeAPI
type MockIVSRealTimeAPIMockRecorder struct {
	mock *MockIVSRealTimeAPI
}

// NewMockIVSRealTimeAPI creates a new mock instance
func NewMockIVSRealTimeAPI(ctrl *gomock.Controller) *MockIVSRealTimeAPI {
	mock := &MockIVSRealTimeAPI{ctrl: ctrl}
	mock.recorder = &MockIVSRealTimeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIVSRealTimeAPI) EXPECT() *MockIVSRealTimeAPIMockRecorder {
	return m.recorder
}

// CreateParticipantToken mocks base method
func (m *MockIVSRealTimeAPI) CreateParticipantToken(arg0 *ivsrealtime.CreateParticipantTokenInput) (*ivsrealtime.CreateParticipantTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParticipantToken", arg0)
	ret0, _ := ret[0].(*ivsrealtime.CreateParticipantTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParticipantToken indicates an expected call of CreateParticipantToken
func (mr *MockIVSRealTimeAPIMockRecorder) CreateParticipantToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParticipantToken", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).CreateParticipantToken), arg0)
}

// CreateParticipantTokenRequest mocks base method
func (m *MockIVSRealTimeAPI) CreateParticipantTokenRequest(arg0 *ivsrealtime.CreateParticipantTokenInput) (*request.Request, *ivsrealtime.CreateParticipantTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParticipantTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.CreateParticipantTokenOutput)
	return ret0, ret1
}

// CreateParticipantTokenRequest indicates an expected call of CreateParticipantTokenRequest
func (mr *MockIVSRealTimeAPIMockRecorder) CreateParticipantTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParticipantTokenRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).CreateParticipantTokenRequest), arg0)
}

// CreateParticipantTokenWithContext mocks base method
func (m *MockIVSRealTimeAPI) CreateParticipantTokenWithContext(arg0 context.Context, arg1 *ivsrealtime.CreateParticipantTokenInput, arg2 ...request.Option) (*ivsrealtime.CreateParticipantTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateParticipantTokenWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.CreateParticipantTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParticipantTokenWithContext indicates an expected call of CreateParticipantTokenWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) CreateParticipantTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParticipantTokenWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).CreateParticipantTokenWithContext), varargs...)
}

// CreateStage mocks base method
func (m *MockIVSRealTimeAPI) CreateStage(arg0 *ivsrealtime.CreateStageInput) (*ivsrealtime.CreateStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStage", arg0)
	ret0, _ := ret[0].(*ivsrealtime.CreateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStage indicates an expected call of CreateStage
func (mr *MockIVSRealTimeAPIMockRecorder) CreateStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStage", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).CreateStage), arg0)
}

// CreateStageRequest mocks base method
func (m *MockIVSRealTimeAPI) CreateStageRequest(arg0 *ivsrealtime.CreateStageInput) (*request.Request, *ivsrealtime.CreateStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.CreateStageOutput)
	return ret0, ret1
}

// CreateStageRequest indicates an expected call of CreateStageRequest
func (mr *MockIVSRealTimeAPIMockRecorder) CreateStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStageRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).CreateStageRequest), arg0)
}

// CreateStageWithContext mocks base method
func (m *MockIVSRealTimeAPI) CreateStageWithContext(arg0 context.Context, arg1 *ivsrealtime.CreateStageInput, arg2 ...request.Option) (*ivsrealtime.CreateStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStageWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.CreateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStageWithContext indicates an expected call of CreateStageWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) CreateStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStageWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).CreateStageWithContext), varargs...)
}

// DeleteStage mocks base method
func (m *MockIVSRealTimeAPI) DeleteStage(arg0 *ivsrealtime.DeleteStageInput) (*ivsrealtime.DeleteStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStage", arg0)
	ret0, _ := ret[0].(*ivsrealtime.DeleteStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStage indicates an expected call of DeleteStage
func (mr *MockIVSRealTimeAPIMockRecorder) DeleteStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStage", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).DeleteStage), arg0)
}

// DeleteStageRequest mocks base method
func (m *MockIVSRealTimeAPI) DeleteStageRequest(arg0 *ivsrealtime.DeleteStageInput) (*request.Request, *ivsrealtime.DeleteStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.DeleteStageOutput)
	return ret0, ret1
}

// DeleteStageRequest indicates an expected call of DeleteStageRequest
func (mr *MockIVSRealTimeAPIMockRecorder) DeleteStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStageRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).DeleteStageRequest), arg0)
}

// DeleteStageWithContext mocks base method
func (m *MockIVSRealTimeAPI) DeleteStageWithContext(arg0 context.Context, arg1 *ivsrealtime.DeleteStageInput, arg2 ...request.Option) (*ivsrealtime.DeleteStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStageWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.DeleteStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStageWithContext indicates an expected call of DeleteStageWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) DeleteStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStageWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).DeleteStageWithContext), varargs...)
}

// DisconnectParticipant mocks base method
func (m *MockIVSRealTimeAPI) DisconnectParticipant(arg0 *ivsrealtime.DisconnectParticipantInput) (*ivsrealtime.DisconnectParticipantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectParticipant", arg0)
	ret0, _ := ret[0].(*ivsrealtime.DisconnectParticipantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectParticipant indicates an expected call of DisconnectParticipant
func (mr *MockIVSRealTimeAPIMockRecorder) DisconnectParticipant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectParticipant", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).DisconnectParticipant), arg0)
}

// DisconnectParticipantRequest mocks base method
func (m *MockIVSRealTimeAPI) DisconnectParticipantRequest(arg0 *ivsrealtime.DisconnectParticipantInput) (*request.Request, *ivsrealtime.DisconnectParticipantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectParticipantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.DisconnectParticipantOutput)
	return ret0, ret1
}

// DisconnectParticipantRequest indicates an expected call of DisconnectParticipantRequest
func (mr *MockIVSRealTimeAPIMockRecorder) DisconnectParticipantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectParticipantRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).DisconnectParticipantRequest), arg0)
}

// DisconnectParticipantWithContext mocks base method
func (m *MockIVSRealTimeAPI) DisconnectParticipantWithContext(arg0 context.Context, arg1 *ivsrealtime.DisconnectParticipantInput, arg2 ...request.Option) (*ivsrealtime.DisconnectParticipantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectParticipantWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.DisconnectParticipantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectParticipantWithContext indicates an expected call of DisconnectParticipantWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) DisconnectParticipantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectParticipantWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).DisconnectParticipantWithContext), varargs...)
}

// GetParticipant mocks base method
func (m *MockIVSRealTimeAPI) GetParticipant(arg0 *ivsrealtime.GetParticipantInput) (*ivsrealtime.GetParticipantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipant", arg0)
	ret0, _ := ret[0].(*ivsrealtime.GetParticipantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipant indicates an expected call of GetParticipant
func (mr *MockIVSRealTimeAPIMockRecorder) GetParticipant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipant", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).GetParticipant), arg0)
}

// GetParticipantRequest mocks base method
func (m *MockIVSRealTimeAPI) GetParticipantRequest(arg0 *ivsrealtime.GetParticipantInput) (*request.Request, *ivsrealtime.GetParticipantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.GetParticipantOutput)
	return ret0, ret1
}

// GetParticipantRequest indicates an expected call of GetParticipantRequest
func (mr *MockIVSRealTimeAPIMockRecorder) GetParticipantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).GetParticipantRequest), arg0)
}

// GetParticipantWithContext mocks base method
func (m *MockIVSRealTimeAPI) GetParticipantWithContext(arg0 context.Context, arg1 *ivsrealtime.GetParticipantInput, arg2 ...request.Option) (*ivsrealtime.GetParticipantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParticipantWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.GetParticipantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantWithContext indicates an expected call of GetParticipantWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) GetParticipantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).GetParticipantWithContext), varargs...)
}

// GetStage mocks base method
func (m *MockIVSRealTimeAPI) GetStage(arg0 *ivsrealtime.GetStageInput) (*ivsrealtime.GetStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStage", arg0)
	ret0, _ := ret[0].(*ivsrealtime.GetStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStage indicates an expected call of GetStage
func (mr *MockIVSRealTimeAPIMockRecorder) GetStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStage", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).GetStage), arg0)
}

// GetStageRequest mocks base method
func (m *MockIVSRealTimeAPI) GetStageRequest(arg0 *ivsrealtime.GetStageInput) (*request.Request, *ivsrealtime.GetStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.GetStageOutput)
	return ret0, ret1
}

// GetStageRequest indicates an expected call of GetStageRequest
func (mr *MockIVSRealTimeAPIMockRecorder) GetStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).GetStageRequest), arg0)
}

// GetStageSession mocks base method
func (m *MockIVSRealTimeAPI) GetStageSession(arg0 *ivsrealtime.GetStageSessionInput) (*ivsrealtime.GetStageSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStageSession", arg0)
	ret0, _ := ret[0].(*ivsrealtime.GetStageSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStageSession indicates an expected call of GetStageSession
func (mr *MockIVSRealTimeAPIMockRecorder) GetStageSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageSession", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).GetStageSession), arg0)
}

// GetStageSessionRequest mocks base method
func (m *MockIVSRealTimeAPI) GetStageSessionRequest(arg0 *ivsrealtime.GetStageSessionInput) (*request.Request, *ivsrealtime.GetStageSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStageSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.GetStageSessionOutput)
	return ret0, ret1
}

// GetStageSessionRequest indicates an expected call of GetStageSessionRequest
func (mr *MockIVSRealTimeAPIMockRecorder) GetStageSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageSessionRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).GetStageSessionRequest), arg0)
}

// GetStageSessionWithContext mocks base method
func (m *MockIVSRealTimeAPI) GetStageSessionWithContext(arg0 context.Context, arg1 *ivsrealtime.GetStageSessionInput, arg2 ...request.Option) (*ivsrealtime.GetStageSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStageSessionWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.GetStageSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStageSessionWithContext indicates an expected call of GetStageSessionWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) GetStageSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageSessionWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).GetStageSessionWithContext), varargs...)
}

// GetStageWithContext mocks base method
func (m *MockIVSRealTimeAPI) GetStageWithContext(arg0 context.Context, arg1 *ivsrealtime.GetStageInput, arg2 ...request.Option) (*ivsrealtime.GetStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStageWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.GetStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStageWithContext indicates an expected call of GetStageWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) GetStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).GetStageWithContext), varargs...)
}

// ListParticipantEvents mocks base method
func (m *MockIVSRealTimeAPI) ListParticipantEvents(arg0 *ivsrealtime.ListParticipantEventsInput) (*ivsrealtime.ListParticipantEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticipantEvents", arg0)
	ret0, _ := ret[0].(*ivsrealtime.ListParticipantEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParticipantEvents indicates an expected call of ListParticipantEvents
func (mr *MockIVSRealTimeAPIMockRecorder) ListParticipantEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipantEvents", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListParticipantEvents), arg0)
}

// ListParticipantEventsPages mocks base method
func (m *MockIVSRealTimeAPI) ListParticipantEventsPages(arg0 *ivsrealtime.ListParticipantEventsInput, arg1 func(*ivsrealtime.ListParticipantEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticipantEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListParticipantEventsPages indicates an expected call of ListParticipantEventsPages
func (mr *MockIVSRealTimeAPIMockRecorder) ListParticipantEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipantEventsPages", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListParticipantEventsPages), arg0, arg1)
}

// ListParticipantEventsPagesWithContext mocks base method
func (m *MockIVSRealTimeAPI) ListParticipantEventsPagesWithContext(arg0 context.Context, arg1 *ivsrealtime.ListParticipantEventsInput, arg2 func(*ivsrealtime.ListParticipantEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParticipantEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListParticipantEventsPagesWithContext indicates an expected call of ListParticipantEventsPagesWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) ListParticipantEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipantEventsPagesWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListParticipantEventsPagesWithContext), varargs...)
}

// ListParticipantEventsRequest mocks base method
func (m *MockIVSRealTimeAPI) ListParticipantEventsRequest(arg0 *ivsrealtime.ListParticipantEventsInput) (*request.Request, *ivsrealtime.ListParticipantEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticipantEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.ListParticipantEventsOutput)
	return ret0, ret1
}

// ListParticipantEventsRequest indicates an expected call of ListParticipantEventsRequest
func (mr *MockIVSRealTimeAPIMockRecorder) ListParticipantEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipantEventsRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListParticipantEventsRequest), arg0)
}

// ListParticipantEventsWithContext mocks base method
func (m *MockIVSRealTimeAPI) ListParticipantEventsWithContext(arg0 context.Context, arg1 *ivsrealtime.ListParticipantEventsInput, arg2 ...request.Option) (*ivsrealtime.ListParticipantEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParticipantEventsWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.ListParticipantEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParticipantEventsWithContext indicates an expected call of ListParticipantEventsWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) ListParticipantEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipantEventsWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListParticipantEventsWithContext), varargs...)
}

// ListParticipants mocks base method
func (m *MockIVSRealTimeAPI) ListParticipants(arg0 *ivsrealtime.ListParticipantsInput) (*ivsrealtime.ListParticipantsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticipants", arg0)
	ret0, _ := ret[0].(*ivsrealtime.ListParticipantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParticipants indicates an expected call of ListParticipants
func (mr *MockIVSRealTimeAPIMockRecorder) ListParticipants(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipants", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListParticipants), arg0)
}

// ListParticipantsPages mocks base method
func (m *MockIVSRealTimeAPI) ListParticipantsPages(arg0 *ivsrealtime.ListParticipantsInput, arg1 func(*ivsrealtime.ListParticipantsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticipantsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListParticipantsPages indicates an expected call of ListParticipantsPages
func (mr *MockIVSRealTimeAPIMockRecorder) ListParticipantsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipantsPages", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListParticipantsPages), arg0, arg1)
}

// ListParticipantsPagesWithContext mocks base method
func (m *MockIVSRealTimeAPI) ListParticipantsPagesWithContext(arg0 context.Context, arg1 *ivsrealtime.ListParticipantsInput, arg2 func(*ivsrealtime.ListParticipantsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParticipantsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListParticipantsPagesWithContext indicates an expected call of ListParticipantsPagesWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) ListParticipantsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipantsPagesWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListParticipantsPagesWithContext), varargs...)
}

// ListParticipantsRequest mocks base method
func (m *MockIVSRealTimeAPI) ListParticipantsRequest(arg0 *ivsrealtime.ListParticipantsInput) (*request.Request, *ivsrealtime.ListParticipantsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticipantsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.ListParticipantsOutput)
	return ret0, ret1
}

// ListParticipantsRequest indicates an expected call of ListParticipantsRequest
func (mr *MockIVSRealTimeAPIMockRecorder) ListParticipantsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipantsRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListParticipantsRequest), arg0)
}

// ListParticipantsWithContext mocks base method
func (m *MockIVSRealTimeAPI) ListParticipantsWithContext(arg0 context.Context, arg1 *ivsrealtime.ListParticipantsInput, arg2 ...request.Option) (*ivsrealtime.ListParticipantsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParticipantsWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.ListParticipantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParticipantsWithContext indicates an expected call of ListParticipantsWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) ListParticipantsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipantsWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListParticipantsWithContext), varargs...)
}

// ListStageSessions mocks base method
func (m *MockIVSRealTimeAPI) ListStageSessions(arg0 *ivsrealtime.ListStageSessionsInput) (*ivsrealtime.ListStageSessionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStageSessions", arg0)
	ret0, _ := ret[0].(*ivsrealtime.ListStageSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStageSessions indicates an expected call of ListStageSessions
func (mr *MockIVSRealTimeAPIMockRecorder) ListStageSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageSessions", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListStageSessions), arg0)
}

// ListStageSessionsPages mocks base method
func (m *MockIVSRealTimeAPI) ListStageSessionsPages(arg0 *ivsrealtime.ListStageSessionsInput, arg1 func(*ivsrealtime.ListStageSessionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStageSessionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStageSessionsPages indicates an expected call of ListStageSessionsPages
func (mr *MockIVSRealTimeAPIMockRecorder) ListStageSessionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageSessionsPages", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListStageSessionsPages), arg0, arg1)
}

// ListStageSessionsPagesWithContext mocks base method
func (m *MockIVSRealTimeAPI) ListStageSessionsPagesWithContext(arg0 context.Context, arg1 *ivsrealtime.ListStageSessionsInput, arg2 func(*ivsrealtime.ListStageSessionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStageSessionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStageSessionsPagesWithContext indicates an expected call of ListStageSessionsPagesWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) ListStageSessionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageSessionsPagesWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListStageSessionsPagesWithContext), varargs...)
}

// ListStageSessionsRequest mocks base method
func (m *MockIVSRealTimeAPI) ListStageSessionsRequest(arg0 *ivsrealtime.ListStageSessionsInput) (*request.Request, *ivsrealtime.ListStageSessionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStageSessionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.ListStageSessionsOutput)
	return ret0, ret1
}

// ListStageSessionsRequest indicates an expected call of ListStageSessionsRequest
func (mr *MockIVSRealTimeAPIMockRecorder) ListStageSessionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageSessionsRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListStageSessionsRequest), arg0)
}

// ListStageSessionsWithContext mocks base method
func (m *MockIVSRealTimeAPI) ListStageSessionsWithContext(arg0 context.Context, arg1 *ivsrealtime.ListStageSessionsInput, arg2 ...request.Option) (*ivsrealtime.ListStageSessionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStageSessionsWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.ListStageSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStageSessionsWithContext indicates an expected call of ListStageSessionsWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) ListStageSessionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageSessionsWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListStageSessionsWithContext), varargs...)
}

// ListStages mocks base method
func (m *MockIVSRealTimeAPI) ListStages(arg0 *ivsrealtime.ListStagesInput) (*ivsrealtime.ListStagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStages", arg0)
	ret0, _ := ret[0].(*ivsrealtime.ListStagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStages indicates an expected call of ListStages
func (mr *MockIVSRealTimeAPIMockRecorder) ListStages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStages", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListStages), arg0)
}

// ListStagesPages mocks base method
func (m *MockIVSRealTimeAPI) ListStagesPages(arg0 *ivsrealtime.ListStagesInput, arg1 func(*ivsrealtime.ListStagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStagesPages indicates an expected call of ListStagesPages
func (mr *MockIVSRealTimeAPIMockRecorder) ListStagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagesPages", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListStagesPages), arg0, arg1)
}

// ListStagesPagesWithContext mocks base method
func (m *MockIVSRealTimeAPI) ListStagesPagesWithContext(arg0 context.Context, arg1 *ivsrealtime.ListStagesInput, arg2 func(*ivsrealtime.ListStagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStagesPagesWithContext indicates an expected call of ListStagesPagesWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) ListStagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagesPagesWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListStagesPagesWithContext), varargs...)
}

// ListStagesRequest mocks base method
func (m *MockIVSRealTimeAPI) ListStagesRequest(arg0 *ivsrealtime.ListStagesInput) (*request.Request, *ivsrealtime.ListStagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.ListStagesOutput)
	return ret0, ret1
}

// ListStagesRequest indicates an expected call of ListStagesRequest
func (mr *MockIVSRealTimeAPIMockRecorder) ListStagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagesRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListStagesRequest), arg0)
}

// ListStagesWithContext mocks base method
func (m *MockIVSRealTimeAPI) ListStagesWithContext(arg0 context.Context, arg1 *ivsrealtime.ListStagesInput, arg2 ...request.Option) (*ivsrealtime.ListStagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStagesWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.ListStagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStagesWithContext indicates an expected call of ListStagesWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) ListStagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagesWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListStagesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockIVSRealTimeAPI) ListTagsForResource(arg0 *ivsrealtime.ListTagsForResourceInput) (*ivsrealtime.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*ivsrealtime.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockIVSRealTimeAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockIVSRealTimeAPI) ListTagsForResourceRequest(arg0 *ivsrealtime.ListTagsForResourceInput) (*request.Request, *ivsrealtime.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockIVSRealTimeAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockIVSRealTimeAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *ivsrealtime.ListTagsForResourceInput, arg2 ...request.Option) (*ivsrealtime.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockIVSRealTimeAPI) TagResource(arg0 *ivsrealtime.TagResourceInput) (*ivsrealtime.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*ivsrealtime.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockIVSRealTimeAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockIVSRealTimeAPI) TagResourceRequest(arg0 *ivsrealtime.TagResourceInput) (*request.Request, *ivsrealtime.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockIVSRealTimeAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockIVSRealTimeAPI) TagResourceWithContext(arg0 context.Context, arg1 *ivsrealtime.TagResourceInput, arg2 ...request.Option) (*ivsrealtime.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockIVSRealTimeAPI) UntagResource(arg0 *ivsrealtime.UntagResourceInput) (*ivsrealtime.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*ivsrealtime.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockIVSRealTimeAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockIVSRealTimeAPI) UntagResourceRequest(arg0 *ivsrealtime.UntagResourceInput) (*request.Request, *ivsrealtime.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockIVSRealTimeAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockIVSRealTimeAPI) UntagResourceWithContext(arg0 context.Context, arg1 *ivsrealtime.UntagResourceInput, arg2 ...request.Option) (*ivsrealtime.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateStage mocks base method
func (m *MockIVSRealTimeAPI) UpdateStage(arg0 *ivsrealtime.UpdateStageInput) (*ivsrealtime.UpdateStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStage", arg0)
	ret0, _ := ret[0].(*ivsrealtime.UpdateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStage indicates an expected call of UpdateStage
func (mr *MockIVSRealTimeAPIMockRecorder) UpdateStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStage", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).UpdateStage), arg0)
}

// UpdateStageRequest mocks base method
func (m *MockIVSRealTimeAPI) UpdateStageRequest(arg0 *ivsrealtime.UpdateStageInput) (*request.Request, *ivsrealtime.UpdateStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivsrealtime.UpdateStageOutput)
	return ret0, ret1
}

// UpdateStageRequest indicates an expected call of UpdateStageRequest
func (mr *MockIVSRealTimeAPIMockRecorder) UpdateStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStageRequest", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).UpdateStageRequest), arg0)
}

// UpdateStageWithContext mocks base method
func (m *MockIVSRealTimeAPI) UpdateStageWithContext(arg0 context.Context, arg1 *ivsrealtime.UpdateStageInput, arg2 ...request.Option) (*ivsrealtime.UpdateStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStageWithContext", varargs...)
	ret0, _ := ret[0].(*ivsrealtime.UpdateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStageWithContext indicates an expected call of UpdateStageWithContext
func (mr *MockIVSRealTimeAPIMockRecorder) UpdateStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStageWithContext", reflect.TypeOf((*MockIVSRealTimeAPI)(nil).UpdateStageWithContext), varargs...)
}
