// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/kinesisvideoarchivedmedia/kinesisvideoarchivedmediaiface (interfaces: KinesisVideoArchivedMediaAPI)

// Package kinesisvideoarchivedmediamock is a generated GoMock package.
package kinesisvideoarchivedmediamock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	kinesisvideoarchivedmedia "github.com/aws/aws-sdk-go/service/kinesisvideoarchivedmedia"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKinesisVideoArchivedMediaAPI is a mock of KinesisVideoArchivedMediaAPI interface
type MockKinesisVideoArchivedMediaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKinesisVideoArchivedMediaAPIMockRecorder
}

// MockKinesisVideoArchivedMediaAPIMockRecorder is the mock recorder for MockKinesisVideoArchivedMediaAPI
type MockKinesisVideoArchivedMediaAPIMockRecorder struct {
	mock *MockKinesisVideoArchivedMediaAPI
}

// NewMockKinesisVideoArchivedMediaAPI creates a new mock instance
func NewMockKinesisVideoArchivedMediaAPI(ctrl *gomock.Controller) *MockKinesisVideoArchivedMediaAPI {
	mock := &MockKinesisVideoArchivedMediaAPI{ctrl: ctrl}
	mock.recorder = &MockKinesisVideoArchivedMediaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKinesisVideoArchivedMediaAPI) EXPECT() *MockKinesisVideoArchivedMediaAPIMockRecorder {
	return m.recorder
}

// GetHLSStreamingSessionURL mocks base method
func (m *MockKinesisVideoArchivedMediaAPI) GetHLSStreamingSessionURL(arg0 *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput) (*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHLSStreamingSessionURL", arg0)
	ret0, _ := ret[0].(*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHLSStreamingSessionURL indicates an expected call of GetHLSStreamingSessionURL
func (mr *MockKinesisVideoArchivedMediaAPIMockRecorder) GetHLSStreamingSessionURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHLSStreamingSessionURL", reflect.TypeOf((*MockKinesisVideoArchivedMediaAPI)(nil).GetHLSStreamingSessionURL), arg0)
}

// GetHLSStreamingSessionURLRequest mocks base method
func (m *MockKinesisVideoArchivedMediaAPI) GetHLSStreamingSessionURLRequest(arg0 *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput) (*request.Request, *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHLSStreamingSessionURLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput)
	return ret0, ret1
}

// GetHLSStreamingSessionURLRequest indicates an expected call of GetHLSStreamingSessionURLRequest
func (mr *MockKinesisVideoArchivedMediaAPIMockRecorder) GetHLSStreamingSessionURLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHLSStreamingSessionURLRequest", reflect.TypeOf((*MockKinesisVideoArchivedMediaAPI)(nil).GetHLSStreamingSessionURLRequest), arg0)
}

// GetHLSStreamingSessionURLWithContext mocks base method
func (m *MockKinesisVideoArchivedMediaAPI) GetHLSStreamingSessionURLWithContext(arg0 context.Context, arg1 *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput, arg2 ...request.Option) (*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHLSStreamingSessionURLWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHLSStreamingSessionURLWithContext indicates an expected call of GetHLSStreamingSessionURLWithContext
func (mr *MockKinesisVideoArchivedMediaAPIMockRecorder) GetHLSStreamingSessionURLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHLSStreamingSessionURLWithContext", reflect.TypeOf((*MockKinesisVideoArchivedMediaAPI)(nil).GetHLSStreamingSessionURLWithContext), varargs...)
}

// GetMediaForFragmentList mocks base method
func (m *MockKinesisVideoArchivedMediaAPI) GetMediaForFragmentList(arg0 *kinesisvideoarchivedmedia.GetMediaForFragmentListInput) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaForFragmentList", arg0)
	ret0, _ := ret[0].(*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaForFragmentList indicates an expected call of GetMediaForFragmentList
func (mr *MockKinesisVideoArchivedMediaAPIMockRecorder) GetMediaForFragmentList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaForFragmentList", reflect.TypeOf((*MockKinesisVideoArchivedMediaAPI)(nil).GetMediaForFragmentList), arg0)
}

// GetMediaForFragmentListRequest mocks base method
func (m *MockKinesisVideoArchivedMediaAPI) GetMediaForFragmentListRequest(arg0 *kinesisvideoarchivedmedia.GetMediaForFragmentListInput) (*request.Request, *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaForFragmentListRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput)
	return ret0, ret1
}

// GetMediaForFragmentListRequest indicates an expected call of GetMediaForFragmentListRequest
func (mr *MockKinesisVideoArchivedMediaAPIMockRecorder) GetMediaForFragmentListRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaForFragmentListRequest", reflect.TypeOf((*MockKinesisVideoArchivedMediaAPI)(nil).GetMediaForFragmentListRequest), arg0)
}

// GetMediaForFragmentListWithContext mocks base method
func (m *MockKinesisVideoArchivedMediaAPI) GetMediaForFragmentListWithContext(arg0 context.Context, arg1 *kinesisvideoarchivedmedia.GetMediaForFragmentListInput, arg2 ...request.Option) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMediaForFragmentListWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaForFragmentListWithContext indicates an expected call of GetMediaForFragmentListWithContext
func (mr *MockKinesisVideoArchivedMediaAPIMockRecorder) GetMediaForFragmentListWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaForFragmentListWithContext", reflect.TypeOf((*MockKinesisVideoArchivedMediaAPI)(nil).GetMediaForFragmentListWithContext), varargs...)
}

// ListFragments mocks base method
func (m *MockKinesisVideoArchivedMediaAPI) ListFragments(arg0 *kinesisvideoarchivedmedia.ListFragmentsInput) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFragments", arg0)
	ret0, _ := ret[0].(*kinesisvideoarchivedmedia.ListFragmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFragments indicates an expected call of ListFragments
func (mr *MockKinesisVideoArchivedMediaAPIMockRecorder) ListFragments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFragments", reflect.TypeOf((*MockKinesisVideoArchivedMediaAPI)(nil).ListFragments), arg0)
}

// ListFragmentsRequest mocks base method
func (m *MockKinesisVideoArchivedMediaAPI) ListFragmentsRequest(arg0 *kinesisvideoarchivedmedia.ListFragmentsInput) (*request.Request, *kinesisvideoarchivedmedia.ListFragmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFragmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisvideoarchivedmedia.ListFragmentsOutput)
	return ret0, ret1
}

// ListFragmentsRequest indicates an expected call of ListFragmentsRequest
func (mr *MockKinesisVideoArchivedMediaAPIMockRecorder) ListFragmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFragmentsRequest", reflect.TypeOf((*MockKinesisVideoArchivedMediaAPI)(nil).ListFragmentsRequest), arg0)
}

// ListFragmentsWithContext mocks base method
func (m *MockKinesisVideoArchivedMediaAPI) ListFragmentsWithContext(arg0 context.Context, arg1 *kinesisvideoarchivedmedia.ListFragmentsInput, arg2 ...request.Option) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFragmentsWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisvideoarchivedmedia.ListFragmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFragmentsWithContext indicates an expected call of ListFragmentsWithContext
func (mr *MockKinesisVideoArchivedMediaAPIMockRecorder) ListFragmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFragmentsWithContext", reflect.TypeOf((*MockKinesisVideoArchivedMediaAPI)(nil).ListFragmentsWithContext), varargs...)
}
