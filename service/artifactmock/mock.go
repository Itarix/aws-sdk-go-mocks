// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/artifact/artifactiface (interfaces: ArtifactAPI)

// Package artifactmock is a generated GoMock package.
package artifactmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	artifact "github.com/aws/aws-sdk-go/service/artifact"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockArtifactAPI is a mock of ArtifactAPI interface
type MockArtifactAPI struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactAPIMockRecorder
}

// MockArtifactAPIMockRecorder is the mock recorder for MockArtifactAPI
type MockArtifactAPIMockRecorder struct {
	mock *MockArtifactAPI
}

// NewMockArtifactAPI creates a new mock instance
func NewMockArtifactAPI(ctrl *gomock.Controller) *MockArtifactAPI {
	mock := &MockArtifactAPI{ctrl: ctrl}
	mock.recorder = &MockArtifactAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArtifactAPI) EXPECT() *MockArtifactAPIMockRecorder {
	return m.recorder
}

// GetAccountSettings mocks base method
func (m *MockArtifactAPI) GetAccountSettings(arg0 *artifact.GetAccountSettingsInput) (*artifact.GetAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSettings", arg0)
	ret0, _ := ret[0].(*artifact.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettings indicates an expected call of GetAccountSettings
func (mr *MockArtifactAPIMockRecorder) GetAccountSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettings", reflect.TypeOf((*MockArtifactAPI)(nil).GetAccountSettings), arg0)
}

// GetAccountSettingsRequest mocks base method
func (m *MockArtifactAPI) GetAccountSettingsRequest(arg0 *artifact.GetAccountSettingsInput) (*request.Request, *artifact.GetAccountSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*artifact.GetAccountSettingsOutput)
	return ret0, ret1
}

// GetAccountSettingsRequest indicates an expected call of GetAccountSettingsRequest
func (mr *MockArtifactAPIMockRecorder) GetAccountSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettingsRequest", reflect.TypeOf((*MockArtifactAPI)(nil).GetAccountSettingsRequest), arg0)
}

// GetAccountSettingsWithContext mocks base method
func (m *MockArtifactAPI) GetAccountSettingsWithContext(arg0 context.Context, arg1 *artifact.GetAccountSettingsInput, arg2 ...request.Option) (*artifact.GetAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*artifact.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettingsWithContext indicates an expected call of GetAccountSettingsWithContext
func (mr *MockArtifactAPIMockRecorder) GetAccountSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettingsWithContext", reflect.TypeOf((*MockArtifactAPI)(nil).GetAccountSettingsWithContext), varargs...)
}

// GetReport mocks base method
func (m *MockArtifactAPI) GetReport(arg0 *artifact.GetReportInput) (*artifact.GetReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", arg0)
	ret0, _ := ret[0].(*artifact.GetReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport
func (mr *MockArtifactAPIMockRecorder) GetReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockArtifactAPI)(nil).GetReport), arg0)
}

// GetReportMetadata mocks base method
func (m *MockArtifactAPI) GetReportMetadata(arg0 *artifact.GetReportMetadataInput) (*artifact.GetReportMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportMetadata", arg0)
	ret0, _ := ret[0].(*artifact.GetReportMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportMetadata indicates an expected call of GetReportMetadata
func (mr *MockArtifactAPIMockRecorder) GetReportMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportMetadata", reflect.TypeOf((*MockArtifactAPI)(nil).GetReportMetadata), arg0)
}

// GetReportMetadataRequest mocks base method
func (m *MockArtifactAPI) GetReportMetadataRequest(arg0 *artifact.GetReportMetadataInput) (*request.Request, *artifact.GetReportMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*artifact.GetReportMetadataOutput)
	return ret0, ret1
}

// GetReportMetadataRequest indicates an expected call of GetReportMetadataRequest
func (mr *MockArtifactAPIMockRecorder) GetReportMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportMetadataRequest", reflect.TypeOf((*MockArtifactAPI)(nil).GetReportMetadataRequest), arg0)
}

// GetReportMetadataWithContext mocks base method
func (m *MockArtifactAPI) GetReportMetadataWithContext(arg0 context.Context, arg1 *artifact.GetReportMetadataInput, arg2 ...request.Option) (*artifact.GetReportMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReportMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*artifact.GetReportMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportMetadataWithContext indicates an expected call of GetReportMetadataWithContext
func (mr *MockArtifactAPIMockRecorder) GetReportMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportMetadataWithContext", reflect.TypeOf((*MockArtifactAPI)(nil).GetReportMetadataWithContext), varargs...)
}

// GetReportRequest mocks base method
func (m *MockArtifactAPI) GetReportRequest(arg0 *artifact.GetReportInput) (*request.Request, *artifact.GetReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*artifact.GetReportOutput)
	return ret0, ret1
}

// GetReportRequest indicates an expected call of GetReportRequest
func (mr *MockArtifactAPIMockRecorder) GetReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportRequest", reflect.TypeOf((*MockArtifactAPI)(nil).GetReportRequest), arg0)
}

// GetReportWithContext mocks base method
func (m *MockArtifactAPI) GetReportWithContext(arg0 context.Context, arg1 *artifact.GetReportInput, arg2 ...request.Option) (*artifact.GetReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReportWithContext", varargs...)
	ret0, _ := ret[0].(*artifact.GetReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportWithContext indicates an expected call of GetReportWithContext
func (mr *MockArtifactAPIMockRecorder) GetReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportWithContext", reflect.TypeOf((*MockArtifactAPI)(nil).GetReportWithContext), varargs...)
}

// GetTermForReport mocks base method
func (m *MockArtifactAPI) GetTermForReport(arg0 *artifact.GetTermForReportInput) (*artifact.GetTermForReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTermForReport", arg0)
	ret0, _ := ret[0].(*artifact.GetTermForReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermForReport indicates an expected call of GetTermForReport
func (mr *MockArtifactAPIMockRecorder) GetTermForReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermForReport", reflect.TypeOf((*MockArtifactAPI)(nil).GetTermForReport), arg0)
}

// GetTermForReportRequest mocks base method
func (m *MockArtifactAPI) GetTermForReportRequest(arg0 *artifact.GetTermForReportInput) (*request.Request, *artifact.GetTermForReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTermForReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*artifact.GetTermForReportOutput)
	return ret0, ret1
}

// GetTermForReportRequest indicates an expected call of GetTermForReportRequest
func (mr *MockArtifactAPIMockRecorder) GetTermForReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermForReportRequest", reflect.TypeOf((*MockArtifactAPI)(nil).GetTermForReportRequest), arg0)
}

// GetTermForReportWithContext mocks base method
func (m *MockArtifactAPI) GetTermForReportWithContext(arg0 context.Context, arg1 *artifact.GetTermForReportInput, arg2 ...request.Option) (*artifact.GetTermForReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTermForReportWithContext", varargs...)
	ret0, _ := ret[0].(*artifact.GetTermForReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermForReportWithContext indicates an expected call of GetTermForReportWithContext
func (mr *MockArtifactAPIMockRecorder) GetTermForReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermForReportWithContext", reflect.TypeOf((*MockArtifactAPI)(nil).GetTermForReportWithContext), varargs...)
}

// ListReports mocks base method
func (m *MockArtifactAPI) ListReports(arg0 *artifact.ListReportsInput) (*artifact.ListReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReports", arg0)
	ret0, _ := ret[0].(*artifact.ListReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReports indicates an expected call of ListReports
func (mr *MockArtifactAPIMockRecorder) ListReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReports", reflect.TypeOf((*MockArtifactAPI)(nil).ListReports), arg0)
}

// ListReportsPages mocks base method
func (m *MockArtifactAPI) ListReportsPages(arg0 *artifact.ListReportsInput, arg1 func(*artifact.ListReportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReportsPages indicates an expected call of ListReportsPages
func (mr *MockArtifactAPIMockRecorder) ListReportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportsPages", reflect.TypeOf((*MockArtifactAPI)(nil).ListReportsPages), arg0, arg1)
}

// ListReportsPagesWithContext mocks base method
func (m *MockArtifactAPI) ListReportsPagesWithContext(arg0 context.Context, arg1 *artifact.ListReportsInput, arg2 func(*artifact.ListReportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReportsPagesWithContext indicates an expected call of ListReportsPagesWithContext
func (mr *MockArtifactAPIMockRecorder) ListReportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportsPagesWithContext", reflect.TypeOf((*MockArtifactAPI)(nil).ListReportsPagesWithContext), varargs...)
}

// ListReportsRequest mocks base method
func (m *MockArtifactAPI) ListReportsRequest(arg0 *artifact.ListReportsInput) (*request.Request, *artifact.ListReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*artifact.ListReportsOutput)
	return ret0, ret1
}

// ListReportsRequest indicates an expected call of ListReportsRequest
func (mr *MockArtifactAPIMockRecorder) ListReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportsRequest", reflect.TypeOf((*MockArtifactAPI)(nil).ListReportsRequest), arg0)
}

// ListReportsWithContext mocks base method
func (m *MockArtifactAPI) ListReportsWithContext(arg0 context.Context, arg1 *artifact.ListReportsInput, arg2 ...request.Option) (*artifact.ListReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReportsWithContext", varargs...)
	ret0, _ := ret[0].(*artifact.ListReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReportsWithContext indicates an expected call of ListReportsWithContext
func (mr *MockArtifactAPIMockRecorder) ListReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportsWithContext", reflect.TypeOf((*MockArtifactAPI)(nil).ListReportsWithContext), varargs...)
}

// PutAccountSettings mocks base method
func (m *MockArtifactAPI) PutAccountSettings(arg0 *artifact.PutAccountSettingsInput) (*artifact.PutAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSettings", arg0)
	ret0, _ := ret[0].(*artifact.PutAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSettings indicates an expected call of PutAccountSettings
func (mr *MockArtifactAPIMockRecorder) PutAccountSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSettings", reflect.TypeOf((*MockArtifactAPI)(nil).PutAccountSettings), arg0)
}

// PutAccountSettingsRequest mocks base method
func (m *MockArtifactAPI) PutAccountSettingsRequest(arg0 *artifact.PutAccountSettingsInput) (*request.Request, *artifact.PutAccountSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*artifact.PutAccountSettingsOutput)
	return ret0, ret1
}

// PutAccountSettingsRequest indicates an expected call of PutAccountSettingsRequest
func (mr *MockArtifactAPIMockRecorder) PutAccountSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSettingsRequest", reflect.TypeOf((*MockArtifactAPI)(nil).PutAccountSettingsRequest), arg0)
}

// PutAccountSettingsWithContext mocks base method
func (m *MockArtifactAPI) PutAccountSettingsWithContext(arg0 context.Context, arg1 *artifact.PutAccountSettingsInput, arg2 ...request.Option) (*artifact.PutAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*artifact.PutAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSettingsWithContext indicates an expected call of PutAccountSettingsWithContext
func (mr *MockArtifactAPIMockRecorder) PutAccountSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSettingsWithContext", reflect.TypeOf((*MockArtifactAPI)(nil).PutAccountSettingsWithContext), varargs...)
}
