// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/kinesisvideowebrtcstorage/kinesisvideowebrtcstorageiface (interfaces: KinesisVideoWebRTCStorageAPI)

// Package kinesisvideowebrtcstoragemock is a generated GoMock package.
package kinesisvideowebrtcstoragemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	kinesisvideowebrtcstorage "github.com/aws/aws-sdk-go/service/kinesisvideowebrtcstorage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKinesisVideoWebRTCStorageAPI is a mock of KinesisVideoWebRTCStorageAPI interface
type MockKinesisVideoWebRTCStorageAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKinesisVideoWebRTCStorageAPIMockRecorder
}

// MockKinesisVideoWebRTCStorageAPIMockRecorder is the mock recorder for MockKinesisVideoWebRTCStorageAPI
type MockKinesisVideoWebRTCStorageAPIMockRecorder struct {
	mock *MockKinesisVideoWebRTCStorageAPI
}

// NewMockKinesisVideoWebRTCStorageAPI creates a new mock instance
func NewMockKinesisVideoWebRTCStorageAPI(ctrl *gomock.Controller) *MockKinesisVideoWebRTCStorageAPI {
	mock := &MockKinesisVideoWebRTCStorageAPI{ctrl: ctrl}
	mock.recorder = &MockKinesisVideoWebRTCStorageAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKinesisVideoWebRTCStorageAPI) EXPECT() *MockKinesisVideoWebRTCStorageAPIMockRecorder {
	return m.recorder
}

// JoinStorageSession mocks base method
func (m *MockKinesisVideoWebRTCStorageAPI) JoinStorageSession(arg0 *kinesisvideowebrtcstorage.JoinStorageSessionInput) (*kinesisvideowebrtcstorage.JoinStorageSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinStorageSession", arg0)
	ret0, _ := ret[0].(*kinesisvideowebrtcstorage.JoinStorageSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinStorageSession indicates an expected call of JoinStorageSession
func (mr *MockKinesisVideoWebRTCStorageAPIMockRecorder) JoinStorageSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinStorageSession", reflect.TypeOf((*MockKinesisVideoWebRTCStorageAPI)(nil).JoinStorageSession), arg0)
}

// JoinStorageSessionAsViewer mocks base method
func (m *MockKinesisVideoWebRTCStorageAPI) JoinStorageSessionAsViewer(arg0 *kinesisvideowebrtcstorage.JoinStorageSessionAsViewerInput) (*kinesisvideowebrtcstorage.JoinStorageSessionAsViewerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinStorageSessionAsViewer", arg0)
	ret0, _ := ret[0].(*kinesisvideowebrtcstorage.JoinStorageSessionAsViewerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinStorageSessionAsViewer indicates an expected call of JoinStorageSessionAsViewer
func (mr *MockKinesisVideoWebRTCStorageAPIMockRecorder) JoinStorageSessionAsViewer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinStorageSessionAsViewer", reflect.TypeOf((*MockKinesisVideoWebRTCStorageAPI)(nil).JoinStorageSessionAsViewer), arg0)
}

// JoinStorageSessionAsViewerRequest mocks base method
func (m *MockKinesisVideoWebRTCStorageAPI) JoinStorageSessionAsViewerRequest(arg0 *kinesisvideowebrtcstorage.JoinStorageSessionAsViewerInput) (*request.Request, *kinesisvideowebrtcstorage.JoinStorageSessionAsViewerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinStorageSessionAsViewerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisvideowebrtcstorage.JoinStorageSessionAsViewerOutput)
	return ret0, ret1
}

// JoinStorageSessionAsViewerRequest indicates an expected call of JoinStorageSessionAsViewerRequest
func (mr *MockKinesisVideoWebRTCStorageAPIMockRecorder) JoinStorageSessionAsViewerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinStorageSessionAsViewerRequest", reflect.TypeOf((*MockKinesisVideoWebRTCStorageAPI)(nil).JoinStorageSessionAsViewerRequest), arg0)
}

// JoinStorageSessionAsViewerWithContext mocks base method
func (m *MockKinesisVideoWebRTCStorageAPI) JoinStorageSessionAsViewerWithContext(arg0 context.Context, arg1 *kinesisvideowebrtcstorage.JoinStorageSessionAsViewerInput, arg2 ...request.Option) (*kinesisvideowebrtcstorage.JoinStorageSessionAsViewerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinStorageSessionAsViewerWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisvideowebrtcstorage.JoinStorageSessionAsViewerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinStorageSessionAsViewerWithContext indicates an expected call of JoinStorageSessionAsViewerWithContext
func (mr *MockKinesisVideoWebRTCStorageAPIMockRecorder) JoinStorageSessionAsViewerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinStorageSessionAsViewerWithContext", reflect.TypeOf((*MockKinesisVideoWebRTCStorageAPI)(nil).JoinStorageSessionAsViewerWithContext), varargs...)
}

// JoinStorageSessionRequest mocks base method
func (m *MockKinesisVideoWebRTCStorageAPI) JoinStorageSessionRequest(arg0 *kinesisvideowebrtcstorage.JoinStorageSessionInput) (*request.Request, *kinesisvideowebrtcstorage.JoinStorageSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinStorageSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesisvideowebrtcstorage.JoinStorageSessionOutput)
	return ret0, ret1
}

// JoinStorageSessionRequest indicates an expected call of JoinStorageSessionRequest
func (mr *MockKinesisVideoWebRTCStorageAPIMockRecorder) JoinStorageSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinStorageSessionRequest", reflect.TypeOf((*MockKinesisVideoWebRTCStorageAPI)(nil).JoinStorageSessionRequest), arg0)
}

// JoinStorageSessionWithContext mocks base method
func (m *MockKinesisVideoWebRTCStorageAPI) JoinStorageSessionWithContext(arg0 context.Context, arg1 *kinesisvideowebrtcstorage.JoinStorageSessionInput, arg2 ...request.Option) (*kinesisvideowebrtcstorage.JoinStorageSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinStorageSessionWithContext", varargs...)
	ret0, _ := ret[0].(*kinesisvideowebrtcstorage.JoinStorageSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinStorageSessionWithContext indicates an expected call of JoinStorageSessionWithContext
func (mr *MockKinesisVideoWebRTCStorageAPIMockRecorder) JoinStorageSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinStorageSessionWithContext", reflect.TypeOf((*MockKinesisVideoWebRTCStorageAPI)(nil).JoinStorageSessionWithContext), varargs...)
}
