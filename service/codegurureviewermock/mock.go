// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/codegurureviewer/codegururevieweriface (interfaces: CodeGuruReviewerAPI)

// Package codegurureviewermock is a generated GoMock package.
package codegurureviewermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	codegurureviewer "github.com/aws/aws-sdk-go/service/codegurureviewer"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCodeGuruReviewerAPI is a mock of CodeGuruReviewerAPI interface
type MockCodeGuruReviewerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCodeGuruReviewerAPIMockRecorder
}

// MockCodeGuruReviewerAPIMockRecorder is the mock recorder for MockCodeGuruReviewerAPI
type MockCodeGuruReviewerAPIMockRecorder struct {
	mock *MockCodeGuruReviewerAPI
}

// NewMockCodeGuruReviewerAPI creates a new mock instance
func NewMockCodeGuruReviewerAPI(ctrl *gomock.Controller) *MockCodeGuruReviewerAPI {
	mock := &MockCodeGuruReviewerAPI{ctrl: ctrl}
	mock.recorder = &MockCodeGuruReviewerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeGuruReviewerAPI) EXPECT() *MockCodeGuruReviewerAPIMockRecorder {
	return m.recorder
}

// AssociateRepository mocks base method
func (m *MockCodeGuruReviewerAPI) AssociateRepository(arg0 *codegurureviewer.AssociateRepositoryInput) (*codegurureviewer.AssociateRepositoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateRepository", arg0)
	ret0, _ := ret[0].(*codegurureviewer.AssociateRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateRepository indicates an expected call of AssociateRepository
func (mr *MockCodeGuruReviewerAPIMockRecorder) AssociateRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateRepository", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).AssociateRepository), arg0)
}

// AssociateRepositoryRequest mocks base method
func (m *MockCodeGuruReviewerAPI) AssociateRepositoryRequest(arg0 *codegurureviewer.AssociateRepositoryInput) (*request.Request, *codegurureviewer.AssociateRepositoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateRepositoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurureviewer.AssociateRepositoryOutput)
	return ret0, ret1
}

// AssociateRepositoryRequest indicates an expected call of AssociateRepositoryRequest
func (mr *MockCodeGuruReviewerAPIMockRecorder) AssociateRepositoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateRepositoryRequest", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).AssociateRepositoryRequest), arg0)
}

// AssociateRepositoryWithContext mocks base method
func (m *MockCodeGuruReviewerAPI) AssociateRepositoryWithContext(arg0 context.Context, arg1 *codegurureviewer.AssociateRepositoryInput, arg2 ...request.Option) (*codegurureviewer.AssociateRepositoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateRepositoryWithContext", varargs...)
	ret0, _ := ret[0].(*codegurureviewer.AssociateRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateRepositoryWithContext indicates an expected call of AssociateRepositoryWithContext
func (mr *MockCodeGuruReviewerAPIMockRecorder) AssociateRepositoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateRepositoryWithContext", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).AssociateRepositoryWithContext), varargs...)
}

// DescribeRepositoryAssociation mocks base method
func (m *MockCodeGuruReviewerAPI) DescribeRepositoryAssociation(arg0 *codegurureviewer.DescribeRepositoryAssociationInput) (*codegurureviewer.DescribeRepositoryAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRepositoryAssociation", arg0)
	ret0, _ := ret[0].(*codegurureviewer.DescribeRepositoryAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRepositoryAssociation indicates an expected call of DescribeRepositoryAssociation
func (mr *MockCodeGuruReviewerAPIMockRecorder) DescribeRepositoryAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositoryAssociation", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).DescribeRepositoryAssociation), arg0)
}

// DescribeRepositoryAssociationRequest mocks base method
func (m *MockCodeGuruReviewerAPI) DescribeRepositoryAssociationRequest(arg0 *codegurureviewer.DescribeRepositoryAssociationInput) (*request.Request, *codegurureviewer.DescribeRepositoryAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRepositoryAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurureviewer.DescribeRepositoryAssociationOutput)
	return ret0, ret1
}

// DescribeRepositoryAssociationRequest indicates an expected call of DescribeRepositoryAssociationRequest
func (mr *MockCodeGuruReviewerAPIMockRecorder) DescribeRepositoryAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositoryAssociationRequest", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).DescribeRepositoryAssociationRequest), arg0)
}

// DescribeRepositoryAssociationWithContext mocks base method
func (m *MockCodeGuruReviewerAPI) DescribeRepositoryAssociationWithContext(arg0 context.Context, arg1 *codegurureviewer.DescribeRepositoryAssociationInput, arg2 ...request.Option) (*codegurureviewer.DescribeRepositoryAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRepositoryAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*codegurureviewer.DescribeRepositoryAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRepositoryAssociationWithContext indicates an expected call of DescribeRepositoryAssociationWithContext
func (mr *MockCodeGuruReviewerAPIMockRecorder) DescribeRepositoryAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositoryAssociationWithContext", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).DescribeRepositoryAssociationWithContext), varargs...)
}

// DisassociateRepository mocks base method
func (m *MockCodeGuruReviewerAPI) DisassociateRepository(arg0 *codegurureviewer.DisassociateRepositoryInput) (*codegurureviewer.DisassociateRepositoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateRepository", arg0)
	ret0, _ := ret[0].(*codegurureviewer.DisassociateRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateRepository indicates an expected call of DisassociateRepository
func (mr *MockCodeGuruReviewerAPIMockRecorder) DisassociateRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRepository", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).DisassociateRepository), arg0)
}

// DisassociateRepositoryRequest mocks base method
func (m *MockCodeGuruReviewerAPI) DisassociateRepositoryRequest(arg0 *codegurureviewer.DisassociateRepositoryInput) (*request.Request, *codegurureviewer.DisassociateRepositoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateRepositoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurureviewer.DisassociateRepositoryOutput)
	return ret0, ret1
}

// DisassociateRepositoryRequest indicates an expected call of DisassociateRepositoryRequest
func (mr *MockCodeGuruReviewerAPIMockRecorder) DisassociateRepositoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRepositoryRequest", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).DisassociateRepositoryRequest), arg0)
}

// DisassociateRepositoryWithContext mocks base method
func (m *MockCodeGuruReviewerAPI) DisassociateRepositoryWithContext(arg0 context.Context, arg1 *codegurureviewer.DisassociateRepositoryInput, arg2 ...request.Option) (*codegurureviewer.DisassociateRepositoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateRepositoryWithContext", varargs...)
	ret0, _ := ret[0].(*codegurureviewer.DisassociateRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateRepositoryWithContext indicates an expected call of DisassociateRepositoryWithContext
func (mr *MockCodeGuruReviewerAPIMockRecorder) DisassociateRepositoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRepositoryWithContext", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).DisassociateRepositoryWithContext), varargs...)
}

// ListRepositoryAssociations mocks base method
func (m *MockCodeGuruReviewerAPI) ListRepositoryAssociations(arg0 *codegurureviewer.ListRepositoryAssociationsInput) (*codegurureviewer.ListRepositoryAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryAssociations", arg0)
	ret0, _ := ret[0].(*codegurureviewer.ListRepositoryAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryAssociations indicates an expected call of ListRepositoryAssociations
func (mr *MockCodeGuruReviewerAPIMockRecorder) ListRepositoryAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryAssociations", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).ListRepositoryAssociations), arg0)
}

// ListRepositoryAssociationsPages mocks base method
func (m *MockCodeGuruReviewerAPI) ListRepositoryAssociationsPages(arg0 *codegurureviewer.ListRepositoryAssociationsInput, arg1 func(*codegurureviewer.ListRepositoryAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRepositoryAssociationsPages indicates an expected call of ListRepositoryAssociationsPages
func (mr *MockCodeGuruReviewerAPIMockRecorder) ListRepositoryAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryAssociationsPages", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).ListRepositoryAssociationsPages), arg0, arg1)
}

// ListRepositoryAssociationsPagesWithContext mocks base method
func (m *MockCodeGuruReviewerAPI) ListRepositoryAssociationsPagesWithContext(arg0 context.Context, arg1 *codegurureviewer.ListRepositoryAssociationsInput, arg2 func(*codegurureviewer.ListRepositoryAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositoryAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRepositoryAssociationsPagesWithContext indicates an expected call of ListRepositoryAssociationsPagesWithContext
func (mr *MockCodeGuruReviewerAPIMockRecorder) ListRepositoryAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryAssociationsPagesWithContext", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).ListRepositoryAssociationsPagesWithContext), varargs...)
}

// ListRepositoryAssociationsRequest mocks base method
func (m *MockCodeGuruReviewerAPI) ListRepositoryAssociationsRequest(arg0 *codegurureviewer.ListRepositoryAssociationsInput) (*request.Request, *codegurureviewer.ListRepositoryAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurureviewer.ListRepositoryAssociationsOutput)
	return ret0, ret1
}

// ListRepositoryAssociationsRequest indicates an expected call of ListRepositoryAssociationsRequest
func (mr *MockCodeGuruReviewerAPIMockRecorder) ListRepositoryAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryAssociationsRequest", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).ListRepositoryAssociationsRequest), arg0)
}

// ListRepositoryAssociationsWithContext mocks base method
func (m *MockCodeGuruReviewerAPI) ListRepositoryAssociationsWithContext(arg0 context.Context, arg1 *codegurureviewer.ListRepositoryAssociationsInput, arg2 ...request.Option) (*codegurureviewer.ListRepositoryAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositoryAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*codegurureviewer.ListRepositoryAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryAssociationsWithContext indicates an expected call of ListRepositoryAssociationsWithContext
func (mr *MockCodeGuruReviewerAPIMockRecorder) ListRepositoryAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryAssociationsWithContext", reflect.TypeOf((*MockCodeGuruReviewerAPI)(nil).ListRepositoryAssociationsWithContext), varargs...)
}
