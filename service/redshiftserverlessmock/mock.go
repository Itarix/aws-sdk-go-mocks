// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/redshiftserverless/redshiftserverlessiface (interfaces: RedshiftServerlessAPI)

// Package redshiftserverlessmock is a generated GoMock package.
package redshiftserverlessmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	redshiftserverless "github.com/aws/aws-sdk-go/service/redshiftserverless"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRedshiftServerlessAPI is a mock of RedshiftServerlessAPI interface
type MockRedshiftServerlessAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRedshiftServerlessAPIMockRecorder
}

// MockRedshiftServerlessAPIMockRecorder is the mock recorder for MockRedshiftServerlessAPI
type MockRedshiftServerlessAPIMockRecorder struct {
	mock *MockRedshiftServerlessAPI
}

// NewMockRedshiftServerlessAPI creates a new mock instance
func NewMockRedshiftServerlessAPI(ctrl *gomock.Controller) *MockRedshiftServerlessAPI {
	mock := &MockRedshiftServerlessAPI{ctrl: ctrl}
	mock.recorder = &MockRedshiftServerlessAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedshiftServerlessAPI) EXPECT() *MockRedshiftServerlessAPIMockRecorder {
	return m.recorder
}

// ConvertRecoveryPointToSnapshot mocks base method
func (m *MockRedshiftServerlessAPI) ConvertRecoveryPointToSnapshot(arg0 *redshiftserverless.ConvertRecoveryPointToSnapshotInput) (*redshiftserverless.ConvertRecoveryPointToSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertRecoveryPointToSnapshot", arg0)
	ret0, _ := ret[0].(*redshiftserverless.ConvertRecoveryPointToSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertRecoveryPointToSnapshot indicates an expected call of ConvertRecoveryPointToSnapshot
func (mr *MockRedshiftServerlessAPIMockRecorder) ConvertRecoveryPointToSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertRecoveryPointToSnapshot", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ConvertRecoveryPointToSnapshot), arg0)
}

// ConvertRecoveryPointToSnapshotRequest mocks base method
func (m *MockRedshiftServerlessAPI) ConvertRecoveryPointToSnapshotRequest(arg0 *redshiftserverless.ConvertRecoveryPointToSnapshotInput) (*request.Request, *redshiftserverless.ConvertRecoveryPointToSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertRecoveryPointToSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.ConvertRecoveryPointToSnapshotOutput)
	return ret0, ret1
}

// ConvertRecoveryPointToSnapshotRequest indicates an expected call of ConvertRecoveryPointToSnapshotRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) ConvertRecoveryPointToSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertRecoveryPointToSnapshotRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ConvertRecoveryPointToSnapshotRequest), arg0)
}

// ConvertRecoveryPointToSnapshotWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ConvertRecoveryPointToSnapshotWithContext(arg0 context.Context, arg1 *redshiftserverless.ConvertRecoveryPointToSnapshotInput, arg2 ...request.Option) (*redshiftserverless.ConvertRecoveryPointToSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConvertRecoveryPointToSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ConvertRecoveryPointToSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertRecoveryPointToSnapshotWithContext indicates an expected call of ConvertRecoveryPointToSnapshotWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ConvertRecoveryPointToSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertRecoveryPointToSnapshotWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ConvertRecoveryPointToSnapshotWithContext), varargs...)
}

// CreateCustomDomainAssociation mocks base method
func (m *MockRedshiftServerlessAPI) CreateCustomDomainAssociation(arg0 *redshiftserverless.CreateCustomDomainAssociationInput) (*redshiftserverless.CreateCustomDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomDomainAssociation", arg0)
	ret0, _ := ret[0].(*redshiftserverless.CreateCustomDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomDomainAssociation indicates an expected call of CreateCustomDomainAssociation
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateCustomDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomDomainAssociation", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateCustomDomainAssociation), arg0)
}

// CreateCustomDomainAssociationRequest mocks base method
func (m *MockRedshiftServerlessAPI) CreateCustomDomainAssociationRequest(arg0 *redshiftserverless.CreateCustomDomainAssociationInput) (*request.Request, *redshiftserverless.CreateCustomDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.CreateCustomDomainAssociationOutput)
	return ret0, ret1
}

// CreateCustomDomainAssociationRequest indicates an expected call of CreateCustomDomainAssociationRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateCustomDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomDomainAssociationRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateCustomDomainAssociationRequest), arg0)
}

// CreateCustomDomainAssociationWithContext mocks base method
func (m *MockRedshiftServerlessAPI) CreateCustomDomainAssociationWithContext(arg0 context.Context, arg1 *redshiftserverless.CreateCustomDomainAssociationInput, arg2 ...request.Option) (*redshiftserverless.CreateCustomDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.CreateCustomDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomDomainAssociationWithContext indicates an expected call of CreateCustomDomainAssociationWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateCustomDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomDomainAssociationWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateCustomDomainAssociationWithContext), varargs...)
}

// CreateEndpointAccess mocks base method
func (m *MockRedshiftServerlessAPI) CreateEndpointAccess(arg0 *redshiftserverless.CreateEndpointAccessInput) (*redshiftserverless.CreateEndpointAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpointAccess", arg0)
	ret0, _ := ret[0].(*redshiftserverless.CreateEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpointAccess indicates an expected call of CreateEndpointAccess
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateEndpointAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointAccess", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateEndpointAccess), arg0)
}

// CreateEndpointAccessRequest mocks base method
func (m *MockRedshiftServerlessAPI) CreateEndpointAccessRequest(arg0 *redshiftserverless.CreateEndpointAccessInput) (*request.Request, *redshiftserverless.CreateEndpointAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpointAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.CreateEndpointAccessOutput)
	return ret0, ret1
}

// CreateEndpointAccessRequest indicates an expected call of CreateEndpointAccessRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateEndpointAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointAccessRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateEndpointAccessRequest), arg0)
}

// CreateEndpointAccessWithContext mocks base method
func (m *MockRedshiftServerlessAPI) CreateEndpointAccessWithContext(arg0 context.Context, arg1 *redshiftserverless.CreateEndpointAccessInput, arg2 ...request.Option) (*redshiftserverless.CreateEndpointAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEndpointAccessWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.CreateEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpointAccessWithContext indicates an expected call of CreateEndpointAccessWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateEndpointAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointAccessWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateEndpointAccessWithContext), varargs...)
}

// CreateNamespace mocks base method
func (m *MockRedshiftServerlessAPI) CreateNamespace(arg0 *redshiftserverless.CreateNamespaceInput) (*redshiftserverless.CreateNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", arg0)
	ret0, _ := ret[0].(*redshiftserverless.CreateNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateNamespace), arg0)
}

// CreateNamespaceRequest mocks base method
func (m *MockRedshiftServerlessAPI) CreateNamespaceRequest(arg0 *redshiftserverless.CreateNamespaceInput) (*request.Request, *redshiftserverless.CreateNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.CreateNamespaceOutput)
	return ret0, ret1
}

// CreateNamespaceRequest indicates an expected call of CreateNamespaceRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespaceRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateNamespaceRequest), arg0)
}

// CreateNamespaceWithContext mocks base method
func (m *MockRedshiftServerlessAPI) CreateNamespaceWithContext(arg0 context.Context, arg1 *redshiftserverless.CreateNamespaceInput, arg2 ...request.Option) (*redshiftserverless.CreateNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.CreateNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespaceWithContext indicates an expected call of CreateNamespaceWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespaceWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateNamespaceWithContext), varargs...)
}

// CreateSnapshot mocks base method
func (m *MockRedshiftServerlessAPI) CreateSnapshot(arg0 *redshiftserverless.CreateSnapshotInput) (*redshiftserverless.CreateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0)
	ret0, _ := ret[0].(*redshiftserverless.CreateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateSnapshot), arg0)
}

// CreateSnapshotRequest mocks base method
func (m *MockRedshiftServerlessAPI) CreateSnapshotRequest(arg0 *redshiftserverless.CreateSnapshotInput) (*request.Request, *redshiftserverless.CreateSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.CreateSnapshotOutput)
	return ret0, ret1
}

// CreateSnapshotRequest indicates an expected call of CreateSnapshotRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateSnapshotRequest), arg0)
}

// CreateSnapshotWithContext mocks base method
func (m *MockRedshiftServerlessAPI) CreateSnapshotWithContext(arg0 context.Context, arg1 *redshiftserverless.CreateSnapshotInput, arg2 ...request.Option) (*redshiftserverless.CreateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.CreateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotWithContext indicates an expected call of CreateSnapshotWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateSnapshotWithContext), varargs...)
}

// CreateUsageLimit mocks base method
func (m *MockRedshiftServerlessAPI) CreateUsageLimit(arg0 *redshiftserverless.CreateUsageLimitInput) (*redshiftserverless.CreateUsageLimitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsageLimit", arg0)
	ret0, _ := ret[0].(*redshiftserverless.CreateUsageLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsageLimit indicates an expected call of CreateUsageLimit
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateUsageLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageLimit", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateUsageLimit), arg0)
}

// CreateUsageLimitRequest mocks base method
func (m *MockRedshiftServerlessAPI) CreateUsageLimitRequest(arg0 *redshiftserverless.CreateUsageLimitInput) (*request.Request, *redshiftserverless.CreateUsageLimitOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsageLimitRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.CreateUsageLimitOutput)
	return ret0, ret1
}

// CreateUsageLimitRequest indicates an expected call of CreateUsageLimitRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateUsageLimitRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageLimitRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateUsageLimitRequest), arg0)
}

// CreateUsageLimitWithContext mocks base method
func (m *MockRedshiftServerlessAPI) CreateUsageLimitWithContext(arg0 context.Context, arg1 *redshiftserverless.CreateUsageLimitInput, arg2 ...request.Option) (*redshiftserverless.CreateUsageLimitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUsageLimitWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.CreateUsageLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsageLimitWithContext indicates an expected call of CreateUsageLimitWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateUsageLimitWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageLimitWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateUsageLimitWithContext), varargs...)
}

// CreateWorkgroup mocks base method
func (m *MockRedshiftServerlessAPI) CreateWorkgroup(arg0 *redshiftserverless.CreateWorkgroupInput) (*redshiftserverless.CreateWorkgroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkgroup", arg0)
	ret0, _ := ret[0].(*redshiftserverless.CreateWorkgroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkgroup indicates an expected call of CreateWorkgroup
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateWorkgroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkgroup", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateWorkgroup), arg0)
}

// CreateWorkgroupRequest mocks base method
func (m *MockRedshiftServerlessAPI) CreateWorkgroupRequest(arg0 *redshiftserverless.CreateWorkgroupInput) (*request.Request, *redshiftserverless.CreateWorkgroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkgroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.CreateWorkgroupOutput)
	return ret0, ret1
}

// CreateWorkgroupRequest indicates an expected call of CreateWorkgroupRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateWorkgroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkgroupRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateWorkgroupRequest), arg0)
}

// CreateWorkgroupWithContext mocks base method
func (m *MockRedshiftServerlessAPI) CreateWorkgroupWithContext(arg0 context.Context, arg1 *redshiftserverless.CreateWorkgroupInput, arg2 ...request.Option) (*redshiftserverless.CreateWorkgroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkgroupWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.CreateWorkgroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkgroupWithContext indicates an expected call of CreateWorkgroupWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) CreateWorkgroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkgroupWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).CreateWorkgroupWithContext), varargs...)
}

// DeleteCustomDomainAssociation mocks base method
func (m *MockRedshiftServerlessAPI) DeleteCustomDomainAssociation(arg0 *redshiftserverless.DeleteCustomDomainAssociationInput) (*redshiftserverless.DeleteCustomDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomDomainAssociation", arg0)
	ret0, _ := ret[0].(*redshiftserverless.DeleteCustomDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomDomainAssociation indicates an expected call of DeleteCustomDomainAssociation
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteCustomDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomDomainAssociation", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteCustomDomainAssociation), arg0)
}

// DeleteCustomDomainAssociationRequest mocks base method
func (m *MockRedshiftServerlessAPI) DeleteCustomDomainAssociationRequest(arg0 *redshiftserverless.DeleteCustomDomainAssociationInput) (*request.Request, *redshiftserverless.DeleteCustomDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.DeleteCustomDomainAssociationOutput)
	return ret0, ret1
}

// DeleteCustomDomainAssociationRequest indicates an expected call of DeleteCustomDomainAssociationRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteCustomDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomDomainAssociationRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteCustomDomainAssociationRequest), arg0)
}

// DeleteCustomDomainAssociationWithContext mocks base method
func (m *MockRedshiftServerlessAPI) DeleteCustomDomainAssociationWithContext(arg0 context.Context, arg1 *redshiftserverless.DeleteCustomDomainAssociationInput, arg2 ...request.Option) (*redshiftserverless.DeleteCustomDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.DeleteCustomDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomDomainAssociationWithContext indicates an expected call of DeleteCustomDomainAssociationWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteCustomDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomDomainAssociationWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteCustomDomainAssociationWithContext), varargs...)
}

// DeleteEndpointAccess mocks base method
func (m *MockRedshiftServerlessAPI) DeleteEndpointAccess(arg0 *redshiftserverless.DeleteEndpointAccessInput) (*redshiftserverless.DeleteEndpointAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointAccess", arg0)
	ret0, _ := ret[0].(*redshiftserverless.DeleteEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointAccess indicates an expected call of DeleteEndpointAccess
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteEndpointAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointAccess", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteEndpointAccess), arg0)
}

// DeleteEndpointAccessRequest mocks base method
func (m *MockRedshiftServerlessAPI) DeleteEndpointAccessRequest(arg0 *redshiftserverless.DeleteEndpointAccessInput) (*request.Request, *redshiftserverless.DeleteEndpointAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.DeleteEndpointAccessOutput)
	return ret0, ret1
}

// DeleteEndpointAccessRequest indicates an expected call of DeleteEndpointAccessRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteEndpointAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointAccessRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteEndpointAccessRequest), arg0)
}

// DeleteEndpointAccessWithContext mocks base method
func (m *MockRedshiftServerlessAPI) DeleteEndpointAccessWithContext(arg0 context.Context, arg1 *redshiftserverless.DeleteEndpointAccessInput, arg2 ...request.Option) (*redshiftserverless.DeleteEndpointAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEndpointAccessWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.DeleteEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointAccessWithContext indicates an expected call of DeleteEndpointAccessWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteEndpointAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointAccessWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteEndpointAccessWithContext), varargs...)
}

// DeleteNamespace mocks base method
func (m *MockRedshiftServerlessAPI) DeleteNamespace(arg0 *redshiftserverless.DeleteNamespaceInput) (*redshiftserverless.DeleteNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", arg0)
	ret0, _ := ret[0].(*redshiftserverless.DeleteNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespace indicates an expected call of DeleteNamespace
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteNamespace), arg0)
}

// DeleteNamespaceRequest mocks base method
func (m *MockRedshiftServerlessAPI) DeleteNamespaceRequest(arg0 *redshiftserverless.DeleteNamespaceInput) (*request.Request, *redshiftserverless.DeleteNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.DeleteNamespaceOutput)
	return ret0, ret1
}

// DeleteNamespaceRequest indicates an expected call of DeleteNamespaceRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteNamespaceRequest), arg0)
}

// DeleteNamespaceWithContext mocks base method
func (m *MockRedshiftServerlessAPI) DeleteNamespaceWithContext(arg0 context.Context, arg1 *redshiftserverless.DeleteNamespaceInput, arg2 ...request.Option) (*redshiftserverless.DeleteNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.DeleteNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespaceWithContext indicates an expected call of DeleteNamespaceWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteNamespaceWithContext), varargs...)
}

// DeleteResourcePolicy mocks base method
func (m *MockRedshiftServerlessAPI) DeleteResourcePolicy(arg0 *redshiftserverless.DeleteResourcePolicyInput) (*redshiftserverless.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", arg0)
	ret0, _ := ret[0].(*redshiftserverless.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteResourcePolicy), arg0)
}

// DeleteResourcePolicyRequest mocks base method
func (m *MockRedshiftServerlessAPI) DeleteResourcePolicyRequest(arg0 *redshiftserverless.DeleteResourcePolicyInput) (*request.Request, *redshiftserverless.DeleteResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.DeleteResourcePolicyOutput)
	return ret0, ret1
}

// DeleteResourcePolicyRequest indicates an expected call of DeleteResourcePolicyRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteResourcePolicyRequest), arg0)
}

// DeleteResourcePolicyWithContext mocks base method
func (m *MockRedshiftServerlessAPI) DeleteResourcePolicyWithContext(arg0 context.Context, arg1 *redshiftserverless.DeleteResourcePolicyInput, arg2 ...request.Option) (*redshiftserverless.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyWithContext indicates an expected call of DeleteResourcePolicyWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteResourcePolicyWithContext), varargs...)
}

// DeleteSnapshot mocks base method
func (m *MockRedshiftServerlessAPI) DeleteSnapshot(arg0 *redshiftserverless.DeleteSnapshotInput) (*redshiftserverless.DeleteSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0)
	ret0, _ := ret[0].(*redshiftserverless.DeleteSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteSnapshot), arg0)
}

// DeleteSnapshotRequest mocks base method
func (m *MockRedshiftServerlessAPI) DeleteSnapshotRequest(arg0 *redshiftserverless.DeleteSnapshotInput) (*request.Request, *redshiftserverless.DeleteSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.DeleteSnapshotOutput)
	return ret0, ret1
}

// DeleteSnapshotRequest indicates an expected call of DeleteSnapshotRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteSnapshotRequest), arg0)
}

// DeleteSnapshotWithContext mocks base method
func (m *MockRedshiftServerlessAPI) DeleteSnapshotWithContext(arg0 context.Context, arg1 *redshiftserverless.DeleteSnapshotInput, arg2 ...request.Option) (*redshiftserverless.DeleteSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.DeleteSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshotWithContext indicates an expected call of DeleteSnapshotWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteSnapshotWithContext), varargs...)
}

// DeleteUsageLimit mocks base method
func (m *MockRedshiftServerlessAPI) DeleteUsageLimit(arg0 *redshiftserverless.DeleteUsageLimitInput) (*redshiftserverless.DeleteUsageLimitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsageLimit", arg0)
	ret0, _ := ret[0].(*redshiftserverless.DeleteUsageLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsageLimit indicates an expected call of DeleteUsageLimit
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteUsageLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsageLimit", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteUsageLimit), arg0)
}

// DeleteUsageLimitRequest mocks base method
func (m *MockRedshiftServerlessAPI) DeleteUsageLimitRequest(arg0 *redshiftserverless.DeleteUsageLimitInput) (*request.Request, *redshiftserverless.DeleteUsageLimitOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsageLimitRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.DeleteUsageLimitOutput)
	return ret0, ret1
}

// DeleteUsageLimitRequest indicates an expected call of DeleteUsageLimitRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteUsageLimitRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsageLimitRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteUsageLimitRequest), arg0)
}

// DeleteUsageLimitWithContext mocks base method
func (m *MockRedshiftServerlessAPI) DeleteUsageLimitWithContext(arg0 context.Context, arg1 *redshiftserverless.DeleteUsageLimitInput, arg2 ...request.Option) (*redshiftserverless.DeleteUsageLimitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUsageLimitWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.DeleteUsageLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsageLimitWithContext indicates an expected call of DeleteUsageLimitWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteUsageLimitWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsageLimitWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteUsageLimitWithContext), varargs...)
}

// DeleteWorkgroup mocks base method
func (m *MockRedshiftServerlessAPI) DeleteWorkgroup(arg0 *redshiftserverless.DeleteWorkgroupInput) (*redshiftserverless.DeleteWorkgroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkgroup", arg0)
	ret0, _ := ret[0].(*redshiftserverless.DeleteWorkgroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkgroup indicates an expected call of DeleteWorkgroup
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteWorkgroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkgroup", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteWorkgroup), arg0)
}

// DeleteWorkgroupRequest mocks base method
func (m *MockRedshiftServerlessAPI) DeleteWorkgroupRequest(arg0 *redshiftserverless.DeleteWorkgroupInput) (*request.Request, *redshiftserverless.DeleteWorkgroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkgroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.DeleteWorkgroupOutput)
	return ret0, ret1
}

// DeleteWorkgroupRequest indicates an expected call of DeleteWorkgroupRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteWorkgroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkgroupRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteWorkgroupRequest), arg0)
}

// DeleteWorkgroupWithContext mocks base method
func (m *MockRedshiftServerlessAPI) DeleteWorkgroupWithContext(arg0 context.Context, arg1 *redshiftserverless.DeleteWorkgroupInput, arg2 ...request.Option) (*redshiftserverless.DeleteWorkgroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkgroupWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.DeleteWorkgroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkgroupWithContext indicates an expected call of DeleteWorkgroupWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) DeleteWorkgroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkgroupWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).DeleteWorkgroupWithContext), varargs...)
}

// GetCredentials mocks base method
func (m *MockRedshiftServerlessAPI) GetCredentials(arg0 *redshiftserverless.GetCredentialsInput) (*redshiftserverless.GetCredentialsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", arg0)
	ret0, _ := ret[0].(*redshiftserverless.GetCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials
func (mr *MockRedshiftServerlessAPIMockRecorder) GetCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetCredentials), arg0)
}

// GetCredentialsRequest mocks base method
func (m *MockRedshiftServerlessAPI) GetCredentialsRequest(arg0 *redshiftserverless.GetCredentialsInput) (*request.Request, *redshiftserverless.GetCredentialsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.GetCredentialsOutput)
	return ret0, ret1
}

// GetCredentialsRequest indicates an expected call of GetCredentialsRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) GetCredentialsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetCredentialsRequest), arg0)
}

// GetCredentialsWithContext mocks base method
func (m *MockRedshiftServerlessAPI) GetCredentialsWithContext(arg0 context.Context, arg1 *redshiftserverless.GetCredentialsInput, arg2 ...request.Option) (*redshiftserverless.GetCredentialsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredentialsWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.GetCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsWithContext indicates an expected call of GetCredentialsWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) GetCredentialsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetCredentialsWithContext), varargs...)
}

// GetCustomDomainAssociation mocks base method
func (m *MockRedshiftServerlessAPI) GetCustomDomainAssociation(arg0 *redshiftserverless.GetCustomDomainAssociationInput) (*redshiftserverless.GetCustomDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomDomainAssociation", arg0)
	ret0, _ := ret[0].(*redshiftserverless.GetCustomDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomDomainAssociation indicates an expected call of GetCustomDomainAssociation
func (mr *MockRedshiftServerlessAPIMockRecorder) GetCustomDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomDomainAssociation", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetCustomDomainAssociation), arg0)
}

// GetCustomDomainAssociationRequest mocks base method
func (m *MockRedshiftServerlessAPI) GetCustomDomainAssociationRequest(arg0 *redshiftserverless.GetCustomDomainAssociationInput) (*request.Request, *redshiftserverless.GetCustomDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.GetCustomDomainAssociationOutput)
	return ret0, ret1
}

// GetCustomDomainAssociationRequest indicates an expected call of GetCustomDomainAssociationRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) GetCustomDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomDomainAssociationRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetCustomDomainAssociationRequest), arg0)
}

// GetCustomDomainAssociationWithContext mocks base method
func (m *MockRedshiftServerlessAPI) GetCustomDomainAssociationWithContext(arg0 context.Context, arg1 *redshiftserverless.GetCustomDomainAssociationInput, arg2 ...request.Option) (*redshiftserverless.GetCustomDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.GetCustomDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomDomainAssociationWithContext indicates an expected call of GetCustomDomainAssociationWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) GetCustomDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomDomainAssociationWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetCustomDomainAssociationWithContext), varargs...)
}

// GetEndpointAccess mocks base method
func (m *MockRedshiftServerlessAPI) GetEndpointAccess(arg0 *redshiftserverless.GetEndpointAccessInput) (*redshiftserverless.GetEndpointAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointAccess", arg0)
	ret0, _ := ret[0].(*redshiftserverless.GetEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointAccess indicates an expected call of GetEndpointAccess
func (mr *MockRedshiftServerlessAPIMockRecorder) GetEndpointAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointAccess", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetEndpointAccess), arg0)
}

// GetEndpointAccessRequest mocks base method
func (m *MockRedshiftServerlessAPI) GetEndpointAccessRequest(arg0 *redshiftserverless.GetEndpointAccessInput) (*request.Request, *redshiftserverless.GetEndpointAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.GetEndpointAccessOutput)
	return ret0, ret1
}

// GetEndpointAccessRequest indicates an expected call of GetEndpointAccessRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) GetEndpointAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointAccessRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetEndpointAccessRequest), arg0)
}

// GetEndpointAccessWithContext mocks base method
func (m *MockRedshiftServerlessAPI) GetEndpointAccessWithContext(arg0 context.Context, arg1 *redshiftserverless.GetEndpointAccessInput, arg2 ...request.Option) (*redshiftserverless.GetEndpointAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEndpointAccessWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.GetEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointAccessWithContext indicates an expected call of GetEndpointAccessWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) GetEndpointAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointAccessWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetEndpointAccessWithContext), varargs...)
}

// GetNamespace mocks base method
func (m *MockRedshiftServerlessAPI) GetNamespace(arg0 *redshiftserverless.GetNamespaceInput) (*redshiftserverless.GetNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0)
	ret0, _ := ret[0].(*redshiftserverless.GetNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockRedshiftServerlessAPIMockRecorder) GetNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetNamespace), arg0)
}

// GetNamespaceRequest mocks base method
func (m *MockRedshiftServerlessAPI) GetNamespaceRequest(arg0 *redshiftserverless.GetNamespaceInput) (*request.Request, *redshiftserverless.GetNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.GetNamespaceOutput)
	return ret0, ret1
}

// GetNamespaceRequest indicates an expected call of GetNamespaceRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) GetNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetNamespaceRequest), arg0)
}

// GetNamespaceWithContext mocks base method
func (m *MockRedshiftServerlessAPI) GetNamespaceWithContext(arg0 context.Context, arg1 *redshiftserverless.GetNamespaceInput, arg2 ...request.Option) (*redshiftserverless.GetNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.GetNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceWithContext indicates an expected call of GetNamespaceWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) GetNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetNamespaceWithContext), varargs...)
}

// GetRecoveryPoint mocks base method
func (m *MockRedshiftServerlessAPI) GetRecoveryPoint(arg0 *redshiftserverless.GetRecoveryPointInput) (*redshiftserverless.GetRecoveryPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryPoint", arg0)
	ret0, _ := ret[0].(*redshiftserverless.GetRecoveryPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryPoint indicates an expected call of GetRecoveryPoint
func (mr *MockRedshiftServerlessAPIMockRecorder) GetRecoveryPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryPoint", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetRecoveryPoint), arg0)
}

// GetRecoveryPointRequest mocks base method
func (m *MockRedshiftServerlessAPI) GetRecoveryPointRequest(arg0 *redshiftserverless.GetRecoveryPointInput) (*request.Request, *redshiftserverless.GetRecoveryPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.GetRecoveryPointOutput)
	return ret0, ret1
}

// GetRecoveryPointRequest indicates an expected call of GetRecoveryPointRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) GetRecoveryPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryPointRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetRecoveryPointRequest), arg0)
}

// GetRecoveryPointWithContext mocks base method
func (m *MockRedshiftServerlessAPI) GetRecoveryPointWithContext(arg0 context.Context, arg1 *redshiftserverless.GetRecoveryPointInput, arg2 ...request.Option) (*redshiftserverless.GetRecoveryPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecoveryPointWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.GetRecoveryPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryPointWithContext indicates an expected call of GetRecoveryPointWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) GetRecoveryPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryPointWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetRecoveryPointWithContext), varargs...)
}

// GetResourcePolicy mocks base method
func (m *MockRedshiftServerlessAPI) GetResourcePolicy(arg0 *redshiftserverless.GetResourcePolicyInput) (*redshiftserverless.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicy", arg0)
	ret0, _ := ret[0].(*redshiftserverless.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy
func (mr *MockRedshiftServerlessAPIMockRecorder) GetResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetResourcePolicy), arg0)
}

// GetResourcePolicyRequest mocks base method
func (m *MockRedshiftServerlessAPI) GetResourcePolicyRequest(arg0 *redshiftserverless.GetResourcePolicyInput) (*request.Request, *redshiftserverless.GetResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.GetResourcePolicyOutput)
	return ret0, ret1
}

// GetResourcePolicyRequest indicates an expected call of GetResourcePolicyRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) GetResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetResourcePolicyRequest), arg0)
}

// GetResourcePolicyWithContext mocks base method
func (m *MockRedshiftServerlessAPI) GetResourcePolicyWithContext(arg0 context.Context, arg1 *redshiftserverless.GetResourcePolicyInput, arg2 ...request.Option) (*redshiftserverless.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicyWithContext indicates an expected call of GetResourcePolicyWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) GetResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetResourcePolicyWithContext), varargs...)
}

// GetSnapshot mocks base method
func (m *MockRedshiftServerlessAPI) GetSnapshot(arg0 *redshiftserverless.GetSnapshotInput) (*redshiftserverless.GetSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", arg0)
	ret0, _ := ret[0].(*redshiftserverless.GetSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot
func (mr *MockRedshiftServerlessAPIMockRecorder) GetSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetSnapshot), arg0)
}

// GetSnapshotRequest mocks base method
func (m *MockRedshiftServerlessAPI) GetSnapshotRequest(arg0 *redshiftserverless.GetSnapshotInput) (*request.Request, *redshiftserverless.GetSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.GetSnapshotOutput)
	return ret0, ret1
}

// GetSnapshotRequest indicates an expected call of GetSnapshotRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) GetSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetSnapshotRequest), arg0)
}

// GetSnapshotWithContext mocks base method
func (m *MockRedshiftServerlessAPI) GetSnapshotWithContext(arg0 context.Context, arg1 *redshiftserverless.GetSnapshotInput, arg2 ...request.Option) (*redshiftserverless.GetSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.GetSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotWithContext indicates an expected call of GetSnapshotWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) GetSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetSnapshotWithContext), varargs...)
}

// GetTableRestoreStatus mocks base method
func (m *MockRedshiftServerlessAPI) GetTableRestoreStatus(arg0 *redshiftserverless.GetTableRestoreStatusInput) (*redshiftserverless.GetTableRestoreStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableRestoreStatus", arg0)
	ret0, _ := ret[0].(*redshiftserverless.GetTableRestoreStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableRestoreStatus indicates an expected call of GetTableRestoreStatus
func (mr *MockRedshiftServerlessAPIMockRecorder) GetTableRestoreStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableRestoreStatus", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetTableRestoreStatus), arg0)
}

// GetTableRestoreStatusRequest mocks base method
func (m *MockRedshiftServerlessAPI) GetTableRestoreStatusRequest(arg0 *redshiftserverless.GetTableRestoreStatusInput) (*request.Request, *redshiftserverless.GetTableRestoreStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableRestoreStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.GetTableRestoreStatusOutput)
	return ret0, ret1
}

// GetTableRestoreStatusRequest indicates an expected call of GetTableRestoreStatusRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) GetTableRestoreStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableRestoreStatusRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetTableRestoreStatusRequest), arg0)
}

// GetTableRestoreStatusWithContext mocks base method
func (m *MockRedshiftServerlessAPI) GetTableRestoreStatusWithContext(arg0 context.Context, arg1 *redshiftserverless.GetTableRestoreStatusInput, arg2 ...request.Option) (*redshiftserverless.GetTableRestoreStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableRestoreStatusWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.GetTableRestoreStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableRestoreStatusWithContext indicates an expected call of GetTableRestoreStatusWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) GetTableRestoreStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableRestoreStatusWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetTableRestoreStatusWithContext), varargs...)
}

// GetUsageLimit mocks base method
func (m *MockRedshiftServerlessAPI) GetUsageLimit(arg0 *redshiftserverless.GetUsageLimitInput) (*redshiftserverless.GetUsageLimitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsageLimit", arg0)
	ret0, _ := ret[0].(*redshiftserverless.GetUsageLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsageLimit indicates an expected call of GetUsageLimit
func (mr *MockRedshiftServerlessAPIMockRecorder) GetUsageLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageLimit", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetUsageLimit), arg0)
}

// GetUsageLimitRequest mocks base method
func (m *MockRedshiftServerlessAPI) GetUsageLimitRequest(arg0 *redshiftserverless.GetUsageLimitInput) (*request.Request, *redshiftserverless.GetUsageLimitOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsageLimitRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.GetUsageLimitOutput)
	return ret0, ret1
}

// GetUsageLimitRequest indicates an expected call of GetUsageLimitRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) GetUsageLimitRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageLimitRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetUsageLimitRequest), arg0)
}

// GetUsageLimitWithContext mocks base method
func (m *MockRedshiftServerlessAPI) GetUsageLimitWithContext(arg0 context.Context, arg1 *redshiftserverless.GetUsageLimitInput, arg2 ...request.Option) (*redshiftserverless.GetUsageLimitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsageLimitWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.GetUsageLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsageLimitWithContext indicates an expected call of GetUsageLimitWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) GetUsageLimitWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageLimitWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetUsageLimitWithContext), varargs...)
}

// GetWorkgroup mocks base method
func (m *MockRedshiftServerlessAPI) GetWorkgroup(arg0 *redshiftserverless.GetWorkgroupInput) (*redshiftserverless.GetWorkgroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkgroup", arg0)
	ret0, _ := ret[0].(*redshiftserverless.GetWorkgroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkgroup indicates an expected call of GetWorkgroup
func (mr *MockRedshiftServerlessAPIMockRecorder) GetWorkgroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkgroup", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetWorkgroup), arg0)
}

// GetWorkgroupRequest mocks base method
func (m *MockRedshiftServerlessAPI) GetWorkgroupRequest(arg0 *redshiftserverless.GetWorkgroupInput) (*request.Request, *redshiftserverless.GetWorkgroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkgroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.GetWorkgroupOutput)
	return ret0, ret1
}

// GetWorkgroupRequest indicates an expected call of GetWorkgroupRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) GetWorkgroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkgroupRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetWorkgroupRequest), arg0)
}

// GetWorkgroupWithContext mocks base method
func (m *MockRedshiftServerlessAPI) GetWorkgroupWithContext(arg0 context.Context, arg1 *redshiftserverless.GetWorkgroupInput, arg2 ...request.Option) (*redshiftserverless.GetWorkgroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkgroupWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.GetWorkgroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkgroupWithContext indicates an expected call of GetWorkgroupWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) GetWorkgroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkgroupWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).GetWorkgroupWithContext), varargs...)
}

// ListCustomDomainAssociations mocks base method
func (m *MockRedshiftServerlessAPI) ListCustomDomainAssociations(arg0 *redshiftserverless.ListCustomDomainAssociationsInput) (*redshiftserverless.ListCustomDomainAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomDomainAssociations", arg0)
	ret0, _ := ret[0].(*redshiftserverless.ListCustomDomainAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomDomainAssociations indicates an expected call of ListCustomDomainAssociations
func (mr *MockRedshiftServerlessAPIMockRecorder) ListCustomDomainAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomDomainAssociations", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListCustomDomainAssociations), arg0)
}

// ListCustomDomainAssociationsPages mocks base method
func (m *MockRedshiftServerlessAPI) ListCustomDomainAssociationsPages(arg0 *redshiftserverless.ListCustomDomainAssociationsInput, arg1 func(*redshiftserverless.ListCustomDomainAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomDomainAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomDomainAssociationsPages indicates an expected call of ListCustomDomainAssociationsPages
func (mr *MockRedshiftServerlessAPIMockRecorder) ListCustomDomainAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomDomainAssociationsPages", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListCustomDomainAssociationsPages), arg0, arg1)
}

// ListCustomDomainAssociationsPagesWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListCustomDomainAssociationsPagesWithContext(arg0 context.Context, arg1 *redshiftserverless.ListCustomDomainAssociationsInput, arg2 func(*redshiftserverless.ListCustomDomainAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomDomainAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomDomainAssociationsPagesWithContext indicates an expected call of ListCustomDomainAssociationsPagesWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListCustomDomainAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomDomainAssociationsPagesWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListCustomDomainAssociationsPagesWithContext), varargs...)
}

// ListCustomDomainAssociationsRequest mocks base method
func (m *MockRedshiftServerlessAPI) ListCustomDomainAssociationsRequest(arg0 *redshiftserverless.ListCustomDomainAssociationsInput) (*request.Request, *redshiftserverless.ListCustomDomainAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomDomainAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.ListCustomDomainAssociationsOutput)
	return ret0, ret1
}

// ListCustomDomainAssociationsRequest indicates an expected call of ListCustomDomainAssociationsRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) ListCustomDomainAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomDomainAssociationsRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListCustomDomainAssociationsRequest), arg0)
}

// ListCustomDomainAssociationsWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListCustomDomainAssociationsWithContext(arg0 context.Context, arg1 *redshiftserverless.ListCustomDomainAssociationsInput, arg2 ...request.Option) (*redshiftserverless.ListCustomDomainAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomDomainAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListCustomDomainAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomDomainAssociationsWithContext indicates an expected call of ListCustomDomainAssociationsWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListCustomDomainAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomDomainAssociationsWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListCustomDomainAssociationsWithContext), varargs...)
}

// ListEndpointAccess mocks base method
func (m *MockRedshiftServerlessAPI) ListEndpointAccess(arg0 *redshiftserverless.ListEndpointAccessInput) (*redshiftserverless.ListEndpointAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointAccess", arg0)
	ret0, _ := ret[0].(*redshiftserverless.ListEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointAccess indicates an expected call of ListEndpointAccess
func (mr *MockRedshiftServerlessAPIMockRecorder) ListEndpointAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointAccess", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListEndpointAccess), arg0)
}

// ListEndpointAccessPages mocks base method
func (m *MockRedshiftServerlessAPI) ListEndpointAccessPages(arg0 *redshiftserverless.ListEndpointAccessInput, arg1 func(*redshiftserverless.ListEndpointAccessOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointAccessPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEndpointAccessPages indicates an expected call of ListEndpointAccessPages
func (mr *MockRedshiftServerlessAPIMockRecorder) ListEndpointAccessPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointAccessPages", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListEndpointAccessPages), arg0, arg1)
}

// ListEndpointAccessPagesWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListEndpointAccessPagesWithContext(arg0 context.Context, arg1 *redshiftserverless.ListEndpointAccessInput, arg2 func(*redshiftserverless.ListEndpointAccessOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointAccessPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEndpointAccessPagesWithContext indicates an expected call of ListEndpointAccessPagesWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListEndpointAccessPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointAccessPagesWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListEndpointAccessPagesWithContext), varargs...)
}

// ListEndpointAccessRequest mocks base method
func (m *MockRedshiftServerlessAPI) ListEndpointAccessRequest(arg0 *redshiftserverless.ListEndpointAccessInput) (*request.Request, *redshiftserverless.ListEndpointAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.ListEndpointAccessOutput)
	return ret0, ret1
}

// ListEndpointAccessRequest indicates an expected call of ListEndpointAccessRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) ListEndpointAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointAccessRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListEndpointAccessRequest), arg0)
}

// ListEndpointAccessWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListEndpointAccessWithContext(arg0 context.Context, arg1 *redshiftserverless.ListEndpointAccessInput, arg2 ...request.Option) (*redshiftserverless.ListEndpointAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointAccessWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointAccessWithContext indicates an expected call of ListEndpointAccessWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListEndpointAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointAccessWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListEndpointAccessWithContext), varargs...)
}

// ListNamespaces mocks base method
func (m *MockRedshiftServerlessAPI) ListNamespaces(arg0 *redshiftserverless.ListNamespacesInput) (*redshiftserverless.ListNamespacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaces", arg0)
	ret0, _ := ret[0].(*redshiftserverless.ListNamespacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces
func (mr *MockRedshiftServerlessAPIMockRecorder) ListNamespaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListNamespaces), arg0)
}

// ListNamespacesPages mocks base method
func (m *MockRedshiftServerlessAPI) ListNamespacesPages(arg0 *redshiftserverless.ListNamespacesInput, arg1 func(*redshiftserverless.ListNamespacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNamespacesPages indicates an expected call of ListNamespacesPages
func (mr *MockRedshiftServerlessAPIMockRecorder) ListNamespacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacesPages", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListNamespacesPages), arg0, arg1)
}

// ListNamespacesPagesWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListNamespacesPagesWithContext(arg0 context.Context, arg1 *redshiftserverless.ListNamespacesInput, arg2 func(*redshiftserverless.ListNamespacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamespacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNamespacesPagesWithContext indicates an expected call of ListNamespacesPagesWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListNamespacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacesPagesWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListNamespacesPagesWithContext), varargs...)
}

// ListNamespacesRequest mocks base method
func (m *MockRedshiftServerlessAPI) ListNamespacesRequest(arg0 *redshiftserverless.ListNamespacesInput) (*request.Request, *redshiftserverless.ListNamespacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.ListNamespacesOutput)
	return ret0, ret1
}

// ListNamespacesRequest indicates an expected call of ListNamespacesRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) ListNamespacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacesRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListNamespacesRequest), arg0)
}

// ListNamespacesWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListNamespacesWithContext(arg0 context.Context, arg1 *redshiftserverless.ListNamespacesInput, arg2 ...request.Option) (*redshiftserverless.ListNamespacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamespacesWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListNamespacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespacesWithContext indicates an expected call of ListNamespacesWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListNamespacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacesWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListNamespacesWithContext), varargs...)
}

// ListRecoveryPoints mocks base method
func (m *MockRedshiftServerlessAPI) ListRecoveryPoints(arg0 *redshiftserverless.ListRecoveryPointsInput) (*redshiftserverless.ListRecoveryPointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPoints", arg0)
	ret0, _ := ret[0].(*redshiftserverless.ListRecoveryPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryPoints indicates an expected call of ListRecoveryPoints
func (mr *MockRedshiftServerlessAPIMockRecorder) ListRecoveryPoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPoints", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListRecoveryPoints), arg0)
}

// ListRecoveryPointsPages mocks base method
func (m *MockRedshiftServerlessAPI) ListRecoveryPointsPages(arg0 *redshiftserverless.ListRecoveryPointsInput, arg1 func(*redshiftserverless.ListRecoveryPointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecoveryPointsPages indicates an expected call of ListRecoveryPointsPages
func (mr *MockRedshiftServerlessAPIMockRecorder) ListRecoveryPointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsPages", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListRecoveryPointsPages), arg0, arg1)
}

// ListRecoveryPointsPagesWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListRecoveryPointsPagesWithContext(arg0 context.Context, arg1 *redshiftserverless.ListRecoveryPointsInput, arg2 func(*redshiftserverless.ListRecoveryPointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryPointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecoveryPointsPagesWithContext indicates an expected call of ListRecoveryPointsPagesWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListRecoveryPointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsPagesWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListRecoveryPointsPagesWithContext), varargs...)
}

// ListRecoveryPointsRequest mocks base method
func (m *MockRedshiftServerlessAPI) ListRecoveryPointsRequest(arg0 *redshiftserverless.ListRecoveryPointsInput) (*request.Request, *redshiftserverless.ListRecoveryPointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.ListRecoveryPointsOutput)
	return ret0, ret1
}

// ListRecoveryPointsRequest indicates an expected call of ListRecoveryPointsRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) ListRecoveryPointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListRecoveryPointsRequest), arg0)
}

// ListRecoveryPointsWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListRecoveryPointsWithContext(arg0 context.Context, arg1 *redshiftserverless.ListRecoveryPointsInput, arg2 ...request.Option) (*redshiftserverless.ListRecoveryPointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryPointsWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListRecoveryPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryPointsWithContext indicates an expected call of ListRecoveryPointsWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListRecoveryPointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListRecoveryPointsWithContext), varargs...)
}

// ListSnapshots mocks base method
func (m *MockRedshiftServerlessAPI) ListSnapshots(arg0 *redshiftserverless.ListSnapshotsInput) (*redshiftserverless.ListSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", arg0)
	ret0, _ := ret[0].(*redshiftserverless.ListSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots
func (mr *MockRedshiftServerlessAPIMockRecorder) ListSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListSnapshots), arg0)
}

// ListSnapshotsPages mocks base method
func (m *MockRedshiftServerlessAPI) ListSnapshotsPages(arg0 *redshiftserverless.ListSnapshotsInput, arg1 func(*redshiftserverless.ListSnapshotsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSnapshotsPages indicates an expected call of ListSnapshotsPages
func (mr *MockRedshiftServerlessAPIMockRecorder) ListSnapshotsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotsPages", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListSnapshotsPages), arg0, arg1)
}

// ListSnapshotsPagesWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListSnapshotsPagesWithContext(arg0 context.Context, arg1 *redshiftserverless.ListSnapshotsInput, arg2 func(*redshiftserverless.ListSnapshotsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshotsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSnapshotsPagesWithContext indicates an expected call of ListSnapshotsPagesWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListSnapshotsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotsPagesWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListSnapshotsPagesWithContext), varargs...)
}

// ListSnapshotsRequest mocks base method
func (m *MockRedshiftServerlessAPI) ListSnapshotsRequest(arg0 *redshiftserverless.ListSnapshotsInput) (*request.Request, *redshiftserverless.ListSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.ListSnapshotsOutput)
	return ret0, ret1
}

// ListSnapshotsRequest indicates an expected call of ListSnapshotsRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) ListSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotsRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListSnapshotsRequest), arg0)
}

// ListSnapshotsWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListSnapshotsWithContext(arg0 context.Context, arg1 *redshiftserverless.ListSnapshotsInput, arg2 ...request.Option) (*redshiftserverless.ListSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshotsWithContext indicates an expected call of ListSnapshotsWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotsWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListSnapshotsWithContext), varargs...)
}

// ListTableRestoreStatus mocks base method
func (m *MockRedshiftServerlessAPI) ListTableRestoreStatus(arg0 *redshiftserverless.ListTableRestoreStatusInput) (*redshiftserverless.ListTableRestoreStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableRestoreStatus", arg0)
	ret0, _ := ret[0].(*redshiftserverless.ListTableRestoreStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTableRestoreStatus indicates an expected call of ListTableRestoreStatus
func (mr *MockRedshiftServerlessAPIMockRecorder) ListTableRestoreStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableRestoreStatus", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListTableRestoreStatus), arg0)
}

// ListTableRestoreStatusPages mocks base method
func (m *MockRedshiftServerlessAPI) ListTableRestoreStatusPages(arg0 *redshiftserverless.ListTableRestoreStatusInput, arg1 func(*redshiftserverless.ListTableRestoreStatusOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableRestoreStatusPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTableRestoreStatusPages indicates an expected call of ListTableRestoreStatusPages
func (mr *MockRedshiftServerlessAPIMockRecorder) ListTableRestoreStatusPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableRestoreStatusPages", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListTableRestoreStatusPages), arg0, arg1)
}

// ListTableRestoreStatusPagesWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListTableRestoreStatusPagesWithContext(arg0 context.Context, arg1 *redshiftserverless.ListTableRestoreStatusInput, arg2 func(*redshiftserverless.ListTableRestoreStatusOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTableRestoreStatusPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTableRestoreStatusPagesWithContext indicates an expected call of ListTableRestoreStatusPagesWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListTableRestoreStatusPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableRestoreStatusPagesWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListTableRestoreStatusPagesWithContext), varargs...)
}

// ListTableRestoreStatusRequest mocks base method
func (m *MockRedshiftServerlessAPI) ListTableRestoreStatusRequest(arg0 *redshiftserverless.ListTableRestoreStatusInput) (*request.Request, *redshiftserverless.ListTableRestoreStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableRestoreStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.ListTableRestoreStatusOutput)
	return ret0, ret1
}

// ListTableRestoreStatusRequest indicates an expected call of ListTableRestoreStatusRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) ListTableRestoreStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableRestoreStatusRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListTableRestoreStatusRequest), arg0)
}

// ListTableRestoreStatusWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListTableRestoreStatusWithContext(arg0 context.Context, arg1 *redshiftserverless.ListTableRestoreStatusInput, arg2 ...request.Option) (*redshiftserverless.ListTableRestoreStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTableRestoreStatusWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListTableRestoreStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTableRestoreStatusWithContext indicates an expected call of ListTableRestoreStatusWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListTableRestoreStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableRestoreStatusWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListTableRestoreStatusWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockRedshiftServerlessAPI) ListTagsForResource(arg0 *redshiftserverless.ListTagsForResourceInput) (*redshiftserverless.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*redshiftserverless.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockRedshiftServerlessAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockRedshiftServerlessAPI) ListTagsForResourceRequest(arg0 *redshiftserverless.ListTagsForResourceInput) (*request.Request, *redshiftserverless.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *redshiftserverless.ListTagsForResourceInput, arg2 ...request.Option) (*redshiftserverless.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListUsageLimits mocks base method
func (m *MockRedshiftServerlessAPI) ListUsageLimits(arg0 *redshiftserverless.ListUsageLimitsInput) (*redshiftserverless.ListUsageLimitsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageLimits", arg0)
	ret0, _ := ret[0].(*redshiftserverless.ListUsageLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageLimits indicates an expected call of ListUsageLimits
func (mr *MockRedshiftServerlessAPIMockRecorder) ListUsageLimits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageLimits", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListUsageLimits), arg0)
}

// ListUsageLimitsPages mocks base method
func (m *MockRedshiftServerlessAPI) ListUsageLimitsPages(arg0 *redshiftserverless.ListUsageLimitsInput, arg1 func(*redshiftserverless.ListUsageLimitsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageLimitsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsageLimitsPages indicates an expected call of ListUsageLimitsPages
func (mr *MockRedshiftServerlessAPIMockRecorder) ListUsageLimitsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageLimitsPages", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListUsageLimitsPages), arg0, arg1)
}

// ListUsageLimitsPagesWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListUsageLimitsPagesWithContext(arg0 context.Context, arg1 *redshiftserverless.ListUsageLimitsInput, arg2 func(*redshiftserverless.ListUsageLimitsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsageLimitsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsageLimitsPagesWithContext indicates an expected call of ListUsageLimitsPagesWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListUsageLimitsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageLimitsPagesWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListUsageLimitsPagesWithContext), varargs...)
}

// ListUsageLimitsRequest mocks base method
func (m *MockRedshiftServerlessAPI) ListUsageLimitsRequest(arg0 *redshiftserverless.ListUsageLimitsInput) (*request.Request, *redshiftserverless.ListUsageLimitsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageLimitsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.ListUsageLimitsOutput)
	return ret0, ret1
}

// ListUsageLimitsRequest indicates an expected call of ListUsageLimitsRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) ListUsageLimitsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageLimitsRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListUsageLimitsRequest), arg0)
}

// ListUsageLimitsWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListUsageLimitsWithContext(arg0 context.Context, arg1 *redshiftserverless.ListUsageLimitsInput, arg2 ...request.Option) (*redshiftserverless.ListUsageLimitsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsageLimitsWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListUsageLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageLimitsWithContext indicates an expected call of ListUsageLimitsWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListUsageLimitsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageLimitsWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListUsageLimitsWithContext), varargs...)
}

// ListWorkgroups mocks base method
func (m *MockRedshiftServerlessAPI) ListWorkgroups(arg0 *redshiftserverless.ListWorkgroupsInput) (*redshiftserverless.ListWorkgroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkgroups", arg0)
	ret0, _ := ret[0].(*redshiftserverless.ListWorkgroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkgroups indicates an expected call of ListWorkgroups
func (mr *MockRedshiftServerlessAPIMockRecorder) ListWorkgroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkgroups", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListWorkgroups), arg0)
}

// ListWorkgroupsPages mocks base method
func (m *MockRedshiftServerlessAPI) ListWorkgroupsPages(arg0 *redshiftserverless.ListWorkgroupsInput, arg1 func(*redshiftserverless.ListWorkgroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkgroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkgroupsPages indicates an expected call of ListWorkgroupsPages
func (mr *MockRedshiftServerlessAPIMockRecorder) ListWorkgroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkgroupsPages", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListWorkgroupsPages), arg0, arg1)
}

// ListWorkgroupsPagesWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListWorkgroupsPagesWithContext(arg0 context.Context, arg1 *redshiftserverless.ListWorkgroupsInput, arg2 func(*redshiftserverless.ListWorkgroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkgroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkgroupsPagesWithContext indicates an expected call of ListWorkgroupsPagesWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListWorkgroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkgroupsPagesWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListWorkgroupsPagesWithContext), varargs...)
}

// ListWorkgroupsRequest mocks base method
func (m *MockRedshiftServerlessAPI) ListWorkgroupsRequest(arg0 *redshiftserverless.ListWorkgroupsInput) (*request.Request, *redshiftserverless.ListWorkgroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkgroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.ListWorkgroupsOutput)
	return ret0, ret1
}

// ListWorkgroupsRequest indicates an expected call of ListWorkgroupsRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) ListWorkgroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkgroupsRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListWorkgroupsRequest), arg0)
}

// ListWorkgroupsWithContext mocks base method
func (m *MockRedshiftServerlessAPI) ListWorkgroupsWithContext(arg0 context.Context, arg1 *redshiftserverless.ListWorkgroupsInput, arg2 ...request.Option) (*redshiftserverless.ListWorkgroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkgroupsWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListWorkgroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkgroupsWithContext indicates an expected call of ListWorkgroupsWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) ListWorkgroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkgroupsWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).ListWorkgroupsWithContext), varargs...)
}

// PutResourcePolicy mocks base method
func (m *MockRedshiftServerlessAPI) PutResourcePolicy(arg0 *redshiftserverless.PutResourcePolicyInput) (*redshiftserverless.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicy", arg0)
	ret0, _ := ret[0].(*redshiftserverless.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicy indicates an expected call of PutResourcePolicy
func (mr *MockRedshiftServerlessAPIMockRecorder) PutResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicy", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).PutResourcePolicy), arg0)
}

// PutResourcePolicyRequest mocks base method
func (m *MockRedshiftServerlessAPI) PutResourcePolicyRequest(arg0 *redshiftserverless.PutResourcePolicyInput) (*request.Request, *redshiftserverless.PutResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.PutResourcePolicyOutput)
	return ret0, ret1
}

// PutResourcePolicyRequest indicates an expected call of PutResourcePolicyRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) PutResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).PutResourcePolicyRequest), arg0)
}

// PutResourcePolicyWithContext mocks base method
func (m *MockRedshiftServerlessAPI) PutResourcePolicyWithContext(arg0 context.Context, arg1 *redshiftserverless.PutResourcePolicyInput, arg2 ...request.Option) (*redshiftserverless.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicyWithContext indicates an expected call of PutResourcePolicyWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) PutResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).PutResourcePolicyWithContext), varargs...)
}

// RestoreFromRecoveryPoint mocks base method
func (m *MockRedshiftServerlessAPI) RestoreFromRecoveryPoint(arg0 *redshiftserverless.RestoreFromRecoveryPointInput) (*redshiftserverless.RestoreFromRecoveryPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFromRecoveryPoint", arg0)
	ret0, _ := ret[0].(*redshiftserverless.RestoreFromRecoveryPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreFromRecoveryPoint indicates an expected call of RestoreFromRecoveryPoint
func (mr *MockRedshiftServerlessAPIMockRecorder) RestoreFromRecoveryPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromRecoveryPoint", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).RestoreFromRecoveryPoint), arg0)
}

// RestoreFromRecoveryPointRequest mocks base method
func (m *MockRedshiftServerlessAPI) RestoreFromRecoveryPointRequest(arg0 *redshiftserverless.RestoreFromRecoveryPointInput) (*request.Request, *redshiftserverless.RestoreFromRecoveryPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFromRecoveryPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.RestoreFromRecoveryPointOutput)
	return ret0, ret1
}

// RestoreFromRecoveryPointRequest indicates an expected call of RestoreFromRecoveryPointRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) RestoreFromRecoveryPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromRecoveryPointRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).RestoreFromRecoveryPointRequest), arg0)
}

// RestoreFromRecoveryPointWithContext mocks base method
func (m *MockRedshiftServerlessAPI) RestoreFromRecoveryPointWithContext(arg0 context.Context, arg1 *redshiftserverless.RestoreFromRecoveryPointInput, arg2 ...request.Option) (*redshiftserverless.RestoreFromRecoveryPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreFromRecoveryPointWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.RestoreFromRecoveryPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreFromRecoveryPointWithContext indicates an expected call of RestoreFromRecoveryPointWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) RestoreFromRecoveryPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromRecoveryPointWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).RestoreFromRecoveryPointWithContext), varargs...)
}

// RestoreFromSnapshot mocks base method
func (m *MockRedshiftServerlessAPI) RestoreFromSnapshot(arg0 *redshiftserverless.RestoreFromSnapshotInput) (*redshiftserverless.RestoreFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFromSnapshot", arg0)
	ret0, _ := ret[0].(*redshiftserverless.RestoreFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreFromSnapshot indicates an expected call of RestoreFromSnapshot
func (mr *MockRedshiftServerlessAPIMockRecorder) RestoreFromSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromSnapshot", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).RestoreFromSnapshot), arg0)
}

// RestoreFromSnapshotRequest mocks base method
func (m *MockRedshiftServerlessAPI) RestoreFromSnapshotRequest(arg0 *redshiftserverless.RestoreFromSnapshotInput) (*request.Request, *redshiftserverless.RestoreFromSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFromSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.RestoreFromSnapshotOutput)
	return ret0, ret1
}

// RestoreFromSnapshotRequest indicates an expected call of RestoreFromSnapshotRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) RestoreFromSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromSnapshotRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).RestoreFromSnapshotRequest), arg0)
}

// RestoreFromSnapshotWithContext mocks base method
func (m *MockRedshiftServerlessAPI) RestoreFromSnapshotWithContext(arg0 context.Context, arg1 *redshiftserverless.RestoreFromSnapshotInput, arg2 ...request.Option) (*redshiftserverless.RestoreFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreFromSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.RestoreFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreFromSnapshotWithContext indicates an expected call of RestoreFromSnapshotWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) RestoreFromSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromSnapshotWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).RestoreFromSnapshotWithContext), varargs...)
}

// RestoreTableFromSnapshot mocks base method
func (m *MockRedshiftServerlessAPI) RestoreTableFromSnapshot(arg0 *redshiftserverless.RestoreTableFromSnapshotInput) (*redshiftserverless.RestoreTableFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTableFromSnapshot", arg0)
	ret0, _ := ret[0].(*redshiftserverless.RestoreTableFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTableFromSnapshot indicates an expected call of RestoreTableFromSnapshot
func (mr *MockRedshiftServerlessAPIMockRecorder) RestoreTableFromSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableFromSnapshot", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).RestoreTableFromSnapshot), arg0)
}

// RestoreTableFromSnapshotRequest mocks base method
func (m *MockRedshiftServerlessAPI) RestoreTableFromSnapshotRequest(arg0 *redshiftserverless.RestoreTableFromSnapshotInput) (*request.Request, *redshiftserverless.RestoreTableFromSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTableFromSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.RestoreTableFromSnapshotOutput)
	return ret0, ret1
}

// RestoreTableFromSnapshotRequest indicates an expected call of RestoreTableFromSnapshotRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) RestoreTableFromSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableFromSnapshotRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).RestoreTableFromSnapshotRequest), arg0)
}

// RestoreTableFromSnapshotWithContext mocks base method
func (m *MockRedshiftServerlessAPI) RestoreTableFromSnapshotWithContext(arg0 context.Context, arg1 *redshiftserverless.RestoreTableFromSnapshotInput, arg2 ...request.Option) (*redshiftserverless.RestoreTableFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreTableFromSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.RestoreTableFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTableFromSnapshotWithContext indicates an expected call of RestoreTableFromSnapshotWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) RestoreTableFromSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableFromSnapshotWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).RestoreTableFromSnapshotWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockRedshiftServerlessAPI) TagResource(arg0 *redshiftserverless.TagResourceInput) (*redshiftserverless.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*redshiftserverless.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockRedshiftServerlessAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockRedshiftServerlessAPI) TagResourceRequest(arg0 *redshiftserverless.TagResourceInput) (*request.Request, *redshiftserverless.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockRedshiftServerlessAPI) TagResourceWithContext(arg0 context.Context, arg1 *redshiftserverless.TagResourceInput, arg2 ...request.Option) (*redshiftserverless.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockRedshiftServerlessAPI) UntagResource(arg0 *redshiftserverless.UntagResourceInput) (*redshiftserverless.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*redshiftserverless.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockRedshiftServerlessAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockRedshiftServerlessAPI) UntagResourceRequest(arg0 *redshiftserverless.UntagResourceInput) (*request.Request, *redshiftserverless.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockRedshiftServerlessAPI) UntagResourceWithContext(arg0 context.Context, arg1 *redshiftserverless.UntagResourceInput, arg2 ...request.Option) (*redshiftserverless.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCustomDomainAssociation mocks base method
func (m *MockRedshiftServerlessAPI) UpdateCustomDomainAssociation(arg0 *redshiftserverless.UpdateCustomDomainAssociationInput) (*redshiftserverless.UpdateCustomDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomDomainAssociation", arg0)
	ret0, _ := ret[0].(*redshiftserverless.UpdateCustomDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomDomainAssociation indicates an expected call of UpdateCustomDomainAssociation
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateCustomDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomDomainAssociation", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateCustomDomainAssociation), arg0)
}

// UpdateCustomDomainAssociationRequest mocks base method
func (m *MockRedshiftServerlessAPI) UpdateCustomDomainAssociationRequest(arg0 *redshiftserverless.UpdateCustomDomainAssociationInput) (*request.Request, *redshiftserverless.UpdateCustomDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.UpdateCustomDomainAssociationOutput)
	return ret0, ret1
}

// UpdateCustomDomainAssociationRequest indicates an expected call of UpdateCustomDomainAssociationRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateCustomDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomDomainAssociationRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateCustomDomainAssociationRequest), arg0)
}

// UpdateCustomDomainAssociationWithContext mocks base method
func (m *MockRedshiftServerlessAPI) UpdateCustomDomainAssociationWithContext(arg0 context.Context, arg1 *redshiftserverless.UpdateCustomDomainAssociationInput, arg2 ...request.Option) (*redshiftserverless.UpdateCustomDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCustomDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.UpdateCustomDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomDomainAssociationWithContext indicates an expected call of UpdateCustomDomainAssociationWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateCustomDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomDomainAssociationWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateCustomDomainAssociationWithContext), varargs...)
}

// UpdateEndpointAccess mocks base method
func (m *MockRedshiftServerlessAPI) UpdateEndpointAccess(arg0 *redshiftserverless.UpdateEndpointAccessInput) (*redshiftserverless.UpdateEndpointAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointAccess", arg0)
	ret0, _ := ret[0].(*redshiftserverless.UpdateEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointAccess indicates an expected call of UpdateEndpointAccess
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateEndpointAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointAccess", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateEndpointAccess), arg0)
}

// UpdateEndpointAccessRequest mocks base method
func (m *MockRedshiftServerlessAPI) UpdateEndpointAccessRequest(arg0 *redshiftserverless.UpdateEndpointAccessInput) (*request.Request, *redshiftserverless.UpdateEndpointAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.UpdateEndpointAccessOutput)
	return ret0, ret1
}

// UpdateEndpointAccessRequest indicates an expected call of UpdateEndpointAccessRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateEndpointAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointAccessRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateEndpointAccessRequest), arg0)
}

// UpdateEndpointAccessWithContext mocks base method
func (m *MockRedshiftServerlessAPI) UpdateEndpointAccessWithContext(arg0 context.Context, arg1 *redshiftserverless.UpdateEndpointAccessInput, arg2 ...request.Option) (*redshiftserverless.UpdateEndpointAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEndpointAccessWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.UpdateEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointAccessWithContext indicates an expected call of UpdateEndpointAccessWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateEndpointAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointAccessWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateEndpointAccessWithContext), varargs...)
}

// UpdateNamespace mocks base method
func (m *MockRedshiftServerlessAPI) UpdateNamespace(arg0 *redshiftserverless.UpdateNamespaceInput) (*redshiftserverless.UpdateNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", arg0)
	ret0, _ := ret[0].(*redshiftserverless.UpdateNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateNamespace), arg0)
}

// UpdateNamespaceRequest mocks base method
func (m *MockRedshiftServerlessAPI) UpdateNamespaceRequest(arg0 *redshiftserverless.UpdateNamespaceInput) (*request.Request, *redshiftserverless.UpdateNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.UpdateNamespaceOutput)
	return ret0, ret1
}

// UpdateNamespaceRequest indicates an expected call of UpdateNamespaceRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateNamespaceRequest), arg0)
}

// UpdateNamespaceWithContext mocks base method
func (m *MockRedshiftServerlessAPI) UpdateNamespaceWithContext(arg0 context.Context, arg1 *redshiftserverless.UpdateNamespaceInput, arg2 ...request.Option) (*redshiftserverless.UpdateNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.UpdateNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespaceWithContext indicates an expected call of UpdateNamespaceWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateNamespaceWithContext), varargs...)
}

// UpdateSnapshot mocks base method
func (m *MockRedshiftServerlessAPI) UpdateSnapshot(arg0 *redshiftserverless.UpdateSnapshotInput) (*redshiftserverless.UpdateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshot", arg0)
	ret0, _ := ret[0].(*redshiftserverless.UpdateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateSnapshot), arg0)
}

// UpdateSnapshotRequest mocks base method
func (m *MockRedshiftServerlessAPI) UpdateSnapshotRequest(arg0 *redshiftserverless.UpdateSnapshotInput) (*request.Request, *redshiftserverless.UpdateSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.UpdateSnapshotOutput)
	return ret0, ret1
}

// UpdateSnapshotRequest indicates an expected call of UpdateSnapshotRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshotRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateSnapshotRequest), arg0)
}

// UpdateSnapshotWithContext mocks base method
func (m *MockRedshiftServerlessAPI) UpdateSnapshotWithContext(arg0 context.Context, arg1 *redshiftserverless.UpdateSnapshotInput, arg2 ...request.Option) (*redshiftserverless.UpdateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.UpdateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnapshotWithContext indicates an expected call of UpdateSnapshotWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshotWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateSnapshotWithContext), varargs...)
}

// UpdateUsageLimit mocks base method
func (m *MockRedshiftServerlessAPI) UpdateUsageLimit(arg0 *redshiftserverless.UpdateUsageLimitInput) (*redshiftserverless.UpdateUsageLimitOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsageLimit", arg0)
	ret0, _ := ret[0].(*redshiftserverless.UpdateUsageLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsageLimit indicates an expected call of UpdateUsageLimit
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateUsageLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageLimit", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateUsageLimit), arg0)
}

// UpdateUsageLimitRequest mocks base method
func (m *MockRedshiftServerlessAPI) UpdateUsageLimitRequest(arg0 *redshiftserverless.UpdateUsageLimitInput) (*request.Request, *redshiftserverless.UpdateUsageLimitOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsageLimitRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.UpdateUsageLimitOutput)
	return ret0, ret1
}

// UpdateUsageLimitRequest indicates an expected call of UpdateUsageLimitRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateUsageLimitRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageLimitRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateUsageLimitRequest), arg0)
}

// UpdateUsageLimitWithContext mocks base method
func (m *MockRedshiftServerlessAPI) UpdateUsageLimitWithContext(arg0 context.Context, arg1 *redshiftserverless.UpdateUsageLimitInput, arg2 ...request.Option) (*redshiftserverless.UpdateUsageLimitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUsageLimitWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.UpdateUsageLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsageLimitWithContext indicates an expected call of UpdateUsageLimitWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateUsageLimitWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageLimitWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateUsageLimitWithContext), varargs...)
}

// UpdateWorkgroup mocks base method
func (m *MockRedshiftServerlessAPI) UpdateWorkgroup(arg0 *redshiftserverless.UpdateWorkgroupInput) (*redshiftserverless.UpdateWorkgroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkgroup", arg0)
	ret0, _ := ret[0].(*redshiftserverless.UpdateWorkgroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkgroup indicates an expected call of UpdateWorkgroup
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateWorkgroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkgroup", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateWorkgroup), arg0)
}

// UpdateWorkgroupRequest mocks base method
func (m *MockRedshiftServerlessAPI) UpdateWorkgroupRequest(arg0 *redshiftserverless.UpdateWorkgroupInput) (*request.Request, *redshiftserverless.UpdateWorkgroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkgroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftserverless.UpdateWorkgroupOutput)
	return ret0, ret1
}

// UpdateWorkgroupRequest indicates an expected call of UpdateWorkgroupRequest
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateWorkgroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkgroupRequest", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateWorkgroupRequest), arg0)
}

// UpdateWorkgroupWithContext mocks base method
func (m *MockRedshiftServerlessAPI) UpdateWorkgroupWithContext(arg0 context.Context, arg1 *redshiftserverless.UpdateWorkgroupInput, arg2 ...request.Option) (*redshiftserverless.UpdateWorkgroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkgroupWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.UpdateWorkgroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkgroupWithContext indicates an expected call of UpdateWorkgroupWithContext
func (mr *MockRedshiftServerlessAPIMockRecorder) UpdateWorkgroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkgroupWithContext", reflect.TypeOf((*MockRedshiftServerlessAPI)(nil).UpdateWorkgroupWithContext), varargs...)
}
