// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/drs/drsiface (interfaces: DrsAPI)

// Package drsmock is a generated GoMock package.
package drsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	drs "github.com/aws/aws-sdk-go/service/drs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDrsAPI is a mock of DrsAPI interface
type MockDrsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDrsAPIMockRecorder
}

// MockDrsAPIMockRecorder is the mock recorder for MockDrsAPI
type MockDrsAPIMockRecorder struct {
	mock *MockDrsAPI
}

// NewMockDrsAPI creates a new mock instance
func NewMockDrsAPI(ctrl *gomock.Controller) *MockDrsAPI {
	mock := &MockDrsAPI{ctrl: ctrl}
	mock.recorder = &MockDrsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDrsAPI) EXPECT() *MockDrsAPIMockRecorder {
	return m.recorder
}

// AssociateSourceNetworkStack mocks base method
func (m *MockDrsAPI) AssociateSourceNetworkStack(arg0 *drs.AssociateSourceNetworkStackInput) (*drs.AssociateSourceNetworkStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateSourceNetworkStack", arg0)
	ret0, _ := ret[0].(*drs.AssociateSourceNetworkStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateSourceNetworkStack indicates an expected call of AssociateSourceNetworkStack
func (mr *MockDrsAPIMockRecorder) AssociateSourceNetworkStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSourceNetworkStack", reflect.TypeOf((*MockDrsAPI)(nil).AssociateSourceNetworkStack), arg0)
}

// AssociateSourceNetworkStackRequest mocks base method
func (m *MockDrsAPI) AssociateSourceNetworkStackRequest(arg0 *drs.AssociateSourceNetworkStackInput) (*request.Request, *drs.AssociateSourceNetworkStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateSourceNetworkStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.AssociateSourceNetworkStackOutput)
	return ret0, ret1
}

// AssociateSourceNetworkStackRequest indicates an expected call of AssociateSourceNetworkStackRequest
func (mr *MockDrsAPIMockRecorder) AssociateSourceNetworkStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSourceNetworkStackRequest", reflect.TypeOf((*MockDrsAPI)(nil).AssociateSourceNetworkStackRequest), arg0)
}

// AssociateSourceNetworkStackWithContext mocks base method
func (m *MockDrsAPI) AssociateSourceNetworkStackWithContext(arg0 context.Context, arg1 *drs.AssociateSourceNetworkStackInput, arg2 ...request.Option) (*drs.AssociateSourceNetworkStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateSourceNetworkStackWithContext", varargs...)
	ret0, _ := ret[0].(*drs.AssociateSourceNetworkStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateSourceNetworkStackWithContext indicates an expected call of AssociateSourceNetworkStackWithContext
func (mr *MockDrsAPIMockRecorder) AssociateSourceNetworkStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSourceNetworkStackWithContext", reflect.TypeOf((*MockDrsAPI)(nil).AssociateSourceNetworkStackWithContext), varargs...)
}

// CreateExtendedSourceServer mocks base method
func (m *MockDrsAPI) CreateExtendedSourceServer(arg0 *drs.CreateExtendedSourceServerInput) (*drs.CreateExtendedSourceServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtendedSourceServer", arg0)
	ret0, _ := ret[0].(*drs.CreateExtendedSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtendedSourceServer indicates an expected call of CreateExtendedSourceServer
func (mr *MockDrsAPIMockRecorder) CreateExtendedSourceServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtendedSourceServer", reflect.TypeOf((*MockDrsAPI)(nil).CreateExtendedSourceServer), arg0)
}

// CreateExtendedSourceServerRequest mocks base method
func (m *MockDrsAPI) CreateExtendedSourceServerRequest(arg0 *drs.CreateExtendedSourceServerInput) (*request.Request, *drs.CreateExtendedSourceServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtendedSourceServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.CreateExtendedSourceServerOutput)
	return ret0, ret1
}

// CreateExtendedSourceServerRequest indicates an expected call of CreateExtendedSourceServerRequest
func (mr *MockDrsAPIMockRecorder) CreateExtendedSourceServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtendedSourceServerRequest", reflect.TypeOf((*MockDrsAPI)(nil).CreateExtendedSourceServerRequest), arg0)
}

// CreateExtendedSourceServerWithContext mocks base method
func (m *MockDrsAPI) CreateExtendedSourceServerWithContext(arg0 context.Context, arg1 *drs.CreateExtendedSourceServerInput, arg2 ...request.Option) (*drs.CreateExtendedSourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExtendedSourceServerWithContext", varargs...)
	ret0, _ := ret[0].(*drs.CreateExtendedSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtendedSourceServerWithContext indicates an expected call of CreateExtendedSourceServerWithContext
func (mr *MockDrsAPIMockRecorder) CreateExtendedSourceServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtendedSourceServerWithContext", reflect.TypeOf((*MockDrsAPI)(nil).CreateExtendedSourceServerWithContext), varargs...)
}

// CreateLaunchConfigurationTemplate mocks base method
func (m *MockDrsAPI) CreateLaunchConfigurationTemplate(arg0 *drs.CreateLaunchConfigurationTemplateInput) (*drs.CreateLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLaunchConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*drs.CreateLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLaunchConfigurationTemplate indicates an expected call of CreateLaunchConfigurationTemplate
func (mr *MockDrsAPIMockRecorder) CreateLaunchConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchConfigurationTemplate", reflect.TypeOf((*MockDrsAPI)(nil).CreateLaunchConfigurationTemplate), arg0)
}

// CreateLaunchConfigurationTemplateRequest mocks base method
func (m *MockDrsAPI) CreateLaunchConfigurationTemplateRequest(arg0 *drs.CreateLaunchConfigurationTemplateInput) (*request.Request, *drs.CreateLaunchConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLaunchConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.CreateLaunchConfigurationTemplateOutput)
	return ret0, ret1
}

// CreateLaunchConfigurationTemplateRequest indicates an expected call of CreateLaunchConfigurationTemplateRequest
func (mr *MockDrsAPIMockRecorder) CreateLaunchConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchConfigurationTemplateRequest", reflect.TypeOf((*MockDrsAPI)(nil).CreateLaunchConfigurationTemplateRequest), arg0)
}

// CreateLaunchConfigurationTemplateWithContext mocks base method
func (m *MockDrsAPI) CreateLaunchConfigurationTemplateWithContext(arg0 context.Context, arg1 *drs.CreateLaunchConfigurationTemplateInput, arg2 ...request.Option) (*drs.CreateLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLaunchConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*drs.CreateLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLaunchConfigurationTemplateWithContext indicates an expected call of CreateLaunchConfigurationTemplateWithContext
func (mr *MockDrsAPIMockRecorder) CreateLaunchConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchConfigurationTemplateWithContext", reflect.TypeOf((*MockDrsAPI)(nil).CreateLaunchConfigurationTemplateWithContext), varargs...)
}

// CreateReplicationConfigurationTemplate mocks base method
func (m *MockDrsAPI) CreateReplicationConfigurationTemplate(arg0 *drs.CreateReplicationConfigurationTemplateInput) (*drs.CreateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*drs.CreateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplate indicates an expected call of CreateReplicationConfigurationTemplate
func (mr *MockDrsAPIMockRecorder) CreateReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplate", reflect.TypeOf((*MockDrsAPI)(nil).CreateReplicationConfigurationTemplate), arg0)
}

// CreateReplicationConfigurationTemplateRequest mocks base method
func (m *MockDrsAPI) CreateReplicationConfigurationTemplateRequest(arg0 *drs.CreateReplicationConfigurationTemplateInput) (*request.Request, *drs.CreateReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.CreateReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplateRequest indicates an expected call of CreateReplicationConfigurationTemplateRequest
func (mr *MockDrsAPIMockRecorder) CreateReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockDrsAPI)(nil).CreateReplicationConfigurationTemplateRequest), arg0)
}

// CreateReplicationConfigurationTemplateWithContext mocks base method
func (m *MockDrsAPI) CreateReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *drs.CreateReplicationConfigurationTemplateInput, arg2 ...request.Option) (*drs.CreateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*drs.CreateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplateWithContext indicates an expected call of CreateReplicationConfigurationTemplateWithContext
func (mr *MockDrsAPIMockRecorder) CreateReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockDrsAPI)(nil).CreateReplicationConfigurationTemplateWithContext), varargs...)
}

// CreateSourceNetwork mocks base method
func (m *MockDrsAPI) CreateSourceNetwork(arg0 *drs.CreateSourceNetworkInput) (*drs.CreateSourceNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSourceNetwork", arg0)
	ret0, _ := ret[0].(*drs.CreateSourceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSourceNetwork indicates an expected call of CreateSourceNetwork
func (mr *MockDrsAPIMockRecorder) CreateSourceNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSourceNetwork", reflect.TypeOf((*MockDrsAPI)(nil).CreateSourceNetwork), arg0)
}

// CreateSourceNetworkRequest mocks base method
func (m *MockDrsAPI) CreateSourceNetworkRequest(arg0 *drs.CreateSourceNetworkInput) (*request.Request, *drs.CreateSourceNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSourceNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.CreateSourceNetworkOutput)
	return ret0, ret1
}

// CreateSourceNetworkRequest indicates an expected call of CreateSourceNetworkRequest
func (mr *MockDrsAPIMockRecorder) CreateSourceNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSourceNetworkRequest", reflect.TypeOf((*MockDrsAPI)(nil).CreateSourceNetworkRequest), arg0)
}

// CreateSourceNetworkWithContext mocks base method
func (m *MockDrsAPI) CreateSourceNetworkWithContext(arg0 context.Context, arg1 *drs.CreateSourceNetworkInput, arg2 ...request.Option) (*drs.CreateSourceNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSourceNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*drs.CreateSourceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSourceNetworkWithContext indicates an expected call of CreateSourceNetworkWithContext
func (mr *MockDrsAPIMockRecorder) CreateSourceNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSourceNetworkWithContext", reflect.TypeOf((*MockDrsAPI)(nil).CreateSourceNetworkWithContext), varargs...)
}

// DeleteJob mocks base method
func (m *MockDrsAPI) DeleteJob(arg0 *drs.DeleteJobInput) (*drs.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(*drs.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob
func (mr *MockDrsAPIMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockDrsAPI)(nil).DeleteJob), arg0)
}

// DeleteJobRequest mocks base method
func (m *MockDrsAPI) DeleteJobRequest(arg0 *drs.DeleteJobInput) (*request.Request, *drs.DeleteJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteJobOutput)
	return ret0, ret1
}

// DeleteJobRequest indicates an expected call of DeleteJobRequest
func (mr *MockDrsAPIMockRecorder) DeleteJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteJobRequest), arg0)
}

// DeleteJobWithContext mocks base method
func (m *MockDrsAPI) DeleteJobWithContext(arg0 context.Context, arg1 *drs.DeleteJobInput, arg2 ...request.Option) (*drs.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobWithContext indicates an expected call of DeleteJobWithContext
func (mr *MockDrsAPIMockRecorder) DeleteJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteJobWithContext), varargs...)
}

// DeleteLaunchAction mocks base method
func (m *MockDrsAPI) DeleteLaunchAction(arg0 *drs.DeleteLaunchActionInput) (*drs.DeleteLaunchActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchAction", arg0)
	ret0, _ := ret[0].(*drs.DeleteLaunchActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchAction indicates an expected call of DeleteLaunchAction
func (mr *MockDrsAPIMockRecorder) DeleteLaunchAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchAction", reflect.TypeOf((*MockDrsAPI)(nil).DeleteLaunchAction), arg0)
}

// DeleteLaunchActionRequest mocks base method
func (m *MockDrsAPI) DeleteLaunchActionRequest(arg0 *drs.DeleteLaunchActionInput) (*request.Request, *drs.DeleteLaunchActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteLaunchActionOutput)
	return ret0, ret1
}

// DeleteLaunchActionRequest indicates an expected call of DeleteLaunchActionRequest
func (mr *MockDrsAPIMockRecorder) DeleteLaunchActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchActionRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteLaunchActionRequest), arg0)
}

// DeleteLaunchActionWithContext mocks base method
func (m *MockDrsAPI) DeleteLaunchActionWithContext(arg0 context.Context, arg1 *drs.DeleteLaunchActionInput, arg2 ...request.Option) (*drs.DeleteLaunchActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLaunchActionWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteLaunchActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchActionWithContext indicates an expected call of DeleteLaunchActionWithContext
func (mr *MockDrsAPIMockRecorder) DeleteLaunchActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchActionWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteLaunchActionWithContext), varargs...)
}

// DeleteLaunchConfigurationTemplate mocks base method
func (m *MockDrsAPI) DeleteLaunchConfigurationTemplate(arg0 *drs.DeleteLaunchConfigurationTemplateInput) (*drs.DeleteLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*drs.DeleteLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchConfigurationTemplate indicates an expected call of DeleteLaunchConfigurationTemplate
func (mr *MockDrsAPIMockRecorder) DeleteLaunchConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchConfigurationTemplate", reflect.TypeOf((*MockDrsAPI)(nil).DeleteLaunchConfigurationTemplate), arg0)
}

// DeleteLaunchConfigurationTemplateRequest mocks base method
func (m *MockDrsAPI) DeleteLaunchConfigurationTemplateRequest(arg0 *drs.DeleteLaunchConfigurationTemplateInput) (*request.Request, *drs.DeleteLaunchConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteLaunchConfigurationTemplateOutput)
	return ret0, ret1
}

// DeleteLaunchConfigurationTemplateRequest indicates an expected call of DeleteLaunchConfigurationTemplateRequest
func (mr *MockDrsAPIMockRecorder) DeleteLaunchConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchConfigurationTemplateRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteLaunchConfigurationTemplateRequest), arg0)
}

// DeleteLaunchConfigurationTemplateWithContext mocks base method
func (m *MockDrsAPI) DeleteLaunchConfigurationTemplateWithContext(arg0 context.Context, arg1 *drs.DeleteLaunchConfigurationTemplateInput, arg2 ...request.Option) (*drs.DeleteLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLaunchConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchConfigurationTemplateWithContext indicates an expected call of DeleteLaunchConfigurationTemplateWithContext
func (mr *MockDrsAPIMockRecorder) DeleteLaunchConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchConfigurationTemplateWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteLaunchConfigurationTemplateWithContext), varargs...)
}

// DeleteRecoveryInstance mocks base method
func (m *MockDrsAPI) DeleteRecoveryInstance(arg0 *drs.DeleteRecoveryInstanceInput) (*drs.DeleteRecoveryInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoveryInstance", arg0)
	ret0, _ := ret[0].(*drs.DeleteRecoveryInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecoveryInstance indicates an expected call of DeleteRecoveryInstance
func (mr *MockDrsAPIMockRecorder) DeleteRecoveryInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryInstance", reflect.TypeOf((*MockDrsAPI)(nil).DeleteRecoveryInstance), arg0)
}

// DeleteRecoveryInstanceRequest mocks base method
func (m *MockDrsAPI) DeleteRecoveryInstanceRequest(arg0 *drs.DeleteRecoveryInstanceInput) (*request.Request, *drs.DeleteRecoveryInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoveryInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteRecoveryInstanceOutput)
	return ret0, ret1
}

// DeleteRecoveryInstanceRequest indicates an expected call of DeleteRecoveryInstanceRequest
func (mr *MockDrsAPIMockRecorder) DeleteRecoveryInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryInstanceRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteRecoveryInstanceRequest), arg0)
}

// DeleteRecoveryInstanceWithContext mocks base method
func (m *MockDrsAPI) DeleteRecoveryInstanceWithContext(arg0 context.Context, arg1 *drs.DeleteRecoveryInstanceInput, arg2 ...request.Option) (*drs.DeleteRecoveryInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecoveryInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteRecoveryInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecoveryInstanceWithContext indicates an expected call of DeleteRecoveryInstanceWithContext
func (mr *MockDrsAPIMockRecorder) DeleteRecoveryInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryInstanceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteRecoveryInstanceWithContext), varargs...)
}

// DeleteReplicationConfigurationTemplate mocks base method
func (m *MockDrsAPI) DeleteReplicationConfigurationTemplate(arg0 *drs.DeleteReplicationConfigurationTemplateInput) (*drs.DeleteReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*drs.DeleteReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplate indicates an expected call of DeleteReplicationConfigurationTemplate
func (mr *MockDrsAPIMockRecorder) DeleteReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplate", reflect.TypeOf((*MockDrsAPI)(nil).DeleteReplicationConfigurationTemplate), arg0)
}

// DeleteReplicationConfigurationTemplateRequest mocks base method
func (m *MockDrsAPI) DeleteReplicationConfigurationTemplateRequest(arg0 *drs.DeleteReplicationConfigurationTemplateInput) (*request.Request, *drs.DeleteReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplateRequest indicates an expected call of DeleteReplicationConfigurationTemplateRequest
func (mr *MockDrsAPIMockRecorder) DeleteReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteReplicationConfigurationTemplateRequest), arg0)
}

// DeleteReplicationConfigurationTemplateWithContext mocks base method
func (m *MockDrsAPI) DeleteReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *drs.DeleteReplicationConfigurationTemplateInput, arg2 ...request.Option) (*drs.DeleteReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplateWithContext indicates an expected call of DeleteReplicationConfigurationTemplateWithContext
func (mr *MockDrsAPIMockRecorder) DeleteReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteReplicationConfigurationTemplateWithContext), varargs...)
}

// DeleteSourceNetwork mocks base method
func (m *MockDrsAPI) DeleteSourceNetwork(arg0 *drs.DeleteSourceNetworkInput) (*drs.DeleteSourceNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceNetwork", arg0)
	ret0, _ := ret[0].(*drs.DeleteSourceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceNetwork indicates an expected call of DeleteSourceNetwork
func (mr *MockDrsAPIMockRecorder) DeleteSourceNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceNetwork", reflect.TypeOf((*MockDrsAPI)(nil).DeleteSourceNetwork), arg0)
}

// DeleteSourceNetworkRequest mocks base method
func (m *MockDrsAPI) DeleteSourceNetworkRequest(arg0 *drs.DeleteSourceNetworkInput) (*request.Request, *drs.DeleteSourceNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteSourceNetworkOutput)
	return ret0, ret1
}

// DeleteSourceNetworkRequest indicates an expected call of DeleteSourceNetworkRequest
func (mr *MockDrsAPIMockRecorder) DeleteSourceNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceNetworkRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteSourceNetworkRequest), arg0)
}

// DeleteSourceNetworkWithContext mocks base method
func (m *MockDrsAPI) DeleteSourceNetworkWithContext(arg0 context.Context, arg1 *drs.DeleteSourceNetworkInput, arg2 ...request.Option) (*drs.DeleteSourceNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSourceNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteSourceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceNetworkWithContext indicates an expected call of DeleteSourceNetworkWithContext
func (mr *MockDrsAPIMockRecorder) DeleteSourceNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceNetworkWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteSourceNetworkWithContext), varargs...)
}

// DeleteSourceServer mocks base method
func (m *MockDrsAPI) DeleteSourceServer(arg0 *drs.DeleteSourceServerInput) (*drs.DeleteSourceServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceServer", arg0)
	ret0, _ := ret[0].(*drs.DeleteSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceServer indicates an expected call of DeleteSourceServer
func (mr *MockDrsAPIMockRecorder) DeleteSourceServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServer", reflect.TypeOf((*MockDrsAPI)(nil).DeleteSourceServer), arg0)
}

// DeleteSourceServerRequest mocks base method
func (m *MockDrsAPI) DeleteSourceServerRequest(arg0 *drs.DeleteSourceServerInput) (*request.Request, *drs.DeleteSourceServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteSourceServerOutput)
	return ret0, ret1
}

// DeleteSourceServerRequest indicates an expected call of DeleteSourceServerRequest
func (mr *MockDrsAPIMockRecorder) DeleteSourceServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServerRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteSourceServerRequest), arg0)
}

// DeleteSourceServerWithContext mocks base method
func (m *MockDrsAPI) DeleteSourceServerWithContext(arg0 context.Context, arg1 *drs.DeleteSourceServerInput, arg2 ...request.Option) (*drs.DeleteSourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSourceServerWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceServerWithContext indicates an expected call of DeleteSourceServerWithContext
func (mr *MockDrsAPIMockRecorder) DeleteSourceServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServerWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteSourceServerWithContext), varargs...)
}

// DescribeJobLogItems mocks base method
func (m *MockDrsAPI) DescribeJobLogItems(arg0 *drs.DescribeJobLogItemsInput) (*drs.DescribeJobLogItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItems", arg0)
	ret0, _ := ret[0].(*drs.DescribeJobLogItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobLogItems indicates an expected call of DescribeJobLogItems
func (mr *MockDrsAPIMockRecorder) DescribeJobLogItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItems", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobLogItems), arg0)
}

// DescribeJobLogItemsPages mocks base method
func (m *MockDrsAPI) DescribeJobLogItemsPages(arg0 *drs.DescribeJobLogItemsInput, arg1 func(*drs.DescribeJobLogItemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobLogItemsPages indicates an expected call of DescribeJobLogItemsPages
func (mr *MockDrsAPIMockRecorder) DescribeJobLogItemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobLogItemsPages), arg0, arg1)
}

// DescribeJobLogItemsPagesWithContext mocks base method
func (m *MockDrsAPI) DescribeJobLogItemsPagesWithContext(arg0 context.Context, arg1 *drs.DescribeJobLogItemsInput, arg2 func(*drs.DescribeJobLogItemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobLogItemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobLogItemsPagesWithContext indicates an expected call of DescribeJobLogItemsPagesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeJobLogItemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobLogItemsPagesWithContext), varargs...)
}

// DescribeJobLogItemsRequest mocks base method
func (m *MockDrsAPI) DescribeJobLogItemsRequest(arg0 *drs.DescribeJobLogItemsInput) (*request.Request, *drs.DescribeJobLogItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeJobLogItemsOutput)
	return ret0, ret1
}

// DescribeJobLogItemsRequest indicates an expected call of DescribeJobLogItemsRequest
func (mr *MockDrsAPIMockRecorder) DescribeJobLogItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobLogItemsRequest), arg0)
}

// DescribeJobLogItemsWithContext mocks base method
func (m *MockDrsAPI) DescribeJobLogItemsWithContext(arg0 context.Context, arg1 *drs.DescribeJobLogItemsInput, arg2 ...request.Option) (*drs.DescribeJobLogItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobLogItemsWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeJobLogItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobLogItemsWithContext indicates an expected call of DescribeJobLogItemsWithContext
func (mr *MockDrsAPIMockRecorder) DescribeJobLogItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobLogItemsWithContext), varargs...)
}

// DescribeJobs mocks base method
func (m *MockDrsAPI) DescribeJobs(arg0 *drs.DescribeJobsInput) (*drs.DescribeJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobs", arg0)
	ret0, _ := ret[0].(*drs.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobs indicates an expected call of DescribeJobs
func (mr *MockDrsAPIMockRecorder) DescribeJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobs", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobs), arg0)
}

// DescribeJobsPages mocks base method
func (m *MockDrsAPI) DescribeJobsPages(arg0 *drs.DescribeJobsInput, arg1 func(*drs.DescribeJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobsPages indicates an expected call of DescribeJobsPages
func (mr *MockDrsAPIMockRecorder) DescribeJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobsPages), arg0, arg1)
}

// DescribeJobsPagesWithContext mocks base method
func (m *MockDrsAPI) DescribeJobsPagesWithContext(arg0 context.Context, arg1 *drs.DescribeJobsInput, arg2 func(*drs.DescribeJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobsPagesWithContext indicates an expected call of DescribeJobsPagesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobsPagesWithContext), varargs...)
}

// DescribeJobsRequest mocks base method
func (m *MockDrsAPI) DescribeJobsRequest(arg0 *drs.DescribeJobsInput) (*request.Request, *drs.DescribeJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeJobsOutput)
	return ret0, ret1
}

// DescribeJobsRequest indicates an expected call of DescribeJobsRequest
func (mr *MockDrsAPIMockRecorder) DescribeJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobsRequest), arg0)
}

// DescribeJobsWithContext mocks base method
func (m *MockDrsAPI) DescribeJobsWithContext(arg0 context.Context, arg1 *drs.DescribeJobsInput, arg2 ...request.Option) (*drs.DescribeJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobsWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobsWithContext indicates an expected call of DescribeJobsWithContext
func (mr *MockDrsAPIMockRecorder) DescribeJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobsWithContext), varargs...)
}

// DescribeLaunchConfigurationTemplates mocks base method
func (m *MockDrsAPI) DescribeLaunchConfigurationTemplates(arg0 *drs.DescribeLaunchConfigurationTemplatesInput) (*drs.DescribeLaunchConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLaunchConfigurationTemplates", arg0)
	ret0, _ := ret[0].(*drs.DescribeLaunchConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLaunchConfigurationTemplates indicates an expected call of DescribeLaunchConfigurationTemplates
func (mr *MockDrsAPIMockRecorder) DescribeLaunchConfigurationTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchConfigurationTemplates", reflect.TypeOf((*MockDrsAPI)(nil).DescribeLaunchConfigurationTemplates), arg0)
}

// DescribeLaunchConfigurationTemplatesPages mocks base method
func (m *MockDrsAPI) DescribeLaunchConfigurationTemplatesPages(arg0 *drs.DescribeLaunchConfigurationTemplatesInput, arg1 func(*drs.DescribeLaunchConfigurationTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLaunchConfigurationTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeLaunchConfigurationTemplatesPages indicates an expected call of DescribeLaunchConfigurationTemplatesPages
func (mr *MockDrsAPIMockRecorder) DescribeLaunchConfigurationTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchConfigurationTemplatesPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeLaunchConfigurationTemplatesPages), arg0, arg1)
}

// DescribeLaunchConfigurationTemplatesPagesWithContext mocks base method
func (m *MockDrsAPI) DescribeLaunchConfigurationTemplatesPagesWithContext(arg0 context.Context, arg1 *drs.DescribeLaunchConfigurationTemplatesInput, arg2 func(*drs.DescribeLaunchConfigurationTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLaunchConfigurationTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeLaunchConfigurationTemplatesPagesWithContext indicates an expected call of DescribeLaunchConfigurationTemplatesPagesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeLaunchConfigurationTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchConfigurationTemplatesPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeLaunchConfigurationTemplatesPagesWithContext), varargs...)
}

// DescribeLaunchConfigurationTemplatesRequest mocks base method
func (m *MockDrsAPI) DescribeLaunchConfigurationTemplatesRequest(arg0 *drs.DescribeLaunchConfigurationTemplatesInput) (*request.Request, *drs.DescribeLaunchConfigurationTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLaunchConfigurationTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeLaunchConfigurationTemplatesOutput)
	return ret0, ret1
}

// DescribeLaunchConfigurationTemplatesRequest indicates an expected call of DescribeLaunchConfigurationTemplatesRequest
func (mr *MockDrsAPIMockRecorder) DescribeLaunchConfigurationTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchConfigurationTemplatesRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeLaunchConfigurationTemplatesRequest), arg0)
}

// DescribeLaunchConfigurationTemplatesWithContext mocks base method
func (m *MockDrsAPI) DescribeLaunchConfigurationTemplatesWithContext(arg0 context.Context, arg1 *drs.DescribeLaunchConfigurationTemplatesInput, arg2 ...request.Option) (*drs.DescribeLaunchConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLaunchConfigurationTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeLaunchConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLaunchConfigurationTemplatesWithContext indicates an expected call of DescribeLaunchConfigurationTemplatesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeLaunchConfigurationTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchConfigurationTemplatesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeLaunchConfigurationTemplatesWithContext), varargs...)
}

// DescribeRecoveryInstances mocks base method
func (m *MockDrsAPI) DescribeRecoveryInstances(arg0 *drs.DescribeRecoveryInstancesInput) (*drs.DescribeRecoveryInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoveryInstances", arg0)
	ret0, _ := ret[0].(*drs.DescribeRecoveryInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecoveryInstances indicates an expected call of DescribeRecoveryInstances
func (mr *MockDrsAPIMockRecorder) DescribeRecoveryInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryInstances", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoveryInstances), arg0)
}

// DescribeRecoveryInstancesPages mocks base method
func (m *MockDrsAPI) DescribeRecoveryInstancesPages(arg0 *drs.DescribeRecoveryInstancesInput, arg1 func(*drs.DescribeRecoveryInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoveryInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRecoveryInstancesPages indicates an expected call of DescribeRecoveryInstancesPages
func (mr *MockDrsAPIMockRecorder) DescribeRecoveryInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryInstancesPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoveryInstancesPages), arg0, arg1)
}

// DescribeRecoveryInstancesPagesWithContext mocks base method
func (m *MockDrsAPI) DescribeRecoveryInstancesPagesWithContext(arg0 context.Context, arg1 *drs.DescribeRecoveryInstancesInput, arg2 func(*drs.DescribeRecoveryInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecoveryInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRecoveryInstancesPagesWithContext indicates an expected call of DescribeRecoveryInstancesPagesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeRecoveryInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryInstancesPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoveryInstancesPagesWithContext), varargs...)
}

// DescribeRecoveryInstancesRequest mocks base method
func (m *MockDrsAPI) DescribeRecoveryInstancesRequest(arg0 *drs.DescribeRecoveryInstancesInput) (*request.Request, *drs.DescribeRecoveryInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoveryInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeRecoveryInstancesOutput)
	return ret0, ret1
}

// DescribeRecoveryInstancesRequest indicates an expected call of DescribeRecoveryInstancesRequest
func (mr *MockDrsAPIMockRecorder) DescribeRecoveryInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryInstancesRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoveryInstancesRequest), arg0)
}

// DescribeRecoveryInstancesWithContext mocks base method
func (m *MockDrsAPI) DescribeRecoveryInstancesWithContext(arg0 context.Context, arg1 *drs.DescribeRecoveryInstancesInput, arg2 ...request.Option) (*drs.DescribeRecoveryInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecoveryInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeRecoveryInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecoveryInstancesWithContext indicates an expected call of DescribeRecoveryInstancesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeRecoveryInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryInstancesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoveryInstancesWithContext), varargs...)
}

// DescribeRecoverySnapshots mocks base method
func (m *MockDrsAPI) DescribeRecoverySnapshots(arg0 *drs.DescribeRecoverySnapshotsInput) (*drs.DescribeRecoverySnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoverySnapshots", arg0)
	ret0, _ := ret[0].(*drs.DescribeRecoverySnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecoverySnapshots indicates an expected call of DescribeRecoverySnapshots
func (mr *MockDrsAPIMockRecorder) DescribeRecoverySnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoverySnapshots", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoverySnapshots), arg0)
}

// DescribeRecoverySnapshotsPages mocks base method
func (m *MockDrsAPI) DescribeRecoverySnapshotsPages(arg0 *drs.DescribeRecoverySnapshotsInput, arg1 func(*drs.DescribeRecoverySnapshotsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoverySnapshotsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRecoverySnapshotsPages indicates an expected call of DescribeRecoverySnapshotsPages
func (mr *MockDrsAPIMockRecorder) DescribeRecoverySnapshotsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoverySnapshotsPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoverySnapshotsPages), arg0, arg1)
}

// DescribeRecoverySnapshotsPagesWithContext mocks base method
func (m *MockDrsAPI) DescribeRecoverySnapshotsPagesWithContext(arg0 context.Context, arg1 *drs.DescribeRecoverySnapshotsInput, arg2 func(*drs.DescribeRecoverySnapshotsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecoverySnapshotsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRecoverySnapshotsPagesWithContext indicates an expected call of DescribeRecoverySnapshotsPagesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeRecoverySnapshotsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoverySnapshotsPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoverySnapshotsPagesWithContext), varargs...)
}

// DescribeRecoverySnapshotsRequest mocks base method
func (m *MockDrsAPI) DescribeRecoverySnapshotsRequest(arg0 *drs.DescribeRecoverySnapshotsInput) (*request.Request, *drs.DescribeRecoverySnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoverySnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeRecoverySnapshotsOutput)
	return ret0, ret1
}

// DescribeRecoverySnapshotsRequest indicates an expected call of DescribeRecoverySnapshotsRequest
func (mr *MockDrsAPIMockRecorder) DescribeRecoverySnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoverySnapshotsRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoverySnapshotsRequest), arg0)
}

// DescribeRecoverySnapshotsWithContext mocks base method
func (m *MockDrsAPI) DescribeRecoverySnapshotsWithContext(arg0 context.Context, arg1 *drs.DescribeRecoverySnapshotsInput, arg2 ...request.Option) (*drs.DescribeRecoverySnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecoverySnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeRecoverySnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecoverySnapshotsWithContext indicates an expected call of DescribeRecoverySnapshotsWithContext
func (mr *MockDrsAPIMockRecorder) DescribeRecoverySnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoverySnapshotsWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoverySnapshotsWithContext), varargs...)
}

// DescribeReplicationConfigurationTemplates mocks base method
func (m *MockDrsAPI) DescribeReplicationConfigurationTemplates(arg0 *drs.DescribeReplicationConfigurationTemplatesInput) (*drs.DescribeReplicationConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplates", arg0)
	ret0, _ := ret[0].(*drs.DescribeReplicationConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplates indicates an expected call of DescribeReplicationConfigurationTemplates
func (mr *MockDrsAPIMockRecorder) DescribeReplicationConfigurationTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplates", reflect.TypeOf((*MockDrsAPI)(nil).DescribeReplicationConfigurationTemplates), arg0)
}

// DescribeReplicationConfigurationTemplatesPages mocks base method
func (m *MockDrsAPI) DescribeReplicationConfigurationTemplatesPages(arg0 *drs.DescribeReplicationConfigurationTemplatesInput, arg1 func(*drs.DescribeReplicationConfigurationTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationConfigurationTemplatesPages indicates an expected call of DescribeReplicationConfigurationTemplatesPages
func (mr *MockDrsAPIMockRecorder) DescribeReplicationConfigurationTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeReplicationConfigurationTemplatesPages), arg0, arg1)
}

// DescribeReplicationConfigurationTemplatesPagesWithContext mocks base method
func (m *MockDrsAPI) DescribeReplicationConfigurationTemplatesPagesWithContext(arg0 context.Context, arg1 *drs.DescribeReplicationConfigurationTemplatesInput, arg2 func(*drs.DescribeReplicationConfigurationTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationConfigurationTemplatesPagesWithContext indicates an expected call of DescribeReplicationConfigurationTemplatesPagesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeReplicationConfigurationTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeReplicationConfigurationTemplatesPagesWithContext), varargs...)
}

// DescribeReplicationConfigurationTemplatesRequest mocks base method
func (m *MockDrsAPI) DescribeReplicationConfigurationTemplatesRequest(arg0 *drs.DescribeReplicationConfigurationTemplatesInput) (*request.Request, *drs.DescribeReplicationConfigurationTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeReplicationConfigurationTemplatesOutput)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplatesRequest indicates an expected call of DescribeReplicationConfigurationTemplatesRequest
func (mr *MockDrsAPIMockRecorder) DescribeReplicationConfigurationTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeReplicationConfigurationTemplatesRequest), arg0)
}

// DescribeReplicationConfigurationTemplatesWithContext mocks base method
func (m *MockDrsAPI) DescribeReplicationConfigurationTemplatesWithContext(arg0 context.Context, arg1 *drs.DescribeReplicationConfigurationTemplatesInput, arg2 ...request.Option) (*drs.DescribeReplicationConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeReplicationConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplatesWithContext indicates an expected call of DescribeReplicationConfigurationTemplatesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeReplicationConfigurationTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeReplicationConfigurationTemplatesWithContext), varargs...)
}

// DescribeSourceNetworks mocks base method
func (m *MockDrsAPI) DescribeSourceNetworks(arg0 *drs.DescribeSourceNetworksInput) (*drs.DescribeSourceNetworksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceNetworks", arg0)
	ret0, _ := ret[0].(*drs.DescribeSourceNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceNetworks indicates an expected call of DescribeSourceNetworks
func (mr *MockDrsAPIMockRecorder) DescribeSourceNetworks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceNetworks", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceNetworks), arg0)
}

// DescribeSourceNetworksPages mocks base method
func (m *MockDrsAPI) DescribeSourceNetworksPages(arg0 *drs.DescribeSourceNetworksInput, arg1 func(*drs.DescribeSourceNetworksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceNetworksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSourceNetworksPages indicates an expected call of DescribeSourceNetworksPages
func (mr *MockDrsAPIMockRecorder) DescribeSourceNetworksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceNetworksPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceNetworksPages), arg0, arg1)
}

// DescribeSourceNetworksPagesWithContext mocks base method
func (m *MockDrsAPI) DescribeSourceNetworksPagesWithContext(arg0 context.Context, arg1 *drs.DescribeSourceNetworksInput, arg2 func(*drs.DescribeSourceNetworksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceNetworksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSourceNetworksPagesWithContext indicates an expected call of DescribeSourceNetworksPagesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeSourceNetworksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceNetworksPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceNetworksPagesWithContext), varargs...)
}

// DescribeSourceNetworksRequest mocks base method
func (m *MockDrsAPI) DescribeSourceNetworksRequest(arg0 *drs.DescribeSourceNetworksInput) (*request.Request, *drs.DescribeSourceNetworksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceNetworksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeSourceNetworksOutput)
	return ret0, ret1
}

// DescribeSourceNetworksRequest indicates an expected call of DescribeSourceNetworksRequest
func (mr *MockDrsAPIMockRecorder) DescribeSourceNetworksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceNetworksRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceNetworksRequest), arg0)
}

// DescribeSourceNetworksWithContext mocks base method
func (m *MockDrsAPI) DescribeSourceNetworksWithContext(arg0 context.Context, arg1 *drs.DescribeSourceNetworksInput, arg2 ...request.Option) (*drs.DescribeSourceNetworksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceNetworksWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeSourceNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceNetworksWithContext indicates an expected call of DescribeSourceNetworksWithContext
func (mr *MockDrsAPIMockRecorder) DescribeSourceNetworksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceNetworksWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceNetworksWithContext), varargs...)
}

// DescribeSourceServers mocks base method
func (m *MockDrsAPI) DescribeSourceServers(arg0 *drs.DescribeSourceServersInput) (*drs.DescribeSourceServersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServers", arg0)
	ret0, _ := ret[0].(*drs.DescribeSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceServers indicates an expected call of DescribeSourceServers
func (mr *MockDrsAPIMockRecorder) DescribeSourceServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServers", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceServers), arg0)
}

// DescribeSourceServersPages mocks base method
func (m *MockDrsAPI) DescribeSourceServersPages(arg0 *drs.DescribeSourceServersInput, arg1 func(*drs.DescribeSourceServersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSourceServersPages indicates an expected call of DescribeSourceServersPages
func (mr *MockDrsAPIMockRecorder) DescribeSourceServersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceServersPages), arg0, arg1)
}

// DescribeSourceServersPagesWithContext mocks base method
func (m *MockDrsAPI) DescribeSourceServersPagesWithContext(arg0 context.Context, arg1 *drs.DescribeSourceServersInput, arg2 func(*drs.DescribeSourceServersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceServersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSourceServersPagesWithContext indicates an expected call of DescribeSourceServersPagesWithContext
func (mr *MockDrsAPIMockRecorder) DescribeSourceServersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceServersPagesWithContext), varargs...)
}

// DescribeSourceServersRequest mocks base method
func (m *MockDrsAPI) DescribeSourceServersRequest(arg0 *drs.DescribeSourceServersInput) (*request.Request, *drs.DescribeSourceServersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeSourceServersOutput)
	return ret0, ret1
}

// DescribeSourceServersRequest indicates an expected call of DescribeSourceServersRequest
func (mr *MockDrsAPIMockRecorder) DescribeSourceServersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceServersRequest), arg0)
}

// DescribeSourceServersWithContext mocks base method
func (m *MockDrsAPI) DescribeSourceServersWithContext(arg0 context.Context, arg1 *drs.DescribeSourceServersInput, arg2 ...request.Option) (*drs.DescribeSourceServersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceServersWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceServersWithContext indicates an expected call of DescribeSourceServersWithContext
func (mr *MockDrsAPIMockRecorder) DescribeSourceServersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceServersWithContext), varargs...)
}

// DisconnectRecoveryInstance mocks base method
func (m *MockDrsAPI) DisconnectRecoveryInstance(arg0 *drs.DisconnectRecoveryInstanceInput) (*drs.DisconnectRecoveryInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectRecoveryInstance", arg0)
	ret0, _ := ret[0].(*drs.DisconnectRecoveryInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectRecoveryInstance indicates an expected call of DisconnectRecoveryInstance
func (mr *MockDrsAPIMockRecorder) DisconnectRecoveryInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectRecoveryInstance", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectRecoveryInstance), arg0)
}

// DisconnectRecoveryInstanceRequest mocks base method
func (m *MockDrsAPI) DisconnectRecoveryInstanceRequest(arg0 *drs.DisconnectRecoveryInstanceInput) (*request.Request, *drs.DisconnectRecoveryInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectRecoveryInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DisconnectRecoveryInstanceOutput)
	return ret0, ret1
}

// DisconnectRecoveryInstanceRequest indicates an expected call of DisconnectRecoveryInstanceRequest
func (mr *MockDrsAPIMockRecorder) DisconnectRecoveryInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectRecoveryInstanceRequest", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectRecoveryInstanceRequest), arg0)
}

// DisconnectRecoveryInstanceWithContext mocks base method
func (m *MockDrsAPI) DisconnectRecoveryInstanceWithContext(arg0 context.Context, arg1 *drs.DisconnectRecoveryInstanceInput, arg2 ...request.Option) (*drs.DisconnectRecoveryInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectRecoveryInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DisconnectRecoveryInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectRecoveryInstanceWithContext indicates an expected call of DisconnectRecoveryInstanceWithContext
func (mr *MockDrsAPIMockRecorder) DisconnectRecoveryInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectRecoveryInstanceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectRecoveryInstanceWithContext), varargs...)
}

// DisconnectSourceServer mocks base method
func (m *MockDrsAPI) DisconnectSourceServer(arg0 *drs.DisconnectSourceServerInput) (*drs.DisconnectSourceServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectSourceServer", arg0)
	ret0, _ := ret[0].(*drs.DisconnectSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectSourceServer indicates an expected call of DisconnectSourceServer
func (mr *MockDrsAPIMockRecorder) DisconnectSourceServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectSourceServer", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectSourceServer), arg0)
}

// DisconnectSourceServerRequest mocks base method
func (m *MockDrsAPI) DisconnectSourceServerRequest(arg0 *drs.DisconnectSourceServerInput) (*request.Request, *drs.DisconnectSourceServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectSourceServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DisconnectSourceServerOutput)
	return ret0, ret1
}

// DisconnectSourceServerRequest indicates an expected call of DisconnectSourceServerRequest
func (mr *MockDrsAPIMockRecorder) DisconnectSourceServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectSourceServerRequest", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectSourceServerRequest), arg0)
}

// DisconnectSourceServerWithContext mocks base method
func (m *MockDrsAPI) DisconnectSourceServerWithContext(arg0 context.Context, arg1 *drs.DisconnectSourceServerInput, arg2 ...request.Option) (*drs.DisconnectSourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectSourceServerWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DisconnectSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectSourceServerWithContext indicates an expected call of DisconnectSourceServerWithContext
func (mr *MockDrsAPIMockRecorder) DisconnectSourceServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectSourceServerWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectSourceServerWithContext), varargs...)
}

// ExportSourceNetworkCfnTemplate mocks base method
func (m *MockDrsAPI) ExportSourceNetworkCfnTemplate(arg0 *drs.ExportSourceNetworkCfnTemplateInput) (*drs.ExportSourceNetworkCfnTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportSourceNetworkCfnTemplate", arg0)
	ret0, _ := ret[0].(*drs.ExportSourceNetworkCfnTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSourceNetworkCfnTemplate indicates an expected call of ExportSourceNetworkCfnTemplate
func (mr *MockDrsAPIMockRecorder) ExportSourceNetworkCfnTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSourceNetworkCfnTemplate", reflect.TypeOf((*MockDrsAPI)(nil).ExportSourceNetworkCfnTemplate), arg0)
}

// ExportSourceNetworkCfnTemplateRequest mocks base method
func (m *MockDrsAPI) ExportSourceNetworkCfnTemplateRequest(arg0 *drs.ExportSourceNetworkCfnTemplateInput) (*request.Request, *drs.ExportSourceNetworkCfnTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportSourceNetworkCfnTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.ExportSourceNetworkCfnTemplateOutput)
	return ret0, ret1
}

// ExportSourceNetworkCfnTemplateRequest indicates an expected call of ExportSourceNetworkCfnTemplateRequest
func (mr *MockDrsAPIMockRecorder) ExportSourceNetworkCfnTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSourceNetworkCfnTemplateRequest", reflect.TypeOf((*MockDrsAPI)(nil).ExportSourceNetworkCfnTemplateRequest), arg0)
}

// ExportSourceNetworkCfnTemplateWithContext mocks base method
func (m *MockDrsAPI) ExportSourceNetworkCfnTemplateWithContext(arg0 context.Context, arg1 *drs.ExportSourceNetworkCfnTemplateInput, arg2 ...request.Option) (*drs.ExportSourceNetworkCfnTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportSourceNetworkCfnTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*drs.ExportSourceNetworkCfnTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSourceNetworkCfnTemplateWithContext indicates an expected call of ExportSourceNetworkCfnTemplateWithContext
func (mr *MockDrsAPIMockRecorder) ExportSourceNetworkCfnTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSourceNetworkCfnTemplateWithContext", reflect.TypeOf((*MockDrsAPI)(nil).ExportSourceNetworkCfnTemplateWithContext), varargs...)
}

// GetFailbackReplicationConfiguration mocks base method
func (m *MockDrsAPI) GetFailbackReplicationConfiguration(arg0 *drs.GetFailbackReplicationConfigurationInput) (*drs.GetFailbackReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailbackReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*drs.GetFailbackReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailbackReplicationConfiguration indicates an expected call of GetFailbackReplicationConfiguration
func (mr *MockDrsAPIMockRecorder) GetFailbackReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailbackReplicationConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).GetFailbackReplicationConfiguration), arg0)
}

// GetFailbackReplicationConfigurationRequest mocks base method
func (m *MockDrsAPI) GetFailbackReplicationConfigurationRequest(arg0 *drs.GetFailbackReplicationConfigurationInput) (*request.Request, *drs.GetFailbackReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailbackReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.GetFailbackReplicationConfigurationOutput)
	return ret0, ret1
}

// GetFailbackReplicationConfigurationRequest indicates an expected call of GetFailbackReplicationConfigurationRequest
func (mr *MockDrsAPIMockRecorder) GetFailbackReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailbackReplicationConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).GetFailbackReplicationConfigurationRequest), arg0)
}

// GetFailbackReplicationConfigurationWithContext mocks base method
func (m *MockDrsAPI) GetFailbackReplicationConfigurationWithContext(arg0 context.Context, arg1 *drs.GetFailbackReplicationConfigurationInput, arg2 ...request.Option) (*drs.GetFailbackReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFailbackReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.GetFailbackReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailbackReplicationConfigurationWithContext indicates an expected call of GetFailbackReplicationConfigurationWithContext
func (mr *MockDrsAPIMockRecorder) GetFailbackReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailbackReplicationConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).GetFailbackReplicationConfigurationWithContext), varargs...)
}

// GetLaunchConfiguration mocks base method
func (m *MockDrsAPI) GetLaunchConfiguration(arg0 *drs.GetLaunchConfigurationInput) (*drs.GetLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*drs.GetLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchConfiguration indicates an expected call of GetLaunchConfiguration
func (mr *MockDrsAPIMockRecorder) GetLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).GetLaunchConfiguration), arg0)
}

// GetLaunchConfigurationRequest mocks base method
func (m *MockDrsAPI) GetLaunchConfigurationRequest(arg0 *drs.GetLaunchConfigurationInput) (*request.Request, *drs.GetLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.GetLaunchConfigurationOutput)
	return ret0, ret1
}

// GetLaunchConfigurationRequest indicates an expected call of GetLaunchConfigurationRequest
func (mr *MockDrsAPIMockRecorder) GetLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).GetLaunchConfigurationRequest), arg0)
}

// GetLaunchConfigurationWithContext mocks base method
func (m *MockDrsAPI) GetLaunchConfigurationWithContext(arg0 context.Context, arg1 *drs.GetLaunchConfigurationInput, arg2 ...request.Option) (*drs.GetLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.GetLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchConfigurationWithContext indicates an expected call of GetLaunchConfigurationWithContext
func (mr *MockDrsAPIMockRecorder) GetLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).GetLaunchConfigurationWithContext), varargs...)
}

// GetReplicationConfiguration mocks base method
func (m *MockDrsAPI) GetReplicationConfiguration(arg0 *drs.GetReplicationConfigurationInput) (*drs.GetReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*drs.GetReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationConfiguration indicates an expected call of GetReplicationConfiguration
func (mr *MockDrsAPIMockRecorder) GetReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).GetReplicationConfiguration), arg0)
}

// GetReplicationConfigurationRequest mocks base method
func (m *MockDrsAPI) GetReplicationConfigurationRequest(arg0 *drs.GetReplicationConfigurationInput) (*request.Request, *drs.GetReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.GetReplicationConfigurationOutput)
	return ret0, ret1
}

// GetReplicationConfigurationRequest indicates an expected call of GetReplicationConfigurationRequest
func (mr *MockDrsAPIMockRecorder) GetReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).GetReplicationConfigurationRequest), arg0)
}

// GetReplicationConfigurationWithContext mocks base method
func (m *MockDrsAPI) GetReplicationConfigurationWithContext(arg0 context.Context, arg1 *drs.GetReplicationConfigurationInput, arg2 ...request.Option) (*drs.GetReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.GetReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationConfigurationWithContext indicates an expected call of GetReplicationConfigurationWithContext
func (mr *MockDrsAPIMockRecorder) GetReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).GetReplicationConfigurationWithContext), varargs...)
}

// InitializeService mocks base method
func (m *MockDrsAPI) InitializeService(arg0 *drs.InitializeServiceInput) (*drs.InitializeServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeService", arg0)
	ret0, _ := ret[0].(*drs.InitializeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeService indicates an expected call of InitializeService
func (mr *MockDrsAPIMockRecorder) InitializeService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeService", reflect.TypeOf((*MockDrsAPI)(nil).InitializeService), arg0)
}

// InitializeServiceRequest mocks base method
func (m *MockDrsAPI) InitializeServiceRequest(arg0 *drs.InitializeServiceInput) (*request.Request, *drs.InitializeServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.InitializeServiceOutput)
	return ret0, ret1
}

// InitializeServiceRequest indicates an expected call of InitializeServiceRequest
func (mr *MockDrsAPIMockRecorder) InitializeServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeServiceRequest", reflect.TypeOf((*MockDrsAPI)(nil).InitializeServiceRequest), arg0)
}

// InitializeServiceWithContext mocks base method
func (m *MockDrsAPI) InitializeServiceWithContext(arg0 context.Context, arg1 *drs.InitializeServiceInput, arg2 ...request.Option) (*drs.InitializeServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitializeServiceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.InitializeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeServiceWithContext indicates an expected call of InitializeServiceWithContext
func (mr *MockDrsAPIMockRecorder) InitializeServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeServiceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).InitializeServiceWithContext), varargs...)
}

// ListExtensibleSourceServers mocks base method
func (m *MockDrsAPI) ListExtensibleSourceServers(arg0 *drs.ListExtensibleSourceServersInput) (*drs.ListExtensibleSourceServersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensibleSourceServers", arg0)
	ret0, _ := ret[0].(*drs.ListExtensibleSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensibleSourceServers indicates an expected call of ListExtensibleSourceServers
func (mr *MockDrsAPIMockRecorder) ListExtensibleSourceServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensibleSourceServers", reflect.TypeOf((*MockDrsAPI)(nil).ListExtensibleSourceServers), arg0)
}

// ListExtensibleSourceServersPages mocks base method
func (m *MockDrsAPI) ListExtensibleSourceServersPages(arg0 *drs.ListExtensibleSourceServersInput, arg1 func(*drs.ListExtensibleSourceServersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensibleSourceServersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExtensibleSourceServersPages indicates an expected call of ListExtensibleSourceServersPages
func (mr *MockDrsAPIMockRecorder) ListExtensibleSourceServersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensibleSourceServersPages", reflect.TypeOf((*MockDrsAPI)(nil).ListExtensibleSourceServersPages), arg0, arg1)
}

// ListExtensibleSourceServersPagesWithContext mocks base method
func (m *MockDrsAPI) ListExtensibleSourceServersPagesWithContext(arg0 context.Context, arg1 *drs.ListExtensibleSourceServersInput, arg2 func(*drs.ListExtensibleSourceServersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtensibleSourceServersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExtensibleSourceServersPagesWithContext indicates an expected call of ListExtensibleSourceServersPagesWithContext
func (mr *MockDrsAPIMockRecorder) ListExtensibleSourceServersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensibleSourceServersPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).ListExtensibleSourceServersPagesWithContext), varargs...)
}

// ListExtensibleSourceServersRequest mocks base method
func (m *MockDrsAPI) ListExtensibleSourceServersRequest(arg0 *drs.ListExtensibleSourceServersInput) (*request.Request, *drs.ListExtensibleSourceServersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensibleSourceServersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.ListExtensibleSourceServersOutput)
	return ret0, ret1
}

// ListExtensibleSourceServersRequest indicates an expected call of ListExtensibleSourceServersRequest
func (mr *MockDrsAPIMockRecorder) ListExtensibleSourceServersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensibleSourceServersRequest", reflect.TypeOf((*MockDrsAPI)(nil).ListExtensibleSourceServersRequest), arg0)
}

// ListExtensibleSourceServersWithContext mocks base method
func (m *MockDrsAPI) ListExtensibleSourceServersWithContext(arg0 context.Context, arg1 *drs.ListExtensibleSourceServersInput, arg2 ...request.Option) (*drs.ListExtensibleSourceServersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtensibleSourceServersWithContext", varargs...)
	ret0, _ := ret[0].(*drs.ListExtensibleSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensibleSourceServersWithContext indicates an expected call of ListExtensibleSourceServersWithContext
func (mr *MockDrsAPIMockRecorder) ListExtensibleSourceServersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensibleSourceServersWithContext", reflect.TypeOf((*MockDrsAPI)(nil).ListExtensibleSourceServersWithContext), varargs...)
}

// ListLaunchActions mocks base method
func (m *MockDrsAPI) ListLaunchActions(arg0 *drs.ListLaunchActionsInput) (*drs.ListLaunchActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchActions", arg0)
	ret0, _ := ret[0].(*drs.ListLaunchActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchActions indicates an expected call of ListLaunchActions
func (mr *MockDrsAPIMockRecorder) ListLaunchActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchActions", reflect.TypeOf((*MockDrsAPI)(nil).ListLaunchActions), arg0)
}

// ListLaunchActionsPages mocks base method
func (m *MockDrsAPI) ListLaunchActionsPages(arg0 *drs.ListLaunchActionsInput, arg1 func(*drs.ListLaunchActionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchActionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLaunchActionsPages indicates an expected call of ListLaunchActionsPages
func (mr *MockDrsAPIMockRecorder) ListLaunchActionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchActionsPages", reflect.TypeOf((*MockDrsAPI)(nil).ListLaunchActionsPages), arg0, arg1)
}

// ListLaunchActionsPagesWithContext mocks base method
func (m *MockDrsAPI) ListLaunchActionsPagesWithContext(arg0 context.Context, arg1 *drs.ListLaunchActionsInput, arg2 func(*drs.ListLaunchActionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchActionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLaunchActionsPagesWithContext indicates an expected call of ListLaunchActionsPagesWithContext
func (mr *MockDrsAPIMockRecorder) ListLaunchActionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchActionsPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).ListLaunchActionsPagesWithContext), varargs...)
}

// ListLaunchActionsRequest mocks base method
func (m *MockDrsAPI) ListLaunchActionsRequest(arg0 *drs.ListLaunchActionsInput) (*request.Request, *drs.ListLaunchActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.ListLaunchActionsOutput)
	return ret0, ret1
}

// ListLaunchActionsRequest indicates an expected call of ListLaunchActionsRequest
func (mr *MockDrsAPIMockRecorder) ListLaunchActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchActionsRequest", reflect.TypeOf((*MockDrsAPI)(nil).ListLaunchActionsRequest), arg0)
}

// ListLaunchActionsWithContext mocks base method
func (m *MockDrsAPI) ListLaunchActionsWithContext(arg0 context.Context, arg1 *drs.ListLaunchActionsInput, arg2 ...request.Option) (*drs.ListLaunchActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchActionsWithContext", varargs...)
	ret0, _ := ret[0].(*drs.ListLaunchActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchActionsWithContext indicates an expected call of ListLaunchActionsWithContext
func (mr *MockDrsAPIMockRecorder) ListLaunchActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchActionsWithContext", reflect.TypeOf((*MockDrsAPI)(nil).ListLaunchActionsWithContext), varargs...)
}

// ListStagingAccounts mocks base method
func (m *MockDrsAPI) ListStagingAccounts(arg0 *drs.ListStagingAccountsInput) (*drs.ListStagingAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStagingAccounts", arg0)
	ret0, _ := ret[0].(*drs.ListStagingAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStagingAccounts indicates an expected call of ListStagingAccounts
func (mr *MockDrsAPIMockRecorder) ListStagingAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagingAccounts", reflect.TypeOf((*MockDrsAPI)(nil).ListStagingAccounts), arg0)
}

// ListStagingAccountsPages mocks base method
func (m *MockDrsAPI) ListStagingAccountsPages(arg0 *drs.ListStagingAccountsInput, arg1 func(*drs.ListStagingAccountsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStagingAccountsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStagingAccountsPages indicates an expected call of ListStagingAccountsPages
func (mr *MockDrsAPIMockRecorder) ListStagingAccountsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagingAccountsPages", reflect.TypeOf((*MockDrsAPI)(nil).ListStagingAccountsPages), arg0, arg1)
}

// ListStagingAccountsPagesWithContext mocks base method
func (m *MockDrsAPI) ListStagingAccountsPagesWithContext(arg0 context.Context, arg1 *drs.ListStagingAccountsInput, arg2 func(*drs.ListStagingAccountsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStagingAccountsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStagingAccountsPagesWithContext indicates an expected call of ListStagingAccountsPagesWithContext
func (mr *MockDrsAPIMockRecorder) ListStagingAccountsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagingAccountsPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).ListStagingAccountsPagesWithContext), varargs...)
}

// ListStagingAccountsRequest mocks base method
func (m *MockDrsAPI) ListStagingAccountsRequest(arg0 *drs.ListStagingAccountsInput) (*request.Request, *drs.ListStagingAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStagingAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.ListStagingAccountsOutput)
	return ret0, ret1
}

// ListStagingAccountsRequest indicates an expected call of ListStagingAccountsRequest
func (mr *MockDrsAPIMockRecorder) ListStagingAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagingAccountsRequest", reflect.TypeOf((*MockDrsAPI)(nil).ListStagingAccountsRequest), arg0)
}

// ListStagingAccountsWithContext mocks base method
func (m *MockDrsAPI) ListStagingAccountsWithContext(arg0 context.Context, arg1 *drs.ListStagingAccountsInput, arg2 ...request.Option) (*drs.ListStagingAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStagingAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*drs.ListStagingAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStagingAccountsWithContext indicates an expected call of ListStagingAccountsWithContext
func (mr *MockDrsAPIMockRecorder) ListStagingAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStagingAccountsWithContext", reflect.TypeOf((*MockDrsAPI)(nil).ListStagingAccountsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockDrsAPI) ListTagsForResource(arg0 *drs.ListTagsForResourceInput) (*drs.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*drs.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockDrsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDrsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockDrsAPI) ListTagsForResourceRequest(arg0 *drs.ListTagsForResourceInput) (*request.Request, *drs.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockDrsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockDrsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockDrsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *drs.ListTagsForResourceInput, arg2 ...request.Option) (*drs.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockDrsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutLaunchAction mocks base method
func (m *MockDrsAPI) PutLaunchAction(arg0 *drs.PutLaunchActionInput) (*drs.PutLaunchActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLaunchAction", arg0)
	ret0, _ := ret[0].(*drs.PutLaunchActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLaunchAction indicates an expected call of PutLaunchAction
func (mr *MockDrsAPIMockRecorder) PutLaunchAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLaunchAction", reflect.TypeOf((*MockDrsAPI)(nil).PutLaunchAction), arg0)
}

// PutLaunchActionRequest mocks base method
func (m *MockDrsAPI) PutLaunchActionRequest(arg0 *drs.PutLaunchActionInput) (*request.Request, *drs.PutLaunchActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLaunchActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.PutLaunchActionOutput)
	return ret0, ret1
}

// PutLaunchActionRequest indicates an expected call of PutLaunchActionRequest
func (mr *MockDrsAPIMockRecorder) PutLaunchActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLaunchActionRequest", reflect.TypeOf((*MockDrsAPI)(nil).PutLaunchActionRequest), arg0)
}

// PutLaunchActionWithContext mocks base method
func (m *MockDrsAPI) PutLaunchActionWithContext(arg0 context.Context, arg1 *drs.PutLaunchActionInput, arg2 ...request.Option) (*drs.PutLaunchActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLaunchActionWithContext", varargs...)
	ret0, _ := ret[0].(*drs.PutLaunchActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLaunchActionWithContext indicates an expected call of PutLaunchActionWithContext
func (mr *MockDrsAPIMockRecorder) PutLaunchActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLaunchActionWithContext", reflect.TypeOf((*MockDrsAPI)(nil).PutLaunchActionWithContext), varargs...)
}

// RetryDataReplication mocks base method
func (m *MockDrsAPI) RetryDataReplication(arg0 *drs.RetryDataReplicationInput) (*drs.RetryDataReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryDataReplication", arg0)
	ret0, _ := ret[0].(*drs.RetryDataReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryDataReplication indicates an expected call of RetryDataReplication
func (mr *MockDrsAPIMockRecorder) RetryDataReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplication", reflect.TypeOf((*MockDrsAPI)(nil).RetryDataReplication), arg0)
}

// RetryDataReplicationRequest mocks base method
func (m *MockDrsAPI) RetryDataReplicationRequest(arg0 *drs.RetryDataReplicationInput) (*request.Request, *drs.RetryDataReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryDataReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.RetryDataReplicationOutput)
	return ret0, ret1
}

// RetryDataReplicationRequest indicates an expected call of RetryDataReplicationRequest
func (mr *MockDrsAPIMockRecorder) RetryDataReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplicationRequest", reflect.TypeOf((*MockDrsAPI)(nil).RetryDataReplicationRequest), arg0)
}

// RetryDataReplicationWithContext mocks base method
func (m *MockDrsAPI) RetryDataReplicationWithContext(arg0 context.Context, arg1 *drs.RetryDataReplicationInput, arg2 ...request.Option) (*drs.RetryDataReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryDataReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.RetryDataReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryDataReplicationWithContext indicates an expected call of RetryDataReplicationWithContext
func (mr *MockDrsAPIMockRecorder) RetryDataReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplicationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).RetryDataReplicationWithContext), varargs...)
}

// ReverseReplication mocks base method
func (m *MockDrsAPI) ReverseReplication(arg0 *drs.ReverseReplicationInput) (*drs.ReverseReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseReplication", arg0)
	ret0, _ := ret[0].(*drs.ReverseReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseReplication indicates an expected call of ReverseReplication
func (mr *MockDrsAPIMockRecorder) ReverseReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseReplication", reflect.TypeOf((*MockDrsAPI)(nil).ReverseReplication), arg0)
}

// ReverseReplicationRequest mocks base method
func (m *MockDrsAPI) ReverseReplicationRequest(arg0 *drs.ReverseReplicationInput) (*request.Request, *drs.ReverseReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.ReverseReplicationOutput)
	return ret0, ret1
}

// ReverseReplicationRequest indicates an expected call of ReverseReplicationRequest
func (mr *MockDrsAPIMockRecorder) ReverseReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseReplicationRequest", reflect.TypeOf((*MockDrsAPI)(nil).ReverseReplicationRequest), arg0)
}

// ReverseReplicationWithContext mocks base method
func (m *MockDrsAPI) ReverseReplicationWithContext(arg0 context.Context, arg1 *drs.ReverseReplicationInput, arg2 ...request.Option) (*drs.ReverseReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReverseReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.ReverseReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseReplicationWithContext indicates an expected call of ReverseReplicationWithContext
func (mr *MockDrsAPIMockRecorder) ReverseReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseReplicationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).ReverseReplicationWithContext), varargs...)
}

// StartFailbackLaunch mocks base method
func (m *MockDrsAPI) StartFailbackLaunch(arg0 *drs.StartFailbackLaunchInput) (*drs.StartFailbackLaunchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFailbackLaunch", arg0)
	ret0, _ := ret[0].(*drs.StartFailbackLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFailbackLaunch indicates an expected call of StartFailbackLaunch
func (mr *MockDrsAPIMockRecorder) StartFailbackLaunch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFailbackLaunch", reflect.TypeOf((*MockDrsAPI)(nil).StartFailbackLaunch), arg0)
}

// StartFailbackLaunchRequest mocks base method
func (m *MockDrsAPI) StartFailbackLaunchRequest(arg0 *drs.StartFailbackLaunchInput) (*request.Request, *drs.StartFailbackLaunchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFailbackLaunchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StartFailbackLaunchOutput)
	return ret0, ret1
}

// StartFailbackLaunchRequest indicates an expected call of StartFailbackLaunchRequest
func (mr *MockDrsAPIMockRecorder) StartFailbackLaunchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFailbackLaunchRequest", reflect.TypeOf((*MockDrsAPI)(nil).StartFailbackLaunchRequest), arg0)
}

// StartFailbackLaunchWithContext mocks base method
func (m *MockDrsAPI) StartFailbackLaunchWithContext(arg0 context.Context, arg1 *drs.StartFailbackLaunchInput, arg2 ...request.Option) (*drs.StartFailbackLaunchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFailbackLaunchWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StartFailbackLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFailbackLaunchWithContext indicates an expected call of StartFailbackLaunchWithContext
func (mr *MockDrsAPIMockRecorder) StartFailbackLaunchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFailbackLaunchWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StartFailbackLaunchWithContext), varargs...)
}

// StartRecovery mocks base method
func (m *MockDrsAPI) StartRecovery(arg0 *drs.StartRecoveryInput) (*drs.StartRecoveryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRecovery", arg0)
	ret0, _ := ret[0].(*drs.StartRecoveryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRecovery indicates an expected call of StartRecovery
func (mr *MockDrsAPIMockRecorder) StartRecovery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecovery", reflect.TypeOf((*MockDrsAPI)(nil).StartRecovery), arg0)
}

// StartRecoveryRequest mocks base method
func (m *MockDrsAPI) StartRecoveryRequest(arg0 *drs.StartRecoveryInput) (*request.Request, *drs.StartRecoveryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRecoveryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StartRecoveryOutput)
	return ret0, ret1
}

// StartRecoveryRequest indicates an expected call of StartRecoveryRequest
func (mr *MockDrsAPIMockRecorder) StartRecoveryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecoveryRequest", reflect.TypeOf((*MockDrsAPI)(nil).StartRecoveryRequest), arg0)
}

// StartRecoveryWithContext mocks base method
func (m *MockDrsAPI) StartRecoveryWithContext(arg0 context.Context, arg1 *drs.StartRecoveryInput, arg2 ...request.Option) (*drs.StartRecoveryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartRecoveryWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StartRecoveryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRecoveryWithContext indicates an expected call of StartRecoveryWithContext
func (mr *MockDrsAPIMockRecorder) StartRecoveryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecoveryWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StartRecoveryWithContext), varargs...)
}

// StartReplication mocks base method
func (m *MockDrsAPI) StartReplication(arg0 *drs.StartReplicationInput) (*drs.StartReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplication", arg0)
	ret0, _ := ret[0].(*drs.StartReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplication indicates an expected call of StartReplication
func (mr *MockDrsAPIMockRecorder) StartReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplication", reflect.TypeOf((*MockDrsAPI)(nil).StartReplication), arg0)
}

// StartReplicationRequest mocks base method
func (m *MockDrsAPI) StartReplicationRequest(arg0 *drs.StartReplicationInput) (*request.Request, *drs.StartReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StartReplicationOutput)
	return ret0, ret1
}

// StartReplicationRequest indicates an expected call of StartReplicationRequest
func (mr *MockDrsAPIMockRecorder) StartReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationRequest", reflect.TypeOf((*MockDrsAPI)(nil).StartReplicationRequest), arg0)
}

// StartReplicationWithContext mocks base method
func (m *MockDrsAPI) StartReplicationWithContext(arg0 context.Context, arg1 *drs.StartReplicationInput, arg2 ...request.Option) (*drs.StartReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StartReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplicationWithContext indicates an expected call of StartReplicationWithContext
func (mr *MockDrsAPIMockRecorder) StartReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StartReplicationWithContext), varargs...)
}

// StartSourceNetworkRecovery mocks base method
func (m *MockDrsAPI) StartSourceNetworkRecovery(arg0 *drs.StartSourceNetworkRecoveryInput) (*drs.StartSourceNetworkRecoveryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSourceNetworkRecovery", arg0)
	ret0, _ := ret[0].(*drs.StartSourceNetworkRecoveryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSourceNetworkRecovery indicates an expected call of StartSourceNetworkRecovery
func (mr *MockDrsAPIMockRecorder) StartSourceNetworkRecovery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSourceNetworkRecovery", reflect.TypeOf((*MockDrsAPI)(nil).StartSourceNetworkRecovery), arg0)
}

// StartSourceNetworkRecoveryRequest mocks base method
func (m *MockDrsAPI) StartSourceNetworkRecoveryRequest(arg0 *drs.StartSourceNetworkRecoveryInput) (*request.Request, *drs.StartSourceNetworkRecoveryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSourceNetworkRecoveryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StartSourceNetworkRecoveryOutput)
	return ret0, ret1
}

// StartSourceNetworkRecoveryRequest indicates an expected call of StartSourceNetworkRecoveryRequest
func (mr *MockDrsAPIMockRecorder) StartSourceNetworkRecoveryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSourceNetworkRecoveryRequest", reflect.TypeOf((*MockDrsAPI)(nil).StartSourceNetworkRecoveryRequest), arg0)
}

// StartSourceNetworkRecoveryWithContext mocks base method
func (m *MockDrsAPI) StartSourceNetworkRecoveryWithContext(arg0 context.Context, arg1 *drs.StartSourceNetworkRecoveryInput, arg2 ...request.Option) (*drs.StartSourceNetworkRecoveryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSourceNetworkRecoveryWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StartSourceNetworkRecoveryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSourceNetworkRecoveryWithContext indicates an expected call of StartSourceNetworkRecoveryWithContext
func (mr *MockDrsAPIMockRecorder) StartSourceNetworkRecoveryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSourceNetworkRecoveryWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StartSourceNetworkRecoveryWithContext), varargs...)
}

// StartSourceNetworkReplication mocks base method
func (m *MockDrsAPI) StartSourceNetworkReplication(arg0 *drs.StartSourceNetworkReplicationInput) (*drs.StartSourceNetworkReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSourceNetworkReplication", arg0)
	ret0, _ := ret[0].(*drs.StartSourceNetworkReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSourceNetworkReplication indicates an expected call of StartSourceNetworkReplication
func (mr *MockDrsAPIMockRecorder) StartSourceNetworkReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSourceNetworkReplication", reflect.TypeOf((*MockDrsAPI)(nil).StartSourceNetworkReplication), arg0)
}

// StartSourceNetworkReplicationRequest mocks base method
func (m *MockDrsAPI) StartSourceNetworkReplicationRequest(arg0 *drs.StartSourceNetworkReplicationInput) (*request.Request, *drs.StartSourceNetworkReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSourceNetworkReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StartSourceNetworkReplicationOutput)
	return ret0, ret1
}

// StartSourceNetworkReplicationRequest indicates an expected call of StartSourceNetworkReplicationRequest
func (mr *MockDrsAPIMockRecorder) StartSourceNetworkReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSourceNetworkReplicationRequest", reflect.TypeOf((*MockDrsAPI)(nil).StartSourceNetworkReplicationRequest), arg0)
}

// StartSourceNetworkReplicationWithContext mocks base method
func (m *MockDrsAPI) StartSourceNetworkReplicationWithContext(arg0 context.Context, arg1 *drs.StartSourceNetworkReplicationInput, arg2 ...request.Option) (*drs.StartSourceNetworkReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSourceNetworkReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StartSourceNetworkReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSourceNetworkReplicationWithContext indicates an expected call of StartSourceNetworkReplicationWithContext
func (mr *MockDrsAPIMockRecorder) StartSourceNetworkReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSourceNetworkReplicationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StartSourceNetworkReplicationWithContext), varargs...)
}

// StopFailback mocks base method
func (m *MockDrsAPI) StopFailback(arg0 *drs.StopFailbackInput) (*drs.StopFailbackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFailback", arg0)
	ret0, _ := ret[0].(*drs.StopFailbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopFailback indicates an expected call of StopFailback
func (mr *MockDrsAPIMockRecorder) StopFailback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFailback", reflect.TypeOf((*MockDrsAPI)(nil).StopFailback), arg0)
}

// StopFailbackRequest mocks base method
func (m *MockDrsAPI) StopFailbackRequest(arg0 *drs.StopFailbackInput) (*request.Request, *drs.StopFailbackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFailbackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StopFailbackOutput)
	return ret0, ret1
}

// StopFailbackRequest indicates an expected call of StopFailbackRequest
func (mr *MockDrsAPIMockRecorder) StopFailbackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFailbackRequest", reflect.TypeOf((*MockDrsAPI)(nil).StopFailbackRequest), arg0)
}

// StopFailbackWithContext mocks base method
func (m *MockDrsAPI) StopFailbackWithContext(arg0 context.Context, arg1 *drs.StopFailbackInput, arg2 ...request.Option) (*drs.StopFailbackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopFailbackWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StopFailbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopFailbackWithContext indicates an expected call of StopFailbackWithContext
func (mr *MockDrsAPIMockRecorder) StopFailbackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFailbackWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StopFailbackWithContext), varargs...)
}

// StopReplication mocks base method
func (m *MockDrsAPI) StopReplication(arg0 *drs.StopReplicationInput) (*drs.StopReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopReplication", arg0)
	ret0, _ := ret[0].(*drs.StopReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopReplication indicates an expected call of StopReplication
func (mr *MockDrsAPIMockRecorder) StopReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReplication", reflect.TypeOf((*MockDrsAPI)(nil).StopReplication), arg0)
}

// StopReplicationRequest mocks base method
func (m *MockDrsAPI) StopReplicationRequest(arg0 *drs.StopReplicationInput) (*request.Request, *drs.StopReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StopReplicationOutput)
	return ret0, ret1
}

// StopReplicationRequest indicates an expected call of StopReplicationRequest
func (mr *MockDrsAPIMockRecorder) StopReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReplicationRequest", reflect.TypeOf((*MockDrsAPI)(nil).StopReplicationRequest), arg0)
}

// StopReplicationWithContext mocks base method
func (m *MockDrsAPI) StopReplicationWithContext(arg0 context.Context, arg1 *drs.StopReplicationInput, arg2 ...request.Option) (*drs.StopReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StopReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopReplicationWithContext indicates an expected call of StopReplicationWithContext
func (mr *MockDrsAPIMockRecorder) StopReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReplicationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StopReplicationWithContext), varargs...)
}

// StopSourceNetworkReplication mocks base method
func (m *MockDrsAPI) StopSourceNetworkReplication(arg0 *drs.StopSourceNetworkReplicationInput) (*drs.StopSourceNetworkReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSourceNetworkReplication", arg0)
	ret0, _ := ret[0].(*drs.StopSourceNetworkReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSourceNetworkReplication indicates an expected call of StopSourceNetworkReplication
func (mr *MockDrsAPIMockRecorder) StopSourceNetworkReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSourceNetworkReplication", reflect.TypeOf((*MockDrsAPI)(nil).StopSourceNetworkReplication), arg0)
}

// StopSourceNetworkReplicationRequest mocks base method
func (m *MockDrsAPI) StopSourceNetworkReplicationRequest(arg0 *drs.StopSourceNetworkReplicationInput) (*request.Request, *drs.StopSourceNetworkReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSourceNetworkReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StopSourceNetworkReplicationOutput)
	return ret0, ret1
}

// StopSourceNetworkReplicationRequest indicates an expected call of StopSourceNetworkReplicationRequest
func (mr *MockDrsAPIMockRecorder) StopSourceNetworkReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSourceNetworkReplicationRequest", reflect.TypeOf((*MockDrsAPI)(nil).StopSourceNetworkReplicationRequest), arg0)
}

// StopSourceNetworkReplicationWithContext mocks base method
func (m *MockDrsAPI) StopSourceNetworkReplicationWithContext(arg0 context.Context, arg1 *drs.StopSourceNetworkReplicationInput, arg2 ...request.Option) (*drs.StopSourceNetworkReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopSourceNetworkReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StopSourceNetworkReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSourceNetworkReplicationWithContext indicates an expected call of StopSourceNetworkReplicationWithContext
func (mr *MockDrsAPIMockRecorder) StopSourceNetworkReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSourceNetworkReplicationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StopSourceNetworkReplicationWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockDrsAPI) TagResource(arg0 *drs.TagResourceInput) (*drs.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*drs.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockDrsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockDrsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockDrsAPI) TagResourceRequest(arg0 *drs.TagResourceInput) (*request.Request, *drs.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockDrsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockDrsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockDrsAPI) TagResourceWithContext(arg0 context.Context, arg1 *drs.TagResourceInput, arg2 ...request.Option) (*drs.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockDrsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).TagResourceWithContext), varargs...)
}

// TerminateRecoveryInstances mocks base method
func (m *MockDrsAPI) TerminateRecoveryInstances(arg0 *drs.TerminateRecoveryInstancesInput) (*drs.TerminateRecoveryInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateRecoveryInstances", arg0)
	ret0, _ := ret[0].(*drs.TerminateRecoveryInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateRecoveryInstances indicates an expected call of TerminateRecoveryInstances
func (mr *MockDrsAPIMockRecorder) TerminateRecoveryInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateRecoveryInstances", reflect.TypeOf((*MockDrsAPI)(nil).TerminateRecoveryInstances), arg0)
}

// TerminateRecoveryInstancesRequest mocks base method
func (m *MockDrsAPI) TerminateRecoveryInstancesRequest(arg0 *drs.TerminateRecoveryInstancesInput) (*request.Request, *drs.TerminateRecoveryInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateRecoveryInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.TerminateRecoveryInstancesOutput)
	return ret0, ret1
}

// TerminateRecoveryInstancesRequest indicates an expected call of TerminateRecoveryInstancesRequest
func (mr *MockDrsAPIMockRecorder) TerminateRecoveryInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateRecoveryInstancesRequest", reflect.TypeOf((*MockDrsAPI)(nil).TerminateRecoveryInstancesRequest), arg0)
}

// TerminateRecoveryInstancesWithContext mocks base method
func (m *MockDrsAPI) TerminateRecoveryInstancesWithContext(arg0 context.Context, arg1 *drs.TerminateRecoveryInstancesInput, arg2 ...request.Option) (*drs.TerminateRecoveryInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateRecoveryInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*drs.TerminateRecoveryInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateRecoveryInstancesWithContext indicates an expected call of TerminateRecoveryInstancesWithContext
func (mr *MockDrsAPIMockRecorder) TerminateRecoveryInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateRecoveryInstancesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).TerminateRecoveryInstancesWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockDrsAPI) UntagResource(arg0 *drs.UntagResourceInput) (*drs.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*drs.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockDrsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockDrsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockDrsAPI) UntagResourceRequest(arg0 *drs.UntagResourceInput) (*request.Request, *drs.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockDrsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockDrsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockDrsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *drs.UntagResourceInput, arg2 ...request.Option) (*drs.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockDrsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateFailbackReplicationConfiguration mocks base method
func (m *MockDrsAPI) UpdateFailbackReplicationConfiguration(arg0 *drs.UpdateFailbackReplicationConfigurationInput) (*drs.UpdateFailbackReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFailbackReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*drs.UpdateFailbackReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFailbackReplicationConfiguration indicates an expected call of UpdateFailbackReplicationConfiguration
func (mr *MockDrsAPIMockRecorder) UpdateFailbackReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailbackReplicationConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).UpdateFailbackReplicationConfiguration), arg0)
}

// UpdateFailbackReplicationConfigurationRequest mocks base method
func (m *MockDrsAPI) UpdateFailbackReplicationConfigurationRequest(arg0 *drs.UpdateFailbackReplicationConfigurationInput) (*request.Request, *drs.UpdateFailbackReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFailbackReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UpdateFailbackReplicationConfigurationOutput)
	return ret0, ret1
}

// UpdateFailbackReplicationConfigurationRequest indicates an expected call of UpdateFailbackReplicationConfigurationRequest
func (mr *MockDrsAPIMockRecorder) UpdateFailbackReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailbackReplicationConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).UpdateFailbackReplicationConfigurationRequest), arg0)
}

// UpdateFailbackReplicationConfigurationWithContext mocks base method
func (m *MockDrsAPI) UpdateFailbackReplicationConfigurationWithContext(arg0 context.Context, arg1 *drs.UpdateFailbackReplicationConfigurationInput, arg2 ...request.Option) (*drs.UpdateFailbackReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFailbackReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UpdateFailbackReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFailbackReplicationConfigurationWithContext indicates an expected call of UpdateFailbackReplicationConfigurationWithContext
func (mr *MockDrsAPIMockRecorder) UpdateFailbackReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailbackReplicationConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UpdateFailbackReplicationConfigurationWithContext), varargs...)
}

// UpdateLaunchConfiguration mocks base method
func (m *MockDrsAPI) UpdateLaunchConfiguration(arg0 *drs.UpdateLaunchConfigurationInput) (*drs.UpdateLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*drs.UpdateLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfiguration indicates an expected call of UpdateLaunchConfiguration
func (mr *MockDrsAPIMockRecorder) UpdateLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).UpdateLaunchConfiguration), arg0)
}

// UpdateLaunchConfigurationRequest mocks base method
func (m *MockDrsAPI) UpdateLaunchConfigurationRequest(arg0 *drs.UpdateLaunchConfigurationInput) (*request.Request, *drs.UpdateLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UpdateLaunchConfigurationOutput)
	return ret0, ret1
}

// UpdateLaunchConfigurationRequest indicates an expected call of UpdateLaunchConfigurationRequest
func (mr *MockDrsAPIMockRecorder) UpdateLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).UpdateLaunchConfigurationRequest), arg0)
}

// UpdateLaunchConfigurationTemplate mocks base method
func (m *MockDrsAPI) UpdateLaunchConfigurationTemplate(arg0 *drs.UpdateLaunchConfigurationTemplateInput) (*drs.UpdateLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*drs.UpdateLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfigurationTemplate indicates an expected call of UpdateLaunchConfigurationTemplate
func (mr *MockDrsAPIMockRecorder) UpdateLaunchConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationTemplate", reflect.TypeOf((*MockDrsAPI)(nil).UpdateLaunchConfigurationTemplate), arg0)
}

// UpdateLaunchConfigurationTemplateRequest mocks base method
func (m *MockDrsAPI) UpdateLaunchConfigurationTemplateRequest(arg0 *drs.UpdateLaunchConfigurationTemplateInput) (*request.Request, *drs.UpdateLaunchConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UpdateLaunchConfigurationTemplateOutput)
	return ret0, ret1
}

// UpdateLaunchConfigurationTemplateRequest indicates an expected call of UpdateLaunchConfigurationTemplateRequest
func (mr *MockDrsAPIMockRecorder) UpdateLaunchConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationTemplateRequest", reflect.TypeOf((*MockDrsAPI)(nil).UpdateLaunchConfigurationTemplateRequest), arg0)
}

// UpdateLaunchConfigurationTemplateWithContext mocks base method
func (m *MockDrsAPI) UpdateLaunchConfigurationTemplateWithContext(arg0 context.Context, arg1 *drs.UpdateLaunchConfigurationTemplateInput, arg2 ...request.Option) (*drs.UpdateLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UpdateLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfigurationTemplateWithContext indicates an expected call of UpdateLaunchConfigurationTemplateWithContext
func (mr *MockDrsAPIMockRecorder) UpdateLaunchConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationTemplateWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UpdateLaunchConfigurationTemplateWithContext), varargs...)
}

// UpdateLaunchConfigurationWithContext mocks base method
func (m *MockDrsAPI) UpdateLaunchConfigurationWithContext(arg0 context.Context, arg1 *drs.UpdateLaunchConfigurationInput, arg2 ...request.Option) (*drs.UpdateLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UpdateLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfigurationWithContext indicates an expected call of UpdateLaunchConfigurationWithContext
func (mr *MockDrsAPIMockRecorder) UpdateLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UpdateLaunchConfigurationWithContext), varargs...)
}

// UpdateReplicationConfiguration mocks base method
func (m *MockDrsAPI) UpdateReplicationConfiguration(arg0 *drs.UpdateReplicationConfigurationInput) (*drs.UpdateReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*drs.UpdateReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfiguration indicates an expected call of UpdateReplicationConfiguration
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfiguration), arg0)
}

// UpdateReplicationConfigurationRequest mocks base method
func (m *MockDrsAPI) UpdateReplicationConfigurationRequest(arg0 *drs.UpdateReplicationConfigurationInput) (*request.Request, *drs.UpdateReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UpdateReplicationConfigurationOutput)
	return ret0, ret1
}

// UpdateReplicationConfigurationRequest indicates an expected call of UpdateReplicationConfigurationRequest
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfigurationRequest), arg0)
}

// UpdateReplicationConfigurationTemplate mocks base method
func (m *MockDrsAPI) UpdateReplicationConfigurationTemplate(arg0 *drs.UpdateReplicationConfigurationTemplateInput) (*drs.UpdateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*drs.UpdateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplate indicates an expected call of UpdateReplicationConfigurationTemplate
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplate", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfigurationTemplate), arg0)
}

// UpdateReplicationConfigurationTemplateRequest mocks base method
func (m *MockDrsAPI) UpdateReplicationConfigurationTemplateRequest(arg0 *drs.UpdateReplicationConfigurationTemplateInput) (*request.Request, *drs.UpdateReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UpdateReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplateRequest indicates an expected call of UpdateReplicationConfigurationTemplateRequest
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfigurationTemplateRequest), arg0)
}

// UpdateReplicationConfigurationTemplateWithContext mocks base method
func (m *MockDrsAPI) UpdateReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *drs.UpdateReplicationConfigurationTemplateInput, arg2 ...request.Option) (*drs.UpdateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UpdateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplateWithContext indicates an expected call of UpdateReplicationConfigurationTemplateWithContext
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfigurationTemplateWithContext), varargs...)
}

// UpdateReplicationConfigurationWithContext mocks base method
func (m *MockDrsAPI) UpdateReplicationConfigurationWithContext(arg0 context.Context, arg1 *drs.UpdateReplicationConfigurationInput, arg2 ...request.Option) (*drs.UpdateReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UpdateReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationWithContext indicates an expected call of UpdateReplicationConfigurationWithContext
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfigurationWithContext), varargs...)
}
