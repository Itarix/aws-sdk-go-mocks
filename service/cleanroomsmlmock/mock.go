// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/cleanroomsml/cleanroomsmliface (interfaces: CleanRoomsMLAPI)

// Package cleanroomsmlmock is a generated GoMock package.
package cleanroomsmlmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	cleanroomsml "github.com/aws/aws-sdk-go/service/cleanroomsml"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCleanRoomsMLAPI is a mock of CleanRoomsMLAPI interface
type MockCleanRoomsMLAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCleanRoomsMLAPIMockRecorder
}

// MockCleanRoomsMLAPIMockRecorder is the mock recorder for MockCleanRoomsMLAPI
type MockCleanRoomsMLAPIMockRecorder struct {
	mock *MockCleanRoomsMLAPI
}

// NewMockCleanRoomsMLAPI creates a new mock instance
func NewMockCleanRoomsMLAPI(ctrl *gomock.Controller) *MockCleanRoomsMLAPI {
	mock := &MockCleanRoomsMLAPI{ctrl: ctrl}
	mock.recorder = &MockCleanRoomsMLAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCleanRoomsMLAPI) EXPECT() *MockCleanRoomsMLAPIMockRecorder {
	return m.recorder
}

// CreateAudienceModel mocks base method
func (m *MockCleanRoomsMLAPI) CreateAudienceModel(arg0 *cleanroomsml.CreateAudienceModelInput) (*cleanroomsml.CreateAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAudienceModel", arg0)
	ret0, _ := ret[0].(*cleanroomsml.CreateAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAudienceModel indicates an expected call of CreateAudienceModel
func (mr *MockCleanRoomsMLAPIMockRecorder) CreateAudienceModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAudienceModel", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).CreateAudienceModel), arg0)
}

// CreateAudienceModelRequest mocks base method
func (m *MockCleanRoomsMLAPI) CreateAudienceModelRequest(arg0 *cleanroomsml.CreateAudienceModelInput) (*request.Request, *cleanroomsml.CreateAudienceModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAudienceModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.CreateAudienceModelOutput)
	return ret0, ret1
}

// CreateAudienceModelRequest indicates an expected call of CreateAudienceModelRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) CreateAudienceModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAudienceModelRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).CreateAudienceModelRequest), arg0)
}

// CreateAudienceModelWithContext mocks base method
func (m *MockCleanRoomsMLAPI) CreateAudienceModelWithContext(arg0 context.Context, arg1 *cleanroomsml.CreateAudienceModelInput, arg2 ...request.Option) (*cleanroomsml.CreateAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAudienceModelWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.CreateAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAudienceModelWithContext indicates an expected call of CreateAudienceModelWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) CreateAudienceModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAudienceModelWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).CreateAudienceModelWithContext), varargs...)
}

// CreateConfiguredAudienceModel mocks base method
func (m *MockCleanRoomsMLAPI) CreateConfiguredAudienceModel(arg0 *cleanroomsml.CreateConfiguredAudienceModelInput) (*cleanroomsml.CreateConfiguredAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguredAudienceModel", arg0)
	ret0, _ := ret[0].(*cleanroomsml.CreateConfiguredAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguredAudienceModel indicates an expected call of CreateConfiguredAudienceModel
func (mr *MockCleanRoomsMLAPIMockRecorder) CreateConfiguredAudienceModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredAudienceModel", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).CreateConfiguredAudienceModel), arg0)
}

// CreateConfiguredAudienceModelRequest mocks base method
func (m *MockCleanRoomsMLAPI) CreateConfiguredAudienceModelRequest(arg0 *cleanroomsml.CreateConfiguredAudienceModelInput) (*request.Request, *cleanroomsml.CreateConfiguredAudienceModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguredAudienceModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.CreateConfiguredAudienceModelOutput)
	return ret0, ret1
}

// CreateConfiguredAudienceModelRequest indicates an expected call of CreateConfiguredAudienceModelRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) CreateConfiguredAudienceModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredAudienceModelRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).CreateConfiguredAudienceModelRequest), arg0)
}

// CreateConfiguredAudienceModelWithContext mocks base method
func (m *MockCleanRoomsMLAPI) CreateConfiguredAudienceModelWithContext(arg0 context.Context, arg1 *cleanroomsml.CreateConfiguredAudienceModelInput, arg2 ...request.Option) (*cleanroomsml.CreateConfiguredAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfiguredAudienceModelWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.CreateConfiguredAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguredAudienceModelWithContext indicates an expected call of CreateConfiguredAudienceModelWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) CreateConfiguredAudienceModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredAudienceModelWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).CreateConfiguredAudienceModelWithContext), varargs...)
}

// CreateTrainingDataset mocks base method
func (m *MockCleanRoomsMLAPI) CreateTrainingDataset(arg0 *cleanroomsml.CreateTrainingDatasetInput) (*cleanroomsml.CreateTrainingDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrainingDataset", arg0)
	ret0, _ := ret[0].(*cleanroomsml.CreateTrainingDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrainingDataset indicates an expected call of CreateTrainingDataset
func (mr *MockCleanRoomsMLAPIMockRecorder) CreateTrainingDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrainingDataset", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).CreateTrainingDataset), arg0)
}

// CreateTrainingDatasetRequest mocks base method
func (m *MockCleanRoomsMLAPI) CreateTrainingDatasetRequest(arg0 *cleanroomsml.CreateTrainingDatasetInput) (*request.Request, *cleanroomsml.CreateTrainingDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrainingDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.CreateTrainingDatasetOutput)
	return ret0, ret1
}

// CreateTrainingDatasetRequest indicates an expected call of CreateTrainingDatasetRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) CreateTrainingDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrainingDatasetRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).CreateTrainingDatasetRequest), arg0)
}

// CreateTrainingDatasetWithContext mocks base method
func (m *MockCleanRoomsMLAPI) CreateTrainingDatasetWithContext(arg0 context.Context, arg1 *cleanroomsml.CreateTrainingDatasetInput, arg2 ...request.Option) (*cleanroomsml.CreateTrainingDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrainingDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.CreateTrainingDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrainingDatasetWithContext indicates an expected call of CreateTrainingDatasetWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) CreateTrainingDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrainingDatasetWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).CreateTrainingDatasetWithContext), varargs...)
}

// DeleteAudienceGenerationJob mocks base method
func (m *MockCleanRoomsMLAPI) DeleteAudienceGenerationJob(arg0 *cleanroomsml.DeleteAudienceGenerationJobInput) (*cleanroomsml.DeleteAudienceGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAudienceGenerationJob", arg0)
	ret0, _ := ret[0].(*cleanroomsml.DeleteAudienceGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAudienceGenerationJob indicates an expected call of DeleteAudienceGenerationJob
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteAudienceGenerationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAudienceGenerationJob", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteAudienceGenerationJob), arg0)
}

// DeleteAudienceGenerationJobRequest mocks base method
func (m *MockCleanRoomsMLAPI) DeleteAudienceGenerationJobRequest(arg0 *cleanroomsml.DeleteAudienceGenerationJobInput) (*request.Request, *cleanroomsml.DeleteAudienceGenerationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAudienceGenerationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.DeleteAudienceGenerationJobOutput)
	return ret0, ret1
}

// DeleteAudienceGenerationJobRequest indicates an expected call of DeleteAudienceGenerationJobRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteAudienceGenerationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAudienceGenerationJobRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteAudienceGenerationJobRequest), arg0)
}

// DeleteAudienceGenerationJobWithContext mocks base method
func (m *MockCleanRoomsMLAPI) DeleteAudienceGenerationJobWithContext(arg0 context.Context, arg1 *cleanroomsml.DeleteAudienceGenerationJobInput, arg2 ...request.Option) (*cleanroomsml.DeleteAudienceGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAudienceGenerationJobWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.DeleteAudienceGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAudienceGenerationJobWithContext indicates an expected call of DeleteAudienceGenerationJobWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteAudienceGenerationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAudienceGenerationJobWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteAudienceGenerationJobWithContext), varargs...)
}

// DeleteAudienceModel mocks base method
func (m *MockCleanRoomsMLAPI) DeleteAudienceModel(arg0 *cleanroomsml.DeleteAudienceModelInput) (*cleanroomsml.DeleteAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAudienceModel", arg0)
	ret0, _ := ret[0].(*cleanroomsml.DeleteAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAudienceModel indicates an expected call of DeleteAudienceModel
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteAudienceModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAudienceModel", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteAudienceModel), arg0)
}

// DeleteAudienceModelRequest mocks base method
func (m *MockCleanRoomsMLAPI) DeleteAudienceModelRequest(arg0 *cleanroomsml.DeleteAudienceModelInput) (*request.Request, *cleanroomsml.DeleteAudienceModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAudienceModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.DeleteAudienceModelOutput)
	return ret0, ret1
}

// DeleteAudienceModelRequest indicates an expected call of DeleteAudienceModelRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteAudienceModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAudienceModelRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteAudienceModelRequest), arg0)
}

// DeleteAudienceModelWithContext mocks base method
func (m *MockCleanRoomsMLAPI) DeleteAudienceModelWithContext(arg0 context.Context, arg1 *cleanroomsml.DeleteAudienceModelInput, arg2 ...request.Option) (*cleanroomsml.DeleteAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAudienceModelWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.DeleteAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAudienceModelWithContext indicates an expected call of DeleteAudienceModelWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteAudienceModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAudienceModelWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteAudienceModelWithContext), varargs...)
}

// DeleteConfiguredAudienceModel mocks base method
func (m *MockCleanRoomsMLAPI) DeleteConfiguredAudienceModel(arg0 *cleanroomsml.DeleteConfiguredAudienceModelInput) (*cleanroomsml.DeleteConfiguredAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguredAudienceModel", arg0)
	ret0, _ := ret[0].(*cleanroomsml.DeleteConfiguredAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguredAudienceModel indicates an expected call of DeleteConfiguredAudienceModel
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteConfiguredAudienceModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredAudienceModel", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteConfiguredAudienceModel), arg0)
}

// DeleteConfiguredAudienceModelPolicy mocks base method
func (m *MockCleanRoomsMLAPI) DeleteConfiguredAudienceModelPolicy(arg0 *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput) (*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguredAudienceModelPolicy", arg0)
	ret0, _ := ret[0].(*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguredAudienceModelPolicy indicates an expected call of DeleteConfiguredAudienceModelPolicy
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteConfiguredAudienceModelPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredAudienceModelPolicy", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteConfiguredAudienceModelPolicy), arg0)
}

// DeleteConfiguredAudienceModelPolicyRequest mocks base method
func (m *MockCleanRoomsMLAPI) DeleteConfiguredAudienceModelPolicyRequest(arg0 *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput) (*request.Request, *cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguredAudienceModelPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput)
	return ret0, ret1
}

// DeleteConfiguredAudienceModelPolicyRequest indicates an expected call of DeleteConfiguredAudienceModelPolicyRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteConfiguredAudienceModelPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredAudienceModelPolicyRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteConfiguredAudienceModelPolicyRequest), arg0)
}

// DeleteConfiguredAudienceModelPolicyWithContext mocks base method
func (m *MockCleanRoomsMLAPI) DeleteConfiguredAudienceModelPolicyWithContext(arg0 context.Context, arg1 *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput, arg2 ...request.Option) (*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfiguredAudienceModelPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguredAudienceModelPolicyWithContext indicates an expected call of DeleteConfiguredAudienceModelPolicyWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteConfiguredAudienceModelPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredAudienceModelPolicyWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteConfiguredAudienceModelPolicyWithContext), varargs...)
}

// DeleteConfiguredAudienceModelRequest mocks base method
func (m *MockCleanRoomsMLAPI) DeleteConfiguredAudienceModelRequest(arg0 *cleanroomsml.DeleteConfiguredAudienceModelInput) (*request.Request, *cleanroomsml.DeleteConfiguredAudienceModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguredAudienceModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.DeleteConfiguredAudienceModelOutput)
	return ret0, ret1
}

// DeleteConfiguredAudienceModelRequest indicates an expected call of DeleteConfiguredAudienceModelRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteConfiguredAudienceModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredAudienceModelRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteConfiguredAudienceModelRequest), arg0)
}

// DeleteConfiguredAudienceModelWithContext mocks base method
func (m *MockCleanRoomsMLAPI) DeleteConfiguredAudienceModelWithContext(arg0 context.Context, arg1 *cleanroomsml.DeleteConfiguredAudienceModelInput, arg2 ...request.Option) (*cleanroomsml.DeleteConfiguredAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfiguredAudienceModelWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.DeleteConfiguredAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguredAudienceModelWithContext indicates an expected call of DeleteConfiguredAudienceModelWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteConfiguredAudienceModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredAudienceModelWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteConfiguredAudienceModelWithContext), varargs...)
}

// DeleteTrainingDataset mocks base method
func (m *MockCleanRoomsMLAPI) DeleteTrainingDataset(arg0 *cleanroomsml.DeleteTrainingDatasetInput) (*cleanroomsml.DeleteTrainingDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrainingDataset", arg0)
	ret0, _ := ret[0].(*cleanroomsml.DeleteTrainingDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrainingDataset indicates an expected call of DeleteTrainingDataset
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteTrainingDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrainingDataset", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteTrainingDataset), arg0)
}

// DeleteTrainingDatasetRequest mocks base method
func (m *MockCleanRoomsMLAPI) DeleteTrainingDatasetRequest(arg0 *cleanroomsml.DeleteTrainingDatasetInput) (*request.Request, *cleanroomsml.DeleteTrainingDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrainingDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.DeleteTrainingDatasetOutput)
	return ret0, ret1
}

// DeleteTrainingDatasetRequest indicates an expected call of DeleteTrainingDatasetRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteTrainingDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrainingDatasetRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteTrainingDatasetRequest), arg0)
}

// DeleteTrainingDatasetWithContext mocks base method
func (m *MockCleanRoomsMLAPI) DeleteTrainingDatasetWithContext(arg0 context.Context, arg1 *cleanroomsml.DeleteTrainingDatasetInput, arg2 ...request.Option) (*cleanroomsml.DeleteTrainingDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrainingDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.DeleteTrainingDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrainingDatasetWithContext indicates an expected call of DeleteTrainingDatasetWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) DeleteTrainingDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrainingDatasetWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).DeleteTrainingDatasetWithContext), varargs...)
}

// GetAudienceGenerationJob mocks base method
func (m *MockCleanRoomsMLAPI) GetAudienceGenerationJob(arg0 *cleanroomsml.GetAudienceGenerationJobInput) (*cleanroomsml.GetAudienceGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudienceGenerationJob", arg0)
	ret0, _ := ret[0].(*cleanroomsml.GetAudienceGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAudienceGenerationJob indicates an expected call of GetAudienceGenerationJob
func (mr *MockCleanRoomsMLAPIMockRecorder) GetAudienceGenerationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudienceGenerationJob", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetAudienceGenerationJob), arg0)
}

// GetAudienceGenerationJobRequest mocks base method
func (m *MockCleanRoomsMLAPI) GetAudienceGenerationJobRequest(arg0 *cleanroomsml.GetAudienceGenerationJobInput) (*request.Request, *cleanroomsml.GetAudienceGenerationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudienceGenerationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.GetAudienceGenerationJobOutput)
	return ret0, ret1
}

// GetAudienceGenerationJobRequest indicates an expected call of GetAudienceGenerationJobRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) GetAudienceGenerationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudienceGenerationJobRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetAudienceGenerationJobRequest), arg0)
}

// GetAudienceGenerationJobWithContext mocks base method
func (m *MockCleanRoomsMLAPI) GetAudienceGenerationJobWithContext(arg0 context.Context, arg1 *cleanroomsml.GetAudienceGenerationJobInput, arg2 ...request.Option) (*cleanroomsml.GetAudienceGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAudienceGenerationJobWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.GetAudienceGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAudienceGenerationJobWithContext indicates an expected call of GetAudienceGenerationJobWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) GetAudienceGenerationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudienceGenerationJobWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetAudienceGenerationJobWithContext), varargs...)
}

// GetAudienceModel mocks base method
func (m *MockCleanRoomsMLAPI) GetAudienceModel(arg0 *cleanroomsml.GetAudienceModelInput) (*cleanroomsml.GetAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudienceModel", arg0)
	ret0, _ := ret[0].(*cleanroomsml.GetAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAudienceModel indicates an expected call of GetAudienceModel
func (mr *MockCleanRoomsMLAPIMockRecorder) GetAudienceModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudienceModel", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetAudienceModel), arg0)
}

// GetAudienceModelRequest mocks base method
func (m *MockCleanRoomsMLAPI) GetAudienceModelRequest(arg0 *cleanroomsml.GetAudienceModelInput) (*request.Request, *cleanroomsml.GetAudienceModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudienceModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.GetAudienceModelOutput)
	return ret0, ret1
}

// GetAudienceModelRequest indicates an expected call of GetAudienceModelRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) GetAudienceModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudienceModelRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetAudienceModelRequest), arg0)
}

// GetAudienceModelWithContext mocks base method
func (m *MockCleanRoomsMLAPI) GetAudienceModelWithContext(arg0 context.Context, arg1 *cleanroomsml.GetAudienceModelInput, arg2 ...request.Option) (*cleanroomsml.GetAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAudienceModelWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.GetAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAudienceModelWithContext indicates an expected call of GetAudienceModelWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) GetAudienceModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudienceModelWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetAudienceModelWithContext), varargs...)
}

// GetConfiguredAudienceModel mocks base method
func (m *MockCleanRoomsMLAPI) GetConfiguredAudienceModel(arg0 *cleanroomsml.GetConfiguredAudienceModelInput) (*cleanroomsml.GetConfiguredAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredAudienceModel", arg0)
	ret0, _ := ret[0].(*cleanroomsml.GetConfiguredAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredAudienceModel indicates an expected call of GetConfiguredAudienceModel
func (mr *MockCleanRoomsMLAPIMockRecorder) GetConfiguredAudienceModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredAudienceModel", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetConfiguredAudienceModel), arg0)
}

// GetConfiguredAudienceModelPolicy mocks base method
func (m *MockCleanRoomsMLAPI) GetConfiguredAudienceModelPolicy(arg0 *cleanroomsml.GetConfiguredAudienceModelPolicyInput) (*cleanroomsml.GetConfiguredAudienceModelPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredAudienceModelPolicy", arg0)
	ret0, _ := ret[0].(*cleanroomsml.GetConfiguredAudienceModelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredAudienceModelPolicy indicates an expected call of GetConfiguredAudienceModelPolicy
func (mr *MockCleanRoomsMLAPIMockRecorder) GetConfiguredAudienceModelPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredAudienceModelPolicy", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetConfiguredAudienceModelPolicy), arg0)
}

// GetConfiguredAudienceModelPolicyRequest mocks base method
func (m *MockCleanRoomsMLAPI) GetConfiguredAudienceModelPolicyRequest(arg0 *cleanroomsml.GetConfiguredAudienceModelPolicyInput) (*request.Request, *cleanroomsml.GetConfiguredAudienceModelPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredAudienceModelPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.GetConfiguredAudienceModelPolicyOutput)
	return ret0, ret1
}

// GetConfiguredAudienceModelPolicyRequest indicates an expected call of GetConfiguredAudienceModelPolicyRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) GetConfiguredAudienceModelPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredAudienceModelPolicyRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetConfiguredAudienceModelPolicyRequest), arg0)
}

// GetConfiguredAudienceModelPolicyWithContext mocks base method
func (m *MockCleanRoomsMLAPI) GetConfiguredAudienceModelPolicyWithContext(arg0 context.Context, arg1 *cleanroomsml.GetConfiguredAudienceModelPolicyInput, arg2 ...request.Option) (*cleanroomsml.GetConfiguredAudienceModelPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfiguredAudienceModelPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.GetConfiguredAudienceModelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredAudienceModelPolicyWithContext indicates an expected call of GetConfiguredAudienceModelPolicyWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) GetConfiguredAudienceModelPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredAudienceModelPolicyWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetConfiguredAudienceModelPolicyWithContext), varargs...)
}

// GetConfiguredAudienceModelRequest mocks base method
func (m *MockCleanRoomsMLAPI) GetConfiguredAudienceModelRequest(arg0 *cleanroomsml.GetConfiguredAudienceModelInput) (*request.Request, *cleanroomsml.GetConfiguredAudienceModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredAudienceModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.GetConfiguredAudienceModelOutput)
	return ret0, ret1
}

// GetConfiguredAudienceModelRequest indicates an expected call of GetConfiguredAudienceModelRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) GetConfiguredAudienceModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredAudienceModelRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetConfiguredAudienceModelRequest), arg0)
}

// GetConfiguredAudienceModelWithContext mocks base method
func (m *MockCleanRoomsMLAPI) GetConfiguredAudienceModelWithContext(arg0 context.Context, arg1 *cleanroomsml.GetConfiguredAudienceModelInput, arg2 ...request.Option) (*cleanroomsml.GetConfiguredAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfiguredAudienceModelWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.GetConfiguredAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredAudienceModelWithContext indicates an expected call of GetConfiguredAudienceModelWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) GetConfiguredAudienceModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredAudienceModelWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetConfiguredAudienceModelWithContext), varargs...)
}

// GetTrainingDataset mocks base method
func (m *MockCleanRoomsMLAPI) GetTrainingDataset(arg0 *cleanroomsml.GetTrainingDatasetInput) (*cleanroomsml.GetTrainingDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainingDataset", arg0)
	ret0, _ := ret[0].(*cleanroomsml.GetTrainingDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainingDataset indicates an expected call of GetTrainingDataset
func (mr *MockCleanRoomsMLAPIMockRecorder) GetTrainingDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainingDataset", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetTrainingDataset), arg0)
}

// GetTrainingDatasetRequest mocks base method
func (m *MockCleanRoomsMLAPI) GetTrainingDatasetRequest(arg0 *cleanroomsml.GetTrainingDatasetInput) (*request.Request, *cleanroomsml.GetTrainingDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainingDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.GetTrainingDatasetOutput)
	return ret0, ret1
}

// GetTrainingDatasetRequest indicates an expected call of GetTrainingDatasetRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) GetTrainingDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainingDatasetRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetTrainingDatasetRequest), arg0)
}

// GetTrainingDatasetWithContext mocks base method
func (m *MockCleanRoomsMLAPI) GetTrainingDatasetWithContext(arg0 context.Context, arg1 *cleanroomsml.GetTrainingDatasetInput, arg2 ...request.Option) (*cleanroomsml.GetTrainingDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrainingDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.GetTrainingDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainingDatasetWithContext indicates an expected call of GetTrainingDatasetWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) GetTrainingDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainingDatasetWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).GetTrainingDatasetWithContext), varargs...)
}

// ListAudienceExportJobs mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceExportJobs(arg0 *cleanroomsml.ListAudienceExportJobsInput) (*cleanroomsml.ListAudienceExportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceExportJobs", arg0)
	ret0, _ := ret[0].(*cleanroomsml.ListAudienceExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAudienceExportJobs indicates an expected call of ListAudienceExportJobs
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceExportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceExportJobs", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceExportJobs), arg0)
}

// ListAudienceExportJobsPages mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceExportJobsPages(arg0 *cleanroomsml.ListAudienceExportJobsInput, arg1 func(*cleanroomsml.ListAudienceExportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceExportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAudienceExportJobsPages indicates an expected call of ListAudienceExportJobsPages
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceExportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceExportJobsPages", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceExportJobsPages), arg0, arg1)
}

// ListAudienceExportJobsPagesWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceExportJobsPagesWithContext(arg0 context.Context, arg1 *cleanroomsml.ListAudienceExportJobsInput, arg2 func(*cleanroomsml.ListAudienceExportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAudienceExportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAudienceExportJobsPagesWithContext indicates an expected call of ListAudienceExportJobsPagesWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceExportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceExportJobsPagesWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceExportJobsPagesWithContext), varargs...)
}

// ListAudienceExportJobsRequest mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceExportJobsRequest(arg0 *cleanroomsml.ListAudienceExportJobsInput) (*request.Request, *cleanroomsml.ListAudienceExportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceExportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.ListAudienceExportJobsOutput)
	return ret0, ret1
}

// ListAudienceExportJobsRequest indicates an expected call of ListAudienceExportJobsRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceExportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceExportJobsRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceExportJobsRequest), arg0)
}

// ListAudienceExportJobsWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceExportJobsWithContext(arg0 context.Context, arg1 *cleanroomsml.ListAudienceExportJobsInput, arg2 ...request.Option) (*cleanroomsml.ListAudienceExportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAudienceExportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.ListAudienceExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAudienceExportJobsWithContext indicates an expected call of ListAudienceExportJobsWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceExportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceExportJobsWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceExportJobsWithContext), varargs...)
}

// ListAudienceGenerationJobs mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceGenerationJobs(arg0 *cleanroomsml.ListAudienceGenerationJobsInput) (*cleanroomsml.ListAudienceGenerationJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceGenerationJobs", arg0)
	ret0, _ := ret[0].(*cleanroomsml.ListAudienceGenerationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAudienceGenerationJobs indicates an expected call of ListAudienceGenerationJobs
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceGenerationJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceGenerationJobs", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceGenerationJobs), arg0)
}

// ListAudienceGenerationJobsPages mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceGenerationJobsPages(arg0 *cleanroomsml.ListAudienceGenerationJobsInput, arg1 func(*cleanroomsml.ListAudienceGenerationJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceGenerationJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAudienceGenerationJobsPages indicates an expected call of ListAudienceGenerationJobsPages
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceGenerationJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceGenerationJobsPages", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceGenerationJobsPages), arg0, arg1)
}

// ListAudienceGenerationJobsPagesWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceGenerationJobsPagesWithContext(arg0 context.Context, arg1 *cleanroomsml.ListAudienceGenerationJobsInput, arg2 func(*cleanroomsml.ListAudienceGenerationJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAudienceGenerationJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAudienceGenerationJobsPagesWithContext indicates an expected call of ListAudienceGenerationJobsPagesWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceGenerationJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceGenerationJobsPagesWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceGenerationJobsPagesWithContext), varargs...)
}

// ListAudienceGenerationJobsRequest mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceGenerationJobsRequest(arg0 *cleanroomsml.ListAudienceGenerationJobsInput) (*request.Request, *cleanroomsml.ListAudienceGenerationJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceGenerationJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.ListAudienceGenerationJobsOutput)
	return ret0, ret1
}

// ListAudienceGenerationJobsRequest indicates an expected call of ListAudienceGenerationJobsRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceGenerationJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceGenerationJobsRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceGenerationJobsRequest), arg0)
}

// ListAudienceGenerationJobsWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceGenerationJobsWithContext(arg0 context.Context, arg1 *cleanroomsml.ListAudienceGenerationJobsInput, arg2 ...request.Option) (*cleanroomsml.ListAudienceGenerationJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAudienceGenerationJobsWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.ListAudienceGenerationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAudienceGenerationJobsWithContext indicates an expected call of ListAudienceGenerationJobsWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceGenerationJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceGenerationJobsWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceGenerationJobsWithContext), varargs...)
}

// ListAudienceModels mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceModels(arg0 *cleanroomsml.ListAudienceModelsInput) (*cleanroomsml.ListAudienceModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceModels", arg0)
	ret0, _ := ret[0].(*cleanroomsml.ListAudienceModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAudienceModels indicates an expected call of ListAudienceModels
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceModels", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceModels), arg0)
}

// ListAudienceModelsPages mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceModelsPages(arg0 *cleanroomsml.ListAudienceModelsInput, arg1 func(*cleanroomsml.ListAudienceModelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceModelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAudienceModelsPages indicates an expected call of ListAudienceModelsPages
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceModelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceModelsPages", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceModelsPages), arg0, arg1)
}

// ListAudienceModelsPagesWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceModelsPagesWithContext(arg0 context.Context, arg1 *cleanroomsml.ListAudienceModelsInput, arg2 func(*cleanroomsml.ListAudienceModelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAudienceModelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAudienceModelsPagesWithContext indicates an expected call of ListAudienceModelsPagesWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceModelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceModelsPagesWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceModelsPagesWithContext), varargs...)
}

// ListAudienceModelsRequest mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceModelsRequest(arg0 *cleanroomsml.ListAudienceModelsInput) (*request.Request, *cleanroomsml.ListAudienceModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.ListAudienceModelsOutput)
	return ret0, ret1
}

// ListAudienceModelsRequest indicates an expected call of ListAudienceModelsRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceModelsRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceModelsRequest), arg0)
}

// ListAudienceModelsWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListAudienceModelsWithContext(arg0 context.Context, arg1 *cleanroomsml.ListAudienceModelsInput, arg2 ...request.Option) (*cleanroomsml.ListAudienceModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAudienceModelsWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.ListAudienceModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAudienceModelsWithContext indicates an expected call of ListAudienceModelsWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListAudienceModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceModelsWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListAudienceModelsWithContext), varargs...)
}

// ListConfiguredAudienceModels mocks base method
func (m *MockCleanRoomsMLAPI) ListConfiguredAudienceModels(arg0 *cleanroomsml.ListConfiguredAudienceModelsInput) (*cleanroomsml.ListConfiguredAudienceModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfiguredAudienceModels", arg0)
	ret0, _ := ret[0].(*cleanroomsml.ListConfiguredAudienceModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfiguredAudienceModels indicates an expected call of ListConfiguredAudienceModels
func (mr *MockCleanRoomsMLAPIMockRecorder) ListConfiguredAudienceModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredAudienceModels", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListConfiguredAudienceModels), arg0)
}

// ListConfiguredAudienceModelsPages mocks base method
func (m *MockCleanRoomsMLAPI) ListConfiguredAudienceModelsPages(arg0 *cleanroomsml.ListConfiguredAudienceModelsInput, arg1 func(*cleanroomsml.ListConfiguredAudienceModelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfiguredAudienceModelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfiguredAudienceModelsPages indicates an expected call of ListConfiguredAudienceModelsPages
func (mr *MockCleanRoomsMLAPIMockRecorder) ListConfiguredAudienceModelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredAudienceModelsPages", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListConfiguredAudienceModelsPages), arg0, arg1)
}

// ListConfiguredAudienceModelsPagesWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListConfiguredAudienceModelsPagesWithContext(arg0 context.Context, arg1 *cleanroomsml.ListConfiguredAudienceModelsInput, arg2 func(*cleanroomsml.ListConfiguredAudienceModelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfiguredAudienceModelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfiguredAudienceModelsPagesWithContext indicates an expected call of ListConfiguredAudienceModelsPagesWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListConfiguredAudienceModelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredAudienceModelsPagesWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListConfiguredAudienceModelsPagesWithContext), varargs...)
}

// ListConfiguredAudienceModelsRequest mocks base method
func (m *MockCleanRoomsMLAPI) ListConfiguredAudienceModelsRequest(arg0 *cleanroomsml.ListConfiguredAudienceModelsInput) (*request.Request, *cleanroomsml.ListConfiguredAudienceModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfiguredAudienceModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.ListConfiguredAudienceModelsOutput)
	return ret0, ret1
}

// ListConfiguredAudienceModelsRequest indicates an expected call of ListConfiguredAudienceModelsRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) ListConfiguredAudienceModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredAudienceModelsRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListConfiguredAudienceModelsRequest), arg0)
}

// ListConfiguredAudienceModelsWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListConfiguredAudienceModelsWithContext(arg0 context.Context, arg1 *cleanroomsml.ListConfiguredAudienceModelsInput, arg2 ...request.Option) (*cleanroomsml.ListConfiguredAudienceModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfiguredAudienceModelsWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.ListConfiguredAudienceModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfiguredAudienceModelsWithContext indicates an expected call of ListConfiguredAudienceModelsWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListConfiguredAudienceModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredAudienceModelsWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListConfiguredAudienceModelsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCleanRoomsMLAPI) ListTagsForResource(arg0 *cleanroomsml.ListTagsForResourceInput) (*cleanroomsml.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*cleanroomsml.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCleanRoomsMLAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCleanRoomsMLAPI) ListTagsForResourceRequest(arg0 *cleanroomsml.ListTagsForResourceInput) (*request.Request, *cleanroomsml.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *cleanroomsml.ListTagsForResourceInput, arg2 ...request.Option) (*cleanroomsml.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTrainingDatasets mocks base method
func (m *MockCleanRoomsMLAPI) ListTrainingDatasets(arg0 *cleanroomsml.ListTrainingDatasetsInput) (*cleanroomsml.ListTrainingDatasetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrainingDatasets", arg0)
	ret0, _ := ret[0].(*cleanroomsml.ListTrainingDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrainingDatasets indicates an expected call of ListTrainingDatasets
func (mr *MockCleanRoomsMLAPIMockRecorder) ListTrainingDatasets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingDatasets", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListTrainingDatasets), arg0)
}

// ListTrainingDatasetsPages mocks base method
func (m *MockCleanRoomsMLAPI) ListTrainingDatasetsPages(arg0 *cleanroomsml.ListTrainingDatasetsInput, arg1 func(*cleanroomsml.ListTrainingDatasetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrainingDatasetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrainingDatasetsPages indicates an expected call of ListTrainingDatasetsPages
func (mr *MockCleanRoomsMLAPIMockRecorder) ListTrainingDatasetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingDatasetsPages", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListTrainingDatasetsPages), arg0, arg1)
}

// ListTrainingDatasetsPagesWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListTrainingDatasetsPagesWithContext(arg0 context.Context, arg1 *cleanroomsml.ListTrainingDatasetsInput, arg2 func(*cleanroomsml.ListTrainingDatasetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrainingDatasetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrainingDatasetsPagesWithContext indicates an expected call of ListTrainingDatasetsPagesWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListTrainingDatasetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingDatasetsPagesWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListTrainingDatasetsPagesWithContext), varargs...)
}

// ListTrainingDatasetsRequest mocks base method
func (m *MockCleanRoomsMLAPI) ListTrainingDatasetsRequest(arg0 *cleanroomsml.ListTrainingDatasetsInput) (*request.Request, *cleanroomsml.ListTrainingDatasetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrainingDatasetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.ListTrainingDatasetsOutput)
	return ret0, ret1
}

// ListTrainingDatasetsRequest indicates an expected call of ListTrainingDatasetsRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) ListTrainingDatasetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingDatasetsRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListTrainingDatasetsRequest), arg0)
}

// ListTrainingDatasetsWithContext mocks base method
func (m *MockCleanRoomsMLAPI) ListTrainingDatasetsWithContext(arg0 context.Context, arg1 *cleanroomsml.ListTrainingDatasetsInput, arg2 ...request.Option) (*cleanroomsml.ListTrainingDatasetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrainingDatasetsWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.ListTrainingDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrainingDatasetsWithContext indicates an expected call of ListTrainingDatasetsWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) ListTrainingDatasetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingDatasetsWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).ListTrainingDatasetsWithContext), varargs...)
}

// PutConfiguredAudienceModelPolicy mocks base method
func (m *MockCleanRoomsMLAPI) PutConfiguredAudienceModelPolicy(arg0 *cleanroomsml.PutConfiguredAudienceModelPolicyInput) (*cleanroomsml.PutConfiguredAudienceModelPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfiguredAudienceModelPolicy", arg0)
	ret0, _ := ret[0].(*cleanroomsml.PutConfiguredAudienceModelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfiguredAudienceModelPolicy indicates an expected call of PutConfiguredAudienceModelPolicy
func (mr *MockCleanRoomsMLAPIMockRecorder) PutConfiguredAudienceModelPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfiguredAudienceModelPolicy", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).PutConfiguredAudienceModelPolicy), arg0)
}

// PutConfiguredAudienceModelPolicyRequest mocks base method
func (m *MockCleanRoomsMLAPI) PutConfiguredAudienceModelPolicyRequest(arg0 *cleanroomsml.PutConfiguredAudienceModelPolicyInput) (*request.Request, *cleanroomsml.PutConfiguredAudienceModelPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfiguredAudienceModelPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.PutConfiguredAudienceModelPolicyOutput)
	return ret0, ret1
}

// PutConfiguredAudienceModelPolicyRequest indicates an expected call of PutConfiguredAudienceModelPolicyRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) PutConfiguredAudienceModelPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfiguredAudienceModelPolicyRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).PutConfiguredAudienceModelPolicyRequest), arg0)
}

// PutConfiguredAudienceModelPolicyWithContext mocks base method
func (m *MockCleanRoomsMLAPI) PutConfiguredAudienceModelPolicyWithContext(arg0 context.Context, arg1 *cleanroomsml.PutConfiguredAudienceModelPolicyInput, arg2 ...request.Option) (*cleanroomsml.PutConfiguredAudienceModelPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfiguredAudienceModelPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.PutConfiguredAudienceModelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfiguredAudienceModelPolicyWithContext indicates an expected call of PutConfiguredAudienceModelPolicyWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) PutConfiguredAudienceModelPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfiguredAudienceModelPolicyWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).PutConfiguredAudienceModelPolicyWithContext), varargs...)
}

// StartAudienceExportJob mocks base method
func (m *MockCleanRoomsMLAPI) StartAudienceExportJob(arg0 *cleanroomsml.StartAudienceExportJobInput) (*cleanroomsml.StartAudienceExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAudienceExportJob", arg0)
	ret0, _ := ret[0].(*cleanroomsml.StartAudienceExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAudienceExportJob indicates an expected call of StartAudienceExportJob
func (mr *MockCleanRoomsMLAPIMockRecorder) StartAudienceExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAudienceExportJob", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).StartAudienceExportJob), arg0)
}

// StartAudienceExportJobRequest mocks base method
func (m *MockCleanRoomsMLAPI) StartAudienceExportJobRequest(arg0 *cleanroomsml.StartAudienceExportJobInput) (*request.Request, *cleanroomsml.StartAudienceExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAudienceExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.StartAudienceExportJobOutput)
	return ret0, ret1
}

// StartAudienceExportJobRequest indicates an expected call of StartAudienceExportJobRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) StartAudienceExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAudienceExportJobRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).StartAudienceExportJobRequest), arg0)
}

// StartAudienceExportJobWithContext mocks base method
func (m *MockCleanRoomsMLAPI) StartAudienceExportJobWithContext(arg0 context.Context, arg1 *cleanroomsml.StartAudienceExportJobInput, arg2 ...request.Option) (*cleanroomsml.StartAudienceExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAudienceExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.StartAudienceExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAudienceExportJobWithContext indicates an expected call of StartAudienceExportJobWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) StartAudienceExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAudienceExportJobWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).StartAudienceExportJobWithContext), varargs...)
}

// StartAudienceGenerationJob mocks base method
func (m *MockCleanRoomsMLAPI) StartAudienceGenerationJob(arg0 *cleanroomsml.StartAudienceGenerationJobInput) (*cleanroomsml.StartAudienceGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAudienceGenerationJob", arg0)
	ret0, _ := ret[0].(*cleanroomsml.StartAudienceGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAudienceGenerationJob indicates an expected call of StartAudienceGenerationJob
func (mr *MockCleanRoomsMLAPIMockRecorder) StartAudienceGenerationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAudienceGenerationJob", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).StartAudienceGenerationJob), arg0)
}

// StartAudienceGenerationJobRequest mocks base method
func (m *MockCleanRoomsMLAPI) StartAudienceGenerationJobRequest(arg0 *cleanroomsml.StartAudienceGenerationJobInput) (*request.Request, *cleanroomsml.StartAudienceGenerationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAudienceGenerationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.StartAudienceGenerationJobOutput)
	return ret0, ret1
}

// StartAudienceGenerationJobRequest indicates an expected call of StartAudienceGenerationJobRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) StartAudienceGenerationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAudienceGenerationJobRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).StartAudienceGenerationJobRequest), arg0)
}

// StartAudienceGenerationJobWithContext mocks base method
func (m *MockCleanRoomsMLAPI) StartAudienceGenerationJobWithContext(arg0 context.Context, arg1 *cleanroomsml.StartAudienceGenerationJobInput, arg2 ...request.Option) (*cleanroomsml.StartAudienceGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAudienceGenerationJobWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.StartAudienceGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAudienceGenerationJobWithContext indicates an expected call of StartAudienceGenerationJobWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) StartAudienceGenerationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAudienceGenerationJobWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).StartAudienceGenerationJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCleanRoomsMLAPI) TagResource(arg0 *cleanroomsml.TagResourceInput) (*cleanroomsml.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*cleanroomsml.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCleanRoomsMLAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCleanRoomsMLAPI) TagResourceRequest(arg0 *cleanroomsml.TagResourceInput) (*request.Request, *cleanroomsml.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCleanRoomsMLAPI) TagResourceWithContext(arg0 context.Context, arg1 *cleanroomsml.TagResourceInput, arg2 ...request.Option) (*cleanroomsml.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCleanRoomsMLAPI) UntagResource(arg0 *cleanroomsml.UntagResourceInput) (*cleanroomsml.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*cleanroomsml.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCleanRoomsMLAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCleanRoomsMLAPI) UntagResourceRequest(arg0 *cleanroomsml.UntagResourceInput) (*request.Request, *cleanroomsml.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCleanRoomsMLAPI) UntagResourceWithContext(arg0 context.Context, arg1 *cleanroomsml.UntagResourceInput, arg2 ...request.Option) (*cleanroomsml.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateConfiguredAudienceModel mocks base method
func (m *MockCleanRoomsMLAPI) UpdateConfiguredAudienceModel(arg0 *cleanroomsml.UpdateConfiguredAudienceModelInput) (*cleanroomsml.UpdateConfiguredAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguredAudienceModel", arg0)
	ret0, _ := ret[0].(*cleanroomsml.UpdateConfiguredAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguredAudienceModel indicates an expected call of UpdateConfiguredAudienceModel
func (mr *MockCleanRoomsMLAPIMockRecorder) UpdateConfiguredAudienceModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredAudienceModel", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).UpdateConfiguredAudienceModel), arg0)
}

// UpdateConfiguredAudienceModelRequest mocks base method
func (m *MockCleanRoomsMLAPI) UpdateConfiguredAudienceModelRequest(arg0 *cleanroomsml.UpdateConfiguredAudienceModelInput) (*request.Request, *cleanroomsml.UpdateConfiguredAudienceModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguredAudienceModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanroomsml.UpdateConfiguredAudienceModelOutput)
	return ret0, ret1
}

// UpdateConfiguredAudienceModelRequest indicates an expected call of UpdateConfiguredAudienceModelRequest
func (mr *MockCleanRoomsMLAPIMockRecorder) UpdateConfiguredAudienceModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredAudienceModelRequest", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).UpdateConfiguredAudienceModelRequest), arg0)
}

// UpdateConfiguredAudienceModelWithContext mocks base method
func (m *MockCleanRoomsMLAPI) UpdateConfiguredAudienceModelWithContext(arg0 context.Context, arg1 *cleanroomsml.UpdateConfiguredAudienceModelInput, arg2 ...request.Option) (*cleanroomsml.UpdateConfiguredAudienceModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfiguredAudienceModelWithContext", varargs...)
	ret0, _ := ret[0].(*cleanroomsml.UpdateConfiguredAudienceModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguredAudienceModelWithContext indicates an expected call of UpdateConfiguredAudienceModelWithContext
func (mr *MockCleanRoomsMLAPIMockRecorder) UpdateConfiguredAudienceModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredAudienceModelWithContext", reflect.TypeOf((*MockCleanRoomsMLAPI)(nil).UpdateConfiguredAudienceModelWithContext), varargs...)
}
