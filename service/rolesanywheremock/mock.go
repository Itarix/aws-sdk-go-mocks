// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/rolesanywhere/rolesanywhereiface (interfaces: RolesAnywhereAPI)

// Package rolesanywheremock is a generated GoMock package.
package rolesanywheremock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	rolesanywhere "github.com/aws/aws-sdk-go/service/rolesanywhere"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRolesAnywhereAPI is a mock of RolesAnywhereAPI interface
type MockRolesAnywhereAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRolesAnywhereAPIMockRecorder
}

// MockRolesAnywhereAPIMockRecorder is the mock recorder for MockRolesAnywhereAPI
type MockRolesAnywhereAPIMockRecorder struct {
	mock *MockRolesAnywhereAPI
}

// NewMockRolesAnywhereAPI creates a new mock instance
func NewMockRolesAnywhereAPI(ctrl *gomock.Controller) *MockRolesAnywhereAPI {
	mock := &MockRolesAnywhereAPI{ctrl: ctrl}
	mock.recorder = &MockRolesAnywhereAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRolesAnywhereAPI) EXPECT() *MockRolesAnywhereAPIMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method
func (m *MockRolesAnywhereAPI) CreateProfile(arg0 *rolesanywhere.CreateProfileInput) (*rolesanywhere.CreateProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0)
	ret0, _ := ret[0].(*rolesanywhere.CreateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockRolesAnywhereAPIMockRecorder) CreateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).CreateProfile), arg0)
}

// CreateProfileRequest mocks base method
func (m *MockRolesAnywhereAPI) CreateProfileRequest(arg0 *rolesanywhere.CreateProfileInput) (*request.Request, *rolesanywhere.CreateProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.CreateProfileOutput)
	return ret0, ret1
}

// CreateProfileRequest indicates an expected call of CreateProfileRequest
func (mr *MockRolesAnywhereAPIMockRecorder) CreateProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).CreateProfileRequest), arg0)
}

// CreateProfileWithContext mocks base method
func (m *MockRolesAnywhereAPI) CreateProfileWithContext(arg0 context.Context, arg1 *rolesanywhere.CreateProfileInput, arg2 ...request.Option) (*rolesanywhere.CreateProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfileWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.CreateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfileWithContext indicates an expected call of CreateProfileWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) CreateProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).CreateProfileWithContext), varargs...)
}

// CreateTrustAnchor mocks base method
func (m *MockRolesAnywhereAPI) CreateTrustAnchor(arg0 *rolesanywhere.CreateTrustAnchorInput) (*rolesanywhere.CreateTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrustAnchor", arg0)
	ret0, _ := ret[0].(*rolesanywhere.CreateTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrustAnchor indicates an expected call of CreateTrustAnchor
func (mr *MockRolesAnywhereAPIMockRecorder) CreateTrustAnchor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrustAnchor", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).CreateTrustAnchor), arg0)
}

// CreateTrustAnchorRequest mocks base method
func (m *MockRolesAnywhereAPI) CreateTrustAnchorRequest(arg0 *rolesanywhere.CreateTrustAnchorInput) (*request.Request, *rolesanywhere.CreateTrustAnchorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrustAnchorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.CreateTrustAnchorOutput)
	return ret0, ret1
}

// CreateTrustAnchorRequest indicates an expected call of CreateTrustAnchorRequest
func (mr *MockRolesAnywhereAPIMockRecorder) CreateTrustAnchorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrustAnchorRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).CreateTrustAnchorRequest), arg0)
}

// CreateTrustAnchorWithContext mocks base method
func (m *MockRolesAnywhereAPI) CreateTrustAnchorWithContext(arg0 context.Context, arg1 *rolesanywhere.CreateTrustAnchorInput, arg2 ...request.Option) (*rolesanywhere.CreateTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrustAnchorWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.CreateTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrustAnchorWithContext indicates an expected call of CreateTrustAnchorWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) CreateTrustAnchorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrustAnchorWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).CreateTrustAnchorWithContext), varargs...)
}

// DeleteAttributeMapping mocks base method
func (m *MockRolesAnywhereAPI) DeleteAttributeMapping(arg0 *rolesanywhere.DeleteAttributeMappingInput) (*rolesanywhere.DeleteAttributeMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttributeMapping", arg0)
	ret0, _ := ret[0].(*rolesanywhere.DeleteAttributeMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttributeMapping indicates an expected call of DeleteAttributeMapping
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteAttributeMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttributeMapping", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteAttributeMapping), arg0)
}

// DeleteAttributeMappingRequest mocks base method
func (m *MockRolesAnywhereAPI) DeleteAttributeMappingRequest(arg0 *rolesanywhere.DeleteAttributeMappingInput) (*request.Request, *rolesanywhere.DeleteAttributeMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttributeMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.DeleteAttributeMappingOutput)
	return ret0, ret1
}

// DeleteAttributeMappingRequest indicates an expected call of DeleteAttributeMappingRequest
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteAttributeMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttributeMappingRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteAttributeMappingRequest), arg0)
}

// DeleteAttributeMappingWithContext mocks base method
func (m *MockRolesAnywhereAPI) DeleteAttributeMappingWithContext(arg0 context.Context, arg1 *rolesanywhere.DeleteAttributeMappingInput, arg2 ...request.Option) (*rolesanywhere.DeleteAttributeMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttributeMappingWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DeleteAttributeMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttributeMappingWithContext indicates an expected call of DeleteAttributeMappingWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteAttributeMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttributeMappingWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteAttributeMappingWithContext), varargs...)
}

// DeleteCrl mocks base method
func (m *MockRolesAnywhereAPI) DeleteCrl(arg0 *rolesanywhere.DeleteCrlInput) (*rolesanywhere.DeleteCrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCrl", arg0)
	ret0, _ := ret[0].(*rolesanywhere.DeleteCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCrl indicates an expected call of DeleteCrl
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteCrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrl", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteCrl), arg0)
}

// DeleteCrlRequest mocks base method
func (m *MockRolesAnywhereAPI) DeleteCrlRequest(arg0 *rolesanywhere.DeleteCrlInput) (*request.Request, *rolesanywhere.DeleteCrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.DeleteCrlOutput)
	return ret0, ret1
}

// DeleteCrlRequest indicates an expected call of DeleteCrlRequest
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteCrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrlRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteCrlRequest), arg0)
}

// DeleteCrlWithContext mocks base method
func (m *MockRolesAnywhereAPI) DeleteCrlWithContext(arg0 context.Context, arg1 *rolesanywhere.DeleteCrlInput, arg2 ...request.Option) (*rolesanywhere.DeleteCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCrlWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DeleteCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCrlWithContext indicates an expected call of DeleteCrlWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteCrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrlWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteCrlWithContext), varargs...)
}

// DeleteProfile mocks base method
func (m *MockRolesAnywhereAPI) DeleteProfile(arg0 *rolesanywhere.DeleteProfileInput) (*rolesanywhere.DeleteProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", arg0)
	ret0, _ := ret[0].(*rolesanywhere.DeleteProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfile indicates an expected call of DeleteProfile
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteProfile), arg0)
}

// DeleteProfileRequest mocks base method
func (m *MockRolesAnywhereAPI) DeleteProfileRequest(arg0 *rolesanywhere.DeleteProfileInput) (*request.Request, *rolesanywhere.DeleteProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.DeleteProfileOutput)
	return ret0, ret1
}

// DeleteProfileRequest indicates an expected call of DeleteProfileRequest
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteProfileRequest), arg0)
}

// DeleteProfileWithContext mocks base method
func (m *MockRolesAnywhereAPI) DeleteProfileWithContext(arg0 context.Context, arg1 *rolesanywhere.DeleteProfileInput, arg2 ...request.Option) (*rolesanywhere.DeleteProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfileWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DeleteProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileWithContext indicates an expected call of DeleteProfileWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteProfileWithContext), varargs...)
}

// DeleteTrustAnchor mocks base method
func (m *MockRolesAnywhereAPI) DeleteTrustAnchor(arg0 *rolesanywhere.DeleteTrustAnchorInput) (*rolesanywhere.DeleteTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrustAnchor", arg0)
	ret0, _ := ret[0].(*rolesanywhere.DeleteTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrustAnchor indicates an expected call of DeleteTrustAnchor
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteTrustAnchor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrustAnchor", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteTrustAnchor), arg0)
}

// DeleteTrustAnchorRequest mocks base method
func (m *MockRolesAnywhereAPI) DeleteTrustAnchorRequest(arg0 *rolesanywhere.DeleteTrustAnchorInput) (*request.Request, *rolesanywhere.DeleteTrustAnchorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrustAnchorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.DeleteTrustAnchorOutput)
	return ret0, ret1
}

// DeleteTrustAnchorRequest indicates an expected call of DeleteTrustAnchorRequest
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteTrustAnchorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrustAnchorRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteTrustAnchorRequest), arg0)
}

// DeleteTrustAnchorWithContext mocks base method
func (m *MockRolesAnywhereAPI) DeleteTrustAnchorWithContext(arg0 context.Context, arg1 *rolesanywhere.DeleteTrustAnchorInput, arg2 ...request.Option) (*rolesanywhere.DeleteTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrustAnchorWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DeleteTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrustAnchorWithContext indicates an expected call of DeleteTrustAnchorWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) DeleteTrustAnchorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrustAnchorWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DeleteTrustAnchorWithContext), varargs...)
}

// DisableCrl mocks base method
func (m *MockRolesAnywhereAPI) DisableCrl(arg0 *rolesanywhere.DisableCrlInput) (*rolesanywhere.DisableCrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableCrl", arg0)
	ret0, _ := ret[0].(*rolesanywhere.DisableCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableCrl indicates an expected call of DisableCrl
func (mr *MockRolesAnywhereAPIMockRecorder) DisableCrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableCrl", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DisableCrl), arg0)
}

// DisableCrlRequest mocks base method
func (m *MockRolesAnywhereAPI) DisableCrlRequest(arg0 *rolesanywhere.DisableCrlInput) (*request.Request, *rolesanywhere.DisableCrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableCrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.DisableCrlOutput)
	return ret0, ret1
}

// DisableCrlRequest indicates an expected call of DisableCrlRequest
func (mr *MockRolesAnywhereAPIMockRecorder) DisableCrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableCrlRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DisableCrlRequest), arg0)
}

// DisableCrlWithContext mocks base method
func (m *MockRolesAnywhereAPI) DisableCrlWithContext(arg0 context.Context, arg1 *rolesanywhere.DisableCrlInput, arg2 ...request.Option) (*rolesanywhere.DisableCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableCrlWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DisableCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableCrlWithContext indicates an expected call of DisableCrlWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) DisableCrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableCrlWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DisableCrlWithContext), varargs...)
}

// DisableProfile mocks base method
func (m *MockRolesAnywhereAPI) DisableProfile(arg0 *rolesanywhere.DisableProfileInput) (*rolesanywhere.DisableProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableProfile", arg0)
	ret0, _ := ret[0].(*rolesanywhere.DisableProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableProfile indicates an expected call of DisableProfile
func (mr *MockRolesAnywhereAPIMockRecorder) DisableProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableProfile", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DisableProfile), arg0)
}

// DisableProfileRequest mocks base method
func (m *MockRolesAnywhereAPI) DisableProfileRequest(arg0 *rolesanywhere.DisableProfileInput) (*request.Request, *rolesanywhere.DisableProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.DisableProfileOutput)
	return ret0, ret1
}

// DisableProfileRequest indicates an expected call of DisableProfileRequest
func (mr *MockRolesAnywhereAPIMockRecorder) DisableProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableProfileRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DisableProfileRequest), arg0)
}

// DisableProfileWithContext mocks base method
func (m *MockRolesAnywhereAPI) DisableProfileWithContext(arg0 context.Context, arg1 *rolesanywhere.DisableProfileInput, arg2 ...request.Option) (*rolesanywhere.DisableProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableProfileWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DisableProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableProfileWithContext indicates an expected call of DisableProfileWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) DisableProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableProfileWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DisableProfileWithContext), varargs...)
}

// DisableTrustAnchor mocks base method
func (m *MockRolesAnywhereAPI) DisableTrustAnchor(arg0 *rolesanywhere.DisableTrustAnchorInput) (*rolesanywhere.DisableTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableTrustAnchor", arg0)
	ret0, _ := ret[0].(*rolesanywhere.DisableTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableTrustAnchor indicates an expected call of DisableTrustAnchor
func (mr *MockRolesAnywhereAPIMockRecorder) DisableTrustAnchor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTrustAnchor", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DisableTrustAnchor), arg0)
}

// DisableTrustAnchorRequest mocks base method
func (m *MockRolesAnywhereAPI) DisableTrustAnchorRequest(arg0 *rolesanywhere.DisableTrustAnchorInput) (*request.Request, *rolesanywhere.DisableTrustAnchorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableTrustAnchorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.DisableTrustAnchorOutput)
	return ret0, ret1
}

// DisableTrustAnchorRequest indicates an expected call of DisableTrustAnchorRequest
func (mr *MockRolesAnywhereAPIMockRecorder) DisableTrustAnchorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTrustAnchorRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DisableTrustAnchorRequest), arg0)
}

// DisableTrustAnchorWithContext mocks base method
func (m *MockRolesAnywhereAPI) DisableTrustAnchorWithContext(arg0 context.Context, arg1 *rolesanywhere.DisableTrustAnchorInput, arg2 ...request.Option) (*rolesanywhere.DisableTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableTrustAnchorWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DisableTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableTrustAnchorWithContext indicates an expected call of DisableTrustAnchorWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) DisableTrustAnchorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTrustAnchorWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).DisableTrustAnchorWithContext), varargs...)
}

// EnableCrl mocks base method
func (m *MockRolesAnywhereAPI) EnableCrl(arg0 *rolesanywhere.EnableCrlInput) (*rolesanywhere.EnableCrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCrl", arg0)
	ret0, _ := ret[0].(*rolesanywhere.EnableCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableCrl indicates an expected call of EnableCrl
func (mr *MockRolesAnywhereAPIMockRecorder) EnableCrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCrl", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).EnableCrl), arg0)
}

// EnableCrlRequest mocks base method
func (m *MockRolesAnywhereAPI) EnableCrlRequest(arg0 *rolesanywhere.EnableCrlInput) (*request.Request, *rolesanywhere.EnableCrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.EnableCrlOutput)
	return ret0, ret1
}

// EnableCrlRequest indicates an expected call of EnableCrlRequest
func (mr *MockRolesAnywhereAPIMockRecorder) EnableCrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCrlRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).EnableCrlRequest), arg0)
}

// EnableCrlWithContext mocks base method
func (m *MockRolesAnywhereAPI) EnableCrlWithContext(arg0 context.Context, arg1 *rolesanywhere.EnableCrlInput, arg2 ...request.Option) (*rolesanywhere.EnableCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableCrlWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.EnableCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableCrlWithContext indicates an expected call of EnableCrlWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) EnableCrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCrlWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).EnableCrlWithContext), varargs...)
}

// EnableProfile mocks base method
func (m *MockRolesAnywhereAPI) EnableProfile(arg0 *rolesanywhere.EnableProfileInput) (*rolesanywhere.EnableProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableProfile", arg0)
	ret0, _ := ret[0].(*rolesanywhere.EnableProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableProfile indicates an expected call of EnableProfile
func (mr *MockRolesAnywhereAPIMockRecorder) EnableProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableProfile", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).EnableProfile), arg0)
}

// EnableProfileRequest mocks base method
func (m *MockRolesAnywhereAPI) EnableProfileRequest(arg0 *rolesanywhere.EnableProfileInput) (*request.Request, *rolesanywhere.EnableProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.EnableProfileOutput)
	return ret0, ret1
}

// EnableProfileRequest indicates an expected call of EnableProfileRequest
func (mr *MockRolesAnywhereAPIMockRecorder) EnableProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableProfileRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).EnableProfileRequest), arg0)
}

// EnableProfileWithContext mocks base method
func (m *MockRolesAnywhereAPI) EnableProfileWithContext(arg0 context.Context, arg1 *rolesanywhere.EnableProfileInput, arg2 ...request.Option) (*rolesanywhere.EnableProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableProfileWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.EnableProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableProfileWithContext indicates an expected call of EnableProfileWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) EnableProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableProfileWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).EnableProfileWithContext), varargs...)
}

// EnableTrustAnchor mocks base method
func (m *MockRolesAnywhereAPI) EnableTrustAnchor(arg0 *rolesanywhere.EnableTrustAnchorInput) (*rolesanywhere.EnableTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTrustAnchor", arg0)
	ret0, _ := ret[0].(*rolesanywhere.EnableTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableTrustAnchor indicates an expected call of EnableTrustAnchor
func (mr *MockRolesAnywhereAPIMockRecorder) EnableTrustAnchor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTrustAnchor", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).EnableTrustAnchor), arg0)
}

// EnableTrustAnchorRequest mocks base method
func (m *MockRolesAnywhereAPI) EnableTrustAnchorRequest(arg0 *rolesanywhere.EnableTrustAnchorInput) (*request.Request, *rolesanywhere.EnableTrustAnchorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTrustAnchorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.EnableTrustAnchorOutput)
	return ret0, ret1
}

// EnableTrustAnchorRequest indicates an expected call of EnableTrustAnchorRequest
func (mr *MockRolesAnywhereAPIMockRecorder) EnableTrustAnchorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTrustAnchorRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).EnableTrustAnchorRequest), arg0)
}

// EnableTrustAnchorWithContext mocks base method
func (m *MockRolesAnywhereAPI) EnableTrustAnchorWithContext(arg0 context.Context, arg1 *rolesanywhere.EnableTrustAnchorInput, arg2 ...request.Option) (*rolesanywhere.EnableTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableTrustAnchorWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.EnableTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableTrustAnchorWithContext indicates an expected call of EnableTrustAnchorWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) EnableTrustAnchorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTrustAnchorWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).EnableTrustAnchorWithContext), varargs...)
}

// GetCrl mocks base method
func (m *MockRolesAnywhereAPI) GetCrl(arg0 *rolesanywhere.GetCrlInput) (*rolesanywhere.GetCrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrl", arg0)
	ret0, _ := ret[0].(*rolesanywhere.GetCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrl indicates an expected call of GetCrl
func (mr *MockRolesAnywhereAPIMockRecorder) GetCrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrl", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetCrl), arg0)
}

// GetCrlRequest mocks base method
func (m *MockRolesAnywhereAPI) GetCrlRequest(arg0 *rolesanywhere.GetCrlInput) (*request.Request, *rolesanywhere.GetCrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.GetCrlOutput)
	return ret0, ret1
}

// GetCrlRequest indicates an expected call of GetCrlRequest
func (mr *MockRolesAnywhereAPIMockRecorder) GetCrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrlRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetCrlRequest), arg0)
}

// GetCrlWithContext mocks base method
func (m *MockRolesAnywhereAPI) GetCrlWithContext(arg0 context.Context, arg1 *rolesanywhere.GetCrlInput, arg2 ...request.Option) (*rolesanywhere.GetCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCrlWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.GetCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrlWithContext indicates an expected call of GetCrlWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) GetCrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrlWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetCrlWithContext), varargs...)
}

// GetProfile mocks base method
func (m *MockRolesAnywhereAPI) GetProfile(arg0 *rolesanywhere.GetProfileInput) (*rolesanywhere.GetProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*rolesanywhere.GetProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockRolesAnywhereAPIMockRecorder) GetProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetProfile), arg0)
}

// GetProfileRequest mocks base method
func (m *MockRolesAnywhereAPI) GetProfileRequest(arg0 *rolesanywhere.GetProfileInput) (*request.Request, *rolesanywhere.GetProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.GetProfileOutput)
	return ret0, ret1
}

// GetProfileRequest indicates an expected call of GetProfileRequest
func (mr *MockRolesAnywhereAPIMockRecorder) GetProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetProfileRequest), arg0)
}

// GetProfileWithContext mocks base method
func (m *MockRolesAnywhereAPI) GetProfileWithContext(arg0 context.Context, arg1 *rolesanywhere.GetProfileInput, arg2 ...request.Option) (*rolesanywhere.GetProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfileWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.GetProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileWithContext indicates an expected call of GetProfileWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) GetProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetProfileWithContext), varargs...)
}

// GetSubject mocks base method
func (m *MockRolesAnywhereAPI) GetSubject(arg0 *rolesanywhere.GetSubjectInput) (*rolesanywhere.GetSubjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject", arg0)
	ret0, _ := ret[0].(*rolesanywhere.GetSubjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubject indicates an expected call of GetSubject
func (mr *MockRolesAnywhereAPIMockRecorder) GetSubject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetSubject), arg0)
}

// GetSubjectRequest mocks base method
func (m *MockRolesAnywhereAPI) GetSubjectRequest(arg0 *rolesanywhere.GetSubjectInput) (*request.Request, *rolesanywhere.GetSubjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.GetSubjectOutput)
	return ret0, ret1
}

// GetSubjectRequest indicates an expected call of GetSubjectRequest
func (mr *MockRolesAnywhereAPIMockRecorder) GetSubjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetSubjectRequest), arg0)
}

// GetSubjectWithContext mocks base method
func (m *MockRolesAnywhereAPI) GetSubjectWithContext(arg0 context.Context, arg1 *rolesanywhere.GetSubjectInput, arg2 ...request.Option) (*rolesanywhere.GetSubjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubjectWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.GetSubjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectWithContext indicates an expected call of GetSubjectWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) GetSubjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetSubjectWithContext), varargs...)
}

// GetTrustAnchor mocks base method
func (m *MockRolesAnywhereAPI) GetTrustAnchor(arg0 *rolesanywhere.GetTrustAnchorInput) (*rolesanywhere.GetTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrustAnchor", arg0)
	ret0, _ := ret[0].(*rolesanywhere.GetTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrustAnchor indicates an expected call of GetTrustAnchor
func (mr *MockRolesAnywhereAPIMockRecorder) GetTrustAnchor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrustAnchor", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetTrustAnchor), arg0)
}

// GetTrustAnchorRequest mocks base method
func (m *MockRolesAnywhereAPI) GetTrustAnchorRequest(arg0 *rolesanywhere.GetTrustAnchorInput) (*request.Request, *rolesanywhere.GetTrustAnchorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrustAnchorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.GetTrustAnchorOutput)
	return ret0, ret1
}

// GetTrustAnchorRequest indicates an expected call of GetTrustAnchorRequest
func (mr *MockRolesAnywhereAPIMockRecorder) GetTrustAnchorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrustAnchorRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetTrustAnchorRequest), arg0)
}

// GetTrustAnchorWithContext mocks base method
func (m *MockRolesAnywhereAPI) GetTrustAnchorWithContext(arg0 context.Context, arg1 *rolesanywhere.GetTrustAnchorInput, arg2 ...request.Option) (*rolesanywhere.GetTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrustAnchorWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.GetTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrustAnchorWithContext indicates an expected call of GetTrustAnchorWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) GetTrustAnchorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrustAnchorWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).GetTrustAnchorWithContext), varargs...)
}

// ImportCrl mocks base method
func (m *MockRolesAnywhereAPI) ImportCrl(arg0 *rolesanywhere.ImportCrlInput) (*rolesanywhere.ImportCrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCrl", arg0)
	ret0, _ := ret[0].(*rolesanywhere.ImportCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCrl indicates an expected call of ImportCrl
func (mr *MockRolesAnywhereAPIMockRecorder) ImportCrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCrl", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ImportCrl), arg0)
}

// ImportCrlRequest mocks base method
func (m *MockRolesAnywhereAPI) ImportCrlRequest(arg0 *rolesanywhere.ImportCrlInput) (*request.Request, *rolesanywhere.ImportCrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.ImportCrlOutput)
	return ret0, ret1
}

// ImportCrlRequest indicates an expected call of ImportCrlRequest
func (mr *MockRolesAnywhereAPIMockRecorder) ImportCrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCrlRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ImportCrlRequest), arg0)
}

// ImportCrlWithContext mocks base method
func (m *MockRolesAnywhereAPI) ImportCrlWithContext(arg0 context.Context, arg1 *rolesanywhere.ImportCrlInput, arg2 ...request.Option) (*rolesanywhere.ImportCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportCrlWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ImportCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCrlWithContext indicates an expected call of ImportCrlWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ImportCrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCrlWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ImportCrlWithContext), varargs...)
}

// ListCrls mocks base method
func (m *MockRolesAnywhereAPI) ListCrls(arg0 *rolesanywhere.ListCrlsInput) (*rolesanywhere.ListCrlsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrls", arg0)
	ret0, _ := ret[0].(*rolesanywhere.ListCrlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCrls indicates an expected call of ListCrls
func (mr *MockRolesAnywhereAPIMockRecorder) ListCrls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrls", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListCrls), arg0)
}

// ListCrlsPages mocks base method
func (m *MockRolesAnywhereAPI) ListCrlsPages(arg0 *rolesanywhere.ListCrlsInput, arg1 func(*rolesanywhere.ListCrlsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrlsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCrlsPages indicates an expected call of ListCrlsPages
func (mr *MockRolesAnywhereAPIMockRecorder) ListCrlsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrlsPages", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListCrlsPages), arg0, arg1)
}

// ListCrlsPagesWithContext mocks base method
func (m *MockRolesAnywhereAPI) ListCrlsPagesWithContext(arg0 context.Context, arg1 *rolesanywhere.ListCrlsInput, arg2 func(*rolesanywhere.ListCrlsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCrlsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCrlsPagesWithContext indicates an expected call of ListCrlsPagesWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ListCrlsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrlsPagesWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListCrlsPagesWithContext), varargs...)
}

// ListCrlsRequest mocks base method
func (m *MockRolesAnywhereAPI) ListCrlsRequest(arg0 *rolesanywhere.ListCrlsInput) (*request.Request, *rolesanywhere.ListCrlsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrlsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.ListCrlsOutput)
	return ret0, ret1
}

// ListCrlsRequest indicates an expected call of ListCrlsRequest
func (mr *MockRolesAnywhereAPIMockRecorder) ListCrlsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrlsRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListCrlsRequest), arg0)
}

// ListCrlsWithContext mocks base method
func (m *MockRolesAnywhereAPI) ListCrlsWithContext(arg0 context.Context, arg1 *rolesanywhere.ListCrlsInput, arg2 ...request.Option) (*rolesanywhere.ListCrlsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCrlsWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ListCrlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCrlsWithContext indicates an expected call of ListCrlsWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ListCrlsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrlsWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListCrlsWithContext), varargs...)
}

// ListProfiles mocks base method
func (m *MockRolesAnywhereAPI) ListProfiles(arg0 *rolesanywhere.ListProfilesInput) (*rolesanywhere.ListProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfiles", arg0)
	ret0, _ := ret[0].(*rolesanywhere.ListProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfiles indicates an expected call of ListProfiles
func (mr *MockRolesAnywhereAPIMockRecorder) ListProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfiles", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListProfiles), arg0)
}

// ListProfilesPages mocks base method
func (m *MockRolesAnywhereAPI) ListProfilesPages(arg0 *rolesanywhere.ListProfilesInput, arg1 func(*rolesanywhere.ListProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfilesPages indicates an expected call of ListProfilesPages
func (mr *MockRolesAnywhereAPIMockRecorder) ListProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesPages", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListProfilesPages), arg0, arg1)
}

// ListProfilesPagesWithContext mocks base method
func (m *MockRolesAnywhereAPI) ListProfilesPagesWithContext(arg0 context.Context, arg1 *rolesanywhere.ListProfilesInput, arg2 func(*rolesanywhere.ListProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfilesPagesWithContext indicates an expected call of ListProfilesPagesWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ListProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesPagesWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListProfilesPagesWithContext), varargs...)
}

// ListProfilesRequest mocks base method
func (m *MockRolesAnywhereAPI) ListProfilesRequest(arg0 *rolesanywhere.ListProfilesInput) (*request.Request, *rolesanywhere.ListProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.ListProfilesOutput)
	return ret0, ret1
}

// ListProfilesRequest indicates an expected call of ListProfilesRequest
func (mr *MockRolesAnywhereAPIMockRecorder) ListProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListProfilesRequest), arg0)
}

// ListProfilesWithContext mocks base method
func (m *MockRolesAnywhereAPI) ListProfilesWithContext(arg0 context.Context, arg1 *rolesanywhere.ListProfilesInput, arg2 ...request.Option) (*rolesanywhere.ListProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ListProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfilesWithContext indicates an expected call of ListProfilesWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ListProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListProfilesWithContext), varargs...)
}

// ListSubjects mocks base method
func (m *MockRolesAnywhereAPI) ListSubjects(arg0 *rolesanywhere.ListSubjectsInput) (*rolesanywhere.ListSubjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubjects", arg0)
	ret0, _ := ret[0].(*rolesanywhere.ListSubjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubjects indicates an expected call of ListSubjects
func (mr *MockRolesAnywhereAPIMockRecorder) ListSubjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjects", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListSubjects), arg0)
}

// ListSubjectsPages mocks base method
func (m *MockRolesAnywhereAPI) ListSubjectsPages(arg0 *rolesanywhere.ListSubjectsInput, arg1 func(*rolesanywhere.ListSubjectsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubjectsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubjectsPages indicates an expected call of ListSubjectsPages
func (mr *MockRolesAnywhereAPIMockRecorder) ListSubjectsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjectsPages", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListSubjectsPages), arg0, arg1)
}

// ListSubjectsPagesWithContext mocks base method
func (m *MockRolesAnywhereAPI) ListSubjectsPagesWithContext(arg0 context.Context, arg1 *rolesanywhere.ListSubjectsInput, arg2 func(*rolesanywhere.ListSubjectsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubjectsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubjectsPagesWithContext indicates an expected call of ListSubjectsPagesWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ListSubjectsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjectsPagesWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListSubjectsPagesWithContext), varargs...)
}

// ListSubjectsRequest mocks base method
func (m *MockRolesAnywhereAPI) ListSubjectsRequest(arg0 *rolesanywhere.ListSubjectsInput) (*request.Request, *rolesanywhere.ListSubjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.ListSubjectsOutput)
	return ret0, ret1
}

// ListSubjectsRequest indicates an expected call of ListSubjectsRequest
func (mr *MockRolesAnywhereAPIMockRecorder) ListSubjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjectsRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListSubjectsRequest), arg0)
}

// ListSubjectsWithContext mocks base method
func (m *MockRolesAnywhereAPI) ListSubjectsWithContext(arg0 context.Context, arg1 *rolesanywhere.ListSubjectsInput, arg2 ...request.Option) (*rolesanywhere.ListSubjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubjectsWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ListSubjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubjectsWithContext indicates an expected call of ListSubjectsWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ListSubjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjectsWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListSubjectsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockRolesAnywhereAPI) ListTagsForResource(arg0 *rolesanywhere.ListTagsForResourceInput) (*rolesanywhere.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*rolesanywhere.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockRolesAnywhereAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockRolesAnywhereAPI) ListTagsForResourceRequest(arg0 *rolesanywhere.ListTagsForResourceInput) (*request.Request, *rolesanywhere.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockRolesAnywhereAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockRolesAnywhereAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *rolesanywhere.ListTagsForResourceInput, arg2 ...request.Option) (*rolesanywhere.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTrustAnchors mocks base method
func (m *MockRolesAnywhereAPI) ListTrustAnchors(arg0 *rolesanywhere.ListTrustAnchorsInput) (*rolesanywhere.ListTrustAnchorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrustAnchors", arg0)
	ret0, _ := ret[0].(*rolesanywhere.ListTrustAnchorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrustAnchors indicates an expected call of ListTrustAnchors
func (mr *MockRolesAnywhereAPIMockRecorder) ListTrustAnchors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustAnchors", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListTrustAnchors), arg0)
}

// ListTrustAnchorsPages mocks base method
func (m *MockRolesAnywhereAPI) ListTrustAnchorsPages(arg0 *rolesanywhere.ListTrustAnchorsInput, arg1 func(*rolesanywhere.ListTrustAnchorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrustAnchorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrustAnchorsPages indicates an expected call of ListTrustAnchorsPages
func (mr *MockRolesAnywhereAPIMockRecorder) ListTrustAnchorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustAnchorsPages", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListTrustAnchorsPages), arg0, arg1)
}

// ListTrustAnchorsPagesWithContext mocks base method
func (m *MockRolesAnywhereAPI) ListTrustAnchorsPagesWithContext(arg0 context.Context, arg1 *rolesanywhere.ListTrustAnchorsInput, arg2 func(*rolesanywhere.ListTrustAnchorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrustAnchorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrustAnchorsPagesWithContext indicates an expected call of ListTrustAnchorsPagesWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ListTrustAnchorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustAnchorsPagesWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListTrustAnchorsPagesWithContext), varargs...)
}

// ListTrustAnchorsRequest mocks base method
func (m *MockRolesAnywhereAPI) ListTrustAnchorsRequest(arg0 *rolesanywhere.ListTrustAnchorsInput) (*request.Request, *rolesanywhere.ListTrustAnchorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrustAnchorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.ListTrustAnchorsOutput)
	return ret0, ret1
}

// ListTrustAnchorsRequest indicates an expected call of ListTrustAnchorsRequest
func (mr *MockRolesAnywhereAPIMockRecorder) ListTrustAnchorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustAnchorsRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListTrustAnchorsRequest), arg0)
}

// ListTrustAnchorsWithContext mocks base method
func (m *MockRolesAnywhereAPI) ListTrustAnchorsWithContext(arg0 context.Context, arg1 *rolesanywhere.ListTrustAnchorsInput, arg2 ...request.Option) (*rolesanywhere.ListTrustAnchorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrustAnchorsWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ListTrustAnchorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrustAnchorsWithContext indicates an expected call of ListTrustAnchorsWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ListTrustAnchorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustAnchorsWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ListTrustAnchorsWithContext), varargs...)
}

// PutAttributeMapping mocks base method
func (m *MockRolesAnywhereAPI) PutAttributeMapping(arg0 *rolesanywhere.PutAttributeMappingInput) (*rolesanywhere.PutAttributeMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAttributeMapping", arg0)
	ret0, _ := ret[0].(*rolesanywhere.PutAttributeMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAttributeMapping indicates an expected call of PutAttributeMapping
func (mr *MockRolesAnywhereAPIMockRecorder) PutAttributeMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAttributeMapping", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).PutAttributeMapping), arg0)
}

// PutAttributeMappingRequest mocks base method
func (m *MockRolesAnywhereAPI) PutAttributeMappingRequest(arg0 *rolesanywhere.PutAttributeMappingInput) (*request.Request, *rolesanywhere.PutAttributeMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAttributeMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.PutAttributeMappingOutput)
	return ret0, ret1
}

// PutAttributeMappingRequest indicates an expected call of PutAttributeMappingRequest
func (mr *MockRolesAnywhereAPIMockRecorder) PutAttributeMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAttributeMappingRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).PutAttributeMappingRequest), arg0)
}

// PutAttributeMappingWithContext mocks base method
func (m *MockRolesAnywhereAPI) PutAttributeMappingWithContext(arg0 context.Context, arg1 *rolesanywhere.PutAttributeMappingInput, arg2 ...request.Option) (*rolesanywhere.PutAttributeMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAttributeMappingWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.PutAttributeMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAttributeMappingWithContext indicates an expected call of PutAttributeMappingWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) PutAttributeMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAttributeMappingWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).PutAttributeMappingWithContext), varargs...)
}

// PutNotificationSettings mocks base method
func (m *MockRolesAnywhereAPI) PutNotificationSettings(arg0 *rolesanywhere.PutNotificationSettingsInput) (*rolesanywhere.PutNotificationSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutNotificationSettings", arg0)
	ret0, _ := ret[0].(*rolesanywhere.PutNotificationSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutNotificationSettings indicates an expected call of PutNotificationSettings
func (mr *MockRolesAnywhereAPIMockRecorder) PutNotificationSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutNotificationSettings", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).PutNotificationSettings), arg0)
}

// PutNotificationSettingsRequest mocks base method
func (m *MockRolesAnywhereAPI) PutNotificationSettingsRequest(arg0 *rolesanywhere.PutNotificationSettingsInput) (*request.Request, *rolesanywhere.PutNotificationSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutNotificationSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.PutNotificationSettingsOutput)
	return ret0, ret1
}

// PutNotificationSettingsRequest indicates an expected call of PutNotificationSettingsRequest
func (mr *MockRolesAnywhereAPIMockRecorder) PutNotificationSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutNotificationSettingsRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).PutNotificationSettingsRequest), arg0)
}

// PutNotificationSettingsWithContext mocks base method
func (m *MockRolesAnywhereAPI) PutNotificationSettingsWithContext(arg0 context.Context, arg1 *rolesanywhere.PutNotificationSettingsInput, arg2 ...request.Option) (*rolesanywhere.PutNotificationSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutNotificationSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.PutNotificationSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutNotificationSettingsWithContext indicates an expected call of PutNotificationSettingsWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) PutNotificationSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutNotificationSettingsWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).PutNotificationSettingsWithContext), varargs...)
}

// ResetNotificationSettings mocks base method
func (m *MockRolesAnywhereAPI) ResetNotificationSettings(arg0 *rolesanywhere.ResetNotificationSettingsInput) (*rolesanywhere.ResetNotificationSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetNotificationSettings", arg0)
	ret0, _ := ret[0].(*rolesanywhere.ResetNotificationSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetNotificationSettings indicates an expected call of ResetNotificationSettings
func (mr *MockRolesAnywhereAPIMockRecorder) ResetNotificationSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetNotificationSettings", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ResetNotificationSettings), arg0)
}

// ResetNotificationSettingsRequest mocks base method
func (m *MockRolesAnywhereAPI) ResetNotificationSettingsRequest(arg0 *rolesanywhere.ResetNotificationSettingsInput) (*request.Request, *rolesanywhere.ResetNotificationSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetNotificationSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.ResetNotificationSettingsOutput)
	return ret0, ret1
}

// ResetNotificationSettingsRequest indicates an expected call of ResetNotificationSettingsRequest
func (mr *MockRolesAnywhereAPIMockRecorder) ResetNotificationSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetNotificationSettingsRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ResetNotificationSettingsRequest), arg0)
}

// ResetNotificationSettingsWithContext mocks base method
func (m *MockRolesAnywhereAPI) ResetNotificationSettingsWithContext(arg0 context.Context, arg1 *rolesanywhere.ResetNotificationSettingsInput, arg2 ...request.Option) (*rolesanywhere.ResetNotificationSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetNotificationSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ResetNotificationSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetNotificationSettingsWithContext indicates an expected call of ResetNotificationSettingsWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) ResetNotificationSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetNotificationSettingsWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).ResetNotificationSettingsWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockRolesAnywhereAPI) TagResource(arg0 *rolesanywhere.TagResourceInput) (*rolesanywhere.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*rolesanywhere.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockRolesAnywhereAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockRolesAnywhereAPI) TagResourceRequest(arg0 *rolesanywhere.TagResourceInput) (*request.Request, *rolesanywhere.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockRolesAnywhereAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockRolesAnywhereAPI) TagResourceWithContext(arg0 context.Context, arg1 *rolesanywhere.TagResourceInput, arg2 ...request.Option) (*rolesanywhere.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockRolesAnywhereAPI) UntagResource(arg0 *rolesanywhere.UntagResourceInput) (*rolesanywhere.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*rolesanywhere.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockRolesAnywhereAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockRolesAnywhereAPI) UntagResourceRequest(arg0 *rolesanywhere.UntagResourceInput) (*request.Request, *rolesanywhere.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockRolesAnywhereAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockRolesAnywhereAPI) UntagResourceWithContext(arg0 context.Context, arg1 *rolesanywhere.UntagResourceInput, arg2 ...request.Option) (*rolesanywhere.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCrl mocks base method
func (m *MockRolesAnywhereAPI) UpdateCrl(arg0 *rolesanywhere.UpdateCrlInput) (*rolesanywhere.UpdateCrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrl", arg0)
	ret0, _ := ret[0].(*rolesanywhere.UpdateCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCrl indicates an expected call of UpdateCrl
func (mr *MockRolesAnywhereAPIMockRecorder) UpdateCrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrl", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UpdateCrl), arg0)
}

// UpdateCrlRequest mocks base method
func (m *MockRolesAnywhereAPI) UpdateCrlRequest(arg0 *rolesanywhere.UpdateCrlInput) (*request.Request, *rolesanywhere.UpdateCrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.UpdateCrlOutput)
	return ret0, ret1
}

// UpdateCrlRequest indicates an expected call of UpdateCrlRequest
func (mr *MockRolesAnywhereAPIMockRecorder) UpdateCrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrlRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UpdateCrlRequest), arg0)
}

// UpdateCrlWithContext mocks base method
func (m *MockRolesAnywhereAPI) UpdateCrlWithContext(arg0 context.Context, arg1 *rolesanywhere.UpdateCrlInput, arg2 ...request.Option) (*rolesanywhere.UpdateCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCrlWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.UpdateCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCrlWithContext indicates an expected call of UpdateCrlWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) UpdateCrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrlWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UpdateCrlWithContext), varargs...)
}

// UpdateProfile mocks base method
func (m *MockRolesAnywhereAPI) UpdateProfile(arg0 *rolesanywhere.UpdateProfileInput) (*rolesanywhere.UpdateProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0)
	ret0, _ := ret[0].(*rolesanywhere.UpdateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockRolesAnywhereAPIMockRecorder) UpdateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UpdateProfile), arg0)
}

// UpdateProfileRequest mocks base method
func (m *MockRolesAnywhereAPI) UpdateProfileRequest(arg0 *rolesanywhere.UpdateProfileInput) (*request.Request, *rolesanywhere.UpdateProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.UpdateProfileOutput)
	return ret0, ret1
}

// UpdateProfileRequest indicates an expected call of UpdateProfileRequest
func (mr *MockRolesAnywhereAPIMockRecorder) UpdateProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UpdateProfileRequest), arg0)
}

// UpdateProfileWithContext mocks base method
func (m *MockRolesAnywhereAPI) UpdateProfileWithContext(arg0 context.Context, arg1 *rolesanywhere.UpdateProfileInput, arg2 ...request.Option) (*rolesanywhere.UpdateProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfileWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.UpdateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfileWithContext indicates an expected call of UpdateProfileWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) UpdateProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UpdateProfileWithContext), varargs...)
}

// UpdateTrustAnchor mocks base method
func (m *MockRolesAnywhereAPI) UpdateTrustAnchor(arg0 *rolesanywhere.UpdateTrustAnchorInput) (*rolesanywhere.UpdateTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrustAnchor", arg0)
	ret0, _ := ret[0].(*rolesanywhere.UpdateTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrustAnchor indicates an expected call of UpdateTrustAnchor
func (mr *MockRolesAnywhereAPIMockRecorder) UpdateTrustAnchor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrustAnchor", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UpdateTrustAnchor), arg0)
}

// UpdateTrustAnchorRequest mocks base method
func (m *MockRolesAnywhereAPI) UpdateTrustAnchorRequest(arg0 *rolesanywhere.UpdateTrustAnchorInput) (*request.Request, *rolesanywhere.UpdateTrustAnchorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrustAnchorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rolesanywhere.UpdateTrustAnchorOutput)
	return ret0, ret1
}

// UpdateTrustAnchorRequest indicates an expected call of UpdateTrustAnchorRequest
func (mr *MockRolesAnywhereAPIMockRecorder) UpdateTrustAnchorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrustAnchorRequest", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UpdateTrustAnchorRequest), arg0)
}

// UpdateTrustAnchorWithContext mocks base method
func (m *MockRolesAnywhereAPI) UpdateTrustAnchorWithContext(arg0 context.Context, arg1 *rolesanywhere.UpdateTrustAnchorInput, arg2 ...request.Option) (*rolesanywhere.UpdateTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrustAnchorWithContext", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.UpdateTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrustAnchorWithContext indicates an expected call of UpdateTrustAnchorWithContext
func (mr *MockRolesAnywhereAPIMockRecorder) UpdateTrustAnchorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrustAnchorWithContext", reflect.TypeOf((*MockRolesAnywhereAPI)(nil).UpdateTrustAnchorWithContext), varargs...)
}
