// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/appconfig/appconfigiface (interfaces: AppConfigAPI)

// Package appconfigmock is a generated GoMock package.
package appconfigmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	appconfig "github.com/aws/aws-sdk-go/service/appconfig"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAppConfigAPI is a mock of AppConfigAPI interface
type MockAppConfigAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAppConfigAPIMockRecorder
}

// MockAppConfigAPIMockRecorder is the mock recorder for MockAppConfigAPI
type MockAppConfigAPIMockRecorder struct {
	mock *MockAppConfigAPI
}

// NewMockAppConfigAPI creates a new mock instance
func NewMockAppConfigAPI(ctrl *gomock.Controller) *MockAppConfigAPI {
	mock := &MockAppConfigAPI{ctrl: ctrl}
	mock.recorder = &MockAppConfigAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppConfigAPI) EXPECT() *MockAppConfigAPIMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method
func (m *MockAppConfigAPI) CreateApplication(arg0 *appconfig.CreateApplicationInput) (*appconfig.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*appconfig.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockAppConfigAPIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateApplication), arg0)
}

// CreateApplicationRequest mocks base method
func (m *MockAppConfigAPI) CreateApplicationRequest(arg0 *appconfig.CreateApplicationInput) (*request.Request, *appconfig.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest
func (mr *MockAppConfigAPIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationWithContext mocks base method
func (m *MockAppConfigAPI) CreateApplicationWithContext(arg0 context.Context, arg1 *appconfig.CreateApplicationInput, arg2 ...request.Option) (*appconfig.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext
func (mr *MockAppConfigAPIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateApplicationWithContext), varargs...)
}

// CreateConfigurationProfile mocks base method
func (m *MockAppConfigAPI) CreateConfigurationProfile(arg0 *appconfig.CreateConfigurationProfileInput) (*appconfig.CreateConfigurationProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationProfile", arg0)
	ret0, _ := ret[0].(*appconfig.CreateConfigurationProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationProfile indicates an expected call of CreateConfigurationProfile
func (mr *MockAppConfigAPIMockRecorder) CreateConfigurationProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationProfile", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateConfigurationProfile), arg0)
}

// CreateConfigurationProfileRequest mocks base method
func (m *MockAppConfigAPI) CreateConfigurationProfileRequest(arg0 *appconfig.CreateConfigurationProfileInput) (*request.Request, *appconfig.CreateConfigurationProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.CreateConfigurationProfileOutput)
	return ret0, ret1
}

// CreateConfigurationProfileRequest indicates an expected call of CreateConfigurationProfileRequest
func (mr *MockAppConfigAPIMockRecorder) CreateConfigurationProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationProfileRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateConfigurationProfileRequest), arg0)
}

// CreateConfigurationProfileWithContext mocks base method
func (m *MockAppConfigAPI) CreateConfigurationProfileWithContext(arg0 context.Context, arg1 *appconfig.CreateConfigurationProfileInput, arg2 ...request.Option) (*appconfig.CreateConfigurationProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigurationProfileWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.CreateConfigurationProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationProfileWithContext indicates an expected call of CreateConfigurationProfileWithContext
func (mr *MockAppConfigAPIMockRecorder) CreateConfigurationProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationProfileWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateConfigurationProfileWithContext), varargs...)
}

// CreateDeploymentStrategy mocks base method
func (m *MockAppConfigAPI) CreateDeploymentStrategy(arg0 *appconfig.CreateDeploymentStrategyInput) (*appconfig.CreateDeploymentStrategyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentStrategy", arg0)
	ret0, _ := ret[0].(*appconfig.CreateDeploymentStrategyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentStrategy indicates an expected call of CreateDeploymentStrategy
func (mr *MockAppConfigAPIMockRecorder) CreateDeploymentStrategy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentStrategy", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateDeploymentStrategy), arg0)
}

// CreateDeploymentStrategyRequest mocks base method
func (m *MockAppConfigAPI) CreateDeploymentStrategyRequest(arg0 *appconfig.CreateDeploymentStrategyInput) (*request.Request, *appconfig.CreateDeploymentStrategyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentStrategyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.CreateDeploymentStrategyOutput)
	return ret0, ret1
}

// CreateDeploymentStrategyRequest indicates an expected call of CreateDeploymentStrategyRequest
func (mr *MockAppConfigAPIMockRecorder) CreateDeploymentStrategyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentStrategyRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateDeploymentStrategyRequest), arg0)
}

// CreateDeploymentStrategyWithContext mocks base method
func (m *MockAppConfigAPI) CreateDeploymentStrategyWithContext(arg0 context.Context, arg1 *appconfig.CreateDeploymentStrategyInput, arg2 ...request.Option) (*appconfig.CreateDeploymentStrategyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeploymentStrategyWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.CreateDeploymentStrategyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentStrategyWithContext indicates an expected call of CreateDeploymentStrategyWithContext
func (mr *MockAppConfigAPIMockRecorder) CreateDeploymentStrategyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentStrategyWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateDeploymentStrategyWithContext), varargs...)
}

// CreateEnvironment mocks base method
func (m *MockAppConfigAPI) CreateEnvironment(arg0 *appconfig.CreateEnvironmentInput) (*appconfig.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0)
	ret0, _ := ret[0].(*appconfig.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockAppConfigAPIMockRecorder) CreateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateEnvironment), arg0)
}

// CreateEnvironmentRequest mocks base method
func (m *MockAppConfigAPI) CreateEnvironmentRequest(arg0 *appconfig.CreateEnvironmentInput) (*request.Request, *appconfig.CreateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.CreateEnvironmentOutput)
	return ret0, ret1
}

// CreateEnvironmentRequest indicates an expected call of CreateEnvironmentRequest
func (mr *MockAppConfigAPIMockRecorder) CreateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateEnvironmentRequest), arg0)
}

// CreateEnvironmentWithContext mocks base method
func (m *MockAppConfigAPI) CreateEnvironmentWithContext(arg0 context.Context, arg1 *appconfig.CreateEnvironmentInput, arg2 ...request.Option) (*appconfig.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentWithContext indicates an expected call of CreateEnvironmentWithContext
func (mr *MockAppConfigAPIMockRecorder) CreateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateEnvironmentWithContext), varargs...)
}

// CreateExtension mocks base method
func (m *MockAppConfigAPI) CreateExtension(arg0 *appconfig.CreateExtensionInput) (*appconfig.CreateExtensionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtension", arg0)
	ret0, _ := ret[0].(*appconfig.CreateExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtension indicates an expected call of CreateExtension
func (mr *MockAppConfigAPIMockRecorder) CreateExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtension", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateExtension), arg0)
}

// CreateExtensionAssociation mocks base method
func (m *MockAppConfigAPI) CreateExtensionAssociation(arg0 *appconfig.CreateExtensionAssociationInput) (*appconfig.CreateExtensionAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtensionAssociation", arg0)
	ret0, _ := ret[0].(*appconfig.CreateExtensionAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtensionAssociation indicates an expected call of CreateExtensionAssociation
func (mr *MockAppConfigAPIMockRecorder) CreateExtensionAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtensionAssociation", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateExtensionAssociation), arg0)
}

// CreateExtensionAssociationRequest mocks base method
func (m *MockAppConfigAPI) CreateExtensionAssociationRequest(arg0 *appconfig.CreateExtensionAssociationInput) (*request.Request, *appconfig.CreateExtensionAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtensionAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.CreateExtensionAssociationOutput)
	return ret0, ret1
}

// CreateExtensionAssociationRequest indicates an expected call of CreateExtensionAssociationRequest
func (mr *MockAppConfigAPIMockRecorder) CreateExtensionAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtensionAssociationRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateExtensionAssociationRequest), arg0)
}

// CreateExtensionAssociationWithContext mocks base method
func (m *MockAppConfigAPI) CreateExtensionAssociationWithContext(arg0 context.Context, arg1 *appconfig.CreateExtensionAssociationInput, arg2 ...request.Option) (*appconfig.CreateExtensionAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExtensionAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.CreateExtensionAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtensionAssociationWithContext indicates an expected call of CreateExtensionAssociationWithContext
func (mr *MockAppConfigAPIMockRecorder) CreateExtensionAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtensionAssociationWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateExtensionAssociationWithContext), varargs...)
}

// CreateExtensionRequest mocks base method
func (m *MockAppConfigAPI) CreateExtensionRequest(arg0 *appconfig.CreateExtensionInput) (*request.Request, *appconfig.CreateExtensionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtensionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.CreateExtensionOutput)
	return ret0, ret1
}

// CreateExtensionRequest indicates an expected call of CreateExtensionRequest
func (mr *MockAppConfigAPIMockRecorder) CreateExtensionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtensionRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateExtensionRequest), arg0)
}

// CreateExtensionWithContext mocks base method
func (m *MockAppConfigAPI) CreateExtensionWithContext(arg0 context.Context, arg1 *appconfig.CreateExtensionInput, arg2 ...request.Option) (*appconfig.CreateExtensionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExtensionWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.CreateExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtensionWithContext indicates an expected call of CreateExtensionWithContext
func (mr *MockAppConfigAPIMockRecorder) CreateExtensionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtensionWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateExtensionWithContext), varargs...)
}

// CreateHostedConfigurationVersion mocks base method
func (m *MockAppConfigAPI) CreateHostedConfigurationVersion(arg0 *appconfig.CreateHostedConfigurationVersionInput) (*appconfig.CreateHostedConfigurationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostedConfigurationVersion", arg0)
	ret0, _ := ret[0].(*appconfig.CreateHostedConfigurationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostedConfigurationVersion indicates an expected call of CreateHostedConfigurationVersion
func (mr *MockAppConfigAPIMockRecorder) CreateHostedConfigurationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostedConfigurationVersion", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateHostedConfigurationVersion), arg0)
}

// CreateHostedConfigurationVersionRequest mocks base method
func (m *MockAppConfigAPI) CreateHostedConfigurationVersionRequest(arg0 *appconfig.CreateHostedConfigurationVersionInput) (*request.Request, *appconfig.CreateHostedConfigurationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostedConfigurationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.CreateHostedConfigurationVersionOutput)
	return ret0, ret1
}

// CreateHostedConfigurationVersionRequest indicates an expected call of CreateHostedConfigurationVersionRequest
func (mr *MockAppConfigAPIMockRecorder) CreateHostedConfigurationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostedConfigurationVersionRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateHostedConfigurationVersionRequest), arg0)
}

// CreateHostedConfigurationVersionWithContext mocks base method
func (m *MockAppConfigAPI) CreateHostedConfigurationVersionWithContext(arg0 context.Context, arg1 *appconfig.CreateHostedConfigurationVersionInput, arg2 ...request.Option) (*appconfig.CreateHostedConfigurationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHostedConfigurationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.CreateHostedConfigurationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostedConfigurationVersionWithContext indicates an expected call of CreateHostedConfigurationVersionWithContext
func (mr *MockAppConfigAPIMockRecorder) CreateHostedConfigurationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostedConfigurationVersionWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).CreateHostedConfigurationVersionWithContext), varargs...)
}

// DeleteApplication mocks base method
func (m *MockAppConfigAPI) DeleteApplication(arg0 *appconfig.DeleteApplicationInput) (*appconfig.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*appconfig.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockAppConfigAPIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteApplication), arg0)
}

// DeleteApplicationRequest mocks base method
func (m *MockAppConfigAPI) DeleteApplicationRequest(arg0 *appconfig.DeleteApplicationInput) (*request.Request, *appconfig.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest
func (mr *MockAppConfigAPIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationWithContext mocks base method
func (m *MockAppConfigAPI) DeleteApplicationWithContext(arg0 context.Context, arg1 *appconfig.DeleteApplicationInput, arg2 ...request.Option) (*appconfig.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext
func (mr *MockAppConfigAPIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteApplicationWithContext), varargs...)
}

// DeleteConfigurationProfile mocks base method
func (m *MockAppConfigAPI) DeleteConfigurationProfile(arg0 *appconfig.DeleteConfigurationProfileInput) (*appconfig.DeleteConfigurationProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationProfile", arg0)
	ret0, _ := ret[0].(*appconfig.DeleteConfigurationProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationProfile indicates an expected call of DeleteConfigurationProfile
func (mr *MockAppConfigAPIMockRecorder) DeleteConfigurationProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationProfile", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteConfigurationProfile), arg0)
}

// DeleteConfigurationProfileRequest mocks base method
func (m *MockAppConfigAPI) DeleteConfigurationProfileRequest(arg0 *appconfig.DeleteConfigurationProfileInput) (*request.Request, *appconfig.DeleteConfigurationProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.DeleteConfigurationProfileOutput)
	return ret0, ret1
}

// DeleteConfigurationProfileRequest indicates an expected call of DeleteConfigurationProfileRequest
func (mr *MockAppConfigAPIMockRecorder) DeleteConfigurationProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationProfileRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteConfigurationProfileRequest), arg0)
}

// DeleteConfigurationProfileWithContext mocks base method
func (m *MockAppConfigAPI) DeleteConfigurationProfileWithContext(arg0 context.Context, arg1 *appconfig.DeleteConfigurationProfileInput, arg2 ...request.Option) (*appconfig.DeleteConfigurationProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationProfileWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.DeleteConfigurationProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationProfileWithContext indicates an expected call of DeleteConfigurationProfileWithContext
func (mr *MockAppConfigAPIMockRecorder) DeleteConfigurationProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationProfileWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteConfigurationProfileWithContext), varargs...)
}

// DeleteDeploymentStrategy mocks base method
func (m *MockAppConfigAPI) DeleteDeploymentStrategy(arg0 *appconfig.DeleteDeploymentStrategyInput) (*appconfig.DeleteDeploymentStrategyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentStrategy", arg0)
	ret0, _ := ret[0].(*appconfig.DeleteDeploymentStrategyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeploymentStrategy indicates an expected call of DeleteDeploymentStrategy
func (mr *MockAppConfigAPIMockRecorder) DeleteDeploymentStrategy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentStrategy", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteDeploymentStrategy), arg0)
}

// DeleteDeploymentStrategyRequest mocks base method
func (m *MockAppConfigAPI) DeleteDeploymentStrategyRequest(arg0 *appconfig.DeleteDeploymentStrategyInput) (*request.Request, *appconfig.DeleteDeploymentStrategyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentStrategyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.DeleteDeploymentStrategyOutput)
	return ret0, ret1
}

// DeleteDeploymentStrategyRequest indicates an expected call of DeleteDeploymentStrategyRequest
func (mr *MockAppConfigAPIMockRecorder) DeleteDeploymentStrategyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentStrategyRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteDeploymentStrategyRequest), arg0)
}

// DeleteDeploymentStrategyWithContext mocks base method
func (m *MockAppConfigAPI) DeleteDeploymentStrategyWithContext(arg0 context.Context, arg1 *appconfig.DeleteDeploymentStrategyInput, arg2 ...request.Option) (*appconfig.DeleteDeploymentStrategyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDeploymentStrategyWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.DeleteDeploymentStrategyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeploymentStrategyWithContext indicates an expected call of DeleteDeploymentStrategyWithContext
func (mr *MockAppConfigAPIMockRecorder) DeleteDeploymentStrategyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentStrategyWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteDeploymentStrategyWithContext), varargs...)
}

// DeleteEnvironment mocks base method
func (m *MockAppConfigAPI) DeleteEnvironment(arg0 *appconfig.DeleteEnvironmentInput) (*appconfig.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0)
	ret0, _ := ret[0].(*appconfig.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockAppConfigAPIMockRecorder) DeleteEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteEnvironment), arg0)
}

// DeleteEnvironmentRequest mocks base method
func (m *MockAppConfigAPI) DeleteEnvironmentRequest(arg0 *appconfig.DeleteEnvironmentInput) (*request.Request, *appconfig.DeleteEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.DeleteEnvironmentOutput)
	return ret0, ret1
}

// DeleteEnvironmentRequest indicates an expected call of DeleteEnvironmentRequest
func (mr *MockAppConfigAPIMockRecorder) DeleteEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteEnvironmentRequest), arg0)
}

// DeleteEnvironmentWithContext mocks base method
func (m *MockAppConfigAPI) DeleteEnvironmentWithContext(arg0 context.Context, arg1 *appconfig.DeleteEnvironmentInput, arg2 ...request.Option) (*appconfig.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentWithContext indicates an expected call of DeleteEnvironmentWithContext
func (mr *MockAppConfigAPIMockRecorder) DeleteEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteEnvironmentWithContext), varargs...)
}

// DeleteExtension mocks base method
func (m *MockAppConfigAPI) DeleteExtension(arg0 *appconfig.DeleteExtensionInput) (*appconfig.DeleteExtensionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtension", arg0)
	ret0, _ := ret[0].(*appconfig.DeleteExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExtension indicates an expected call of DeleteExtension
func (mr *MockAppConfigAPIMockRecorder) DeleteExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtension", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteExtension), arg0)
}

// DeleteExtensionAssociation mocks base method
func (m *MockAppConfigAPI) DeleteExtensionAssociation(arg0 *appconfig.DeleteExtensionAssociationInput) (*appconfig.DeleteExtensionAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtensionAssociation", arg0)
	ret0, _ := ret[0].(*appconfig.DeleteExtensionAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExtensionAssociation indicates an expected call of DeleteExtensionAssociation
func (mr *MockAppConfigAPIMockRecorder) DeleteExtensionAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtensionAssociation", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteExtensionAssociation), arg0)
}

// DeleteExtensionAssociationRequest mocks base method
func (m *MockAppConfigAPI) DeleteExtensionAssociationRequest(arg0 *appconfig.DeleteExtensionAssociationInput) (*request.Request, *appconfig.DeleteExtensionAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtensionAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.DeleteExtensionAssociationOutput)
	return ret0, ret1
}

// DeleteExtensionAssociationRequest indicates an expected call of DeleteExtensionAssociationRequest
func (mr *MockAppConfigAPIMockRecorder) DeleteExtensionAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtensionAssociationRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteExtensionAssociationRequest), arg0)
}

// DeleteExtensionAssociationWithContext mocks base method
func (m *MockAppConfigAPI) DeleteExtensionAssociationWithContext(arg0 context.Context, arg1 *appconfig.DeleteExtensionAssociationInput, arg2 ...request.Option) (*appconfig.DeleteExtensionAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExtensionAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.DeleteExtensionAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExtensionAssociationWithContext indicates an expected call of DeleteExtensionAssociationWithContext
func (mr *MockAppConfigAPIMockRecorder) DeleteExtensionAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtensionAssociationWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteExtensionAssociationWithContext), varargs...)
}

// DeleteExtensionRequest mocks base method
func (m *MockAppConfigAPI) DeleteExtensionRequest(arg0 *appconfig.DeleteExtensionInput) (*request.Request, *appconfig.DeleteExtensionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtensionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.DeleteExtensionOutput)
	return ret0, ret1
}

// DeleteExtensionRequest indicates an expected call of DeleteExtensionRequest
func (mr *MockAppConfigAPIMockRecorder) DeleteExtensionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtensionRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteExtensionRequest), arg0)
}

// DeleteExtensionWithContext mocks base method
func (m *MockAppConfigAPI) DeleteExtensionWithContext(arg0 context.Context, arg1 *appconfig.DeleteExtensionInput, arg2 ...request.Option) (*appconfig.DeleteExtensionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExtensionWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.DeleteExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExtensionWithContext indicates an expected call of DeleteExtensionWithContext
func (mr *MockAppConfigAPIMockRecorder) DeleteExtensionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtensionWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteExtensionWithContext), varargs...)
}

// DeleteHostedConfigurationVersion mocks base method
func (m *MockAppConfigAPI) DeleteHostedConfigurationVersion(arg0 *appconfig.DeleteHostedConfigurationVersionInput) (*appconfig.DeleteHostedConfigurationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostedConfigurationVersion", arg0)
	ret0, _ := ret[0].(*appconfig.DeleteHostedConfigurationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHostedConfigurationVersion indicates an expected call of DeleteHostedConfigurationVersion
func (mr *MockAppConfigAPIMockRecorder) DeleteHostedConfigurationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostedConfigurationVersion", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteHostedConfigurationVersion), arg0)
}

// DeleteHostedConfigurationVersionRequest mocks base method
func (m *MockAppConfigAPI) DeleteHostedConfigurationVersionRequest(arg0 *appconfig.DeleteHostedConfigurationVersionInput) (*request.Request, *appconfig.DeleteHostedConfigurationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostedConfigurationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.DeleteHostedConfigurationVersionOutput)
	return ret0, ret1
}

// DeleteHostedConfigurationVersionRequest indicates an expected call of DeleteHostedConfigurationVersionRequest
func (mr *MockAppConfigAPIMockRecorder) DeleteHostedConfigurationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostedConfigurationVersionRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteHostedConfigurationVersionRequest), arg0)
}

// DeleteHostedConfigurationVersionWithContext mocks base method
func (m *MockAppConfigAPI) DeleteHostedConfigurationVersionWithContext(arg0 context.Context, arg1 *appconfig.DeleteHostedConfigurationVersionInput, arg2 ...request.Option) (*appconfig.DeleteHostedConfigurationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHostedConfigurationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.DeleteHostedConfigurationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHostedConfigurationVersionWithContext indicates an expected call of DeleteHostedConfigurationVersionWithContext
func (mr *MockAppConfigAPIMockRecorder) DeleteHostedConfigurationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostedConfigurationVersionWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).DeleteHostedConfigurationVersionWithContext), varargs...)
}

// GetApplication mocks base method
func (m *MockAppConfigAPI) GetApplication(arg0 *appconfig.GetApplicationInput) (*appconfig.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*appconfig.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockAppConfigAPIMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockAppConfigAPI)(nil).GetApplication), arg0)
}

// GetApplicationRequest mocks base method
func (m *MockAppConfigAPI) GetApplicationRequest(arg0 *appconfig.GetApplicationInput) (*request.Request, *appconfig.GetApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.GetApplicationOutput)
	return ret0, ret1
}

// GetApplicationRequest indicates an expected call of GetApplicationRequest
func (mr *MockAppConfigAPIMockRecorder) GetApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).GetApplicationRequest), arg0)
}

// GetApplicationWithContext mocks base method
func (m *MockAppConfigAPI) GetApplicationWithContext(arg0 context.Context, arg1 *appconfig.GetApplicationInput, arg2 ...request.Option) (*appconfig.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationWithContext indicates an expected call of GetApplicationWithContext
func (mr *MockAppConfigAPIMockRecorder) GetApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).GetApplicationWithContext), varargs...)
}

// GetConfiguration mocks base method
func (m *MockAppConfigAPI) GetConfiguration(arg0 *appconfig.GetConfigurationInput) (*appconfig.GetConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", arg0)
	ret0, _ := ret[0].(*appconfig.GetConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration
func (mr *MockAppConfigAPIMockRecorder) GetConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockAppConfigAPI)(nil).GetConfiguration), arg0)
}

// GetConfigurationProfile mocks base method
func (m *MockAppConfigAPI) GetConfigurationProfile(arg0 *appconfig.GetConfigurationProfileInput) (*appconfig.GetConfigurationProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationProfile", arg0)
	ret0, _ := ret[0].(*appconfig.GetConfigurationProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationProfile indicates an expected call of GetConfigurationProfile
func (mr *MockAppConfigAPIMockRecorder) GetConfigurationProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationProfile", reflect.TypeOf((*MockAppConfigAPI)(nil).GetConfigurationProfile), arg0)
}

// GetConfigurationProfileRequest mocks base method
func (m *MockAppConfigAPI) GetConfigurationProfileRequest(arg0 *appconfig.GetConfigurationProfileInput) (*request.Request, *appconfig.GetConfigurationProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.GetConfigurationProfileOutput)
	return ret0, ret1
}

// GetConfigurationProfileRequest indicates an expected call of GetConfigurationProfileRequest
func (mr *MockAppConfigAPIMockRecorder) GetConfigurationProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationProfileRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).GetConfigurationProfileRequest), arg0)
}

// GetConfigurationProfileWithContext mocks base method
func (m *MockAppConfigAPI) GetConfigurationProfileWithContext(arg0 context.Context, arg1 *appconfig.GetConfigurationProfileInput, arg2 ...request.Option) (*appconfig.GetConfigurationProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationProfileWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.GetConfigurationProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationProfileWithContext indicates an expected call of GetConfigurationProfileWithContext
func (mr *MockAppConfigAPIMockRecorder) GetConfigurationProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationProfileWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).GetConfigurationProfileWithContext), varargs...)
}

// GetConfigurationRequest mocks base method
func (m *MockAppConfigAPI) GetConfigurationRequest(arg0 *appconfig.GetConfigurationInput) (*request.Request, *appconfig.GetConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.GetConfigurationOutput)
	return ret0, ret1
}

// GetConfigurationRequest indicates an expected call of GetConfigurationRequest
func (mr *MockAppConfigAPIMockRecorder) GetConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).GetConfigurationRequest), arg0)
}

// GetConfigurationWithContext mocks base method
func (m *MockAppConfigAPI) GetConfigurationWithContext(arg0 context.Context, arg1 *appconfig.GetConfigurationInput, arg2 ...request.Option) (*appconfig.GetConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.GetConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationWithContext indicates an expected call of GetConfigurationWithContext
func (mr *MockAppConfigAPIMockRecorder) GetConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).GetConfigurationWithContext), varargs...)
}

// GetDeployment mocks base method
func (m *MockAppConfigAPI) GetDeployment(arg0 *appconfig.GetDeploymentInput) (*appconfig.GetDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", arg0)
	ret0, _ := ret[0].(*appconfig.GetDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment
func (mr *MockAppConfigAPIMockRecorder) GetDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockAppConfigAPI)(nil).GetDeployment), arg0)
}

// GetDeploymentRequest mocks base method
func (m *MockAppConfigAPI) GetDeploymentRequest(arg0 *appconfig.GetDeploymentInput) (*request.Request, *appconfig.GetDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.GetDeploymentOutput)
	return ret0, ret1
}

// GetDeploymentRequest indicates an expected call of GetDeploymentRequest
func (mr *MockAppConfigAPIMockRecorder) GetDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).GetDeploymentRequest), arg0)
}

// GetDeploymentStrategy mocks base method
func (m *MockAppConfigAPI) GetDeploymentStrategy(arg0 *appconfig.GetDeploymentStrategyInput) (*appconfig.GetDeploymentStrategyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentStrategy", arg0)
	ret0, _ := ret[0].(*appconfig.GetDeploymentStrategyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentStrategy indicates an expected call of GetDeploymentStrategy
func (mr *MockAppConfigAPIMockRecorder) GetDeploymentStrategy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentStrategy", reflect.TypeOf((*MockAppConfigAPI)(nil).GetDeploymentStrategy), arg0)
}

// GetDeploymentStrategyRequest mocks base method
func (m *MockAppConfigAPI) GetDeploymentStrategyRequest(arg0 *appconfig.GetDeploymentStrategyInput) (*request.Request, *appconfig.GetDeploymentStrategyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentStrategyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.GetDeploymentStrategyOutput)
	return ret0, ret1
}

// GetDeploymentStrategyRequest indicates an expected call of GetDeploymentStrategyRequest
func (mr *MockAppConfigAPIMockRecorder) GetDeploymentStrategyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentStrategyRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).GetDeploymentStrategyRequest), arg0)
}

// GetDeploymentStrategyWithContext mocks base method
func (m *MockAppConfigAPI) GetDeploymentStrategyWithContext(arg0 context.Context, arg1 *appconfig.GetDeploymentStrategyInput, arg2 ...request.Option) (*appconfig.GetDeploymentStrategyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentStrategyWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.GetDeploymentStrategyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentStrategyWithContext indicates an expected call of GetDeploymentStrategyWithContext
func (mr *MockAppConfigAPIMockRecorder) GetDeploymentStrategyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentStrategyWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).GetDeploymentStrategyWithContext), varargs...)
}

// GetDeploymentWithContext mocks base method
func (m *MockAppConfigAPI) GetDeploymentWithContext(arg0 context.Context, arg1 *appconfig.GetDeploymentInput, arg2 ...request.Option) (*appconfig.GetDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.GetDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentWithContext indicates an expected call of GetDeploymentWithContext
func (mr *MockAppConfigAPIMockRecorder) GetDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).GetDeploymentWithContext), varargs...)
}

// GetEnvironment mocks base method
func (m *MockAppConfigAPI) GetEnvironment(arg0 *appconfig.GetEnvironmentInput) (*appconfig.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0)
	ret0, _ := ret[0].(*appconfig.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockAppConfigAPIMockRecorder) GetEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockAppConfigAPI)(nil).GetEnvironment), arg0)
}

// GetEnvironmentRequest mocks base method
func (m *MockAppConfigAPI) GetEnvironmentRequest(arg0 *appconfig.GetEnvironmentInput) (*request.Request, *appconfig.GetEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.GetEnvironmentOutput)
	return ret0, ret1
}

// GetEnvironmentRequest indicates an expected call of GetEnvironmentRequest
func (mr *MockAppConfigAPIMockRecorder) GetEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).GetEnvironmentRequest), arg0)
}

// GetEnvironmentWithContext mocks base method
func (m *MockAppConfigAPI) GetEnvironmentWithContext(arg0 context.Context, arg1 *appconfig.GetEnvironmentInput, arg2 ...request.Option) (*appconfig.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentWithContext indicates an expected call of GetEnvironmentWithContext
func (mr *MockAppConfigAPIMockRecorder) GetEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).GetEnvironmentWithContext), varargs...)
}

// GetExtension mocks base method
func (m *MockAppConfigAPI) GetExtension(arg0 *appconfig.GetExtensionInput) (*appconfig.GetExtensionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtension", arg0)
	ret0, _ := ret[0].(*appconfig.GetExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtension indicates an expected call of GetExtension
func (mr *MockAppConfigAPIMockRecorder) GetExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtension", reflect.TypeOf((*MockAppConfigAPI)(nil).GetExtension), arg0)
}

// GetExtensionAssociation mocks base method
func (m *MockAppConfigAPI) GetExtensionAssociation(arg0 *appconfig.GetExtensionAssociationInput) (*appconfig.GetExtensionAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionAssociation", arg0)
	ret0, _ := ret[0].(*appconfig.GetExtensionAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionAssociation indicates an expected call of GetExtensionAssociation
func (mr *MockAppConfigAPIMockRecorder) GetExtensionAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionAssociation", reflect.TypeOf((*MockAppConfigAPI)(nil).GetExtensionAssociation), arg0)
}

// GetExtensionAssociationRequest mocks base method
func (m *MockAppConfigAPI) GetExtensionAssociationRequest(arg0 *appconfig.GetExtensionAssociationInput) (*request.Request, *appconfig.GetExtensionAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.GetExtensionAssociationOutput)
	return ret0, ret1
}

// GetExtensionAssociationRequest indicates an expected call of GetExtensionAssociationRequest
func (mr *MockAppConfigAPIMockRecorder) GetExtensionAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionAssociationRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).GetExtensionAssociationRequest), arg0)
}

// GetExtensionAssociationWithContext mocks base method
func (m *MockAppConfigAPI) GetExtensionAssociationWithContext(arg0 context.Context, arg1 *appconfig.GetExtensionAssociationInput, arg2 ...request.Option) (*appconfig.GetExtensionAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExtensionAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.GetExtensionAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionAssociationWithContext indicates an expected call of GetExtensionAssociationWithContext
func (mr *MockAppConfigAPIMockRecorder) GetExtensionAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionAssociationWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).GetExtensionAssociationWithContext), varargs...)
}

// GetExtensionRequest mocks base method
func (m *MockAppConfigAPI) GetExtensionRequest(arg0 *appconfig.GetExtensionInput) (*request.Request, *appconfig.GetExtensionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.GetExtensionOutput)
	return ret0, ret1
}

// GetExtensionRequest indicates an expected call of GetExtensionRequest
func (mr *MockAppConfigAPIMockRecorder) GetExtensionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).GetExtensionRequest), arg0)
}

// GetExtensionWithContext mocks base method
func (m *MockAppConfigAPI) GetExtensionWithContext(arg0 context.Context, arg1 *appconfig.GetExtensionInput, arg2 ...request.Option) (*appconfig.GetExtensionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExtensionWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.GetExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionWithContext indicates an expected call of GetExtensionWithContext
func (mr *MockAppConfigAPIMockRecorder) GetExtensionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).GetExtensionWithContext), varargs...)
}

// GetHostedConfigurationVersion mocks base method
func (m *MockAppConfigAPI) GetHostedConfigurationVersion(arg0 *appconfig.GetHostedConfigurationVersionInput) (*appconfig.GetHostedConfigurationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostedConfigurationVersion", arg0)
	ret0, _ := ret[0].(*appconfig.GetHostedConfigurationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostedConfigurationVersion indicates an expected call of GetHostedConfigurationVersion
func (mr *MockAppConfigAPIMockRecorder) GetHostedConfigurationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostedConfigurationVersion", reflect.TypeOf((*MockAppConfigAPI)(nil).GetHostedConfigurationVersion), arg0)
}

// GetHostedConfigurationVersionRequest mocks base method
func (m *MockAppConfigAPI) GetHostedConfigurationVersionRequest(arg0 *appconfig.GetHostedConfigurationVersionInput) (*request.Request, *appconfig.GetHostedConfigurationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostedConfigurationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.GetHostedConfigurationVersionOutput)
	return ret0, ret1
}

// GetHostedConfigurationVersionRequest indicates an expected call of GetHostedConfigurationVersionRequest
func (mr *MockAppConfigAPIMockRecorder) GetHostedConfigurationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostedConfigurationVersionRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).GetHostedConfigurationVersionRequest), arg0)
}

// GetHostedConfigurationVersionWithContext mocks base method
func (m *MockAppConfigAPI) GetHostedConfigurationVersionWithContext(arg0 context.Context, arg1 *appconfig.GetHostedConfigurationVersionInput, arg2 ...request.Option) (*appconfig.GetHostedConfigurationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostedConfigurationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.GetHostedConfigurationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostedConfigurationVersionWithContext indicates an expected call of GetHostedConfigurationVersionWithContext
func (mr *MockAppConfigAPIMockRecorder) GetHostedConfigurationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostedConfigurationVersionWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).GetHostedConfigurationVersionWithContext), varargs...)
}

// ListApplications mocks base method
func (m *MockAppConfigAPI) ListApplications(arg0 *appconfig.ListApplicationsInput) (*appconfig.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*appconfig.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockAppConfigAPIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockAppConfigAPI)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method
func (m *MockAppConfigAPI) ListApplicationsPages(arg0 *appconfig.ListApplicationsInput, arg1 func(*appconfig.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages
func (mr *MockAppConfigAPIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockAppConfigAPI)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method
func (m *MockAppConfigAPI) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *appconfig.ListApplicationsInput, arg2 func(*appconfig.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext
func (mr *MockAppConfigAPIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method
func (m *MockAppConfigAPI) ListApplicationsRequest(arg0 *appconfig.ListApplicationsInput) (*request.Request, *appconfig.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest
func (mr *MockAppConfigAPIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method
func (m *MockAppConfigAPI) ListApplicationsWithContext(arg0 context.Context, arg1 *appconfig.ListApplicationsInput, arg2 ...request.Option) (*appconfig.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext
func (mr *MockAppConfigAPIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListApplicationsWithContext), varargs...)
}

// ListConfigurationProfiles mocks base method
func (m *MockAppConfigAPI) ListConfigurationProfiles(arg0 *appconfig.ListConfigurationProfilesInput) (*appconfig.ListConfigurationProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationProfiles", arg0)
	ret0, _ := ret[0].(*appconfig.ListConfigurationProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationProfiles indicates an expected call of ListConfigurationProfiles
func (mr *MockAppConfigAPIMockRecorder) ListConfigurationProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationProfiles", reflect.TypeOf((*MockAppConfigAPI)(nil).ListConfigurationProfiles), arg0)
}

// ListConfigurationProfilesPages mocks base method
func (m *MockAppConfigAPI) ListConfigurationProfilesPages(arg0 *appconfig.ListConfigurationProfilesInput, arg1 func(*appconfig.ListConfigurationProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationProfilesPages indicates an expected call of ListConfigurationProfilesPages
func (mr *MockAppConfigAPIMockRecorder) ListConfigurationProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationProfilesPages", reflect.TypeOf((*MockAppConfigAPI)(nil).ListConfigurationProfilesPages), arg0, arg1)
}

// ListConfigurationProfilesPagesWithContext mocks base method
func (m *MockAppConfigAPI) ListConfigurationProfilesPagesWithContext(arg0 context.Context, arg1 *appconfig.ListConfigurationProfilesInput, arg2 func(*appconfig.ListConfigurationProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationProfilesPagesWithContext indicates an expected call of ListConfigurationProfilesPagesWithContext
func (mr *MockAppConfigAPIMockRecorder) ListConfigurationProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationProfilesPagesWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListConfigurationProfilesPagesWithContext), varargs...)
}

// ListConfigurationProfilesRequest mocks base method
func (m *MockAppConfigAPI) ListConfigurationProfilesRequest(arg0 *appconfig.ListConfigurationProfilesInput) (*request.Request, *appconfig.ListConfigurationProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.ListConfigurationProfilesOutput)
	return ret0, ret1
}

// ListConfigurationProfilesRequest indicates an expected call of ListConfigurationProfilesRequest
func (mr *MockAppConfigAPIMockRecorder) ListConfigurationProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationProfilesRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).ListConfigurationProfilesRequest), arg0)
}

// ListConfigurationProfilesWithContext mocks base method
func (m *MockAppConfigAPI) ListConfigurationProfilesWithContext(arg0 context.Context, arg1 *appconfig.ListConfigurationProfilesInput, arg2 ...request.Option) (*appconfig.ListConfigurationProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.ListConfigurationProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationProfilesWithContext indicates an expected call of ListConfigurationProfilesWithContext
func (mr *MockAppConfigAPIMockRecorder) ListConfigurationProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationProfilesWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListConfigurationProfilesWithContext), varargs...)
}

// ListDeploymentStrategies mocks base method
func (m *MockAppConfigAPI) ListDeploymentStrategies(arg0 *appconfig.ListDeploymentStrategiesInput) (*appconfig.ListDeploymentStrategiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentStrategies", arg0)
	ret0, _ := ret[0].(*appconfig.ListDeploymentStrategiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentStrategies indicates an expected call of ListDeploymentStrategies
func (mr *MockAppConfigAPIMockRecorder) ListDeploymentStrategies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentStrategies", reflect.TypeOf((*MockAppConfigAPI)(nil).ListDeploymentStrategies), arg0)
}

// ListDeploymentStrategiesPages mocks base method
func (m *MockAppConfigAPI) ListDeploymentStrategiesPages(arg0 *appconfig.ListDeploymentStrategiesInput, arg1 func(*appconfig.ListDeploymentStrategiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentStrategiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentStrategiesPages indicates an expected call of ListDeploymentStrategiesPages
func (mr *MockAppConfigAPIMockRecorder) ListDeploymentStrategiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentStrategiesPages", reflect.TypeOf((*MockAppConfigAPI)(nil).ListDeploymentStrategiesPages), arg0, arg1)
}

// ListDeploymentStrategiesPagesWithContext mocks base method
func (m *MockAppConfigAPI) ListDeploymentStrategiesPagesWithContext(arg0 context.Context, arg1 *appconfig.ListDeploymentStrategiesInput, arg2 func(*appconfig.ListDeploymentStrategiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentStrategiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentStrategiesPagesWithContext indicates an expected call of ListDeploymentStrategiesPagesWithContext
func (mr *MockAppConfigAPIMockRecorder) ListDeploymentStrategiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentStrategiesPagesWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListDeploymentStrategiesPagesWithContext), varargs...)
}

// ListDeploymentStrategiesRequest mocks base method
func (m *MockAppConfigAPI) ListDeploymentStrategiesRequest(arg0 *appconfig.ListDeploymentStrategiesInput) (*request.Request, *appconfig.ListDeploymentStrategiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentStrategiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.ListDeploymentStrategiesOutput)
	return ret0, ret1
}

// ListDeploymentStrategiesRequest indicates an expected call of ListDeploymentStrategiesRequest
func (mr *MockAppConfigAPIMockRecorder) ListDeploymentStrategiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentStrategiesRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).ListDeploymentStrategiesRequest), arg0)
}

// ListDeploymentStrategiesWithContext mocks base method
func (m *MockAppConfigAPI) ListDeploymentStrategiesWithContext(arg0 context.Context, arg1 *appconfig.ListDeploymentStrategiesInput, arg2 ...request.Option) (*appconfig.ListDeploymentStrategiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentStrategiesWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.ListDeploymentStrategiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentStrategiesWithContext indicates an expected call of ListDeploymentStrategiesWithContext
func (mr *MockAppConfigAPIMockRecorder) ListDeploymentStrategiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentStrategiesWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListDeploymentStrategiesWithContext), varargs...)
}

// ListDeployments mocks base method
func (m *MockAppConfigAPI) ListDeployments(arg0 *appconfig.ListDeploymentsInput) (*appconfig.ListDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", arg0)
	ret0, _ := ret[0].(*appconfig.ListDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployments indicates an expected call of ListDeployments
func (mr *MockAppConfigAPIMockRecorder) ListDeployments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockAppConfigAPI)(nil).ListDeployments), arg0)
}

// ListDeploymentsPages mocks base method
func (m *MockAppConfigAPI) ListDeploymentsPages(arg0 *appconfig.ListDeploymentsInput, arg1 func(*appconfig.ListDeploymentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentsPages indicates an expected call of ListDeploymentsPages
func (mr *MockAppConfigAPIMockRecorder) ListDeploymentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsPages", reflect.TypeOf((*MockAppConfigAPI)(nil).ListDeploymentsPages), arg0, arg1)
}

// ListDeploymentsPagesWithContext mocks base method
func (m *MockAppConfigAPI) ListDeploymentsPagesWithContext(arg0 context.Context, arg1 *appconfig.ListDeploymentsInput, arg2 func(*appconfig.ListDeploymentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentsPagesWithContext indicates an expected call of ListDeploymentsPagesWithContext
func (mr *MockAppConfigAPIMockRecorder) ListDeploymentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsPagesWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListDeploymentsPagesWithContext), varargs...)
}

// ListDeploymentsRequest mocks base method
func (m *MockAppConfigAPI) ListDeploymentsRequest(arg0 *appconfig.ListDeploymentsInput) (*request.Request, *appconfig.ListDeploymentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.ListDeploymentsOutput)
	return ret0, ret1
}

// ListDeploymentsRequest indicates an expected call of ListDeploymentsRequest
func (mr *MockAppConfigAPIMockRecorder) ListDeploymentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).ListDeploymentsRequest), arg0)
}

// ListDeploymentsWithContext mocks base method
func (m *MockAppConfigAPI) ListDeploymentsWithContext(arg0 context.Context, arg1 *appconfig.ListDeploymentsInput, arg2 ...request.Option) (*appconfig.ListDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentsWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.ListDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentsWithContext indicates an expected call of ListDeploymentsWithContext
func (mr *MockAppConfigAPIMockRecorder) ListDeploymentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListDeploymentsWithContext), varargs...)
}

// ListEnvironments mocks base method
func (m *MockAppConfigAPI) ListEnvironments(arg0 *appconfig.ListEnvironmentsInput) (*appconfig.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0)
	ret0, _ := ret[0].(*appconfig.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockAppConfigAPIMockRecorder) ListEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockAppConfigAPI)(nil).ListEnvironments), arg0)
}

// ListEnvironmentsPages mocks base method
func (m *MockAppConfigAPI) ListEnvironmentsPages(arg0 *appconfig.ListEnvironmentsInput, arg1 func(*appconfig.ListEnvironmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPages indicates an expected call of ListEnvironmentsPages
func (mr *MockAppConfigAPIMockRecorder) ListEnvironmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPages", reflect.TypeOf((*MockAppConfigAPI)(nil).ListEnvironmentsPages), arg0, arg1)
}

// ListEnvironmentsPagesWithContext mocks base method
func (m *MockAppConfigAPI) ListEnvironmentsPagesWithContext(arg0 context.Context, arg1 *appconfig.ListEnvironmentsInput, arg2 func(*appconfig.ListEnvironmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPagesWithContext indicates an expected call of ListEnvironmentsPagesWithContext
func (mr *MockAppConfigAPIMockRecorder) ListEnvironmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPagesWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListEnvironmentsPagesWithContext), varargs...)
}

// ListEnvironmentsRequest mocks base method
func (m *MockAppConfigAPI) ListEnvironmentsRequest(arg0 *appconfig.ListEnvironmentsInput) (*request.Request, *appconfig.ListEnvironmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.ListEnvironmentsOutput)
	return ret0, ret1
}

// ListEnvironmentsRequest indicates an expected call of ListEnvironmentsRequest
func (mr *MockAppConfigAPIMockRecorder) ListEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).ListEnvironmentsRequest), arg0)
}

// ListEnvironmentsWithContext mocks base method
func (m *MockAppConfigAPI) ListEnvironmentsWithContext(arg0 context.Context, arg1 *appconfig.ListEnvironmentsInput, arg2 ...request.Option) (*appconfig.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsWithContext indicates an expected call of ListEnvironmentsWithContext
func (mr *MockAppConfigAPIMockRecorder) ListEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListEnvironmentsWithContext), varargs...)
}

// ListExtensionAssociations mocks base method
func (m *MockAppConfigAPI) ListExtensionAssociations(arg0 *appconfig.ListExtensionAssociationsInput) (*appconfig.ListExtensionAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensionAssociations", arg0)
	ret0, _ := ret[0].(*appconfig.ListExtensionAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensionAssociations indicates an expected call of ListExtensionAssociations
func (mr *MockAppConfigAPIMockRecorder) ListExtensionAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionAssociations", reflect.TypeOf((*MockAppConfigAPI)(nil).ListExtensionAssociations), arg0)
}

// ListExtensionAssociationsPages mocks base method
func (m *MockAppConfigAPI) ListExtensionAssociationsPages(arg0 *appconfig.ListExtensionAssociationsInput, arg1 func(*appconfig.ListExtensionAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensionAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExtensionAssociationsPages indicates an expected call of ListExtensionAssociationsPages
func (mr *MockAppConfigAPIMockRecorder) ListExtensionAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionAssociationsPages", reflect.TypeOf((*MockAppConfigAPI)(nil).ListExtensionAssociationsPages), arg0, arg1)
}

// ListExtensionAssociationsPagesWithContext mocks base method
func (m *MockAppConfigAPI) ListExtensionAssociationsPagesWithContext(arg0 context.Context, arg1 *appconfig.ListExtensionAssociationsInput, arg2 func(*appconfig.ListExtensionAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtensionAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExtensionAssociationsPagesWithContext indicates an expected call of ListExtensionAssociationsPagesWithContext
func (mr *MockAppConfigAPIMockRecorder) ListExtensionAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionAssociationsPagesWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListExtensionAssociationsPagesWithContext), varargs...)
}

// ListExtensionAssociationsRequest mocks base method
func (m *MockAppConfigAPI) ListExtensionAssociationsRequest(arg0 *appconfig.ListExtensionAssociationsInput) (*request.Request, *appconfig.ListExtensionAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensionAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.ListExtensionAssociationsOutput)
	return ret0, ret1
}

// ListExtensionAssociationsRequest indicates an expected call of ListExtensionAssociationsRequest
func (mr *MockAppConfigAPIMockRecorder) ListExtensionAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionAssociationsRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).ListExtensionAssociationsRequest), arg0)
}

// ListExtensionAssociationsWithContext mocks base method
func (m *MockAppConfigAPI) ListExtensionAssociationsWithContext(arg0 context.Context, arg1 *appconfig.ListExtensionAssociationsInput, arg2 ...request.Option) (*appconfig.ListExtensionAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtensionAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.ListExtensionAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensionAssociationsWithContext indicates an expected call of ListExtensionAssociationsWithContext
func (mr *MockAppConfigAPIMockRecorder) ListExtensionAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionAssociationsWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListExtensionAssociationsWithContext), varargs...)
}

// ListExtensions mocks base method
func (m *MockAppConfigAPI) ListExtensions(arg0 *appconfig.ListExtensionsInput) (*appconfig.ListExtensionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensions", arg0)
	ret0, _ := ret[0].(*appconfig.ListExtensionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensions indicates an expected call of ListExtensions
func (mr *MockAppConfigAPIMockRecorder) ListExtensions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensions", reflect.TypeOf((*MockAppConfigAPI)(nil).ListExtensions), arg0)
}

// ListExtensionsPages mocks base method
func (m *MockAppConfigAPI) ListExtensionsPages(arg0 *appconfig.ListExtensionsInput, arg1 func(*appconfig.ListExtensionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExtensionsPages indicates an expected call of ListExtensionsPages
func (mr *MockAppConfigAPIMockRecorder) ListExtensionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionsPages", reflect.TypeOf((*MockAppConfigAPI)(nil).ListExtensionsPages), arg0, arg1)
}

// ListExtensionsPagesWithContext mocks base method
func (m *MockAppConfigAPI) ListExtensionsPagesWithContext(arg0 context.Context, arg1 *appconfig.ListExtensionsInput, arg2 func(*appconfig.ListExtensionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtensionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExtensionsPagesWithContext indicates an expected call of ListExtensionsPagesWithContext
func (mr *MockAppConfigAPIMockRecorder) ListExtensionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionsPagesWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListExtensionsPagesWithContext), varargs...)
}

// ListExtensionsRequest mocks base method
func (m *MockAppConfigAPI) ListExtensionsRequest(arg0 *appconfig.ListExtensionsInput) (*request.Request, *appconfig.ListExtensionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtensionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.ListExtensionsOutput)
	return ret0, ret1
}

// ListExtensionsRequest indicates an expected call of ListExtensionsRequest
func (mr *MockAppConfigAPIMockRecorder) ListExtensionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionsRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).ListExtensionsRequest), arg0)
}

// ListExtensionsWithContext mocks base method
func (m *MockAppConfigAPI) ListExtensionsWithContext(arg0 context.Context, arg1 *appconfig.ListExtensionsInput, arg2 ...request.Option) (*appconfig.ListExtensionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtensionsWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.ListExtensionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtensionsWithContext indicates an expected call of ListExtensionsWithContext
func (mr *MockAppConfigAPIMockRecorder) ListExtensionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtensionsWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListExtensionsWithContext), varargs...)
}

// ListHostedConfigurationVersions mocks base method
func (m *MockAppConfigAPI) ListHostedConfigurationVersions(arg0 *appconfig.ListHostedConfigurationVersionsInput) (*appconfig.ListHostedConfigurationVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostedConfigurationVersions", arg0)
	ret0, _ := ret[0].(*appconfig.ListHostedConfigurationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostedConfigurationVersions indicates an expected call of ListHostedConfigurationVersions
func (mr *MockAppConfigAPIMockRecorder) ListHostedConfigurationVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedConfigurationVersions", reflect.TypeOf((*MockAppConfigAPI)(nil).ListHostedConfigurationVersions), arg0)
}

// ListHostedConfigurationVersionsPages mocks base method
func (m *MockAppConfigAPI) ListHostedConfigurationVersionsPages(arg0 *appconfig.ListHostedConfigurationVersionsInput, arg1 func(*appconfig.ListHostedConfigurationVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostedConfigurationVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHostedConfigurationVersionsPages indicates an expected call of ListHostedConfigurationVersionsPages
func (mr *MockAppConfigAPIMockRecorder) ListHostedConfigurationVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedConfigurationVersionsPages", reflect.TypeOf((*MockAppConfigAPI)(nil).ListHostedConfigurationVersionsPages), arg0, arg1)
}

// ListHostedConfigurationVersionsPagesWithContext mocks base method
func (m *MockAppConfigAPI) ListHostedConfigurationVersionsPagesWithContext(arg0 context.Context, arg1 *appconfig.ListHostedConfigurationVersionsInput, arg2 func(*appconfig.ListHostedConfigurationVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostedConfigurationVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHostedConfigurationVersionsPagesWithContext indicates an expected call of ListHostedConfigurationVersionsPagesWithContext
func (mr *MockAppConfigAPIMockRecorder) ListHostedConfigurationVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedConfigurationVersionsPagesWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListHostedConfigurationVersionsPagesWithContext), varargs...)
}

// ListHostedConfigurationVersionsRequest mocks base method
func (m *MockAppConfigAPI) ListHostedConfigurationVersionsRequest(arg0 *appconfig.ListHostedConfigurationVersionsInput) (*request.Request, *appconfig.ListHostedConfigurationVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostedConfigurationVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.ListHostedConfigurationVersionsOutput)
	return ret0, ret1
}

// ListHostedConfigurationVersionsRequest indicates an expected call of ListHostedConfigurationVersionsRequest
func (mr *MockAppConfigAPIMockRecorder) ListHostedConfigurationVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedConfigurationVersionsRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).ListHostedConfigurationVersionsRequest), arg0)
}

// ListHostedConfigurationVersionsWithContext mocks base method
func (m *MockAppConfigAPI) ListHostedConfigurationVersionsWithContext(arg0 context.Context, arg1 *appconfig.ListHostedConfigurationVersionsInput, arg2 ...request.Option) (*appconfig.ListHostedConfigurationVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostedConfigurationVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.ListHostedConfigurationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostedConfigurationVersionsWithContext indicates an expected call of ListHostedConfigurationVersionsWithContext
func (mr *MockAppConfigAPIMockRecorder) ListHostedConfigurationVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedConfigurationVersionsWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListHostedConfigurationVersionsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockAppConfigAPI) ListTagsForResource(arg0 *appconfig.ListTagsForResourceInput) (*appconfig.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*appconfig.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockAppConfigAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAppConfigAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockAppConfigAPI) ListTagsForResourceRequest(arg0 *appconfig.ListTagsForResourceInput) (*request.Request, *appconfig.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockAppConfigAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockAppConfigAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *appconfig.ListTagsForResourceInput, arg2 ...request.Option) (*appconfig.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockAppConfigAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartDeployment mocks base method
func (m *MockAppConfigAPI) StartDeployment(arg0 *appconfig.StartDeploymentInput) (*appconfig.StartDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeployment", arg0)
	ret0, _ := ret[0].(*appconfig.StartDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDeployment indicates an expected call of StartDeployment
func (mr *MockAppConfigAPIMockRecorder) StartDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeployment", reflect.TypeOf((*MockAppConfigAPI)(nil).StartDeployment), arg0)
}

// StartDeploymentRequest mocks base method
func (m *MockAppConfigAPI) StartDeploymentRequest(arg0 *appconfig.StartDeploymentInput) (*request.Request, *appconfig.StartDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.StartDeploymentOutput)
	return ret0, ret1
}

// StartDeploymentRequest indicates an expected call of StartDeploymentRequest
func (mr *MockAppConfigAPIMockRecorder) StartDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeploymentRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).StartDeploymentRequest), arg0)
}

// StartDeploymentWithContext mocks base method
func (m *MockAppConfigAPI) StartDeploymentWithContext(arg0 context.Context, arg1 *appconfig.StartDeploymentInput, arg2 ...request.Option) (*appconfig.StartDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.StartDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDeploymentWithContext indicates an expected call of StartDeploymentWithContext
func (mr *MockAppConfigAPIMockRecorder) StartDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeploymentWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).StartDeploymentWithContext), varargs...)
}

// StopDeployment mocks base method
func (m *MockAppConfigAPI) StopDeployment(arg0 *appconfig.StopDeploymentInput) (*appconfig.StopDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDeployment", arg0)
	ret0, _ := ret[0].(*appconfig.StopDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDeployment indicates an expected call of StopDeployment
func (mr *MockAppConfigAPIMockRecorder) StopDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDeployment", reflect.TypeOf((*MockAppConfigAPI)(nil).StopDeployment), arg0)
}

// StopDeploymentRequest mocks base method
func (m *MockAppConfigAPI) StopDeploymentRequest(arg0 *appconfig.StopDeploymentInput) (*request.Request, *appconfig.StopDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.StopDeploymentOutput)
	return ret0, ret1
}

// StopDeploymentRequest indicates an expected call of StopDeploymentRequest
func (mr *MockAppConfigAPIMockRecorder) StopDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDeploymentRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).StopDeploymentRequest), arg0)
}

// StopDeploymentWithContext mocks base method
func (m *MockAppConfigAPI) StopDeploymentWithContext(arg0 context.Context, arg1 *appconfig.StopDeploymentInput, arg2 ...request.Option) (*appconfig.StopDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.StopDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDeploymentWithContext indicates an expected call of StopDeploymentWithContext
func (mr *MockAppConfigAPIMockRecorder) StopDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDeploymentWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).StopDeploymentWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockAppConfigAPI) TagResource(arg0 *appconfig.TagResourceInput) (*appconfig.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*appconfig.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockAppConfigAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockAppConfigAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockAppConfigAPI) TagResourceRequest(arg0 *appconfig.TagResourceInput) (*request.Request, *appconfig.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockAppConfigAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockAppConfigAPI) TagResourceWithContext(arg0 context.Context, arg1 *appconfig.TagResourceInput, arg2 ...request.Option) (*appconfig.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockAppConfigAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockAppConfigAPI) UntagResource(arg0 *appconfig.UntagResourceInput) (*appconfig.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*appconfig.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockAppConfigAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockAppConfigAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockAppConfigAPI) UntagResourceRequest(arg0 *appconfig.UntagResourceInput) (*request.Request, *appconfig.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockAppConfigAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockAppConfigAPI) UntagResourceWithContext(arg0 context.Context, arg1 *appconfig.UntagResourceInput, arg2 ...request.Option) (*appconfig.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockAppConfigAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApplication mocks base method
func (m *MockAppConfigAPI) UpdateApplication(arg0 *appconfig.UpdateApplicationInput) (*appconfig.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0)
	ret0, _ := ret[0].(*appconfig.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockAppConfigAPIMockRecorder) UpdateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateApplication), arg0)
}

// UpdateApplicationRequest mocks base method
func (m *MockAppConfigAPI) UpdateApplicationRequest(arg0 *appconfig.UpdateApplicationInput) (*request.Request, *appconfig.UpdateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.UpdateApplicationOutput)
	return ret0, ret1
}

// UpdateApplicationRequest indicates an expected call of UpdateApplicationRequest
func (mr *MockAppConfigAPIMockRecorder) UpdateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateApplicationRequest), arg0)
}

// UpdateApplicationWithContext mocks base method
func (m *MockAppConfigAPI) UpdateApplicationWithContext(arg0 context.Context, arg1 *appconfig.UpdateApplicationInput, arg2 ...request.Option) (*appconfig.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithContext indicates an expected call of UpdateApplicationWithContext
func (mr *MockAppConfigAPIMockRecorder) UpdateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateApplicationWithContext), varargs...)
}

// UpdateConfigurationProfile mocks base method
func (m *MockAppConfigAPI) UpdateConfigurationProfile(arg0 *appconfig.UpdateConfigurationProfileInput) (*appconfig.UpdateConfigurationProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationProfile", arg0)
	ret0, _ := ret[0].(*appconfig.UpdateConfigurationProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigurationProfile indicates an expected call of UpdateConfigurationProfile
func (mr *MockAppConfigAPIMockRecorder) UpdateConfigurationProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationProfile", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateConfigurationProfile), arg0)
}

// UpdateConfigurationProfileRequest mocks base method
func (m *MockAppConfigAPI) UpdateConfigurationProfileRequest(arg0 *appconfig.UpdateConfigurationProfileInput) (*request.Request, *appconfig.UpdateConfigurationProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.UpdateConfigurationProfileOutput)
	return ret0, ret1
}

// UpdateConfigurationProfileRequest indicates an expected call of UpdateConfigurationProfileRequest
func (mr *MockAppConfigAPIMockRecorder) UpdateConfigurationProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationProfileRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateConfigurationProfileRequest), arg0)
}

// UpdateConfigurationProfileWithContext mocks base method
func (m *MockAppConfigAPI) UpdateConfigurationProfileWithContext(arg0 context.Context, arg1 *appconfig.UpdateConfigurationProfileInput, arg2 ...request.Option) (*appconfig.UpdateConfigurationProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigurationProfileWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.UpdateConfigurationProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigurationProfileWithContext indicates an expected call of UpdateConfigurationProfileWithContext
func (mr *MockAppConfigAPIMockRecorder) UpdateConfigurationProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationProfileWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateConfigurationProfileWithContext), varargs...)
}

// UpdateDeploymentStrategy mocks base method
func (m *MockAppConfigAPI) UpdateDeploymentStrategy(arg0 *appconfig.UpdateDeploymentStrategyInput) (*appconfig.UpdateDeploymentStrategyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeploymentStrategy", arg0)
	ret0, _ := ret[0].(*appconfig.UpdateDeploymentStrategyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeploymentStrategy indicates an expected call of UpdateDeploymentStrategy
func (mr *MockAppConfigAPIMockRecorder) UpdateDeploymentStrategy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentStrategy", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateDeploymentStrategy), arg0)
}

// UpdateDeploymentStrategyRequest mocks base method
func (m *MockAppConfigAPI) UpdateDeploymentStrategyRequest(arg0 *appconfig.UpdateDeploymentStrategyInput) (*request.Request, *appconfig.UpdateDeploymentStrategyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeploymentStrategyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.UpdateDeploymentStrategyOutput)
	return ret0, ret1
}

// UpdateDeploymentStrategyRequest indicates an expected call of UpdateDeploymentStrategyRequest
func (mr *MockAppConfigAPIMockRecorder) UpdateDeploymentStrategyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentStrategyRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateDeploymentStrategyRequest), arg0)
}

// UpdateDeploymentStrategyWithContext mocks base method
func (m *MockAppConfigAPI) UpdateDeploymentStrategyWithContext(arg0 context.Context, arg1 *appconfig.UpdateDeploymentStrategyInput, arg2 ...request.Option) (*appconfig.UpdateDeploymentStrategyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeploymentStrategyWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.UpdateDeploymentStrategyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeploymentStrategyWithContext indicates an expected call of UpdateDeploymentStrategyWithContext
func (mr *MockAppConfigAPIMockRecorder) UpdateDeploymentStrategyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentStrategyWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateDeploymentStrategyWithContext), varargs...)
}

// UpdateEnvironment mocks base method
func (m *MockAppConfigAPI) UpdateEnvironment(arg0 *appconfig.UpdateEnvironmentInput) (*appconfig.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0)
	ret0, _ := ret[0].(*appconfig.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockAppConfigAPIMockRecorder) UpdateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateEnvironment), arg0)
}

// UpdateEnvironmentRequest mocks base method
func (m *MockAppConfigAPI) UpdateEnvironmentRequest(arg0 *appconfig.UpdateEnvironmentInput) (*request.Request, *appconfig.UpdateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.UpdateEnvironmentOutput)
	return ret0, ret1
}

// UpdateEnvironmentRequest indicates an expected call of UpdateEnvironmentRequest
func (mr *MockAppConfigAPIMockRecorder) UpdateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateEnvironmentRequest), arg0)
}

// UpdateEnvironmentWithContext mocks base method
func (m *MockAppConfigAPI) UpdateEnvironmentWithContext(arg0 context.Context, arg1 *appconfig.UpdateEnvironmentInput, arg2 ...request.Option) (*appconfig.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentWithContext indicates an expected call of UpdateEnvironmentWithContext
func (mr *MockAppConfigAPIMockRecorder) UpdateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateEnvironmentWithContext), varargs...)
}

// UpdateExtension mocks base method
func (m *MockAppConfigAPI) UpdateExtension(arg0 *appconfig.UpdateExtensionInput) (*appconfig.UpdateExtensionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExtension", arg0)
	ret0, _ := ret[0].(*appconfig.UpdateExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtension indicates an expected call of UpdateExtension
func (mr *MockAppConfigAPIMockRecorder) UpdateExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtension", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateExtension), arg0)
}

// UpdateExtensionAssociation mocks base method
func (m *MockAppConfigAPI) UpdateExtensionAssociation(arg0 *appconfig.UpdateExtensionAssociationInput) (*appconfig.UpdateExtensionAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExtensionAssociation", arg0)
	ret0, _ := ret[0].(*appconfig.UpdateExtensionAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtensionAssociation indicates an expected call of UpdateExtensionAssociation
func (mr *MockAppConfigAPIMockRecorder) UpdateExtensionAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtensionAssociation", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateExtensionAssociation), arg0)
}

// UpdateExtensionAssociationRequest mocks base method
func (m *MockAppConfigAPI) UpdateExtensionAssociationRequest(arg0 *appconfig.UpdateExtensionAssociationInput) (*request.Request, *appconfig.UpdateExtensionAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExtensionAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.UpdateExtensionAssociationOutput)
	return ret0, ret1
}

// UpdateExtensionAssociationRequest indicates an expected call of UpdateExtensionAssociationRequest
func (mr *MockAppConfigAPIMockRecorder) UpdateExtensionAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtensionAssociationRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateExtensionAssociationRequest), arg0)
}

// UpdateExtensionAssociationWithContext mocks base method
func (m *MockAppConfigAPI) UpdateExtensionAssociationWithContext(arg0 context.Context, arg1 *appconfig.UpdateExtensionAssociationInput, arg2 ...request.Option) (*appconfig.UpdateExtensionAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtensionAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.UpdateExtensionAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtensionAssociationWithContext indicates an expected call of UpdateExtensionAssociationWithContext
func (mr *MockAppConfigAPIMockRecorder) UpdateExtensionAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtensionAssociationWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateExtensionAssociationWithContext), varargs...)
}

// UpdateExtensionRequest mocks base method
func (m *MockAppConfigAPI) UpdateExtensionRequest(arg0 *appconfig.UpdateExtensionInput) (*request.Request, *appconfig.UpdateExtensionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExtensionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.UpdateExtensionOutput)
	return ret0, ret1
}

// UpdateExtensionRequest indicates an expected call of UpdateExtensionRequest
func (mr *MockAppConfigAPIMockRecorder) UpdateExtensionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtensionRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateExtensionRequest), arg0)
}

// UpdateExtensionWithContext mocks base method
func (m *MockAppConfigAPI) UpdateExtensionWithContext(arg0 context.Context, arg1 *appconfig.UpdateExtensionInput, arg2 ...request.Option) (*appconfig.UpdateExtensionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtensionWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.UpdateExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtensionWithContext indicates an expected call of UpdateExtensionWithContext
func (mr *MockAppConfigAPIMockRecorder) UpdateExtensionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtensionWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).UpdateExtensionWithContext), varargs...)
}

// ValidateConfiguration mocks base method
func (m *MockAppConfigAPI) ValidateConfiguration(arg0 *appconfig.ValidateConfigurationInput) (*appconfig.ValidateConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfiguration", arg0)
	ret0, _ := ret[0].(*appconfig.ValidateConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateConfiguration indicates an expected call of ValidateConfiguration
func (mr *MockAppConfigAPIMockRecorder) ValidateConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfiguration", reflect.TypeOf((*MockAppConfigAPI)(nil).ValidateConfiguration), arg0)
}

// ValidateConfigurationRequest mocks base method
func (m *MockAppConfigAPI) ValidateConfigurationRequest(arg0 *appconfig.ValidateConfigurationInput) (*request.Request, *appconfig.ValidateConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appconfig.ValidateConfigurationOutput)
	return ret0, ret1
}

// ValidateConfigurationRequest indicates an expected call of ValidateConfigurationRequest
func (mr *MockAppConfigAPIMockRecorder) ValidateConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigurationRequest", reflect.TypeOf((*MockAppConfigAPI)(nil).ValidateConfigurationRequest), arg0)
}

// ValidateConfigurationWithContext mocks base method
func (m *MockAppConfigAPI) ValidateConfigurationWithContext(arg0 context.Context, arg1 *appconfig.ValidateConfigurationInput, arg2 ...request.Option) (*appconfig.ValidateConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*appconfig.ValidateConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateConfigurationWithContext indicates an expected call of ValidateConfigurationWithContext
func (mr *MockAppConfigAPIMockRecorder) ValidateConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigurationWithContext", reflect.TypeOf((*MockAppConfigAPI)(nil).ValidateConfigurationWithContext), varargs...)
}
