// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/profile/profileiface (interfaces: ProfileAPI)

// Package profilemock is a generated GoMock package.
package profilemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	profile "github.com/aws/aws-sdk-go/service/profile"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProfileAPI is a mock of ProfileAPI interface
type MockProfileAPI struct {
	ctrl     *gomock.Controller
	recorder *MockProfileAPIMockRecorder
}

// MockProfileAPIMockRecorder is the mock recorder for MockProfileAPI
type MockProfileAPIMockRecorder struct {
	mock *MockProfileAPI
}

// NewMockProfileAPI creates a new mock instance
func NewMockProfileAPI(ctrl *gomock.Controller) *MockProfileAPI {
	mock := &MockProfileAPI{ctrl: ctrl}
	mock.recorder = &MockProfileAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfileAPI) EXPECT() *MockProfileAPIMockRecorder {
	return m.recorder
}

// AddProfileKey mocks base method
func (m *MockProfileAPI) AddProfileKey(arg0 *profile.AddProfileKeyInput) (*profile.AddProfileKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProfileKey", arg0)
	ret0, _ := ret[0].(*profile.AddProfileKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProfileKey indicates an expected call of AddProfileKey
func (mr *MockProfileAPIMockRecorder) AddProfileKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProfileKey", reflect.TypeOf((*MockProfileAPI)(nil).AddProfileKey), arg0)
}

// AddProfileKeyRequest mocks base method
func (m *MockProfileAPI) AddProfileKeyRequest(arg0 *profile.AddProfileKeyInput) (*request.Request, *profile.AddProfileKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProfileKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.AddProfileKeyOutput)
	return ret0, ret1
}

// AddProfileKeyRequest indicates an expected call of AddProfileKeyRequest
func (mr *MockProfileAPIMockRecorder) AddProfileKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProfileKeyRequest", reflect.TypeOf((*MockProfileAPI)(nil).AddProfileKeyRequest), arg0)
}

// AddProfileKeyWithContext mocks base method
func (m *MockProfileAPI) AddProfileKeyWithContext(arg0 context.Context, arg1 *profile.AddProfileKeyInput, arg2 ...request.Option) (*profile.AddProfileKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProfileKeyWithContext", varargs...)
	ret0, _ := ret[0].(*profile.AddProfileKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProfileKeyWithContext indicates an expected call of AddProfileKeyWithContext
func (mr *MockProfileAPIMockRecorder) AddProfileKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProfileKeyWithContext", reflect.TypeOf((*MockProfileAPI)(nil).AddProfileKeyWithContext), varargs...)
}

// CreateDomain mocks base method
func (m *MockProfileAPI) CreateDomain(arg0 *profile.CreateDomainInput) (*profile.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0)
	ret0, _ := ret[0].(*profile.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain
func (mr *MockProfileAPIMockRecorder) CreateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockProfileAPI)(nil).CreateDomain), arg0)
}

// CreateDomainRequest mocks base method
func (m *MockProfileAPI) CreateDomainRequest(arg0 *profile.CreateDomainInput) (*request.Request, *profile.CreateDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.CreateDomainOutput)
	return ret0, ret1
}

// CreateDomainRequest indicates an expected call of CreateDomainRequest
func (mr *MockProfileAPIMockRecorder) CreateDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainRequest", reflect.TypeOf((*MockProfileAPI)(nil).CreateDomainRequest), arg0)
}

// CreateDomainWithContext mocks base method
func (m *MockProfileAPI) CreateDomainWithContext(arg0 context.Context, arg1 *profile.CreateDomainInput, arg2 ...request.Option) (*profile.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainWithContext", varargs...)
	ret0, _ := ret[0].(*profile.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWithContext indicates an expected call of CreateDomainWithContext
func (mr *MockProfileAPIMockRecorder) CreateDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWithContext", reflect.TypeOf((*MockProfileAPI)(nil).CreateDomainWithContext), varargs...)
}

// CreateProfile mocks base method
func (m *MockProfileAPI) CreateProfile(arg0 *profile.CreateProfileInput) (*profile.CreateProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0)
	ret0, _ := ret[0].(*profile.CreateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockProfileAPIMockRecorder) CreateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileAPI)(nil).CreateProfile), arg0)
}

// CreateProfileRequest mocks base method
func (m *MockProfileAPI) CreateProfileRequest(arg0 *profile.CreateProfileInput) (*request.Request, *profile.CreateProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.CreateProfileOutput)
	return ret0, ret1
}

// CreateProfileRequest indicates an expected call of CreateProfileRequest
func (mr *MockProfileAPIMockRecorder) CreateProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileRequest", reflect.TypeOf((*MockProfileAPI)(nil).CreateProfileRequest), arg0)
}

// CreateProfileWithContext mocks base method
func (m *MockProfileAPI) CreateProfileWithContext(arg0 context.Context, arg1 *profile.CreateProfileInput, arg2 ...request.Option) (*profile.CreateProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfileWithContext", varargs...)
	ret0, _ := ret[0].(*profile.CreateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfileWithContext indicates an expected call of CreateProfileWithContext
func (mr *MockProfileAPIMockRecorder) CreateProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileWithContext", reflect.TypeOf((*MockProfileAPI)(nil).CreateProfileWithContext), varargs...)
}

// DeleteDomain mocks base method
func (m *MockProfileAPI) DeleteDomain(arg0 *profile.DeleteDomainInput) (*profile.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomain", arg0)
	ret0, _ := ret[0].(*profile.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomain indicates an expected call of DeleteDomain
func (mr *MockProfileAPIMockRecorder) DeleteDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomain", reflect.TypeOf((*MockProfileAPI)(nil).DeleteDomain), arg0)
}

// DeleteDomainRequest mocks base method
func (m *MockProfileAPI) DeleteDomainRequest(arg0 *profile.DeleteDomainInput) (*request.Request, *profile.DeleteDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.DeleteDomainOutput)
	return ret0, ret1
}

// DeleteDomainRequest indicates an expected call of DeleteDomainRequest
func (mr *MockProfileAPIMockRecorder) DeleteDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainRequest", reflect.TypeOf((*MockProfileAPI)(nil).DeleteDomainRequest), arg0)
}

// DeleteDomainWithContext mocks base method
func (m *MockProfileAPI) DeleteDomainWithContext(arg0 context.Context, arg1 *profile.DeleteDomainInput, arg2 ...request.Option) (*profile.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainWithContext", varargs...)
	ret0, _ := ret[0].(*profile.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainWithContext indicates an expected call of DeleteDomainWithContext
func (mr *MockProfileAPIMockRecorder) DeleteDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainWithContext", reflect.TypeOf((*MockProfileAPI)(nil).DeleteDomainWithContext), varargs...)
}

// DeleteIntegration mocks base method
func (m *MockProfileAPI) DeleteIntegration(arg0 *profile.DeleteIntegrationInput) (*profile.DeleteIntegrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntegration", arg0)
	ret0, _ := ret[0].(*profile.DeleteIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegration indicates an expected call of DeleteIntegration
func (mr *MockProfileAPIMockRecorder) DeleteIntegration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegration", reflect.TypeOf((*MockProfileAPI)(nil).DeleteIntegration), arg0)
}

// DeleteIntegrationRequest mocks base method
func (m *MockProfileAPI) DeleteIntegrationRequest(arg0 *profile.DeleteIntegrationInput) (*request.Request, *profile.DeleteIntegrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.DeleteIntegrationOutput)
	return ret0, ret1
}

// DeleteIntegrationRequest indicates an expected call of DeleteIntegrationRequest
func (mr *MockProfileAPIMockRecorder) DeleteIntegrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationRequest", reflect.TypeOf((*MockProfileAPI)(nil).DeleteIntegrationRequest), arg0)
}

// DeleteIntegrationWithContext mocks base method
func (m *MockProfileAPI) DeleteIntegrationWithContext(arg0 context.Context, arg1 *profile.DeleteIntegrationInput, arg2 ...request.Option) (*profile.DeleteIntegrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*profile.DeleteIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegrationWithContext indicates an expected call of DeleteIntegrationWithContext
func (mr *MockProfileAPIMockRecorder) DeleteIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationWithContext", reflect.TypeOf((*MockProfileAPI)(nil).DeleteIntegrationWithContext), varargs...)
}

// DeleteProfile mocks base method
func (m *MockProfileAPI) DeleteProfile(arg0 *profile.DeleteProfileInput) (*profile.DeleteProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", arg0)
	ret0, _ := ret[0].(*profile.DeleteProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfile indicates an expected call of DeleteProfile
func (mr *MockProfileAPIMockRecorder) DeleteProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfile), arg0)
}

// DeleteProfileKey mocks base method
func (m *MockProfileAPI) DeleteProfileKey(arg0 *profile.DeleteProfileKeyInput) (*profile.DeleteProfileKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileKey", arg0)
	ret0, _ := ret[0].(*profile.DeleteProfileKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileKey indicates an expected call of DeleteProfileKey
func (mr *MockProfileAPIMockRecorder) DeleteProfileKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileKey", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileKey), arg0)
}

// DeleteProfileKeyRequest mocks base method
func (m *MockProfileAPI) DeleteProfileKeyRequest(arg0 *profile.DeleteProfileKeyInput) (*request.Request, *profile.DeleteProfileKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.DeleteProfileKeyOutput)
	return ret0, ret1
}

// DeleteProfileKeyRequest indicates an expected call of DeleteProfileKeyRequest
func (mr *MockProfileAPIMockRecorder) DeleteProfileKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileKeyRequest", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileKeyRequest), arg0)
}

// DeleteProfileKeyWithContext mocks base method
func (m *MockProfileAPI) DeleteProfileKeyWithContext(arg0 context.Context, arg1 *profile.DeleteProfileKeyInput, arg2 ...request.Option) (*profile.DeleteProfileKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfileKeyWithContext", varargs...)
	ret0, _ := ret[0].(*profile.DeleteProfileKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileKeyWithContext indicates an expected call of DeleteProfileKeyWithContext
func (mr *MockProfileAPIMockRecorder) DeleteProfileKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileKeyWithContext", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileKeyWithContext), varargs...)
}

// DeleteProfileObject mocks base method
func (m *MockProfileAPI) DeleteProfileObject(arg0 *profile.DeleteProfileObjectInput) (*profile.DeleteProfileObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileObject", arg0)
	ret0, _ := ret[0].(*profile.DeleteProfileObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileObject indicates an expected call of DeleteProfileObject
func (mr *MockProfileAPIMockRecorder) DeleteProfileObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileObject", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileObject), arg0)
}

// DeleteProfileObjectRequest mocks base method
func (m *MockProfileAPI) DeleteProfileObjectRequest(arg0 *profile.DeleteProfileObjectInput) (*request.Request, *profile.DeleteProfileObjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileObjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.DeleteProfileObjectOutput)
	return ret0, ret1
}

// DeleteProfileObjectRequest indicates an expected call of DeleteProfileObjectRequest
func (mr *MockProfileAPIMockRecorder) DeleteProfileObjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileObjectRequest", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileObjectRequest), arg0)
}

// DeleteProfileObjectType mocks base method
func (m *MockProfileAPI) DeleteProfileObjectType(arg0 *profile.DeleteProfileObjectTypeInput) (*profile.DeleteProfileObjectTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileObjectType", arg0)
	ret0, _ := ret[0].(*profile.DeleteProfileObjectTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileObjectType indicates an expected call of DeleteProfileObjectType
func (mr *MockProfileAPIMockRecorder) DeleteProfileObjectType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileObjectType", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileObjectType), arg0)
}

// DeleteProfileObjectTypeRequest mocks base method
func (m *MockProfileAPI) DeleteProfileObjectTypeRequest(arg0 *profile.DeleteProfileObjectTypeInput) (*request.Request, *profile.DeleteProfileObjectTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileObjectTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.DeleteProfileObjectTypeOutput)
	return ret0, ret1
}

// DeleteProfileObjectTypeRequest indicates an expected call of DeleteProfileObjectTypeRequest
func (mr *MockProfileAPIMockRecorder) DeleteProfileObjectTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileObjectTypeRequest", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileObjectTypeRequest), arg0)
}

// DeleteProfileObjectTypeWithContext mocks base method
func (m *MockProfileAPI) DeleteProfileObjectTypeWithContext(arg0 context.Context, arg1 *profile.DeleteProfileObjectTypeInput, arg2 ...request.Option) (*profile.DeleteProfileObjectTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfileObjectTypeWithContext", varargs...)
	ret0, _ := ret[0].(*profile.DeleteProfileObjectTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileObjectTypeWithContext indicates an expected call of DeleteProfileObjectTypeWithContext
func (mr *MockProfileAPIMockRecorder) DeleteProfileObjectTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileObjectTypeWithContext", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileObjectTypeWithContext), varargs...)
}

// DeleteProfileObjectWithContext mocks base method
func (m *MockProfileAPI) DeleteProfileObjectWithContext(arg0 context.Context, arg1 *profile.DeleteProfileObjectInput, arg2 ...request.Option) (*profile.DeleteProfileObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfileObjectWithContext", varargs...)
	ret0, _ := ret[0].(*profile.DeleteProfileObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileObjectWithContext indicates an expected call of DeleteProfileObjectWithContext
func (mr *MockProfileAPIMockRecorder) DeleteProfileObjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileObjectWithContext", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileObjectWithContext), varargs...)
}

// DeleteProfileRequest mocks base method
func (m *MockProfileAPI) DeleteProfileRequest(arg0 *profile.DeleteProfileInput) (*request.Request, *profile.DeleteProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.DeleteProfileOutput)
	return ret0, ret1
}

// DeleteProfileRequest indicates an expected call of DeleteProfileRequest
func (mr *MockProfileAPIMockRecorder) DeleteProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileRequest", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileRequest), arg0)
}

// DeleteProfileWithContext mocks base method
func (m *MockProfileAPI) DeleteProfileWithContext(arg0 context.Context, arg1 *profile.DeleteProfileInput, arg2 ...request.Option) (*profile.DeleteProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfileWithContext", varargs...)
	ret0, _ := ret[0].(*profile.DeleteProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileWithContext indicates an expected call of DeleteProfileWithContext
func (mr *MockProfileAPIMockRecorder) DeleteProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileWithContext", reflect.TypeOf((*MockProfileAPI)(nil).DeleteProfileWithContext), varargs...)
}

// GetDomain mocks base method
func (m *MockProfileAPI) GetDomain(arg0 *profile.GetDomainInput) (*profile.GetDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", arg0)
	ret0, _ := ret[0].(*profile.GetDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain
func (mr *MockProfileAPIMockRecorder) GetDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockProfileAPI)(nil).GetDomain), arg0)
}

// GetDomainRequest mocks base method
func (m *MockProfileAPI) GetDomainRequest(arg0 *profile.GetDomainInput) (*request.Request, *profile.GetDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.GetDomainOutput)
	return ret0, ret1
}

// GetDomainRequest indicates an expected call of GetDomainRequest
func (mr *MockProfileAPIMockRecorder) GetDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainRequest", reflect.TypeOf((*MockProfileAPI)(nil).GetDomainRequest), arg0)
}

// GetDomainWithContext mocks base method
func (m *MockProfileAPI) GetDomainWithContext(arg0 context.Context, arg1 *profile.GetDomainInput, arg2 ...request.Option) (*profile.GetDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainWithContext", varargs...)
	ret0, _ := ret[0].(*profile.GetDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWithContext indicates an expected call of GetDomainWithContext
func (mr *MockProfileAPIMockRecorder) GetDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWithContext", reflect.TypeOf((*MockProfileAPI)(nil).GetDomainWithContext), varargs...)
}

// GetIntegration mocks base method
func (m *MockProfileAPI) GetIntegration(arg0 *profile.GetIntegrationInput) (*profile.GetIntegrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegration", arg0)
	ret0, _ := ret[0].(*profile.GetIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegration indicates an expected call of GetIntegration
func (mr *MockProfileAPIMockRecorder) GetIntegration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegration", reflect.TypeOf((*MockProfileAPI)(nil).GetIntegration), arg0)
}

// GetIntegrationRequest mocks base method
func (m *MockProfileAPI) GetIntegrationRequest(arg0 *profile.GetIntegrationInput) (*request.Request, *profile.GetIntegrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.GetIntegrationOutput)
	return ret0, ret1
}

// GetIntegrationRequest indicates an expected call of GetIntegrationRequest
func (mr *MockProfileAPIMockRecorder) GetIntegrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationRequest", reflect.TypeOf((*MockProfileAPI)(nil).GetIntegrationRequest), arg0)
}

// GetIntegrationWithContext mocks base method
func (m *MockProfileAPI) GetIntegrationWithContext(arg0 context.Context, arg1 *profile.GetIntegrationInput, arg2 ...request.Option) (*profile.GetIntegrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*profile.GetIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationWithContext indicates an expected call of GetIntegrationWithContext
func (mr *MockProfileAPIMockRecorder) GetIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationWithContext", reflect.TypeOf((*MockProfileAPI)(nil).GetIntegrationWithContext), varargs...)
}

// GetProfileObjectType mocks base method
func (m *MockProfileAPI) GetProfileObjectType(arg0 *profile.GetProfileObjectTypeInput) (*profile.GetProfileObjectTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileObjectType", arg0)
	ret0, _ := ret[0].(*profile.GetProfileObjectTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileObjectType indicates an expected call of GetProfileObjectType
func (mr *MockProfileAPIMockRecorder) GetProfileObjectType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileObjectType", reflect.TypeOf((*MockProfileAPI)(nil).GetProfileObjectType), arg0)
}

// GetProfileObjectTypeRequest mocks base method
func (m *MockProfileAPI) GetProfileObjectTypeRequest(arg0 *profile.GetProfileObjectTypeInput) (*request.Request, *profile.GetProfileObjectTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileObjectTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.GetProfileObjectTypeOutput)
	return ret0, ret1
}

// GetProfileObjectTypeRequest indicates an expected call of GetProfileObjectTypeRequest
func (mr *MockProfileAPIMockRecorder) GetProfileObjectTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileObjectTypeRequest", reflect.TypeOf((*MockProfileAPI)(nil).GetProfileObjectTypeRequest), arg0)
}

// GetProfileObjectTypeTemplate mocks base method
func (m *MockProfileAPI) GetProfileObjectTypeTemplate(arg0 *profile.GetProfileObjectTypeTemplateInput) (*profile.GetProfileObjectTypeTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileObjectTypeTemplate", arg0)
	ret0, _ := ret[0].(*profile.GetProfileObjectTypeTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileObjectTypeTemplate indicates an expected call of GetProfileObjectTypeTemplate
func (mr *MockProfileAPIMockRecorder) GetProfileObjectTypeTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileObjectTypeTemplate", reflect.TypeOf((*MockProfileAPI)(nil).GetProfileObjectTypeTemplate), arg0)
}

// GetProfileObjectTypeTemplateRequest mocks base method
func (m *MockProfileAPI) GetProfileObjectTypeTemplateRequest(arg0 *profile.GetProfileObjectTypeTemplateInput) (*request.Request, *profile.GetProfileObjectTypeTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileObjectTypeTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.GetProfileObjectTypeTemplateOutput)
	return ret0, ret1
}

// GetProfileObjectTypeTemplateRequest indicates an expected call of GetProfileObjectTypeTemplateRequest
func (mr *MockProfileAPIMockRecorder) GetProfileObjectTypeTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileObjectTypeTemplateRequest", reflect.TypeOf((*MockProfileAPI)(nil).GetProfileObjectTypeTemplateRequest), arg0)
}

// GetProfileObjectTypeTemplateWithContext mocks base method
func (m *MockProfileAPI) GetProfileObjectTypeTemplateWithContext(arg0 context.Context, arg1 *profile.GetProfileObjectTypeTemplateInput, arg2 ...request.Option) (*profile.GetProfileObjectTypeTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfileObjectTypeTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*profile.GetProfileObjectTypeTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileObjectTypeTemplateWithContext indicates an expected call of GetProfileObjectTypeTemplateWithContext
func (mr *MockProfileAPIMockRecorder) GetProfileObjectTypeTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileObjectTypeTemplateWithContext", reflect.TypeOf((*MockProfileAPI)(nil).GetProfileObjectTypeTemplateWithContext), varargs...)
}

// GetProfileObjectTypeWithContext mocks base method
func (m *MockProfileAPI) GetProfileObjectTypeWithContext(arg0 context.Context, arg1 *profile.GetProfileObjectTypeInput, arg2 ...request.Option) (*profile.GetProfileObjectTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfileObjectTypeWithContext", varargs...)
	ret0, _ := ret[0].(*profile.GetProfileObjectTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileObjectTypeWithContext indicates an expected call of GetProfileObjectTypeWithContext
func (mr *MockProfileAPIMockRecorder) GetProfileObjectTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileObjectTypeWithContext", reflect.TypeOf((*MockProfileAPI)(nil).GetProfileObjectTypeWithContext), varargs...)
}

// ListAccountIntegrations mocks base method
func (m *MockProfileAPI) ListAccountIntegrations(arg0 *profile.ListAccountIntegrationsInput) (*profile.ListAccountIntegrationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountIntegrations", arg0)
	ret0, _ := ret[0].(*profile.ListAccountIntegrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountIntegrations indicates an expected call of ListAccountIntegrations
func (mr *MockProfileAPIMockRecorder) ListAccountIntegrations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountIntegrations", reflect.TypeOf((*MockProfileAPI)(nil).ListAccountIntegrations), arg0)
}

// ListAccountIntegrationsRequest mocks base method
func (m *MockProfileAPI) ListAccountIntegrationsRequest(arg0 *profile.ListAccountIntegrationsInput) (*request.Request, *profile.ListAccountIntegrationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountIntegrationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.ListAccountIntegrationsOutput)
	return ret0, ret1
}

// ListAccountIntegrationsRequest indicates an expected call of ListAccountIntegrationsRequest
func (mr *MockProfileAPIMockRecorder) ListAccountIntegrationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountIntegrationsRequest", reflect.TypeOf((*MockProfileAPI)(nil).ListAccountIntegrationsRequest), arg0)
}

// ListAccountIntegrationsWithContext mocks base method
func (m *MockProfileAPI) ListAccountIntegrationsWithContext(arg0 context.Context, arg1 *profile.ListAccountIntegrationsInput, arg2 ...request.Option) (*profile.ListAccountIntegrationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountIntegrationsWithContext", varargs...)
	ret0, _ := ret[0].(*profile.ListAccountIntegrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountIntegrationsWithContext indicates an expected call of ListAccountIntegrationsWithContext
func (mr *MockProfileAPIMockRecorder) ListAccountIntegrationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountIntegrationsWithContext", reflect.TypeOf((*MockProfileAPI)(nil).ListAccountIntegrationsWithContext), varargs...)
}

// ListDomains mocks base method
func (m *MockProfileAPI) ListDomains(arg0 *profile.ListDomainsInput) (*profile.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", arg0)
	ret0, _ := ret[0].(*profile.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains
func (mr *MockProfileAPIMockRecorder) ListDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockProfileAPI)(nil).ListDomains), arg0)
}

// ListDomainsRequest mocks base method
func (m *MockProfileAPI) ListDomainsRequest(arg0 *profile.ListDomainsInput) (*request.Request, *profile.ListDomainsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.ListDomainsOutput)
	return ret0, ret1
}

// ListDomainsRequest indicates an expected call of ListDomainsRequest
func (mr *MockProfileAPIMockRecorder) ListDomainsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsRequest", reflect.TypeOf((*MockProfileAPI)(nil).ListDomainsRequest), arg0)
}

// ListDomainsWithContext mocks base method
func (m *MockProfileAPI) ListDomainsWithContext(arg0 context.Context, arg1 *profile.ListDomainsInput, arg2 ...request.Option) (*profile.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsWithContext", varargs...)
	ret0, _ := ret[0].(*profile.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainsWithContext indicates an expected call of ListDomainsWithContext
func (mr *MockProfileAPIMockRecorder) ListDomainsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsWithContext", reflect.TypeOf((*MockProfileAPI)(nil).ListDomainsWithContext), varargs...)
}

// ListIntegrations mocks base method
func (m *MockProfileAPI) ListIntegrations(arg0 *profile.ListIntegrationsInput) (*profile.ListIntegrationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIntegrations", arg0)
	ret0, _ := ret[0].(*profile.ListIntegrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIntegrations indicates an expected call of ListIntegrations
func (mr *MockProfileAPIMockRecorder) ListIntegrations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntegrations", reflect.TypeOf((*MockProfileAPI)(nil).ListIntegrations), arg0)
}

// ListIntegrationsRequest mocks base method
func (m *MockProfileAPI) ListIntegrationsRequest(arg0 *profile.ListIntegrationsInput) (*request.Request, *profile.ListIntegrationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIntegrationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.ListIntegrationsOutput)
	return ret0, ret1
}

// ListIntegrationsRequest indicates an expected call of ListIntegrationsRequest
func (mr *MockProfileAPIMockRecorder) ListIntegrationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntegrationsRequest", reflect.TypeOf((*MockProfileAPI)(nil).ListIntegrationsRequest), arg0)
}

// ListIntegrationsWithContext mocks base method
func (m *MockProfileAPI) ListIntegrationsWithContext(arg0 context.Context, arg1 *profile.ListIntegrationsInput, arg2 ...request.Option) (*profile.ListIntegrationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIntegrationsWithContext", varargs...)
	ret0, _ := ret[0].(*profile.ListIntegrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIntegrationsWithContext indicates an expected call of ListIntegrationsWithContext
func (mr *MockProfileAPIMockRecorder) ListIntegrationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntegrationsWithContext", reflect.TypeOf((*MockProfileAPI)(nil).ListIntegrationsWithContext), varargs...)
}

// ListProfileObjectTypeTemplates mocks base method
func (m *MockProfileAPI) ListProfileObjectTypeTemplates(arg0 *profile.ListProfileObjectTypeTemplatesInput) (*profile.ListProfileObjectTypeTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileObjectTypeTemplates", arg0)
	ret0, _ := ret[0].(*profile.ListProfileObjectTypeTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileObjectTypeTemplates indicates an expected call of ListProfileObjectTypeTemplates
func (mr *MockProfileAPIMockRecorder) ListProfileObjectTypeTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileObjectTypeTemplates", reflect.TypeOf((*MockProfileAPI)(nil).ListProfileObjectTypeTemplates), arg0)
}

// ListProfileObjectTypeTemplatesRequest mocks base method
func (m *MockProfileAPI) ListProfileObjectTypeTemplatesRequest(arg0 *profile.ListProfileObjectTypeTemplatesInput) (*request.Request, *profile.ListProfileObjectTypeTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileObjectTypeTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.ListProfileObjectTypeTemplatesOutput)
	return ret0, ret1
}

// ListProfileObjectTypeTemplatesRequest indicates an expected call of ListProfileObjectTypeTemplatesRequest
func (mr *MockProfileAPIMockRecorder) ListProfileObjectTypeTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileObjectTypeTemplatesRequest", reflect.TypeOf((*MockProfileAPI)(nil).ListProfileObjectTypeTemplatesRequest), arg0)
}

// ListProfileObjectTypeTemplatesWithContext mocks base method
func (m *MockProfileAPI) ListProfileObjectTypeTemplatesWithContext(arg0 context.Context, arg1 *profile.ListProfileObjectTypeTemplatesInput, arg2 ...request.Option) (*profile.ListProfileObjectTypeTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileObjectTypeTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*profile.ListProfileObjectTypeTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileObjectTypeTemplatesWithContext indicates an expected call of ListProfileObjectTypeTemplatesWithContext
func (mr *MockProfileAPIMockRecorder) ListProfileObjectTypeTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileObjectTypeTemplatesWithContext", reflect.TypeOf((*MockProfileAPI)(nil).ListProfileObjectTypeTemplatesWithContext), varargs...)
}

// ListProfileObjectTypes mocks base method
func (m *MockProfileAPI) ListProfileObjectTypes(arg0 *profile.ListProfileObjectTypesInput) (*profile.ListProfileObjectTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileObjectTypes", arg0)
	ret0, _ := ret[0].(*profile.ListProfileObjectTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileObjectTypes indicates an expected call of ListProfileObjectTypes
func (mr *MockProfileAPIMockRecorder) ListProfileObjectTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileObjectTypes", reflect.TypeOf((*MockProfileAPI)(nil).ListProfileObjectTypes), arg0)
}

// ListProfileObjectTypesRequest mocks base method
func (m *MockProfileAPI) ListProfileObjectTypesRequest(arg0 *profile.ListProfileObjectTypesInput) (*request.Request, *profile.ListProfileObjectTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileObjectTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.ListProfileObjectTypesOutput)
	return ret0, ret1
}

// ListProfileObjectTypesRequest indicates an expected call of ListProfileObjectTypesRequest
func (mr *MockProfileAPIMockRecorder) ListProfileObjectTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileObjectTypesRequest", reflect.TypeOf((*MockProfileAPI)(nil).ListProfileObjectTypesRequest), arg0)
}

// ListProfileObjectTypesWithContext mocks base method
func (m *MockProfileAPI) ListProfileObjectTypesWithContext(arg0 context.Context, arg1 *profile.ListProfileObjectTypesInput, arg2 ...request.Option) (*profile.ListProfileObjectTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileObjectTypesWithContext", varargs...)
	ret0, _ := ret[0].(*profile.ListProfileObjectTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileObjectTypesWithContext indicates an expected call of ListProfileObjectTypesWithContext
func (mr *MockProfileAPIMockRecorder) ListProfileObjectTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileObjectTypesWithContext", reflect.TypeOf((*MockProfileAPI)(nil).ListProfileObjectTypesWithContext), varargs...)
}

// ListProfileObjects mocks base method
func (m *MockProfileAPI) ListProfileObjects(arg0 *profile.ListProfileObjectsInput) (*profile.ListProfileObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileObjects", arg0)
	ret0, _ := ret[0].(*profile.ListProfileObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileObjects indicates an expected call of ListProfileObjects
func (mr *MockProfileAPIMockRecorder) ListProfileObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileObjects", reflect.TypeOf((*MockProfileAPI)(nil).ListProfileObjects), arg0)
}

// ListProfileObjectsRequest mocks base method
func (m *MockProfileAPI) ListProfileObjectsRequest(arg0 *profile.ListProfileObjectsInput) (*request.Request, *profile.ListProfileObjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileObjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.ListProfileObjectsOutput)
	return ret0, ret1
}

// ListProfileObjectsRequest indicates an expected call of ListProfileObjectsRequest
func (mr *MockProfileAPIMockRecorder) ListProfileObjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileObjectsRequest", reflect.TypeOf((*MockProfileAPI)(nil).ListProfileObjectsRequest), arg0)
}

// ListProfileObjectsWithContext mocks base method
func (m *MockProfileAPI) ListProfileObjectsWithContext(arg0 context.Context, arg1 *profile.ListProfileObjectsInput, arg2 ...request.Option) (*profile.ListProfileObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileObjectsWithContext", varargs...)
	ret0, _ := ret[0].(*profile.ListProfileObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileObjectsWithContext indicates an expected call of ListProfileObjectsWithContext
func (mr *MockProfileAPIMockRecorder) ListProfileObjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileObjectsWithContext", reflect.TypeOf((*MockProfileAPI)(nil).ListProfileObjectsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockProfileAPI) ListTagsForResource(arg0 *profile.ListTagsForResourceInput) (*profile.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*profile.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockProfileAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockProfileAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockProfileAPI) ListTagsForResourceRequest(arg0 *profile.ListTagsForResourceInput) (*request.Request, *profile.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockProfileAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockProfileAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockProfileAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *profile.ListTagsForResourceInput, arg2 ...request.Option) (*profile.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*profile.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockProfileAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockProfileAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutIntegration mocks base method
func (m *MockProfileAPI) PutIntegration(arg0 *profile.PutIntegrationInput) (*profile.PutIntegrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutIntegration", arg0)
	ret0, _ := ret[0].(*profile.PutIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutIntegration indicates an expected call of PutIntegration
func (mr *MockProfileAPIMockRecorder) PutIntegration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIntegration", reflect.TypeOf((*MockProfileAPI)(nil).PutIntegration), arg0)
}

// PutIntegrationRequest mocks base method
func (m *MockProfileAPI) PutIntegrationRequest(arg0 *profile.PutIntegrationInput) (*request.Request, *profile.PutIntegrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.PutIntegrationOutput)
	return ret0, ret1
}

// PutIntegrationRequest indicates an expected call of PutIntegrationRequest
func (mr *MockProfileAPIMockRecorder) PutIntegrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIntegrationRequest", reflect.TypeOf((*MockProfileAPI)(nil).PutIntegrationRequest), arg0)
}

// PutIntegrationWithContext mocks base method
func (m *MockProfileAPI) PutIntegrationWithContext(arg0 context.Context, arg1 *profile.PutIntegrationInput, arg2 ...request.Option) (*profile.PutIntegrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*profile.PutIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutIntegrationWithContext indicates an expected call of PutIntegrationWithContext
func (mr *MockProfileAPIMockRecorder) PutIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIntegrationWithContext", reflect.TypeOf((*MockProfileAPI)(nil).PutIntegrationWithContext), varargs...)
}

// PutProfileObject mocks base method
func (m *MockProfileAPI) PutProfileObject(arg0 *profile.PutProfileObjectInput) (*profile.PutProfileObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutProfileObject", arg0)
	ret0, _ := ret[0].(*profile.PutProfileObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutProfileObject indicates an expected call of PutProfileObject
func (mr *MockProfileAPIMockRecorder) PutProfileObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProfileObject", reflect.TypeOf((*MockProfileAPI)(nil).PutProfileObject), arg0)
}

// PutProfileObjectRequest mocks base method
func (m *MockProfileAPI) PutProfileObjectRequest(arg0 *profile.PutProfileObjectInput) (*request.Request, *profile.PutProfileObjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutProfileObjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.PutProfileObjectOutput)
	return ret0, ret1
}

// PutProfileObjectRequest indicates an expected call of PutProfileObjectRequest
func (mr *MockProfileAPIMockRecorder) PutProfileObjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProfileObjectRequest", reflect.TypeOf((*MockProfileAPI)(nil).PutProfileObjectRequest), arg0)
}

// PutProfileObjectType mocks base method
func (m *MockProfileAPI) PutProfileObjectType(arg0 *profile.PutProfileObjectTypeInput) (*profile.PutProfileObjectTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutProfileObjectType", arg0)
	ret0, _ := ret[0].(*profile.PutProfileObjectTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutProfileObjectType indicates an expected call of PutProfileObjectType
func (mr *MockProfileAPIMockRecorder) PutProfileObjectType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProfileObjectType", reflect.TypeOf((*MockProfileAPI)(nil).PutProfileObjectType), arg0)
}

// PutProfileObjectTypeRequest mocks base method
func (m *MockProfileAPI) PutProfileObjectTypeRequest(arg0 *profile.PutProfileObjectTypeInput) (*request.Request, *profile.PutProfileObjectTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutProfileObjectTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.PutProfileObjectTypeOutput)
	return ret0, ret1
}

// PutProfileObjectTypeRequest indicates an expected call of PutProfileObjectTypeRequest
func (mr *MockProfileAPIMockRecorder) PutProfileObjectTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProfileObjectTypeRequest", reflect.TypeOf((*MockProfileAPI)(nil).PutProfileObjectTypeRequest), arg0)
}

// PutProfileObjectTypeWithContext mocks base method
func (m *MockProfileAPI) PutProfileObjectTypeWithContext(arg0 context.Context, arg1 *profile.PutProfileObjectTypeInput, arg2 ...request.Option) (*profile.PutProfileObjectTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutProfileObjectTypeWithContext", varargs...)
	ret0, _ := ret[0].(*profile.PutProfileObjectTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutProfileObjectTypeWithContext indicates an expected call of PutProfileObjectTypeWithContext
func (mr *MockProfileAPIMockRecorder) PutProfileObjectTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProfileObjectTypeWithContext", reflect.TypeOf((*MockProfileAPI)(nil).PutProfileObjectTypeWithContext), varargs...)
}

// PutProfileObjectWithContext mocks base method
func (m *MockProfileAPI) PutProfileObjectWithContext(arg0 context.Context, arg1 *profile.PutProfileObjectInput, arg2 ...request.Option) (*profile.PutProfileObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutProfileObjectWithContext", varargs...)
	ret0, _ := ret[0].(*profile.PutProfileObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutProfileObjectWithContext indicates an expected call of PutProfileObjectWithContext
func (mr *MockProfileAPIMockRecorder) PutProfileObjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProfileObjectWithContext", reflect.TypeOf((*MockProfileAPI)(nil).PutProfileObjectWithContext), varargs...)
}

// SearchProfiles mocks base method
func (m *MockProfileAPI) SearchProfiles(arg0 *profile.SearchProfilesInput) (*profile.SearchProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProfiles", arg0)
	ret0, _ := ret[0].(*profile.SearchProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProfiles indicates an expected call of SearchProfiles
func (mr *MockProfileAPIMockRecorder) SearchProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProfiles", reflect.TypeOf((*MockProfileAPI)(nil).SearchProfiles), arg0)
}

// SearchProfilesRequest mocks base method
func (m *MockProfileAPI) SearchProfilesRequest(arg0 *profile.SearchProfilesInput) (*request.Request, *profile.SearchProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.SearchProfilesOutput)
	return ret0, ret1
}

// SearchProfilesRequest indicates an expected call of SearchProfilesRequest
func (mr *MockProfileAPIMockRecorder) SearchProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProfilesRequest", reflect.TypeOf((*MockProfileAPI)(nil).SearchProfilesRequest), arg0)
}

// SearchProfilesWithContext mocks base method
func (m *MockProfileAPI) SearchProfilesWithContext(arg0 context.Context, arg1 *profile.SearchProfilesInput, arg2 ...request.Option) (*profile.SearchProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*profile.SearchProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProfilesWithContext indicates an expected call of SearchProfilesWithContext
func (mr *MockProfileAPIMockRecorder) SearchProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProfilesWithContext", reflect.TypeOf((*MockProfileAPI)(nil).SearchProfilesWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockProfileAPI) TagResource(arg0 *profile.TagResourceInput) (*profile.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*profile.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockProfileAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockProfileAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockProfileAPI) TagResourceRequest(arg0 *profile.TagResourceInput) (*request.Request, *profile.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockProfileAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockProfileAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockProfileAPI) TagResourceWithContext(arg0 context.Context, arg1 *profile.TagResourceInput, arg2 ...request.Option) (*profile.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*profile.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockProfileAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockProfileAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockProfileAPI) UntagResource(arg0 *profile.UntagResourceInput) (*profile.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*profile.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockProfileAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockProfileAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockProfileAPI) UntagResourceRequest(arg0 *profile.UntagResourceInput) (*request.Request, *profile.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockProfileAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockProfileAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockProfileAPI) UntagResourceWithContext(arg0 context.Context, arg1 *profile.UntagResourceInput, arg2 ...request.Option) (*profile.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*profile.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockProfileAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockProfileAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDomain mocks base method
func (m *MockProfileAPI) UpdateDomain(arg0 *profile.UpdateDomainInput) (*profile.UpdateDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomain", arg0)
	ret0, _ := ret[0].(*profile.UpdateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomain indicates an expected call of UpdateDomain
func (mr *MockProfileAPIMockRecorder) UpdateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomain", reflect.TypeOf((*MockProfileAPI)(nil).UpdateDomain), arg0)
}

// UpdateDomainRequest mocks base method
func (m *MockProfileAPI) UpdateDomainRequest(arg0 *profile.UpdateDomainInput) (*request.Request, *profile.UpdateDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.UpdateDomainOutput)
	return ret0, ret1
}

// UpdateDomainRequest indicates an expected call of UpdateDomainRequest
func (mr *MockProfileAPIMockRecorder) UpdateDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainRequest", reflect.TypeOf((*MockProfileAPI)(nil).UpdateDomainRequest), arg0)
}

// UpdateDomainWithContext mocks base method
func (m *MockProfileAPI) UpdateDomainWithContext(arg0 context.Context, arg1 *profile.UpdateDomainInput, arg2 ...request.Option) (*profile.UpdateDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainWithContext", varargs...)
	ret0, _ := ret[0].(*profile.UpdateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainWithContext indicates an expected call of UpdateDomainWithContext
func (mr *MockProfileAPIMockRecorder) UpdateDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainWithContext", reflect.TypeOf((*MockProfileAPI)(nil).UpdateDomainWithContext), varargs...)
}

// UpdateProfile mocks base method
func (m *MockProfileAPI) UpdateProfile(arg0 *profile.UpdateProfileInput) (*profile.UpdateProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0)
	ret0, _ := ret[0].(*profile.UpdateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockProfileAPIMockRecorder) UpdateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileAPI)(nil).UpdateProfile), arg0)
}

// UpdateProfileRequest mocks base method
func (m *MockProfileAPI) UpdateProfileRequest(arg0 *profile.UpdateProfileInput) (*request.Request, *profile.UpdateProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*profile.UpdateProfileOutput)
	return ret0, ret1
}

// UpdateProfileRequest indicates an expected call of UpdateProfileRequest
func (mr *MockProfileAPIMockRecorder) UpdateProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileRequest", reflect.TypeOf((*MockProfileAPI)(nil).UpdateProfileRequest), arg0)
}

// UpdateProfileWithContext mocks base method
func (m *MockProfileAPI) UpdateProfileWithContext(arg0 context.Context, arg1 *profile.UpdateProfileInput, arg2 ...request.Option) (*profile.UpdateProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfileWithContext", varargs...)
	ret0, _ := ret[0].(*profile.UpdateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfileWithContext indicates an expected call of UpdateProfileWithContext
func (mr *MockProfileAPIMockRecorder) UpdateProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileWithContext", reflect.TypeOf((*MockProfileAPI)(nil).UpdateProfileWithContext), varargs...)
}
