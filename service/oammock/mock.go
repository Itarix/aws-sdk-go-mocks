// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/oam/oamiface (interfaces: OAMAPI)

// Package oammock is a generated GoMock package.
package oammock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	oam "github.com/aws/aws-sdk-go/service/oam"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOAMAPI is a mock of OAMAPI interface
type MockOAMAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOAMAPIMockRecorder
}

// MockOAMAPIMockRecorder is the mock recorder for MockOAMAPI
type MockOAMAPIMockRecorder struct {
	mock *MockOAMAPI
}

// NewMockOAMAPI creates a new mock instance
func NewMockOAMAPI(ctrl *gomock.Controller) *MockOAMAPI {
	mock := &MockOAMAPI{ctrl: ctrl}
	mock.recorder = &MockOAMAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAMAPI) EXPECT() *MockOAMAPIMockRecorder {
	return m.recorder
}

// CreateLink mocks base method
func (m *MockOAMAPI) CreateLink(arg0 *oam.CreateLinkInput) (*oam.CreateLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", arg0)
	ret0, _ := ret[0].(*oam.CreateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLink indicates an expected call of CreateLink
func (mr *MockOAMAPIMockRecorder) CreateLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockOAMAPI)(nil).CreateLink), arg0)
}

// CreateLinkRequest mocks base method
func (m *MockOAMAPI) CreateLinkRequest(arg0 *oam.CreateLinkInput) (*request.Request, *oam.CreateLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.CreateLinkOutput)
	return ret0, ret1
}

// CreateLinkRequest indicates an expected call of CreateLinkRequest
func (mr *MockOAMAPIMockRecorder) CreateLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkRequest", reflect.TypeOf((*MockOAMAPI)(nil).CreateLinkRequest), arg0)
}

// CreateLinkWithContext mocks base method
func (m *MockOAMAPI) CreateLinkWithContext(arg0 context.Context, arg1 *oam.CreateLinkInput, arg2 ...request.Option) (*oam.CreateLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLinkWithContext", varargs...)
	ret0, _ := ret[0].(*oam.CreateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLinkWithContext indicates an expected call of CreateLinkWithContext
func (mr *MockOAMAPIMockRecorder) CreateLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkWithContext", reflect.TypeOf((*MockOAMAPI)(nil).CreateLinkWithContext), varargs...)
}

// CreateSink mocks base method
func (m *MockOAMAPI) CreateSink(arg0 *oam.CreateSinkInput) (*oam.CreateSinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSink", arg0)
	ret0, _ := ret[0].(*oam.CreateSinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSink indicates an expected call of CreateSink
func (mr *MockOAMAPIMockRecorder) CreateSink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSink", reflect.TypeOf((*MockOAMAPI)(nil).CreateSink), arg0)
}

// CreateSinkRequest mocks base method
func (m *MockOAMAPI) CreateSinkRequest(arg0 *oam.CreateSinkInput) (*request.Request, *oam.CreateSinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.CreateSinkOutput)
	return ret0, ret1
}

// CreateSinkRequest indicates an expected call of CreateSinkRequest
func (mr *MockOAMAPIMockRecorder) CreateSinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSinkRequest", reflect.TypeOf((*MockOAMAPI)(nil).CreateSinkRequest), arg0)
}

// CreateSinkWithContext mocks base method
func (m *MockOAMAPI) CreateSinkWithContext(arg0 context.Context, arg1 *oam.CreateSinkInput, arg2 ...request.Option) (*oam.CreateSinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSinkWithContext", varargs...)
	ret0, _ := ret[0].(*oam.CreateSinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSinkWithContext indicates an expected call of CreateSinkWithContext
func (mr *MockOAMAPIMockRecorder) CreateSinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSinkWithContext", reflect.TypeOf((*MockOAMAPI)(nil).CreateSinkWithContext), varargs...)
}

// DeleteLink mocks base method
func (m *MockOAMAPI) DeleteLink(arg0 *oam.DeleteLinkInput) (*oam.DeleteLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLink", arg0)
	ret0, _ := ret[0].(*oam.DeleteLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLink indicates an expected call of DeleteLink
func (mr *MockOAMAPIMockRecorder) DeleteLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLink", reflect.TypeOf((*MockOAMAPI)(nil).DeleteLink), arg0)
}

// DeleteLinkRequest mocks base method
func (m *MockOAMAPI) DeleteLinkRequest(arg0 *oam.DeleteLinkInput) (*request.Request, *oam.DeleteLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.DeleteLinkOutput)
	return ret0, ret1
}

// DeleteLinkRequest indicates an expected call of DeleteLinkRequest
func (mr *MockOAMAPIMockRecorder) DeleteLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinkRequest", reflect.TypeOf((*MockOAMAPI)(nil).DeleteLinkRequest), arg0)
}

// DeleteLinkWithContext mocks base method
func (m *MockOAMAPI) DeleteLinkWithContext(arg0 context.Context, arg1 *oam.DeleteLinkInput, arg2 ...request.Option) (*oam.DeleteLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLinkWithContext", varargs...)
	ret0, _ := ret[0].(*oam.DeleteLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLinkWithContext indicates an expected call of DeleteLinkWithContext
func (mr *MockOAMAPIMockRecorder) DeleteLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinkWithContext", reflect.TypeOf((*MockOAMAPI)(nil).DeleteLinkWithContext), varargs...)
}

// DeleteSink mocks base method
func (m *MockOAMAPI) DeleteSink(arg0 *oam.DeleteSinkInput) (*oam.DeleteSinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSink", arg0)
	ret0, _ := ret[0].(*oam.DeleteSinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSink indicates an expected call of DeleteSink
func (mr *MockOAMAPIMockRecorder) DeleteSink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSink", reflect.TypeOf((*MockOAMAPI)(nil).DeleteSink), arg0)
}

// DeleteSinkRequest mocks base method
func (m *MockOAMAPI) DeleteSinkRequest(arg0 *oam.DeleteSinkInput) (*request.Request, *oam.DeleteSinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.DeleteSinkOutput)
	return ret0, ret1
}

// DeleteSinkRequest indicates an expected call of DeleteSinkRequest
func (mr *MockOAMAPIMockRecorder) DeleteSinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSinkRequest", reflect.TypeOf((*MockOAMAPI)(nil).DeleteSinkRequest), arg0)
}

// DeleteSinkWithContext mocks base method
func (m *MockOAMAPI) DeleteSinkWithContext(arg0 context.Context, arg1 *oam.DeleteSinkInput, arg2 ...request.Option) (*oam.DeleteSinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSinkWithContext", varargs...)
	ret0, _ := ret[0].(*oam.DeleteSinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSinkWithContext indicates an expected call of DeleteSinkWithContext
func (mr *MockOAMAPIMockRecorder) DeleteSinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSinkWithContext", reflect.TypeOf((*MockOAMAPI)(nil).DeleteSinkWithContext), varargs...)
}

// GetLink mocks base method
func (m *MockOAMAPI) GetLink(arg0 *oam.GetLinkInput) (*oam.GetLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLink", arg0)
	ret0, _ := ret[0].(*oam.GetLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLink indicates an expected call of GetLink
func (mr *MockOAMAPIMockRecorder) GetLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLink", reflect.TypeOf((*MockOAMAPI)(nil).GetLink), arg0)
}

// GetLinkRequest mocks base method
func (m *MockOAMAPI) GetLinkRequest(arg0 *oam.GetLinkInput) (*request.Request, *oam.GetLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.GetLinkOutput)
	return ret0, ret1
}

// GetLinkRequest indicates an expected call of GetLinkRequest
func (mr *MockOAMAPIMockRecorder) GetLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkRequest", reflect.TypeOf((*MockOAMAPI)(nil).GetLinkRequest), arg0)
}

// GetLinkWithContext mocks base method
func (m *MockOAMAPI) GetLinkWithContext(arg0 context.Context, arg1 *oam.GetLinkInput, arg2 ...request.Option) (*oam.GetLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinkWithContext", varargs...)
	ret0, _ := ret[0].(*oam.GetLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkWithContext indicates an expected call of GetLinkWithContext
func (mr *MockOAMAPIMockRecorder) GetLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkWithContext", reflect.TypeOf((*MockOAMAPI)(nil).GetLinkWithContext), varargs...)
}

// GetSink mocks base method
func (m *MockOAMAPI) GetSink(arg0 *oam.GetSinkInput) (*oam.GetSinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSink", arg0)
	ret0, _ := ret[0].(*oam.GetSinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSink indicates an expected call of GetSink
func (mr *MockOAMAPIMockRecorder) GetSink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSink", reflect.TypeOf((*MockOAMAPI)(nil).GetSink), arg0)
}

// GetSinkPolicy mocks base method
func (m *MockOAMAPI) GetSinkPolicy(arg0 *oam.GetSinkPolicyInput) (*oam.GetSinkPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSinkPolicy", arg0)
	ret0, _ := ret[0].(*oam.GetSinkPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSinkPolicy indicates an expected call of GetSinkPolicy
func (mr *MockOAMAPIMockRecorder) GetSinkPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSinkPolicy", reflect.TypeOf((*MockOAMAPI)(nil).GetSinkPolicy), arg0)
}

// GetSinkPolicyRequest mocks base method
func (m *MockOAMAPI) GetSinkPolicyRequest(arg0 *oam.GetSinkPolicyInput) (*request.Request, *oam.GetSinkPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSinkPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.GetSinkPolicyOutput)
	return ret0, ret1
}

// GetSinkPolicyRequest indicates an expected call of GetSinkPolicyRequest
func (mr *MockOAMAPIMockRecorder) GetSinkPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSinkPolicyRequest", reflect.TypeOf((*MockOAMAPI)(nil).GetSinkPolicyRequest), arg0)
}

// GetSinkPolicyWithContext mocks base method
func (m *MockOAMAPI) GetSinkPolicyWithContext(arg0 context.Context, arg1 *oam.GetSinkPolicyInput, arg2 ...request.Option) (*oam.GetSinkPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSinkPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*oam.GetSinkPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSinkPolicyWithContext indicates an expected call of GetSinkPolicyWithContext
func (mr *MockOAMAPIMockRecorder) GetSinkPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSinkPolicyWithContext", reflect.TypeOf((*MockOAMAPI)(nil).GetSinkPolicyWithContext), varargs...)
}

// GetSinkRequest mocks base method
func (m *MockOAMAPI) GetSinkRequest(arg0 *oam.GetSinkInput) (*request.Request, *oam.GetSinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.GetSinkOutput)
	return ret0, ret1
}

// GetSinkRequest indicates an expected call of GetSinkRequest
func (mr *MockOAMAPIMockRecorder) GetSinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSinkRequest", reflect.TypeOf((*MockOAMAPI)(nil).GetSinkRequest), arg0)
}

// GetSinkWithContext mocks base method
func (m *MockOAMAPI) GetSinkWithContext(arg0 context.Context, arg1 *oam.GetSinkInput, arg2 ...request.Option) (*oam.GetSinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSinkWithContext", varargs...)
	ret0, _ := ret[0].(*oam.GetSinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSinkWithContext indicates an expected call of GetSinkWithContext
func (mr *MockOAMAPIMockRecorder) GetSinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSinkWithContext", reflect.TypeOf((*MockOAMAPI)(nil).GetSinkWithContext), varargs...)
}

// ListAttachedLinks mocks base method
func (m *MockOAMAPI) ListAttachedLinks(arg0 *oam.ListAttachedLinksInput) (*oam.ListAttachedLinksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedLinks", arg0)
	ret0, _ := ret[0].(*oam.ListAttachedLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachedLinks indicates an expected call of ListAttachedLinks
func (mr *MockOAMAPIMockRecorder) ListAttachedLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedLinks", reflect.TypeOf((*MockOAMAPI)(nil).ListAttachedLinks), arg0)
}

// ListAttachedLinksPages mocks base method
func (m *MockOAMAPI) ListAttachedLinksPages(arg0 *oam.ListAttachedLinksInput, arg1 func(*oam.ListAttachedLinksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedLinksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAttachedLinksPages indicates an expected call of ListAttachedLinksPages
func (mr *MockOAMAPIMockRecorder) ListAttachedLinksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedLinksPages", reflect.TypeOf((*MockOAMAPI)(nil).ListAttachedLinksPages), arg0, arg1)
}

// ListAttachedLinksPagesWithContext mocks base method
func (m *MockOAMAPI) ListAttachedLinksPagesWithContext(arg0 context.Context, arg1 *oam.ListAttachedLinksInput, arg2 func(*oam.ListAttachedLinksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttachedLinksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAttachedLinksPagesWithContext indicates an expected call of ListAttachedLinksPagesWithContext
func (mr *MockOAMAPIMockRecorder) ListAttachedLinksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedLinksPagesWithContext", reflect.TypeOf((*MockOAMAPI)(nil).ListAttachedLinksPagesWithContext), varargs...)
}

// ListAttachedLinksRequest mocks base method
func (m *MockOAMAPI) ListAttachedLinksRequest(arg0 *oam.ListAttachedLinksInput) (*request.Request, *oam.ListAttachedLinksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedLinksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.ListAttachedLinksOutput)
	return ret0, ret1
}

// ListAttachedLinksRequest indicates an expected call of ListAttachedLinksRequest
func (mr *MockOAMAPIMockRecorder) ListAttachedLinksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedLinksRequest", reflect.TypeOf((*MockOAMAPI)(nil).ListAttachedLinksRequest), arg0)
}

// ListAttachedLinksWithContext mocks base method
func (m *MockOAMAPI) ListAttachedLinksWithContext(arg0 context.Context, arg1 *oam.ListAttachedLinksInput, arg2 ...request.Option) (*oam.ListAttachedLinksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttachedLinksWithContext", varargs...)
	ret0, _ := ret[0].(*oam.ListAttachedLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachedLinksWithContext indicates an expected call of ListAttachedLinksWithContext
func (mr *MockOAMAPIMockRecorder) ListAttachedLinksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedLinksWithContext", reflect.TypeOf((*MockOAMAPI)(nil).ListAttachedLinksWithContext), varargs...)
}

// ListLinks mocks base method
func (m *MockOAMAPI) ListLinks(arg0 *oam.ListLinksInput) (*oam.ListLinksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinks", arg0)
	ret0, _ := ret[0].(*oam.ListLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinks indicates an expected call of ListLinks
func (mr *MockOAMAPIMockRecorder) ListLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinks", reflect.TypeOf((*MockOAMAPI)(nil).ListLinks), arg0)
}

// ListLinksPages mocks base method
func (m *MockOAMAPI) ListLinksPages(arg0 *oam.ListLinksInput, arg1 func(*oam.ListLinksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLinksPages indicates an expected call of ListLinksPages
func (mr *MockOAMAPIMockRecorder) ListLinksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinksPages", reflect.TypeOf((*MockOAMAPI)(nil).ListLinksPages), arg0, arg1)
}

// ListLinksPagesWithContext mocks base method
func (m *MockOAMAPI) ListLinksPagesWithContext(arg0 context.Context, arg1 *oam.ListLinksInput, arg2 func(*oam.ListLinksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLinksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLinksPagesWithContext indicates an expected call of ListLinksPagesWithContext
func (mr *MockOAMAPIMockRecorder) ListLinksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinksPagesWithContext", reflect.TypeOf((*MockOAMAPI)(nil).ListLinksPagesWithContext), varargs...)
}

// ListLinksRequest mocks base method
func (m *MockOAMAPI) ListLinksRequest(arg0 *oam.ListLinksInput) (*request.Request, *oam.ListLinksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.ListLinksOutput)
	return ret0, ret1
}

// ListLinksRequest indicates an expected call of ListLinksRequest
func (mr *MockOAMAPIMockRecorder) ListLinksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinksRequest", reflect.TypeOf((*MockOAMAPI)(nil).ListLinksRequest), arg0)
}

// ListLinksWithContext mocks base method
func (m *MockOAMAPI) ListLinksWithContext(arg0 context.Context, arg1 *oam.ListLinksInput, arg2 ...request.Option) (*oam.ListLinksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLinksWithContext", varargs...)
	ret0, _ := ret[0].(*oam.ListLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinksWithContext indicates an expected call of ListLinksWithContext
func (mr *MockOAMAPIMockRecorder) ListLinksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinksWithContext", reflect.TypeOf((*MockOAMAPI)(nil).ListLinksWithContext), varargs...)
}

// ListSinks mocks base method
func (m *MockOAMAPI) ListSinks(arg0 *oam.ListSinksInput) (*oam.ListSinksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSinks", arg0)
	ret0, _ := ret[0].(*oam.ListSinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSinks indicates an expected call of ListSinks
func (mr *MockOAMAPIMockRecorder) ListSinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSinks", reflect.TypeOf((*MockOAMAPI)(nil).ListSinks), arg0)
}

// ListSinksPages mocks base method
func (m *MockOAMAPI) ListSinksPages(arg0 *oam.ListSinksInput, arg1 func(*oam.ListSinksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSinksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSinksPages indicates an expected call of ListSinksPages
func (mr *MockOAMAPIMockRecorder) ListSinksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSinksPages", reflect.TypeOf((*MockOAMAPI)(nil).ListSinksPages), arg0, arg1)
}

// ListSinksPagesWithContext mocks base method
func (m *MockOAMAPI) ListSinksPagesWithContext(arg0 context.Context, arg1 *oam.ListSinksInput, arg2 func(*oam.ListSinksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSinksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSinksPagesWithContext indicates an expected call of ListSinksPagesWithContext
func (mr *MockOAMAPIMockRecorder) ListSinksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSinksPagesWithContext", reflect.TypeOf((*MockOAMAPI)(nil).ListSinksPagesWithContext), varargs...)
}

// ListSinksRequest mocks base method
func (m *MockOAMAPI) ListSinksRequest(arg0 *oam.ListSinksInput) (*request.Request, *oam.ListSinksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSinksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.ListSinksOutput)
	return ret0, ret1
}

// ListSinksRequest indicates an expected call of ListSinksRequest
func (mr *MockOAMAPIMockRecorder) ListSinksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSinksRequest", reflect.TypeOf((*MockOAMAPI)(nil).ListSinksRequest), arg0)
}

// ListSinksWithContext mocks base method
func (m *MockOAMAPI) ListSinksWithContext(arg0 context.Context, arg1 *oam.ListSinksInput, arg2 ...request.Option) (*oam.ListSinksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSinksWithContext", varargs...)
	ret0, _ := ret[0].(*oam.ListSinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSinksWithContext indicates an expected call of ListSinksWithContext
func (mr *MockOAMAPIMockRecorder) ListSinksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSinksWithContext", reflect.TypeOf((*MockOAMAPI)(nil).ListSinksWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockOAMAPI) ListTagsForResource(arg0 *oam.ListTagsForResourceInput) (*oam.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*oam.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockOAMAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockOAMAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockOAMAPI) ListTagsForResourceRequest(arg0 *oam.ListTagsForResourceInput) (*request.Request, *oam.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockOAMAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockOAMAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockOAMAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *oam.ListTagsForResourceInput, arg2 ...request.Option) (*oam.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*oam.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockOAMAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockOAMAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutSinkPolicy mocks base method
func (m *MockOAMAPI) PutSinkPolicy(arg0 *oam.PutSinkPolicyInput) (*oam.PutSinkPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSinkPolicy", arg0)
	ret0, _ := ret[0].(*oam.PutSinkPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSinkPolicy indicates an expected call of PutSinkPolicy
func (mr *MockOAMAPIMockRecorder) PutSinkPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSinkPolicy", reflect.TypeOf((*MockOAMAPI)(nil).PutSinkPolicy), arg0)
}

// PutSinkPolicyRequest mocks base method
func (m *MockOAMAPI) PutSinkPolicyRequest(arg0 *oam.PutSinkPolicyInput) (*request.Request, *oam.PutSinkPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSinkPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.PutSinkPolicyOutput)
	return ret0, ret1
}

// PutSinkPolicyRequest indicates an expected call of PutSinkPolicyRequest
func (mr *MockOAMAPIMockRecorder) PutSinkPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSinkPolicyRequest", reflect.TypeOf((*MockOAMAPI)(nil).PutSinkPolicyRequest), arg0)
}

// PutSinkPolicyWithContext mocks base method
func (m *MockOAMAPI) PutSinkPolicyWithContext(arg0 context.Context, arg1 *oam.PutSinkPolicyInput, arg2 ...request.Option) (*oam.PutSinkPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSinkPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*oam.PutSinkPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSinkPolicyWithContext indicates an expected call of PutSinkPolicyWithContext
func (mr *MockOAMAPIMockRecorder) PutSinkPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSinkPolicyWithContext", reflect.TypeOf((*MockOAMAPI)(nil).PutSinkPolicyWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockOAMAPI) TagResource(arg0 *oam.TagResourceInput) (*oam.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*oam.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockOAMAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockOAMAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockOAMAPI) TagResourceRequest(arg0 *oam.TagResourceInput) (*request.Request, *oam.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockOAMAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockOAMAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockOAMAPI) TagResourceWithContext(arg0 context.Context, arg1 *oam.TagResourceInput, arg2 ...request.Option) (*oam.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*oam.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockOAMAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockOAMAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockOAMAPI) UntagResource(arg0 *oam.UntagResourceInput) (*oam.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*oam.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockOAMAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockOAMAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockOAMAPI) UntagResourceRequest(arg0 *oam.UntagResourceInput) (*request.Request, *oam.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockOAMAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockOAMAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockOAMAPI) UntagResourceWithContext(arg0 context.Context, arg1 *oam.UntagResourceInput, arg2 ...request.Option) (*oam.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*oam.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockOAMAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockOAMAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateLink mocks base method
func (m *MockOAMAPI) UpdateLink(arg0 *oam.UpdateLinkInput) (*oam.UpdateLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLink", arg0)
	ret0, _ := ret[0].(*oam.UpdateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLink indicates an expected call of UpdateLink
func (mr *MockOAMAPIMockRecorder) UpdateLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLink", reflect.TypeOf((*MockOAMAPI)(nil).UpdateLink), arg0)
}

// UpdateLinkRequest mocks base method
func (m *MockOAMAPI) UpdateLinkRequest(arg0 *oam.UpdateLinkInput) (*request.Request, *oam.UpdateLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*oam.UpdateLinkOutput)
	return ret0, ret1
}

// UpdateLinkRequest indicates an expected call of UpdateLinkRequest
func (mr *MockOAMAPIMockRecorder) UpdateLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkRequest", reflect.TypeOf((*MockOAMAPI)(nil).UpdateLinkRequest), arg0)
}

// UpdateLinkWithContext mocks base method
func (m *MockOAMAPI) UpdateLinkWithContext(arg0 context.Context, arg1 *oam.UpdateLinkInput, arg2 ...request.Option) (*oam.UpdateLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLinkWithContext", varargs...)
	ret0, _ := ret[0].(*oam.UpdateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLinkWithContext indicates an expected call of UpdateLinkWithContext
func (mr *MockOAMAPIMockRecorder) UpdateLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkWithContext", reflect.TypeOf((*MockOAMAPI)(nil).UpdateLinkWithContext), varargs...)
}
