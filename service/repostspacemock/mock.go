// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/repostspace/repostspaceiface (interfaces: RepostspaceAPI)

// Package repostspacemock is a generated GoMock package.
package repostspacemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	repostspace "github.com/aws/aws-sdk-go/service/repostspace"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepostspaceAPI is a mock of RepostspaceAPI interface
type MockRepostspaceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRepostspaceAPIMockRecorder
}

// MockRepostspaceAPIMockRecorder is the mock recorder for MockRepostspaceAPI
type MockRepostspaceAPIMockRecorder struct {
	mock *MockRepostspaceAPI
}

// NewMockRepostspaceAPI creates a new mock instance
func NewMockRepostspaceAPI(ctrl *gomock.Controller) *MockRepostspaceAPI {
	mock := &MockRepostspaceAPI{ctrl: ctrl}
	mock.recorder = &MockRepostspaceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepostspaceAPI) EXPECT() *MockRepostspaceAPIMockRecorder {
	return m.recorder
}

// CreateSpace mocks base method
func (m *MockRepostspaceAPI) CreateSpace(arg0 *repostspace.CreateSpaceInput) (*repostspace.CreateSpaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpace", arg0)
	ret0, _ := ret[0].(*repostspace.CreateSpaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpace indicates an expected call of CreateSpace
func (mr *MockRepostspaceAPIMockRecorder) CreateSpace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpace", reflect.TypeOf((*MockRepostspaceAPI)(nil).CreateSpace), arg0)
}

// CreateSpaceRequest mocks base method
func (m *MockRepostspaceAPI) CreateSpaceRequest(arg0 *repostspace.CreateSpaceInput) (*request.Request, *repostspace.CreateSpaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.CreateSpaceOutput)
	return ret0, ret1
}

// CreateSpaceRequest indicates an expected call of CreateSpaceRequest
func (mr *MockRepostspaceAPIMockRecorder) CreateSpaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpaceRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).CreateSpaceRequest), arg0)
}

// CreateSpaceWithContext mocks base method
func (m *MockRepostspaceAPI) CreateSpaceWithContext(arg0 context.Context, arg1 *repostspace.CreateSpaceInput, arg2 ...request.Option) (*repostspace.CreateSpaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSpaceWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.CreateSpaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpaceWithContext indicates an expected call of CreateSpaceWithContext
func (mr *MockRepostspaceAPIMockRecorder) CreateSpaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpaceWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).CreateSpaceWithContext), varargs...)
}

// DeleteSpace mocks base method
func (m *MockRepostspaceAPI) DeleteSpace(arg0 *repostspace.DeleteSpaceInput) (*repostspace.DeleteSpaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpace", arg0)
	ret0, _ := ret[0].(*repostspace.DeleteSpaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSpace indicates an expected call of DeleteSpace
func (mr *MockRepostspaceAPIMockRecorder) DeleteSpace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpace", reflect.TypeOf((*MockRepostspaceAPI)(nil).DeleteSpace), arg0)
}

// DeleteSpaceRequest mocks base method
func (m *MockRepostspaceAPI) DeleteSpaceRequest(arg0 *repostspace.DeleteSpaceInput) (*request.Request, *repostspace.DeleteSpaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.DeleteSpaceOutput)
	return ret0, ret1
}

// DeleteSpaceRequest indicates an expected call of DeleteSpaceRequest
func (mr *MockRepostspaceAPIMockRecorder) DeleteSpaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpaceRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).DeleteSpaceRequest), arg0)
}

// DeleteSpaceWithContext mocks base method
func (m *MockRepostspaceAPI) DeleteSpaceWithContext(arg0 context.Context, arg1 *repostspace.DeleteSpaceInput, arg2 ...request.Option) (*repostspace.DeleteSpaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSpaceWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.DeleteSpaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSpaceWithContext indicates an expected call of DeleteSpaceWithContext
func (mr *MockRepostspaceAPIMockRecorder) DeleteSpaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpaceWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).DeleteSpaceWithContext), varargs...)
}

// DeregisterAdmin mocks base method
func (m *MockRepostspaceAPI) DeregisterAdmin(arg0 *repostspace.DeregisterAdminInput) (*repostspace.DeregisterAdminOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterAdmin", arg0)
	ret0, _ := ret[0].(*repostspace.DeregisterAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterAdmin indicates an expected call of DeregisterAdmin
func (mr *MockRepostspaceAPIMockRecorder) DeregisterAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAdmin", reflect.TypeOf((*MockRepostspaceAPI)(nil).DeregisterAdmin), arg0)
}

// DeregisterAdminRequest mocks base method
func (m *MockRepostspaceAPI) DeregisterAdminRequest(arg0 *repostspace.DeregisterAdminInput) (*request.Request, *repostspace.DeregisterAdminOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterAdminRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.DeregisterAdminOutput)
	return ret0, ret1
}

// DeregisterAdminRequest indicates an expected call of DeregisterAdminRequest
func (mr *MockRepostspaceAPIMockRecorder) DeregisterAdminRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAdminRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).DeregisterAdminRequest), arg0)
}

// DeregisterAdminWithContext mocks base method
func (m *MockRepostspaceAPI) DeregisterAdminWithContext(arg0 context.Context, arg1 *repostspace.DeregisterAdminInput, arg2 ...request.Option) (*repostspace.DeregisterAdminOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterAdminWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.DeregisterAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterAdminWithContext indicates an expected call of DeregisterAdminWithContext
func (mr *MockRepostspaceAPIMockRecorder) DeregisterAdminWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAdminWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).DeregisterAdminWithContext), varargs...)
}

// GetSpace mocks base method
func (m *MockRepostspaceAPI) GetSpace(arg0 *repostspace.GetSpaceInput) (*repostspace.GetSpaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpace", arg0)
	ret0, _ := ret[0].(*repostspace.GetSpaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpace indicates an expected call of GetSpace
func (mr *MockRepostspaceAPIMockRecorder) GetSpace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpace", reflect.TypeOf((*MockRepostspaceAPI)(nil).GetSpace), arg0)
}

// GetSpaceRequest mocks base method
func (m *MockRepostspaceAPI) GetSpaceRequest(arg0 *repostspace.GetSpaceInput) (*request.Request, *repostspace.GetSpaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.GetSpaceOutput)
	return ret0, ret1
}

// GetSpaceRequest indicates an expected call of GetSpaceRequest
func (mr *MockRepostspaceAPIMockRecorder) GetSpaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).GetSpaceRequest), arg0)
}

// GetSpaceWithContext mocks base method
func (m *MockRepostspaceAPI) GetSpaceWithContext(arg0 context.Context, arg1 *repostspace.GetSpaceInput, arg2 ...request.Option) (*repostspace.GetSpaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpaceWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.GetSpaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceWithContext indicates an expected call of GetSpaceWithContext
func (mr *MockRepostspaceAPIMockRecorder) GetSpaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).GetSpaceWithContext), varargs...)
}

// ListSpaces mocks base method
func (m *MockRepostspaceAPI) ListSpaces(arg0 *repostspace.ListSpacesInput) (*repostspace.ListSpacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpaces", arg0)
	ret0, _ := ret[0].(*repostspace.ListSpacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpaces indicates an expected call of ListSpaces
func (mr *MockRepostspaceAPIMockRecorder) ListSpaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpaces", reflect.TypeOf((*MockRepostspaceAPI)(nil).ListSpaces), arg0)
}

// ListSpacesPages mocks base method
func (m *MockRepostspaceAPI) ListSpacesPages(arg0 *repostspace.ListSpacesInput, arg1 func(*repostspace.ListSpacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSpacesPages indicates an expected call of ListSpacesPages
func (mr *MockRepostspaceAPIMockRecorder) ListSpacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpacesPages", reflect.TypeOf((*MockRepostspaceAPI)(nil).ListSpacesPages), arg0, arg1)
}

// ListSpacesPagesWithContext mocks base method
func (m *MockRepostspaceAPI) ListSpacesPagesWithContext(arg0 context.Context, arg1 *repostspace.ListSpacesInput, arg2 func(*repostspace.ListSpacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSpacesPagesWithContext indicates an expected call of ListSpacesPagesWithContext
func (mr *MockRepostspaceAPIMockRecorder) ListSpacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpacesPagesWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).ListSpacesPagesWithContext), varargs...)
}

// ListSpacesRequest mocks base method
func (m *MockRepostspaceAPI) ListSpacesRequest(arg0 *repostspace.ListSpacesInput) (*request.Request, *repostspace.ListSpacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.ListSpacesOutput)
	return ret0, ret1
}

// ListSpacesRequest indicates an expected call of ListSpacesRequest
func (mr *MockRepostspaceAPIMockRecorder) ListSpacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpacesRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).ListSpacesRequest), arg0)
}

// ListSpacesWithContext mocks base method
func (m *MockRepostspaceAPI) ListSpacesWithContext(arg0 context.Context, arg1 *repostspace.ListSpacesInput, arg2 ...request.Option) (*repostspace.ListSpacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpacesWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.ListSpacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpacesWithContext indicates an expected call of ListSpacesWithContext
func (mr *MockRepostspaceAPIMockRecorder) ListSpacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpacesWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).ListSpacesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockRepostspaceAPI) ListTagsForResource(arg0 *repostspace.ListTagsForResourceInput) (*repostspace.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*repostspace.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockRepostspaceAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRepostspaceAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockRepostspaceAPI) ListTagsForResourceRequest(arg0 *repostspace.ListTagsForResourceInput) (*request.Request, *repostspace.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockRepostspaceAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockRepostspaceAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *repostspace.ListTagsForResourceInput, arg2 ...request.Option) (*repostspace.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockRepostspaceAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RegisterAdmin mocks base method
func (m *MockRepostspaceAPI) RegisterAdmin(arg0 *repostspace.RegisterAdminInput) (*repostspace.RegisterAdminOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAdmin", arg0)
	ret0, _ := ret[0].(*repostspace.RegisterAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAdmin indicates an expected call of RegisterAdmin
func (mr *MockRepostspaceAPIMockRecorder) RegisterAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAdmin", reflect.TypeOf((*MockRepostspaceAPI)(nil).RegisterAdmin), arg0)
}

// RegisterAdminRequest mocks base method
func (m *MockRepostspaceAPI) RegisterAdminRequest(arg0 *repostspace.RegisterAdminInput) (*request.Request, *repostspace.RegisterAdminOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAdminRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.RegisterAdminOutput)
	return ret0, ret1
}

// RegisterAdminRequest indicates an expected call of RegisterAdminRequest
func (mr *MockRepostspaceAPIMockRecorder) RegisterAdminRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAdminRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).RegisterAdminRequest), arg0)
}

// RegisterAdminWithContext mocks base method
func (m *MockRepostspaceAPI) RegisterAdminWithContext(arg0 context.Context, arg1 *repostspace.RegisterAdminInput, arg2 ...request.Option) (*repostspace.RegisterAdminOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterAdminWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.RegisterAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAdminWithContext indicates an expected call of RegisterAdminWithContext
func (mr *MockRepostspaceAPIMockRecorder) RegisterAdminWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAdminWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).RegisterAdminWithContext), varargs...)
}

// SendInvites mocks base method
func (m *MockRepostspaceAPI) SendInvites(arg0 *repostspace.SendInvitesInput) (*repostspace.SendInvitesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInvites", arg0)
	ret0, _ := ret[0].(*repostspace.SendInvitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInvites indicates an expected call of SendInvites
func (mr *MockRepostspaceAPIMockRecorder) SendInvites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInvites", reflect.TypeOf((*MockRepostspaceAPI)(nil).SendInvites), arg0)
}

// SendInvitesRequest mocks base method
func (m *MockRepostspaceAPI) SendInvitesRequest(arg0 *repostspace.SendInvitesInput) (*request.Request, *repostspace.SendInvitesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInvitesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.SendInvitesOutput)
	return ret0, ret1
}

// SendInvitesRequest indicates an expected call of SendInvitesRequest
func (mr *MockRepostspaceAPIMockRecorder) SendInvitesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInvitesRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).SendInvitesRequest), arg0)
}

// SendInvitesWithContext mocks base method
func (m *MockRepostspaceAPI) SendInvitesWithContext(arg0 context.Context, arg1 *repostspace.SendInvitesInput, arg2 ...request.Option) (*repostspace.SendInvitesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendInvitesWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.SendInvitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInvitesWithContext indicates an expected call of SendInvitesWithContext
func (mr *MockRepostspaceAPIMockRecorder) SendInvitesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInvitesWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).SendInvitesWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockRepostspaceAPI) TagResource(arg0 *repostspace.TagResourceInput) (*repostspace.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*repostspace.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockRepostspaceAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRepostspaceAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockRepostspaceAPI) TagResourceRequest(arg0 *repostspace.TagResourceInput) (*request.Request, *repostspace.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockRepostspaceAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockRepostspaceAPI) TagResourceWithContext(arg0 context.Context, arg1 *repostspace.TagResourceInput, arg2 ...request.Option) (*repostspace.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockRepostspaceAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockRepostspaceAPI) UntagResource(arg0 *repostspace.UntagResourceInput) (*repostspace.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*repostspace.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockRepostspaceAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRepostspaceAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockRepostspaceAPI) UntagResourceRequest(arg0 *repostspace.UntagResourceInput) (*request.Request, *repostspace.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockRepostspaceAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockRepostspaceAPI) UntagResourceWithContext(arg0 context.Context, arg1 *repostspace.UntagResourceInput, arg2 ...request.Option) (*repostspace.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockRepostspaceAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateSpace mocks base method
func (m *MockRepostspaceAPI) UpdateSpace(arg0 *repostspace.UpdateSpaceInput) (*repostspace.UpdateSpaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpace", arg0)
	ret0, _ := ret[0].(*repostspace.UpdateSpaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSpace indicates an expected call of UpdateSpace
func (mr *MockRepostspaceAPIMockRecorder) UpdateSpace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpace", reflect.TypeOf((*MockRepostspaceAPI)(nil).UpdateSpace), arg0)
}

// UpdateSpaceRequest mocks base method
func (m *MockRepostspaceAPI) UpdateSpaceRequest(arg0 *repostspace.UpdateSpaceInput) (*request.Request, *repostspace.UpdateSpaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*repostspace.UpdateSpaceOutput)
	return ret0, ret1
}

// UpdateSpaceRequest indicates an expected call of UpdateSpaceRequest
func (mr *MockRepostspaceAPIMockRecorder) UpdateSpaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpaceRequest", reflect.TypeOf((*MockRepostspaceAPI)(nil).UpdateSpaceRequest), arg0)
}

// UpdateSpaceWithContext mocks base method
func (m *MockRepostspaceAPI) UpdateSpaceWithContext(arg0 context.Context, arg1 *repostspace.UpdateSpaceInput, arg2 ...request.Option) (*repostspace.UpdateSpaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpaceWithContext", varargs...)
	ret0, _ := ret[0].(*repostspace.UpdateSpaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSpaceWithContext indicates an expected call of UpdateSpaceWithContext
func (mr *MockRepostspaceAPIMockRecorder) UpdateSpaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpaceWithContext", reflect.TypeOf((*MockRepostspaceAPI)(nil).UpdateSpaceWithContext), varargs...)
}
