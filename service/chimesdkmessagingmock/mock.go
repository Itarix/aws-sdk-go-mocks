// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/chimesdkmessaging/chimesdkmessagingiface (interfaces: ChimeSDKMessagingAPI)

// Package chimesdkmessagingmock is a generated GoMock package.
package chimesdkmessagingmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	chimesdkmessaging "github.com/aws/aws-sdk-go/service/chimesdkmessaging"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChimeSDKMessagingAPI is a mock of ChimeSDKMessagingAPI interface
type MockChimeSDKMessagingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChimeSDKMessagingAPIMockRecorder
}

// MockChimeSDKMessagingAPIMockRecorder is the mock recorder for MockChimeSDKMessagingAPI
type MockChimeSDKMessagingAPIMockRecorder struct {
	mock *MockChimeSDKMessagingAPI
}

// NewMockChimeSDKMessagingAPI creates a new mock instance
func NewMockChimeSDKMessagingAPI(ctrl *gomock.Controller) *MockChimeSDKMessagingAPI {
	mock := &MockChimeSDKMessagingAPI{ctrl: ctrl}
	mock.recorder = &MockChimeSDKMessagingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChimeSDKMessagingAPI) EXPECT() *MockChimeSDKMessagingAPIMockRecorder {
	return m.recorder
}

// BatchCreateChannelMembership mocks base method
func (m *MockChimeSDKMessagingAPI) BatchCreateChannelMembership(arg0 *chimesdkmessaging.BatchCreateChannelMembershipInput) (*chimesdkmessaging.BatchCreateChannelMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateChannelMembership", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.BatchCreateChannelMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateChannelMembership indicates an expected call of BatchCreateChannelMembership
func (mr *MockChimeSDKMessagingAPIMockRecorder) BatchCreateChannelMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateChannelMembership", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).BatchCreateChannelMembership), arg0)
}

// BatchCreateChannelMembershipRequest mocks base method
func (m *MockChimeSDKMessagingAPI) BatchCreateChannelMembershipRequest(arg0 *chimesdkmessaging.BatchCreateChannelMembershipInput) (*request.Request, *chimesdkmessaging.BatchCreateChannelMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateChannelMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.BatchCreateChannelMembershipOutput)
	return ret0, ret1
}

// BatchCreateChannelMembershipRequest indicates an expected call of BatchCreateChannelMembershipRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) BatchCreateChannelMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateChannelMembershipRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).BatchCreateChannelMembershipRequest), arg0)
}

// BatchCreateChannelMembershipWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) BatchCreateChannelMembershipWithContext(arg0 context.Context, arg1 *chimesdkmessaging.BatchCreateChannelMembershipInput, arg2 ...request.Option) (*chimesdkmessaging.BatchCreateChannelMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateChannelMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.BatchCreateChannelMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateChannelMembershipWithContext indicates an expected call of BatchCreateChannelMembershipWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) BatchCreateChannelMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateChannelMembershipWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).BatchCreateChannelMembershipWithContext), varargs...)
}

// CreateChannel mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannel(arg0 *chimesdkmessaging.CreateChannelInput) (*chimesdkmessaging.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannel), arg0)
}

// CreateChannelBan mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelBan(arg0 *chimesdkmessaging.CreateChannelBanInput) (*chimesdkmessaging.CreateChannelBanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelBan", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.CreateChannelBanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelBan indicates an expected call of CreateChannelBan
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelBan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelBan", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelBan), arg0)
}

// CreateChannelBanRequest mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelBanRequest(arg0 *chimesdkmessaging.CreateChannelBanInput) (*request.Request, *chimesdkmessaging.CreateChannelBanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelBanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.CreateChannelBanOutput)
	return ret0, ret1
}

// CreateChannelBanRequest indicates an expected call of CreateChannelBanRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelBanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelBanRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelBanRequest), arg0)
}

// CreateChannelBanWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelBanWithContext(arg0 context.Context, arg1 *chimesdkmessaging.CreateChannelBanInput, arg2 ...request.Option) (*chimesdkmessaging.CreateChannelBanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelBanWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.CreateChannelBanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelBanWithContext indicates an expected call of CreateChannelBanWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelBanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelBanWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelBanWithContext), varargs...)
}

// CreateChannelMembership mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelMembership(arg0 *chimesdkmessaging.CreateChannelMembershipInput) (*chimesdkmessaging.CreateChannelMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelMembership", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.CreateChannelMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelMembership indicates an expected call of CreateChannelMembership
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelMembership", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelMembership), arg0)
}

// CreateChannelMembershipRequest mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelMembershipRequest(arg0 *chimesdkmessaging.CreateChannelMembershipInput) (*request.Request, *chimesdkmessaging.CreateChannelMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.CreateChannelMembershipOutput)
	return ret0, ret1
}

// CreateChannelMembershipRequest indicates an expected call of CreateChannelMembershipRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelMembershipRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelMembershipRequest), arg0)
}

// CreateChannelMembershipWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelMembershipWithContext(arg0 context.Context, arg1 *chimesdkmessaging.CreateChannelMembershipInput, arg2 ...request.Option) (*chimesdkmessaging.CreateChannelMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.CreateChannelMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelMembershipWithContext indicates an expected call of CreateChannelMembershipWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelMembershipWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelMembershipWithContext), varargs...)
}

// CreateChannelModerator mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelModerator(arg0 *chimesdkmessaging.CreateChannelModeratorInput) (*chimesdkmessaging.CreateChannelModeratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelModerator", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.CreateChannelModeratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelModerator indicates an expected call of CreateChannelModerator
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelModerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelModerator", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelModerator), arg0)
}

// CreateChannelModeratorRequest mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelModeratorRequest(arg0 *chimesdkmessaging.CreateChannelModeratorInput) (*request.Request, *chimesdkmessaging.CreateChannelModeratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelModeratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.CreateChannelModeratorOutput)
	return ret0, ret1
}

// CreateChannelModeratorRequest indicates an expected call of CreateChannelModeratorRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelModeratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelModeratorRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelModeratorRequest), arg0)
}

// CreateChannelModeratorWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelModeratorWithContext(arg0 context.Context, arg1 *chimesdkmessaging.CreateChannelModeratorInput, arg2 ...request.Option) (*chimesdkmessaging.CreateChannelModeratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelModeratorWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.CreateChannelModeratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelModeratorWithContext indicates an expected call of CreateChannelModeratorWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelModeratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelModeratorWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelModeratorWithContext), varargs...)
}

// CreateChannelRequest mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelRequest(arg0 *chimesdkmessaging.CreateChannelInput) (*request.Request, *chimesdkmessaging.CreateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.CreateChannelOutput)
	return ret0, ret1
}

// CreateChannelRequest indicates an expected call of CreateChannelRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelRequest), arg0)
}

// CreateChannelWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) CreateChannelWithContext(arg0 context.Context, arg1 *chimesdkmessaging.CreateChannelInput, arg2 ...request.Option) (*chimesdkmessaging.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelWithContext indicates an expected call of CreateChannelWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) CreateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).CreateChannelWithContext), varargs...)
}

// DeleteChannel mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannel(arg0 *chimesdkmessaging.DeleteChannelInput) (*chimesdkmessaging.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannel), arg0)
}

// DeleteChannelBan mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelBan(arg0 *chimesdkmessaging.DeleteChannelBanInput) (*chimesdkmessaging.DeleteChannelBanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelBan", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DeleteChannelBanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelBan indicates an expected call of DeleteChannelBan
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelBan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelBan", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelBan), arg0)
}

// DeleteChannelBanRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelBanRequest(arg0 *chimesdkmessaging.DeleteChannelBanInput) (*request.Request, *chimesdkmessaging.DeleteChannelBanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelBanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DeleteChannelBanOutput)
	return ret0, ret1
}

// DeleteChannelBanRequest indicates an expected call of DeleteChannelBanRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelBanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelBanRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelBanRequest), arg0)
}

// DeleteChannelBanWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelBanWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DeleteChannelBanInput, arg2 ...request.Option) (*chimesdkmessaging.DeleteChannelBanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelBanWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DeleteChannelBanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelBanWithContext indicates an expected call of DeleteChannelBanWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelBanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelBanWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelBanWithContext), varargs...)
}

// DeleteChannelMembership mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelMembership(arg0 *chimesdkmessaging.DeleteChannelMembershipInput) (*chimesdkmessaging.DeleteChannelMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelMembership", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DeleteChannelMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelMembership indicates an expected call of DeleteChannelMembership
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelMembership", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelMembership), arg0)
}

// DeleteChannelMembershipRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelMembershipRequest(arg0 *chimesdkmessaging.DeleteChannelMembershipInput) (*request.Request, *chimesdkmessaging.DeleteChannelMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DeleteChannelMembershipOutput)
	return ret0, ret1
}

// DeleteChannelMembershipRequest indicates an expected call of DeleteChannelMembershipRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelMembershipRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelMembershipRequest), arg0)
}

// DeleteChannelMembershipWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelMembershipWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DeleteChannelMembershipInput, arg2 ...request.Option) (*chimesdkmessaging.DeleteChannelMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DeleteChannelMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelMembershipWithContext indicates an expected call of DeleteChannelMembershipWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelMembershipWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelMembershipWithContext), varargs...)
}

// DeleteChannelMessage mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelMessage(arg0 *chimesdkmessaging.DeleteChannelMessageInput) (*chimesdkmessaging.DeleteChannelMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelMessage", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DeleteChannelMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelMessage indicates an expected call of DeleteChannelMessage
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelMessage", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelMessage), arg0)
}

// DeleteChannelMessageRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelMessageRequest(arg0 *chimesdkmessaging.DeleteChannelMessageInput) (*request.Request, *chimesdkmessaging.DeleteChannelMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DeleteChannelMessageOutput)
	return ret0, ret1
}

// DeleteChannelMessageRequest indicates an expected call of DeleteChannelMessageRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelMessageRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelMessageRequest), arg0)
}

// DeleteChannelMessageWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelMessageWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DeleteChannelMessageInput, arg2 ...request.Option) (*chimesdkmessaging.DeleteChannelMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelMessageWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DeleteChannelMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelMessageWithContext indicates an expected call of DeleteChannelMessageWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelMessageWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelMessageWithContext), varargs...)
}

// DeleteChannelModerator mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelModerator(arg0 *chimesdkmessaging.DeleteChannelModeratorInput) (*chimesdkmessaging.DeleteChannelModeratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelModerator", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DeleteChannelModeratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelModerator indicates an expected call of DeleteChannelModerator
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelModerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelModerator", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelModerator), arg0)
}

// DeleteChannelModeratorRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelModeratorRequest(arg0 *chimesdkmessaging.DeleteChannelModeratorInput) (*request.Request, *chimesdkmessaging.DeleteChannelModeratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelModeratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DeleteChannelModeratorOutput)
	return ret0, ret1
}

// DeleteChannelModeratorRequest indicates an expected call of DeleteChannelModeratorRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelModeratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelModeratorRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelModeratorRequest), arg0)
}

// DeleteChannelModeratorWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelModeratorWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DeleteChannelModeratorInput, arg2 ...request.Option) (*chimesdkmessaging.DeleteChannelModeratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelModeratorWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DeleteChannelModeratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelModeratorWithContext indicates an expected call of DeleteChannelModeratorWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelModeratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelModeratorWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelModeratorWithContext), varargs...)
}

// DeleteChannelRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelRequest(arg0 *chimesdkmessaging.DeleteChannelInput) (*request.Request, *chimesdkmessaging.DeleteChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DeleteChannelOutput)
	return ret0, ret1
}

// DeleteChannelRequest indicates an expected call of DeleteChannelRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelRequest), arg0)
}

// DeleteChannelWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DeleteChannelWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DeleteChannelInput, arg2 ...request.Option) (*chimesdkmessaging.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelWithContext indicates an expected call of DeleteChannelWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DeleteChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DeleteChannelWithContext), varargs...)
}

// DescribeChannel mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannel(arg0 *chimesdkmessaging.DescribeChannelInput) (*chimesdkmessaging.DescribeChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannel", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannel indicates an expected call of DescribeChannel
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannel", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannel), arg0)
}

// DescribeChannelBan mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelBan(arg0 *chimesdkmessaging.DescribeChannelBanInput) (*chimesdkmessaging.DescribeChannelBanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelBan", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelBanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelBan indicates an expected call of DescribeChannelBan
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelBan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelBan", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelBan), arg0)
}

// DescribeChannelBanRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelBanRequest(arg0 *chimesdkmessaging.DescribeChannelBanInput) (*request.Request, *chimesdkmessaging.DescribeChannelBanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelBanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DescribeChannelBanOutput)
	return ret0, ret1
}

// DescribeChannelBanRequest indicates an expected call of DescribeChannelBanRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelBanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelBanRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelBanRequest), arg0)
}

// DescribeChannelBanWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelBanWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DescribeChannelBanInput, arg2 ...request.Option) (*chimesdkmessaging.DescribeChannelBanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChannelBanWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelBanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelBanWithContext indicates an expected call of DescribeChannelBanWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelBanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelBanWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelBanWithContext), varargs...)
}

// DescribeChannelMembership mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelMembership(arg0 *chimesdkmessaging.DescribeChannelMembershipInput) (*chimesdkmessaging.DescribeChannelMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelMembership", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelMembership indicates an expected call of DescribeChannelMembership
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelMembership", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelMembership), arg0)
}

// DescribeChannelMembershipForAppInstanceUser mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelMembershipForAppInstanceUser(arg0 *chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserInput) (*chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelMembershipForAppInstanceUser", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelMembershipForAppInstanceUser indicates an expected call of DescribeChannelMembershipForAppInstanceUser
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelMembershipForAppInstanceUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelMembershipForAppInstanceUser", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelMembershipForAppInstanceUser), arg0)
}

// DescribeChannelMembershipForAppInstanceUserRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelMembershipForAppInstanceUserRequest(arg0 *chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserInput) (*request.Request, *chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelMembershipForAppInstanceUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput)
	return ret0, ret1
}

// DescribeChannelMembershipForAppInstanceUserRequest indicates an expected call of DescribeChannelMembershipForAppInstanceUserRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelMembershipForAppInstanceUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelMembershipForAppInstanceUserRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelMembershipForAppInstanceUserRequest), arg0)
}

// DescribeChannelMembershipForAppInstanceUserWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelMembershipForAppInstanceUserWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserInput, arg2 ...request.Option) (*chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChannelMembershipForAppInstanceUserWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelMembershipForAppInstanceUserWithContext indicates an expected call of DescribeChannelMembershipForAppInstanceUserWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelMembershipForAppInstanceUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelMembershipForAppInstanceUserWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelMembershipForAppInstanceUserWithContext), varargs...)
}

// DescribeChannelMembershipRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelMembershipRequest(arg0 *chimesdkmessaging.DescribeChannelMembershipInput) (*request.Request, *chimesdkmessaging.DescribeChannelMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DescribeChannelMembershipOutput)
	return ret0, ret1
}

// DescribeChannelMembershipRequest indicates an expected call of DescribeChannelMembershipRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelMembershipRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelMembershipRequest), arg0)
}

// DescribeChannelMembershipWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelMembershipWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DescribeChannelMembershipInput, arg2 ...request.Option) (*chimesdkmessaging.DescribeChannelMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChannelMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelMembershipWithContext indicates an expected call of DescribeChannelMembershipWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelMembershipWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelMembershipWithContext), varargs...)
}

// DescribeChannelModeratedByAppInstanceUser mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelModeratedByAppInstanceUser(arg0 *chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserInput) (*chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelModeratedByAppInstanceUser", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelModeratedByAppInstanceUser indicates an expected call of DescribeChannelModeratedByAppInstanceUser
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelModeratedByAppInstanceUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelModeratedByAppInstanceUser", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelModeratedByAppInstanceUser), arg0)
}

// DescribeChannelModeratedByAppInstanceUserRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelModeratedByAppInstanceUserRequest(arg0 *chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserInput) (*request.Request, *chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelModeratedByAppInstanceUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput)
	return ret0, ret1
}

// DescribeChannelModeratedByAppInstanceUserRequest indicates an expected call of DescribeChannelModeratedByAppInstanceUserRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelModeratedByAppInstanceUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelModeratedByAppInstanceUserRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelModeratedByAppInstanceUserRequest), arg0)
}

// DescribeChannelModeratedByAppInstanceUserWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelModeratedByAppInstanceUserWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserInput, arg2 ...request.Option) (*chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChannelModeratedByAppInstanceUserWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelModeratedByAppInstanceUserWithContext indicates an expected call of DescribeChannelModeratedByAppInstanceUserWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelModeratedByAppInstanceUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelModeratedByAppInstanceUserWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelModeratedByAppInstanceUserWithContext), varargs...)
}

// DescribeChannelModerator mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelModerator(arg0 *chimesdkmessaging.DescribeChannelModeratorInput) (*chimesdkmessaging.DescribeChannelModeratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelModerator", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelModeratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelModerator indicates an expected call of DescribeChannelModerator
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelModerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelModerator", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelModerator), arg0)
}

// DescribeChannelModeratorRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelModeratorRequest(arg0 *chimesdkmessaging.DescribeChannelModeratorInput) (*request.Request, *chimesdkmessaging.DescribeChannelModeratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelModeratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DescribeChannelModeratorOutput)
	return ret0, ret1
}

// DescribeChannelModeratorRequest indicates an expected call of DescribeChannelModeratorRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelModeratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelModeratorRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelModeratorRequest), arg0)
}

// DescribeChannelModeratorWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelModeratorWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DescribeChannelModeratorInput, arg2 ...request.Option) (*chimesdkmessaging.DescribeChannelModeratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChannelModeratorWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelModeratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelModeratorWithContext indicates an expected call of DescribeChannelModeratorWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelModeratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelModeratorWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelModeratorWithContext), varargs...)
}

// DescribeChannelRequest mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelRequest(arg0 *chimesdkmessaging.DescribeChannelInput) (*request.Request, *chimesdkmessaging.DescribeChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.DescribeChannelOutput)
	return ret0, ret1
}

// DescribeChannelRequest indicates an expected call of DescribeChannelRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelRequest), arg0)
}

// DescribeChannelWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) DescribeChannelWithContext(arg0 context.Context, arg1 *chimesdkmessaging.DescribeChannelInput, arg2 ...request.Option) (*chimesdkmessaging.DescribeChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChannelWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.DescribeChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelWithContext indicates an expected call of DescribeChannelWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) DescribeChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).DescribeChannelWithContext), varargs...)
}

// GetChannelMessage mocks base method
func (m *MockChimeSDKMessagingAPI) GetChannelMessage(arg0 *chimesdkmessaging.GetChannelMessageInput) (*chimesdkmessaging.GetChannelMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMessage", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.GetChannelMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelMessage indicates an expected call of GetChannelMessage
func (mr *MockChimeSDKMessagingAPIMockRecorder) GetChannelMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMessage", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).GetChannelMessage), arg0)
}

// GetChannelMessageRequest mocks base method
func (m *MockChimeSDKMessagingAPI) GetChannelMessageRequest(arg0 *chimesdkmessaging.GetChannelMessageInput) (*request.Request, *chimesdkmessaging.GetChannelMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.GetChannelMessageOutput)
	return ret0, ret1
}

// GetChannelMessageRequest indicates an expected call of GetChannelMessageRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) GetChannelMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMessageRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).GetChannelMessageRequest), arg0)
}

// GetChannelMessageWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) GetChannelMessageWithContext(arg0 context.Context, arg1 *chimesdkmessaging.GetChannelMessageInput, arg2 ...request.Option) (*chimesdkmessaging.GetChannelMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelMessageWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.GetChannelMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelMessageWithContext indicates an expected call of GetChannelMessageWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) GetChannelMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMessageWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).GetChannelMessageWithContext), varargs...)
}

// GetMessagingSessionEndpoint mocks base method
func (m *MockChimeSDKMessagingAPI) GetMessagingSessionEndpoint(arg0 *chimesdkmessaging.GetMessagingSessionEndpointInput) (*chimesdkmessaging.GetMessagingSessionEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagingSessionEndpoint", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.GetMessagingSessionEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagingSessionEndpoint indicates an expected call of GetMessagingSessionEndpoint
func (mr *MockChimeSDKMessagingAPIMockRecorder) GetMessagingSessionEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagingSessionEndpoint", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).GetMessagingSessionEndpoint), arg0)
}

// GetMessagingSessionEndpointRequest mocks base method
func (m *MockChimeSDKMessagingAPI) GetMessagingSessionEndpointRequest(arg0 *chimesdkmessaging.GetMessagingSessionEndpointInput) (*request.Request, *chimesdkmessaging.GetMessagingSessionEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagingSessionEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.GetMessagingSessionEndpointOutput)
	return ret0, ret1
}

// GetMessagingSessionEndpointRequest indicates an expected call of GetMessagingSessionEndpointRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) GetMessagingSessionEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagingSessionEndpointRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).GetMessagingSessionEndpointRequest), arg0)
}

// GetMessagingSessionEndpointWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) GetMessagingSessionEndpointWithContext(arg0 context.Context, arg1 *chimesdkmessaging.GetMessagingSessionEndpointInput, arg2 ...request.Option) (*chimesdkmessaging.GetMessagingSessionEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessagingSessionEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.GetMessagingSessionEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagingSessionEndpointWithContext indicates an expected call of GetMessagingSessionEndpointWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) GetMessagingSessionEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagingSessionEndpointWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).GetMessagingSessionEndpointWithContext), varargs...)
}

// ListChannelBans mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelBans(arg0 *chimesdkmessaging.ListChannelBansInput) (*chimesdkmessaging.ListChannelBansOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelBans", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelBansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelBans indicates an expected call of ListChannelBans
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelBans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelBans", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelBans), arg0)
}

// ListChannelBansPages mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelBansPages(arg0 *chimesdkmessaging.ListChannelBansInput, arg1 func(*chimesdkmessaging.ListChannelBansOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelBansPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelBansPages indicates an expected call of ListChannelBansPages
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelBansPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelBansPages", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelBansPages), arg0, arg1)
}

// ListChannelBansPagesWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelBansPagesWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelBansInput, arg2 func(*chimesdkmessaging.ListChannelBansOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelBansPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelBansPagesWithContext indicates an expected call of ListChannelBansPagesWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelBansPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelBansPagesWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelBansPagesWithContext), varargs...)
}

// ListChannelBansRequest mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelBansRequest(arg0 *chimesdkmessaging.ListChannelBansInput) (*request.Request, *chimesdkmessaging.ListChannelBansOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelBansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.ListChannelBansOutput)
	return ret0, ret1
}

// ListChannelBansRequest indicates an expected call of ListChannelBansRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelBansRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelBansRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelBansRequest), arg0)
}

// ListChannelBansWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelBansWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelBansInput, arg2 ...request.Option) (*chimesdkmessaging.ListChannelBansOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelBansWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelBansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelBansWithContext indicates an expected call of ListChannelBansWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelBansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelBansWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelBansWithContext), varargs...)
}

// ListChannelMemberships mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMemberships(arg0 *chimesdkmessaging.ListChannelMembershipsInput) (*chimesdkmessaging.ListChannelMembershipsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelMemberships", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelMembershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelMemberships indicates an expected call of ListChannelMemberships
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMemberships(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMemberships", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMemberships), arg0)
}

// ListChannelMembershipsForAppInstanceUser mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMembershipsForAppInstanceUser(arg0 *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserInput) (*chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelMembershipsForAppInstanceUser", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelMembershipsForAppInstanceUser indicates an expected call of ListChannelMembershipsForAppInstanceUser
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMembershipsForAppInstanceUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMembershipsForAppInstanceUser", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMembershipsForAppInstanceUser), arg0)
}

// ListChannelMembershipsForAppInstanceUserPages mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMembershipsForAppInstanceUserPages(arg0 *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserInput, arg1 func(*chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelMembershipsForAppInstanceUserPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelMembershipsForAppInstanceUserPages indicates an expected call of ListChannelMembershipsForAppInstanceUserPages
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMembershipsForAppInstanceUserPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMembershipsForAppInstanceUserPages", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMembershipsForAppInstanceUserPages), arg0, arg1)
}

// ListChannelMembershipsForAppInstanceUserPagesWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMembershipsForAppInstanceUserPagesWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserInput, arg2 func(*chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelMembershipsForAppInstanceUserPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelMembershipsForAppInstanceUserPagesWithContext indicates an expected call of ListChannelMembershipsForAppInstanceUserPagesWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMembershipsForAppInstanceUserPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMembershipsForAppInstanceUserPagesWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMembershipsForAppInstanceUserPagesWithContext), varargs...)
}

// ListChannelMembershipsForAppInstanceUserRequest mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMembershipsForAppInstanceUserRequest(arg0 *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserInput) (*request.Request, *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelMembershipsForAppInstanceUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput)
	return ret0, ret1
}

// ListChannelMembershipsForAppInstanceUserRequest indicates an expected call of ListChannelMembershipsForAppInstanceUserRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMembershipsForAppInstanceUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMembershipsForAppInstanceUserRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMembershipsForAppInstanceUserRequest), arg0)
}

// ListChannelMembershipsForAppInstanceUserWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMembershipsForAppInstanceUserWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserInput, arg2 ...request.Option) (*chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelMembershipsForAppInstanceUserWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelMembershipsForAppInstanceUserWithContext indicates an expected call of ListChannelMembershipsForAppInstanceUserWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMembershipsForAppInstanceUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMembershipsForAppInstanceUserWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMembershipsForAppInstanceUserWithContext), varargs...)
}

// ListChannelMembershipsPages mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMembershipsPages(arg0 *chimesdkmessaging.ListChannelMembershipsInput, arg1 func(*chimesdkmessaging.ListChannelMembershipsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelMembershipsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelMembershipsPages indicates an expected call of ListChannelMembershipsPages
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMembershipsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMembershipsPages", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMembershipsPages), arg0, arg1)
}

// ListChannelMembershipsPagesWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMembershipsPagesWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelMembershipsInput, arg2 func(*chimesdkmessaging.ListChannelMembershipsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelMembershipsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelMembershipsPagesWithContext indicates an expected call of ListChannelMembershipsPagesWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMembershipsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMembershipsPagesWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMembershipsPagesWithContext), varargs...)
}

// ListChannelMembershipsRequest mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMembershipsRequest(arg0 *chimesdkmessaging.ListChannelMembershipsInput) (*request.Request, *chimesdkmessaging.ListChannelMembershipsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelMembershipsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.ListChannelMembershipsOutput)
	return ret0, ret1
}

// ListChannelMembershipsRequest indicates an expected call of ListChannelMembershipsRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMembershipsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMembershipsRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMembershipsRequest), arg0)
}

// ListChannelMembershipsWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMembershipsWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelMembershipsInput, arg2 ...request.Option) (*chimesdkmessaging.ListChannelMembershipsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelMembershipsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelMembershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelMembershipsWithContext indicates an expected call of ListChannelMembershipsWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMembershipsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMembershipsWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMembershipsWithContext), varargs...)
}

// ListChannelMessages mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMessages(arg0 *chimesdkmessaging.ListChannelMessagesInput) (*chimesdkmessaging.ListChannelMessagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelMessages", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelMessagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelMessages indicates an expected call of ListChannelMessages
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMessages", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMessages), arg0)
}

// ListChannelMessagesPages mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMessagesPages(arg0 *chimesdkmessaging.ListChannelMessagesInput, arg1 func(*chimesdkmessaging.ListChannelMessagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelMessagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelMessagesPages indicates an expected call of ListChannelMessagesPages
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMessagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMessagesPages", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMessagesPages), arg0, arg1)
}

// ListChannelMessagesPagesWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMessagesPagesWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelMessagesInput, arg2 func(*chimesdkmessaging.ListChannelMessagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelMessagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelMessagesPagesWithContext indicates an expected call of ListChannelMessagesPagesWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMessagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMessagesPagesWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMessagesPagesWithContext), varargs...)
}

// ListChannelMessagesRequest mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMessagesRequest(arg0 *chimesdkmessaging.ListChannelMessagesInput) (*request.Request, *chimesdkmessaging.ListChannelMessagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelMessagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.ListChannelMessagesOutput)
	return ret0, ret1
}

// ListChannelMessagesRequest indicates an expected call of ListChannelMessagesRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMessagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMessagesRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMessagesRequest), arg0)
}

// ListChannelMessagesWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelMessagesWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelMessagesInput, arg2 ...request.Option) (*chimesdkmessaging.ListChannelMessagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelMessagesWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelMessagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelMessagesWithContext indicates an expected call of ListChannelMessagesWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelMessagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelMessagesWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelMessagesWithContext), varargs...)
}

// ListChannelModerators mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelModerators(arg0 *chimesdkmessaging.ListChannelModeratorsInput) (*chimesdkmessaging.ListChannelModeratorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelModerators", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelModeratorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelModerators indicates an expected call of ListChannelModerators
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelModerators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelModerators", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelModerators), arg0)
}

// ListChannelModeratorsPages mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelModeratorsPages(arg0 *chimesdkmessaging.ListChannelModeratorsInput, arg1 func(*chimesdkmessaging.ListChannelModeratorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelModeratorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelModeratorsPages indicates an expected call of ListChannelModeratorsPages
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelModeratorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelModeratorsPages", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelModeratorsPages), arg0, arg1)
}

// ListChannelModeratorsPagesWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelModeratorsPagesWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelModeratorsInput, arg2 func(*chimesdkmessaging.ListChannelModeratorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelModeratorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelModeratorsPagesWithContext indicates an expected call of ListChannelModeratorsPagesWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelModeratorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelModeratorsPagesWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelModeratorsPagesWithContext), varargs...)
}

// ListChannelModeratorsRequest mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelModeratorsRequest(arg0 *chimesdkmessaging.ListChannelModeratorsInput) (*request.Request, *chimesdkmessaging.ListChannelModeratorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelModeratorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.ListChannelModeratorsOutput)
	return ret0, ret1
}

// ListChannelModeratorsRequest indicates an expected call of ListChannelModeratorsRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelModeratorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelModeratorsRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelModeratorsRequest), arg0)
}

// ListChannelModeratorsWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelModeratorsWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelModeratorsInput, arg2 ...request.Option) (*chimesdkmessaging.ListChannelModeratorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelModeratorsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelModeratorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelModeratorsWithContext indicates an expected call of ListChannelModeratorsWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelModeratorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelModeratorsWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelModeratorsWithContext), varargs...)
}

// ListChannels mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannels(arg0 *chimesdkmessaging.ListChannelsInput) (*chimesdkmessaging.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannels), arg0)
}

// ListChannelsModeratedByAppInstanceUser mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelsModeratedByAppInstanceUser(arg0 *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserInput) (*chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsModeratedByAppInstanceUser", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelsModeratedByAppInstanceUser indicates an expected call of ListChannelsModeratedByAppInstanceUser
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelsModeratedByAppInstanceUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsModeratedByAppInstanceUser", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelsModeratedByAppInstanceUser), arg0)
}

// ListChannelsModeratedByAppInstanceUserPages mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelsModeratedByAppInstanceUserPages(arg0 *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserInput, arg1 func(*chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsModeratedByAppInstanceUserPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsModeratedByAppInstanceUserPages indicates an expected call of ListChannelsModeratedByAppInstanceUserPages
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelsModeratedByAppInstanceUserPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsModeratedByAppInstanceUserPages", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelsModeratedByAppInstanceUserPages), arg0, arg1)
}

// ListChannelsModeratedByAppInstanceUserPagesWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelsModeratedByAppInstanceUserPagesWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserInput, arg2 func(*chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsModeratedByAppInstanceUserPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsModeratedByAppInstanceUserPagesWithContext indicates an expected call of ListChannelsModeratedByAppInstanceUserPagesWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelsModeratedByAppInstanceUserPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsModeratedByAppInstanceUserPagesWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelsModeratedByAppInstanceUserPagesWithContext), varargs...)
}

// ListChannelsModeratedByAppInstanceUserRequest mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelsModeratedByAppInstanceUserRequest(arg0 *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserInput) (*request.Request, *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsModeratedByAppInstanceUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput)
	return ret0, ret1
}

// ListChannelsModeratedByAppInstanceUserRequest indicates an expected call of ListChannelsModeratedByAppInstanceUserRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelsModeratedByAppInstanceUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsModeratedByAppInstanceUserRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelsModeratedByAppInstanceUserRequest), arg0)
}

// ListChannelsModeratedByAppInstanceUserWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelsModeratedByAppInstanceUserWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserInput, arg2 ...request.Option) (*chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsModeratedByAppInstanceUserWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelsModeratedByAppInstanceUserWithContext indicates an expected call of ListChannelsModeratedByAppInstanceUserWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelsModeratedByAppInstanceUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsModeratedByAppInstanceUserWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelsModeratedByAppInstanceUserWithContext), varargs...)
}

// ListChannelsPages mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelsPages(arg0 *chimesdkmessaging.ListChannelsInput, arg1 func(*chimesdkmessaging.ListChannelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPages indicates an expected call of ListChannelsPages
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPages", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelsPages), arg0, arg1)
}

// ListChannelsPagesWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelsPagesWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelsInput, arg2 func(*chimesdkmessaging.ListChannelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPagesWithContext indicates an expected call of ListChannelsPagesWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPagesWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelsPagesWithContext), varargs...)
}

// ListChannelsRequest mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelsRequest(arg0 *chimesdkmessaging.ListChannelsInput) (*request.Request, *chimesdkmessaging.ListChannelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.ListChannelsOutput)
	return ret0, ret1
}

// ListChannelsRequest indicates an expected call of ListChannelsRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelsRequest), arg0)
}

// ListChannelsWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) ListChannelsWithContext(arg0 context.Context, arg1 *chimesdkmessaging.ListChannelsInput, arg2 ...request.Option) (*chimesdkmessaging.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelsWithContext indicates an expected call of ListChannelsWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) ListChannelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).ListChannelsWithContext), varargs...)
}

// RedactChannelMessage mocks base method
func (m *MockChimeSDKMessagingAPI) RedactChannelMessage(arg0 *chimesdkmessaging.RedactChannelMessageInput) (*chimesdkmessaging.RedactChannelMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedactChannelMessage", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.RedactChannelMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RedactChannelMessage indicates an expected call of RedactChannelMessage
func (mr *MockChimeSDKMessagingAPIMockRecorder) RedactChannelMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedactChannelMessage", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).RedactChannelMessage), arg0)
}

// RedactChannelMessageRequest mocks base method
func (m *MockChimeSDKMessagingAPI) RedactChannelMessageRequest(arg0 *chimesdkmessaging.RedactChannelMessageInput) (*request.Request, *chimesdkmessaging.RedactChannelMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedactChannelMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.RedactChannelMessageOutput)
	return ret0, ret1
}

// RedactChannelMessageRequest indicates an expected call of RedactChannelMessageRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) RedactChannelMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedactChannelMessageRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).RedactChannelMessageRequest), arg0)
}

// RedactChannelMessageWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) RedactChannelMessageWithContext(arg0 context.Context, arg1 *chimesdkmessaging.RedactChannelMessageInput, arg2 ...request.Option) (*chimesdkmessaging.RedactChannelMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RedactChannelMessageWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.RedactChannelMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RedactChannelMessageWithContext indicates an expected call of RedactChannelMessageWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) RedactChannelMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedactChannelMessageWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).RedactChannelMessageWithContext), varargs...)
}

// SendChannelMessage mocks base method
func (m *MockChimeSDKMessagingAPI) SendChannelMessage(arg0 *chimesdkmessaging.SendChannelMessageInput) (*chimesdkmessaging.SendChannelMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChannelMessage", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.SendChannelMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChannelMessage indicates an expected call of SendChannelMessage
func (mr *MockChimeSDKMessagingAPIMockRecorder) SendChannelMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelMessage", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).SendChannelMessage), arg0)
}

// SendChannelMessageRequest mocks base method
func (m *MockChimeSDKMessagingAPI) SendChannelMessageRequest(arg0 *chimesdkmessaging.SendChannelMessageInput) (*request.Request, *chimesdkmessaging.SendChannelMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChannelMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.SendChannelMessageOutput)
	return ret0, ret1
}

// SendChannelMessageRequest indicates an expected call of SendChannelMessageRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) SendChannelMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelMessageRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).SendChannelMessageRequest), arg0)
}

// SendChannelMessageWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) SendChannelMessageWithContext(arg0 context.Context, arg1 *chimesdkmessaging.SendChannelMessageInput, arg2 ...request.Option) (*chimesdkmessaging.SendChannelMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendChannelMessageWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.SendChannelMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChannelMessageWithContext indicates an expected call of SendChannelMessageWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) SendChannelMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelMessageWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).SendChannelMessageWithContext), varargs...)
}

// UpdateChannel mocks base method
func (m *MockChimeSDKMessagingAPI) UpdateChannel(arg0 *chimesdkmessaging.UpdateChannelInput) (*chimesdkmessaging.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel
func (mr *MockChimeSDKMessagingAPIMockRecorder) UpdateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).UpdateChannel), arg0)
}

// UpdateChannelMessage mocks base method
func (m *MockChimeSDKMessagingAPI) UpdateChannelMessage(arg0 *chimesdkmessaging.UpdateChannelMessageInput) (*chimesdkmessaging.UpdateChannelMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelMessage", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.UpdateChannelMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelMessage indicates an expected call of UpdateChannelMessage
func (mr *MockChimeSDKMessagingAPIMockRecorder) UpdateChannelMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelMessage", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).UpdateChannelMessage), arg0)
}

// UpdateChannelMessageRequest mocks base method
func (m *MockChimeSDKMessagingAPI) UpdateChannelMessageRequest(arg0 *chimesdkmessaging.UpdateChannelMessageInput) (*request.Request, *chimesdkmessaging.UpdateChannelMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.UpdateChannelMessageOutput)
	return ret0, ret1
}

// UpdateChannelMessageRequest indicates an expected call of UpdateChannelMessageRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) UpdateChannelMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelMessageRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).UpdateChannelMessageRequest), arg0)
}

// UpdateChannelMessageWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) UpdateChannelMessageWithContext(arg0 context.Context, arg1 *chimesdkmessaging.UpdateChannelMessageInput, arg2 ...request.Option) (*chimesdkmessaging.UpdateChannelMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChannelMessageWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.UpdateChannelMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelMessageWithContext indicates an expected call of UpdateChannelMessageWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) UpdateChannelMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelMessageWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).UpdateChannelMessageWithContext), varargs...)
}

// UpdateChannelReadMarker mocks base method
func (m *MockChimeSDKMessagingAPI) UpdateChannelReadMarker(arg0 *chimesdkmessaging.UpdateChannelReadMarkerInput) (*chimesdkmessaging.UpdateChannelReadMarkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelReadMarker", arg0)
	ret0, _ := ret[0].(*chimesdkmessaging.UpdateChannelReadMarkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelReadMarker indicates an expected call of UpdateChannelReadMarker
func (mr *MockChimeSDKMessagingAPIMockRecorder) UpdateChannelReadMarker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelReadMarker", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).UpdateChannelReadMarker), arg0)
}

// UpdateChannelReadMarkerRequest mocks base method
func (m *MockChimeSDKMessagingAPI) UpdateChannelReadMarkerRequest(arg0 *chimesdkmessaging.UpdateChannelReadMarkerInput) (*request.Request, *chimesdkmessaging.UpdateChannelReadMarkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelReadMarkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.UpdateChannelReadMarkerOutput)
	return ret0, ret1
}

// UpdateChannelReadMarkerRequest indicates an expected call of UpdateChannelReadMarkerRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) UpdateChannelReadMarkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelReadMarkerRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).UpdateChannelReadMarkerRequest), arg0)
}

// UpdateChannelReadMarkerWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) UpdateChannelReadMarkerWithContext(arg0 context.Context, arg1 *chimesdkmessaging.UpdateChannelReadMarkerInput, arg2 ...request.Option) (*chimesdkmessaging.UpdateChannelReadMarkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChannelReadMarkerWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.UpdateChannelReadMarkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelReadMarkerWithContext indicates an expected call of UpdateChannelReadMarkerWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) UpdateChannelReadMarkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelReadMarkerWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).UpdateChannelReadMarkerWithContext), varargs...)
}

// UpdateChannelRequest mocks base method
func (m *MockChimeSDKMessagingAPI) UpdateChannelRequest(arg0 *chimesdkmessaging.UpdateChannelInput) (*request.Request, *chimesdkmessaging.UpdateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkmessaging.UpdateChannelOutput)
	return ret0, ret1
}

// UpdateChannelRequest indicates an expected call of UpdateChannelRequest
func (mr *MockChimeSDKMessagingAPIMockRecorder) UpdateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelRequest", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).UpdateChannelRequest), arg0)
}

// UpdateChannelWithContext mocks base method
func (m *MockChimeSDKMessagingAPI) UpdateChannelWithContext(arg0 context.Context, arg1 *chimesdkmessaging.UpdateChannelInput, arg2 ...request.Option) (*chimesdkmessaging.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkmessaging.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelWithContext indicates an expected call of UpdateChannelWithContext
func (mr *MockChimeSDKMessagingAPIMockRecorder) UpdateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelWithContext", reflect.TypeOf((*MockChimeSDKMessagingAPI)(nil).UpdateChannelWithContext), varargs...)
}
