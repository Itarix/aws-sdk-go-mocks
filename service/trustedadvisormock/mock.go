// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/trustedadvisor/trustedadvisoriface (interfaces: TrustedAdvisorAPI)

// Package trustedadvisormock is a generated GoMock package.
package trustedadvisormock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	trustedadvisor "github.com/aws/aws-sdk-go/service/trustedadvisor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTrustedAdvisorAPI is a mock of TrustedAdvisorAPI interface
type MockTrustedAdvisorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTrustedAdvisorAPIMockRecorder
}

// MockTrustedAdvisorAPIMockRecorder is the mock recorder for MockTrustedAdvisorAPI
type MockTrustedAdvisorAPIMockRecorder struct {
	mock *MockTrustedAdvisorAPI
}

// NewMockTrustedAdvisorAPI creates a new mock instance
func NewMockTrustedAdvisorAPI(ctrl *gomock.Controller) *MockTrustedAdvisorAPI {
	mock := &MockTrustedAdvisorAPI{ctrl: ctrl}
	mock.recorder = &MockTrustedAdvisorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrustedAdvisorAPI) EXPECT() *MockTrustedAdvisorAPIMockRecorder {
	return m.recorder
}

// BatchUpdateRecommendationResourceExclusion mocks base method
func (m *MockTrustedAdvisorAPI) BatchUpdateRecommendationResourceExclusion(arg0 *trustedadvisor.BatchUpdateRecommendationResourceExclusionInput) (*trustedadvisor.BatchUpdateRecommendationResourceExclusionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateRecommendationResourceExclusion", arg0)
	ret0, _ := ret[0].(*trustedadvisor.BatchUpdateRecommendationResourceExclusionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateRecommendationResourceExclusion indicates an expected call of BatchUpdateRecommendationResourceExclusion
func (mr *MockTrustedAdvisorAPIMockRecorder) BatchUpdateRecommendationResourceExclusion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateRecommendationResourceExclusion", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).BatchUpdateRecommendationResourceExclusion), arg0)
}

// BatchUpdateRecommendationResourceExclusionRequest mocks base method
func (m *MockTrustedAdvisorAPI) BatchUpdateRecommendationResourceExclusionRequest(arg0 *trustedadvisor.BatchUpdateRecommendationResourceExclusionInput) (*request.Request, *trustedadvisor.BatchUpdateRecommendationResourceExclusionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateRecommendationResourceExclusionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.BatchUpdateRecommendationResourceExclusionOutput)
	return ret0, ret1
}

// BatchUpdateRecommendationResourceExclusionRequest indicates an expected call of BatchUpdateRecommendationResourceExclusionRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) BatchUpdateRecommendationResourceExclusionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateRecommendationResourceExclusionRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).BatchUpdateRecommendationResourceExclusionRequest), arg0)
}

// BatchUpdateRecommendationResourceExclusionWithContext mocks base method
func (m *MockTrustedAdvisorAPI) BatchUpdateRecommendationResourceExclusionWithContext(arg0 context.Context, arg1 *trustedadvisor.BatchUpdateRecommendationResourceExclusionInput, arg2 ...request.Option) (*trustedadvisor.BatchUpdateRecommendationResourceExclusionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateRecommendationResourceExclusionWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.BatchUpdateRecommendationResourceExclusionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateRecommendationResourceExclusionWithContext indicates an expected call of BatchUpdateRecommendationResourceExclusionWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) BatchUpdateRecommendationResourceExclusionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateRecommendationResourceExclusionWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).BatchUpdateRecommendationResourceExclusionWithContext), varargs...)
}

// GetOrganizationRecommendation mocks base method
func (m *MockTrustedAdvisorAPI) GetOrganizationRecommendation(arg0 *trustedadvisor.GetOrganizationRecommendationInput) (*trustedadvisor.GetOrganizationRecommendationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationRecommendation", arg0)
	ret0, _ := ret[0].(*trustedadvisor.GetOrganizationRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationRecommendation indicates an expected call of GetOrganizationRecommendation
func (mr *MockTrustedAdvisorAPIMockRecorder) GetOrganizationRecommendation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRecommendation", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).GetOrganizationRecommendation), arg0)
}

// GetOrganizationRecommendationRequest mocks base method
func (m *MockTrustedAdvisorAPI) GetOrganizationRecommendationRequest(arg0 *trustedadvisor.GetOrganizationRecommendationInput) (*request.Request, *trustedadvisor.GetOrganizationRecommendationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationRecommendationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.GetOrganizationRecommendationOutput)
	return ret0, ret1
}

// GetOrganizationRecommendationRequest indicates an expected call of GetOrganizationRecommendationRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) GetOrganizationRecommendationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRecommendationRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).GetOrganizationRecommendationRequest), arg0)
}

// GetOrganizationRecommendationWithContext mocks base method
func (m *MockTrustedAdvisorAPI) GetOrganizationRecommendationWithContext(arg0 context.Context, arg1 *trustedadvisor.GetOrganizationRecommendationInput, arg2 ...request.Option) (*trustedadvisor.GetOrganizationRecommendationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationRecommendationWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.GetOrganizationRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationRecommendationWithContext indicates an expected call of GetOrganizationRecommendationWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) GetOrganizationRecommendationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRecommendationWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).GetOrganizationRecommendationWithContext), varargs...)
}

// GetRecommendation mocks base method
func (m *MockTrustedAdvisorAPI) GetRecommendation(arg0 *trustedadvisor.GetRecommendationInput) (*trustedadvisor.GetRecommendationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendation", arg0)
	ret0, _ := ret[0].(*trustedadvisor.GetRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendation indicates an expected call of GetRecommendation
func (mr *MockTrustedAdvisorAPIMockRecorder) GetRecommendation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendation", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).GetRecommendation), arg0)
}

// GetRecommendationRequest mocks base method
func (m *MockTrustedAdvisorAPI) GetRecommendationRequest(arg0 *trustedadvisor.GetRecommendationInput) (*request.Request, *trustedadvisor.GetRecommendationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.GetRecommendationOutput)
	return ret0, ret1
}

// GetRecommendationRequest indicates an expected call of GetRecommendationRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) GetRecommendationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).GetRecommendationRequest), arg0)
}

// GetRecommendationWithContext mocks base method
func (m *MockTrustedAdvisorAPI) GetRecommendationWithContext(arg0 context.Context, arg1 *trustedadvisor.GetRecommendationInput, arg2 ...request.Option) (*trustedadvisor.GetRecommendationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecommendationWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.GetRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationWithContext indicates an expected call of GetRecommendationWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) GetRecommendationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).GetRecommendationWithContext), varargs...)
}

// ListChecks mocks base method
func (m *MockTrustedAdvisorAPI) ListChecks(arg0 *trustedadvisor.ListChecksInput) (*trustedadvisor.ListChecksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChecks", arg0)
	ret0, _ := ret[0].(*trustedadvisor.ListChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChecks indicates an expected call of ListChecks
func (mr *MockTrustedAdvisorAPIMockRecorder) ListChecks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChecks", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListChecks), arg0)
}

// ListChecksPages mocks base method
func (m *MockTrustedAdvisorAPI) ListChecksPages(arg0 *trustedadvisor.ListChecksInput, arg1 func(*trustedadvisor.ListChecksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChecksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChecksPages indicates an expected call of ListChecksPages
func (mr *MockTrustedAdvisorAPIMockRecorder) ListChecksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChecksPages", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListChecksPages), arg0, arg1)
}

// ListChecksPagesWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListChecksPagesWithContext(arg0 context.Context, arg1 *trustedadvisor.ListChecksInput, arg2 func(*trustedadvisor.ListChecksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChecksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChecksPagesWithContext indicates an expected call of ListChecksPagesWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListChecksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChecksPagesWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListChecksPagesWithContext), varargs...)
}

// ListChecksRequest mocks base method
func (m *MockTrustedAdvisorAPI) ListChecksRequest(arg0 *trustedadvisor.ListChecksInput) (*request.Request, *trustedadvisor.ListChecksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChecksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.ListChecksOutput)
	return ret0, ret1
}

// ListChecksRequest indicates an expected call of ListChecksRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) ListChecksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChecksRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListChecksRequest), arg0)
}

// ListChecksWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListChecksWithContext(arg0 context.Context, arg1 *trustedadvisor.ListChecksInput, arg2 ...request.Option) (*trustedadvisor.ListChecksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChecksWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.ListChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChecksWithContext indicates an expected call of ListChecksWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListChecksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChecksWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListChecksWithContext), varargs...)
}

// ListOrganizationRecommendationAccounts mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationAccounts(arg0 *trustedadvisor.ListOrganizationRecommendationAccountsInput) (*trustedadvisor.ListOrganizationRecommendationAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationAccounts", arg0)
	ret0, _ := ret[0].(*trustedadvisor.ListOrganizationRecommendationAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationRecommendationAccounts indicates an expected call of ListOrganizationRecommendationAccounts
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationAccounts", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationAccounts), arg0)
}

// ListOrganizationRecommendationAccountsPages mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationAccountsPages(arg0 *trustedadvisor.ListOrganizationRecommendationAccountsInput, arg1 func(*trustedadvisor.ListOrganizationRecommendationAccountsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationAccountsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationRecommendationAccountsPages indicates an expected call of ListOrganizationRecommendationAccountsPages
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationAccountsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationAccountsPages", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationAccountsPages), arg0, arg1)
}

// ListOrganizationRecommendationAccountsPagesWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationAccountsPagesWithContext(arg0 context.Context, arg1 *trustedadvisor.ListOrganizationRecommendationAccountsInput, arg2 func(*trustedadvisor.ListOrganizationRecommendationAccountsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationAccountsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationRecommendationAccountsPagesWithContext indicates an expected call of ListOrganizationRecommendationAccountsPagesWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationAccountsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationAccountsPagesWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationAccountsPagesWithContext), varargs...)
}

// ListOrganizationRecommendationAccountsRequest mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationAccountsRequest(arg0 *trustedadvisor.ListOrganizationRecommendationAccountsInput) (*request.Request, *trustedadvisor.ListOrganizationRecommendationAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.ListOrganizationRecommendationAccountsOutput)
	return ret0, ret1
}

// ListOrganizationRecommendationAccountsRequest indicates an expected call of ListOrganizationRecommendationAccountsRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationAccountsRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationAccountsRequest), arg0)
}

// ListOrganizationRecommendationAccountsWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationAccountsWithContext(arg0 context.Context, arg1 *trustedadvisor.ListOrganizationRecommendationAccountsInput, arg2 ...request.Option) (*trustedadvisor.ListOrganizationRecommendationAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.ListOrganizationRecommendationAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationRecommendationAccountsWithContext indicates an expected call of ListOrganizationRecommendationAccountsWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationAccountsWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationAccountsWithContext), varargs...)
}

// ListOrganizationRecommendationResources mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationResources(arg0 *trustedadvisor.ListOrganizationRecommendationResourcesInput) (*trustedadvisor.ListOrganizationRecommendationResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationResources", arg0)
	ret0, _ := ret[0].(*trustedadvisor.ListOrganizationRecommendationResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationRecommendationResources indicates an expected call of ListOrganizationRecommendationResources
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationResources", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationResources), arg0)
}

// ListOrganizationRecommendationResourcesPages mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationResourcesPages(arg0 *trustedadvisor.ListOrganizationRecommendationResourcesInput, arg1 func(*trustedadvisor.ListOrganizationRecommendationResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationRecommendationResourcesPages indicates an expected call of ListOrganizationRecommendationResourcesPages
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationResourcesPages", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationResourcesPages), arg0, arg1)
}

// ListOrganizationRecommendationResourcesPagesWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationResourcesPagesWithContext(arg0 context.Context, arg1 *trustedadvisor.ListOrganizationRecommendationResourcesInput, arg2 func(*trustedadvisor.ListOrganizationRecommendationResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationRecommendationResourcesPagesWithContext indicates an expected call of ListOrganizationRecommendationResourcesPagesWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationResourcesPagesWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationResourcesPagesWithContext), varargs...)
}

// ListOrganizationRecommendationResourcesRequest mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationResourcesRequest(arg0 *trustedadvisor.ListOrganizationRecommendationResourcesInput) (*request.Request, *trustedadvisor.ListOrganizationRecommendationResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.ListOrganizationRecommendationResourcesOutput)
	return ret0, ret1
}

// ListOrganizationRecommendationResourcesRequest indicates an expected call of ListOrganizationRecommendationResourcesRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationResourcesRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationResourcesRequest), arg0)
}

// ListOrganizationRecommendationResourcesWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationResourcesWithContext(arg0 context.Context, arg1 *trustedadvisor.ListOrganizationRecommendationResourcesInput, arg2 ...request.Option) (*trustedadvisor.ListOrganizationRecommendationResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.ListOrganizationRecommendationResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationRecommendationResourcesWithContext indicates an expected call of ListOrganizationRecommendationResourcesWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationResourcesWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationResourcesWithContext), varargs...)
}

// ListOrganizationRecommendations mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendations(arg0 *trustedadvisor.ListOrganizationRecommendationsInput) (*trustedadvisor.ListOrganizationRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRecommendations", arg0)
	ret0, _ := ret[0].(*trustedadvisor.ListOrganizationRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationRecommendations indicates an expected call of ListOrganizationRecommendations
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendations", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendations), arg0)
}

// ListOrganizationRecommendationsPages mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationsPages(arg0 *trustedadvisor.ListOrganizationRecommendationsInput, arg1 func(*trustedadvisor.ListOrganizationRecommendationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationRecommendationsPages indicates an expected call of ListOrganizationRecommendationsPages
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationsPages", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationsPages), arg0, arg1)
}

// ListOrganizationRecommendationsPagesWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationsPagesWithContext(arg0 context.Context, arg1 *trustedadvisor.ListOrganizationRecommendationsInput, arg2 func(*trustedadvisor.ListOrganizationRecommendationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationRecommendationsPagesWithContext indicates an expected call of ListOrganizationRecommendationsPagesWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationsPagesWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationsPagesWithContext), varargs...)
}

// ListOrganizationRecommendationsRequest mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationsRequest(arg0 *trustedadvisor.ListOrganizationRecommendationsInput) (*request.Request, *trustedadvisor.ListOrganizationRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.ListOrganizationRecommendationsOutput)
	return ret0, ret1
}

// ListOrganizationRecommendationsRequest indicates an expected call of ListOrganizationRecommendationsRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationsRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationsRequest), arg0)
}

// ListOrganizationRecommendationsWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListOrganizationRecommendationsWithContext(arg0 context.Context, arg1 *trustedadvisor.ListOrganizationRecommendationsInput, arg2 ...request.Option) (*trustedadvisor.ListOrganizationRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.ListOrganizationRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationRecommendationsWithContext indicates an expected call of ListOrganizationRecommendationsWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListOrganizationRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRecommendationsWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListOrganizationRecommendationsWithContext), varargs...)
}

// ListRecommendationResources mocks base method
func (m *MockTrustedAdvisorAPI) ListRecommendationResources(arg0 *trustedadvisor.ListRecommendationResourcesInput) (*trustedadvisor.ListRecommendationResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationResources", arg0)
	ret0, _ := ret[0].(*trustedadvisor.ListRecommendationResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendationResources indicates an expected call of ListRecommendationResources
func (mr *MockTrustedAdvisorAPIMockRecorder) ListRecommendationResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationResources", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListRecommendationResources), arg0)
}

// ListRecommendationResourcesPages mocks base method
func (m *MockTrustedAdvisorAPI) ListRecommendationResourcesPages(arg0 *trustedadvisor.ListRecommendationResourcesInput, arg1 func(*trustedadvisor.ListRecommendationResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendationResourcesPages indicates an expected call of ListRecommendationResourcesPages
func (mr *MockTrustedAdvisorAPIMockRecorder) ListRecommendationResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationResourcesPages", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListRecommendationResourcesPages), arg0, arg1)
}

// ListRecommendationResourcesPagesWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListRecommendationResourcesPagesWithContext(arg0 context.Context, arg1 *trustedadvisor.ListRecommendationResourcesInput, arg2 func(*trustedadvisor.ListRecommendationResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendationResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendationResourcesPagesWithContext indicates an expected call of ListRecommendationResourcesPagesWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListRecommendationResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationResourcesPagesWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListRecommendationResourcesPagesWithContext), varargs...)
}

// ListRecommendationResourcesRequest mocks base method
func (m *MockTrustedAdvisorAPI) ListRecommendationResourcesRequest(arg0 *trustedadvisor.ListRecommendationResourcesInput) (*request.Request, *trustedadvisor.ListRecommendationResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.ListRecommendationResourcesOutput)
	return ret0, ret1
}

// ListRecommendationResourcesRequest indicates an expected call of ListRecommendationResourcesRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) ListRecommendationResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationResourcesRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListRecommendationResourcesRequest), arg0)
}

// ListRecommendationResourcesWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListRecommendationResourcesWithContext(arg0 context.Context, arg1 *trustedadvisor.ListRecommendationResourcesInput, arg2 ...request.Option) (*trustedadvisor.ListRecommendationResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendationResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.ListRecommendationResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendationResourcesWithContext indicates an expected call of ListRecommendationResourcesWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListRecommendationResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationResourcesWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListRecommendationResourcesWithContext), varargs...)
}

// ListRecommendations mocks base method
func (m *MockTrustedAdvisorAPI) ListRecommendations(arg0 *trustedadvisor.ListRecommendationsInput) (*trustedadvisor.ListRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendations", arg0)
	ret0, _ := ret[0].(*trustedadvisor.ListRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendations indicates an expected call of ListRecommendations
func (mr *MockTrustedAdvisorAPIMockRecorder) ListRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendations", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListRecommendations), arg0)
}

// ListRecommendationsPages mocks base method
func (m *MockTrustedAdvisorAPI) ListRecommendationsPages(arg0 *trustedadvisor.ListRecommendationsInput, arg1 func(*trustedadvisor.ListRecommendationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendationsPages indicates an expected call of ListRecommendationsPages
func (mr *MockTrustedAdvisorAPIMockRecorder) ListRecommendationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationsPages", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListRecommendationsPages), arg0, arg1)
}

// ListRecommendationsPagesWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListRecommendationsPagesWithContext(arg0 context.Context, arg1 *trustedadvisor.ListRecommendationsInput, arg2 func(*trustedadvisor.ListRecommendationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendationsPagesWithContext indicates an expected call of ListRecommendationsPagesWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListRecommendationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationsPagesWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListRecommendationsPagesWithContext), varargs...)
}

// ListRecommendationsRequest mocks base method
func (m *MockTrustedAdvisorAPI) ListRecommendationsRequest(arg0 *trustedadvisor.ListRecommendationsInput) (*request.Request, *trustedadvisor.ListRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.ListRecommendationsOutput)
	return ret0, ret1
}

// ListRecommendationsRequest indicates an expected call of ListRecommendationsRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) ListRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationsRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListRecommendationsRequest), arg0)
}

// ListRecommendationsWithContext mocks base method
func (m *MockTrustedAdvisorAPI) ListRecommendationsWithContext(arg0 context.Context, arg1 *trustedadvisor.ListRecommendationsInput, arg2 ...request.Option) (*trustedadvisor.ListRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.ListRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendationsWithContext indicates an expected call of ListRecommendationsWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) ListRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationsWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).ListRecommendationsWithContext), varargs...)
}

// UpdateOrganizationRecommendationLifecycle mocks base method
func (m *MockTrustedAdvisorAPI) UpdateOrganizationRecommendationLifecycle(arg0 *trustedadvisor.UpdateOrganizationRecommendationLifecycleInput) (*trustedadvisor.UpdateOrganizationRecommendationLifecycleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationRecommendationLifecycle", arg0)
	ret0, _ := ret[0].(*trustedadvisor.UpdateOrganizationRecommendationLifecycleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationRecommendationLifecycle indicates an expected call of UpdateOrganizationRecommendationLifecycle
func (mr *MockTrustedAdvisorAPIMockRecorder) UpdateOrganizationRecommendationLifecycle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationRecommendationLifecycle", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).UpdateOrganizationRecommendationLifecycle), arg0)
}

// UpdateOrganizationRecommendationLifecycleRequest mocks base method
func (m *MockTrustedAdvisorAPI) UpdateOrganizationRecommendationLifecycleRequest(arg0 *trustedadvisor.UpdateOrganizationRecommendationLifecycleInput) (*request.Request, *trustedadvisor.UpdateOrganizationRecommendationLifecycleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationRecommendationLifecycleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.UpdateOrganizationRecommendationLifecycleOutput)
	return ret0, ret1
}

// UpdateOrganizationRecommendationLifecycleRequest indicates an expected call of UpdateOrganizationRecommendationLifecycleRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) UpdateOrganizationRecommendationLifecycleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationRecommendationLifecycleRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).UpdateOrganizationRecommendationLifecycleRequest), arg0)
}

// UpdateOrganizationRecommendationLifecycleWithContext mocks base method
func (m *MockTrustedAdvisorAPI) UpdateOrganizationRecommendationLifecycleWithContext(arg0 context.Context, arg1 *trustedadvisor.UpdateOrganizationRecommendationLifecycleInput, arg2 ...request.Option) (*trustedadvisor.UpdateOrganizationRecommendationLifecycleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganizationRecommendationLifecycleWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.UpdateOrganizationRecommendationLifecycleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationRecommendationLifecycleWithContext indicates an expected call of UpdateOrganizationRecommendationLifecycleWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) UpdateOrganizationRecommendationLifecycleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationRecommendationLifecycleWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).UpdateOrganizationRecommendationLifecycleWithContext), varargs...)
}

// UpdateRecommendationLifecycle mocks base method
func (m *MockTrustedAdvisorAPI) UpdateRecommendationLifecycle(arg0 *trustedadvisor.UpdateRecommendationLifecycleInput) (*trustedadvisor.UpdateRecommendationLifecycleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecommendationLifecycle", arg0)
	ret0, _ := ret[0].(*trustedadvisor.UpdateRecommendationLifecycleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecommendationLifecycle indicates an expected call of UpdateRecommendationLifecycle
func (mr *MockTrustedAdvisorAPIMockRecorder) UpdateRecommendationLifecycle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommendationLifecycle", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).UpdateRecommendationLifecycle), arg0)
}

// UpdateRecommendationLifecycleRequest mocks base method
func (m *MockTrustedAdvisorAPI) UpdateRecommendationLifecycleRequest(arg0 *trustedadvisor.UpdateRecommendationLifecycleInput) (*request.Request, *trustedadvisor.UpdateRecommendationLifecycleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecommendationLifecycleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*trustedadvisor.UpdateRecommendationLifecycleOutput)
	return ret0, ret1
}

// UpdateRecommendationLifecycleRequest indicates an expected call of UpdateRecommendationLifecycleRequest
func (mr *MockTrustedAdvisorAPIMockRecorder) UpdateRecommendationLifecycleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommendationLifecycleRequest", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).UpdateRecommendationLifecycleRequest), arg0)
}

// UpdateRecommendationLifecycleWithContext mocks base method
func (m *MockTrustedAdvisorAPI) UpdateRecommendationLifecycleWithContext(arg0 context.Context, arg1 *trustedadvisor.UpdateRecommendationLifecycleInput, arg2 ...request.Option) (*trustedadvisor.UpdateRecommendationLifecycleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecommendationLifecycleWithContext", varargs...)
	ret0, _ := ret[0].(*trustedadvisor.UpdateRecommendationLifecycleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecommendationLifecycleWithContext indicates an expected call of UpdateRecommendationLifecycleWithContext
func (mr *MockTrustedAdvisorAPIMockRecorder) UpdateRecommendationLifecycleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommendationLifecycleWithContext", reflect.TypeOf((*MockTrustedAdvisorAPI)(nil).UpdateRecommendationLifecycleWithContext), varargs...)
}
