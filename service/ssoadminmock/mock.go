// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ssoadmin/ssoadminiface (interfaces: SSOAdminAPI)

// Package ssoadminmock is a generated GoMock package.
package ssoadminmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	ssoadmin "github.com/aws/aws-sdk-go/service/ssoadmin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSSOAdminAPI is a mock of SSOAdminAPI interface
type MockSSOAdminAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSSOAdminAPIMockRecorder
}

// MockSSOAdminAPIMockRecorder is the mock recorder for MockSSOAdminAPI
type MockSSOAdminAPIMockRecorder struct {
	mock *MockSSOAdminAPI
}

// NewMockSSOAdminAPI creates a new mock instance
func NewMockSSOAdminAPI(ctrl *gomock.Controller) *MockSSOAdminAPI {
	mock := &MockSSOAdminAPI{ctrl: ctrl}
	mock.recorder = &MockSSOAdminAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSSOAdminAPI) EXPECT() *MockSSOAdminAPIMockRecorder {
	return m.recorder
}

// AttachCustomerManagedPolicyReferenceToPermissionSet mocks base method
func (m *MockSSOAdminAPI) AttachCustomerManagedPolicyReferenceToPermissionSet(arg0 *ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetInput) (*ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachCustomerManagedPolicyReferenceToPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachCustomerManagedPolicyReferenceToPermissionSet indicates an expected call of AttachCustomerManagedPolicyReferenceToPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) AttachCustomerManagedPolicyReferenceToPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachCustomerManagedPolicyReferenceToPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).AttachCustomerManagedPolicyReferenceToPermissionSet), arg0)
}

// AttachCustomerManagedPolicyReferenceToPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) AttachCustomerManagedPolicyReferenceToPermissionSetRequest(arg0 *ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetInput) (*request.Request, *ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachCustomerManagedPolicyReferenceToPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput)
	return ret0, ret1
}

// AttachCustomerManagedPolicyReferenceToPermissionSetRequest indicates an expected call of AttachCustomerManagedPolicyReferenceToPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) AttachCustomerManagedPolicyReferenceToPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachCustomerManagedPolicyReferenceToPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).AttachCustomerManagedPolicyReferenceToPermissionSetRequest), arg0)
}

// AttachCustomerManagedPolicyReferenceToPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) AttachCustomerManagedPolicyReferenceToPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetInput, arg2 ...request.Option) (*ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachCustomerManagedPolicyReferenceToPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachCustomerManagedPolicyReferenceToPermissionSetWithContext indicates an expected call of AttachCustomerManagedPolicyReferenceToPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) AttachCustomerManagedPolicyReferenceToPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachCustomerManagedPolicyReferenceToPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).AttachCustomerManagedPolicyReferenceToPermissionSetWithContext), varargs...)
}

// AttachManagedPolicyToPermissionSet mocks base method
func (m *MockSSOAdminAPI) AttachManagedPolicyToPermissionSet(arg0 *ssoadmin.AttachManagedPolicyToPermissionSetInput) (*ssoadmin.AttachManagedPolicyToPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachManagedPolicyToPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.AttachManagedPolicyToPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachManagedPolicyToPermissionSet indicates an expected call of AttachManagedPolicyToPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) AttachManagedPolicyToPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachManagedPolicyToPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).AttachManagedPolicyToPermissionSet), arg0)
}

// AttachManagedPolicyToPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) AttachManagedPolicyToPermissionSetRequest(arg0 *ssoadmin.AttachManagedPolicyToPermissionSetInput) (*request.Request, *ssoadmin.AttachManagedPolicyToPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachManagedPolicyToPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.AttachManagedPolicyToPermissionSetOutput)
	return ret0, ret1
}

// AttachManagedPolicyToPermissionSetRequest indicates an expected call of AttachManagedPolicyToPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) AttachManagedPolicyToPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachManagedPolicyToPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).AttachManagedPolicyToPermissionSetRequest), arg0)
}

// AttachManagedPolicyToPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) AttachManagedPolicyToPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.AttachManagedPolicyToPermissionSetInput, arg2 ...request.Option) (*ssoadmin.AttachManagedPolicyToPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachManagedPolicyToPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.AttachManagedPolicyToPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachManagedPolicyToPermissionSetWithContext indicates an expected call of AttachManagedPolicyToPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) AttachManagedPolicyToPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachManagedPolicyToPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).AttachManagedPolicyToPermissionSetWithContext), varargs...)
}

// CreateAccountAssignment mocks base method
func (m *MockSSOAdminAPI) CreateAccountAssignment(arg0 *ssoadmin.CreateAccountAssignmentInput) (*ssoadmin.CreateAccountAssignmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountAssignment", arg0)
	ret0, _ := ret[0].(*ssoadmin.CreateAccountAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountAssignment indicates an expected call of CreateAccountAssignment
func (mr *MockSSOAdminAPIMockRecorder) CreateAccountAssignment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountAssignment", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateAccountAssignment), arg0)
}

// CreateAccountAssignmentRequest mocks base method
func (m *MockSSOAdminAPI) CreateAccountAssignmentRequest(arg0 *ssoadmin.CreateAccountAssignmentInput) (*request.Request, *ssoadmin.CreateAccountAssignmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountAssignmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.CreateAccountAssignmentOutput)
	return ret0, ret1
}

// CreateAccountAssignmentRequest indicates an expected call of CreateAccountAssignmentRequest
func (mr *MockSSOAdminAPIMockRecorder) CreateAccountAssignmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountAssignmentRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateAccountAssignmentRequest), arg0)
}

// CreateAccountAssignmentWithContext mocks base method
func (m *MockSSOAdminAPI) CreateAccountAssignmentWithContext(arg0 context.Context, arg1 *ssoadmin.CreateAccountAssignmentInput, arg2 ...request.Option) (*ssoadmin.CreateAccountAssignmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccountAssignmentWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.CreateAccountAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountAssignmentWithContext indicates an expected call of CreateAccountAssignmentWithContext
func (mr *MockSSOAdminAPIMockRecorder) CreateAccountAssignmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountAssignmentWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateAccountAssignmentWithContext), varargs...)
}

// CreateApplication mocks base method
func (m *MockSSOAdminAPI) CreateApplication(arg0 *ssoadmin.CreateApplicationInput) (*ssoadmin.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*ssoadmin.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockSSOAdminAPIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateApplication), arg0)
}

// CreateApplicationAssignment mocks base method
func (m *MockSSOAdminAPI) CreateApplicationAssignment(arg0 *ssoadmin.CreateApplicationAssignmentInput) (*ssoadmin.CreateApplicationAssignmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationAssignment", arg0)
	ret0, _ := ret[0].(*ssoadmin.CreateApplicationAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationAssignment indicates an expected call of CreateApplicationAssignment
func (mr *MockSSOAdminAPIMockRecorder) CreateApplicationAssignment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationAssignment", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateApplicationAssignment), arg0)
}

// CreateApplicationAssignmentRequest mocks base method
func (m *MockSSOAdminAPI) CreateApplicationAssignmentRequest(arg0 *ssoadmin.CreateApplicationAssignmentInput) (*request.Request, *ssoadmin.CreateApplicationAssignmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationAssignmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.CreateApplicationAssignmentOutput)
	return ret0, ret1
}

// CreateApplicationAssignmentRequest indicates an expected call of CreateApplicationAssignmentRequest
func (mr *MockSSOAdminAPIMockRecorder) CreateApplicationAssignmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationAssignmentRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateApplicationAssignmentRequest), arg0)
}

// CreateApplicationAssignmentWithContext mocks base method
func (m *MockSSOAdminAPI) CreateApplicationAssignmentWithContext(arg0 context.Context, arg1 *ssoadmin.CreateApplicationAssignmentInput, arg2 ...request.Option) (*ssoadmin.CreateApplicationAssignmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationAssignmentWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.CreateApplicationAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationAssignmentWithContext indicates an expected call of CreateApplicationAssignmentWithContext
func (mr *MockSSOAdminAPIMockRecorder) CreateApplicationAssignmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationAssignmentWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateApplicationAssignmentWithContext), varargs...)
}

// CreateApplicationRequest mocks base method
func (m *MockSSOAdminAPI) CreateApplicationRequest(arg0 *ssoadmin.CreateApplicationInput) (*request.Request, *ssoadmin.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest
func (mr *MockSSOAdminAPIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationWithContext mocks base method
func (m *MockSSOAdminAPI) CreateApplicationWithContext(arg0 context.Context, arg1 *ssoadmin.CreateApplicationInput, arg2 ...request.Option) (*ssoadmin.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext
func (mr *MockSSOAdminAPIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateApplicationWithContext), varargs...)
}

// CreateInstance mocks base method
func (m *MockSSOAdminAPI) CreateInstance(arg0 *ssoadmin.CreateInstanceInput) (*ssoadmin.CreateInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(*ssoadmin.CreateInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance
func (mr *MockSSOAdminAPIMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateInstance), arg0)
}

// CreateInstanceAccessControlAttributeConfiguration mocks base method
func (m *MockSSOAdminAPI) CreateInstanceAccessControlAttributeConfiguration(arg0 *ssoadmin.CreateInstanceAccessControlAttributeConfigurationInput) (*ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceAccessControlAttributeConfiguration", arg0)
	ret0, _ := ret[0].(*ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceAccessControlAttributeConfiguration indicates an expected call of CreateInstanceAccessControlAttributeConfiguration
func (mr *MockSSOAdminAPIMockRecorder) CreateInstanceAccessControlAttributeConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceAccessControlAttributeConfiguration", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateInstanceAccessControlAttributeConfiguration), arg0)
}

// CreateInstanceAccessControlAttributeConfigurationRequest mocks base method
func (m *MockSSOAdminAPI) CreateInstanceAccessControlAttributeConfigurationRequest(arg0 *ssoadmin.CreateInstanceAccessControlAttributeConfigurationInput) (*request.Request, *ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceAccessControlAttributeConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput)
	return ret0, ret1
}

// CreateInstanceAccessControlAttributeConfigurationRequest indicates an expected call of CreateInstanceAccessControlAttributeConfigurationRequest
func (mr *MockSSOAdminAPIMockRecorder) CreateInstanceAccessControlAttributeConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceAccessControlAttributeConfigurationRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateInstanceAccessControlAttributeConfigurationRequest), arg0)
}

// CreateInstanceAccessControlAttributeConfigurationWithContext mocks base method
func (m *MockSSOAdminAPI) CreateInstanceAccessControlAttributeConfigurationWithContext(arg0 context.Context, arg1 *ssoadmin.CreateInstanceAccessControlAttributeConfigurationInput, arg2 ...request.Option) (*ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstanceAccessControlAttributeConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceAccessControlAttributeConfigurationWithContext indicates an expected call of CreateInstanceAccessControlAttributeConfigurationWithContext
func (mr *MockSSOAdminAPIMockRecorder) CreateInstanceAccessControlAttributeConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceAccessControlAttributeConfigurationWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateInstanceAccessControlAttributeConfigurationWithContext), varargs...)
}

// CreateInstanceRequest mocks base method
func (m *MockSSOAdminAPI) CreateInstanceRequest(arg0 *ssoadmin.CreateInstanceInput) (*request.Request, *ssoadmin.CreateInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.CreateInstanceOutput)
	return ret0, ret1
}

// CreateInstanceRequest indicates an expected call of CreateInstanceRequest
func (mr *MockSSOAdminAPIMockRecorder) CreateInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateInstanceRequest), arg0)
}

// CreateInstanceWithContext mocks base method
func (m *MockSSOAdminAPI) CreateInstanceWithContext(arg0 context.Context, arg1 *ssoadmin.CreateInstanceInput, arg2 ...request.Option) (*ssoadmin.CreateInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.CreateInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceWithContext indicates an expected call of CreateInstanceWithContext
func (mr *MockSSOAdminAPIMockRecorder) CreateInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateInstanceWithContext), varargs...)
}

// CreatePermissionSet mocks base method
func (m *MockSSOAdminAPI) CreatePermissionSet(arg0 *ssoadmin.CreatePermissionSetInput) (*ssoadmin.CreatePermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.CreatePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermissionSet indicates an expected call of CreatePermissionSet
func (mr *MockSSOAdminAPIMockRecorder) CreatePermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreatePermissionSet), arg0)
}

// CreatePermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) CreatePermissionSetRequest(arg0 *ssoadmin.CreatePermissionSetInput) (*request.Request, *ssoadmin.CreatePermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.CreatePermissionSetOutput)
	return ret0, ret1
}

// CreatePermissionSetRequest indicates an expected call of CreatePermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) CreatePermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreatePermissionSetRequest), arg0)
}

// CreatePermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) CreatePermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.CreatePermissionSetInput, arg2 ...request.Option) (*ssoadmin.CreatePermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.CreatePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermissionSetWithContext indicates an expected call of CreatePermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) CreatePermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreatePermissionSetWithContext), varargs...)
}

// CreateTrustedTokenIssuer mocks base method
func (m *MockSSOAdminAPI) CreateTrustedTokenIssuer(arg0 *ssoadmin.CreateTrustedTokenIssuerInput) (*ssoadmin.CreateTrustedTokenIssuerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrustedTokenIssuer", arg0)
	ret0, _ := ret[0].(*ssoadmin.CreateTrustedTokenIssuerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrustedTokenIssuer indicates an expected call of CreateTrustedTokenIssuer
func (mr *MockSSOAdminAPIMockRecorder) CreateTrustedTokenIssuer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrustedTokenIssuer", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateTrustedTokenIssuer), arg0)
}

// CreateTrustedTokenIssuerRequest mocks base method
func (m *MockSSOAdminAPI) CreateTrustedTokenIssuerRequest(arg0 *ssoadmin.CreateTrustedTokenIssuerInput) (*request.Request, *ssoadmin.CreateTrustedTokenIssuerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrustedTokenIssuerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.CreateTrustedTokenIssuerOutput)
	return ret0, ret1
}

// CreateTrustedTokenIssuerRequest indicates an expected call of CreateTrustedTokenIssuerRequest
func (mr *MockSSOAdminAPIMockRecorder) CreateTrustedTokenIssuerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrustedTokenIssuerRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateTrustedTokenIssuerRequest), arg0)
}

// CreateTrustedTokenIssuerWithContext mocks base method
func (m *MockSSOAdminAPI) CreateTrustedTokenIssuerWithContext(arg0 context.Context, arg1 *ssoadmin.CreateTrustedTokenIssuerInput, arg2 ...request.Option) (*ssoadmin.CreateTrustedTokenIssuerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrustedTokenIssuerWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.CreateTrustedTokenIssuerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrustedTokenIssuerWithContext indicates an expected call of CreateTrustedTokenIssuerWithContext
func (mr *MockSSOAdminAPIMockRecorder) CreateTrustedTokenIssuerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrustedTokenIssuerWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).CreateTrustedTokenIssuerWithContext), varargs...)
}

// DeleteAccountAssignment mocks base method
func (m *MockSSOAdminAPI) DeleteAccountAssignment(arg0 *ssoadmin.DeleteAccountAssignmentInput) (*ssoadmin.DeleteAccountAssignmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountAssignment", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeleteAccountAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccountAssignment indicates an expected call of DeleteAccountAssignment
func (mr *MockSSOAdminAPIMockRecorder) DeleteAccountAssignment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountAssignment", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteAccountAssignment), arg0)
}

// DeleteAccountAssignmentRequest mocks base method
func (m *MockSSOAdminAPI) DeleteAccountAssignmentRequest(arg0 *ssoadmin.DeleteAccountAssignmentInput) (*request.Request, *ssoadmin.DeleteAccountAssignmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountAssignmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeleteAccountAssignmentOutput)
	return ret0, ret1
}

// DeleteAccountAssignmentRequest indicates an expected call of DeleteAccountAssignmentRequest
func (mr *MockSSOAdminAPIMockRecorder) DeleteAccountAssignmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountAssignmentRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteAccountAssignmentRequest), arg0)
}

// DeleteAccountAssignmentWithContext mocks base method
func (m *MockSSOAdminAPI) DeleteAccountAssignmentWithContext(arg0 context.Context, arg1 *ssoadmin.DeleteAccountAssignmentInput, arg2 ...request.Option) (*ssoadmin.DeleteAccountAssignmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccountAssignmentWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeleteAccountAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccountAssignmentWithContext indicates an expected call of DeleteAccountAssignmentWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeleteAccountAssignmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountAssignmentWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteAccountAssignmentWithContext), varargs...)
}

// DeleteApplication mocks base method
func (m *MockSSOAdminAPI) DeleteApplication(arg0 *ssoadmin.DeleteApplicationInput) (*ssoadmin.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplication), arg0)
}

// DeleteApplicationAccessScope mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationAccessScope(arg0 *ssoadmin.DeleteApplicationAccessScopeInput) (*ssoadmin.DeleteApplicationAccessScopeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationAccessScope", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeleteApplicationAccessScopeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationAccessScope indicates an expected call of DeleteApplicationAccessScope
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationAccessScope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAccessScope", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationAccessScope), arg0)
}

// DeleteApplicationAccessScopeRequest mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationAccessScopeRequest(arg0 *ssoadmin.DeleteApplicationAccessScopeInput) (*request.Request, *ssoadmin.DeleteApplicationAccessScopeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationAccessScopeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeleteApplicationAccessScopeOutput)
	return ret0, ret1
}

// DeleteApplicationAccessScopeRequest indicates an expected call of DeleteApplicationAccessScopeRequest
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationAccessScopeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAccessScopeRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationAccessScopeRequest), arg0)
}

// DeleteApplicationAccessScopeWithContext mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationAccessScopeWithContext(arg0 context.Context, arg1 *ssoadmin.DeleteApplicationAccessScopeInput, arg2 ...request.Option) (*ssoadmin.DeleteApplicationAccessScopeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationAccessScopeWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeleteApplicationAccessScopeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationAccessScopeWithContext indicates an expected call of DeleteApplicationAccessScopeWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationAccessScopeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAccessScopeWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationAccessScopeWithContext), varargs...)
}

// DeleteApplicationAssignment mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationAssignment(arg0 *ssoadmin.DeleteApplicationAssignmentInput) (*ssoadmin.DeleteApplicationAssignmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationAssignment", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeleteApplicationAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationAssignment indicates an expected call of DeleteApplicationAssignment
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationAssignment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAssignment", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationAssignment), arg0)
}

// DeleteApplicationAssignmentRequest mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationAssignmentRequest(arg0 *ssoadmin.DeleteApplicationAssignmentInput) (*request.Request, *ssoadmin.DeleteApplicationAssignmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationAssignmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeleteApplicationAssignmentOutput)
	return ret0, ret1
}

// DeleteApplicationAssignmentRequest indicates an expected call of DeleteApplicationAssignmentRequest
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationAssignmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAssignmentRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationAssignmentRequest), arg0)
}

// DeleteApplicationAssignmentWithContext mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationAssignmentWithContext(arg0 context.Context, arg1 *ssoadmin.DeleteApplicationAssignmentInput, arg2 ...request.Option) (*ssoadmin.DeleteApplicationAssignmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationAssignmentWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeleteApplicationAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationAssignmentWithContext indicates an expected call of DeleteApplicationAssignmentWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationAssignmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAssignmentWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationAssignmentWithContext), varargs...)
}

// DeleteApplicationAuthenticationMethod mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationAuthenticationMethod(arg0 *ssoadmin.DeleteApplicationAuthenticationMethodInput) (*ssoadmin.DeleteApplicationAuthenticationMethodOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationAuthenticationMethod", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeleteApplicationAuthenticationMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationAuthenticationMethod indicates an expected call of DeleteApplicationAuthenticationMethod
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationAuthenticationMethod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAuthenticationMethod", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationAuthenticationMethod), arg0)
}

// DeleteApplicationAuthenticationMethodRequest mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationAuthenticationMethodRequest(arg0 *ssoadmin.DeleteApplicationAuthenticationMethodInput) (*request.Request, *ssoadmin.DeleteApplicationAuthenticationMethodOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationAuthenticationMethodRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeleteApplicationAuthenticationMethodOutput)
	return ret0, ret1
}

// DeleteApplicationAuthenticationMethodRequest indicates an expected call of DeleteApplicationAuthenticationMethodRequest
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationAuthenticationMethodRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAuthenticationMethodRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationAuthenticationMethodRequest), arg0)
}

// DeleteApplicationAuthenticationMethodWithContext mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationAuthenticationMethodWithContext(arg0 context.Context, arg1 *ssoadmin.DeleteApplicationAuthenticationMethodInput, arg2 ...request.Option) (*ssoadmin.DeleteApplicationAuthenticationMethodOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationAuthenticationMethodWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeleteApplicationAuthenticationMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationAuthenticationMethodWithContext indicates an expected call of DeleteApplicationAuthenticationMethodWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationAuthenticationMethodWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationAuthenticationMethodWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationAuthenticationMethodWithContext), varargs...)
}

// DeleteApplicationGrant mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationGrant(arg0 *ssoadmin.DeleteApplicationGrantInput) (*ssoadmin.DeleteApplicationGrantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationGrant", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeleteApplicationGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationGrant indicates an expected call of DeleteApplicationGrant
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationGrant", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationGrant), arg0)
}

// DeleteApplicationGrantRequest mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationGrantRequest(arg0 *ssoadmin.DeleteApplicationGrantInput) (*request.Request, *ssoadmin.DeleteApplicationGrantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationGrantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeleteApplicationGrantOutput)
	return ret0, ret1
}

// DeleteApplicationGrantRequest indicates an expected call of DeleteApplicationGrantRequest
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationGrantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationGrantRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationGrantRequest), arg0)
}

// DeleteApplicationGrantWithContext mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationGrantWithContext(arg0 context.Context, arg1 *ssoadmin.DeleteApplicationGrantInput, arg2 ...request.Option) (*ssoadmin.DeleteApplicationGrantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationGrantWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeleteApplicationGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationGrantWithContext indicates an expected call of DeleteApplicationGrantWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationGrantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationGrantWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationGrantWithContext), varargs...)
}

// DeleteApplicationRequest mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationRequest(arg0 *ssoadmin.DeleteApplicationInput) (*request.Request, *ssoadmin.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationWithContext mocks base method
func (m *MockSSOAdminAPI) DeleteApplicationWithContext(arg0 context.Context, arg1 *ssoadmin.DeleteApplicationInput, arg2 ...request.Option) (*ssoadmin.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteApplicationWithContext), varargs...)
}

// DeleteInlinePolicyFromPermissionSet mocks base method
func (m *MockSSOAdminAPI) DeleteInlinePolicyFromPermissionSet(arg0 *ssoadmin.DeleteInlinePolicyFromPermissionSetInput) (*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInlinePolicyFromPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInlinePolicyFromPermissionSet indicates an expected call of DeleteInlinePolicyFromPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) DeleteInlinePolicyFromPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInlinePolicyFromPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteInlinePolicyFromPermissionSet), arg0)
}

// DeleteInlinePolicyFromPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) DeleteInlinePolicyFromPermissionSetRequest(arg0 *ssoadmin.DeleteInlinePolicyFromPermissionSetInput) (*request.Request, *ssoadmin.DeleteInlinePolicyFromPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInlinePolicyFromPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput)
	return ret0, ret1
}

// DeleteInlinePolicyFromPermissionSetRequest indicates an expected call of DeleteInlinePolicyFromPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) DeleteInlinePolicyFromPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInlinePolicyFromPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteInlinePolicyFromPermissionSetRequest), arg0)
}

// DeleteInlinePolicyFromPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) DeleteInlinePolicyFromPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.DeleteInlinePolicyFromPermissionSetInput, arg2 ...request.Option) (*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInlinePolicyFromPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInlinePolicyFromPermissionSetWithContext indicates an expected call of DeleteInlinePolicyFromPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeleteInlinePolicyFromPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInlinePolicyFromPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteInlinePolicyFromPermissionSetWithContext), varargs...)
}

// DeleteInstance mocks base method
func (m *MockSSOAdminAPI) DeleteInstance(arg0 *ssoadmin.DeleteInstanceInput) (*ssoadmin.DeleteInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeleteInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockSSOAdminAPIMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteInstance), arg0)
}

// DeleteInstanceAccessControlAttributeConfiguration mocks base method
func (m *MockSSOAdminAPI) DeleteInstanceAccessControlAttributeConfiguration(arg0 *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationInput) (*ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceAccessControlAttributeConfiguration", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceAccessControlAttributeConfiguration indicates an expected call of DeleteInstanceAccessControlAttributeConfiguration
func (mr *MockSSOAdminAPIMockRecorder) DeleteInstanceAccessControlAttributeConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceAccessControlAttributeConfiguration", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteInstanceAccessControlAttributeConfiguration), arg0)
}

// DeleteInstanceAccessControlAttributeConfigurationRequest mocks base method
func (m *MockSSOAdminAPI) DeleteInstanceAccessControlAttributeConfigurationRequest(arg0 *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationInput) (*request.Request, *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceAccessControlAttributeConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput)
	return ret0, ret1
}

// DeleteInstanceAccessControlAttributeConfigurationRequest indicates an expected call of DeleteInstanceAccessControlAttributeConfigurationRequest
func (mr *MockSSOAdminAPIMockRecorder) DeleteInstanceAccessControlAttributeConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceAccessControlAttributeConfigurationRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteInstanceAccessControlAttributeConfigurationRequest), arg0)
}

// DeleteInstanceAccessControlAttributeConfigurationWithContext mocks base method
func (m *MockSSOAdminAPI) DeleteInstanceAccessControlAttributeConfigurationWithContext(arg0 context.Context, arg1 *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationInput, arg2 ...request.Option) (*ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstanceAccessControlAttributeConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceAccessControlAttributeConfigurationWithContext indicates an expected call of DeleteInstanceAccessControlAttributeConfigurationWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeleteInstanceAccessControlAttributeConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceAccessControlAttributeConfigurationWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteInstanceAccessControlAttributeConfigurationWithContext), varargs...)
}

// DeleteInstanceRequest mocks base method
func (m *MockSSOAdminAPI) DeleteInstanceRequest(arg0 *ssoadmin.DeleteInstanceInput) (*request.Request, *ssoadmin.DeleteInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeleteInstanceOutput)
	return ret0, ret1
}

// DeleteInstanceRequest indicates an expected call of DeleteInstanceRequest
func (mr *MockSSOAdminAPIMockRecorder) DeleteInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteInstanceRequest), arg0)
}

// DeleteInstanceWithContext mocks base method
func (m *MockSSOAdminAPI) DeleteInstanceWithContext(arg0 context.Context, arg1 *ssoadmin.DeleteInstanceInput, arg2 ...request.Option) (*ssoadmin.DeleteInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeleteInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceWithContext indicates an expected call of DeleteInstanceWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeleteInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteInstanceWithContext), varargs...)
}

// DeletePermissionSet mocks base method
func (m *MockSSOAdminAPI) DeletePermissionSet(arg0 *ssoadmin.DeletePermissionSetInput) (*ssoadmin.DeletePermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeletePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionSet indicates an expected call of DeletePermissionSet
func (mr *MockSSOAdminAPIMockRecorder) DeletePermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeletePermissionSet), arg0)
}

// DeletePermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) DeletePermissionSetRequest(arg0 *ssoadmin.DeletePermissionSetInput) (*request.Request, *ssoadmin.DeletePermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeletePermissionSetOutput)
	return ret0, ret1
}

// DeletePermissionSetRequest indicates an expected call of DeletePermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) DeletePermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeletePermissionSetRequest), arg0)
}

// DeletePermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) DeletePermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.DeletePermissionSetInput, arg2 ...request.Option) (*ssoadmin.DeletePermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeletePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionSetWithContext indicates an expected call of DeletePermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeletePermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeletePermissionSetWithContext), varargs...)
}

// DeletePermissionsBoundaryFromPermissionSet mocks base method
func (m *MockSSOAdminAPI) DeletePermissionsBoundaryFromPermissionSet(arg0 *ssoadmin.DeletePermissionsBoundaryFromPermissionSetInput) (*ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionsBoundaryFromPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionsBoundaryFromPermissionSet indicates an expected call of DeletePermissionsBoundaryFromPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) DeletePermissionsBoundaryFromPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionsBoundaryFromPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeletePermissionsBoundaryFromPermissionSet), arg0)
}

// DeletePermissionsBoundaryFromPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) DeletePermissionsBoundaryFromPermissionSetRequest(arg0 *ssoadmin.DeletePermissionsBoundaryFromPermissionSetInput) (*request.Request, *ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionsBoundaryFromPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput)
	return ret0, ret1
}

// DeletePermissionsBoundaryFromPermissionSetRequest indicates an expected call of DeletePermissionsBoundaryFromPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) DeletePermissionsBoundaryFromPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionsBoundaryFromPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeletePermissionsBoundaryFromPermissionSetRequest), arg0)
}

// DeletePermissionsBoundaryFromPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) DeletePermissionsBoundaryFromPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.DeletePermissionsBoundaryFromPermissionSetInput, arg2 ...request.Option) (*ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermissionsBoundaryFromPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionsBoundaryFromPermissionSetWithContext indicates an expected call of DeletePermissionsBoundaryFromPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeletePermissionsBoundaryFromPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionsBoundaryFromPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeletePermissionsBoundaryFromPermissionSetWithContext), varargs...)
}

// DeleteTrustedTokenIssuer mocks base method
func (m *MockSSOAdminAPI) DeleteTrustedTokenIssuer(arg0 *ssoadmin.DeleteTrustedTokenIssuerInput) (*ssoadmin.DeleteTrustedTokenIssuerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrustedTokenIssuer", arg0)
	ret0, _ := ret[0].(*ssoadmin.DeleteTrustedTokenIssuerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrustedTokenIssuer indicates an expected call of DeleteTrustedTokenIssuer
func (mr *MockSSOAdminAPIMockRecorder) DeleteTrustedTokenIssuer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrustedTokenIssuer", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteTrustedTokenIssuer), arg0)
}

// DeleteTrustedTokenIssuerRequest mocks base method
func (m *MockSSOAdminAPI) DeleteTrustedTokenIssuerRequest(arg0 *ssoadmin.DeleteTrustedTokenIssuerInput) (*request.Request, *ssoadmin.DeleteTrustedTokenIssuerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrustedTokenIssuerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DeleteTrustedTokenIssuerOutput)
	return ret0, ret1
}

// DeleteTrustedTokenIssuerRequest indicates an expected call of DeleteTrustedTokenIssuerRequest
func (mr *MockSSOAdminAPIMockRecorder) DeleteTrustedTokenIssuerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrustedTokenIssuerRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteTrustedTokenIssuerRequest), arg0)
}

// DeleteTrustedTokenIssuerWithContext mocks base method
func (m *MockSSOAdminAPI) DeleteTrustedTokenIssuerWithContext(arg0 context.Context, arg1 *ssoadmin.DeleteTrustedTokenIssuerInput, arg2 ...request.Option) (*ssoadmin.DeleteTrustedTokenIssuerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrustedTokenIssuerWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DeleteTrustedTokenIssuerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrustedTokenIssuerWithContext indicates an expected call of DeleteTrustedTokenIssuerWithContext
func (mr *MockSSOAdminAPIMockRecorder) DeleteTrustedTokenIssuerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrustedTokenIssuerWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DeleteTrustedTokenIssuerWithContext), varargs...)
}

// DescribeAccountAssignmentCreationStatus mocks base method
func (m *MockSSOAdminAPI) DescribeAccountAssignmentCreationStatus(arg0 *ssoadmin.DescribeAccountAssignmentCreationStatusInput) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountAssignmentCreationStatus", arg0)
	ret0, _ := ret[0].(*ssoadmin.DescribeAccountAssignmentCreationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAssignmentCreationStatus indicates an expected call of DescribeAccountAssignmentCreationStatus
func (mr *MockSSOAdminAPIMockRecorder) DescribeAccountAssignmentCreationStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAssignmentCreationStatus", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeAccountAssignmentCreationStatus), arg0)
}

// DescribeAccountAssignmentCreationStatusRequest mocks base method
func (m *MockSSOAdminAPI) DescribeAccountAssignmentCreationStatusRequest(arg0 *ssoadmin.DescribeAccountAssignmentCreationStatusInput) (*request.Request, *ssoadmin.DescribeAccountAssignmentCreationStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountAssignmentCreationStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DescribeAccountAssignmentCreationStatusOutput)
	return ret0, ret1
}

// DescribeAccountAssignmentCreationStatusRequest indicates an expected call of DescribeAccountAssignmentCreationStatusRequest
func (mr *MockSSOAdminAPIMockRecorder) DescribeAccountAssignmentCreationStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAssignmentCreationStatusRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeAccountAssignmentCreationStatusRequest), arg0)
}

// DescribeAccountAssignmentCreationStatusWithContext mocks base method
func (m *MockSSOAdminAPI) DescribeAccountAssignmentCreationStatusWithContext(arg0 context.Context, arg1 *ssoadmin.DescribeAccountAssignmentCreationStatusInput, arg2 ...request.Option) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAssignmentCreationStatusWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeAccountAssignmentCreationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAssignmentCreationStatusWithContext indicates an expected call of DescribeAccountAssignmentCreationStatusWithContext
func (mr *MockSSOAdminAPIMockRecorder) DescribeAccountAssignmentCreationStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAssignmentCreationStatusWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeAccountAssignmentCreationStatusWithContext), varargs...)
}

// DescribeAccountAssignmentDeletionStatus mocks base method
func (m *MockSSOAdminAPI) DescribeAccountAssignmentDeletionStatus(arg0 *ssoadmin.DescribeAccountAssignmentDeletionStatusInput) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountAssignmentDeletionStatus", arg0)
	ret0, _ := ret[0].(*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAssignmentDeletionStatus indicates an expected call of DescribeAccountAssignmentDeletionStatus
func (mr *MockSSOAdminAPIMockRecorder) DescribeAccountAssignmentDeletionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAssignmentDeletionStatus", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeAccountAssignmentDeletionStatus), arg0)
}

// DescribeAccountAssignmentDeletionStatusRequest mocks base method
func (m *MockSSOAdminAPI) DescribeAccountAssignmentDeletionStatusRequest(arg0 *ssoadmin.DescribeAccountAssignmentDeletionStatusInput) (*request.Request, *ssoadmin.DescribeAccountAssignmentDeletionStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountAssignmentDeletionStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput)
	return ret0, ret1
}

// DescribeAccountAssignmentDeletionStatusRequest indicates an expected call of DescribeAccountAssignmentDeletionStatusRequest
func (mr *MockSSOAdminAPIMockRecorder) DescribeAccountAssignmentDeletionStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAssignmentDeletionStatusRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeAccountAssignmentDeletionStatusRequest), arg0)
}

// DescribeAccountAssignmentDeletionStatusWithContext mocks base method
func (m *MockSSOAdminAPI) DescribeAccountAssignmentDeletionStatusWithContext(arg0 context.Context, arg1 *ssoadmin.DescribeAccountAssignmentDeletionStatusInput, arg2 ...request.Option) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAssignmentDeletionStatusWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAssignmentDeletionStatusWithContext indicates an expected call of DescribeAccountAssignmentDeletionStatusWithContext
func (mr *MockSSOAdminAPIMockRecorder) DescribeAccountAssignmentDeletionStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAssignmentDeletionStatusWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeAccountAssignmentDeletionStatusWithContext), varargs...)
}

// DescribeApplication mocks base method
func (m *MockSSOAdminAPI) DescribeApplication(arg0 *ssoadmin.DescribeApplicationInput) (*ssoadmin.DescribeApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplication", arg0)
	ret0, _ := ret[0].(*ssoadmin.DescribeApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplication indicates an expected call of DescribeApplication
func (mr *MockSSOAdminAPIMockRecorder) DescribeApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplication", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeApplication), arg0)
}

// DescribeApplicationAssignment mocks base method
func (m *MockSSOAdminAPI) DescribeApplicationAssignment(arg0 *ssoadmin.DescribeApplicationAssignmentInput) (*ssoadmin.DescribeApplicationAssignmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationAssignment", arg0)
	ret0, _ := ret[0].(*ssoadmin.DescribeApplicationAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationAssignment indicates an expected call of DescribeApplicationAssignment
func (mr *MockSSOAdminAPIMockRecorder) DescribeApplicationAssignment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationAssignment", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeApplicationAssignment), arg0)
}

// DescribeApplicationAssignmentRequest mocks base method
func (m *MockSSOAdminAPI) DescribeApplicationAssignmentRequest(arg0 *ssoadmin.DescribeApplicationAssignmentInput) (*request.Request, *ssoadmin.DescribeApplicationAssignmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationAssignmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DescribeApplicationAssignmentOutput)
	return ret0, ret1
}

// DescribeApplicationAssignmentRequest indicates an expected call of DescribeApplicationAssignmentRequest
func (mr *MockSSOAdminAPIMockRecorder) DescribeApplicationAssignmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationAssignmentRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeApplicationAssignmentRequest), arg0)
}

// DescribeApplicationAssignmentWithContext mocks base method
func (m *MockSSOAdminAPI) DescribeApplicationAssignmentWithContext(arg0 context.Context, arg1 *ssoadmin.DescribeApplicationAssignmentInput, arg2 ...request.Option) (*ssoadmin.DescribeApplicationAssignmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplicationAssignmentWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeApplicationAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationAssignmentWithContext indicates an expected call of DescribeApplicationAssignmentWithContext
func (mr *MockSSOAdminAPIMockRecorder) DescribeApplicationAssignmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationAssignmentWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeApplicationAssignmentWithContext), varargs...)
}

// DescribeApplicationProvider mocks base method
func (m *MockSSOAdminAPI) DescribeApplicationProvider(arg0 *ssoadmin.DescribeApplicationProviderInput) (*ssoadmin.DescribeApplicationProviderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationProvider", arg0)
	ret0, _ := ret[0].(*ssoadmin.DescribeApplicationProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationProvider indicates an expected call of DescribeApplicationProvider
func (mr *MockSSOAdminAPIMockRecorder) DescribeApplicationProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationProvider", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeApplicationProvider), arg0)
}

// DescribeApplicationProviderRequest mocks base method
func (m *MockSSOAdminAPI) DescribeApplicationProviderRequest(arg0 *ssoadmin.DescribeApplicationProviderInput) (*request.Request, *ssoadmin.DescribeApplicationProviderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationProviderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DescribeApplicationProviderOutput)
	return ret0, ret1
}

// DescribeApplicationProviderRequest indicates an expected call of DescribeApplicationProviderRequest
func (mr *MockSSOAdminAPIMockRecorder) DescribeApplicationProviderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationProviderRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeApplicationProviderRequest), arg0)
}

// DescribeApplicationProviderWithContext mocks base method
func (m *MockSSOAdminAPI) DescribeApplicationProviderWithContext(arg0 context.Context, arg1 *ssoadmin.DescribeApplicationProviderInput, arg2 ...request.Option) (*ssoadmin.DescribeApplicationProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplicationProviderWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeApplicationProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationProviderWithContext indicates an expected call of DescribeApplicationProviderWithContext
func (mr *MockSSOAdminAPIMockRecorder) DescribeApplicationProviderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationProviderWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeApplicationProviderWithContext), varargs...)
}

// DescribeApplicationRequest mocks base method
func (m *MockSSOAdminAPI) DescribeApplicationRequest(arg0 *ssoadmin.DescribeApplicationInput) (*request.Request, *ssoadmin.DescribeApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DescribeApplicationOutput)
	return ret0, ret1
}

// DescribeApplicationRequest indicates an expected call of DescribeApplicationRequest
func (mr *MockSSOAdminAPIMockRecorder) DescribeApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeApplicationRequest), arg0)
}

// DescribeApplicationWithContext mocks base method
func (m *MockSSOAdminAPI) DescribeApplicationWithContext(arg0 context.Context, arg1 *ssoadmin.DescribeApplicationInput, arg2 ...request.Option) (*ssoadmin.DescribeApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationWithContext indicates an expected call of DescribeApplicationWithContext
func (mr *MockSSOAdminAPIMockRecorder) DescribeApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeApplicationWithContext), varargs...)
}

// DescribeInstance mocks base method
func (m *MockSSOAdminAPI) DescribeInstance(arg0 *ssoadmin.DescribeInstanceInput) (*ssoadmin.DescribeInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstance", arg0)
	ret0, _ := ret[0].(*ssoadmin.DescribeInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstance indicates an expected call of DescribeInstance
func (mr *MockSSOAdminAPIMockRecorder) DescribeInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstance", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeInstance), arg0)
}

// DescribeInstanceAccessControlAttributeConfiguration mocks base method
func (m *MockSSOAdminAPI) DescribeInstanceAccessControlAttributeConfiguration(arg0 *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput) (*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceAccessControlAttributeConfiguration", arg0)
	ret0, _ := ret[0].(*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceAccessControlAttributeConfiguration indicates an expected call of DescribeInstanceAccessControlAttributeConfiguration
func (mr *MockSSOAdminAPIMockRecorder) DescribeInstanceAccessControlAttributeConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAccessControlAttributeConfiguration", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeInstanceAccessControlAttributeConfiguration), arg0)
}

// DescribeInstanceAccessControlAttributeConfigurationRequest mocks base method
func (m *MockSSOAdminAPI) DescribeInstanceAccessControlAttributeConfigurationRequest(arg0 *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput) (*request.Request, *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceAccessControlAttributeConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput)
	return ret0, ret1
}

// DescribeInstanceAccessControlAttributeConfigurationRequest indicates an expected call of DescribeInstanceAccessControlAttributeConfigurationRequest
func (mr *MockSSOAdminAPIMockRecorder) DescribeInstanceAccessControlAttributeConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAccessControlAttributeConfigurationRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeInstanceAccessControlAttributeConfigurationRequest), arg0)
}

// DescribeInstanceAccessControlAttributeConfigurationWithContext mocks base method
func (m *MockSSOAdminAPI) DescribeInstanceAccessControlAttributeConfigurationWithContext(arg0 context.Context, arg1 *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput, arg2 ...request.Option) (*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceAccessControlAttributeConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceAccessControlAttributeConfigurationWithContext indicates an expected call of DescribeInstanceAccessControlAttributeConfigurationWithContext
func (mr *MockSSOAdminAPIMockRecorder) DescribeInstanceAccessControlAttributeConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAccessControlAttributeConfigurationWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeInstanceAccessControlAttributeConfigurationWithContext), varargs...)
}

// DescribeInstanceRequest mocks base method
func (m *MockSSOAdminAPI) DescribeInstanceRequest(arg0 *ssoadmin.DescribeInstanceInput) (*request.Request, *ssoadmin.DescribeInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DescribeInstanceOutput)
	return ret0, ret1
}

// DescribeInstanceRequest indicates an expected call of DescribeInstanceRequest
func (mr *MockSSOAdminAPIMockRecorder) DescribeInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeInstanceRequest), arg0)
}

// DescribeInstanceWithContext mocks base method
func (m *MockSSOAdminAPI) DescribeInstanceWithContext(arg0 context.Context, arg1 *ssoadmin.DescribeInstanceInput, arg2 ...request.Option) (*ssoadmin.DescribeInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceWithContext indicates an expected call of DescribeInstanceWithContext
func (mr *MockSSOAdminAPIMockRecorder) DescribeInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeInstanceWithContext), varargs...)
}

// DescribePermissionSet mocks base method
func (m *MockSSOAdminAPI) DescribePermissionSet(arg0 *ssoadmin.DescribePermissionSetInput) (*ssoadmin.DescribePermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.DescribePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissionSet indicates an expected call of DescribePermissionSet
func (mr *MockSSOAdminAPIMockRecorder) DescribePermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribePermissionSet), arg0)
}

// DescribePermissionSetProvisioningStatus mocks base method
func (m *MockSSOAdminAPI) DescribePermissionSetProvisioningStatus(arg0 *ssoadmin.DescribePermissionSetProvisioningStatusInput) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePermissionSetProvisioningStatus", arg0)
	ret0, _ := ret[0].(*ssoadmin.DescribePermissionSetProvisioningStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissionSetProvisioningStatus indicates an expected call of DescribePermissionSetProvisioningStatus
func (mr *MockSSOAdminAPIMockRecorder) DescribePermissionSetProvisioningStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSetProvisioningStatus", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribePermissionSetProvisioningStatus), arg0)
}

// DescribePermissionSetProvisioningStatusRequest mocks base method
func (m *MockSSOAdminAPI) DescribePermissionSetProvisioningStatusRequest(arg0 *ssoadmin.DescribePermissionSetProvisioningStatusInput) (*request.Request, *ssoadmin.DescribePermissionSetProvisioningStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePermissionSetProvisioningStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DescribePermissionSetProvisioningStatusOutput)
	return ret0, ret1
}

// DescribePermissionSetProvisioningStatusRequest indicates an expected call of DescribePermissionSetProvisioningStatusRequest
func (mr *MockSSOAdminAPIMockRecorder) DescribePermissionSetProvisioningStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSetProvisioningStatusRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribePermissionSetProvisioningStatusRequest), arg0)
}

// DescribePermissionSetProvisioningStatusWithContext mocks base method
func (m *MockSSOAdminAPI) DescribePermissionSetProvisioningStatusWithContext(arg0 context.Context, arg1 *ssoadmin.DescribePermissionSetProvisioningStatusInput, arg2 ...request.Option) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePermissionSetProvisioningStatusWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribePermissionSetProvisioningStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissionSetProvisioningStatusWithContext indicates an expected call of DescribePermissionSetProvisioningStatusWithContext
func (mr *MockSSOAdminAPIMockRecorder) DescribePermissionSetProvisioningStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSetProvisioningStatusWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribePermissionSetProvisioningStatusWithContext), varargs...)
}

// DescribePermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) DescribePermissionSetRequest(arg0 *ssoadmin.DescribePermissionSetInput) (*request.Request, *ssoadmin.DescribePermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DescribePermissionSetOutput)
	return ret0, ret1
}

// DescribePermissionSetRequest indicates an expected call of DescribePermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) DescribePermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribePermissionSetRequest), arg0)
}

// DescribePermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) DescribePermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.DescribePermissionSetInput, arg2 ...request.Option) (*ssoadmin.DescribePermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissionSetWithContext indicates an expected call of DescribePermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) DescribePermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribePermissionSetWithContext), varargs...)
}

// DescribeTrustedTokenIssuer mocks base method
func (m *MockSSOAdminAPI) DescribeTrustedTokenIssuer(arg0 *ssoadmin.DescribeTrustedTokenIssuerInput) (*ssoadmin.DescribeTrustedTokenIssuerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTrustedTokenIssuer", arg0)
	ret0, _ := ret[0].(*ssoadmin.DescribeTrustedTokenIssuerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrustedTokenIssuer indicates an expected call of DescribeTrustedTokenIssuer
func (mr *MockSSOAdminAPIMockRecorder) DescribeTrustedTokenIssuer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrustedTokenIssuer", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeTrustedTokenIssuer), arg0)
}

// DescribeTrustedTokenIssuerRequest mocks base method
func (m *MockSSOAdminAPI) DescribeTrustedTokenIssuerRequest(arg0 *ssoadmin.DescribeTrustedTokenIssuerInput) (*request.Request, *ssoadmin.DescribeTrustedTokenIssuerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTrustedTokenIssuerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DescribeTrustedTokenIssuerOutput)
	return ret0, ret1
}

// DescribeTrustedTokenIssuerRequest indicates an expected call of DescribeTrustedTokenIssuerRequest
func (mr *MockSSOAdminAPIMockRecorder) DescribeTrustedTokenIssuerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrustedTokenIssuerRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeTrustedTokenIssuerRequest), arg0)
}

// DescribeTrustedTokenIssuerWithContext mocks base method
func (m *MockSSOAdminAPI) DescribeTrustedTokenIssuerWithContext(arg0 context.Context, arg1 *ssoadmin.DescribeTrustedTokenIssuerInput, arg2 ...request.Option) (*ssoadmin.DescribeTrustedTokenIssuerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrustedTokenIssuerWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeTrustedTokenIssuerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrustedTokenIssuerWithContext indicates an expected call of DescribeTrustedTokenIssuerWithContext
func (mr *MockSSOAdminAPIMockRecorder) DescribeTrustedTokenIssuerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrustedTokenIssuerWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DescribeTrustedTokenIssuerWithContext), varargs...)
}

// DetachCustomerManagedPolicyReferenceFromPermissionSet mocks base method
func (m *MockSSOAdminAPI) DetachCustomerManagedPolicyReferenceFromPermissionSet(arg0 *ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetInput) (*ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachCustomerManagedPolicyReferenceFromPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachCustomerManagedPolicyReferenceFromPermissionSet indicates an expected call of DetachCustomerManagedPolicyReferenceFromPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) DetachCustomerManagedPolicyReferenceFromPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachCustomerManagedPolicyReferenceFromPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).DetachCustomerManagedPolicyReferenceFromPermissionSet), arg0)
}

// DetachCustomerManagedPolicyReferenceFromPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) DetachCustomerManagedPolicyReferenceFromPermissionSetRequest(arg0 *ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetInput) (*request.Request, *ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachCustomerManagedPolicyReferenceFromPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput)
	return ret0, ret1
}

// DetachCustomerManagedPolicyReferenceFromPermissionSetRequest indicates an expected call of DetachCustomerManagedPolicyReferenceFromPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) DetachCustomerManagedPolicyReferenceFromPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachCustomerManagedPolicyReferenceFromPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DetachCustomerManagedPolicyReferenceFromPermissionSetRequest), arg0)
}

// DetachCustomerManagedPolicyReferenceFromPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) DetachCustomerManagedPolicyReferenceFromPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetInput, arg2 ...request.Option) (*ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachCustomerManagedPolicyReferenceFromPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachCustomerManagedPolicyReferenceFromPermissionSetWithContext indicates an expected call of DetachCustomerManagedPolicyReferenceFromPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) DetachCustomerManagedPolicyReferenceFromPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachCustomerManagedPolicyReferenceFromPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DetachCustomerManagedPolicyReferenceFromPermissionSetWithContext), varargs...)
}

// DetachManagedPolicyFromPermissionSet mocks base method
func (m *MockSSOAdminAPI) DetachManagedPolicyFromPermissionSet(arg0 *ssoadmin.DetachManagedPolicyFromPermissionSetInput) (*ssoadmin.DetachManagedPolicyFromPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachManagedPolicyFromPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.DetachManagedPolicyFromPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachManagedPolicyFromPermissionSet indicates an expected call of DetachManagedPolicyFromPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) DetachManagedPolicyFromPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachManagedPolicyFromPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).DetachManagedPolicyFromPermissionSet), arg0)
}

// DetachManagedPolicyFromPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) DetachManagedPolicyFromPermissionSetRequest(arg0 *ssoadmin.DetachManagedPolicyFromPermissionSetInput) (*request.Request, *ssoadmin.DetachManagedPolicyFromPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachManagedPolicyFromPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.DetachManagedPolicyFromPermissionSetOutput)
	return ret0, ret1
}

// DetachManagedPolicyFromPermissionSetRequest indicates an expected call of DetachManagedPolicyFromPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) DetachManagedPolicyFromPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachManagedPolicyFromPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).DetachManagedPolicyFromPermissionSetRequest), arg0)
}

// DetachManagedPolicyFromPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) DetachManagedPolicyFromPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.DetachManagedPolicyFromPermissionSetInput, arg2 ...request.Option) (*ssoadmin.DetachManagedPolicyFromPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachManagedPolicyFromPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DetachManagedPolicyFromPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachManagedPolicyFromPermissionSetWithContext indicates an expected call of DetachManagedPolicyFromPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) DetachManagedPolicyFromPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachManagedPolicyFromPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).DetachManagedPolicyFromPermissionSetWithContext), varargs...)
}

// GetApplicationAccessScope mocks base method
func (m *MockSSOAdminAPI) GetApplicationAccessScope(arg0 *ssoadmin.GetApplicationAccessScopeInput) (*ssoadmin.GetApplicationAccessScopeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAccessScope", arg0)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationAccessScopeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAccessScope indicates an expected call of GetApplicationAccessScope
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationAccessScope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAccessScope", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationAccessScope), arg0)
}

// GetApplicationAccessScopeRequest mocks base method
func (m *MockSSOAdminAPI) GetApplicationAccessScopeRequest(arg0 *ssoadmin.GetApplicationAccessScopeInput) (*request.Request, *ssoadmin.GetApplicationAccessScopeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAccessScopeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.GetApplicationAccessScopeOutput)
	return ret0, ret1
}

// GetApplicationAccessScopeRequest indicates an expected call of GetApplicationAccessScopeRequest
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationAccessScopeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAccessScopeRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationAccessScopeRequest), arg0)
}

// GetApplicationAccessScopeWithContext mocks base method
func (m *MockSSOAdminAPI) GetApplicationAccessScopeWithContext(arg0 context.Context, arg1 *ssoadmin.GetApplicationAccessScopeInput, arg2 ...request.Option) (*ssoadmin.GetApplicationAccessScopeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationAccessScopeWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationAccessScopeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAccessScopeWithContext indicates an expected call of GetApplicationAccessScopeWithContext
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationAccessScopeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAccessScopeWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationAccessScopeWithContext), varargs...)
}

// GetApplicationAssignmentConfiguration mocks base method
func (m *MockSSOAdminAPI) GetApplicationAssignmentConfiguration(arg0 *ssoadmin.GetApplicationAssignmentConfigurationInput) (*ssoadmin.GetApplicationAssignmentConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAssignmentConfiguration", arg0)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationAssignmentConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAssignmentConfiguration indicates an expected call of GetApplicationAssignmentConfiguration
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationAssignmentConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAssignmentConfiguration", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationAssignmentConfiguration), arg0)
}

// GetApplicationAssignmentConfigurationRequest mocks base method
func (m *MockSSOAdminAPI) GetApplicationAssignmentConfigurationRequest(arg0 *ssoadmin.GetApplicationAssignmentConfigurationInput) (*request.Request, *ssoadmin.GetApplicationAssignmentConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAssignmentConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.GetApplicationAssignmentConfigurationOutput)
	return ret0, ret1
}

// GetApplicationAssignmentConfigurationRequest indicates an expected call of GetApplicationAssignmentConfigurationRequest
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationAssignmentConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAssignmentConfigurationRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationAssignmentConfigurationRequest), arg0)
}

// GetApplicationAssignmentConfigurationWithContext mocks base method
func (m *MockSSOAdminAPI) GetApplicationAssignmentConfigurationWithContext(arg0 context.Context, arg1 *ssoadmin.GetApplicationAssignmentConfigurationInput, arg2 ...request.Option) (*ssoadmin.GetApplicationAssignmentConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationAssignmentConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationAssignmentConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAssignmentConfigurationWithContext indicates an expected call of GetApplicationAssignmentConfigurationWithContext
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationAssignmentConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAssignmentConfigurationWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationAssignmentConfigurationWithContext), varargs...)
}

// GetApplicationAuthenticationMethod mocks base method
func (m *MockSSOAdminAPI) GetApplicationAuthenticationMethod(arg0 *ssoadmin.GetApplicationAuthenticationMethodInput) (*ssoadmin.GetApplicationAuthenticationMethodOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAuthenticationMethod", arg0)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationAuthenticationMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAuthenticationMethod indicates an expected call of GetApplicationAuthenticationMethod
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationAuthenticationMethod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAuthenticationMethod", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationAuthenticationMethod), arg0)
}

// GetApplicationAuthenticationMethodRequest mocks base method
func (m *MockSSOAdminAPI) GetApplicationAuthenticationMethodRequest(arg0 *ssoadmin.GetApplicationAuthenticationMethodInput) (*request.Request, *ssoadmin.GetApplicationAuthenticationMethodOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAuthenticationMethodRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.GetApplicationAuthenticationMethodOutput)
	return ret0, ret1
}

// GetApplicationAuthenticationMethodRequest indicates an expected call of GetApplicationAuthenticationMethodRequest
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationAuthenticationMethodRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAuthenticationMethodRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationAuthenticationMethodRequest), arg0)
}

// GetApplicationAuthenticationMethodWithContext mocks base method
func (m *MockSSOAdminAPI) GetApplicationAuthenticationMethodWithContext(arg0 context.Context, arg1 *ssoadmin.GetApplicationAuthenticationMethodInput, arg2 ...request.Option) (*ssoadmin.GetApplicationAuthenticationMethodOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationAuthenticationMethodWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationAuthenticationMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAuthenticationMethodWithContext indicates an expected call of GetApplicationAuthenticationMethodWithContext
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationAuthenticationMethodWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAuthenticationMethodWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationAuthenticationMethodWithContext), varargs...)
}

// GetApplicationGrant mocks base method
func (m *MockSSOAdminAPI) GetApplicationGrant(arg0 *ssoadmin.GetApplicationGrantInput) (*ssoadmin.GetApplicationGrantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationGrant", arg0)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationGrant indicates an expected call of GetApplicationGrant
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationGrant", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationGrant), arg0)
}

// GetApplicationGrantRequest mocks base method
func (m *MockSSOAdminAPI) GetApplicationGrantRequest(arg0 *ssoadmin.GetApplicationGrantInput) (*request.Request, *ssoadmin.GetApplicationGrantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationGrantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.GetApplicationGrantOutput)
	return ret0, ret1
}

// GetApplicationGrantRequest indicates an expected call of GetApplicationGrantRequest
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationGrantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationGrantRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationGrantRequest), arg0)
}

// GetApplicationGrantWithContext mocks base method
func (m *MockSSOAdminAPI) GetApplicationGrantWithContext(arg0 context.Context, arg1 *ssoadmin.GetApplicationGrantInput, arg2 ...request.Option) (*ssoadmin.GetApplicationGrantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationGrantWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationGrantWithContext indicates an expected call of GetApplicationGrantWithContext
func (mr *MockSSOAdminAPIMockRecorder) GetApplicationGrantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationGrantWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetApplicationGrantWithContext), varargs...)
}

// GetInlinePolicyForPermissionSet mocks base method
func (m *MockSSOAdminAPI) GetInlinePolicyForPermissionSet(arg0 *ssoadmin.GetInlinePolicyForPermissionSetInput) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInlinePolicyForPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.GetInlinePolicyForPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInlinePolicyForPermissionSet indicates an expected call of GetInlinePolicyForPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) GetInlinePolicyForPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlinePolicyForPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetInlinePolicyForPermissionSet), arg0)
}

// GetInlinePolicyForPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) GetInlinePolicyForPermissionSetRequest(arg0 *ssoadmin.GetInlinePolicyForPermissionSetInput) (*request.Request, *ssoadmin.GetInlinePolicyForPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInlinePolicyForPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.GetInlinePolicyForPermissionSetOutput)
	return ret0, ret1
}

// GetInlinePolicyForPermissionSetRequest indicates an expected call of GetInlinePolicyForPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) GetInlinePolicyForPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlinePolicyForPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetInlinePolicyForPermissionSetRequest), arg0)
}

// GetInlinePolicyForPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) GetInlinePolicyForPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.GetInlinePolicyForPermissionSetInput, arg2 ...request.Option) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInlinePolicyForPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetInlinePolicyForPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInlinePolicyForPermissionSetWithContext indicates an expected call of GetInlinePolicyForPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) GetInlinePolicyForPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlinePolicyForPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetInlinePolicyForPermissionSetWithContext), varargs...)
}

// GetPermissionsBoundaryForPermissionSet mocks base method
func (m *MockSSOAdminAPI) GetPermissionsBoundaryForPermissionSet(arg0 *ssoadmin.GetPermissionsBoundaryForPermissionSetInput) (*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsBoundaryForPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsBoundaryForPermissionSet indicates an expected call of GetPermissionsBoundaryForPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) GetPermissionsBoundaryForPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsBoundaryForPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetPermissionsBoundaryForPermissionSet), arg0)
}

// GetPermissionsBoundaryForPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) GetPermissionsBoundaryForPermissionSetRequest(arg0 *ssoadmin.GetPermissionsBoundaryForPermissionSetInput) (*request.Request, *ssoadmin.GetPermissionsBoundaryForPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsBoundaryForPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput)
	return ret0, ret1
}

// GetPermissionsBoundaryForPermissionSetRequest indicates an expected call of GetPermissionsBoundaryForPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) GetPermissionsBoundaryForPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsBoundaryForPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetPermissionsBoundaryForPermissionSetRequest), arg0)
}

// GetPermissionsBoundaryForPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) GetPermissionsBoundaryForPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.GetPermissionsBoundaryForPermissionSetInput, arg2 ...request.Option) (*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPermissionsBoundaryForPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsBoundaryForPermissionSetWithContext indicates an expected call of GetPermissionsBoundaryForPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) GetPermissionsBoundaryForPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsBoundaryForPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).GetPermissionsBoundaryForPermissionSetWithContext), varargs...)
}

// ListAccountAssignmentCreationStatus mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentCreationStatus(arg0 *ssoadmin.ListAccountAssignmentCreationStatusInput) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentCreationStatus", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentCreationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentCreationStatus indicates an expected call of ListAccountAssignmentCreationStatus
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentCreationStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentCreationStatus", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentCreationStatus), arg0)
}

// ListAccountAssignmentCreationStatusPages mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentCreationStatusPages(arg0 *ssoadmin.ListAccountAssignmentCreationStatusInput, arg1 func(*ssoadmin.ListAccountAssignmentCreationStatusOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentCreationStatusPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountAssignmentCreationStatusPages indicates an expected call of ListAccountAssignmentCreationStatusPages
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentCreationStatusPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentCreationStatusPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentCreationStatusPages), arg0, arg1)
}

// ListAccountAssignmentCreationStatusPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentCreationStatusPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentCreationStatusInput, arg2 func(*ssoadmin.ListAccountAssignmentCreationStatusOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentCreationStatusPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountAssignmentCreationStatusPagesWithContext indicates an expected call of ListAccountAssignmentCreationStatusPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentCreationStatusPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentCreationStatusPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentCreationStatusPagesWithContext), varargs...)
}

// ListAccountAssignmentCreationStatusRequest mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentCreationStatusRequest(arg0 *ssoadmin.ListAccountAssignmentCreationStatusInput) (*request.Request, *ssoadmin.ListAccountAssignmentCreationStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentCreationStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListAccountAssignmentCreationStatusOutput)
	return ret0, ret1
}

// ListAccountAssignmentCreationStatusRequest indicates an expected call of ListAccountAssignmentCreationStatusRequest
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentCreationStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentCreationStatusRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentCreationStatusRequest), arg0)
}

// ListAccountAssignmentCreationStatusWithContext mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentCreationStatusWithContext(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentCreationStatusInput, arg2 ...request.Option) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentCreationStatusWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentCreationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentCreationStatusWithContext indicates an expected call of ListAccountAssignmentCreationStatusWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentCreationStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentCreationStatusWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentCreationStatusWithContext), varargs...)
}

// ListAccountAssignmentDeletionStatus mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentDeletionStatus(arg0 *ssoadmin.ListAccountAssignmentDeletionStatusInput) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentDeletionStatus", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentDeletionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentDeletionStatus indicates an expected call of ListAccountAssignmentDeletionStatus
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentDeletionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentDeletionStatus", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentDeletionStatus), arg0)
}

// ListAccountAssignmentDeletionStatusPages mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentDeletionStatusPages(arg0 *ssoadmin.ListAccountAssignmentDeletionStatusInput, arg1 func(*ssoadmin.ListAccountAssignmentDeletionStatusOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentDeletionStatusPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountAssignmentDeletionStatusPages indicates an expected call of ListAccountAssignmentDeletionStatusPages
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentDeletionStatusPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentDeletionStatusPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentDeletionStatusPages), arg0, arg1)
}

// ListAccountAssignmentDeletionStatusPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentDeletionStatusPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentDeletionStatusInput, arg2 func(*ssoadmin.ListAccountAssignmentDeletionStatusOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentDeletionStatusPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountAssignmentDeletionStatusPagesWithContext indicates an expected call of ListAccountAssignmentDeletionStatusPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentDeletionStatusPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentDeletionStatusPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentDeletionStatusPagesWithContext), varargs...)
}

// ListAccountAssignmentDeletionStatusRequest mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentDeletionStatusRequest(arg0 *ssoadmin.ListAccountAssignmentDeletionStatusInput) (*request.Request, *ssoadmin.ListAccountAssignmentDeletionStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentDeletionStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListAccountAssignmentDeletionStatusOutput)
	return ret0, ret1
}

// ListAccountAssignmentDeletionStatusRequest indicates an expected call of ListAccountAssignmentDeletionStatusRequest
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentDeletionStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentDeletionStatusRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentDeletionStatusRequest), arg0)
}

// ListAccountAssignmentDeletionStatusWithContext mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentDeletionStatusWithContext(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentDeletionStatusInput, arg2 ...request.Option) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentDeletionStatusWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentDeletionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentDeletionStatusWithContext indicates an expected call of ListAccountAssignmentDeletionStatusWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentDeletionStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentDeletionStatusWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentDeletionStatusWithContext), varargs...)
}

// ListAccountAssignments mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignments(arg0 *ssoadmin.ListAccountAssignmentsInput) (*ssoadmin.ListAccountAssignmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignments", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignments indicates an expected call of ListAccountAssignments
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignments", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignments), arg0)
}

// ListAccountAssignmentsForPrincipal mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentsForPrincipal(arg0 *ssoadmin.ListAccountAssignmentsForPrincipalInput) (*ssoadmin.ListAccountAssignmentsForPrincipalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentsForPrincipal", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentsForPrincipalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentsForPrincipal indicates an expected call of ListAccountAssignmentsForPrincipal
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentsForPrincipal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentsForPrincipal", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentsForPrincipal), arg0)
}

// ListAccountAssignmentsForPrincipalPages mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentsForPrincipalPages(arg0 *ssoadmin.ListAccountAssignmentsForPrincipalInput, arg1 func(*ssoadmin.ListAccountAssignmentsForPrincipalOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentsForPrincipalPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountAssignmentsForPrincipalPages indicates an expected call of ListAccountAssignmentsForPrincipalPages
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentsForPrincipalPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentsForPrincipalPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentsForPrincipalPages), arg0, arg1)
}

// ListAccountAssignmentsForPrincipalPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentsForPrincipalPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentsForPrincipalInput, arg2 func(*ssoadmin.ListAccountAssignmentsForPrincipalOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentsForPrincipalPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountAssignmentsForPrincipalPagesWithContext indicates an expected call of ListAccountAssignmentsForPrincipalPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentsForPrincipalPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentsForPrincipalPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentsForPrincipalPagesWithContext), varargs...)
}

// ListAccountAssignmentsForPrincipalRequest mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentsForPrincipalRequest(arg0 *ssoadmin.ListAccountAssignmentsForPrincipalInput) (*request.Request, *ssoadmin.ListAccountAssignmentsForPrincipalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentsForPrincipalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListAccountAssignmentsForPrincipalOutput)
	return ret0, ret1
}

// ListAccountAssignmentsForPrincipalRequest indicates an expected call of ListAccountAssignmentsForPrincipalRequest
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentsForPrincipalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentsForPrincipalRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentsForPrincipalRequest), arg0)
}

// ListAccountAssignmentsForPrincipalWithContext mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentsForPrincipalWithContext(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentsForPrincipalInput, arg2 ...request.Option) (*ssoadmin.ListAccountAssignmentsForPrincipalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentsForPrincipalWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentsForPrincipalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentsForPrincipalWithContext indicates an expected call of ListAccountAssignmentsForPrincipalWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentsForPrincipalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentsForPrincipalWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentsForPrincipalWithContext), varargs...)
}

// ListAccountAssignmentsPages mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentsPages(arg0 *ssoadmin.ListAccountAssignmentsInput, arg1 func(*ssoadmin.ListAccountAssignmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountAssignmentsPages indicates an expected call of ListAccountAssignmentsPages
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentsPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentsPages), arg0, arg1)
}

// ListAccountAssignmentsPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentsPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentsInput, arg2 func(*ssoadmin.ListAccountAssignmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountAssignmentsPagesWithContext indicates an expected call of ListAccountAssignmentsPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentsPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentsPagesWithContext), varargs...)
}

// ListAccountAssignmentsRequest mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentsRequest(arg0 *ssoadmin.ListAccountAssignmentsInput) (*request.Request, *ssoadmin.ListAccountAssignmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssignmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListAccountAssignmentsOutput)
	return ret0, ret1
}

// ListAccountAssignmentsRequest indicates an expected call of ListAccountAssignmentsRequest
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentsRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentsRequest), arg0)
}

// ListAccountAssignmentsWithContext mocks base method
func (m *MockSSOAdminAPI) ListAccountAssignmentsWithContext(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentsInput, arg2 ...request.Option) (*ssoadmin.ListAccountAssignmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentsWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentsWithContext indicates an expected call of ListAccountAssignmentsWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListAccountAssignmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentsWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountAssignmentsWithContext), varargs...)
}

// ListAccountsForProvisionedPermissionSet mocks base method
func (m *MockSSOAdminAPI) ListAccountsForProvisionedPermissionSet(arg0 *ssoadmin.ListAccountsForProvisionedPermissionSetInput) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsForProvisionedPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListAccountsForProvisionedPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsForProvisionedPermissionSet indicates an expected call of ListAccountsForProvisionedPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) ListAccountsForProvisionedPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsForProvisionedPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountsForProvisionedPermissionSet), arg0)
}

// ListAccountsForProvisionedPermissionSetPages mocks base method
func (m *MockSSOAdminAPI) ListAccountsForProvisionedPermissionSetPages(arg0 *ssoadmin.ListAccountsForProvisionedPermissionSetInput, arg1 func(*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsForProvisionedPermissionSetPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountsForProvisionedPermissionSetPages indicates an expected call of ListAccountsForProvisionedPermissionSetPages
func (mr *MockSSOAdminAPIMockRecorder) ListAccountsForProvisionedPermissionSetPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsForProvisionedPermissionSetPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountsForProvisionedPermissionSetPages), arg0, arg1)
}

// ListAccountsForProvisionedPermissionSetPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListAccountsForProvisionedPermissionSetPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListAccountsForProvisionedPermissionSetInput, arg2 func(*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsForProvisionedPermissionSetPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountsForProvisionedPermissionSetPagesWithContext indicates an expected call of ListAccountsForProvisionedPermissionSetPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListAccountsForProvisionedPermissionSetPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsForProvisionedPermissionSetPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountsForProvisionedPermissionSetPagesWithContext), varargs...)
}

// ListAccountsForProvisionedPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) ListAccountsForProvisionedPermissionSetRequest(arg0 *ssoadmin.ListAccountsForProvisionedPermissionSetInput) (*request.Request, *ssoadmin.ListAccountsForProvisionedPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsForProvisionedPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListAccountsForProvisionedPermissionSetOutput)
	return ret0, ret1
}

// ListAccountsForProvisionedPermissionSetRequest indicates an expected call of ListAccountsForProvisionedPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) ListAccountsForProvisionedPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsForProvisionedPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountsForProvisionedPermissionSetRequest), arg0)
}

// ListAccountsForProvisionedPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) ListAccountsForProvisionedPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.ListAccountsForProvisionedPermissionSetInput, arg2 ...request.Option) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsForProvisionedPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountsForProvisionedPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsForProvisionedPermissionSetWithContext indicates an expected call of ListAccountsForProvisionedPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListAccountsForProvisionedPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsForProvisionedPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListAccountsForProvisionedPermissionSetWithContext), varargs...)
}

// ListApplicationAccessScopes mocks base method
func (m *MockSSOAdminAPI) ListApplicationAccessScopes(arg0 *ssoadmin.ListApplicationAccessScopesInput) (*ssoadmin.ListApplicationAccessScopesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAccessScopes", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAccessScopesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAccessScopes indicates an expected call of ListApplicationAccessScopes
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAccessScopes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAccessScopes", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAccessScopes), arg0)
}

// ListApplicationAccessScopesPages mocks base method
func (m *MockSSOAdminAPI) ListApplicationAccessScopesPages(arg0 *ssoadmin.ListApplicationAccessScopesInput, arg1 func(*ssoadmin.ListApplicationAccessScopesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAccessScopesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationAccessScopesPages indicates an expected call of ListApplicationAccessScopesPages
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAccessScopesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAccessScopesPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAccessScopesPages), arg0, arg1)
}

// ListApplicationAccessScopesPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationAccessScopesPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationAccessScopesInput, arg2 func(*ssoadmin.ListApplicationAccessScopesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAccessScopesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationAccessScopesPagesWithContext indicates an expected call of ListApplicationAccessScopesPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAccessScopesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAccessScopesPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAccessScopesPagesWithContext), varargs...)
}

// ListApplicationAccessScopesRequest mocks base method
func (m *MockSSOAdminAPI) ListApplicationAccessScopesRequest(arg0 *ssoadmin.ListApplicationAccessScopesInput) (*request.Request, *ssoadmin.ListApplicationAccessScopesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAccessScopesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListApplicationAccessScopesOutput)
	return ret0, ret1
}

// ListApplicationAccessScopesRequest indicates an expected call of ListApplicationAccessScopesRequest
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAccessScopesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAccessScopesRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAccessScopesRequest), arg0)
}

// ListApplicationAccessScopesWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationAccessScopesWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationAccessScopesInput, arg2 ...request.Option) (*ssoadmin.ListApplicationAccessScopesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAccessScopesWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAccessScopesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAccessScopesWithContext indicates an expected call of ListApplicationAccessScopesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAccessScopesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAccessScopesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAccessScopesWithContext), varargs...)
}

// ListApplicationAssignments mocks base method
func (m *MockSSOAdminAPI) ListApplicationAssignments(arg0 *ssoadmin.ListApplicationAssignmentsInput) (*ssoadmin.ListApplicationAssignmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAssignments", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAssignmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAssignments indicates an expected call of ListApplicationAssignments
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAssignments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignments", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAssignments), arg0)
}

// ListApplicationAssignmentsForPrincipal mocks base method
func (m *MockSSOAdminAPI) ListApplicationAssignmentsForPrincipal(arg0 *ssoadmin.ListApplicationAssignmentsForPrincipalInput) (*ssoadmin.ListApplicationAssignmentsForPrincipalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAssignmentsForPrincipal", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAssignmentsForPrincipalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAssignmentsForPrincipal indicates an expected call of ListApplicationAssignmentsForPrincipal
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAssignmentsForPrincipal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignmentsForPrincipal", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAssignmentsForPrincipal), arg0)
}

// ListApplicationAssignmentsForPrincipalPages mocks base method
func (m *MockSSOAdminAPI) ListApplicationAssignmentsForPrincipalPages(arg0 *ssoadmin.ListApplicationAssignmentsForPrincipalInput, arg1 func(*ssoadmin.ListApplicationAssignmentsForPrincipalOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAssignmentsForPrincipalPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationAssignmentsForPrincipalPages indicates an expected call of ListApplicationAssignmentsForPrincipalPages
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAssignmentsForPrincipalPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignmentsForPrincipalPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAssignmentsForPrincipalPages), arg0, arg1)
}

// ListApplicationAssignmentsForPrincipalPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationAssignmentsForPrincipalPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationAssignmentsForPrincipalInput, arg2 func(*ssoadmin.ListApplicationAssignmentsForPrincipalOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAssignmentsForPrincipalPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationAssignmentsForPrincipalPagesWithContext indicates an expected call of ListApplicationAssignmentsForPrincipalPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAssignmentsForPrincipalPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignmentsForPrincipalPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAssignmentsForPrincipalPagesWithContext), varargs...)
}

// ListApplicationAssignmentsForPrincipalRequest mocks base method
func (m *MockSSOAdminAPI) ListApplicationAssignmentsForPrincipalRequest(arg0 *ssoadmin.ListApplicationAssignmentsForPrincipalInput) (*request.Request, *ssoadmin.ListApplicationAssignmentsForPrincipalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAssignmentsForPrincipalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListApplicationAssignmentsForPrincipalOutput)
	return ret0, ret1
}

// ListApplicationAssignmentsForPrincipalRequest indicates an expected call of ListApplicationAssignmentsForPrincipalRequest
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAssignmentsForPrincipalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignmentsForPrincipalRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAssignmentsForPrincipalRequest), arg0)
}

// ListApplicationAssignmentsForPrincipalWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationAssignmentsForPrincipalWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationAssignmentsForPrincipalInput, arg2 ...request.Option) (*ssoadmin.ListApplicationAssignmentsForPrincipalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAssignmentsForPrincipalWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAssignmentsForPrincipalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAssignmentsForPrincipalWithContext indicates an expected call of ListApplicationAssignmentsForPrincipalWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAssignmentsForPrincipalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignmentsForPrincipalWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAssignmentsForPrincipalWithContext), varargs...)
}

// ListApplicationAssignmentsPages mocks base method
func (m *MockSSOAdminAPI) ListApplicationAssignmentsPages(arg0 *ssoadmin.ListApplicationAssignmentsInput, arg1 func(*ssoadmin.ListApplicationAssignmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAssignmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationAssignmentsPages indicates an expected call of ListApplicationAssignmentsPages
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAssignmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignmentsPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAssignmentsPages), arg0, arg1)
}

// ListApplicationAssignmentsPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationAssignmentsPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationAssignmentsInput, arg2 func(*ssoadmin.ListApplicationAssignmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAssignmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationAssignmentsPagesWithContext indicates an expected call of ListApplicationAssignmentsPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAssignmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignmentsPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAssignmentsPagesWithContext), varargs...)
}

// ListApplicationAssignmentsRequest mocks base method
func (m *MockSSOAdminAPI) ListApplicationAssignmentsRequest(arg0 *ssoadmin.ListApplicationAssignmentsInput) (*request.Request, *ssoadmin.ListApplicationAssignmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAssignmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListApplicationAssignmentsOutput)
	return ret0, ret1
}

// ListApplicationAssignmentsRequest indicates an expected call of ListApplicationAssignmentsRequest
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAssignmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignmentsRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAssignmentsRequest), arg0)
}

// ListApplicationAssignmentsWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationAssignmentsWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationAssignmentsInput, arg2 ...request.Option) (*ssoadmin.ListApplicationAssignmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAssignmentsWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAssignmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAssignmentsWithContext indicates an expected call of ListApplicationAssignmentsWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAssignmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignmentsWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAssignmentsWithContext), varargs...)
}

// ListApplicationAuthenticationMethods mocks base method
func (m *MockSSOAdminAPI) ListApplicationAuthenticationMethods(arg0 *ssoadmin.ListApplicationAuthenticationMethodsInput) (*ssoadmin.ListApplicationAuthenticationMethodsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAuthenticationMethods", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAuthenticationMethodsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAuthenticationMethods indicates an expected call of ListApplicationAuthenticationMethods
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAuthenticationMethods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAuthenticationMethods", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAuthenticationMethods), arg0)
}

// ListApplicationAuthenticationMethodsPages mocks base method
func (m *MockSSOAdminAPI) ListApplicationAuthenticationMethodsPages(arg0 *ssoadmin.ListApplicationAuthenticationMethodsInput, arg1 func(*ssoadmin.ListApplicationAuthenticationMethodsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAuthenticationMethodsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationAuthenticationMethodsPages indicates an expected call of ListApplicationAuthenticationMethodsPages
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAuthenticationMethodsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAuthenticationMethodsPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAuthenticationMethodsPages), arg0, arg1)
}

// ListApplicationAuthenticationMethodsPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationAuthenticationMethodsPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationAuthenticationMethodsInput, arg2 func(*ssoadmin.ListApplicationAuthenticationMethodsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAuthenticationMethodsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationAuthenticationMethodsPagesWithContext indicates an expected call of ListApplicationAuthenticationMethodsPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAuthenticationMethodsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAuthenticationMethodsPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAuthenticationMethodsPagesWithContext), varargs...)
}

// ListApplicationAuthenticationMethodsRequest mocks base method
func (m *MockSSOAdminAPI) ListApplicationAuthenticationMethodsRequest(arg0 *ssoadmin.ListApplicationAuthenticationMethodsInput) (*request.Request, *ssoadmin.ListApplicationAuthenticationMethodsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationAuthenticationMethodsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListApplicationAuthenticationMethodsOutput)
	return ret0, ret1
}

// ListApplicationAuthenticationMethodsRequest indicates an expected call of ListApplicationAuthenticationMethodsRequest
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAuthenticationMethodsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAuthenticationMethodsRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAuthenticationMethodsRequest), arg0)
}

// ListApplicationAuthenticationMethodsWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationAuthenticationMethodsWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationAuthenticationMethodsInput, arg2 ...request.Option) (*ssoadmin.ListApplicationAuthenticationMethodsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAuthenticationMethodsWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAuthenticationMethodsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAuthenticationMethodsWithContext indicates an expected call of ListApplicationAuthenticationMethodsWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationAuthenticationMethodsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAuthenticationMethodsWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationAuthenticationMethodsWithContext), varargs...)
}

// ListApplicationGrants mocks base method
func (m *MockSSOAdminAPI) ListApplicationGrants(arg0 *ssoadmin.ListApplicationGrantsInput) (*ssoadmin.ListApplicationGrantsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationGrants", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationGrantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationGrants indicates an expected call of ListApplicationGrants
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationGrants(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationGrants", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationGrants), arg0)
}

// ListApplicationGrantsPages mocks base method
func (m *MockSSOAdminAPI) ListApplicationGrantsPages(arg0 *ssoadmin.ListApplicationGrantsInput, arg1 func(*ssoadmin.ListApplicationGrantsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationGrantsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationGrantsPages indicates an expected call of ListApplicationGrantsPages
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationGrantsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationGrantsPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationGrantsPages), arg0, arg1)
}

// ListApplicationGrantsPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationGrantsPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationGrantsInput, arg2 func(*ssoadmin.ListApplicationGrantsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationGrantsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationGrantsPagesWithContext indicates an expected call of ListApplicationGrantsPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationGrantsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationGrantsPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationGrantsPagesWithContext), varargs...)
}

// ListApplicationGrantsRequest mocks base method
func (m *MockSSOAdminAPI) ListApplicationGrantsRequest(arg0 *ssoadmin.ListApplicationGrantsInput) (*request.Request, *ssoadmin.ListApplicationGrantsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationGrantsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListApplicationGrantsOutput)
	return ret0, ret1
}

// ListApplicationGrantsRequest indicates an expected call of ListApplicationGrantsRequest
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationGrantsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationGrantsRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationGrantsRequest), arg0)
}

// ListApplicationGrantsWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationGrantsWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationGrantsInput, arg2 ...request.Option) (*ssoadmin.ListApplicationGrantsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationGrantsWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationGrantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationGrantsWithContext indicates an expected call of ListApplicationGrantsWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationGrantsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationGrantsWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationGrantsWithContext), varargs...)
}

// ListApplicationProviders mocks base method
func (m *MockSSOAdminAPI) ListApplicationProviders(arg0 *ssoadmin.ListApplicationProvidersInput) (*ssoadmin.ListApplicationProvidersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationProviders", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationProviders indicates an expected call of ListApplicationProviders
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationProviders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationProviders", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationProviders), arg0)
}

// ListApplicationProvidersPages mocks base method
func (m *MockSSOAdminAPI) ListApplicationProvidersPages(arg0 *ssoadmin.ListApplicationProvidersInput, arg1 func(*ssoadmin.ListApplicationProvidersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationProvidersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationProvidersPages indicates an expected call of ListApplicationProvidersPages
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationProvidersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationProvidersPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationProvidersPages), arg0, arg1)
}

// ListApplicationProvidersPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationProvidersPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationProvidersInput, arg2 func(*ssoadmin.ListApplicationProvidersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationProvidersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationProvidersPagesWithContext indicates an expected call of ListApplicationProvidersPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationProvidersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationProvidersPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationProvidersPagesWithContext), varargs...)
}

// ListApplicationProvidersRequest mocks base method
func (m *MockSSOAdminAPI) ListApplicationProvidersRequest(arg0 *ssoadmin.ListApplicationProvidersInput) (*request.Request, *ssoadmin.ListApplicationProvidersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationProvidersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListApplicationProvidersOutput)
	return ret0, ret1
}

// ListApplicationProvidersRequest indicates an expected call of ListApplicationProvidersRequest
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationProvidersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationProvidersRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationProvidersRequest), arg0)
}

// ListApplicationProvidersWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationProvidersWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationProvidersInput, arg2 ...request.Option) (*ssoadmin.ListApplicationProvidersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationProvidersWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationProvidersWithContext indicates an expected call of ListApplicationProvidersWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationProvidersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationProvidersWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationProvidersWithContext), varargs...)
}

// ListApplications mocks base method
func (m *MockSSOAdminAPI) ListApplications(arg0 *ssoadmin.ListApplicationsInput) (*ssoadmin.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockSSOAdminAPIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method
func (m *MockSSOAdminAPI) ListApplicationsPages(arg0 *ssoadmin.ListApplicationsInput, arg1 func(*ssoadmin.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationsInput, arg2 func(*ssoadmin.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method
func (m *MockSSOAdminAPI) ListApplicationsRequest(arg0 *ssoadmin.ListApplicationsInput) (*request.Request, *ssoadmin.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method
func (m *MockSSOAdminAPI) ListApplicationsWithContext(arg0 context.Context, arg1 *ssoadmin.ListApplicationsInput, arg2 ...request.Option) (*ssoadmin.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListApplicationsWithContext), varargs...)
}

// ListCustomerManagedPolicyReferencesInPermissionSet mocks base method
func (m *MockSSOAdminAPI) ListCustomerManagedPolicyReferencesInPermissionSet(arg0 *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput) (*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerManagedPolicyReferencesInPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerManagedPolicyReferencesInPermissionSet indicates an expected call of ListCustomerManagedPolicyReferencesInPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) ListCustomerManagedPolicyReferencesInPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerManagedPolicyReferencesInPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListCustomerManagedPolicyReferencesInPermissionSet), arg0)
}

// ListCustomerManagedPolicyReferencesInPermissionSetPages mocks base method
func (m *MockSSOAdminAPI) ListCustomerManagedPolicyReferencesInPermissionSetPages(arg0 *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput, arg1 func(*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerManagedPolicyReferencesInPermissionSetPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomerManagedPolicyReferencesInPermissionSetPages indicates an expected call of ListCustomerManagedPolicyReferencesInPermissionSetPages
func (mr *MockSSOAdminAPIMockRecorder) ListCustomerManagedPolicyReferencesInPermissionSetPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerManagedPolicyReferencesInPermissionSetPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListCustomerManagedPolicyReferencesInPermissionSetPages), arg0, arg1)
}

// ListCustomerManagedPolicyReferencesInPermissionSetPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListCustomerManagedPolicyReferencesInPermissionSetPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput, arg2 func(*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomerManagedPolicyReferencesInPermissionSetPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomerManagedPolicyReferencesInPermissionSetPagesWithContext indicates an expected call of ListCustomerManagedPolicyReferencesInPermissionSetPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListCustomerManagedPolicyReferencesInPermissionSetPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerManagedPolicyReferencesInPermissionSetPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListCustomerManagedPolicyReferencesInPermissionSetPagesWithContext), varargs...)
}

// ListCustomerManagedPolicyReferencesInPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) ListCustomerManagedPolicyReferencesInPermissionSetRequest(arg0 *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput) (*request.Request, *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerManagedPolicyReferencesInPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput)
	return ret0, ret1
}

// ListCustomerManagedPolicyReferencesInPermissionSetRequest indicates an expected call of ListCustomerManagedPolicyReferencesInPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) ListCustomerManagedPolicyReferencesInPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerManagedPolicyReferencesInPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListCustomerManagedPolicyReferencesInPermissionSetRequest), arg0)
}

// ListCustomerManagedPolicyReferencesInPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) ListCustomerManagedPolicyReferencesInPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput, arg2 ...request.Option) (*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomerManagedPolicyReferencesInPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerManagedPolicyReferencesInPermissionSetWithContext indicates an expected call of ListCustomerManagedPolicyReferencesInPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListCustomerManagedPolicyReferencesInPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerManagedPolicyReferencesInPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListCustomerManagedPolicyReferencesInPermissionSetWithContext), varargs...)
}

// ListInstances mocks base method
func (m *MockSSOAdminAPI) ListInstances(arg0 *ssoadmin.ListInstancesInput) (*ssoadmin.ListInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances
func (mr *MockSSOAdminAPIMockRecorder) ListInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListInstances), arg0)
}

// ListInstancesPages mocks base method
func (m *MockSSOAdminAPI) ListInstancesPages(arg0 *ssoadmin.ListInstancesInput, arg1 func(*ssoadmin.ListInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstancesPages indicates an expected call of ListInstancesPages
func (mr *MockSSOAdminAPIMockRecorder) ListInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListInstancesPages), arg0, arg1)
}

// ListInstancesPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListInstancesPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListInstancesInput, arg2 func(*ssoadmin.ListInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstancesPagesWithContext indicates an expected call of ListInstancesPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListInstancesPagesWithContext), varargs...)
}

// ListInstancesRequest mocks base method
func (m *MockSSOAdminAPI) ListInstancesRequest(arg0 *ssoadmin.ListInstancesInput) (*request.Request, *ssoadmin.ListInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListInstancesOutput)
	return ret0, ret1
}

// ListInstancesRequest indicates an expected call of ListInstancesRequest
func (mr *MockSSOAdminAPIMockRecorder) ListInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListInstancesRequest), arg0)
}

// ListInstancesWithContext mocks base method
func (m *MockSSOAdminAPI) ListInstancesWithContext(arg0 context.Context, arg1 *ssoadmin.ListInstancesInput, arg2 ...request.Option) (*ssoadmin.ListInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstancesWithContext indicates an expected call of ListInstancesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListInstancesWithContext), varargs...)
}

// ListManagedPoliciesInPermissionSet mocks base method
func (m *MockSSOAdminAPI) ListManagedPoliciesInPermissionSet(arg0 *ssoadmin.ListManagedPoliciesInPermissionSetInput) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagedPoliciesInPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListManagedPoliciesInPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagedPoliciesInPermissionSet indicates an expected call of ListManagedPoliciesInPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) ListManagedPoliciesInPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedPoliciesInPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListManagedPoliciesInPermissionSet), arg0)
}

// ListManagedPoliciesInPermissionSetPages mocks base method
func (m *MockSSOAdminAPI) ListManagedPoliciesInPermissionSetPages(arg0 *ssoadmin.ListManagedPoliciesInPermissionSetInput, arg1 func(*ssoadmin.ListManagedPoliciesInPermissionSetOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagedPoliciesInPermissionSetPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListManagedPoliciesInPermissionSetPages indicates an expected call of ListManagedPoliciesInPermissionSetPages
func (mr *MockSSOAdminAPIMockRecorder) ListManagedPoliciesInPermissionSetPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedPoliciesInPermissionSetPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListManagedPoliciesInPermissionSetPages), arg0, arg1)
}

// ListManagedPoliciesInPermissionSetPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListManagedPoliciesInPermissionSetPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListManagedPoliciesInPermissionSetInput, arg2 func(*ssoadmin.ListManagedPoliciesInPermissionSetOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListManagedPoliciesInPermissionSetPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListManagedPoliciesInPermissionSetPagesWithContext indicates an expected call of ListManagedPoliciesInPermissionSetPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListManagedPoliciesInPermissionSetPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedPoliciesInPermissionSetPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListManagedPoliciesInPermissionSetPagesWithContext), varargs...)
}

// ListManagedPoliciesInPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) ListManagedPoliciesInPermissionSetRequest(arg0 *ssoadmin.ListManagedPoliciesInPermissionSetInput) (*request.Request, *ssoadmin.ListManagedPoliciesInPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagedPoliciesInPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListManagedPoliciesInPermissionSetOutput)
	return ret0, ret1
}

// ListManagedPoliciesInPermissionSetRequest indicates an expected call of ListManagedPoliciesInPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) ListManagedPoliciesInPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedPoliciesInPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListManagedPoliciesInPermissionSetRequest), arg0)
}

// ListManagedPoliciesInPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) ListManagedPoliciesInPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.ListManagedPoliciesInPermissionSetInput, arg2 ...request.Option) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListManagedPoliciesInPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListManagedPoliciesInPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagedPoliciesInPermissionSetWithContext indicates an expected call of ListManagedPoliciesInPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListManagedPoliciesInPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedPoliciesInPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListManagedPoliciesInPermissionSetWithContext), varargs...)
}

// ListPermissionSetProvisioningStatus mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetProvisioningStatus(arg0 *ssoadmin.ListPermissionSetProvisioningStatusInput) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionSetProvisioningStatus", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetProvisioningStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSetProvisioningStatus indicates an expected call of ListPermissionSetProvisioningStatus
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetProvisioningStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetProvisioningStatus", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetProvisioningStatus), arg0)
}

// ListPermissionSetProvisioningStatusPages mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetProvisioningStatusPages(arg0 *ssoadmin.ListPermissionSetProvisioningStatusInput, arg1 func(*ssoadmin.ListPermissionSetProvisioningStatusOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionSetProvisioningStatusPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionSetProvisioningStatusPages indicates an expected call of ListPermissionSetProvisioningStatusPages
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetProvisioningStatusPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetProvisioningStatusPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetProvisioningStatusPages), arg0, arg1)
}

// ListPermissionSetProvisioningStatusPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetProvisioningStatusPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetProvisioningStatusInput, arg2 func(*ssoadmin.ListPermissionSetProvisioningStatusOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSetProvisioningStatusPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionSetProvisioningStatusPagesWithContext indicates an expected call of ListPermissionSetProvisioningStatusPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetProvisioningStatusPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetProvisioningStatusPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetProvisioningStatusPagesWithContext), varargs...)
}

// ListPermissionSetProvisioningStatusRequest mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetProvisioningStatusRequest(arg0 *ssoadmin.ListPermissionSetProvisioningStatusInput) (*request.Request, *ssoadmin.ListPermissionSetProvisioningStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionSetProvisioningStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListPermissionSetProvisioningStatusOutput)
	return ret0, ret1
}

// ListPermissionSetProvisioningStatusRequest indicates an expected call of ListPermissionSetProvisioningStatusRequest
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetProvisioningStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetProvisioningStatusRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetProvisioningStatusRequest), arg0)
}

// ListPermissionSetProvisioningStatusWithContext mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetProvisioningStatusWithContext(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetProvisioningStatusInput, arg2 ...request.Option) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSetProvisioningStatusWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetProvisioningStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSetProvisioningStatusWithContext indicates an expected call of ListPermissionSetProvisioningStatusWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetProvisioningStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetProvisioningStatusWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetProvisioningStatusWithContext), varargs...)
}

// ListPermissionSets mocks base method
func (m *MockSSOAdminAPI) ListPermissionSets(arg0 *ssoadmin.ListPermissionSetsInput) (*ssoadmin.ListPermissionSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionSets", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSets indicates an expected call of ListPermissionSets
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSets", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSets), arg0)
}

// ListPermissionSetsPages mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetsPages(arg0 *ssoadmin.ListPermissionSetsInput, arg1 func(*ssoadmin.ListPermissionSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionSetsPages indicates an expected call of ListPermissionSetsPages
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetsPages), arg0, arg1)
}

// ListPermissionSetsPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetsPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetsInput, arg2 func(*ssoadmin.ListPermissionSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionSetsPagesWithContext indicates an expected call of ListPermissionSetsPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetsPagesWithContext), varargs...)
}

// ListPermissionSetsProvisionedToAccount mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetsProvisionedToAccount(arg0 *ssoadmin.ListPermissionSetsProvisionedToAccountInput) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionSetsProvisionedToAccount", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetsProvisionedToAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSetsProvisionedToAccount indicates an expected call of ListPermissionSetsProvisionedToAccount
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetsProvisionedToAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsProvisionedToAccount", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetsProvisionedToAccount), arg0)
}

// ListPermissionSetsProvisionedToAccountPages mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetsProvisionedToAccountPages(arg0 *ssoadmin.ListPermissionSetsProvisionedToAccountInput, arg1 func(*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionSetsProvisionedToAccountPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionSetsProvisionedToAccountPages indicates an expected call of ListPermissionSetsProvisionedToAccountPages
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetsProvisionedToAccountPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsProvisionedToAccountPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetsProvisionedToAccountPages), arg0, arg1)
}

// ListPermissionSetsProvisionedToAccountPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetsProvisionedToAccountPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetsProvisionedToAccountInput, arg2 func(*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSetsProvisionedToAccountPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionSetsProvisionedToAccountPagesWithContext indicates an expected call of ListPermissionSetsProvisionedToAccountPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetsProvisionedToAccountPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsProvisionedToAccountPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetsProvisionedToAccountPagesWithContext), varargs...)
}

// ListPermissionSetsProvisionedToAccountRequest mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetsProvisionedToAccountRequest(arg0 *ssoadmin.ListPermissionSetsProvisionedToAccountInput) (*request.Request, *ssoadmin.ListPermissionSetsProvisionedToAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionSetsProvisionedToAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListPermissionSetsProvisionedToAccountOutput)
	return ret0, ret1
}

// ListPermissionSetsProvisionedToAccountRequest indicates an expected call of ListPermissionSetsProvisionedToAccountRequest
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetsProvisionedToAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsProvisionedToAccountRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetsProvisionedToAccountRequest), arg0)
}

// ListPermissionSetsProvisionedToAccountWithContext mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetsProvisionedToAccountWithContext(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetsProvisionedToAccountInput, arg2 ...request.Option) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSetsProvisionedToAccountWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetsProvisionedToAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSetsProvisionedToAccountWithContext indicates an expected call of ListPermissionSetsProvisionedToAccountWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetsProvisionedToAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsProvisionedToAccountWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetsProvisionedToAccountWithContext), varargs...)
}

// ListPermissionSetsRequest mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetsRequest(arg0 *ssoadmin.ListPermissionSetsInput) (*request.Request, *ssoadmin.ListPermissionSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListPermissionSetsOutput)
	return ret0, ret1
}

// ListPermissionSetsRequest indicates an expected call of ListPermissionSetsRequest
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetsRequest), arg0)
}

// ListPermissionSetsWithContext mocks base method
func (m *MockSSOAdminAPI) ListPermissionSetsWithContext(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetsInput, arg2 ...request.Option) (*ssoadmin.ListPermissionSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSetsWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSetsWithContext indicates an expected call of ListPermissionSetsWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListPermissionSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListPermissionSetsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockSSOAdminAPI) ListTagsForResource(arg0 *ssoadmin.ListTagsForResourceInput) (*ssoadmin.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockSSOAdminAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method
func (m *MockSSOAdminAPI) ListTagsForResourcePages(arg0 *ssoadmin.ListTagsForResourceInput, arg1 func(*ssoadmin.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages
func (mr *MockSSOAdminAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListTagsForResourceInput, arg2 func(*ssoadmin.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method
func (m *MockSSOAdminAPI) ListTagsForResourceRequest(arg0 *ssoadmin.ListTagsForResourceInput) (*request.Request, *ssoadmin.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockSSOAdminAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockSSOAdminAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *ssoadmin.ListTagsForResourceInput, arg2 ...request.Option) (*ssoadmin.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTrustedTokenIssuers mocks base method
func (m *MockSSOAdminAPI) ListTrustedTokenIssuers(arg0 *ssoadmin.ListTrustedTokenIssuersInput) (*ssoadmin.ListTrustedTokenIssuersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrustedTokenIssuers", arg0)
	ret0, _ := ret[0].(*ssoadmin.ListTrustedTokenIssuersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrustedTokenIssuers indicates an expected call of ListTrustedTokenIssuers
func (mr *MockSSOAdminAPIMockRecorder) ListTrustedTokenIssuers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustedTokenIssuers", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListTrustedTokenIssuers), arg0)
}

// ListTrustedTokenIssuersPages mocks base method
func (m *MockSSOAdminAPI) ListTrustedTokenIssuersPages(arg0 *ssoadmin.ListTrustedTokenIssuersInput, arg1 func(*ssoadmin.ListTrustedTokenIssuersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrustedTokenIssuersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrustedTokenIssuersPages indicates an expected call of ListTrustedTokenIssuersPages
func (mr *MockSSOAdminAPIMockRecorder) ListTrustedTokenIssuersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustedTokenIssuersPages", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListTrustedTokenIssuersPages), arg0, arg1)
}

// ListTrustedTokenIssuersPagesWithContext mocks base method
func (m *MockSSOAdminAPI) ListTrustedTokenIssuersPagesWithContext(arg0 context.Context, arg1 *ssoadmin.ListTrustedTokenIssuersInput, arg2 func(*ssoadmin.ListTrustedTokenIssuersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrustedTokenIssuersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrustedTokenIssuersPagesWithContext indicates an expected call of ListTrustedTokenIssuersPagesWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListTrustedTokenIssuersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustedTokenIssuersPagesWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListTrustedTokenIssuersPagesWithContext), varargs...)
}

// ListTrustedTokenIssuersRequest mocks base method
func (m *MockSSOAdminAPI) ListTrustedTokenIssuersRequest(arg0 *ssoadmin.ListTrustedTokenIssuersInput) (*request.Request, *ssoadmin.ListTrustedTokenIssuersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrustedTokenIssuersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ListTrustedTokenIssuersOutput)
	return ret0, ret1
}

// ListTrustedTokenIssuersRequest indicates an expected call of ListTrustedTokenIssuersRequest
func (mr *MockSSOAdminAPIMockRecorder) ListTrustedTokenIssuersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustedTokenIssuersRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListTrustedTokenIssuersRequest), arg0)
}

// ListTrustedTokenIssuersWithContext mocks base method
func (m *MockSSOAdminAPI) ListTrustedTokenIssuersWithContext(arg0 context.Context, arg1 *ssoadmin.ListTrustedTokenIssuersInput, arg2 ...request.Option) (*ssoadmin.ListTrustedTokenIssuersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrustedTokenIssuersWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListTrustedTokenIssuersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrustedTokenIssuersWithContext indicates an expected call of ListTrustedTokenIssuersWithContext
func (mr *MockSSOAdminAPIMockRecorder) ListTrustedTokenIssuersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustedTokenIssuersWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ListTrustedTokenIssuersWithContext), varargs...)
}

// ProvisionPermissionSet mocks base method
func (m *MockSSOAdminAPI) ProvisionPermissionSet(arg0 *ssoadmin.ProvisionPermissionSetInput) (*ssoadmin.ProvisionPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.ProvisionPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionPermissionSet indicates an expected call of ProvisionPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) ProvisionPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).ProvisionPermissionSet), arg0)
}

// ProvisionPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) ProvisionPermissionSetRequest(arg0 *ssoadmin.ProvisionPermissionSetInput) (*request.Request, *ssoadmin.ProvisionPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.ProvisionPermissionSetOutput)
	return ret0, ret1
}

// ProvisionPermissionSetRequest indicates an expected call of ProvisionPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) ProvisionPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).ProvisionPermissionSetRequest), arg0)
}

// ProvisionPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) ProvisionPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.ProvisionPermissionSetInput, arg2 ...request.Option) (*ssoadmin.ProvisionPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProvisionPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ProvisionPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionPermissionSetWithContext indicates an expected call of ProvisionPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) ProvisionPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).ProvisionPermissionSetWithContext), varargs...)
}

// PutApplicationAccessScope mocks base method
func (m *MockSSOAdminAPI) PutApplicationAccessScope(arg0 *ssoadmin.PutApplicationAccessScopeInput) (*ssoadmin.PutApplicationAccessScopeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplicationAccessScope", arg0)
	ret0, _ := ret[0].(*ssoadmin.PutApplicationAccessScopeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutApplicationAccessScope indicates an expected call of PutApplicationAccessScope
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationAccessScope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationAccessScope", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationAccessScope), arg0)
}

// PutApplicationAccessScopeRequest mocks base method
func (m *MockSSOAdminAPI) PutApplicationAccessScopeRequest(arg0 *ssoadmin.PutApplicationAccessScopeInput) (*request.Request, *ssoadmin.PutApplicationAccessScopeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplicationAccessScopeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.PutApplicationAccessScopeOutput)
	return ret0, ret1
}

// PutApplicationAccessScopeRequest indicates an expected call of PutApplicationAccessScopeRequest
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationAccessScopeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationAccessScopeRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationAccessScopeRequest), arg0)
}

// PutApplicationAccessScopeWithContext mocks base method
func (m *MockSSOAdminAPI) PutApplicationAccessScopeWithContext(arg0 context.Context, arg1 *ssoadmin.PutApplicationAccessScopeInput, arg2 ...request.Option) (*ssoadmin.PutApplicationAccessScopeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutApplicationAccessScopeWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.PutApplicationAccessScopeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutApplicationAccessScopeWithContext indicates an expected call of PutApplicationAccessScopeWithContext
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationAccessScopeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationAccessScopeWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationAccessScopeWithContext), varargs...)
}

// PutApplicationAssignmentConfiguration mocks base method
func (m *MockSSOAdminAPI) PutApplicationAssignmentConfiguration(arg0 *ssoadmin.PutApplicationAssignmentConfigurationInput) (*ssoadmin.PutApplicationAssignmentConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplicationAssignmentConfiguration", arg0)
	ret0, _ := ret[0].(*ssoadmin.PutApplicationAssignmentConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutApplicationAssignmentConfiguration indicates an expected call of PutApplicationAssignmentConfiguration
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationAssignmentConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationAssignmentConfiguration", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationAssignmentConfiguration), arg0)
}

// PutApplicationAssignmentConfigurationRequest mocks base method
func (m *MockSSOAdminAPI) PutApplicationAssignmentConfigurationRequest(arg0 *ssoadmin.PutApplicationAssignmentConfigurationInput) (*request.Request, *ssoadmin.PutApplicationAssignmentConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplicationAssignmentConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.PutApplicationAssignmentConfigurationOutput)
	return ret0, ret1
}

// PutApplicationAssignmentConfigurationRequest indicates an expected call of PutApplicationAssignmentConfigurationRequest
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationAssignmentConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationAssignmentConfigurationRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationAssignmentConfigurationRequest), arg0)
}

// PutApplicationAssignmentConfigurationWithContext mocks base method
func (m *MockSSOAdminAPI) PutApplicationAssignmentConfigurationWithContext(arg0 context.Context, arg1 *ssoadmin.PutApplicationAssignmentConfigurationInput, arg2 ...request.Option) (*ssoadmin.PutApplicationAssignmentConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutApplicationAssignmentConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.PutApplicationAssignmentConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutApplicationAssignmentConfigurationWithContext indicates an expected call of PutApplicationAssignmentConfigurationWithContext
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationAssignmentConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationAssignmentConfigurationWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationAssignmentConfigurationWithContext), varargs...)
}

// PutApplicationAuthenticationMethod mocks base method
func (m *MockSSOAdminAPI) PutApplicationAuthenticationMethod(arg0 *ssoadmin.PutApplicationAuthenticationMethodInput) (*ssoadmin.PutApplicationAuthenticationMethodOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplicationAuthenticationMethod", arg0)
	ret0, _ := ret[0].(*ssoadmin.PutApplicationAuthenticationMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutApplicationAuthenticationMethod indicates an expected call of PutApplicationAuthenticationMethod
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationAuthenticationMethod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationAuthenticationMethod", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationAuthenticationMethod), arg0)
}

// PutApplicationAuthenticationMethodRequest mocks base method
func (m *MockSSOAdminAPI) PutApplicationAuthenticationMethodRequest(arg0 *ssoadmin.PutApplicationAuthenticationMethodInput) (*request.Request, *ssoadmin.PutApplicationAuthenticationMethodOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplicationAuthenticationMethodRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.PutApplicationAuthenticationMethodOutput)
	return ret0, ret1
}

// PutApplicationAuthenticationMethodRequest indicates an expected call of PutApplicationAuthenticationMethodRequest
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationAuthenticationMethodRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationAuthenticationMethodRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationAuthenticationMethodRequest), arg0)
}

// PutApplicationAuthenticationMethodWithContext mocks base method
func (m *MockSSOAdminAPI) PutApplicationAuthenticationMethodWithContext(arg0 context.Context, arg1 *ssoadmin.PutApplicationAuthenticationMethodInput, arg2 ...request.Option) (*ssoadmin.PutApplicationAuthenticationMethodOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutApplicationAuthenticationMethodWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.PutApplicationAuthenticationMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutApplicationAuthenticationMethodWithContext indicates an expected call of PutApplicationAuthenticationMethodWithContext
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationAuthenticationMethodWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationAuthenticationMethodWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationAuthenticationMethodWithContext), varargs...)
}

// PutApplicationGrant mocks base method
func (m *MockSSOAdminAPI) PutApplicationGrant(arg0 *ssoadmin.PutApplicationGrantInput) (*ssoadmin.PutApplicationGrantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplicationGrant", arg0)
	ret0, _ := ret[0].(*ssoadmin.PutApplicationGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutApplicationGrant indicates an expected call of PutApplicationGrant
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationGrant", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationGrant), arg0)
}

// PutApplicationGrantRequest mocks base method
func (m *MockSSOAdminAPI) PutApplicationGrantRequest(arg0 *ssoadmin.PutApplicationGrantInput) (*request.Request, *ssoadmin.PutApplicationGrantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplicationGrantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.PutApplicationGrantOutput)
	return ret0, ret1
}

// PutApplicationGrantRequest indicates an expected call of PutApplicationGrantRequest
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationGrantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationGrantRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationGrantRequest), arg0)
}

// PutApplicationGrantWithContext mocks base method
func (m *MockSSOAdminAPI) PutApplicationGrantWithContext(arg0 context.Context, arg1 *ssoadmin.PutApplicationGrantInput, arg2 ...request.Option) (*ssoadmin.PutApplicationGrantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutApplicationGrantWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.PutApplicationGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutApplicationGrantWithContext indicates an expected call of PutApplicationGrantWithContext
func (mr *MockSSOAdminAPIMockRecorder) PutApplicationGrantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationGrantWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutApplicationGrantWithContext), varargs...)
}

// PutInlinePolicyToPermissionSet mocks base method
func (m *MockSSOAdminAPI) PutInlinePolicyToPermissionSet(arg0 *ssoadmin.PutInlinePolicyToPermissionSetInput) (*ssoadmin.PutInlinePolicyToPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInlinePolicyToPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.PutInlinePolicyToPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutInlinePolicyToPermissionSet indicates an expected call of PutInlinePolicyToPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) PutInlinePolicyToPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInlinePolicyToPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutInlinePolicyToPermissionSet), arg0)
}

// PutInlinePolicyToPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) PutInlinePolicyToPermissionSetRequest(arg0 *ssoadmin.PutInlinePolicyToPermissionSetInput) (*request.Request, *ssoadmin.PutInlinePolicyToPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInlinePolicyToPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.PutInlinePolicyToPermissionSetOutput)
	return ret0, ret1
}

// PutInlinePolicyToPermissionSetRequest indicates an expected call of PutInlinePolicyToPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) PutInlinePolicyToPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInlinePolicyToPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutInlinePolicyToPermissionSetRequest), arg0)
}

// PutInlinePolicyToPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) PutInlinePolicyToPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.PutInlinePolicyToPermissionSetInput, arg2 ...request.Option) (*ssoadmin.PutInlinePolicyToPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutInlinePolicyToPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.PutInlinePolicyToPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutInlinePolicyToPermissionSetWithContext indicates an expected call of PutInlinePolicyToPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) PutInlinePolicyToPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInlinePolicyToPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutInlinePolicyToPermissionSetWithContext), varargs...)
}

// PutPermissionsBoundaryToPermissionSet mocks base method
func (m *MockSSOAdminAPI) PutPermissionsBoundaryToPermissionSet(arg0 *ssoadmin.PutPermissionsBoundaryToPermissionSetInput) (*ssoadmin.PutPermissionsBoundaryToPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermissionsBoundaryToPermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.PutPermissionsBoundaryToPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermissionsBoundaryToPermissionSet indicates an expected call of PutPermissionsBoundaryToPermissionSet
func (mr *MockSSOAdminAPIMockRecorder) PutPermissionsBoundaryToPermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionsBoundaryToPermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutPermissionsBoundaryToPermissionSet), arg0)
}

// PutPermissionsBoundaryToPermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) PutPermissionsBoundaryToPermissionSetRequest(arg0 *ssoadmin.PutPermissionsBoundaryToPermissionSetInput) (*request.Request, *ssoadmin.PutPermissionsBoundaryToPermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermissionsBoundaryToPermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.PutPermissionsBoundaryToPermissionSetOutput)
	return ret0, ret1
}

// PutPermissionsBoundaryToPermissionSetRequest indicates an expected call of PutPermissionsBoundaryToPermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) PutPermissionsBoundaryToPermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionsBoundaryToPermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutPermissionsBoundaryToPermissionSetRequest), arg0)
}

// PutPermissionsBoundaryToPermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) PutPermissionsBoundaryToPermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.PutPermissionsBoundaryToPermissionSetInput, arg2 ...request.Option) (*ssoadmin.PutPermissionsBoundaryToPermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPermissionsBoundaryToPermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.PutPermissionsBoundaryToPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermissionsBoundaryToPermissionSetWithContext indicates an expected call of PutPermissionsBoundaryToPermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) PutPermissionsBoundaryToPermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionsBoundaryToPermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).PutPermissionsBoundaryToPermissionSetWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockSSOAdminAPI) TagResource(arg0 *ssoadmin.TagResourceInput) (*ssoadmin.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*ssoadmin.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockSSOAdminAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSSOAdminAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockSSOAdminAPI) TagResourceRequest(arg0 *ssoadmin.TagResourceInput) (*request.Request, *ssoadmin.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockSSOAdminAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockSSOAdminAPI) TagResourceWithContext(arg0 context.Context, arg1 *ssoadmin.TagResourceInput, arg2 ...request.Option) (*ssoadmin.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockSSOAdminAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockSSOAdminAPI) UntagResource(arg0 *ssoadmin.UntagResourceInput) (*ssoadmin.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*ssoadmin.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockSSOAdminAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSSOAdminAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockSSOAdminAPI) UntagResourceRequest(arg0 *ssoadmin.UntagResourceInput) (*request.Request, *ssoadmin.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockSSOAdminAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockSSOAdminAPI) UntagResourceWithContext(arg0 context.Context, arg1 *ssoadmin.UntagResourceInput, arg2 ...request.Option) (*ssoadmin.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockSSOAdminAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApplication mocks base method
func (m *MockSSOAdminAPI) UpdateApplication(arg0 *ssoadmin.UpdateApplicationInput) (*ssoadmin.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0)
	ret0, _ := ret[0].(*ssoadmin.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockSSOAdminAPIMockRecorder) UpdateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateApplication), arg0)
}

// UpdateApplicationRequest mocks base method
func (m *MockSSOAdminAPI) UpdateApplicationRequest(arg0 *ssoadmin.UpdateApplicationInput) (*request.Request, *ssoadmin.UpdateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.UpdateApplicationOutput)
	return ret0, ret1
}

// UpdateApplicationRequest indicates an expected call of UpdateApplicationRequest
func (mr *MockSSOAdminAPIMockRecorder) UpdateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateApplicationRequest), arg0)
}

// UpdateApplicationWithContext mocks base method
func (m *MockSSOAdminAPI) UpdateApplicationWithContext(arg0 context.Context, arg1 *ssoadmin.UpdateApplicationInput, arg2 ...request.Option) (*ssoadmin.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithContext indicates an expected call of UpdateApplicationWithContext
func (mr *MockSSOAdminAPIMockRecorder) UpdateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateApplicationWithContext), varargs...)
}

// UpdateInstance mocks base method
func (m *MockSSOAdminAPI) UpdateInstance(arg0 *ssoadmin.UpdateInstanceInput) (*ssoadmin.UpdateInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", arg0)
	ret0, _ := ret[0].(*ssoadmin.UpdateInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance
func (mr *MockSSOAdminAPIMockRecorder) UpdateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateInstance), arg0)
}

// UpdateInstanceAccessControlAttributeConfiguration mocks base method
func (m *MockSSOAdminAPI) UpdateInstanceAccessControlAttributeConfiguration(arg0 *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationInput) (*ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceAccessControlAttributeConfiguration", arg0)
	ret0, _ := ret[0].(*ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceAccessControlAttributeConfiguration indicates an expected call of UpdateInstanceAccessControlAttributeConfiguration
func (mr *MockSSOAdminAPIMockRecorder) UpdateInstanceAccessControlAttributeConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceAccessControlAttributeConfiguration", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateInstanceAccessControlAttributeConfiguration), arg0)
}

// UpdateInstanceAccessControlAttributeConfigurationRequest mocks base method
func (m *MockSSOAdminAPI) UpdateInstanceAccessControlAttributeConfigurationRequest(arg0 *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationInput) (*request.Request, *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceAccessControlAttributeConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput)
	return ret0, ret1
}

// UpdateInstanceAccessControlAttributeConfigurationRequest indicates an expected call of UpdateInstanceAccessControlAttributeConfigurationRequest
func (mr *MockSSOAdminAPIMockRecorder) UpdateInstanceAccessControlAttributeConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceAccessControlAttributeConfigurationRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateInstanceAccessControlAttributeConfigurationRequest), arg0)
}

// UpdateInstanceAccessControlAttributeConfigurationWithContext mocks base method
func (m *MockSSOAdminAPI) UpdateInstanceAccessControlAttributeConfigurationWithContext(arg0 context.Context, arg1 *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationInput, arg2 ...request.Option) (*ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInstanceAccessControlAttributeConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceAccessControlAttributeConfigurationWithContext indicates an expected call of UpdateInstanceAccessControlAttributeConfigurationWithContext
func (mr *MockSSOAdminAPIMockRecorder) UpdateInstanceAccessControlAttributeConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceAccessControlAttributeConfigurationWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateInstanceAccessControlAttributeConfigurationWithContext), varargs...)
}

// UpdateInstanceRequest mocks base method
func (m *MockSSOAdminAPI) UpdateInstanceRequest(arg0 *ssoadmin.UpdateInstanceInput) (*request.Request, *ssoadmin.UpdateInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.UpdateInstanceOutput)
	return ret0, ret1
}

// UpdateInstanceRequest indicates an expected call of UpdateInstanceRequest
func (mr *MockSSOAdminAPIMockRecorder) UpdateInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateInstanceRequest), arg0)
}

// UpdateInstanceWithContext mocks base method
func (m *MockSSOAdminAPI) UpdateInstanceWithContext(arg0 context.Context, arg1 *ssoadmin.UpdateInstanceInput, arg2 ...request.Option) (*ssoadmin.UpdateInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.UpdateInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceWithContext indicates an expected call of UpdateInstanceWithContext
func (mr *MockSSOAdminAPIMockRecorder) UpdateInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateInstanceWithContext), varargs...)
}

// UpdatePermissionSet mocks base method
func (m *MockSSOAdminAPI) UpdatePermissionSet(arg0 *ssoadmin.UpdatePermissionSetInput) (*ssoadmin.UpdatePermissionSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissionSet", arg0)
	ret0, _ := ret[0].(*ssoadmin.UpdatePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissionSet indicates an expected call of UpdatePermissionSet
func (mr *MockSSOAdminAPIMockRecorder) UpdatePermissionSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionSet", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdatePermissionSet), arg0)
}

// UpdatePermissionSetRequest mocks base method
func (m *MockSSOAdminAPI) UpdatePermissionSetRequest(arg0 *ssoadmin.UpdatePermissionSetInput) (*request.Request, *ssoadmin.UpdatePermissionSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissionSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.UpdatePermissionSetOutput)
	return ret0, ret1
}

// UpdatePermissionSetRequest indicates an expected call of UpdatePermissionSetRequest
func (mr *MockSSOAdminAPIMockRecorder) UpdatePermissionSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionSetRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdatePermissionSetRequest), arg0)
}

// UpdatePermissionSetWithContext mocks base method
func (m *MockSSOAdminAPI) UpdatePermissionSetWithContext(arg0 context.Context, arg1 *ssoadmin.UpdatePermissionSetInput, arg2 ...request.Option) (*ssoadmin.UpdatePermissionSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePermissionSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.UpdatePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissionSetWithContext indicates an expected call of UpdatePermissionSetWithContext
func (mr *MockSSOAdminAPIMockRecorder) UpdatePermissionSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionSetWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdatePermissionSetWithContext), varargs...)
}

// UpdateTrustedTokenIssuer mocks base method
func (m *MockSSOAdminAPI) UpdateTrustedTokenIssuer(arg0 *ssoadmin.UpdateTrustedTokenIssuerInput) (*ssoadmin.UpdateTrustedTokenIssuerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrustedTokenIssuer", arg0)
	ret0, _ := ret[0].(*ssoadmin.UpdateTrustedTokenIssuerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrustedTokenIssuer indicates an expected call of UpdateTrustedTokenIssuer
func (mr *MockSSOAdminAPIMockRecorder) UpdateTrustedTokenIssuer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrustedTokenIssuer", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateTrustedTokenIssuer), arg0)
}

// UpdateTrustedTokenIssuerRequest mocks base method
func (m *MockSSOAdminAPI) UpdateTrustedTokenIssuerRequest(arg0 *ssoadmin.UpdateTrustedTokenIssuerInput) (*request.Request, *ssoadmin.UpdateTrustedTokenIssuerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrustedTokenIssuerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssoadmin.UpdateTrustedTokenIssuerOutput)
	return ret0, ret1
}

// UpdateTrustedTokenIssuerRequest indicates an expected call of UpdateTrustedTokenIssuerRequest
func (mr *MockSSOAdminAPIMockRecorder) UpdateTrustedTokenIssuerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrustedTokenIssuerRequest", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateTrustedTokenIssuerRequest), arg0)
}

// UpdateTrustedTokenIssuerWithContext mocks base method
func (m *MockSSOAdminAPI) UpdateTrustedTokenIssuerWithContext(arg0 context.Context, arg1 *ssoadmin.UpdateTrustedTokenIssuerInput, arg2 ...request.Option) (*ssoadmin.UpdateTrustedTokenIssuerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrustedTokenIssuerWithContext", varargs...)
	ret0, _ := ret[0].(*ssoadmin.UpdateTrustedTokenIssuerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrustedTokenIssuerWithContext indicates an expected call of UpdateTrustedTokenIssuerWithContext
func (mr *MockSSOAdminAPIMockRecorder) UpdateTrustedTokenIssuerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrustedTokenIssuerWithContext", reflect.TypeOf((*MockSSOAdminAPI)(nil).UpdateTrustedTokenIssuerWithContext), varargs...)
}
