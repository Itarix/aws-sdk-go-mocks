// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/emrserverlesswebservice/emrserverlesswebserviceiface (interfaces: EMRServerlessWebServiceAPI)

// Package emrserverlesswebservicemock is a generated GoMock package.
package emrserverlesswebservicemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	emrserverlesswebservice "github.com/aws/aws-sdk-go/service/emrserverlesswebservice"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEMRServerlessWebServiceAPI is a mock of EMRServerlessWebServiceAPI interface
type MockEMRServerlessWebServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEMRServerlessWebServiceAPIMockRecorder
}

// MockEMRServerlessWebServiceAPIMockRecorder is the mock recorder for MockEMRServerlessWebServiceAPI
type MockEMRServerlessWebServiceAPIMockRecorder struct {
	mock *MockEMRServerlessWebServiceAPI
}

// NewMockEMRServerlessWebServiceAPI creates a new mock instance
func NewMockEMRServerlessWebServiceAPI(ctrl *gomock.Controller) *MockEMRServerlessWebServiceAPI {
	mock := &MockEMRServerlessWebServiceAPI{ctrl: ctrl}
	mock.recorder = &MockEMRServerlessWebServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEMRServerlessWebServiceAPI) EXPECT() *MockEMRServerlessWebServiceAPIMockRecorder {
	return m.recorder
}

// CancelJobRun mocks base method
func (m *MockEMRServerlessWebServiceAPI) CancelJobRun(arg0 *emrserverlesswebservice.CancelJobRunInput) (*emrserverlesswebservice.CancelJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobRun", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.CancelJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobRun indicates an expected call of CancelJobRun
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) CancelJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRun", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).CancelJobRun), arg0)
}

// CancelJobRunRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) CancelJobRunRequest(arg0 *emrserverlesswebservice.CancelJobRunInput) (*request.Request, *emrserverlesswebservice.CancelJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.CancelJobRunOutput)
	return ret0, ret1
}

// CancelJobRunRequest indicates an expected call of CancelJobRunRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) CancelJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRunRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).CancelJobRunRequest), arg0)
}

// CancelJobRunWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) CancelJobRunWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.CancelJobRunInput, arg2 ...request.Option) (*emrserverlesswebservice.CancelJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.CancelJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobRunWithContext indicates an expected call of CancelJobRunWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) CancelJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRunWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).CancelJobRunWithContext), varargs...)
}

// CreateApplication mocks base method
func (m *MockEMRServerlessWebServiceAPI) CreateApplication(arg0 *emrserverlesswebservice.CreateApplicationInput) (*emrserverlesswebservice.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).CreateApplication), arg0)
}

// CreateApplicationRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) CreateApplicationRequest(arg0 *emrserverlesswebservice.CreateApplicationInput) (*request.Request, *emrserverlesswebservice.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) CreateApplicationWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.CreateApplicationInput, arg2 ...request.Option) (*emrserverlesswebservice.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).CreateApplicationWithContext), varargs...)
}

// DeleteApplication mocks base method
func (m *MockEMRServerlessWebServiceAPI) DeleteApplication(arg0 *emrserverlesswebservice.DeleteApplicationInput) (*emrserverlesswebservice.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).DeleteApplication), arg0)
}

// DeleteApplicationRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) DeleteApplicationRequest(arg0 *emrserverlesswebservice.DeleteApplicationInput) (*request.Request, *emrserverlesswebservice.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) DeleteApplicationWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.DeleteApplicationInput, arg2 ...request.Option) (*emrserverlesswebservice.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).DeleteApplicationWithContext), varargs...)
}

// GetApplication mocks base method
func (m *MockEMRServerlessWebServiceAPI) GetApplication(arg0 *emrserverlesswebservice.GetApplicationInput) (*emrserverlesswebservice.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).GetApplication), arg0)
}

// GetApplicationRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) GetApplicationRequest(arg0 *emrserverlesswebservice.GetApplicationInput) (*request.Request, *emrserverlesswebservice.GetApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.GetApplicationOutput)
	return ret0, ret1
}

// GetApplicationRequest indicates an expected call of GetApplicationRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) GetApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).GetApplicationRequest), arg0)
}

// GetApplicationWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) GetApplicationWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.GetApplicationInput, arg2 ...request.Option) (*emrserverlesswebservice.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationWithContext indicates an expected call of GetApplicationWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) GetApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).GetApplicationWithContext), varargs...)
}

// GetJobRun mocks base method
func (m *MockEMRServerlessWebServiceAPI) GetJobRun(arg0 *emrserverlesswebservice.GetJobRunInput) (*emrserverlesswebservice.GetJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRun", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.GetJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRun indicates an expected call of GetJobRun
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) GetJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRun", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).GetJobRun), arg0)
}

// GetJobRunRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) GetJobRunRequest(arg0 *emrserverlesswebservice.GetJobRunInput) (*request.Request, *emrserverlesswebservice.GetJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.GetJobRunOutput)
	return ret0, ret1
}

// GetJobRunRequest indicates an expected call of GetJobRunRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) GetJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).GetJobRunRequest), arg0)
}

// GetJobRunWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) GetJobRunWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.GetJobRunInput, arg2 ...request.Option) (*emrserverlesswebservice.GetJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.GetJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRunWithContext indicates an expected call of GetJobRunWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) GetJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).GetJobRunWithContext), varargs...)
}

// ListApplications mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListApplications(arg0 *emrserverlesswebservice.ListApplicationsInput) (*emrserverlesswebservice.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListApplicationsPages(arg0 *emrserverlesswebservice.ListApplicationsInput, arg1 func(*emrserverlesswebservice.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.ListApplicationsInput, arg2 func(*emrserverlesswebservice.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListApplicationsRequest(arg0 *emrserverlesswebservice.ListApplicationsInput) (*request.Request, *emrserverlesswebservice.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListApplicationsWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.ListApplicationsInput, arg2 ...request.Option) (*emrserverlesswebservice.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListApplicationsWithContext), varargs...)
}

// ListJobRuns mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListJobRuns(arg0 *emrserverlesswebservice.ListJobRunsInput) (*emrserverlesswebservice.ListJobRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobRuns", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.ListJobRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobRuns indicates an expected call of ListJobRuns
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListJobRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRuns", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListJobRuns), arg0)
}

// ListJobRunsPages mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListJobRunsPages(arg0 *emrserverlesswebservice.ListJobRunsInput, arg1 func(*emrserverlesswebservice.ListJobRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobRunsPages indicates an expected call of ListJobRunsPages
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListJobRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsPages", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListJobRunsPages), arg0, arg1)
}

// ListJobRunsPagesWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListJobRunsPagesWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.ListJobRunsInput, arg2 func(*emrserverlesswebservice.ListJobRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobRunsPagesWithContext indicates an expected call of ListJobRunsPagesWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListJobRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsPagesWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListJobRunsPagesWithContext), varargs...)
}

// ListJobRunsRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListJobRunsRequest(arg0 *emrserverlesswebservice.ListJobRunsInput) (*request.Request, *emrserverlesswebservice.ListJobRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.ListJobRunsOutput)
	return ret0, ret1
}

// ListJobRunsRequest indicates an expected call of ListJobRunsRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListJobRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListJobRunsRequest), arg0)
}

// ListJobRunsWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListJobRunsWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.ListJobRunsInput, arg2 ...request.Option) (*emrserverlesswebservice.ListJobRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobRunsWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.ListJobRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobRunsWithContext indicates an expected call of ListJobRunsWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListJobRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListJobRunsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListTagsForResource(arg0 *emrserverlesswebservice.ListTagsForResourceInput) (*emrserverlesswebservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListTagsForResourceRequest(arg0 *emrserverlesswebservice.ListTagsForResourceInput) (*request.Request, *emrserverlesswebservice.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.ListTagsForResourceInput, arg2 ...request.Option) (*emrserverlesswebservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartApplication mocks base method
func (m *MockEMRServerlessWebServiceAPI) StartApplication(arg0 *emrserverlesswebservice.StartApplicationInput) (*emrserverlesswebservice.StartApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApplication", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.StartApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApplication indicates an expected call of StartApplication
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) StartApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplication", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).StartApplication), arg0)
}

// StartApplicationRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) StartApplicationRequest(arg0 *emrserverlesswebservice.StartApplicationInput) (*request.Request, *emrserverlesswebservice.StartApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.StartApplicationOutput)
	return ret0, ret1
}

// StartApplicationRequest indicates an expected call of StartApplicationRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) StartApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplicationRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).StartApplicationRequest), arg0)
}

// StartApplicationWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) StartApplicationWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.StartApplicationInput, arg2 ...request.Option) (*emrserverlesswebservice.StartApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.StartApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApplicationWithContext indicates an expected call of StartApplicationWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) StartApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplicationWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).StartApplicationWithContext), varargs...)
}

// StartJobRun mocks base method
func (m *MockEMRServerlessWebServiceAPI) StartJobRun(arg0 *emrserverlesswebservice.StartJobRunInput) (*emrserverlesswebservice.StartJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRun", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.StartJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobRun indicates an expected call of StartJobRun
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) StartJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRun", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).StartJobRun), arg0)
}

// StartJobRunRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) StartJobRunRequest(arg0 *emrserverlesswebservice.StartJobRunInput) (*request.Request, *emrserverlesswebservice.StartJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.StartJobRunOutput)
	return ret0, ret1
}

// StartJobRunRequest indicates an expected call of StartJobRunRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) StartJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRunRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).StartJobRunRequest), arg0)
}

// StartJobRunWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) StartJobRunWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.StartJobRunInput, arg2 ...request.Option) (*emrserverlesswebservice.StartJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.StartJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobRunWithContext indicates an expected call of StartJobRunWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) StartJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRunWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).StartJobRunWithContext), varargs...)
}

// StopApplication mocks base method
func (m *MockEMRServerlessWebServiceAPI) StopApplication(arg0 *emrserverlesswebservice.StopApplicationInput) (*emrserverlesswebservice.StopApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopApplication", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.StopApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApplication indicates an expected call of StopApplication
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) StopApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplication", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).StopApplication), arg0)
}

// StopApplicationRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) StopApplicationRequest(arg0 *emrserverlesswebservice.StopApplicationInput) (*request.Request, *emrserverlesswebservice.StopApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.StopApplicationOutput)
	return ret0, ret1
}

// StopApplicationRequest indicates an expected call of StopApplicationRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) StopApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplicationRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).StopApplicationRequest), arg0)
}

// StopApplicationWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) StopApplicationWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.StopApplicationInput, arg2 ...request.Option) (*emrserverlesswebservice.StopApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.StopApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApplicationWithContext indicates an expected call of StopApplicationWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) StopApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplicationWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).StopApplicationWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockEMRServerlessWebServiceAPI) TagResource(arg0 *emrserverlesswebservice.TagResourceInput) (*emrserverlesswebservice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) TagResourceRequest(arg0 *emrserverlesswebservice.TagResourceInput) (*request.Request, *emrserverlesswebservice.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) TagResourceWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.TagResourceInput, arg2 ...request.Option) (*emrserverlesswebservice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockEMRServerlessWebServiceAPI) UntagResource(arg0 *emrserverlesswebservice.UntagResourceInput) (*emrserverlesswebservice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) UntagResourceRequest(arg0 *emrserverlesswebservice.UntagResourceInput) (*request.Request, *emrserverlesswebservice.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) UntagResourceWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.UntagResourceInput, arg2 ...request.Option) (*emrserverlesswebservice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApplication mocks base method
func (m *MockEMRServerlessWebServiceAPI) UpdateApplication(arg0 *emrserverlesswebservice.UpdateApplicationInput) (*emrserverlesswebservice.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0)
	ret0, _ := ret[0].(*emrserverlesswebservice.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) UpdateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).UpdateApplication), arg0)
}

// UpdateApplicationRequest mocks base method
func (m *MockEMRServerlessWebServiceAPI) UpdateApplicationRequest(arg0 *emrserverlesswebservice.UpdateApplicationInput) (*request.Request, *emrserverlesswebservice.UpdateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverlesswebservice.UpdateApplicationOutput)
	return ret0, ret1
}

// UpdateApplicationRequest indicates an expected call of UpdateApplicationRequest
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) UpdateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRequest", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).UpdateApplicationRequest), arg0)
}

// UpdateApplicationWithContext mocks base method
func (m *MockEMRServerlessWebServiceAPI) UpdateApplicationWithContext(arg0 context.Context, arg1 *emrserverlesswebservice.UpdateApplicationInput, arg2 ...request.Option) (*emrserverlesswebservice.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverlesswebservice.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithContext indicates an expected call of UpdateApplicationWithContext
func (mr *MockEMRServerlessWebServiceAPIMockRecorder) UpdateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithContext", reflect.TypeOf((*MockEMRServerlessWebServiceAPI)(nil).UpdateApplicationWithContext), varargs...)
}
