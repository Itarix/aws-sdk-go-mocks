// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/omics/omicsiface (interfaces: OmicsAPI)

// Package omicsmock is a generated GoMock package.
package omicsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	omics "github.com/aws/aws-sdk-go/service/omics"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOmicsAPI is a mock of OmicsAPI interface
type MockOmicsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOmicsAPIMockRecorder
}

// MockOmicsAPIMockRecorder is the mock recorder for MockOmicsAPI
type MockOmicsAPIMockRecorder struct {
	mock *MockOmicsAPI
}

// NewMockOmicsAPI creates a new mock instance
func NewMockOmicsAPI(ctrl *gomock.Controller) *MockOmicsAPI {
	mock := &MockOmicsAPI{ctrl: ctrl}
	mock.recorder = &MockOmicsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOmicsAPI) EXPECT() *MockOmicsAPIMockRecorder {
	return m.recorder
}

// BatchDeleteReadSet mocks base method
func (m *MockOmicsAPI) BatchDeleteReadSet(arg0 *omics.BatchDeleteReadSetInput) (*omics.BatchDeleteReadSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteReadSet", arg0)
	ret0, _ := ret[0].(*omics.BatchDeleteReadSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteReadSet indicates an expected call of BatchDeleteReadSet
func (mr *MockOmicsAPIMockRecorder) BatchDeleteReadSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteReadSet", reflect.TypeOf((*MockOmicsAPI)(nil).BatchDeleteReadSet), arg0)
}

// BatchDeleteReadSetRequest mocks base method
func (m *MockOmicsAPI) BatchDeleteReadSetRequest(arg0 *omics.BatchDeleteReadSetInput) (*request.Request, *omics.BatchDeleteReadSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteReadSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.BatchDeleteReadSetOutput)
	return ret0, ret1
}

// BatchDeleteReadSetRequest indicates an expected call of BatchDeleteReadSetRequest
func (mr *MockOmicsAPIMockRecorder) BatchDeleteReadSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteReadSetRequest", reflect.TypeOf((*MockOmicsAPI)(nil).BatchDeleteReadSetRequest), arg0)
}

// BatchDeleteReadSetWithContext mocks base method
func (m *MockOmicsAPI) BatchDeleteReadSetWithContext(arg0 context.Context, arg1 *omics.BatchDeleteReadSetInput, arg2 ...request.Option) (*omics.BatchDeleteReadSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteReadSetWithContext", varargs...)
	ret0, _ := ret[0].(*omics.BatchDeleteReadSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteReadSetWithContext indicates an expected call of BatchDeleteReadSetWithContext
func (mr *MockOmicsAPIMockRecorder) BatchDeleteReadSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteReadSetWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).BatchDeleteReadSetWithContext), varargs...)
}

// CancelAnnotationImportJob mocks base method
func (m *MockOmicsAPI) CancelAnnotationImportJob(arg0 *omics.CancelAnnotationImportJobInput) (*omics.CancelAnnotationImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAnnotationImportJob", arg0)
	ret0, _ := ret[0].(*omics.CancelAnnotationImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelAnnotationImportJob indicates an expected call of CancelAnnotationImportJob
func (mr *MockOmicsAPIMockRecorder) CancelAnnotationImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAnnotationImportJob", reflect.TypeOf((*MockOmicsAPI)(nil).CancelAnnotationImportJob), arg0)
}

// CancelAnnotationImportJobRequest mocks base method
func (m *MockOmicsAPI) CancelAnnotationImportJobRequest(arg0 *omics.CancelAnnotationImportJobInput) (*request.Request, *omics.CancelAnnotationImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAnnotationImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.CancelAnnotationImportJobOutput)
	return ret0, ret1
}

// CancelAnnotationImportJobRequest indicates an expected call of CancelAnnotationImportJobRequest
func (mr *MockOmicsAPIMockRecorder) CancelAnnotationImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAnnotationImportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).CancelAnnotationImportJobRequest), arg0)
}

// CancelAnnotationImportJobWithContext mocks base method
func (m *MockOmicsAPI) CancelAnnotationImportJobWithContext(arg0 context.Context, arg1 *omics.CancelAnnotationImportJobInput, arg2 ...request.Option) (*omics.CancelAnnotationImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelAnnotationImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.CancelAnnotationImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelAnnotationImportJobWithContext indicates an expected call of CancelAnnotationImportJobWithContext
func (mr *MockOmicsAPIMockRecorder) CancelAnnotationImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAnnotationImportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).CancelAnnotationImportJobWithContext), varargs...)
}

// CancelRun mocks base method
func (m *MockOmicsAPI) CancelRun(arg0 *omics.CancelRunInput) (*omics.CancelRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRun", arg0)
	ret0, _ := ret[0].(*omics.CancelRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelRun indicates an expected call of CancelRun
func (mr *MockOmicsAPIMockRecorder) CancelRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRun", reflect.TypeOf((*MockOmicsAPI)(nil).CancelRun), arg0)
}

// CancelRunRequest mocks base method
func (m *MockOmicsAPI) CancelRunRequest(arg0 *omics.CancelRunInput) (*request.Request, *omics.CancelRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.CancelRunOutput)
	return ret0, ret1
}

// CancelRunRequest indicates an expected call of CancelRunRequest
func (mr *MockOmicsAPIMockRecorder) CancelRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRunRequest", reflect.TypeOf((*MockOmicsAPI)(nil).CancelRunRequest), arg0)
}

// CancelRunWithContext mocks base method
func (m *MockOmicsAPI) CancelRunWithContext(arg0 context.Context, arg1 *omics.CancelRunInput, arg2 ...request.Option) (*omics.CancelRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelRunWithContext", varargs...)
	ret0, _ := ret[0].(*omics.CancelRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelRunWithContext indicates an expected call of CancelRunWithContext
func (mr *MockOmicsAPIMockRecorder) CancelRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRunWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).CancelRunWithContext), varargs...)
}

// CancelVariantImportJob mocks base method
func (m *MockOmicsAPI) CancelVariantImportJob(arg0 *omics.CancelVariantImportJobInput) (*omics.CancelVariantImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelVariantImportJob", arg0)
	ret0, _ := ret[0].(*omics.CancelVariantImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelVariantImportJob indicates an expected call of CancelVariantImportJob
func (mr *MockOmicsAPIMockRecorder) CancelVariantImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelVariantImportJob", reflect.TypeOf((*MockOmicsAPI)(nil).CancelVariantImportJob), arg0)
}

// CancelVariantImportJobRequest mocks base method
func (m *MockOmicsAPI) CancelVariantImportJobRequest(arg0 *omics.CancelVariantImportJobInput) (*request.Request, *omics.CancelVariantImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelVariantImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.CancelVariantImportJobOutput)
	return ret0, ret1
}

// CancelVariantImportJobRequest indicates an expected call of CancelVariantImportJobRequest
func (mr *MockOmicsAPIMockRecorder) CancelVariantImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelVariantImportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).CancelVariantImportJobRequest), arg0)
}

// CancelVariantImportJobWithContext mocks base method
func (m *MockOmicsAPI) CancelVariantImportJobWithContext(arg0 context.Context, arg1 *omics.CancelVariantImportJobInput, arg2 ...request.Option) (*omics.CancelVariantImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelVariantImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.CancelVariantImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelVariantImportJobWithContext indicates an expected call of CancelVariantImportJobWithContext
func (mr *MockOmicsAPIMockRecorder) CancelVariantImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelVariantImportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).CancelVariantImportJobWithContext), varargs...)
}

// CreateAnnotationStore mocks base method
func (m *MockOmicsAPI) CreateAnnotationStore(arg0 *omics.CreateAnnotationStoreInput) (*omics.CreateAnnotationStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnnotationStore", arg0)
	ret0, _ := ret[0].(*omics.CreateAnnotationStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnnotationStore indicates an expected call of CreateAnnotationStore
func (mr *MockOmicsAPIMockRecorder) CreateAnnotationStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnnotationStore", reflect.TypeOf((*MockOmicsAPI)(nil).CreateAnnotationStore), arg0)
}

// CreateAnnotationStoreRequest mocks base method
func (m *MockOmicsAPI) CreateAnnotationStoreRequest(arg0 *omics.CreateAnnotationStoreInput) (*request.Request, *omics.CreateAnnotationStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnnotationStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.CreateAnnotationStoreOutput)
	return ret0, ret1
}

// CreateAnnotationStoreRequest indicates an expected call of CreateAnnotationStoreRequest
func (mr *MockOmicsAPIMockRecorder) CreateAnnotationStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnnotationStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).CreateAnnotationStoreRequest), arg0)
}

// CreateAnnotationStoreWithContext mocks base method
func (m *MockOmicsAPI) CreateAnnotationStoreWithContext(arg0 context.Context, arg1 *omics.CreateAnnotationStoreInput, arg2 ...request.Option) (*omics.CreateAnnotationStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnnotationStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.CreateAnnotationStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnnotationStoreWithContext indicates an expected call of CreateAnnotationStoreWithContext
func (mr *MockOmicsAPIMockRecorder) CreateAnnotationStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnnotationStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).CreateAnnotationStoreWithContext), varargs...)
}

// CreateReferenceStore mocks base method
func (m *MockOmicsAPI) CreateReferenceStore(arg0 *omics.CreateReferenceStoreInput) (*omics.CreateReferenceStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferenceStore", arg0)
	ret0, _ := ret[0].(*omics.CreateReferenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReferenceStore indicates an expected call of CreateReferenceStore
func (mr *MockOmicsAPIMockRecorder) CreateReferenceStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferenceStore", reflect.TypeOf((*MockOmicsAPI)(nil).CreateReferenceStore), arg0)
}

// CreateReferenceStoreRequest mocks base method
func (m *MockOmicsAPI) CreateReferenceStoreRequest(arg0 *omics.CreateReferenceStoreInput) (*request.Request, *omics.CreateReferenceStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferenceStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.CreateReferenceStoreOutput)
	return ret0, ret1
}

// CreateReferenceStoreRequest indicates an expected call of CreateReferenceStoreRequest
func (mr *MockOmicsAPIMockRecorder) CreateReferenceStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferenceStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).CreateReferenceStoreRequest), arg0)
}

// CreateReferenceStoreWithContext mocks base method
func (m *MockOmicsAPI) CreateReferenceStoreWithContext(arg0 context.Context, arg1 *omics.CreateReferenceStoreInput, arg2 ...request.Option) (*omics.CreateReferenceStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReferenceStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.CreateReferenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReferenceStoreWithContext indicates an expected call of CreateReferenceStoreWithContext
func (mr *MockOmicsAPIMockRecorder) CreateReferenceStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferenceStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).CreateReferenceStoreWithContext), varargs...)
}

// CreateRunGroup mocks base method
func (m *MockOmicsAPI) CreateRunGroup(arg0 *omics.CreateRunGroupInput) (*omics.CreateRunGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRunGroup", arg0)
	ret0, _ := ret[0].(*omics.CreateRunGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRunGroup indicates an expected call of CreateRunGroup
func (mr *MockOmicsAPIMockRecorder) CreateRunGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRunGroup", reflect.TypeOf((*MockOmicsAPI)(nil).CreateRunGroup), arg0)
}

// CreateRunGroupRequest mocks base method
func (m *MockOmicsAPI) CreateRunGroupRequest(arg0 *omics.CreateRunGroupInput) (*request.Request, *omics.CreateRunGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRunGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.CreateRunGroupOutput)
	return ret0, ret1
}

// CreateRunGroupRequest indicates an expected call of CreateRunGroupRequest
func (mr *MockOmicsAPIMockRecorder) CreateRunGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRunGroupRequest", reflect.TypeOf((*MockOmicsAPI)(nil).CreateRunGroupRequest), arg0)
}

// CreateRunGroupWithContext mocks base method
func (m *MockOmicsAPI) CreateRunGroupWithContext(arg0 context.Context, arg1 *omics.CreateRunGroupInput, arg2 ...request.Option) (*omics.CreateRunGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRunGroupWithContext", varargs...)
	ret0, _ := ret[0].(*omics.CreateRunGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRunGroupWithContext indicates an expected call of CreateRunGroupWithContext
func (mr *MockOmicsAPIMockRecorder) CreateRunGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRunGroupWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).CreateRunGroupWithContext), varargs...)
}

// CreateSequenceStore mocks base method
func (m *MockOmicsAPI) CreateSequenceStore(arg0 *omics.CreateSequenceStoreInput) (*omics.CreateSequenceStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSequenceStore", arg0)
	ret0, _ := ret[0].(*omics.CreateSequenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSequenceStore indicates an expected call of CreateSequenceStore
func (mr *MockOmicsAPIMockRecorder) CreateSequenceStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSequenceStore", reflect.TypeOf((*MockOmicsAPI)(nil).CreateSequenceStore), arg0)
}

// CreateSequenceStoreRequest mocks base method
func (m *MockOmicsAPI) CreateSequenceStoreRequest(arg0 *omics.CreateSequenceStoreInput) (*request.Request, *omics.CreateSequenceStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSequenceStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.CreateSequenceStoreOutput)
	return ret0, ret1
}

// CreateSequenceStoreRequest indicates an expected call of CreateSequenceStoreRequest
func (mr *MockOmicsAPIMockRecorder) CreateSequenceStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSequenceStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).CreateSequenceStoreRequest), arg0)
}

// CreateSequenceStoreWithContext mocks base method
func (m *MockOmicsAPI) CreateSequenceStoreWithContext(arg0 context.Context, arg1 *omics.CreateSequenceStoreInput, arg2 ...request.Option) (*omics.CreateSequenceStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSequenceStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.CreateSequenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSequenceStoreWithContext indicates an expected call of CreateSequenceStoreWithContext
func (mr *MockOmicsAPIMockRecorder) CreateSequenceStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSequenceStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).CreateSequenceStoreWithContext), varargs...)
}

// CreateVariantStore mocks base method
func (m *MockOmicsAPI) CreateVariantStore(arg0 *omics.CreateVariantStoreInput) (*omics.CreateVariantStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVariantStore", arg0)
	ret0, _ := ret[0].(*omics.CreateVariantStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVariantStore indicates an expected call of CreateVariantStore
func (mr *MockOmicsAPIMockRecorder) CreateVariantStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariantStore", reflect.TypeOf((*MockOmicsAPI)(nil).CreateVariantStore), arg0)
}

// CreateVariantStoreRequest mocks base method
func (m *MockOmicsAPI) CreateVariantStoreRequest(arg0 *omics.CreateVariantStoreInput) (*request.Request, *omics.CreateVariantStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVariantStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.CreateVariantStoreOutput)
	return ret0, ret1
}

// CreateVariantStoreRequest indicates an expected call of CreateVariantStoreRequest
func (mr *MockOmicsAPIMockRecorder) CreateVariantStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariantStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).CreateVariantStoreRequest), arg0)
}

// CreateVariantStoreWithContext mocks base method
func (m *MockOmicsAPI) CreateVariantStoreWithContext(arg0 context.Context, arg1 *omics.CreateVariantStoreInput, arg2 ...request.Option) (*omics.CreateVariantStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVariantStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.CreateVariantStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVariantStoreWithContext indicates an expected call of CreateVariantStoreWithContext
func (mr *MockOmicsAPIMockRecorder) CreateVariantStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariantStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).CreateVariantStoreWithContext), varargs...)
}

// CreateWorkflow mocks base method
func (m *MockOmicsAPI) CreateWorkflow(arg0 *omics.CreateWorkflowInput) (*omics.CreateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", arg0)
	ret0, _ := ret[0].(*omics.CreateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflow indicates an expected call of CreateWorkflow
func (mr *MockOmicsAPIMockRecorder) CreateWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockOmicsAPI)(nil).CreateWorkflow), arg0)
}

// CreateWorkflowRequest mocks base method
func (m *MockOmicsAPI) CreateWorkflowRequest(arg0 *omics.CreateWorkflowInput) (*request.Request, *omics.CreateWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.CreateWorkflowOutput)
	return ret0, ret1
}

// CreateWorkflowRequest indicates an expected call of CreateWorkflowRequest
func (mr *MockOmicsAPIMockRecorder) CreateWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowRequest", reflect.TypeOf((*MockOmicsAPI)(nil).CreateWorkflowRequest), arg0)
}

// CreateWorkflowWithContext mocks base method
func (m *MockOmicsAPI) CreateWorkflowWithContext(arg0 context.Context, arg1 *omics.CreateWorkflowInput, arg2 ...request.Option) (*omics.CreateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*omics.CreateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowWithContext indicates an expected call of CreateWorkflowWithContext
func (mr *MockOmicsAPIMockRecorder) CreateWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).CreateWorkflowWithContext), varargs...)
}

// DeleteAnnotationStore mocks base method
func (m *MockOmicsAPI) DeleteAnnotationStore(arg0 *omics.DeleteAnnotationStoreInput) (*omics.DeleteAnnotationStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnotationStore", arg0)
	ret0, _ := ret[0].(*omics.DeleteAnnotationStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnnotationStore indicates an expected call of DeleteAnnotationStore
func (mr *MockOmicsAPIMockRecorder) DeleteAnnotationStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnotationStore", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteAnnotationStore), arg0)
}

// DeleteAnnotationStoreRequest mocks base method
func (m *MockOmicsAPI) DeleteAnnotationStoreRequest(arg0 *omics.DeleteAnnotationStoreInput) (*request.Request, *omics.DeleteAnnotationStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnotationStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.DeleteAnnotationStoreOutput)
	return ret0, ret1
}

// DeleteAnnotationStoreRequest indicates an expected call of DeleteAnnotationStoreRequest
func (mr *MockOmicsAPIMockRecorder) DeleteAnnotationStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnotationStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteAnnotationStoreRequest), arg0)
}

// DeleteAnnotationStoreWithContext mocks base method
func (m *MockOmicsAPI) DeleteAnnotationStoreWithContext(arg0 context.Context, arg1 *omics.DeleteAnnotationStoreInput, arg2 ...request.Option) (*omics.DeleteAnnotationStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAnnotationStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.DeleteAnnotationStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnnotationStoreWithContext indicates an expected call of DeleteAnnotationStoreWithContext
func (mr *MockOmicsAPIMockRecorder) DeleteAnnotationStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnotationStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteAnnotationStoreWithContext), varargs...)
}

// DeleteReference mocks base method
func (m *MockOmicsAPI) DeleteReference(arg0 *omics.DeleteReferenceInput) (*omics.DeleteReferenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReference", arg0)
	ret0, _ := ret[0].(*omics.DeleteReferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReference indicates an expected call of DeleteReference
func (mr *MockOmicsAPIMockRecorder) DeleteReference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReference", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteReference), arg0)
}

// DeleteReferenceRequest mocks base method
func (m *MockOmicsAPI) DeleteReferenceRequest(arg0 *omics.DeleteReferenceInput) (*request.Request, *omics.DeleteReferenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReferenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.DeleteReferenceOutput)
	return ret0, ret1
}

// DeleteReferenceRequest indicates an expected call of DeleteReferenceRequest
func (mr *MockOmicsAPIMockRecorder) DeleteReferenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReferenceRequest", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteReferenceRequest), arg0)
}

// DeleteReferenceStore mocks base method
func (m *MockOmicsAPI) DeleteReferenceStore(arg0 *omics.DeleteReferenceStoreInput) (*omics.DeleteReferenceStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReferenceStore", arg0)
	ret0, _ := ret[0].(*omics.DeleteReferenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReferenceStore indicates an expected call of DeleteReferenceStore
func (mr *MockOmicsAPIMockRecorder) DeleteReferenceStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReferenceStore", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteReferenceStore), arg0)
}

// DeleteReferenceStoreRequest mocks base method
func (m *MockOmicsAPI) DeleteReferenceStoreRequest(arg0 *omics.DeleteReferenceStoreInput) (*request.Request, *omics.DeleteReferenceStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReferenceStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.DeleteReferenceStoreOutput)
	return ret0, ret1
}

// DeleteReferenceStoreRequest indicates an expected call of DeleteReferenceStoreRequest
func (mr *MockOmicsAPIMockRecorder) DeleteReferenceStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReferenceStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteReferenceStoreRequest), arg0)
}

// DeleteReferenceStoreWithContext mocks base method
func (m *MockOmicsAPI) DeleteReferenceStoreWithContext(arg0 context.Context, arg1 *omics.DeleteReferenceStoreInput, arg2 ...request.Option) (*omics.DeleteReferenceStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReferenceStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.DeleteReferenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReferenceStoreWithContext indicates an expected call of DeleteReferenceStoreWithContext
func (mr *MockOmicsAPIMockRecorder) DeleteReferenceStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReferenceStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteReferenceStoreWithContext), varargs...)
}

// DeleteReferenceWithContext mocks base method
func (m *MockOmicsAPI) DeleteReferenceWithContext(arg0 context.Context, arg1 *omics.DeleteReferenceInput, arg2 ...request.Option) (*omics.DeleteReferenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReferenceWithContext", varargs...)
	ret0, _ := ret[0].(*omics.DeleteReferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReferenceWithContext indicates an expected call of DeleteReferenceWithContext
func (mr *MockOmicsAPIMockRecorder) DeleteReferenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReferenceWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteReferenceWithContext), varargs...)
}

// DeleteRun mocks base method
func (m *MockOmicsAPI) DeleteRun(arg0 *omics.DeleteRunInput) (*omics.DeleteRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRun", arg0)
	ret0, _ := ret[0].(*omics.DeleteRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRun indicates an expected call of DeleteRun
func (mr *MockOmicsAPIMockRecorder) DeleteRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRun", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteRun), arg0)
}

// DeleteRunGroup mocks base method
func (m *MockOmicsAPI) DeleteRunGroup(arg0 *omics.DeleteRunGroupInput) (*omics.DeleteRunGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRunGroup", arg0)
	ret0, _ := ret[0].(*omics.DeleteRunGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRunGroup indicates an expected call of DeleteRunGroup
func (mr *MockOmicsAPIMockRecorder) DeleteRunGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRunGroup", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteRunGroup), arg0)
}

// DeleteRunGroupRequest mocks base method
func (m *MockOmicsAPI) DeleteRunGroupRequest(arg0 *omics.DeleteRunGroupInput) (*request.Request, *omics.DeleteRunGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRunGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.DeleteRunGroupOutput)
	return ret0, ret1
}

// DeleteRunGroupRequest indicates an expected call of DeleteRunGroupRequest
func (mr *MockOmicsAPIMockRecorder) DeleteRunGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRunGroupRequest", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteRunGroupRequest), arg0)
}

// DeleteRunGroupWithContext mocks base method
func (m *MockOmicsAPI) DeleteRunGroupWithContext(arg0 context.Context, arg1 *omics.DeleteRunGroupInput, arg2 ...request.Option) (*omics.DeleteRunGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRunGroupWithContext", varargs...)
	ret0, _ := ret[0].(*omics.DeleteRunGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRunGroupWithContext indicates an expected call of DeleteRunGroupWithContext
func (mr *MockOmicsAPIMockRecorder) DeleteRunGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRunGroupWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteRunGroupWithContext), varargs...)
}

// DeleteRunRequest mocks base method
func (m *MockOmicsAPI) DeleteRunRequest(arg0 *omics.DeleteRunInput) (*request.Request, *omics.DeleteRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.DeleteRunOutput)
	return ret0, ret1
}

// DeleteRunRequest indicates an expected call of DeleteRunRequest
func (mr *MockOmicsAPIMockRecorder) DeleteRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRunRequest", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteRunRequest), arg0)
}

// DeleteRunWithContext mocks base method
func (m *MockOmicsAPI) DeleteRunWithContext(arg0 context.Context, arg1 *omics.DeleteRunInput, arg2 ...request.Option) (*omics.DeleteRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRunWithContext", varargs...)
	ret0, _ := ret[0].(*omics.DeleteRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRunWithContext indicates an expected call of DeleteRunWithContext
func (mr *MockOmicsAPIMockRecorder) DeleteRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRunWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteRunWithContext), varargs...)
}

// DeleteSequenceStore mocks base method
func (m *MockOmicsAPI) DeleteSequenceStore(arg0 *omics.DeleteSequenceStoreInput) (*omics.DeleteSequenceStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSequenceStore", arg0)
	ret0, _ := ret[0].(*omics.DeleteSequenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSequenceStore indicates an expected call of DeleteSequenceStore
func (mr *MockOmicsAPIMockRecorder) DeleteSequenceStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSequenceStore", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteSequenceStore), arg0)
}

// DeleteSequenceStoreRequest mocks base method
func (m *MockOmicsAPI) DeleteSequenceStoreRequest(arg0 *omics.DeleteSequenceStoreInput) (*request.Request, *omics.DeleteSequenceStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSequenceStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.DeleteSequenceStoreOutput)
	return ret0, ret1
}

// DeleteSequenceStoreRequest indicates an expected call of DeleteSequenceStoreRequest
func (mr *MockOmicsAPIMockRecorder) DeleteSequenceStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSequenceStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteSequenceStoreRequest), arg0)
}

// DeleteSequenceStoreWithContext mocks base method
func (m *MockOmicsAPI) DeleteSequenceStoreWithContext(arg0 context.Context, arg1 *omics.DeleteSequenceStoreInput, arg2 ...request.Option) (*omics.DeleteSequenceStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSequenceStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.DeleteSequenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSequenceStoreWithContext indicates an expected call of DeleteSequenceStoreWithContext
func (mr *MockOmicsAPIMockRecorder) DeleteSequenceStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSequenceStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteSequenceStoreWithContext), varargs...)
}

// DeleteVariantStore mocks base method
func (m *MockOmicsAPI) DeleteVariantStore(arg0 *omics.DeleteVariantStoreInput) (*omics.DeleteVariantStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVariantStore", arg0)
	ret0, _ := ret[0].(*omics.DeleteVariantStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVariantStore indicates an expected call of DeleteVariantStore
func (mr *MockOmicsAPIMockRecorder) DeleteVariantStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVariantStore", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteVariantStore), arg0)
}

// DeleteVariantStoreRequest mocks base method
func (m *MockOmicsAPI) DeleteVariantStoreRequest(arg0 *omics.DeleteVariantStoreInput) (*request.Request, *omics.DeleteVariantStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVariantStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.DeleteVariantStoreOutput)
	return ret0, ret1
}

// DeleteVariantStoreRequest indicates an expected call of DeleteVariantStoreRequest
func (mr *MockOmicsAPIMockRecorder) DeleteVariantStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVariantStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteVariantStoreRequest), arg0)
}

// DeleteVariantStoreWithContext mocks base method
func (m *MockOmicsAPI) DeleteVariantStoreWithContext(arg0 context.Context, arg1 *omics.DeleteVariantStoreInput, arg2 ...request.Option) (*omics.DeleteVariantStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVariantStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.DeleteVariantStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVariantStoreWithContext indicates an expected call of DeleteVariantStoreWithContext
func (mr *MockOmicsAPIMockRecorder) DeleteVariantStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVariantStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteVariantStoreWithContext), varargs...)
}

// DeleteWorkflow mocks base method
func (m *MockOmicsAPI) DeleteWorkflow(arg0 *omics.DeleteWorkflowInput) (*omics.DeleteWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", arg0)
	ret0, _ := ret[0].(*omics.DeleteWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow
func (mr *MockOmicsAPIMockRecorder) DeleteWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteWorkflow), arg0)
}

// DeleteWorkflowRequest mocks base method
func (m *MockOmicsAPI) DeleteWorkflowRequest(arg0 *omics.DeleteWorkflowInput) (*request.Request, *omics.DeleteWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.DeleteWorkflowOutput)
	return ret0, ret1
}

// DeleteWorkflowRequest indicates an expected call of DeleteWorkflowRequest
func (mr *MockOmicsAPIMockRecorder) DeleteWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowRequest", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteWorkflowRequest), arg0)
}

// DeleteWorkflowWithContext mocks base method
func (m *MockOmicsAPI) DeleteWorkflowWithContext(arg0 context.Context, arg1 *omics.DeleteWorkflowInput, arg2 ...request.Option) (*omics.DeleteWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*omics.DeleteWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowWithContext indicates an expected call of DeleteWorkflowWithContext
func (mr *MockOmicsAPIMockRecorder) DeleteWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).DeleteWorkflowWithContext), varargs...)
}

// GetAnnotationImportJob mocks base method
func (m *MockOmicsAPI) GetAnnotationImportJob(arg0 *omics.GetAnnotationImportJobInput) (*omics.GetAnnotationImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotationImportJob", arg0)
	ret0, _ := ret[0].(*omics.GetAnnotationImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotationImportJob indicates an expected call of GetAnnotationImportJob
func (mr *MockOmicsAPIMockRecorder) GetAnnotationImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationImportJob", reflect.TypeOf((*MockOmicsAPI)(nil).GetAnnotationImportJob), arg0)
}

// GetAnnotationImportJobRequest mocks base method
func (m *MockOmicsAPI) GetAnnotationImportJobRequest(arg0 *omics.GetAnnotationImportJobInput) (*request.Request, *omics.GetAnnotationImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotationImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetAnnotationImportJobOutput)
	return ret0, ret1
}

// GetAnnotationImportJobRequest indicates an expected call of GetAnnotationImportJobRequest
func (mr *MockOmicsAPIMockRecorder) GetAnnotationImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationImportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetAnnotationImportJobRequest), arg0)
}

// GetAnnotationImportJobWithContext mocks base method
func (m *MockOmicsAPI) GetAnnotationImportJobWithContext(arg0 context.Context, arg1 *omics.GetAnnotationImportJobInput, arg2 ...request.Option) (*omics.GetAnnotationImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAnnotationImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetAnnotationImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotationImportJobWithContext indicates an expected call of GetAnnotationImportJobWithContext
func (mr *MockOmicsAPIMockRecorder) GetAnnotationImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationImportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetAnnotationImportJobWithContext), varargs...)
}

// GetAnnotationStore mocks base method
func (m *MockOmicsAPI) GetAnnotationStore(arg0 *omics.GetAnnotationStoreInput) (*omics.GetAnnotationStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotationStore", arg0)
	ret0, _ := ret[0].(*omics.GetAnnotationStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotationStore indicates an expected call of GetAnnotationStore
func (mr *MockOmicsAPIMockRecorder) GetAnnotationStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationStore", reflect.TypeOf((*MockOmicsAPI)(nil).GetAnnotationStore), arg0)
}

// GetAnnotationStoreRequest mocks base method
func (m *MockOmicsAPI) GetAnnotationStoreRequest(arg0 *omics.GetAnnotationStoreInput) (*request.Request, *omics.GetAnnotationStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotationStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetAnnotationStoreOutput)
	return ret0, ret1
}

// GetAnnotationStoreRequest indicates an expected call of GetAnnotationStoreRequest
func (mr *MockOmicsAPIMockRecorder) GetAnnotationStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetAnnotationStoreRequest), arg0)
}

// GetAnnotationStoreWithContext mocks base method
func (m *MockOmicsAPI) GetAnnotationStoreWithContext(arg0 context.Context, arg1 *omics.GetAnnotationStoreInput, arg2 ...request.Option) (*omics.GetAnnotationStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAnnotationStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetAnnotationStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotationStoreWithContext indicates an expected call of GetAnnotationStoreWithContext
func (mr *MockOmicsAPIMockRecorder) GetAnnotationStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetAnnotationStoreWithContext), varargs...)
}

// GetReadSet mocks base method
func (m *MockOmicsAPI) GetReadSet(arg0 *omics.GetReadSetInput) (*omics.GetReadSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSet", arg0)
	ret0, _ := ret[0].(*omics.GetReadSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadSet indicates an expected call of GetReadSet
func (mr *MockOmicsAPIMockRecorder) GetReadSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSet", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSet), arg0)
}

// GetReadSetActivationJob mocks base method
func (m *MockOmicsAPI) GetReadSetActivationJob(arg0 *omics.GetReadSetActivationJobInput) (*omics.GetReadSetActivationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSetActivationJob", arg0)
	ret0, _ := ret[0].(*omics.GetReadSetActivationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadSetActivationJob indicates an expected call of GetReadSetActivationJob
func (mr *MockOmicsAPIMockRecorder) GetReadSetActivationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetActivationJob", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetActivationJob), arg0)
}

// GetReadSetActivationJobRequest mocks base method
func (m *MockOmicsAPI) GetReadSetActivationJobRequest(arg0 *omics.GetReadSetActivationJobInput) (*request.Request, *omics.GetReadSetActivationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSetActivationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetReadSetActivationJobOutput)
	return ret0, ret1
}

// GetReadSetActivationJobRequest indicates an expected call of GetReadSetActivationJobRequest
func (mr *MockOmicsAPIMockRecorder) GetReadSetActivationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetActivationJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetActivationJobRequest), arg0)
}

// GetReadSetActivationJobWithContext mocks base method
func (m *MockOmicsAPI) GetReadSetActivationJobWithContext(arg0 context.Context, arg1 *omics.GetReadSetActivationJobInput, arg2 ...request.Option) (*omics.GetReadSetActivationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadSetActivationJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetReadSetActivationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadSetActivationJobWithContext indicates an expected call of GetReadSetActivationJobWithContext
func (mr *MockOmicsAPIMockRecorder) GetReadSetActivationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetActivationJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetActivationJobWithContext), varargs...)
}

// GetReadSetExportJob mocks base method
func (m *MockOmicsAPI) GetReadSetExportJob(arg0 *omics.GetReadSetExportJobInput) (*omics.GetReadSetExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSetExportJob", arg0)
	ret0, _ := ret[0].(*omics.GetReadSetExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadSetExportJob indicates an expected call of GetReadSetExportJob
func (mr *MockOmicsAPIMockRecorder) GetReadSetExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetExportJob", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetExportJob), arg0)
}

// GetReadSetExportJobRequest mocks base method
func (m *MockOmicsAPI) GetReadSetExportJobRequest(arg0 *omics.GetReadSetExportJobInput) (*request.Request, *omics.GetReadSetExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSetExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetReadSetExportJobOutput)
	return ret0, ret1
}

// GetReadSetExportJobRequest indicates an expected call of GetReadSetExportJobRequest
func (mr *MockOmicsAPIMockRecorder) GetReadSetExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetExportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetExportJobRequest), arg0)
}

// GetReadSetExportJobWithContext mocks base method
func (m *MockOmicsAPI) GetReadSetExportJobWithContext(arg0 context.Context, arg1 *omics.GetReadSetExportJobInput, arg2 ...request.Option) (*omics.GetReadSetExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadSetExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetReadSetExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadSetExportJobWithContext indicates an expected call of GetReadSetExportJobWithContext
func (mr *MockOmicsAPIMockRecorder) GetReadSetExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetExportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetExportJobWithContext), varargs...)
}

// GetReadSetImportJob mocks base method
func (m *MockOmicsAPI) GetReadSetImportJob(arg0 *omics.GetReadSetImportJobInput) (*omics.GetReadSetImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSetImportJob", arg0)
	ret0, _ := ret[0].(*omics.GetReadSetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadSetImportJob indicates an expected call of GetReadSetImportJob
func (mr *MockOmicsAPIMockRecorder) GetReadSetImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetImportJob", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetImportJob), arg0)
}

// GetReadSetImportJobRequest mocks base method
func (m *MockOmicsAPI) GetReadSetImportJobRequest(arg0 *omics.GetReadSetImportJobInput) (*request.Request, *omics.GetReadSetImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSetImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetReadSetImportJobOutput)
	return ret0, ret1
}

// GetReadSetImportJobRequest indicates an expected call of GetReadSetImportJobRequest
func (mr *MockOmicsAPIMockRecorder) GetReadSetImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetImportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetImportJobRequest), arg0)
}

// GetReadSetImportJobWithContext mocks base method
func (m *MockOmicsAPI) GetReadSetImportJobWithContext(arg0 context.Context, arg1 *omics.GetReadSetImportJobInput, arg2 ...request.Option) (*omics.GetReadSetImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadSetImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetReadSetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadSetImportJobWithContext indicates an expected call of GetReadSetImportJobWithContext
func (mr *MockOmicsAPIMockRecorder) GetReadSetImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetImportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetImportJobWithContext), varargs...)
}

// GetReadSetMetadata mocks base method
func (m *MockOmicsAPI) GetReadSetMetadata(arg0 *omics.GetReadSetMetadataInput) (*omics.GetReadSetMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSetMetadata", arg0)
	ret0, _ := ret[0].(*omics.GetReadSetMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadSetMetadata indicates an expected call of GetReadSetMetadata
func (mr *MockOmicsAPIMockRecorder) GetReadSetMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetMetadata", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetMetadata), arg0)
}

// GetReadSetMetadataRequest mocks base method
func (m *MockOmicsAPI) GetReadSetMetadataRequest(arg0 *omics.GetReadSetMetadataInput) (*request.Request, *omics.GetReadSetMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSetMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetReadSetMetadataOutput)
	return ret0, ret1
}

// GetReadSetMetadataRequest indicates an expected call of GetReadSetMetadataRequest
func (mr *MockOmicsAPIMockRecorder) GetReadSetMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetMetadataRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetMetadataRequest), arg0)
}

// GetReadSetMetadataWithContext mocks base method
func (m *MockOmicsAPI) GetReadSetMetadataWithContext(arg0 context.Context, arg1 *omics.GetReadSetMetadataInput, arg2 ...request.Option) (*omics.GetReadSetMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadSetMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetReadSetMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadSetMetadataWithContext indicates an expected call of GetReadSetMetadataWithContext
func (mr *MockOmicsAPIMockRecorder) GetReadSetMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetMetadataWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetMetadataWithContext), varargs...)
}

// GetReadSetRequest mocks base method
func (m *MockOmicsAPI) GetReadSetRequest(arg0 *omics.GetReadSetInput) (*request.Request, *omics.GetReadSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetReadSetOutput)
	return ret0, ret1
}

// GetReadSetRequest indicates an expected call of GetReadSetRequest
func (mr *MockOmicsAPIMockRecorder) GetReadSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetRequest), arg0)
}

// GetReadSetWithContext mocks base method
func (m *MockOmicsAPI) GetReadSetWithContext(arg0 context.Context, arg1 *omics.GetReadSetInput, arg2 ...request.Option) (*omics.GetReadSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadSetWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetReadSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadSetWithContext indicates an expected call of GetReadSetWithContext
func (mr *MockOmicsAPIMockRecorder) GetReadSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSetWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetReadSetWithContext), varargs...)
}

// GetReference mocks base method
func (m *MockOmicsAPI) GetReference(arg0 *omics.GetReferenceInput) (*omics.GetReferenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReference", arg0)
	ret0, _ := ret[0].(*omics.GetReferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReference indicates an expected call of GetReference
func (mr *MockOmicsAPIMockRecorder) GetReference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReference", reflect.TypeOf((*MockOmicsAPI)(nil).GetReference), arg0)
}

// GetReferenceImportJob mocks base method
func (m *MockOmicsAPI) GetReferenceImportJob(arg0 *omics.GetReferenceImportJobInput) (*omics.GetReferenceImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceImportJob", arg0)
	ret0, _ := ret[0].(*omics.GetReferenceImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceImportJob indicates an expected call of GetReferenceImportJob
func (mr *MockOmicsAPIMockRecorder) GetReferenceImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceImportJob", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceImportJob), arg0)
}

// GetReferenceImportJobRequest mocks base method
func (m *MockOmicsAPI) GetReferenceImportJobRequest(arg0 *omics.GetReferenceImportJobInput) (*request.Request, *omics.GetReferenceImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetReferenceImportJobOutput)
	return ret0, ret1
}

// GetReferenceImportJobRequest indicates an expected call of GetReferenceImportJobRequest
func (mr *MockOmicsAPIMockRecorder) GetReferenceImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceImportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceImportJobRequest), arg0)
}

// GetReferenceImportJobWithContext mocks base method
func (m *MockOmicsAPI) GetReferenceImportJobWithContext(arg0 context.Context, arg1 *omics.GetReferenceImportJobInput, arg2 ...request.Option) (*omics.GetReferenceImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReferenceImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetReferenceImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceImportJobWithContext indicates an expected call of GetReferenceImportJobWithContext
func (mr *MockOmicsAPIMockRecorder) GetReferenceImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceImportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceImportJobWithContext), varargs...)
}

// GetReferenceMetadata mocks base method
func (m *MockOmicsAPI) GetReferenceMetadata(arg0 *omics.GetReferenceMetadataInput) (*omics.GetReferenceMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceMetadata", arg0)
	ret0, _ := ret[0].(*omics.GetReferenceMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceMetadata indicates an expected call of GetReferenceMetadata
func (mr *MockOmicsAPIMockRecorder) GetReferenceMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceMetadata", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceMetadata), arg0)
}

// GetReferenceMetadataRequest mocks base method
func (m *MockOmicsAPI) GetReferenceMetadataRequest(arg0 *omics.GetReferenceMetadataInput) (*request.Request, *omics.GetReferenceMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetReferenceMetadataOutput)
	return ret0, ret1
}

// GetReferenceMetadataRequest indicates an expected call of GetReferenceMetadataRequest
func (mr *MockOmicsAPIMockRecorder) GetReferenceMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceMetadataRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceMetadataRequest), arg0)
}

// GetReferenceMetadataWithContext mocks base method
func (m *MockOmicsAPI) GetReferenceMetadataWithContext(arg0 context.Context, arg1 *omics.GetReferenceMetadataInput, arg2 ...request.Option) (*omics.GetReferenceMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReferenceMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetReferenceMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceMetadataWithContext indicates an expected call of GetReferenceMetadataWithContext
func (mr *MockOmicsAPIMockRecorder) GetReferenceMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceMetadataWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceMetadataWithContext), varargs...)
}

// GetReferenceRequest mocks base method
func (m *MockOmicsAPI) GetReferenceRequest(arg0 *omics.GetReferenceInput) (*request.Request, *omics.GetReferenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetReferenceOutput)
	return ret0, ret1
}

// GetReferenceRequest indicates an expected call of GetReferenceRequest
func (mr *MockOmicsAPIMockRecorder) GetReferenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceRequest), arg0)
}

// GetReferenceStore mocks base method
func (m *MockOmicsAPI) GetReferenceStore(arg0 *omics.GetReferenceStoreInput) (*omics.GetReferenceStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceStore", arg0)
	ret0, _ := ret[0].(*omics.GetReferenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceStore indicates an expected call of GetReferenceStore
func (mr *MockOmicsAPIMockRecorder) GetReferenceStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceStore", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceStore), arg0)
}

// GetReferenceStoreRequest mocks base method
func (m *MockOmicsAPI) GetReferenceStoreRequest(arg0 *omics.GetReferenceStoreInput) (*request.Request, *omics.GetReferenceStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetReferenceStoreOutput)
	return ret0, ret1
}

// GetReferenceStoreRequest indicates an expected call of GetReferenceStoreRequest
func (mr *MockOmicsAPIMockRecorder) GetReferenceStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceStoreRequest), arg0)
}

// GetReferenceStoreWithContext mocks base method
func (m *MockOmicsAPI) GetReferenceStoreWithContext(arg0 context.Context, arg1 *omics.GetReferenceStoreInput, arg2 ...request.Option) (*omics.GetReferenceStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReferenceStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetReferenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceStoreWithContext indicates an expected call of GetReferenceStoreWithContext
func (mr *MockOmicsAPIMockRecorder) GetReferenceStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceStoreWithContext), varargs...)
}

// GetReferenceWithContext mocks base method
func (m *MockOmicsAPI) GetReferenceWithContext(arg0 context.Context, arg1 *omics.GetReferenceInput, arg2 ...request.Option) (*omics.GetReferenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReferenceWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetReferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceWithContext indicates an expected call of GetReferenceWithContext
func (mr *MockOmicsAPIMockRecorder) GetReferenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetReferenceWithContext), varargs...)
}

// GetRun mocks base method
func (m *MockOmicsAPI) GetRun(arg0 *omics.GetRunInput) (*omics.GetRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRun", arg0)
	ret0, _ := ret[0].(*omics.GetRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRun indicates an expected call of GetRun
func (mr *MockOmicsAPIMockRecorder) GetRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRun", reflect.TypeOf((*MockOmicsAPI)(nil).GetRun), arg0)
}

// GetRunGroup mocks base method
func (m *MockOmicsAPI) GetRunGroup(arg0 *omics.GetRunGroupInput) (*omics.GetRunGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunGroup", arg0)
	ret0, _ := ret[0].(*omics.GetRunGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunGroup indicates an expected call of GetRunGroup
func (mr *MockOmicsAPIMockRecorder) GetRunGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunGroup", reflect.TypeOf((*MockOmicsAPI)(nil).GetRunGroup), arg0)
}

// GetRunGroupRequest mocks base method
func (m *MockOmicsAPI) GetRunGroupRequest(arg0 *omics.GetRunGroupInput) (*request.Request, *omics.GetRunGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetRunGroupOutput)
	return ret0, ret1
}

// GetRunGroupRequest indicates an expected call of GetRunGroupRequest
func (mr *MockOmicsAPIMockRecorder) GetRunGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunGroupRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetRunGroupRequest), arg0)
}

// GetRunGroupWithContext mocks base method
func (m *MockOmicsAPI) GetRunGroupWithContext(arg0 context.Context, arg1 *omics.GetRunGroupInput, arg2 ...request.Option) (*omics.GetRunGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRunGroupWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetRunGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunGroupWithContext indicates an expected call of GetRunGroupWithContext
func (mr *MockOmicsAPIMockRecorder) GetRunGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunGroupWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetRunGroupWithContext), varargs...)
}

// GetRunRequest mocks base method
func (m *MockOmicsAPI) GetRunRequest(arg0 *omics.GetRunInput) (*request.Request, *omics.GetRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetRunOutput)
	return ret0, ret1
}

// GetRunRequest indicates an expected call of GetRunRequest
func (mr *MockOmicsAPIMockRecorder) GetRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetRunRequest), arg0)
}

// GetRunTask mocks base method
func (m *MockOmicsAPI) GetRunTask(arg0 *omics.GetRunTaskInput) (*omics.GetRunTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunTask", arg0)
	ret0, _ := ret[0].(*omics.GetRunTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunTask indicates an expected call of GetRunTask
func (mr *MockOmicsAPIMockRecorder) GetRunTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunTask", reflect.TypeOf((*MockOmicsAPI)(nil).GetRunTask), arg0)
}

// GetRunTaskRequest mocks base method
func (m *MockOmicsAPI) GetRunTaskRequest(arg0 *omics.GetRunTaskInput) (*request.Request, *omics.GetRunTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetRunTaskOutput)
	return ret0, ret1
}

// GetRunTaskRequest indicates an expected call of GetRunTaskRequest
func (mr *MockOmicsAPIMockRecorder) GetRunTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunTaskRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetRunTaskRequest), arg0)
}

// GetRunTaskWithContext mocks base method
func (m *MockOmicsAPI) GetRunTaskWithContext(arg0 context.Context, arg1 *omics.GetRunTaskInput, arg2 ...request.Option) (*omics.GetRunTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRunTaskWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetRunTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunTaskWithContext indicates an expected call of GetRunTaskWithContext
func (mr *MockOmicsAPIMockRecorder) GetRunTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunTaskWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetRunTaskWithContext), varargs...)
}

// GetRunWithContext mocks base method
func (m *MockOmicsAPI) GetRunWithContext(arg0 context.Context, arg1 *omics.GetRunInput, arg2 ...request.Option) (*omics.GetRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRunWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunWithContext indicates an expected call of GetRunWithContext
func (mr *MockOmicsAPIMockRecorder) GetRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetRunWithContext), varargs...)
}

// GetSequenceStore mocks base method
func (m *MockOmicsAPI) GetSequenceStore(arg0 *omics.GetSequenceStoreInput) (*omics.GetSequenceStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequenceStore", arg0)
	ret0, _ := ret[0].(*omics.GetSequenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequenceStore indicates an expected call of GetSequenceStore
func (mr *MockOmicsAPIMockRecorder) GetSequenceStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequenceStore", reflect.TypeOf((*MockOmicsAPI)(nil).GetSequenceStore), arg0)
}

// GetSequenceStoreRequest mocks base method
func (m *MockOmicsAPI) GetSequenceStoreRequest(arg0 *omics.GetSequenceStoreInput) (*request.Request, *omics.GetSequenceStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequenceStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetSequenceStoreOutput)
	return ret0, ret1
}

// GetSequenceStoreRequest indicates an expected call of GetSequenceStoreRequest
func (mr *MockOmicsAPIMockRecorder) GetSequenceStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequenceStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetSequenceStoreRequest), arg0)
}

// GetSequenceStoreWithContext mocks base method
func (m *MockOmicsAPI) GetSequenceStoreWithContext(arg0 context.Context, arg1 *omics.GetSequenceStoreInput, arg2 ...request.Option) (*omics.GetSequenceStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSequenceStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetSequenceStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequenceStoreWithContext indicates an expected call of GetSequenceStoreWithContext
func (mr *MockOmicsAPIMockRecorder) GetSequenceStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequenceStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetSequenceStoreWithContext), varargs...)
}

// GetVariantImportJob mocks base method
func (m *MockOmicsAPI) GetVariantImportJob(arg0 *omics.GetVariantImportJobInput) (*omics.GetVariantImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariantImportJob", arg0)
	ret0, _ := ret[0].(*omics.GetVariantImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariantImportJob indicates an expected call of GetVariantImportJob
func (mr *MockOmicsAPIMockRecorder) GetVariantImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariantImportJob", reflect.TypeOf((*MockOmicsAPI)(nil).GetVariantImportJob), arg0)
}

// GetVariantImportJobRequest mocks base method
func (m *MockOmicsAPI) GetVariantImportJobRequest(arg0 *omics.GetVariantImportJobInput) (*request.Request, *omics.GetVariantImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariantImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetVariantImportJobOutput)
	return ret0, ret1
}

// GetVariantImportJobRequest indicates an expected call of GetVariantImportJobRequest
func (mr *MockOmicsAPIMockRecorder) GetVariantImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariantImportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetVariantImportJobRequest), arg0)
}

// GetVariantImportJobWithContext mocks base method
func (m *MockOmicsAPI) GetVariantImportJobWithContext(arg0 context.Context, arg1 *omics.GetVariantImportJobInput, arg2 ...request.Option) (*omics.GetVariantImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariantImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetVariantImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariantImportJobWithContext indicates an expected call of GetVariantImportJobWithContext
func (mr *MockOmicsAPIMockRecorder) GetVariantImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariantImportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetVariantImportJobWithContext), varargs...)
}

// GetVariantStore mocks base method
func (m *MockOmicsAPI) GetVariantStore(arg0 *omics.GetVariantStoreInput) (*omics.GetVariantStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariantStore", arg0)
	ret0, _ := ret[0].(*omics.GetVariantStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariantStore indicates an expected call of GetVariantStore
func (mr *MockOmicsAPIMockRecorder) GetVariantStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariantStore", reflect.TypeOf((*MockOmicsAPI)(nil).GetVariantStore), arg0)
}

// GetVariantStoreRequest mocks base method
func (m *MockOmicsAPI) GetVariantStoreRequest(arg0 *omics.GetVariantStoreInput) (*request.Request, *omics.GetVariantStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariantStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetVariantStoreOutput)
	return ret0, ret1
}

// GetVariantStoreRequest indicates an expected call of GetVariantStoreRequest
func (mr *MockOmicsAPIMockRecorder) GetVariantStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariantStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetVariantStoreRequest), arg0)
}

// GetVariantStoreWithContext mocks base method
func (m *MockOmicsAPI) GetVariantStoreWithContext(arg0 context.Context, arg1 *omics.GetVariantStoreInput, arg2 ...request.Option) (*omics.GetVariantStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariantStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetVariantStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariantStoreWithContext indicates an expected call of GetVariantStoreWithContext
func (mr *MockOmicsAPIMockRecorder) GetVariantStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariantStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetVariantStoreWithContext), varargs...)
}

// GetWorkflow mocks base method
func (m *MockOmicsAPI) GetWorkflow(arg0 *omics.GetWorkflowInput) (*omics.GetWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", arg0)
	ret0, _ := ret[0].(*omics.GetWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow
func (mr *MockOmicsAPIMockRecorder) GetWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockOmicsAPI)(nil).GetWorkflow), arg0)
}

// GetWorkflowRequest mocks base method
func (m *MockOmicsAPI) GetWorkflowRequest(arg0 *omics.GetWorkflowInput) (*request.Request, *omics.GetWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.GetWorkflowOutput)
	return ret0, ret1
}

// GetWorkflowRequest indicates an expected call of GetWorkflowRequest
func (mr *MockOmicsAPIMockRecorder) GetWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRequest", reflect.TypeOf((*MockOmicsAPI)(nil).GetWorkflowRequest), arg0)
}

// GetWorkflowWithContext mocks base method
func (m *MockOmicsAPI) GetWorkflowWithContext(arg0 context.Context, arg1 *omics.GetWorkflowInput, arg2 ...request.Option) (*omics.GetWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*omics.GetWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowWithContext indicates an expected call of GetWorkflowWithContext
func (mr *MockOmicsAPIMockRecorder) GetWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).GetWorkflowWithContext), varargs...)
}

// ListAnnotationImportJobs mocks base method
func (m *MockOmicsAPI) ListAnnotationImportJobs(arg0 *omics.ListAnnotationImportJobsInput) (*omics.ListAnnotationImportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotationImportJobs", arg0)
	ret0, _ := ret[0].(*omics.ListAnnotationImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnnotationImportJobs indicates an expected call of ListAnnotationImportJobs
func (mr *MockOmicsAPIMockRecorder) ListAnnotationImportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationImportJobs", reflect.TypeOf((*MockOmicsAPI)(nil).ListAnnotationImportJobs), arg0)
}

// ListAnnotationImportJobsPages mocks base method
func (m *MockOmicsAPI) ListAnnotationImportJobsPages(arg0 *omics.ListAnnotationImportJobsInput, arg1 func(*omics.ListAnnotationImportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotationImportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnnotationImportJobsPages indicates an expected call of ListAnnotationImportJobsPages
func (mr *MockOmicsAPIMockRecorder) ListAnnotationImportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationImportJobsPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListAnnotationImportJobsPages), arg0, arg1)
}

// ListAnnotationImportJobsPagesWithContext mocks base method
func (m *MockOmicsAPI) ListAnnotationImportJobsPagesWithContext(arg0 context.Context, arg1 *omics.ListAnnotationImportJobsInput, arg2 func(*omics.ListAnnotationImportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnnotationImportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnnotationImportJobsPagesWithContext indicates an expected call of ListAnnotationImportJobsPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListAnnotationImportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationImportJobsPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListAnnotationImportJobsPagesWithContext), varargs...)
}

// ListAnnotationImportJobsRequest mocks base method
func (m *MockOmicsAPI) ListAnnotationImportJobsRequest(arg0 *omics.ListAnnotationImportJobsInput) (*request.Request, *omics.ListAnnotationImportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotationImportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListAnnotationImportJobsOutput)
	return ret0, ret1
}

// ListAnnotationImportJobsRequest indicates an expected call of ListAnnotationImportJobsRequest
func (mr *MockOmicsAPIMockRecorder) ListAnnotationImportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationImportJobsRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListAnnotationImportJobsRequest), arg0)
}

// ListAnnotationImportJobsWithContext mocks base method
func (m *MockOmicsAPI) ListAnnotationImportJobsWithContext(arg0 context.Context, arg1 *omics.ListAnnotationImportJobsInput, arg2 ...request.Option) (*omics.ListAnnotationImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnnotationImportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListAnnotationImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnnotationImportJobsWithContext indicates an expected call of ListAnnotationImportJobsWithContext
func (mr *MockOmicsAPIMockRecorder) ListAnnotationImportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationImportJobsWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListAnnotationImportJobsWithContext), varargs...)
}

// ListAnnotationStores mocks base method
func (m *MockOmicsAPI) ListAnnotationStores(arg0 *omics.ListAnnotationStoresInput) (*omics.ListAnnotationStoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotationStores", arg0)
	ret0, _ := ret[0].(*omics.ListAnnotationStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnnotationStores indicates an expected call of ListAnnotationStores
func (mr *MockOmicsAPIMockRecorder) ListAnnotationStores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationStores", reflect.TypeOf((*MockOmicsAPI)(nil).ListAnnotationStores), arg0)
}

// ListAnnotationStoresPages mocks base method
func (m *MockOmicsAPI) ListAnnotationStoresPages(arg0 *omics.ListAnnotationStoresInput, arg1 func(*omics.ListAnnotationStoresOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotationStoresPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnnotationStoresPages indicates an expected call of ListAnnotationStoresPages
func (mr *MockOmicsAPIMockRecorder) ListAnnotationStoresPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationStoresPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListAnnotationStoresPages), arg0, arg1)
}

// ListAnnotationStoresPagesWithContext mocks base method
func (m *MockOmicsAPI) ListAnnotationStoresPagesWithContext(arg0 context.Context, arg1 *omics.ListAnnotationStoresInput, arg2 func(*omics.ListAnnotationStoresOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnnotationStoresPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnnotationStoresPagesWithContext indicates an expected call of ListAnnotationStoresPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListAnnotationStoresPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationStoresPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListAnnotationStoresPagesWithContext), varargs...)
}

// ListAnnotationStoresRequest mocks base method
func (m *MockOmicsAPI) ListAnnotationStoresRequest(arg0 *omics.ListAnnotationStoresInput) (*request.Request, *omics.ListAnnotationStoresOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotationStoresRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListAnnotationStoresOutput)
	return ret0, ret1
}

// ListAnnotationStoresRequest indicates an expected call of ListAnnotationStoresRequest
func (mr *MockOmicsAPIMockRecorder) ListAnnotationStoresRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationStoresRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListAnnotationStoresRequest), arg0)
}

// ListAnnotationStoresWithContext mocks base method
func (m *MockOmicsAPI) ListAnnotationStoresWithContext(arg0 context.Context, arg1 *omics.ListAnnotationStoresInput, arg2 ...request.Option) (*omics.ListAnnotationStoresOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnnotationStoresWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListAnnotationStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnnotationStoresWithContext indicates an expected call of ListAnnotationStoresWithContext
func (mr *MockOmicsAPIMockRecorder) ListAnnotationStoresWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationStoresWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListAnnotationStoresWithContext), varargs...)
}

// ListReadSetActivationJobs mocks base method
func (m *MockOmicsAPI) ListReadSetActivationJobs(arg0 *omics.ListReadSetActivationJobsInput) (*omics.ListReadSetActivationJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetActivationJobs", arg0)
	ret0, _ := ret[0].(*omics.ListReadSetActivationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadSetActivationJobs indicates an expected call of ListReadSetActivationJobs
func (mr *MockOmicsAPIMockRecorder) ListReadSetActivationJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetActivationJobs", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetActivationJobs), arg0)
}

// ListReadSetActivationJobsPages mocks base method
func (m *MockOmicsAPI) ListReadSetActivationJobsPages(arg0 *omics.ListReadSetActivationJobsInput, arg1 func(*omics.ListReadSetActivationJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetActivationJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReadSetActivationJobsPages indicates an expected call of ListReadSetActivationJobsPages
func (mr *MockOmicsAPIMockRecorder) ListReadSetActivationJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetActivationJobsPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetActivationJobsPages), arg0, arg1)
}

// ListReadSetActivationJobsPagesWithContext mocks base method
func (m *MockOmicsAPI) ListReadSetActivationJobsPagesWithContext(arg0 context.Context, arg1 *omics.ListReadSetActivationJobsInput, arg2 func(*omics.ListReadSetActivationJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadSetActivationJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReadSetActivationJobsPagesWithContext indicates an expected call of ListReadSetActivationJobsPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListReadSetActivationJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetActivationJobsPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetActivationJobsPagesWithContext), varargs...)
}

// ListReadSetActivationJobsRequest mocks base method
func (m *MockOmicsAPI) ListReadSetActivationJobsRequest(arg0 *omics.ListReadSetActivationJobsInput) (*request.Request, *omics.ListReadSetActivationJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetActivationJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListReadSetActivationJobsOutput)
	return ret0, ret1
}

// ListReadSetActivationJobsRequest indicates an expected call of ListReadSetActivationJobsRequest
func (mr *MockOmicsAPIMockRecorder) ListReadSetActivationJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetActivationJobsRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetActivationJobsRequest), arg0)
}

// ListReadSetActivationJobsWithContext mocks base method
func (m *MockOmicsAPI) ListReadSetActivationJobsWithContext(arg0 context.Context, arg1 *omics.ListReadSetActivationJobsInput, arg2 ...request.Option) (*omics.ListReadSetActivationJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadSetActivationJobsWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListReadSetActivationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadSetActivationJobsWithContext indicates an expected call of ListReadSetActivationJobsWithContext
func (mr *MockOmicsAPIMockRecorder) ListReadSetActivationJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetActivationJobsWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetActivationJobsWithContext), varargs...)
}

// ListReadSetExportJobs mocks base method
func (m *MockOmicsAPI) ListReadSetExportJobs(arg0 *omics.ListReadSetExportJobsInput) (*omics.ListReadSetExportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetExportJobs", arg0)
	ret0, _ := ret[0].(*omics.ListReadSetExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadSetExportJobs indicates an expected call of ListReadSetExportJobs
func (mr *MockOmicsAPIMockRecorder) ListReadSetExportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetExportJobs", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetExportJobs), arg0)
}

// ListReadSetExportJobsPages mocks base method
func (m *MockOmicsAPI) ListReadSetExportJobsPages(arg0 *omics.ListReadSetExportJobsInput, arg1 func(*omics.ListReadSetExportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetExportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReadSetExportJobsPages indicates an expected call of ListReadSetExportJobsPages
func (mr *MockOmicsAPIMockRecorder) ListReadSetExportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetExportJobsPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetExportJobsPages), arg0, arg1)
}

// ListReadSetExportJobsPagesWithContext mocks base method
func (m *MockOmicsAPI) ListReadSetExportJobsPagesWithContext(arg0 context.Context, arg1 *omics.ListReadSetExportJobsInput, arg2 func(*omics.ListReadSetExportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadSetExportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReadSetExportJobsPagesWithContext indicates an expected call of ListReadSetExportJobsPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListReadSetExportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetExportJobsPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetExportJobsPagesWithContext), varargs...)
}

// ListReadSetExportJobsRequest mocks base method
func (m *MockOmicsAPI) ListReadSetExportJobsRequest(arg0 *omics.ListReadSetExportJobsInput) (*request.Request, *omics.ListReadSetExportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetExportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListReadSetExportJobsOutput)
	return ret0, ret1
}

// ListReadSetExportJobsRequest indicates an expected call of ListReadSetExportJobsRequest
func (mr *MockOmicsAPIMockRecorder) ListReadSetExportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetExportJobsRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetExportJobsRequest), arg0)
}

// ListReadSetExportJobsWithContext mocks base method
func (m *MockOmicsAPI) ListReadSetExportJobsWithContext(arg0 context.Context, arg1 *omics.ListReadSetExportJobsInput, arg2 ...request.Option) (*omics.ListReadSetExportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadSetExportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListReadSetExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadSetExportJobsWithContext indicates an expected call of ListReadSetExportJobsWithContext
func (mr *MockOmicsAPIMockRecorder) ListReadSetExportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetExportJobsWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetExportJobsWithContext), varargs...)
}

// ListReadSetImportJobs mocks base method
func (m *MockOmicsAPI) ListReadSetImportJobs(arg0 *omics.ListReadSetImportJobsInput) (*omics.ListReadSetImportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetImportJobs", arg0)
	ret0, _ := ret[0].(*omics.ListReadSetImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadSetImportJobs indicates an expected call of ListReadSetImportJobs
func (mr *MockOmicsAPIMockRecorder) ListReadSetImportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetImportJobs", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetImportJobs), arg0)
}

// ListReadSetImportJobsPages mocks base method
func (m *MockOmicsAPI) ListReadSetImportJobsPages(arg0 *omics.ListReadSetImportJobsInput, arg1 func(*omics.ListReadSetImportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetImportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReadSetImportJobsPages indicates an expected call of ListReadSetImportJobsPages
func (mr *MockOmicsAPIMockRecorder) ListReadSetImportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetImportJobsPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetImportJobsPages), arg0, arg1)
}

// ListReadSetImportJobsPagesWithContext mocks base method
func (m *MockOmicsAPI) ListReadSetImportJobsPagesWithContext(arg0 context.Context, arg1 *omics.ListReadSetImportJobsInput, arg2 func(*omics.ListReadSetImportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadSetImportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReadSetImportJobsPagesWithContext indicates an expected call of ListReadSetImportJobsPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListReadSetImportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetImportJobsPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetImportJobsPagesWithContext), varargs...)
}

// ListReadSetImportJobsRequest mocks base method
func (m *MockOmicsAPI) ListReadSetImportJobsRequest(arg0 *omics.ListReadSetImportJobsInput) (*request.Request, *omics.ListReadSetImportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetImportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListReadSetImportJobsOutput)
	return ret0, ret1
}

// ListReadSetImportJobsRequest indicates an expected call of ListReadSetImportJobsRequest
func (mr *MockOmicsAPIMockRecorder) ListReadSetImportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetImportJobsRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetImportJobsRequest), arg0)
}

// ListReadSetImportJobsWithContext mocks base method
func (m *MockOmicsAPI) ListReadSetImportJobsWithContext(arg0 context.Context, arg1 *omics.ListReadSetImportJobsInput, arg2 ...request.Option) (*omics.ListReadSetImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadSetImportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListReadSetImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadSetImportJobsWithContext indicates an expected call of ListReadSetImportJobsWithContext
func (mr *MockOmicsAPIMockRecorder) ListReadSetImportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetImportJobsWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetImportJobsWithContext), varargs...)
}

// ListReadSets mocks base method
func (m *MockOmicsAPI) ListReadSets(arg0 *omics.ListReadSetsInput) (*omics.ListReadSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSets", arg0)
	ret0, _ := ret[0].(*omics.ListReadSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadSets indicates an expected call of ListReadSets
func (mr *MockOmicsAPIMockRecorder) ListReadSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSets", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSets), arg0)
}

// ListReadSetsPages mocks base method
func (m *MockOmicsAPI) ListReadSetsPages(arg0 *omics.ListReadSetsInput, arg1 func(*omics.ListReadSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReadSetsPages indicates an expected call of ListReadSetsPages
func (mr *MockOmicsAPIMockRecorder) ListReadSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetsPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetsPages), arg0, arg1)
}

// ListReadSetsPagesWithContext mocks base method
func (m *MockOmicsAPI) ListReadSetsPagesWithContext(arg0 context.Context, arg1 *omics.ListReadSetsInput, arg2 func(*omics.ListReadSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReadSetsPagesWithContext indicates an expected call of ListReadSetsPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListReadSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetsPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetsPagesWithContext), varargs...)
}

// ListReadSetsRequest mocks base method
func (m *MockOmicsAPI) ListReadSetsRequest(arg0 *omics.ListReadSetsInput) (*request.Request, *omics.ListReadSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListReadSetsOutput)
	return ret0, ret1
}

// ListReadSetsRequest indicates an expected call of ListReadSetsRequest
func (mr *MockOmicsAPIMockRecorder) ListReadSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetsRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetsRequest), arg0)
}

// ListReadSetsWithContext mocks base method
func (m *MockOmicsAPI) ListReadSetsWithContext(arg0 context.Context, arg1 *omics.ListReadSetsInput, arg2 ...request.Option) (*omics.ListReadSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadSetsWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListReadSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadSetsWithContext indicates an expected call of ListReadSetsWithContext
func (mr *MockOmicsAPIMockRecorder) ListReadSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadSetsWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReadSetsWithContext), varargs...)
}

// ListReferenceImportJobs mocks base method
func (m *MockOmicsAPI) ListReferenceImportJobs(arg0 *omics.ListReferenceImportJobsInput) (*omics.ListReferenceImportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferenceImportJobs", arg0)
	ret0, _ := ret[0].(*omics.ListReferenceImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReferenceImportJobs indicates an expected call of ListReferenceImportJobs
func (mr *MockOmicsAPIMockRecorder) ListReferenceImportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceImportJobs", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferenceImportJobs), arg0)
}

// ListReferenceImportJobsPages mocks base method
func (m *MockOmicsAPI) ListReferenceImportJobsPages(arg0 *omics.ListReferenceImportJobsInput, arg1 func(*omics.ListReferenceImportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferenceImportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReferenceImportJobsPages indicates an expected call of ListReferenceImportJobsPages
func (mr *MockOmicsAPIMockRecorder) ListReferenceImportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceImportJobsPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferenceImportJobsPages), arg0, arg1)
}

// ListReferenceImportJobsPagesWithContext mocks base method
func (m *MockOmicsAPI) ListReferenceImportJobsPagesWithContext(arg0 context.Context, arg1 *omics.ListReferenceImportJobsInput, arg2 func(*omics.ListReferenceImportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReferenceImportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReferenceImportJobsPagesWithContext indicates an expected call of ListReferenceImportJobsPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListReferenceImportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceImportJobsPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferenceImportJobsPagesWithContext), varargs...)
}

// ListReferenceImportJobsRequest mocks base method
func (m *MockOmicsAPI) ListReferenceImportJobsRequest(arg0 *omics.ListReferenceImportJobsInput) (*request.Request, *omics.ListReferenceImportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferenceImportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListReferenceImportJobsOutput)
	return ret0, ret1
}

// ListReferenceImportJobsRequest indicates an expected call of ListReferenceImportJobsRequest
func (mr *MockOmicsAPIMockRecorder) ListReferenceImportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceImportJobsRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferenceImportJobsRequest), arg0)
}

// ListReferenceImportJobsWithContext mocks base method
func (m *MockOmicsAPI) ListReferenceImportJobsWithContext(arg0 context.Context, arg1 *omics.ListReferenceImportJobsInput, arg2 ...request.Option) (*omics.ListReferenceImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReferenceImportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListReferenceImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReferenceImportJobsWithContext indicates an expected call of ListReferenceImportJobsWithContext
func (mr *MockOmicsAPIMockRecorder) ListReferenceImportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceImportJobsWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferenceImportJobsWithContext), varargs...)
}

// ListReferenceStores mocks base method
func (m *MockOmicsAPI) ListReferenceStores(arg0 *omics.ListReferenceStoresInput) (*omics.ListReferenceStoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferenceStores", arg0)
	ret0, _ := ret[0].(*omics.ListReferenceStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReferenceStores indicates an expected call of ListReferenceStores
func (mr *MockOmicsAPIMockRecorder) ListReferenceStores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceStores", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferenceStores), arg0)
}

// ListReferenceStoresPages mocks base method
func (m *MockOmicsAPI) ListReferenceStoresPages(arg0 *omics.ListReferenceStoresInput, arg1 func(*omics.ListReferenceStoresOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferenceStoresPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReferenceStoresPages indicates an expected call of ListReferenceStoresPages
func (mr *MockOmicsAPIMockRecorder) ListReferenceStoresPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceStoresPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferenceStoresPages), arg0, arg1)
}

// ListReferenceStoresPagesWithContext mocks base method
func (m *MockOmicsAPI) ListReferenceStoresPagesWithContext(arg0 context.Context, arg1 *omics.ListReferenceStoresInput, arg2 func(*omics.ListReferenceStoresOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReferenceStoresPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReferenceStoresPagesWithContext indicates an expected call of ListReferenceStoresPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListReferenceStoresPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceStoresPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferenceStoresPagesWithContext), varargs...)
}

// ListReferenceStoresRequest mocks base method
func (m *MockOmicsAPI) ListReferenceStoresRequest(arg0 *omics.ListReferenceStoresInput) (*request.Request, *omics.ListReferenceStoresOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferenceStoresRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListReferenceStoresOutput)
	return ret0, ret1
}

// ListReferenceStoresRequest indicates an expected call of ListReferenceStoresRequest
func (mr *MockOmicsAPIMockRecorder) ListReferenceStoresRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceStoresRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferenceStoresRequest), arg0)
}

// ListReferenceStoresWithContext mocks base method
func (m *MockOmicsAPI) ListReferenceStoresWithContext(arg0 context.Context, arg1 *omics.ListReferenceStoresInput, arg2 ...request.Option) (*omics.ListReferenceStoresOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReferenceStoresWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListReferenceStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReferenceStoresWithContext indicates an expected call of ListReferenceStoresWithContext
func (mr *MockOmicsAPIMockRecorder) ListReferenceStoresWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceStoresWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferenceStoresWithContext), varargs...)
}

// ListReferences mocks base method
func (m *MockOmicsAPI) ListReferences(arg0 *omics.ListReferencesInput) (*omics.ListReferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferences", arg0)
	ret0, _ := ret[0].(*omics.ListReferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReferences indicates an expected call of ListReferences
func (mr *MockOmicsAPIMockRecorder) ListReferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferences", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferences), arg0)
}

// ListReferencesPages mocks base method
func (m *MockOmicsAPI) ListReferencesPages(arg0 *omics.ListReferencesInput, arg1 func(*omics.ListReferencesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferencesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReferencesPages indicates an expected call of ListReferencesPages
func (mr *MockOmicsAPIMockRecorder) ListReferencesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferencesPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferencesPages), arg0, arg1)
}

// ListReferencesPagesWithContext mocks base method
func (m *MockOmicsAPI) ListReferencesPagesWithContext(arg0 context.Context, arg1 *omics.ListReferencesInput, arg2 func(*omics.ListReferencesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReferencesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReferencesPagesWithContext indicates an expected call of ListReferencesPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListReferencesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferencesPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferencesPagesWithContext), varargs...)
}

// ListReferencesRequest mocks base method
func (m *MockOmicsAPI) ListReferencesRequest(arg0 *omics.ListReferencesInput) (*request.Request, *omics.ListReferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListReferencesOutput)
	return ret0, ret1
}

// ListReferencesRequest indicates an expected call of ListReferencesRequest
func (mr *MockOmicsAPIMockRecorder) ListReferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferencesRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferencesRequest), arg0)
}

// ListReferencesWithContext mocks base method
func (m *MockOmicsAPI) ListReferencesWithContext(arg0 context.Context, arg1 *omics.ListReferencesInput, arg2 ...request.Option) (*omics.ListReferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReferencesWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListReferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReferencesWithContext indicates an expected call of ListReferencesWithContext
func (mr *MockOmicsAPIMockRecorder) ListReferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferencesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListReferencesWithContext), varargs...)
}

// ListRunGroups mocks base method
func (m *MockOmicsAPI) ListRunGroups(arg0 *omics.ListRunGroupsInput) (*omics.ListRunGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunGroups", arg0)
	ret0, _ := ret[0].(*omics.ListRunGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunGroups indicates an expected call of ListRunGroups
func (mr *MockOmicsAPIMockRecorder) ListRunGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunGroups", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunGroups), arg0)
}

// ListRunGroupsPages mocks base method
func (m *MockOmicsAPI) ListRunGroupsPages(arg0 *omics.ListRunGroupsInput, arg1 func(*omics.ListRunGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRunGroupsPages indicates an expected call of ListRunGroupsPages
func (mr *MockOmicsAPIMockRecorder) ListRunGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunGroupsPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunGroupsPages), arg0, arg1)
}

// ListRunGroupsPagesWithContext mocks base method
func (m *MockOmicsAPI) ListRunGroupsPagesWithContext(arg0 context.Context, arg1 *omics.ListRunGroupsInput, arg2 func(*omics.ListRunGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRunGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRunGroupsPagesWithContext indicates an expected call of ListRunGroupsPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListRunGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunGroupsPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunGroupsPagesWithContext), varargs...)
}

// ListRunGroupsRequest mocks base method
func (m *MockOmicsAPI) ListRunGroupsRequest(arg0 *omics.ListRunGroupsInput) (*request.Request, *omics.ListRunGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListRunGroupsOutput)
	return ret0, ret1
}

// ListRunGroupsRequest indicates an expected call of ListRunGroupsRequest
func (mr *MockOmicsAPIMockRecorder) ListRunGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunGroupsRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunGroupsRequest), arg0)
}

// ListRunGroupsWithContext mocks base method
func (m *MockOmicsAPI) ListRunGroupsWithContext(arg0 context.Context, arg1 *omics.ListRunGroupsInput, arg2 ...request.Option) (*omics.ListRunGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRunGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListRunGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunGroupsWithContext indicates an expected call of ListRunGroupsWithContext
func (mr *MockOmicsAPIMockRecorder) ListRunGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunGroupsWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunGroupsWithContext), varargs...)
}

// ListRunTasks mocks base method
func (m *MockOmicsAPI) ListRunTasks(arg0 *omics.ListRunTasksInput) (*omics.ListRunTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunTasks", arg0)
	ret0, _ := ret[0].(*omics.ListRunTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunTasks indicates an expected call of ListRunTasks
func (mr *MockOmicsAPIMockRecorder) ListRunTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunTasks", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunTasks), arg0)
}

// ListRunTasksPages mocks base method
func (m *MockOmicsAPI) ListRunTasksPages(arg0 *omics.ListRunTasksInput, arg1 func(*omics.ListRunTasksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunTasksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRunTasksPages indicates an expected call of ListRunTasksPages
func (mr *MockOmicsAPIMockRecorder) ListRunTasksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunTasksPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunTasksPages), arg0, arg1)
}

// ListRunTasksPagesWithContext mocks base method
func (m *MockOmicsAPI) ListRunTasksPagesWithContext(arg0 context.Context, arg1 *omics.ListRunTasksInput, arg2 func(*omics.ListRunTasksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRunTasksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRunTasksPagesWithContext indicates an expected call of ListRunTasksPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListRunTasksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunTasksPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunTasksPagesWithContext), varargs...)
}

// ListRunTasksRequest mocks base method
func (m *MockOmicsAPI) ListRunTasksRequest(arg0 *omics.ListRunTasksInput) (*request.Request, *omics.ListRunTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListRunTasksOutput)
	return ret0, ret1
}

// ListRunTasksRequest indicates an expected call of ListRunTasksRequest
func (mr *MockOmicsAPIMockRecorder) ListRunTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunTasksRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunTasksRequest), arg0)
}

// ListRunTasksWithContext mocks base method
func (m *MockOmicsAPI) ListRunTasksWithContext(arg0 context.Context, arg1 *omics.ListRunTasksInput, arg2 ...request.Option) (*omics.ListRunTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRunTasksWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListRunTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunTasksWithContext indicates an expected call of ListRunTasksWithContext
func (mr *MockOmicsAPIMockRecorder) ListRunTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunTasksWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunTasksWithContext), varargs...)
}

// ListRuns mocks base method
func (m *MockOmicsAPI) ListRuns(arg0 *omics.ListRunsInput) (*omics.ListRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuns", arg0)
	ret0, _ := ret[0].(*omics.ListRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuns indicates an expected call of ListRuns
func (mr *MockOmicsAPIMockRecorder) ListRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuns", reflect.TypeOf((*MockOmicsAPI)(nil).ListRuns), arg0)
}

// ListRunsPages mocks base method
func (m *MockOmicsAPI) ListRunsPages(arg0 *omics.ListRunsInput, arg1 func(*omics.ListRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRunsPages indicates an expected call of ListRunsPages
func (mr *MockOmicsAPIMockRecorder) ListRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunsPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunsPages), arg0, arg1)
}

// ListRunsPagesWithContext mocks base method
func (m *MockOmicsAPI) ListRunsPagesWithContext(arg0 context.Context, arg1 *omics.ListRunsInput, arg2 func(*omics.ListRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRunsPagesWithContext indicates an expected call of ListRunsPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunsPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunsPagesWithContext), varargs...)
}

// ListRunsRequest mocks base method
func (m *MockOmicsAPI) ListRunsRequest(arg0 *omics.ListRunsInput) (*request.Request, *omics.ListRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListRunsOutput)
	return ret0, ret1
}

// ListRunsRequest indicates an expected call of ListRunsRequest
func (mr *MockOmicsAPIMockRecorder) ListRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunsRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunsRequest), arg0)
}

// ListRunsWithContext mocks base method
func (m *MockOmicsAPI) ListRunsWithContext(arg0 context.Context, arg1 *omics.ListRunsInput, arg2 ...request.Option) (*omics.ListRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRunsWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunsWithContext indicates an expected call of ListRunsWithContext
func (mr *MockOmicsAPIMockRecorder) ListRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunsWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListRunsWithContext), varargs...)
}

// ListSequenceStores mocks base method
func (m *MockOmicsAPI) ListSequenceStores(arg0 *omics.ListSequenceStoresInput) (*omics.ListSequenceStoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSequenceStores", arg0)
	ret0, _ := ret[0].(*omics.ListSequenceStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSequenceStores indicates an expected call of ListSequenceStores
func (mr *MockOmicsAPIMockRecorder) ListSequenceStores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSequenceStores", reflect.TypeOf((*MockOmicsAPI)(nil).ListSequenceStores), arg0)
}

// ListSequenceStoresPages mocks base method
func (m *MockOmicsAPI) ListSequenceStoresPages(arg0 *omics.ListSequenceStoresInput, arg1 func(*omics.ListSequenceStoresOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSequenceStoresPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSequenceStoresPages indicates an expected call of ListSequenceStoresPages
func (mr *MockOmicsAPIMockRecorder) ListSequenceStoresPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSequenceStoresPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListSequenceStoresPages), arg0, arg1)
}

// ListSequenceStoresPagesWithContext mocks base method
func (m *MockOmicsAPI) ListSequenceStoresPagesWithContext(arg0 context.Context, arg1 *omics.ListSequenceStoresInput, arg2 func(*omics.ListSequenceStoresOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSequenceStoresPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSequenceStoresPagesWithContext indicates an expected call of ListSequenceStoresPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListSequenceStoresPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSequenceStoresPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListSequenceStoresPagesWithContext), varargs...)
}

// ListSequenceStoresRequest mocks base method
func (m *MockOmicsAPI) ListSequenceStoresRequest(arg0 *omics.ListSequenceStoresInput) (*request.Request, *omics.ListSequenceStoresOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSequenceStoresRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListSequenceStoresOutput)
	return ret0, ret1
}

// ListSequenceStoresRequest indicates an expected call of ListSequenceStoresRequest
func (mr *MockOmicsAPIMockRecorder) ListSequenceStoresRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSequenceStoresRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListSequenceStoresRequest), arg0)
}

// ListSequenceStoresWithContext mocks base method
func (m *MockOmicsAPI) ListSequenceStoresWithContext(arg0 context.Context, arg1 *omics.ListSequenceStoresInput, arg2 ...request.Option) (*omics.ListSequenceStoresOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSequenceStoresWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListSequenceStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSequenceStoresWithContext indicates an expected call of ListSequenceStoresWithContext
func (mr *MockOmicsAPIMockRecorder) ListSequenceStoresWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSequenceStoresWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListSequenceStoresWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockOmicsAPI) ListTagsForResource(arg0 *omics.ListTagsForResourceInput) (*omics.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*omics.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockOmicsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockOmicsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockOmicsAPI) ListTagsForResourceRequest(arg0 *omics.ListTagsForResourceInput) (*request.Request, *omics.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockOmicsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockOmicsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *omics.ListTagsForResourceInput, arg2 ...request.Option) (*omics.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockOmicsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListVariantImportJobs mocks base method
func (m *MockOmicsAPI) ListVariantImportJobs(arg0 *omics.ListVariantImportJobsInput) (*omics.ListVariantImportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVariantImportJobs", arg0)
	ret0, _ := ret[0].(*omics.ListVariantImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVariantImportJobs indicates an expected call of ListVariantImportJobs
func (mr *MockOmicsAPIMockRecorder) ListVariantImportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariantImportJobs", reflect.TypeOf((*MockOmicsAPI)(nil).ListVariantImportJobs), arg0)
}

// ListVariantImportJobsPages mocks base method
func (m *MockOmicsAPI) ListVariantImportJobsPages(arg0 *omics.ListVariantImportJobsInput, arg1 func(*omics.ListVariantImportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVariantImportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVariantImportJobsPages indicates an expected call of ListVariantImportJobsPages
func (mr *MockOmicsAPIMockRecorder) ListVariantImportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariantImportJobsPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListVariantImportJobsPages), arg0, arg1)
}

// ListVariantImportJobsPagesWithContext mocks base method
func (m *MockOmicsAPI) ListVariantImportJobsPagesWithContext(arg0 context.Context, arg1 *omics.ListVariantImportJobsInput, arg2 func(*omics.ListVariantImportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVariantImportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVariantImportJobsPagesWithContext indicates an expected call of ListVariantImportJobsPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListVariantImportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariantImportJobsPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListVariantImportJobsPagesWithContext), varargs...)
}

// ListVariantImportJobsRequest mocks base method
func (m *MockOmicsAPI) ListVariantImportJobsRequest(arg0 *omics.ListVariantImportJobsInput) (*request.Request, *omics.ListVariantImportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVariantImportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListVariantImportJobsOutput)
	return ret0, ret1
}

// ListVariantImportJobsRequest indicates an expected call of ListVariantImportJobsRequest
func (mr *MockOmicsAPIMockRecorder) ListVariantImportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariantImportJobsRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListVariantImportJobsRequest), arg0)
}

// ListVariantImportJobsWithContext mocks base method
func (m *MockOmicsAPI) ListVariantImportJobsWithContext(arg0 context.Context, arg1 *omics.ListVariantImportJobsInput, arg2 ...request.Option) (*omics.ListVariantImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVariantImportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListVariantImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVariantImportJobsWithContext indicates an expected call of ListVariantImportJobsWithContext
func (mr *MockOmicsAPIMockRecorder) ListVariantImportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariantImportJobsWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListVariantImportJobsWithContext), varargs...)
}

// ListVariantStores mocks base method
func (m *MockOmicsAPI) ListVariantStores(arg0 *omics.ListVariantStoresInput) (*omics.ListVariantStoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVariantStores", arg0)
	ret0, _ := ret[0].(*omics.ListVariantStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVariantStores indicates an expected call of ListVariantStores
func (mr *MockOmicsAPIMockRecorder) ListVariantStores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariantStores", reflect.TypeOf((*MockOmicsAPI)(nil).ListVariantStores), arg0)
}

// ListVariantStoresPages mocks base method
func (m *MockOmicsAPI) ListVariantStoresPages(arg0 *omics.ListVariantStoresInput, arg1 func(*omics.ListVariantStoresOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVariantStoresPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVariantStoresPages indicates an expected call of ListVariantStoresPages
func (mr *MockOmicsAPIMockRecorder) ListVariantStoresPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariantStoresPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListVariantStoresPages), arg0, arg1)
}

// ListVariantStoresPagesWithContext mocks base method
func (m *MockOmicsAPI) ListVariantStoresPagesWithContext(arg0 context.Context, arg1 *omics.ListVariantStoresInput, arg2 func(*omics.ListVariantStoresOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVariantStoresPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVariantStoresPagesWithContext indicates an expected call of ListVariantStoresPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListVariantStoresPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariantStoresPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListVariantStoresPagesWithContext), varargs...)
}

// ListVariantStoresRequest mocks base method
func (m *MockOmicsAPI) ListVariantStoresRequest(arg0 *omics.ListVariantStoresInput) (*request.Request, *omics.ListVariantStoresOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVariantStoresRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListVariantStoresOutput)
	return ret0, ret1
}

// ListVariantStoresRequest indicates an expected call of ListVariantStoresRequest
func (mr *MockOmicsAPIMockRecorder) ListVariantStoresRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariantStoresRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListVariantStoresRequest), arg0)
}

// ListVariantStoresWithContext mocks base method
func (m *MockOmicsAPI) ListVariantStoresWithContext(arg0 context.Context, arg1 *omics.ListVariantStoresInput, arg2 ...request.Option) (*omics.ListVariantStoresOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVariantStoresWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListVariantStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVariantStoresWithContext indicates an expected call of ListVariantStoresWithContext
func (mr *MockOmicsAPIMockRecorder) ListVariantStoresWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariantStoresWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListVariantStoresWithContext), varargs...)
}

// ListWorkflows mocks base method
func (m *MockOmicsAPI) ListWorkflows(arg0 *omics.ListWorkflowsInput) (*omics.ListWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", arg0)
	ret0, _ := ret[0].(*omics.ListWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows
func (mr *MockOmicsAPIMockRecorder) ListWorkflows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockOmicsAPI)(nil).ListWorkflows), arg0)
}

// ListWorkflowsPages mocks base method
func (m *MockOmicsAPI) ListWorkflowsPages(arg0 *omics.ListWorkflowsInput, arg1 func(*omics.ListWorkflowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowsPages indicates an expected call of ListWorkflowsPages
func (mr *MockOmicsAPIMockRecorder) ListWorkflowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsPages", reflect.TypeOf((*MockOmicsAPI)(nil).ListWorkflowsPages), arg0, arg1)
}

// ListWorkflowsPagesWithContext mocks base method
func (m *MockOmicsAPI) ListWorkflowsPagesWithContext(arg0 context.Context, arg1 *omics.ListWorkflowsInput, arg2 func(*omics.ListWorkflowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowsPagesWithContext indicates an expected call of ListWorkflowsPagesWithContext
func (mr *MockOmicsAPIMockRecorder) ListWorkflowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsPagesWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListWorkflowsPagesWithContext), varargs...)
}

// ListWorkflowsRequest mocks base method
func (m *MockOmicsAPI) ListWorkflowsRequest(arg0 *omics.ListWorkflowsInput) (*request.Request, *omics.ListWorkflowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.ListWorkflowsOutput)
	return ret0, ret1
}

// ListWorkflowsRequest indicates an expected call of ListWorkflowsRequest
func (mr *MockOmicsAPIMockRecorder) ListWorkflowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsRequest", reflect.TypeOf((*MockOmicsAPI)(nil).ListWorkflowsRequest), arg0)
}

// ListWorkflowsWithContext mocks base method
func (m *MockOmicsAPI) ListWorkflowsWithContext(arg0 context.Context, arg1 *omics.ListWorkflowsInput, arg2 ...request.Option) (*omics.ListWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowsWithContext", varargs...)
	ret0, _ := ret[0].(*omics.ListWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowsWithContext indicates an expected call of ListWorkflowsWithContext
func (mr *MockOmicsAPIMockRecorder) ListWorkflowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).ListWorkflowsWithContext), varargs...)
}

// StartAnnotationImportJob mocks base method
func (m *MockOmicsAPI) StartAnnotationImportJob(arg0 *omics.StartAnnotationImportJobInput) (*omics.StartAnnotationImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAnnotationImportJob", arg0)
	ret0, _ := ret[0].(*omics.StartAnnotationImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAnnotationImportJob indicates an expected call of StartAnnotationImportJob
func (mr *MockOmicsAPIMockRecorder) StartAnnotationImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAnnotationImportJob", reflect.TypeOf((*MockOmicsAPI)(nil).StartAnnotationImportJob), arg0)
}

// StartAnnotationImportJobRequest mocks base method
func (m *MockOmicsAPI) StartAnnotationImportJobRequest(arg0 *omics.StartAnnotationImportJobInput) (*request.Request, *omics.StartAnnotationImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAnnotationImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.StartAnnotationImportJobOutput)
	return ret0, ret1
}

// StartAnnotationImportJobRequest indicates an expected call of StartAnnotationImportJobRequest
func (mr *MockOmicsAPIMockRecorder) StartAnnotationImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAnnotationImportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).StartAnnotationImportJobRequest), arg0)
}

// StartAnnotationImportJobWithContext mocks base method
func (m *MockOmicsAPI) StartAnnotationImportJobWithContext(arg0 context.Context, arg1 *omics.StartAnnotationImportJobInput, arg2 ...request.Option) (*omics.StartAnnotationImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAnnotationImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.StartAnnotationImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAnnotationImportJobWithContext indicates an expected call of StartAnnotationImportJobWithContext
func (mr *MockOmicsAPIMockRecorder) StartAnnotationImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAnnotationImportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).StartAnnotationImportJobWithContext), varargs...)
}

// StartReadSetActivationJob mocks base method
func (m *MockOmicsAPI) StartReadSetActivationJob(arg0 *omics.StartReadSetActivationJobInput) (*omics.StartReadSetActivationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReadSetActivationJob", arg0)
	ret0, _ := ret[0].(*omics.StartReadSetActivationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReadSetActivationJob indicates an expected call of StartReadSetActivationJob
func (mr *MockOmicsAPIMockRecorder) StartReadSetActivationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReadSetActivationJob", reflect.TypeOf((*MockOmicsAPI)(nil).StartReadSetActivationJob), arg0)
}

// StartReadSetActivationJobRequest mocks base method
func (m *MockOmicsAPI) StartReadSetActivationJobRequest(arg0 *omics.StartReadSetActivationJobInput) (*request.Request, *omics.StartReadSetActivationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReadSetActivationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.StartReadSetActivationJobOutput)
	return ret0, ret1
}

// StartReadSetActivationJobRequest indicates an expected call of StartReadSetActivationJobRequest
func (mr *MockOmicsAPIMockRecorder) StartReadSetActivationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReadSetActivationJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).StartReadSetActivationJobRequest), arg0)
}

// StartReadSetActivationJobWithContext mocks base method
func (m *MockOmicsAPI) StartReadSetActivationJobWithContext(arg0 context.Context, arg1 *omics.StartReadSetActivationJobInput, arg2 ...request.Option) (*omics.StartReadSetActivationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReadSetActivationJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.StartReadSetActivationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReadSetActivationJobWithContext indicates an expected call of StartReadSetActivationJobWithContext
func (mr *MockOmicsAPIMockRecorder) StartReadSetActivationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReadSetActivationJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).StartReadSetActivationJobWithContext), varargs...)
}

// StartReadSetExportJob mocks base method
func (m *MockOmicsAPI) StartReadSetExportJob(arg0 *omics.StartReadSetExportJobInput) (*omics.StartReadSetExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReadSetExportJob", arg0)
	ret0, _ := ret[0].(*omics.StartReadSetExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReadSetExportJob indicates an expected call of StartReadSetExportJob
func (mr *MockOmicsAPIMockRecorder) StartReadSetExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReadSetExportJob", reflect.TypeOf((*MockOmicsAPI)(nil).StartReadSetExportJob), arg0)
}

// StartReadSetExportJobRequest mocks base method
func (m *MockOmicsAPI) StartReadSetExportJobRequest(arg0 *omics.StartReadSetExportJobInput) (*request.Request, *omics.StartReadSetExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReadSetExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.StartReadSetExportJobOutput)
	return ret0, ret1
}

// StartReadSetExportJobRequest indicates an expected call of StartReadSetExportJobRequest
func (mr *MockOmicsAPIMockRecorder) StartReadSetExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReadSetExportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).StartReadSetExportJobRequest), arg0)
}

// StartReadSetExportJobWithContext mocks base method
func (m *MockOmicsAPI) StartReadSetExportJobWithContext(arg0 context.Context, arg1 *omics.StartReadSetExportJobInput, arg2 ...request.Option) (*omics.StartReadSetExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReadSetExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.StartReadSetExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReadSetExportJobWithContext indicates an expected call of StartReadSetExportJobWithContext
func (mr *MockOmicsAPIMockRecorder) StartReadSetExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReadSetExportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).StartReadSetExportJobWithContext), varargs...)
}

// StartReadSetImportJob mocks base method
func (m *MockOmicsAPI) StartReadSetImportJob(arg0 *omics.StartReadSetImportJobInput) (*omics.StartReadSetImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReadSetImportJob", arg0)
	ret0, _ := ret[0].(*omics.StartReadSetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReadSetImportJob indicates an expected call of StartReadSetImportJob
func (mr *MockOmicsAPIMockRecorder) StartReadSetImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReadSetImportJob", reflect.TypeOf((*MockOmicsAPI)(nil).StartReadSetImportJob), arg0)
}

// StartReadSetImportJobRequest mocks base method
func (m *MockOmicsAPI) StartReadSetImportJobRequest(arg0 *omics.StartReadSetImportJobInput) (*request.Request, *omics.StartReadSetImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReadSetImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.StartReadSetImportJobOutput)
	return ret0, ret1
}

// StartReadSetImportJobRequest indicates an expected call of StartReadSetImportJobRequest
func (mr *MockOmicsAPIMockRecorder) StartReadSetImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReadSetImportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).StartReadSetImportJobRequest), arg0)
}

// StartReadSetImportJobWithContext mocks base method
func (m *MockOmicsAPI) StartReadSetImportJobWithContext(arg0 context.Context, arg1 *omics.StartReadSetImportJobInput, arg2 ...request.Option) (*omics.StartReadSetImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReadSetImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.StartReadSetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReadSetImportJobWithContext indicates an expected call of StartReadSetImportJobWithContext
func (mr *MockOmicsAPIMockRecorder) StartReadSetImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReadSetImportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).StartReadSetImportJobWithContext), varargs...)
}

// StartReferenceImportJob mocks base method
func (m *MockOmicsAPI) StartReferenceImportJob(arg0 *omics.StartReferenceImportJobInput) (*omics.StartReferenceImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReferenceImportJob", arg0)
	ret0, _ := ret[0].(*omics.StartReferenceImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReferenceImportJob indicates an expected call of StartReferenceImportJob
func (mr *MockOmicsAPIMockRecorder) StartReferenceImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReferenceImportJob", reflect.TypeOf((*MockOmicsAPI)(nil).StartReferenceImportJob), arg0)
}

// StartReferenceImportJobRequest mocks base method
func (m *MockOmicsAPI) StartReferenceImportJobRequest(arg0 *omics.StartReferenceImportJobInput) (*request.Request, *omics.StartReferenceImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReferenceImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.StartReferenceImportJobOutput)
	return ret0, ret1
}

// StartReferenceImportJobRequest indicates an expected call of StartReferenceImportJobRequest
func (mr *MockOmicsAPIMockRecorder) StartReferenceImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReferenceImportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).StartReferenceImportJobRequest), arg0)
}

// StartReferenceImportJobWithContext mocks base method
func (m *MockOmicsAPI) StartReferenceImportJobWithContext(arg0 context.Context, arg1 *omics.StartReferenceImportJobInput, arg2 ...request.Option) (*omics.StartReferenceImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReferenceImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.StartReferenceImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReferenceImportJobWithContext indicates an expected call of StartReferenceImportJobWithContext
func (mr *MockOmicsAPIMockRecorder) StartReferenceImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReferenceImportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).StartReferenceImportJobWithContext), varargs...)
}

// StartRun mocks base method
func (m *MockOmicsAPI) StartRun(arg0 *omics.StartRunInput) (*omics.StartRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRun", arg0)
	ret0, _ := ret[0].(*omics.StartRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRun indicates an expected call of StartRun
func (mr *MockOmicsAPIMockRecorder) StartRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRun", reflect.TypeOf((*MockOmicsAPI)(nil).StartRun), arg0)
}

// StartRunRequest mocks base method
func (m *MockOmicsAPI) StartRunRequest(arg0 *omics.StartRunInput) (*request.Request, *omics.StartRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.StartRunOutput)
	return ret0, ret1
}

// StartRunRequest indicates an expected call of StartRunRequest
func (mr *MockOmicsAPIMockRecorder) StartRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRunRequest", reflect.TypeOf((*MockOmicsAPI)(nil).StartRunRequest), arg0)
}

// StartRunWithContext mocks base method
func (m *MockOmicsAPI) StartRunWithContext(arg0 context.Context, arg1 *omics.StartRunInput, arg2 ...request.Option) (*omics.StartRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartRunWithContext", varargs...)
	ret0, _ := ret[0].(*omics.StartRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRunWithContext indicates an expected call of StartRunWithContext
func (mr *MockOmicsAPIMockRecorder) StartRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRunWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).StartRunWithContext), varargs...)
}

// StartVariantImportJob mocks base method
func (m *MockOmicsAPI) StartVariantImportJob(arg0 *omics.StartVariantImportJobInput) (*omics.StartVariantImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVariantImportJob", arg0)
	ret0, _ := ret[0].(*omics.StartVariantImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartVariantImportJob indicates an expected call of StartVariantImportJob
func (mr *MockOmicsAPIMockRecorder) StartVariantImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVariantImportJob", reflect.TypeOf((*MockOmicsAPI)(nil).StartVariantImportJob), arg0)
}

// StartVariantImportJobRequest mocks base method
func (m *MockOmicsAPI) StartVariantImportJobRequest(arg0 *omics.StartVariantImportJobInput) (*request.Request, *omics.StartVariantImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVariantImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.StartVariantImportJobOutput)
	return ret0, ret1
}

// StartVariantImportJobRequest indicates an expected call of StartVariantImportJobRequest
func (mr *MockOmicsAPIMockRecorder) StartVariantImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVariantImportJobRequest", reflect.TypeOf((*MockOmicsAPI)(nil).StartVariantImportJobRequest), arg0)
}

// StartVariantImportJobWithContext mocks base method
func (m *MockOmicsAPI) StartVariantImportJobWithContext(arg0 context.Context, arg1 *omics.StartVariantImportJobInput, arg2 ...request.Option) (*omics.StartVariantImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartVariantImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*omics.StartVariantImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartVariantImportJobWithContext indicates an expected call of StartVariantImportJobWithContext
func (mr *MockOmicsAPIMockRecorder) StartVariantImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVariantImportJobWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).StartVariantImportJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockOmicsAPI) TagResource(arg0 *omics.TagResourceInput) (*omics.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*omics.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockOmicsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockOmicsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockOmicsAPI) TagResourceRequest(arg0 *omics.TagResourceInput) (*request.Request, *omics.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockOmicsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockOmicsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockOmicsAPI) TagResourceWithContext(arg0 context.Context, arg1 *omics.TagResourceInput, arg2 ...request.Option) (*omics.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*omics.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockOmicsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockOmicsAPI) UntagResource(arg0 *omics.UntagResourceInput) (*omics.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*omics.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockOmicsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockOmicsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockOmicsAPI) UntagResourceRequest(arg0 *omics.UntagResourceInput) (*request.Request, *omics.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockOmicsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockOmicsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockOmicsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *omics.UntagResourceInput, arg2 ...request.Option) (*omics.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*omics.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockOmicsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAnnotationStore mocks base method
func (m *MockOmicsAPI) UpdateAnnotationStore(arg0 *omics.UpdateAnnotationStoreInput) (*omics.UpdateAnnotationStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnotationStore", arg0)
	ret0, _ := ret[0].(*omics.UpdateAnnotationStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnnotationStore indicates an expected call of UpdateAnnotationStore
func (mr *MockOmicsAPIMockRecorder) UpdateAnnotationStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotationStore", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateAnnotationStore), arg0)
}

// UpdateAnnotationStoreRequest mocks base method
func (m *MockOmicsAPI) UpdateAnnotationStoreRequest(arg0 *omics.UpdateAnnotationStoreInput) (*request.Request, *omics.UpdateAnnotationStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnotationStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.UpdateAnnotationStoreOutput)
	return ret0, ret1
}

// UpdateAnnotationStoreRequest indicates an expected call of UpdateAnnotationStoreRequest
func (mr *MockOmicsAPIMockRecorder) UpdateAnnotationStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotationStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateAnnotationStoreRequest), arg0)
}

// UpdateAnnotationStoreWithContext mocks base method
func (m *MockOmicsAPI) UpdateAnnotationStoreWithContext(arg0 context.Context, arg1 *omics.UpdateAnnotationStoreInput, arg2 ...request.Option) (*omics.UpdateAnnotationStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAnnotationStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.UpdateAnnotationStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnnotationStoreWithContext indicates an expected call of UpdateAnnotationStoreWithContext
func (mr *MockOmicsAPIMockRecorder) UpdateAnnotationStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotationStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateAnnotationStoreWithContext), varargs...)
}

// UpdateRunGroup mocks base method
func (m *MockOmicsAPI) UpdateRunGroup(arg0 *omics.UpdateRunGroupInput) (*omics.UpdateRunGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRunGroup", arg0)
	ret0, _ := ret[0].(*omics.UpdateRunGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRunGroup indicates an expected call of UpdateRunGroup
func (mr *MockOmicsAPIMockRecorder) UpdateRunGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRunGroup", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateRunGroup), arg0)
}

// UpdateRunGroupRequest mocks base method
func (m *MockOmicsAPI) UpdateRunGroupRequest(arg0 *omics.UpdateRunGroupInput) (*request.Request, *omics.UpdateRunGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRunGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.UpdateRunGroupOutput)
	return ret0, ret1
}

// UpdateRunGroupRequest indicates an expected call of UpdateRunGroupRequest
func (mr *MockOmicsAPIMockRecorder) UpdateRunGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRunGroupRequest", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateRunGroupRequest), arg0)
}

// UpdateRunGroupWithContext mocks base method
func (m *MockOmicsAPI) UpdateRunGroupWithContext(arg0 context.Context, arg1 *omics.UpdateRunGroupInput, arg2 ...request.Option) (*omics.UpdateRunGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRunGroupWithContext", varargs...)
	ret0, _ := ret[0].(*omics.UpdateRunGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRunGroupWithContext indicates an expected call of UpdateRunGroupWithContext
func (mr *MockOmicsAPIMockRecorder) UpdateRunGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRunGroupWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateRunGroupWithContext), varargs...)
}

// UpdateVariantStore mocks base method
func (m *MockOmicsAPI) UpdateVariantStore(arg0 *omics.UpdateVariantStoreInput) (*omics.UpdateVariantStoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVariantStore", arg0)
	ret0, _ := ret[0].(*omics.UpdateVariantStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVariantStore indicates an expected call of UpdateVariantStore
func (mr *MockOmicsAPIMockRecorder) UpdateVariantStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariantStore", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateVariantStore), arg0)
}

// UpdateVariantStoreRequest mocks base method
func (m *MockOmicsAPI) UpdateVariantStoreRequest(arg0 *omics.UpdateVariantStoreInput) (*request.Request, *omics.UpdateVariantStoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVariantStoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.UpdateVariantStoreOutput)
	return ret0, ret1
}

// UpdateVariantStoreRequest indicates an expected call of UpdateVariantStoreRequest
func (mr *MockOmicsAPIMockRecorder) UpdateVariantStoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariantStoreRequest", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateVariantStoreRequest), arg0)
}

// UpdateVariantStoreWithContext mocks base method
func (m *MockOmicsAPI) UpdateVariantStoreWithContext(arg0 context.Context, arg1 *omics.UpdateVariantStoreInput, arg2 ...request.Option) (*omics.UpdateVariantStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVariantStoreWithContext", varargs...)
	ret0, _ := ret[0].(*omics.UpdateVariantStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVariantStoreWithContext indicates an expected call of UpdateVariantStoreWithContext
func (mr *MockOmicsAPIMockRecorder) UpdateVariantStoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariantStoreWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateVariantStoreWithContext), varargs...)
}

// UpdateWorkflow mocks base method
func (m *MockOmicsAPI) UpdateWorkflow(arg0 *omics.UpdateWorkflowInput) (*omics.UpdateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", arg0)
	ret0, _ := ret[0].(*omics.UpdateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow
func (mr *MockOmicsAPIMockRecorder) UpdateWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateWorkflow), arg0)
}

// UpdateWorkflowRequest mocks base method
func (m *MockOmicsAPI) UpdateWorkflowRequest(arg0 *omics.UpdateWorkflowInput) (*request.Request, *omics.UpdateWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*omics.UpdateWorkflowOutput)
	return ret0, ret1
}

// UpdateWorkflowRequest indicates an expected call of UpdateWorkflowRequest
func (mr *MockOmicsAPIMockRecorder) UpdateWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowRequest", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateWorkflowRequest), arg0)
}

// UpdateWorkflowWithContext mocks base method
func (m *MockOmicsAPI) UpdateWorkflowWithContext(arg0 context.Context, arg1 *omics.UpdateWorkflowInput, arg2 ...request.Option) (*omics.UpdateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*omics.UpdateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflowWithContext indicates an expected call of UpdateWorkflowWithContext
func (mr *MockOmicsAPIMockRecorder) UpdateWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).UpdateWorkflowWithContext), varargs...)
}

// WaitUntilAnnotationImportJobCreated mocks base method
func (m *MockOmicsAPI) WaitUntilAnnotationImportJobCreated(arg0 *omics.GetAnnotationImportJobInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilAnnotationImportJobCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAnnotationImportJobCreated indicates an expected call of WaitUntilAnnotationImportJobCreated
func (mr *MockOmicsAPIMockRecorder) WaitUntilAnnotationImportJobCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAnnotationImportJobCreated", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilAnnotationImportJobCreated), arg0)
}

// WaitUntilAnnotationImportJobCreatedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilAnnotationImportJobCreatedWithContext(arg0 context.Context, arg1 *omics.GetAnnotationImportJobInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilAnnotationImportJobCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAnnotationImportJobCreatedWithContext indicates an expected call of WaitUntilAnnotationImportJobCreatedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilAnnotationImportJobCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAnnotationImportJobCreatedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilAnnotationImportJobCreatedWithContext), varargs...)
}

// WaitUntilAnnotationStoreCreated mocks base method
func (m *MockOmicsAPI) WaitUntilAnnotationStoreCreated(arg0 *omics.GetAnnotationStoreInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilAnnotationStoreCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAnnotationStoreCreated indicates an expected call of WaitUntilAnnotationStoreCreated
func (mr *MockOmicsAPIMockRecorder) WaitUntilAnnotationStoreCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAnnotationStoreCreated", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilAnnotationStoreCreated), arg0)
}

// WaitUntilAnnotationStoreCreatedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilAnnotationStoreCreatedWithContext(arg0 context.Context, arg1 *omics.GetAnnotationStoreInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilAnnotationStoreCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAnnotationStoreCreatedWithContext indicates an expected call of WaitUntilAnnotationStoreCreatedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilAnnotationStoreCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAnnotationStoreCreatedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilAnnotationStoreCreatedWithContext), varargs...)
}

// WaitUntilAnnotationStoreDeleted mocks base method
func (m *MockOmicsAPI) WaitUntilAnnotationStoreDeleted(arg0 *omics.GetAnnotationStoreInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilAnnotationStoreDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAnnotationStoreDeleted indicates an expected call of WaitUntilAnnotationStoreDeleted
func (mr *MockOmicsAPIMockRecorder) WaitUntilAnnotationStoreDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAnnotationStoreDeleted", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilAnnotationStoreDeleted), arg0)
}

// WaitUntilAnnotationStoreDeletedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilAnnotationStoreDeletedWithContext(arg0 context.Context, arg1 *omics.GetAnnotationStoreInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilAnnotationStoreDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAnnotationStoreDeletedWithContext indicates an expected call of WaitUntilAnnotationStoreDeletedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilAnnotationStoreDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAnnotationStoreDeletedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilAnnotationStoreDeletedWithContext), varargs...)
}

// WaitUntilReadSetActivationJobCompleted mocks base method
func (m *MockOmicsAPI) WaitUntilReadSetActivationJobCompleted(arg0 *omics.GetReadSetActivationJobInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReadSetActivationJobCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReadSetActivationJobCompleted indicates an expected call of WaitUntilReadSetActivationJobCompleted
func (mr *MockOmicsAPIMockRecorder) WaitUntilReadSetActivationJobCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReadSetActivationJobCompleted", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilReadSetActivationJobCompleted), arg0)
}

// WaitUntilReadSetActivationJobCompletedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilReadSetActivationJobCompletedWithContext(arg0 context.Context, arg1 *omics.GetReadSetActivationJobInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilReadSetActivationJobCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReadSetActivationJobCompletedWithContext indicates an expected call of WaitUntilReadSetActivationJobCompletedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilReadSetActivationJobCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReadSetActivationJobCompletedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilReadSetActivationJobCompletedWithContext), varargs...)
}

// WaitUntilReadSetExportJobCompleted mocks base method
func (m *MockOmicsAPI) WaitUntilReadSetExportJobCompleted(arg0 *omics.GetReadSetExportJobInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReadSetExportJobCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReadSetExportJobCompleted indicates an expected call of WaitUntilReadSetExportJobCompleted
func (mr *MockOmicsAPIMockRecorder) WaitUntilReadSetExportJobCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReadSetExportJobCompleted", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilReadSetExportJobCompleted), arg0)
}

// WaitUntilReadSetExportJobCompletedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilReadSetExportJobCompletedWithContext(arg0 context.Context, arg1 *omics.GetReadSetExportJobInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilReadSetExportJobCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReadSetExportJobCompletedWithContext indicates an expected call of WaitUntilReadSetExportJobCompletedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilReadSetExportJobCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReadSetExportJobCompletedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilReadSetExportJobCompletedWithContext), varargs...)
}

// WaitUntilReadSetImportJobCompleted mocks base method
func (m *MockOmicsAPI) WaitUntilReadSetImportJobCompleted(arg0 *omics.GetReadSetImportJobInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReadSetImportJobCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReadSetImportJobCompleted indicates an expected call of WaitUntilReadSetImportJobCompleted
func (mr *MockOmicsAPIMockRecorder) WaitUntilReadSetImportJobCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReadSetImportJobCompleted", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilReadSetImportJobCompleted), arg0)
}

// WaitUntilReadSetImportJobCompletedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilReadSetImportJobCompletedWithContext(arg0 context.Context, arg1 *omics.GetReadSetImportJobInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilReadSetImportJobCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReadSetImportJobCompletedWithContext indicates an expected call of WaitUntilReadSetImportJobCompletedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilReadSetImportJobCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReadSetImportJobCompletedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilReadSetImportJobCompletedWithContext), varargs...)
}

// WaitUntilReferenceImportJobCompleted mocks base method
func (m *MockOmicsAPI) WaitUntilReferenceImportJobCompleted(arg0 *omics.GetReferenceImportJobInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReferenceImportJobCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReferenceImportJobCompleted indicates an expected call of WaitUntilReferenceImportJobCompleted
func (mr *MockOmicsAPIMockRecorder) WaitUntilReferenceImportJobCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReferenceImportJobCompleted", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilReferenceImportJobCompleted), arg0)
}

// WaitUntilReferenceImportJobCompletedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilReferenceImportJobCompletedWithContext(arg0 context.Context, arg1 *omics.GetReferenceImportJobInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilReferenceImportJobCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReferenceImportJobCompletedWithContext indicates an expected call of WaitUntilReferenceImportJobCompletedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilReferenceImportJobCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReferenceImportJobCompletedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilReferenceImportJobCompletedWithContext), varargs...)
}

// WaitUntilRunCompleted mocks base method
func (m *MockOmicsAPI) WaitUntilRunCompleted(arg0 *omics.GetRunInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilRunCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilRunCompleted indicates an expected call of WaitUntilRunCompleted
func (mr *MockOmicsAPIMockRecorder) WaitUntilRunCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilRunCompleted", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilRunCompleted), arg0)
}

// WaitUntilRunCompletedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilRunCompletedWithContext(arg0 context.Context, arg1 *omics.GetRunInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilRunCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilRunCompletedWithContext indicates an expected call of WaitUntilRunCompletedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilRunCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilRunCompletedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilRunCompletedWithContext), varargs...)
}

// WaitUntilRunRunning mocks base method
func (m *MockOmicsAPI) WaitUntilRunRunning(arg0 *omics.GetRunInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilRunRunning", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilRunRunning indicates an expected call of WaitUntilRunRunning
func (mr *MockOmicsAPIMockRecorder) WaitUntilRunRunning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilRunRunning", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilRunRunning), arg0)
}

// WaitUntilRunRunningWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilRunRunningWithContext(arg0 context.Context, arg1 *omics.GetRunInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilRunRunningWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilRunRunningWithContext indicates an expected call of WaitUntilRunRunningWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilRunRunningWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilRunRunningWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilRunRunningWithContext), varargs...)
}

// WaitUntilTaskCompleted mocks base method
func (m *MockOmicsAPI) WaitUntilTaskCompleted(arg0 *omics.GetRunTaskInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilTaskCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTaskCompleted indicates an expected call of WaitUntilTaskCompleted
func (mr *MockOmicsAPIMockRecorder) WaitUntilTaskCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTaskCompleted", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilTaskCompleted), arg0)
}

// WaitUntilTaskCompletedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilTaskCompletedWithContext(arg0 context.Context, arg1 *omics.GetRunTaskInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilTaskCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTaskCompletedWithContext indicates an expected call of WaitUntilTaskCompletedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilTaskCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTaskCompletedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilTaskCompletedWithContext), varargs...)
}

// WaitUntilTaskRunning mocks base method
func (m *MockOmicsAPI) WaitUntilTaskRunning(arg0 *omics.GetRunTaskInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilTaskRunning", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTaskRunning indicates an expected call of WaitUntilTaskRunning
func (mr *MockOmicsAPIMockRecorder) WaitUntilTaskRunning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTaskRunning", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilTaskRunning), arg0)
}

// WaitUntilTaskRunningWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilTaskRunningWithContext(arg0 context.Context, arg1 *omics.GetRunTaskInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilTaskRunningWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTaskRunningWithContext indicates an expected call of WaitUntilTaskRunningWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilTaskRunningWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTaskRunningWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilTaskRunningWithContext), varargs...)
}

// WaitUntilVariantImportJobCreated mocks base method
func (m *MockOmicsAPI) WaitUntilVariantImportJobCreated(arg0 *omics.GetVariantImportJobInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilVariantImportJobCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilVariantImportJobCreated indicates an expected call of WaitUntilVariantImportJobCreated
func (mr *MockOmicsAPIMockRecorder) WaitUntilVariantImportJobCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilVariantImportJobCreated", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilVariantImportJobCreated), arg0)
}

// WaitUntilVariantImportJobCreatedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilVariantImportJobCreatedWithContext(arg0 context.Context, arg1 *omics.GetVariantImportJobInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilVariantImportJobCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilVariantImportJobCreatedWithContext indicates an expected call of WaitUntilVariantImportJobCreatedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilVariantImportJobCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilVariantImportJobCreatedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilVariantImportJobCreatedWithContext), varargs...)
}

// WaitUntilVariantStoreCreated mocks base method
func (m *MockOmicsAPI) WaitUntilVariantStoreCreated(arg0 *omics.GetVariantStoreInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilVariantStoreCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilVariantStoreCreated indicates an expected call of WaitUntilVariantStoreCreated
func (mr *MockOmicsAPIMockRecorder) WaitUntilVariantStoreCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilVariantStoreCreated", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilVariantStoreCreated), arg0)
}

// WaitUntilVariantStoreCreatedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilVariantStoreCreatedWithContext(arg0 context.Context, arg1 *omics.GetVariantStoreInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilVariantStoreCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilVariantStoreCreatedWithContext indicates an expected call of WaitUntilVariantStoreCreatedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilVariantStoreCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilVariantStoreCreatedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilVariantStoreCreatedWithContext), varargs...)
}

// WaitUntilVariantStoreDeleted mocks base method
func (m *MockOmicsAPI) WaitUntilVariantStoreDeleted(arg0 *omics.GetVariantStoreInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilVariantStoreDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilVariantStoreDeleted indicates an expected call of WaitUntilVariantStoreDeleted
func (mr *MockOmicsAPIMockRecorder) WaitUntilVariantStoreDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilVariantStoreDeleted", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilVariantStoreDeleted), arg0)
}

// WaitUntilVariantStoreDeletedWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilVariantStoreDeletedWithContext(arg0 context.Context, arg1 *omics.GetVariantStoreInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilVariantStoreDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilVariantStoreDeletedWithContext indicates an expected call of WaitUntilVariantStoreDeletedWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilVariantStoreDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilVariantStoreDeletedWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilVariantStoreDeletedWithContext), varargs...)
}

// WaitUntilWorkflowActive mocks base method
func (m *MockOmicsAPI) WaitUntilWorkflowActive(arg0 *omics.GetWorkflowInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilWorkflowActive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilWorkflowActive indicates an expected call of WaitUntilWorkflowActive
func (mr *MockOmicsAPIMockRecorder) WaitUntilWorkflowActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilWorkflowActive", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilWorkflowActive), arg0)
}

// WaitUntilWorkflowActiveWithContext mocks base method
func (m *MockOmicsAPI) WaitUntilWorkflowActiveWithContext(arg0 context.Context, arg1 *omics.GetWorkflowInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilWorkflowActiveWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilWorkflowActiveWithContext indicates an expected call of WaitUntilWorkflowActiveWithContext
func (mr *MockOmicsAPIMockRecorder) WaitUntilWorkflowActiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilWorkflowActiveWithContext", reflect.TypeOf((*MockOmicsAPI)(nil).WaitUntilWorkflowActiveWithContext), varargs...)
}
