// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/codegurusecurity/codegurusecurityiface (interfaces: CodeGuruSecurityAPI)

// Package codegurusecuritymock is a generated GoMock package.
package codegurusecuritymock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	codegurusecurity "github.com/aws/aws-sdk-go/service/codegurusecurity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCodeGuruSecurityAPI is a mock of CodeGuruSecurityAPI interface
type MockCodeGuruSecurityAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCodeGuruSecurityAPIMockRecorder
}

// MockCodeGuruSecurityAPIMockRecorder is the mock recorder for MockCodeGuruSecurityAPI
type MockCodeGuruSecurityAPIMockRecorder struct {
	mock *MockCodeGuruSecurityAPI
}

// NewMockCodeGuruSecurityAPI creates a new mock instance
func NewMockCodeGuruSecurityAPI(ctrl *gomock.Controller) *MockCodeGuruSecurityAPI {
	mock := &MockCodeGuruSecurityAPI{ctrl: ctrl}
	mock.recorder = &MockCodeGuruSecurityAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeGuruSecurityAPI) EXPECT() *MockCodeGuruSecurityAPIMockRecorder {
	return m.recorder
}

// BatchGetFindings mocks base method
func (m *MockCodeGuruSecurityAPI) BatchGetFindings(arg0 *codegurusecurity.BatchGetFindingsInput) (*codegurusecurity.BatchGetFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFindings", arg0)
	ret0, _ := ret[0].(*codegurusecurity.BatchGetFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFindings indicates an expected call of BatchGetFindings
func (mr *MockCodeGuruSecurityAPIMockRecorder) BatchGetFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFindings", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).BatchGetFindings), arg0)
}

// BatchGetFindingsRequest mocks base method
func (m *MockCodeGuruSecurityAPI) BatchGetFindingsRequest(arg0 *codegurusecurity.BatchGetFindingsInput) (*request.Request, *codegurusecurity.BatchGetFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.BatchGetFindingsOutput)
	return ret0, ret1
}

// BatchGetFindingsRequest indicates an expected call of BatchGetFindingsRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) BatchGetFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFindingsRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).BatchGetFindingsRequest), arg0)
}

// BatchGetFindingsWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) BatchGetFindingsWithContext(arg0 context.Context, arg1 *codegurusecurity.BatchGetFindingsInput, arg2 ...request.Option) (*codegurusecurity.BatchGetFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.BatchGetFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFindingsWithContext indicates an expected call of BatchGetFindingsWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) BatchGetFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFindingsWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).BatchGetFindingsWithContext), varargs...)
}

// CreateScan mocks base method
func (m *MockCodeGuruSecurityAPI) CreateScan(arg0 *codegurusecurity.CreateScanInput) (*codegurusecurity.CreateScanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScan", arg0)
	ret0, _ := ret[0].(*codegurusecurity.CreateScanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScan indicates an expected call of CreateScan
func (mr *MockCodeGuruSecurityAPIMockRecorder) CreateScan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScan", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).CreateScan), arg0)
}

// CreateScanRequest mocks base method
func (m *MockCodeGuruSecurityAPI) CreateScanRequest(arg0 *codegurusecurity.CreateScanInput) (*request.Request, *codegurusecurity.CreateScanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.CreateScanOutput)
	return ret0, ret1
}

// CreateScanRequest indicates an expected call of CreateScanRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) CreateScanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScanRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).CreateScanRequest), arg0)
}

// CreateScanWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) CreateScanWithContext(arg0 context.Context, arg1 *codegurusecurity.CreateScanInput, arg2 ...request.Option) (*codegurusecurity.CreateScanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScanWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.CreateScanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScanWithContext indicates an expected call of CreateScanWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) CreateScanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScanWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).CreateScanWithContext), varargs...)
}

// CreateUploadUrl mocks base method
func (m *MockCodeGuruSecurityAPI) CreateUploadUrl(arg0 *codegurusecurity.CreateUploadUrlInput) (*codegurusecurity.CreateUploadUrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadUrl", arg0)
	ret0, _ := ret[0].(*codegurusecurity.CreateUploadUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadUrl indicates an expected call of CreateUploadUrl
func (mr *MockCodeGuruSecurityAPIMockRecorder) CreateUploadUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadUrl", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).CreateUploadUrl), arg0)
}

// CreateUploadUrlRequest mocks base method
func (m *MockCodeGuruSecurityAPI) CreateUploadUrlRequest(arg0 *codegurusecurity.CreateUploadUrlInput) (*request.Request, *codegurusecurity.CreateUploadUrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadUrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.CreateUploadUrlOutput)
	return ret0, ret1
}

// CreateUploadUrlRequest indicates an expected call of CreateUploadUrlRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) CreateUploadUrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadUrlRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).CreateUploadUrlRequest), arg0)
}

// CreateUploadUrlWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) CreateUploadUrlWithContext(arg0 context.Context, arg1 *codegurusecurity.CreateUploadUrlInput, arg2 ...request.Option) (*codegurusecurity.CreateUploadUrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUploadUrlWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.CreateUploadUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadUrlWithContext indicates an expected call of CreateUploadUrlWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) CreateUploadUrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadUrlWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).CreateUploadUrlWithContext), varargs...)
}

// GetAccountConfiguration mocks base method
func (m *MockCodeGuruSecurityAPI) GetAccountConfiguration(arg0 *codegurusecurity.GetAccountConfigurationInput) (*codegurusecurity.GetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountConfiguration", arg0)
	ret0, _ := ret[0].(*codegurusecurity.GetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountConfiguration indicates an expected call of GetAccountConfiguration
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetAccountConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountConfiguration", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetAccountConfiguration), arg0)
}

// GetAccountConfigurationRequest mocks base method
func (m *MockCodeGuruSecurityAPI) GetAccountConfigurationRequest(arg0 *codegurusecurity.GetAccountConfigurationInput) (*request.Request, *codegurusecurity.GetAccountConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.GetAccountConfigurationOutput)
	return ret0, ret1
}

// GetAccountConfigurationRequest indicates an expected call of GetAccountConfigurationRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetAccountConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountConfigurationRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetAccountConfigurationRequest), arg0)
}

// GetAccountConfigurationWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) GetAccountConfigurationWithContext(arg0 context.Context, arg1 *codegurusecurity.GetAccountConfigurationInput, arg2 ...request.Option) (*codegurusecurity.GetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.GetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountConfigurationWithContext indicates an expected call of GetAccountConfigurationWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetAccountConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountConfigurationWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetAccountConfigurationWithContext), varargs...)
}

// GetFindings mocks base method
func (m *MockCodeGuruSecurityAPI) GetFindings(arg0 *codegurusecurity.GetFindingsInput) (*codegurusecurity.GetFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindings", arg0)
	ret0, _ := ret[0].(*codegurusecurity.GetFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindings indicates an expected call of GetFindings
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindings", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetFindings), arg0)
}

// GetFindingsPages mocks base method
func (m *MockCodeGuruSecurityAPI) GetFindingsPages(arg0 *codegurusecurity.GetFindingsInput, arg1 func(*codegurusecurity.GetFindingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFindingsPages indicates an expected call of GetFindingsPages
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetFindingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsPages", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetFindingsPages), arg0, arg1)
}

// GetFindingsPagesWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) GetFindingsPagesWithContext(arg0 context.Context, arg1 *codegurusecurity.GetFindingsInput, arg2 func(*codegurusecurity.GetFindingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFindingsPagesWithContext indicates an expected call of GetFindingsPagesWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetFindingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsPagesWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetFindingsPagesWithContext), varargs...)
}

// GetFindingsRequest mocks base method
func (m *MockCodeGuruSecurityAPI) GetFindingsRequest(arg0 *codegurusecurity.GetFindingsInput) (*request.Request, *codegurusecurity.GetFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.GetFindingsOutput)
	return ret0, ret1
}

// GetFindingsRequest indicates an expected call of GetFindingsRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetFindingsRequest), arg0)
}

// GetFindingsWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) GetFindingsWithContext(arg0 context.Context, arg1 *codegurusecurity.GetFindingsInput, arg2 ...request.Option) (*codegurusecurity.GetFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.GetFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingsWithContext indicates an expected call of GetFindingsWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetFindingsWithContext), varargs...)
}

// GetMetricsSummary mocks base method
func (m *MockCodeGuruSecurityAPI) GetMetricsSummary(arg0 *codegurusecurity.GetMetricsSummaryInput) (*codegurusecurity.GetMetricsSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsSummary", arg0)
	ret0, _ := ret[0].(*codegurusecurity.GetMetricsSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsSummary indicates an expected call of GetMetricsSummary
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetMetricsSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsSummary", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetMetricsSummary), arg0)
}

// GetMetricsSummaryRequest mocks base method
func (m *MockCodeGuruSecurityAPI) GetMetricsSummaryRequest(arg0 *codegurusecurity.GetMetricsSummaryInput) (*request.Request, *codegurusecurity.GetMetricsSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.GetMetricsSummaryOutput)
	return ret0, ret1
}

// GetMetricsSummaryRequest indicates an expected call of GetMetricsSummaryRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetMetricsSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsSummaryRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetMetricsSummaryRequest), arg0)
}

// GetMetricsSummaryWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) GetMetricsSummaryWithContext(arg0 context.Context, arg1 *codegurusecurity.GetMetricsSummaryInput, arg2 ...request.Option) (*codegurusecurity.GetMetricsSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricsSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.GetMetricsSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsSummaryWithContext indicates an expected call of GetMetricsSummaryWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetMetricsSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsSummaryWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetMetricsSummaryWithContext), varargs...)
}

// GetScan mocks base method
func (m *MockCodeGuruSecurityAPI) GetScan(arg0 *codegurusecurity.GetScanInput) (*codegurusecurity.GetScanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScan", arg0)
	ret0, _ := ret[0].(*codegurusecurity.GetScanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScan indicates an expected call of GetScan
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetScan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScan", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetScan), arg0)
}

// GetScanRequest mocks base method
func (m *MockCodeGuruSecurityAPI) GetScanRequest(arg0 *codegurusecurity.GetScanInput) (*request.Request, *codegurusecurity.GetScanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.GetScanOutput)
	return ret0, ret1
}

// GetScanRequest indicates an expected call of GetScanRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetScanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetScanRequest), arg0)
}

// GetScanWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) GetScanWithContext(arg0 context.Context, arg1 *codegurusecurity.GetScanInput, arg2 ...request.Option) (*codegurusecurity.GetScanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScanWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.GetScanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanWithContext indicates an expected call of GetScanWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) GetScanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).GetScanWithContext), varargs...)
}

// ListFindingsMetrics mocks base method
func (m *MockCodeGuruSecurityAPI) ListFindingsMetrics(arg0 *codegurusecurity.ListFindingsMetricsInput) (*codegurusecurity.ListFindingsMetricsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsMetrics", arg0)
	ret0, _ := ret[0].(*codegurusecurity.ListFindingsMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingsMetrics indicates an expected call of ListFindingsMetrics
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListFindingsMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsMetrics", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListFindingsMetrics), arg0)
}

// ListFindingsMetricsPages mocks base method
func (m *MockCodeGuruSecurityAPI) ListFindingsMetricsPages(arg0 *codegurusecurity.ListFindingsMetricsInput, arg1 func(*codegurusecurity.ListFindingsMetricsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsMetricsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsMetricsPages indicates an expected call of ListFindingsMetricsPages
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListFindingsMetricsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsMetricsPages", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListFindingsMetricsPages), arg0, arg1)
}

// ListFindingsMetricsPagesWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) ListFindingsMetricsPagesWithContext(arg0 context.Context, arg1 *codegurusecurity.ListFindingsMetricsInput, arg2 func(*codegurusecurity.ListFindingsMetricsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsMetricsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsMetricsPagesWithContext indicates an expected call of ListFindingsMetricsPagesWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListFindingsMetricsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsMetricsPagesWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListFindingsMetricsPagesWithContext), varargs...)
}

// ListFindingsMetricsRequest mocks base method
func (m *MockCodeGuruSecurityAPI) ListFindingsMetricsRequest(arg0 *codegurusecurity.ListFindingsMetricsInput) (*request.Request, *codegurusecurity.ListFindingsMetricsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsMetricsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.ListFindingsMetricsOutput)
	return ret0, ret1
}

// ListFindingsMetricsRequest indicates an expected call of ListFindingsMetricsRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListFindingsMetricsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsMetricsRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListFindingsMetricsRequest), arg0)
}

// ListFindingsMetricsWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) ListFindingsMetricsWithContext(arg0 context.Context, arg1 *codegurusecurity.ListFindingsMetricsInput, arg2 ...request.Option) (*codegurusecurity.ListFindingsMetricsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsMetricsWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.ListFindingsMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingsMetricsWithContext indicates an expected call of ListFindingsMetricsWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListFindingsMetricsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsMetricsWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListFindingsMetricsWithContext), varargs...)
}

// ListScans mocks base method
func (m *MockCodeGuruSecurityAPI) ListScans(arg0 *codegurusecurity.ListScansInput) (*codegurusecurity.ListScansOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScans", arg0)
	ret0, _ := ret[0].(*codegurusecurity.ListScansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScans indicates an expected call of ListScans
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListScans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScans", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListScans), arg0)
}

// ListScansPages mocks base method
func (m *MockCodeGuruSecurityAPI) ListScansPages(arg0 *codegurusecurity.ListScansInput, arg1 func(*codegurusecurity.ListScansOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScansPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListScansPages indicates an expected call of ListScansPages
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListScansPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScansPages", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListScansPages), arg0, arg1)
}

// ListScansPagesWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) ListScansPagesWithContext(arg0 context.Context, arg1 *codegurusecurity.ListScansInput, arg2 func(*codegurusecurity.ListScansOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScansPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListScansPagesWithContext indicates an expected call of ListScansPagesWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListScansPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScansPagesWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListScansPagesWithContext), varargs...)
}

// ListScansRequest mocks base method
func (m *MockCodeGuruSecurityAPI) ListScansRequest(arg0 *codegurusecurity.ListScansInput) (*request.Request, *codegurusecurity.ListScansOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.ListScansOutput)
	return ret0, ret1
}

// ListScansRequest indicates an expected call of ListScansRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListScansRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScansRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListScansRequest), arg0)
}

// ListScansWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) ListScansWithContext(arg0 context.Context, arg1 *codegurusecurity.ListScansInput, arg2 ...request.Option) (*codegurusecurity.ListScansOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScansWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.ListScansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScansWithContext indicates an expected call of ListScansWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListScansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScansWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListScansWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCodeGuruSecurityAPI) ListTagsForResource(arg0 *codegurusecurity.ListTagsForResourceInput) (*codegurusecurity.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*codegurusecurity.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCodeGuruSecurityAPI) ListTagsForResourceRequest(arg0 *codegurusecurity.ListTagsForResourceInput) (*request.Request, *codegurusecurity.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *codegurusecurity.ListTagsForResourceInput, arg2 ...request.Option) (*codegurusecurity.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCodeGuruSecurityAPI) TagResource(arg0 *codegurusecurity.TagResourceInput) (*codegurusecurity.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*codegurusecurity.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCodeGuruSecurityAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCodeGuruSecurityAPI) TagResourceRequest(arg0 *codegurusecurity.TagResourceInput) (*request.Request, *codegurusecurity.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) TagResourceWithContext(arg0 context.Context, arg1 *codegurusecurity.TagResourceInput, arg2 ...request.Option) (*codegurusecurity.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCodeGuruSecurityAPI) UntagResource(arg0 *codegurusecurity.UntagResourceInput) (*codegurusecurity.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*codegurusecurity.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCodeGuruSecurityAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCodeGuruSecurityAPI) UntagResourceRequest(arg0 *codegurusecurity.UntagResourceInput) (*request.Request, *codegurusecurity.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) UntagResourceWithContext(arg0 context.Context, arg1 *codegurusecurity.UntagResourceInput, arg2 ...request.Option) (*codegurusecurity.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAccountConfiguration mocks base method
func (m *MockCodeGuruSecurityAPI) UpdateAccountConfiguration(arg0 *codegurusecurity.UpdateAccountConfigurationInput) (*codegurusecurity.UpdateAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountConfiguration", arg0)
	ret0, _ := ret[0].(*codegurusecurity.UpdateAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountConfiguration indicates an expected call of UpdateAccountConfiguration
func (mr *MockCodeGuruSecurityAPIMockRecorder) UpdateAccountConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountConfiguration", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).UpdateAccountConfiguration), arg0)
}

// UpdateAccountConfigurationRequest mocks base method
func (m *MockCodeGuruSecurityAPI) UpdateAccountConfigurationRequest(arg0 *codegurusecurity.UpdateAccountConfigurationInput) (*request.Request, *codegurusecurity.UpdateAccountConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codegurusecurity.UpdateAccountConfigurationOutput)
	return ret0, ret1
}

// UpdateAccountConfigurationRequest indicates an expected call of UpdateAccountConfigurationRequest
func (mr *MockCodeGuruSecurityAPIMockRecorder) UpdateAccountConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountConfigurationRequest", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).UpdateAccountConfigurationRequest), arg0)
}

// UpdateAccountConfigurationWithContext mocks base method
func (m *MockCodeGuruSecurityAPI) UpdateAccountConfigurationWithContext(arg0 context.Context, arg1 *codegurusecurity.UpdateAccountConfigurationInput, arg2 ...request.Option) (*codegurusecurity.UpdateAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccountConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codegurusecurity.UpdateAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountConfigurationWithContext indicates an expected call of UpdateAccountConfigurationWithContext
func (mr *MockCodeGuruSecurityAPIMockRecorder) UpdateAccountConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountConfigurationWithContext", reflect.TypeOf((*MockCodeGuruSecurityAPI)(nil).UpdateAccountConfigurationWithContext), varargs...)
}
