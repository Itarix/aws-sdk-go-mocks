// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/pcaconnectorad/pcaconnectoradiface (interfaces: PcaConnectorAdAPI)

// Package pcaconnectoradmock is a generated GoMock package.
package pcaconnectoradmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	pcaconnectorad "github.com/aws/aws-sdk-go/service/pcaconnectorad"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPcaConnectorAdAPI is a mock of PcaConnectorAdAPI interface
type MockPcaConnectorAdAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPcaConnectorAdAPIMockRecorder
}

// MockPcaConnectorAdAPIMockRecorder is the mock recorder for MockPcaConnectorAdAPI
type MockPcaConnectorAdAPIMockRecorder struct {
	mock *MockPcaConnectorAdAPI
}

// NewMockPcaConnectorAdAPI creates a new mock instance
func NewMockPcaConnectorAdAPI(ctrl *gomock.Controller) *MockPcaConnectorAdAPI {
	mock := &MockPcaConnectorAdAPI{ctrl: ctrl}
	mock.recorder = &MockPcaConnectorAdAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPcaConnectorAdAPI) EXPECT() *MockPcaConnectorAdAPIMockRecorder {
	return m.recorder
}

// CreateConnector mocks base method
func (m *MockPcaConnectorAdAPI) CreateConnector(arg0 *pcaconnectorad.CreateConnectorInput) (*pcaconnectorad.CreateConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnector", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.CreateConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnector indicates an expected call of CreateConnector
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnector", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateConnector), arg0)
}

// CreateConnectorRequest mocks base method
func (m *MockPcaConnectorAdAPI) CreateConnectorRequest(arg0 *pcaconnectorad.CreateConnectorInput) (*request.Request, *pcaconnectorad.CreateConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.CreateConnectorOutput)
	return ret0, ret1
}

// CreateConnectorRequest indicates an expected call of CreateConnectorRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectorRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateConnectorRequest), arg0)
}

// CreateConnectorWithContext mocks base method
func (m *MockPcaConnectorAdAPI) CreateConnectorWithContext(arg0 context.Context, arg1 *pcaconnectorad.CreateConnectorInput, arg2 ...request.Option) (*pcaconnectorad.CreateConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.CreateConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectorWithContext indicates an expected call of CreateConnectorWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectorWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateConnectorWithContext), varargs...)
}

// CreateDirectoryRegistration mocks base method
func (m *MockPcaConnectorAdAPI) CreateDirectoryRegistration(arg0 *pcaconnectorad.CreateDirectoryRegistrationInput) (*pcaconnectorad.CreateDirectoryRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectoryRegistration", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.CreateDirectoryRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectoryRegistration indicates an expected call of CreateDirectoryRegistration
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateDirectoryRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryRegistration", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateDirectoryRegistration), arg0)
}

// CreateDirectoryRegistrationRequest mocks base method
func (m *MockPcaConnectorAdAPI) CreateDirectoryRegistrationRequest(arg0 *pcaconnectorad.CreateDirectoryRegistrationInput) (*request.Request, *pcaconnectorad.CreateDirectoryRegistrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectoryRegistrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.CreateDirectoryRegistrationOutput)
	return ret0, ret1
}

// CreateDirectoryRegistrationRequest indicates an expected call of CreateDirectoryRegistrationRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateDirectoryRegistrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryRegistrationRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateDirectoryRegistrationRequest), arg0)
}

// CreateDirectoryRegistrationWithContext mocks base method
func (m *MockPcaConnectorAdAPI) CreateDirectoryRegistrationWithContext(arg0 context.Context, arg1 *pcaconnectorad.CreateDirectoryRegistrationInput, arg2 ...request.Option) (*pcaconnectorad.CreateDirectoryRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDirectoryRegistrationWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.CreateDirectoryRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectoryRegistrationWithContext indicates an expected call of CreateDirectoryRegistrationWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateDirectoryRegistrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryRegistrationWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateDirectoryRegistrationWithContext), varargs...)
}

// CreateServicePrincipalName mocks base method
func (m *MockPcaConnectorAdAPI) CreateServicePrincipalName(arg0 *pcaconnectorad.CreateServicePrincipalNameInput) (*pcaconnectorad.CreateServicePrincipalNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServicePrincipalName", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.CreateServicePrincipalNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServicePrincipalName indicates an expected call of CreateServicePrincipalName
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateServicePrincipalName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServicePrincipalName", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateServicePrincipalName), arg0)
}

// CreateServicePrincipalNameRequest mocks base method
func (m *MockPcaConnectorAdAPI) CreateServicePrincipalNameRequest(arg0 *pcaconnectorad.CreateServicePrincipalNameInput) (*request.Request, *pcaconnectorad.CreateServicePrincipalNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServicePrincipalNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.CreateServicePrincipalNameOutput)
	return ret0, ret1
}

// CreateServicePrincipalNameRequest indicates an expected call of CreateServicePrincipalNameRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateServicePrincipalNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServicePrincipalNameRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateServicePrincipalNameRequest), arg0)
}

// CreateServicePrincipalNameWithContext mocks base method
func (m *MockPcaConnectorAdAPI) CreateServicePrincipalNameWithContext(arg0 context.Context, arg1 *pcaconnectorad.CreateServicePrincipalNameInput, arg2 ...request.Option) (*pcaconnectorad.CreateServicePrincipalNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServicePrincipalNameWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.CreateServicePrincipalNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServicePrincipalNameWithContext indicates an expected call of CreateServicePrincipalNameWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateServicePrincipalNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServicePrincipalNameWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateServicePrincipalNameWithContext), varargs...)
}

// CreateTemplate mocks base method
func (m *MockPcaConnectorAdAPI) CreateTemplate(arg0 *pcaconnectorad.CreateTemplateInput) (*pcaconnectorad.CreateTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.CreateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateTemplate), arg0)
}

// CreateTemplateGroupAccessControlEntry mocks base method
func (m *MockPcaConnectorAdAPI) CreateTemplateGroupAccessControlEntry(arg0 *pcaconnectorad.CreateTemplateGroupAccessControlEntryInput) (*pcaconnectorad.CreateTemplateGroupAccessControlEntryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateGroupAccessControlEntry", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.CreateTemplateGroupAccessControlEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplateGroupAccessControlEntry indicates an expected call of CreateTemplateGroupAccessControlEntry
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateTemplateGroupAccessControlEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateGroupAccessControlEntry", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateTemplateGroupAccessControlEntry), arg0)
}

// CreateTemplateGroupAccessControlEntryRequest mocks base method
func (m *MockPcaConnectorAdAPI) CreateTemplateGroupAccessControlEntryRequest(arg0 *pcaconnectorad.CreateTemplateGroupAccessControlEntryInput) (*request.Request, *pcaconnectorad.CreateTemplateGroupAccessControlEntryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateGroupAccessControlEntryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.CreateTemplateGroupAccessControlEntryOutput)
	return ret0, ret1
}

// CreateTemplateGroupAccessControlEntryRequest indicates an expected call of CreateTemplateGroupAccessControlEntryRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateTemplateGroupAccessControlEntryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateGroupAccessControlEntryRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateTemplateGroupAccessControlEntryRequest), arg0)
}

// CreateTemplateGroupAccessControlEntryWithContext mocks base method
func (m *MockPcaConnectorAdAPI) CreateTemplateGroupAccessControlEntryWithContext(arg0 context.Context, arg1 *pcaconnectorad.CreateTemplateGroupAccessControlEntryInput, arg2 ...request.Option) (*pcaconnectorad.CreateTemplateGroupAccessControlEntryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTemplateGroupAccessControlEntryWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.CreateTemplateGroupAccessControlEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplateGroupAccessControlEntryWithContext indicates an expected call of CreateTemplateGroupAccessControlEntryWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateTemplateGroupAccessControlEntryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateGroupAccessControlEntryWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateTemplateGroupAccessControlEntryWithContext), varargs...)
}

// CreateTemplateRequest mocks base method
func (m *MockPcaConnectorAdAPI) CreateTemplateRequest(arg0 *pcaconnectorad.CreateTemplateInput) (*request.Request, *pcaconnectorad.CreateTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.CreateTemplateOutput)
	return ret0, ret1
}

// CreateTemplateRequest indicates an expected call of CreateTemplateRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateTemplateRequest), arg0)
}

// CreateTemplateWithContext mocks base method
func (m *MockPcaConnectorAdAPI) CreateTemplateWithContext(arg0 context.Context, arg1 *pcaconnectorad.CreateTemplateInput, arg2 ...request.Option) (*pcaconnectorad.CreateTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.CreateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplateWithContext indicates an expected call of CreateTemplateWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) CreateTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).CreateTemplateWithContext), varargs...)
}

// DeleteConnector mocks base method
func (m *MockPcaConnectorAdAPI) DeleteConnector(arg0 *pcaconnectorad.DeleteConnectorInput) (*pcaconnectorad.DeleteConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnector", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.DeleteConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnector indicates an expected call of DeleteConnector
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnector", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteConnector), arg0)
}

// DeleteConnectorRequest mocks base method
func (m *MockPcaConnectorAdAPI) DeleteConnectorRequest(arg0 *pcaconnectorad.DeleteConnectorInput) (*request.Request, *pcaconnectorad.DeleteConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.DeleteConnectorOutput)
	return ret0, ret1
}

// DeleteConnectorRequest indicates an expected call of DeleteConnectorRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectorRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteConnectorRequest), arg0)
}

// DeleteConnectorWithContext mocks base method
func (m *MockPcaConnectorAdAPI) DeleteConnectorWithContext(arg0 context.Context, arg1 *pcaconnectorad.DeleteConnectorInput, arg2 ...request.Option) (*pcaconnectorad.DeleteConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.DeleteConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectorWithContext indicates an expected call of DeleteConnectorWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectorWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteConnectorWithContext), varargs...)
}

// DeleteDirectoryRegistration mocks base method
func (m *MockPcaConnectorAdAPI) DeleteDirectoryRegistration(arg0 *pcaconnectorad.DeleteDirectoryRegistrationInput) (*pcaconnectorad.DeleteDirectoryRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectoryRegistration", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.DeleteDirectoryRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectoryRegistration indicates an expected call of DeleteDirectoryRegistration
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteDirectoryRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryRegistration", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteDirectoryRegistration), arg0)
}

// DeleteDirectoryRegistrationRequest mocks base method
func (m *MockPcaConnectorAdAPI) DeleteDirectoryRegistrationRequest(arg0 *pcaconnectorad.DeleteDirectoryRegistrationInput) (*request.Request, *pcaconnectorad.DeleteDirectoryRegistrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectoryRegistrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.DeleteDirectoryRegistrationOutput)
	return ret0, ret1
}

// DeleteDirectoryRegistrationRequest indicates an expected call of DeleteDirectoryRegistrationRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteDirectoryRegistrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryRegistrationRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteDirectoryRegistrationRequest), arg0)
}

// DeleteDirectoryRegistrationWithContext mocks base method
func (m *MockPcaConnectorAdAPI) DeleteDirectoryRegistrationWithContext(arg0 context.Context, arg1 *pcaconnectorad.DeleteDirectoryRegistrationInput, arg2 ...request.Option) (*pcaconnectorad.DeleteDirectoryRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDirectoryRegistrationWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.DeleteDirectoryRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectoryRegistrationWithContext indicates an expected call of DeleteDirectoryRegistrationWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteDirectoryRegistrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryRegistrationWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteDirectoryRegistrationWithContext), varargs...)
}

// DeleteServicePrincipalName mocks base method
func (m *MockPcaConnectorAdAPI) DeleteServicePrincipalName(arg0 *pcaconnectorad.DeleteServicePrincipalNameInput) (*pcaconnectorad.DeleteServicePrincipalNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServicePrincipalName", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.DeleteServicePrincipalNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServicePrincipalName indicates an expected call of DeleteServicePrincipalName
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteServicePrincipalName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServicePrincipalName", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteServicePrincipalName), arg0)
}

// DeleteServicePrincipalNameRequest mocks base method
func (m *MockPcaConnectorAdAPI) DeleteServicePrincipalNameRequest(arg0 *pcaconnectorad.DeleteServicePrincipalNameInput) (*request.Request, *pcaconnectorad.DeleteServicePrincipalNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServicePrincipalNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.DeleteServicePrincipalNameOutput)
	return ret0, ret1
}

// DeleteServicePrincipalNameRequest indicates an expected call of DeleteServicePrincipalNameRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteServicePrincipalNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServicePrincipalNameRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteServicePrincipalNameRequest), arg0)
}

// DeleteServicePrincipalNameWithContext mocks base method
func (m *MockPcaConnectorAdAPI) DeleteServicePrincipalNameWithContext(arg0 context.Context, arg1 *pcaconnectorad.DeleteServicePrincipalNameInput, arg2 ...request.Option) (*pcaconnectorad.DeleteServicePrincipalNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServicePrincipalNameWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.DeleteServicePrincipalNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServicePrincipalNameWithContext indicates an expected call of DeleteServicePrincipalNameWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteServicePrincipalNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServicePrincipalNameWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteServicePrincipalNameWithContext), varargs...)
}

// DeleteTemplate mocks base method
func (m *MockPcaConnectorAdAPI) DeleteTemplate(arg0 *pcaconnectorad.DeleteTemplateInput) (*pcaconnectorad.DeleteTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.DeleteTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplate indicates an expected call of DeleteTemplate
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteTemplate), arg0)
}

// DeleteTemplateGroupAccessControlEntry mocks base method
func (m *MockPcaConnectorAdAPI) DeleteTemplateGroupAccessControlEntry(arg0 *pcaconnectorad.DeleteTemplateGroupAccessControlEntryInput) (*pcaconnectorad.DeleteTemplateGroupAccessControlEntryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplateGroupAccessControlEntry", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.DeleteTemplateGroupAccessControlEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplateGroupAccessControlEntry indicates an expected call of DeleteTemplateGroupAccessControlEntry
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteTemplateGroupAccessControlEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateGroupAccessControlEntry", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteTemplateGroupAccessControlEntry), arg0)
}

// DeleteTemplateGroupAccessControlEntryRequest mocks base method
func (m *MockPcaConnectorAdAPI) DeleteTemplateGroupAccessControlEntryRequest(arg0 *pcaconnectorad.DeleteTemplateGroupAccessControlEntryInput) (*request.Request, *pcaconnectorad.DeleteTemplateGroupAccessControlEntryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplateGroupAccessControlEntryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.DeleteTemplateGroupAccessControlEntryOutput)
	return ret0, ret1
}

// DeleteTemplateGroupAccessControlEntryRequest indicates an expected call of DeleteTemplateGroupAccessControlEntryRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteTemplateGroupAccessControlEntryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateGroupAccessControlEntryRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteTemplateGroupAccessControlEntryRequest), arg0)
}

// DeleteTemplateGroupAccessControlEntryWithContext mocks base method
func (m *MockPcaConnectorAdAPI) DeleteTemplateGroupAccessControlEntryWithContext(arg0 context.Context, arg1 *pcaconnectorad.DeleteTemplateGroupAccessControlEntryInput, arg2 ...request.Option) (*pcaconnectorad.DeleteTemplateGroupAccessControlEntryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTemplateGroupAccessControlEntryWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.DeleteTemplateGroupAccessControlEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplateGroupAccessControlEntryWithContext indicates an expected call of DeleteTemplateGroupAccessControlEntryWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteTemplateGroupAccessControlEntryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateGroupAccessControlEntryWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteTemplateGroupAccessControlEntryWithContext), varargs...)
}

// DeleteTemplateRequest mocks base method
func (m *MockPcaConnectorAdAPI) DeleteTemplateRequest(arg0 *pcaconnectorad.DeleteTemplateInput) (*request.Request, *pcaconnectorad.DeleteTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.DeleteTemplateOutput)
	return ret0, ret1
}

// DeleteTemplateRequest indicates an expected call of DeleteTemplateRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteTemplateRequest), arg0)
}

// DeleteTemplateWithContext mocks base method
func (m *MockPcaConnectorAdAPI) DeleteTemplateWithContext(arg0 context.Context, arg1 *pcaconnectorad.DeleteTemplateInput, arg2 ...request.Option) (*pcaconnectorad.DeleteTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.DeleteTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplateWithContext indicates an expected call of DeleteTemplateWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) DeleteTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).DeleteTemplateWithContext), varargs...)
}

// GetConnector mocks base method
func (m *MockPcaConnectorAdAPI) GetConnector(arg0 *pcaconnectorad.GetConnectorInput) (*pcaconnectorad.GetConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnector", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.GetConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnector indicates an expected call of GetConnector
func (mr *MockPcaConnectorAdAPIMockRecorder) GetConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnector", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetConnector), arg0)
}

// GetConnectorRequest mocks base method
func (m *MockPcaConnectorAdAPI) GetConnectorRequest(arg0 *pcaconnectorad.GetConnectorInput) (*request.Request, *pcaconnectorad.GetConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.GetConnectorOutput)
	return ret0, ret1
}

// GetConnectorRequest indicates an expected call of GetConnectorRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) GetConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetConnectorRequest), arg0)
}

// GetConnectorWithContext mocks base method
func (m *MockPcaConnectorAdAPI) GetConnectorWithContext(arg0 context.Context, arg1 *pcaconnectorad.GetConnectorInput, arg2 ...request.Option) (*pcaconnectorad.GetConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.GetConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectorWithContext indicates an expected call of GetConnectorWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) GetConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetConnectorWithContext), varargs...)
}

// GetDirectoryRegistration mocks base method
func (m *MockPcaConnectorAdAPI) GetDirectoryRegistration(arg0 *pcaconnectorad.GetDirectoryRegistrationInput) (*pcaconnectorad.GetDirectoryRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectoryRegistration", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.GetDirectoryRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectoryRegistration indicates an expected call of GetDirectoryRegistration
func (mr *MockPcaConnectorAdAPIMockRecorder) GetDirectoryRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryRegistration", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetDirectoryRegistration), arg0)
}

// GetDirectoryRegistrationRequest mocks base method
func (m *MockPcaConnectorAdAPI) GetDirectoryRegistrationRequest(arg0 *pcaconnectorad.GetDirectoryRegistrationInput) (*request.Request, *pcaconnectorad.GetDirectoryRegistrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectoryRegistrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.GetDirectoryRegistrationOutput)
	return ret0, ret1
}

// GetDirectoryRegistrationRequest indicates an expected call of GetDirectoryRegistrationRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) GetDirectoryRegistrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryRegistrationRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetDirectoryRegistrationRequest), arg0)
}

// GetDirectoryRegistrationWithContext mocks base method
func (m *MockPcaConnectorAdAPI) GetDirectoryRegistrationWithContext(arg0 context.Context, arg1 *pcaconnectorad.GetDirectoryRegistrationInput, arg2 ...request.Option) (*pcaconnectorad.GetDirectoryRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDirectoryRegistrationWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.GetDirectoryRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectoryRegistrationWithContext indicates an expected call of GetDirectoryRegistrationWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) GetDirectoryRegistrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryRegistrationWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetDirectoryRegistrationWithContext), varargs...)
}

// GetServicePrincipalName mocks base method
func (m *MockPcaConnectorAdAPI) GetServicePrincipalName(arg0 *pcaconnectorad.GetServicePrincipalNameInput) (*pcaconnectorad.GetServicePrincipalNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicePrincipalName", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.GetServicePrincipalNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicePrincipalName indicates an expected call of GetServicePrincipalName
func (mr *MockPcaConnectorAdAPIMockRecorder) GetServicePrincipalName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePrincipalName", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetServicePrincipalName), arg0)
}

// GetServicePrincipalNameRequest mocks base method
func (m *MockPcaConnectorAdAPI) GetServicePrincipalNameRequest(arg0 *pcaconnectorad.GetServicePrincipalNameInput) (*request.Request, *pcaconnectorad.GetServicePrincipalNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicePrincipalNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.GetServicePrincipalNameOutput)
	return ret0, ret1
}

// GetServicePrincipalNameRequest indicates an expected call of GetServicePrincipalNameRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) GetServicePrincipalNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePrincipalNameRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetServicePrincipalNameRequest), arg0)
}

// GetServicePrincipalNameWithContext mocks base method
func (m *MockPcaConnectorAdAPI) GetServicePrincipalNameWithContext(arg0 context.Context, arg1 *pcaconnectorad.GetServicePrincipalNameInput, arg2 ...request.Option) (*pcaconnectorad.GetServicePrincipalNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServicePrincipalNameWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.GetServicePrincipalNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicePrincipalNameWithContext indicates an expected call of GetServicePrincipalNameWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) GetServicePrincipalNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePrincipalNameWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetServicePrincipalNameWithContext), varargs...)
}

// GetTemplate mocks base method
func (m *MockPcaConnectorAdAPI) GetTemplate(arg0 *pcaconnectorad.GetTemplateInput) (*pcaconnectorad.GetTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.GetTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate
func (mr *MockPcaConnectorAdAPIMockRecorder) GetTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetTemplate), arg0)
}

// GetTemplateGroupAccessControlEntry mocks base method
func (m *MockPcaConnectorAdAPI) GetTemplateGroupAccessControlEntry(arg0 *pcaconnectorad.GetTemplateGroupAccessControlEntryInput) (*pcaconnectorad.GetTemplateGroupAccessControlEntryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateGroupAccessControlEntry", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.GetTemplateGroupAccessControlEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateGroupAccessControlEntry indicates an expected call of GetTemplateGroupAccessControlEntry
func (mr *MockPcaConnectorAdAPIMockRecorder) GetTemplateGroupAccessControlEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateGroupAccessControlEntry", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetTemplateGroupAccessControlEntry), arg0)
}

// GetTemplateGroupAccessControlEntryRequest mocks base method
func (m *MockPcaConnectorAdAPI) GetTemplateGroupAccessControlEntryRequest(arg0 *pcaconnectorad.GetTemplateGroupAccessControlEntryInput) (*request.Request, *pcaconnectorad.GetTemplateGroupAccessControlEntryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateGroupAccessControlEntryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.GetTemplateGroupAccessControlEntryOutput)
	return ret0, ret1
}

// GetTemplateGroupAccessControlEntryRequest indicates an expected call of GetTemplateGroupAccessControlEntryRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) GetTemplateGroupAccessControlEntryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateGroupAccessControlEntryRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetTemplateGroupAccessControlEntryRequest), arg0)
}

// GetTemplateGroupAccessControlEntryWithContext mocks base method
func (m *MockPcaConnectorAdAPI) GetTemplateGroupAccessControlEntryWithContext(arg0 context.Context, arg1 *pcaconnectorad.GetTemplateGroupAccessControlEntryInput, arg2 ...request.Option) (*pcaconnectorad.GetTemplateGroupAccessControlEntryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplateGroupAccessControlEntryWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.GetTemplateGroupAccessControlEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateGroupAccessControlEntryWithContext indicates an expected call of GetTemplateGroupAccessControlEntryWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) GetTemplateGroupAccessControlEntryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateGroupAccessControlEntryWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetTemplateGroupAccessControlEntryWithContext), varargs...)
}

// GetTemplateRequest mocks base method
func (m *MockPcaConnectorAdAPI) GetTemplateRequest(arg0 *pcaconnectorad.GetTemplateInput) (*request.Request, *pcaconnectorad.GetTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.GetTemplateOutput)
	return ret0, ret1
}

// GetTemplateRequest indicates an expected call of GetTemplateRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) GetTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetTemplateRequest), arg0)
}

// GetTemplateWithContext mocks base method
func (m *MockPcaConnectorAdAPI) GetTemplateWithContext(arg0 context.Context, arg1 *pcaconnectorad.GetTemplateInput, arg2 ...request.Option) (*pcaconnectorad.GetTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.GetTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateWithContext indicates an expected call of GetTemplateWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) GetTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).GetTemplateWithContext), varargs...)
}

// ListConnectors mocks base method
func (m *MockPcaConnectorAdAPI) ListConnectors(arg0 *pcaconnectorad.ListConnectorsInput) (*pcaconnectorad.ListConnectorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectors", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.ListConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectors indicates an expected call of ListConnectors
func (mr *MockPcaConnectorAdAPIMockRecorder) ListConnectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectors", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListConnectors), arg0)
}

// ListConnectorsPages mocks base method
func (m *MockPcaConnectorAdAPI) ListConnectorsPages(arg0 *pcaconnectorad.ListConnectorsInput, arg1 func(*pcaconnectorad.ListConnectorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectorsPages indicates an expected call of ListConnectorsPages
func (mr *MockPcaConnectorAdAPIMockRecorder) ListConnectorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsPages", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListConnectorsPages), arg0, arg1)
}

// ListConnectorsPagesWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListConnectorsPagesWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListConnectorsInput, arg2 func(*pcaconnectorad.ListConnectorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectorsPagesWithContext indicates an expected call of ListConnectorsPagesWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListConnectorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsPagesWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListConnectorsPagesWithContext), varargs...)
}

// ListConnectorsRequest mocks base method
func (m *MockPcaConnectorAdAPI) ListConnectorsRequest(arg0 *pcaconnectorad.ListConnectorsInput) (*request.Request, *pcaconnectorad.ListConnectorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.ListConnectorsOutput)
	return ret0, ret1
}

// ListConnectorsRequest indicates an expected call of ListConnectorsRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) ListConnectorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListConnectorsRequest), arg0)
}

// ListConnectorsWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListConnectorsWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListConnectorsInput, arg2 ...request.Option) (*pcaconnectorad.ListConnectorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorsWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.ListConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectorsWithContext indicates an expected call of ListConnectorsWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListConnectorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListConnectorsWithContext), varargs...)
}

// ListDirectoryRegistrations mocks base method
func (m *MockPcaConnectorAdAPI) ListDirectoryRegistrations(arg0 *pcaconnectorad.ListDirectoryRegistrationsInput) (*pcaconnectorad.ListDirectoryRegistrationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectoryRegistrations", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.ListDirectoryRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDirectoryRegistrations indicates an expected call of ListDirectoryRegistrations
func (mr *MockPcaConnectorAdAPIMockRecorder) ListDirectoryRegistrations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectoryRegistrations", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListDirectoryRegistrations), arg0)
}

// ListDirectoryRegistrationsPages mocks base method
func (m *MockPcaConnectorAdAPI) ListDirectoryRegistrationsPages(arg0 *pcaconnectorad.ListDirectoryRegistrationsInput, arg1 func(*pcaconnectorad.ListDirectoryRegistrationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectoryRegistrationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDirectoryRegistrationsPages indicates an expected call of ListDirectoryRegistrationsPages
func (mr *MockPcaConnectorAdAPIMockRecorder) ListDirectoryRegistrationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectoryRegistrationsPages", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListDirectoryRegistrationsPages), arg0, arg1)
}

// ListDirectoryRegistrationsPagesWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListDirectoryRegistrationsPagesWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListDirectoryRegistrationsInput, arg2 func(*pcaconnectorad.ListDirectoryRegistrationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDirectoryRegistrationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDirectoryRegistrationsPagesWithContext indicates an expected call of ListDirectoryRegistrationsPagesWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListDirectoryRegistrationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectoryRegistrationsPagesWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListDirectoryRegistrationsPagesWithContext), varargs...)
}

// ListDirectoryRegistrationsRequest mocks base method
func (m *MockPcaConnectorAdAPI) ListDirectoryRegistrationsRequest(arg0 *pcaconnectorad.ListDirectoryRegistrationsInput) (*request.Request, *pcaconnectorad.ListDirectoryRegistrationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectoryRegistrationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.ListDirectoryRegistrationsOutput)
	return ret0, ret1
}

// ListDirectoryRegistrationsRequest indicates an expected call of ListDirectoryRegistrationsRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) ListDirectoryRegistrationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectoryRegistrationsRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListDirectoryRegistrationsRequest), arg0)
}

// ListDirectoryRegistrationsWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListDirectoryRegistrationsWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListDirectoryRegistrationsInput, arg2 ...request.Option) (*pcaconnectorad.ListDirectoryRegistrationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDirectoryRegistrationsWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.ListDirectoryRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDirectoryRegistrationsWithContext indicates an expected call of ListDirectoryRegistrationsWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListDirectoryRegistrationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectoryRegistrationsWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListDirectoryRegistrationsWithContext), varargs...)
}

// ListServicePrincipalNames mocks base method
func (m *MockPcaConnectorAdAPI) ListServicePrincipalNames(arg0 *pcaconnectorad.ListServicePrincipalNamesInput) (*pcaconnectorad.ListServicePrincipalNamesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicePrincipalNames", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.ListServicePrincipalNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicePrincipalNames indicates an expected call of ListServicePrincipalNames
func (mr *MockPcaConnectorAdAPIMockRecorder) ListServicePrincipalNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicePrincipalNames", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListServicePrincipalNames), arg0)
}

// ListServicePrincipalNamesPages mocks base method
func (m *MockPcaConnectorAdAPI) ListServicePrincipalNamesPages(arg0 *pcaconnectorad.ListServicePrincipalNamesInput, arg1 func(*pcaconnectorad.ListServicePrincipalNamesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicePrincipalNamesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicePrincipalNamesPages indicates an expected call of ListServicePrincipalNamesPages
func (mr *MockPcaConnectorAdAPIMockRecorder) ListServicePrincipalNamesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicePrincipalNamesPages", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListServicePrincipalNamesPages), arg0, arg1)
}

// ListServicePrincipalNamesPagesWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListServicePrincipalNamesPagesWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListServicePrincipalNamesInput, arg2 func(*pcaconnectorad.ListServicePrincipalNamesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicePrincipalNamesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicePrincipalNamesPagesWithContext indicates an expected call of ListServicePrincipalNamesPagesWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListServicePrincipalNamesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicePrincipalNamesPagesWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListServicePrincipalNamesPagesWithContext), varargs...)
}

// ListServicePrincipalNamesRequest mocks base method
func (m *MockPcaConnectorAdAPI) ListServicePrincipalNamesRequest(arg0 *pcaconnectorad.ListServicePrincipalNamesInput) (*request.Request, *pcaconnectorad.ListServicePrincipalNamesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicePrincipalNamesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.ListServicePrincipalNamesOutput)
	return ret0, ret1
}

// ListServicePrincipalNamesRequest indicates an expected call of ListServicePrincipalNamesRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) ListServicePrincipalNamesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicePrincipalNamesRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListServicePrincipalNamesRequest), arg0)
}

// ListServicePrincipalNamesWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListServicePrincipalNamesWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListServicePrincipalNamesInput, arg2 ...request.Option) (*pcaconnectorad.ListServicePrincipalNamesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicePrincipalNamesWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.ListServicePrincipalNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicePrincipalNamesWithContext indicates an expected call of ListServicePrincipalNamesWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListServicePrincipalNamesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicePrincipalNamesWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListServicePrincipalNamesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockPcaConnectorAdAPI) ListTagsForResource(arg0 *pcaconnectorad.ListTagsForResourceInput) (*pcaconnectorad.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockPcaConnectorAdAPI) ListTagsForResourceRequest(arg0 *pcaconnectorad.ListTagsForResourceInput) (*request.Request, *pcaconnectorad.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListTagsForResourceInput, arg2 ...request.Option) (*pcaconnectorad.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTemplateGroupAccessControlEntries mocks base method
func (m *MockPcaConnectorAdAPI) ListTemplateGroupAccessControlEntries(arg0 *pcaconnectorad.ListTemplateGroupAccessControlEntriesInput) (*pcaconnectorad.ListTemplateGroupAccessControlEntriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateGroupAccessControlEntries", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.ListTemplateGroupAccessControlEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateGroupAccessControlEntries indicates an expected call of ListTemplateGroupAccessControlEntries
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTemplateGroupAccessControlEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateGroupAccessControlEntries", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTemplateGroupAccessControlEntries), arg0)
}

// ListTemplateGroupAccessControlEntriesPages mocks base method
func (m *MockPcaConnectorAdAPI) ListTemplateGroupAccessControlEntriesPages(arg0 *pcaconnectorad.ListTemplateGroupAccessControlEntriesInput, arg1 func(*pcaconnectorad.ListTemplateGroupAccessControlEntriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateGroupAccessControlEntriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplateGroupAccessControlEntriesPages indicates an expected call of ListTemplateGroupAccessControlEntriesPages
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTemplateGroupAccessControlEntriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateGroupAccessControlEntriesPages", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTemplateGroupAccessControlEntriesPages), arg0, arg1)
}

// ListTemplateGroupAccessControlEntriesPagesWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListTemplateGroupAccessControlEntriesPagesWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListTemplateGroupAccessControlEntriesInput, arg2 func(*pcaconnectorad.ListTemplateGroupAccessControlEntriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplateGroupAccessControlEntriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplateGroupAccessControlEntriesPagesWithContext indicates an expected call of ListTemplateGroupAccessControlEntriesPagesWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTemplateGroupAccessControlEntriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateGroupAccessControlEntriesPagesWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTemplateGroupAccessControlEntriesPagesWithContext), varargs...)
}

// ListTemplateGroupAccessControlEntriesRequest mocks base method
func (m *MockPcaConnectorAdAPI) ListTemplateGroupAccessControlEntriesRequest(arg0 *pcaconnectorad.ListTemplateGroupAccessControlEntriesInput) (*request.Request, *pcaconnectorad.ListTemplateGroupAccessControlEntriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateGroupAccessControlEntriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.ListTemplateGroupAccessControlEntriesOutput)
	return ret0, ret1
}

// ListTemplateGroupAccessControlEntriesRequest indicates an expected call of ListTemplateGroupAccessControlEntriesRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTemplateGroupAccessControlEntriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateGroupAccessControlEntriesRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTemplateGroupAccessControlEntriesRequest), arg0)
}

// ListTemplateGroupAccessControlEntriesWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListTemplateGroupAccessControlEntriesWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListTemplateGroupAccessControlEntriesInput, arg2 ...request.Option) (*pcaconnectorad.ListTemplateGroupAccessControlEntriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplateGroupAccessControlEntriesWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.ListTemplateGroupAccessControlEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateGroupAccessControlEntriesWithContext indicates an expected call of ListTemplateGroupAccessControlEntriesWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTemplateGroupAccessControlEntriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateGroupAccessControlEntriesWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTemplateGroupAccessControlEntriesWithContext), varargs...)
}

// ListTemplates mocks base method
func (m *MockPcaConnectorAdAPI) ListTemplates(arg0 *pcaconnectorad.ListTemplatesInput) (*pcaconnectorad.ListTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplates", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.ListTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplates indicates an expected call of ListTemplates
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTemplates), arg0)
}

// ListTemplatesPages mocks base method
func (m *MockPcaConnectorAdAPI) ListTemplatesPages(arg0 *pcaconnectorad.ListTemplatesInput, arg1 func(*pcaconnectorad.ListTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplatesPages indicates an expected call of ListTemplatesPages
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesPages", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTemplatesPages), arg0, arg1)
}

// ListTemplatesPagesWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListTemplatesPagesWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListTemplatesInput, arg2 func(*pcaconnectorad.ListTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplatesPagesWithContext indicates an expected call of ListTemplatesPagesWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesPagesWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTemplatesPagesWithContext), varargs...)
}

// ListTemplatesRequest mocks base method
func (m *MockPcaConnectorAdAPI) ListTemplatesRequest(arg0 *pcaconnectorad.ListTemplatesInput) (*request.Request, *pcaconnectorad.ListTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.ListTemplatesOutput)
	return ret0, ret1
}

// ListTemplatesRequest indicates an expected call of ListTemplatesRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTemplatesRequest), arg0)
}

// ListTemplatesWithContext mocks base method
func (m *MockPcaConnectorAdAPI) ListTemplatesWithContext(arg0 context.Context, arg1 *pcaconnectorad.ListTemplatesInput, arg2 ...request.Option) (*pcaconnectorad.ListTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.ListTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplatesWithContext indicates an expected call of ListTemplatesWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) ListTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).ListTemplatesWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockPcaConnectorAdAPI) TagResource(arg0 *pcaconnectorad.TagResourceInput) (*pcaconnectorad.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockPcaConnectorAdAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockPcaConnectorAdAPI) TagResourceRequest(arg0 *pcaconnectorad.TagResourceInput) (*request.Request, *pcaconnectorad.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockPcaConnectorAdAPI) TagResourceWithContext(arg0 context.Context, arg1 *pcaconnectorad.TagResourceInput, arg2 ...request.Option) (*pcaconnectorad.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockPcaConnectorAdAPI) UntagResource(arg0 *pcaconnectorad.UntagResourceInput) (*pcaconnectorad.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockPcaConnectorAdAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockPcaConnectorAdAPI) UntagResourceRequest(arg0 *pcaconnectorad.UntagResourceInput) (*request.Request, *pcaconnectorad.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockPcaConnectorAdAPI) UntagResourceWithContext(arg0 context.Context, arg1 *pcaconnectorad.UntagResourceInput, arg2 ...request.Option) (*pcaconnectorad.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateTemplate mocks base method
func (m *MockPcaConnectorAdAPI) UpdateTemplate(arg0 *pcaconnectorad.UpdateTemplateInput) (*pcaconnectorad.UpdateTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplate", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.UpdateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplate indicates an expected call of UpdateTemplate
func (mr *MockPcaConnectorAdAPIMockRecorder) UpdateTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).UpdateTemplate), arg0)
}

// UpdateTemplateGroupAccessControlEntry mocks base method
func (m *MockPcaConnectorAdAPI) UpdateTemplateGroupAccessControlEntry(arg0 *pcaconnectorad.UpdateTemplateGroupAccessControlEntryInput) (*pcaconnectorad.UpdateTemplateGroupAccessControlEntryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplateGroupAccessControlEntry", arg0)
	ret0, _ := ret[0].(*pcaconnectorad.UpdateTemplateGroupAccessControlEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplateGroupAccessControlEntry indicates an expected call of UpdateTemplateGroupAccessControlEntry
func (mr *MockPcaConnectorAdAPIMockRecorder) UpdateTemplateGroupAccessControlEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateGroupAccessControlEntry", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).UpdateTemplateGroupAccessControlEntry), arg0)
}

// UpdateTemplateGroupAccessControlEntryRequest mocks base method
func (m *MockPcaConnectorAdAPI) UpdateTemplateGroupAccessControlEntryRequest(arg0 *pcaconnectorad.UpdateTemplateGroupAccessControlEntryInput) (*request.Request, *pcaconnectorad.UpdateTemplateGroupAccessControlEntryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplateGroupAccessControlEntryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.UpdateTemplateGroupAccessControlEntryOutput)
	return ret0, ret1
}

// UpdateTemplateGroupAccessControlEntryRequest indicates an expected call of UpdateTemplateGroupAccessControlEntryRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) UpdateTemplateGroupAccessControlEntryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateGroupAccessControlEntryRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).UpdateTemplateGroupAccessControlEntryRequest), arg0)
}

// UpdateTemplateGroupAccessControlEntryWithContext mocks base method
func (m *MockPcaConnectorAdAPI) UpdateTemplateGroupAccessControlEntryWithContext(arg0 context.Context, arg1 *pcaconnectorad.UpdateTemplateGroupAccessControlEntryInput, arg2 ...request.Option) (*pcaconnectorad.UpdateTemplateGroupAccessControlEntryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTemplateGroupAccessControlEntryWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.UpdateTemplateGroupAccessControlEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplateGroupAccessControlEntryWithContext indicates an expected call of UpdateTemplateGroupAccessControlEntryWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) UpdateTemplateGroupAccessControlEntryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateGroupAccessControlEntryWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).UpdateTemplateGroupAccessControlEntryWithContext), varargs...)
}

// UpdateTemplateRequest mocks base method
func (m *MockPcaConnectorAdAPI) UpdateTemplateRequest(arg0 *pcaconnectorad.UpdateTemplateInput) (*request.Request, *pcaconnectorad.UpdateTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorad.UpdateTemplateOutput)
	return ret0, ret1
}

// UpdateTemplateRequest indicates an expected call of UpdateTemplateRequest
func (mr *MockPcaConnectorAdAPIMockRecorder) UpdateTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateRequest", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).UpdateTemplateRequest), arg0)
}

// UpdateTemplateWithContext mocks base method
func (m *MockPcaConnectorAdAPI) UpdateTemplateWithContext(arg0 context.Context, arg1 *pcaconnectorad.UpdateTemplateInput, arg2 ...request.Option) (*pcaconnectorad.UpdateTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorad.UpdateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplateWithContext indicates an expected call of UpdateTemplateWithContext
func (mr *MockPcaConnectorAdAPIMockRecorder) UpdateTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateWithContext", reflect.TypeOf((*MockPcaConnectorAdAPI)(nil).UpdateTemplateWithContext), varargs...)
}
