// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/securityhub/securityhubiface (interfaces: SecurityHubAPI)

// Package securityhubmock is a generated GoMock package.
package securityhubmock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	securityhub "github.com/aws/aws-sdk-go/service/securityhub"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSecurityHubAPI is a mock of SecurityHubAPI interface
type MockSecurityHubAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityHubAPIMockRecorder
}

// MockSecurityHubAPIMockRecorder is the mock recorder for MockSecurityHubAPI
type MockSecurityHubAPIMockRecorder struct {
	mock *MockSecurityHubAPI
}

// NewMockSecurityHubAPI creates a new mock instance
func NewMockSecurityHubAPI(ctrl *gomock.Controller) *MockSecurityHubAPI {
	mock := &MockSecurityHubAPI{ctrl: ctrl}
	mock.recorder = &MockSecurityHubAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecurityHubAPI) EXPECT() *MockSecurityHubAPIMockRecorder {
	return m.recorder
}

// AcceptInvitation mocks base method
func (m *MockSecurityHubAPI) AcceptInvitation(arg0 *securityhub.AcceptInvitationInput) (*securityhub.AcceptInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", arg0)
	ret0, _ := ret[0].(*securityhub.AcceptInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitation indicates an expected call of AcceptInvitation
func (mr *MockSecurityHubAPIMockRecorder) AcceptInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockSecurityHubAPI)(nil).AcceptInvitation), arg0)
}

// AcceptInvitationRequest mocks base method
func (m *MockSecurityHubAPI) AcceptInvitationRequest(arg0 *securityhub.AcceptInvitationInput) (*request.Request, *securityhub.AcceptInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.AcceptInvitationOutput)
	return ret0, ret1
}

// AcceptInvitationRequest indicates an expected call of AcceptInvitationRequest
func (mr *MockSecurityHubAPIMockRecorder) AcceptInvitationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).AcceptInvitationRequest), arg0)
}

// AcceptInvitationWithContext mocks base method
func (m *MockSecurityHubAPI) AcceptInvitationWithContext(arg0 aws.Context, arg1 *securityhub.AcceptInvitationInput, arg2 ...request.Option) (*securityhub.AcceptInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.AcceptInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitationWithContext indicates an expected call of AcceptInvitationWithContext
func (mr *MockSecurityHubAPIMockRecorder) AcceptInvitationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).AcceptInvitationWithContext), varargs...)
}

// BatchDisableStandards mocks base method
func (m *MockSecurityHubAPI) BatchDisableStandards(arg0 *securityhub.BatchDisableStandardsInput) (*securityhub.BatchDisableStandardsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisableStandards", arg0)
	ret0, _ := ret[0].(*securityhub.BatchDisableStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisableStandards indicates an expected call of BatchDisableStandards
func (mr *MockSecurityHubAPIMockRecorder) BatchDisableStandards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisableStandards", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchDisableStandards), arg0)
}

// BatchDisableStandardsRequest mocks base method
func (m *MockSecurityHubAPI) BatchDisableStandardsRequest(arg0 *securityhub.BatchDisableStandardsInput) (*request.Request, *securityhub.BatchDisableStandardsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisableStandardsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchDisableStandardsOutput)
	return ret0, ret1
}

// BatchDisableStandardsRequest indicates an expected call of BatchDisableStandardsRequest
func (mr *MockSecurityHubAPIMockRecorder) BatchDisableStandardsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisableStandardsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchDisableStandardsRequest), arg0)
}

// BatchDisableStandardsWithContext mocks base method
func (m *MockSecurityHubAPI) BatchDisableStandardsWithContext(arg0 aws.Context, arg1 *securityhub.BatchDisableStandardsInput, arg2 ...request.Option) (*securityhub.BatchDisableStandardsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDisableStandardsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchDisableStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisableStandardsWithContext indicates an expected call of BatchDisableStandardsWithContext
func (mr *MockSecurityHubAPIMockRecorder) BatchDisableStandardsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisableStandardsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchDisableStandardsWithContext), varargs...)
}

// BatchEnableStandards mocks base method
func (m *MockSecurityHubAPI) BatchEnableStandards(arg0 *securityhub.BatchEnableStandardsInput) (*securityhub.BatchEnableStandardsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchEnableStandards", arg0)
	ret0, _ := ret[0].(*securityhub.BatchEnableStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchEnableStandards indicates an expected call of BatchEnableStandards
func (mr *MockSecurityHubAPIMockRecorder) BatchEnableStandards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEnableStandards", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchEnableStandards), arg0)
}

// BatchEnableStandardsRequest mocks base method
func (m *MockSecurityHubAPI) BatchEnableStandardsRequest(arg0 *securityhub.BatchEnableStandardsInput) (*request.Request, *securityhub.BatchEnableStandardsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchEnableStandardsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchEnableStandardsOutput)
	return ret0, ret1
}

// BatchEnableStandardsRequest indicates an expected call of BatchEnableStandardsRequest
func (mr *MockSecurityHubAPIMockRecorder) BatchEnableStandardsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEnableStandardsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchEnableStandardsRequest), arg0)
}

// BatchEnableStandardsWithContext mocks base method
func (m *MockSecurityHubAPI) BatchEnableStandardsWithContext(arg0 aws.Context, arg1 *securityhub.BatchEnableStandardsInput, arg2 ...request.Option) (*securityhub.BatchEnableStandardsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchEnableStandardsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchEnableStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchEnableStandardsWithContext indicates an expected call of BatchEnableStandardsWithContext
func (mr *MockSecurityHubAPIMockRecorder) BatchEnableStandardsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEnableStandardsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchEnableStandardsWithContext), varargs...)
}

// BatchImportFindings mocks base method
func (m *MockSecurityHubAPI) BatchImportFindings(arg0 *securityhub.BatchImportFindingsInput) (*securityhub.BatchImportFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchImportFindings", arg0)
	ret0, _ := ret[0].(*securityhub.BatchImportFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchImportFindings indicates an expected call of BatchImportFindings
func (mr *MockSecurityHubAPIMockRecorder) BatchImportFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchImportFindings", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchImportFindings), arg0)
}

// BatchImportFindingsRequest mocks base method
func (m *MockSecurityHubAPI) BatchImportFindingsRequest(arg0 *securityhub.BatchImportFindingsInput) (*request.Request, *securityhub.BatchImportFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchImportFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchImportFindingsOutput)
	return ret0, ret1
}

// BatchImportFindingsRequest indicates an expected call of BatchImportFindingsRequest
func (mr *MockSecurityHubAPIMockRecorder) BatchImportFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchImportFindingsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchImportFindingsRequest), arg0)
}

// BatchImportFindingsWithContext mocks base method
func (m *MockSecurityHubAPI) BatchImportFindingsWithContext(arg0 aws.Context, arg1 *securityhub.BatchImportFindingsInput, arg2 ...request.Option) (*securityhub.BatchImportFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchImportFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchImportFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchImportFindingsWithContext indicates an expected call of BatchImportFindingsWithContext
func (mr *MockSecurityHubAPIMockRecorder) BatchImportFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchImportFindingsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchImportFindingsWithContext), varargs...)
}

// CreateInsight mocks base method
func (m *MockSecurityHubAPI) CreateInsight(arg0 *securityhub.CreateInsightInput) (*securityhub.CreateInsightOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInsight", arg0)
	ret0, _ := ret[0].(*securityhub.CreateInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInsight indicates an expected call of CreateInsight
func (mr *MockSecurityHubAPIMockRecorder) CreateInsight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInsight", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateInsight), arg0)
}

// CreateInsightRequest mocks base method
func (m *MockSecurityHubAPI) CreateInsightRequest(arg0 *securityhub.CreateInsightInput) (*request.Request, *securityhub.CreateInsightOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInsightRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.CreateInsightOutput)
	return ret0, ret1
}

// CreateInsightRequest indicates an expected call of CreateInsightRequest
func (mr *MockSecurityHubAPIMockRecorder) CreateInsightRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInsightRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateInsightRequest), arg0)
}

// CreateInsightWithContext mocks base method
func (m *MockSecurityHubAPI) CreateInsightWithContext(arg0 aws.Context, arg1 *securityhub.CreateInsightInput, arg2 ...request.Option) (*securityhub.CreateInsightOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInsightWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.CreateInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInsightWithContext indicates an expected call of CreateInsightWithContext
func (mr *MockSecurityHubAPIMockRecorder) CreateInsightWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInsightWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateInsightWithContext), varargs...)
}

// CreateMembers mocks base method
func (m *MockSecurityHubAPI) CreateMembers(arg0 *securityhub.CreateMembersInput) (*securityhub.CreateMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembers", arg0)
	ret0, _ := ret[0].(*securityhub.CreateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMembers indicates an expected call of CreateMembers
func (mr *MockSecurityHubAPIMockRecorder) CreateMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateMembers), arg0)
}

// CreateMembersRequest mocks base method
func (m *MockSecurityHubAPI) CreateMembersRequest(arg0 *securityhub.CreateMembersInput) (*request.Request, *securityhub.CreateMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.CreateMembersOutput)
	return ret0, ret1
}

// CreateMembersRequest indicates an expected call of CreateMembersRequest
func (mr *MockSecurityHubAPIMockRecorder) CreateMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateMembersRequest), arg0)
}

// CreateMembersWithContext mocks base method
func (m *MockSecurityHubAPI) CreateMembersWithContext(arg0 aws.Context, arg1 *securityhub.CreateMembersInput, arg2 ...request.Option) (*securityhub.CreateMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.CreateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMembersWithContext indicates an expected call of CreateMembersWithContext
func (mr *MockSecurityHubAPIMockRecorder) CreateMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateMembersWithContext), varargs...)
}

// DeclineInvitations mocks base method
func (m *MockSecurityHubAPI) DeclineInvitations(arg0 *securityhub.DeclineInvitationsInput) (*securityhub.DeclineInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineInvitations", arg0)
	ret0, _ := ret[0].(*securityhub.DeclineInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclineInvitations indicates an expected call of DeclineInvitations
func (mr *MockSecurityHubAPIMockRecorder) DeclineInvitations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitations", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeclineInvitations), arg0)
}

// DeclineInvitationsRequest mocks base method
func (m *MockSecurityHubAPI) DeclineInvitationsRequest(arg0 *securityhub.DeclineInvitationsInput) (*request.Request, *securityhub.DeclineInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DeclineInvitationsOutput)
	return ret0, ret1
}

// DeclineInvitationsRequest indicates an expected call of DeclineInvitationsRequest
func (mr *MockSecurityHubAPIMockRecorder) DeclineInvitationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitationsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeclineInvitationsRequest), arg0)
}

// DeclineInvitationsWithContext mocks base method
func (m *MockSecurityHubAPI) DeclineInvitationsWithContext(arg0 aws.Context, arg1 *securityhub.DeclineInvitationsInput, arg2 ...request.Option) (*securityhub.DeclineInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeclineInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DeclineInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclineInvitationsWithContext indicates an expected call of DeclineInvitationsWithContext
func (mr *MockSecurityHubAPIMockRecorder) DeclineInvitationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitationsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeclineInvitationsWithContext), varargs...)
}

// DeleteInsight mocks base method
func (m *MockSecurityHubAPI) DeleteInsight(arg0 *securityhub.DeleteInsightInput) (*securityhub.DeleteInsightOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInsight", arg0)
	ret0, _ := ret[0].(*securityhub.DeleteInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInsight indicates an expected call of DeleteInsight
func (mr *MockSecurityHubAPIMockRecorder) DeleteInsight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInsight", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInsight), arg0)
}

// DeleteInsightRequest mocks base method
func (m *MockSecurityHubAPI) DeleteInsightRequest(arg0 *securityhub.DeleteInsightInput) (*request.Request, *securityhub.DeleteInsightOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInsightRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DeleteInsightOutput)
	return ret0, ret1
}

// DeleteInsightRequest indicates an expected call of DeleteInsightRequest
func (mr *MockSecurityHubAPIMockRecorder) DeleteInsightRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInsightRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInsightRequest), arg0)
}

// DeleteInsightWithContext mocks base method
func (m *MockSecurityHubAPI) DeleteInsightWithContext(arg0 aws.Context, arg1 *securityhub.DeleteInsightInput, arg2 ...request.Option) (*securityhub.DeleteInsightOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInsightWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DeleteInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInsightWithContext indicates an expected call of DeleteInsightWithContext
func (mr *MockSecurityHubAPIMockRecorder) DeleteInsightWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInsightWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInsightWithContext), varargs...)
}

// DeleteInvitations mocks base method
func (m *MockSecurityHubAPI) DeleteInvitations(arg0 *securityhub.DeleteInvitationsInput) (*securityhub.DeleteInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitations", arg0)
	ret0, _ := ret[0].(*securityhub.DeleteInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitations indicates an expected call of DeleteInvitations
func (mr *MockSecurityHubAPIMockRecorder) DeleteInvitations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitations", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInvitations), arg0)
}

// DeleteInvitationsRequest mocks base method
func (m *MockSecurityHubAPI) DeleteInvitationsRequest(arg0 *securityhub.DeleteInvitationsInput) (*request.Request, *securityhub.DeleteInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DeleteInvitationsOutput)
	return ret0, ret1
}

// DeleteInvitationsRequest indicates an expected call of DeleteInvitationsRequest
func (mr *MockSecurityHubAPIMockRecorder) DeleteInvitationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitationsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInvitationsRequest), arg0)
}

// DeleteInvitationsWithContext mocks base method
func (m *MockSecurityHubAPI) DeleteInvitationsWithContext(arg0 aws.Context, arg1 *securityhub.DeleteInvitationsInput, arg2 ...request.Option) (*securityhub.DeleteInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DeleteInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitationsWithContext indicates an expected call of DeleteInvitationsWithContext
func (mr *MockSecurityHubAPIMockRecorder) DeleteInvitationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitationsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInvitationsWithContext), varargs...)
}

// DeleteMembers mocks base method
func (m *MockSecurityHubAPI) DeleteMembers(arg0 *securityhub.DeleteMembersInput) (*securityhub.DeleteMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembers", arg0)
	ret0, _ := ret[0].(*securityhub.DeleteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMembers indicates an expected call of DeleteMembers
func (mr *MockSecurityHubAPIMockRecorder) DeleteMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteMembers), arg0)
}

// DeleteMembersRequest mocks base method
func (m *MockSecurityHubAPI) DeleteMembersRequest(arg0 *securityhub.DeleteMembersInput) (*request.Request, *securityhub.DeleteMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DeleteMembersOutput)
	return ret0, ret1
}

// DeleteMembersRequest indicates an expected call of DeleteMembersRequest
func (mr *MockSecurityHubAPIMockRecorder) DeleteMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteMembersRequest), arg0)
}

// DeleteMembersWithContext mocks base method
func (m *MockSecurityHubAPI) DeleteMembersWithContext(arg0 aws.Context, arg1 *securityhub.DeleteMembersInput, arg2 ...request.Option) (*securityhub.DeleteMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DeleteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMembersWithContext indicates an expected call of DeleteMembersWithContext
func (mr *MockSecurityHubAPIMockRecorder) DeleteMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteMembersWithContext), varargs...)
}

// DisableImportFindingsForProduct mocks base method
func (m *MockSecurityHubAPI) DisableImportFindingsForProduct(arg0 *securityhub.DisableImportFindingsForProductInput) (*securityhub.DisableImportFindingsForProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableImportFindingsForProduct", arg0)
	ret0, _ := ret[0].(*securityhub.DisableImportFindingsForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableImportFindingsForProduct indicates an expected call of DisableImportFindingsForProduct
func (mr *MockSecurityHubAPIMockRecorder) DisableImportFindingsForProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableImportFindingsForProduct", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableImportFindingsForProduct), arg0)
}

// DisableImportFindingsForProductRequest mocks base method
func (m *MockSecurityHubAPI) DisableImportFindingsForProductRequest(arg0 *securityhub.DisableImportFindingsForProductInput) (*request.Request, *securityhub.DisableImportFindingsForProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableImportFindingsForProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DisableImportFindingsForProductOutput)
	return ret0, ret1
}

// DisableImportFindingsForProductRequest indicates an expected call of DisableImportFindingsForProductRequest
func (mr *MockSecurityHubAPIMockRecorder) DisableImportFindingsForProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableImportFindingsForProductRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableImportFindingsForProductRequest), arg0)
}

// DisableImportFindingsForProductWithContext mocks base method
func (m *MockSecurityHubAPI) DisableImportFindingsForProductWithContext(arg0 aws.Context, arg1 *securityhub.DisableImportFindingsForProductInput, arg2 ...request.Option) (*securityhub.DisableImportFindingsForProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableImportFindingsForProductWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DisableImportFindingsForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableImportFindingsForProductWithContext indicates an expected call of DisableImportFindingsForProductWithContext
func (mr *MockSecurityHubAPIMockRecorder) DisableImportFindingsForProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableImportFindingsForProductWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableImportFindingsForProductWithContext), varargs...)
}

// DisableSecurityHub mocks base method
func (m *MockSecurityHubAPI) DisableSecurityHub(arg0 *securityhub.DisableSecurityHubInput) (*securityhub.DisableSecurityHubOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSecurityHub", arg0)
	ret0, _ := ret[0].(*securityhub.DisableSecurityHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSecurityHub indicates an expected call of DisableSecurityHub
func (mr *MockSecurityHubAPIMockRecorder) DisableSecurityHub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSecurityHub", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableSecurityHub), arg0)
}

// DisableSecurityHubRequest mocks base method
func (m *MockSecurityHubAPI) DisableSecurityHubRequest(arg0 *securityhub.DisableSecurityHubInput) (*request.Request, *securityhub.DisableSecurityHubOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSecurityHubRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DisableSecurityHubOutput)
	return ret0, ret1
}

// DisableSecurityHubRequest indicates an expected call of DisableSecurityHubRequest
func (mr *MockSecurityHubAPIMockRecorder) DisableSecurityHubRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSecurityHubRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableSecurityHubRequest), arg0)
}

// DisableSecurityHubWithContext mocks base method
func (m *MockSecurityHubAPI) DisableSecurityHubWithContext(arg0 aws.Context, arg1 *securityhub.DisableSecurityHubInput, arg2 ...request.Option) (*securityhub.DisableSecurityHubOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableSecurityHubWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DisableSecurityHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSecurityHubWithContext indicates an expected call of DisableSecurityHubWithContext
func (mr *MockSecurityHubAPIMockRecorder) DisableSecurityHubWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSecurityHubWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableSecurityHubWithContext), varargs...)
}

// DisassociateFromMasterAccount mocks base method
func (m *MockSecurityHubAPI) DisassociateFromMasterAccount(arg0 *securityhub.DisassociateFromMasterAccountInput) (*securityhub.DisassociateFromMasterAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateFromMasterAccount", arg0)
	ret0, _ := ret[0].(*securityhub.DisassociateFromMasterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateFromMasterAccount indicates an expected call of DisassociateFromMasterAccount
func (mr *MockSecurityHubAPIMockRecorder) DisassociateFromMasterAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFromMasterAccount", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateFromMasterAccount), arg0)
}

// DisassociateFromMasterAccountRequest mocks base method
func (m *MockSecurityHubAPI) DisassociateFromMasterAccountRequest(arg0 *securityhub.DisassociateFromMasterAccountInput) (*request.Request, *securityhub.DisassociateFromMasterAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateFromMasterAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DisassociateFromMasterAccountOutput)
	return ret0, ret1
}

// DisassociateFromMasterAccountRequest indicates an expected call of DisassociateFromMasterAccountRequest
func (mr *MockSecurityHubAPIMockRecorder) DisassociateFromMasterAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFromMasterAccountRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateFromMasterAccountRequest), arg0)
}

// DisassociateFromMasterAccountWithContext mocks base method
func (m *MockSecurityHubAPI) DisassociateFromMasterAccountWithContext(arg0 aws.Context, arg1 *securityhub.DisassociateFromMasterAccountInput, arg2 ...request.Option) (*securityhub.DisassociateFromMasterAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateFromMasterAccountWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DisassociateFromMasterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateFromMasterAccountWithContext indicates an expected call of DisassociateFromMasterAccountWithContext
func (mr *MockSecurityHubAPIMockRecorder) DisassociateFromMasterAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFromMasterAccountWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateFromMasterAccountWithContext), varargs...)
}

// DisassociateMembers mocks base method
func (m *MockSecurityHubAPI) DisassociateMembers(arg0 *securityhub.DisassociateMembersInput) (*securityhub.DisassociateMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMembers", arg0)
	ret0, _ := ret[0].(*securityhub.DisassociateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMembers indicates an expected call of DisassociateMembers
func (mr *MockSecurityHubAPIMockRecorder) DisassociateMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateMembers), arg0)
}

// DisassociateMembersRequest mocks base method
func (m *MockSecurityHubAPI) DisassociateMembersRequest(arg0 *securityhub.DisassociateMembersInput) (*request.Request, *securityhub.DisassociateMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DisassociateMembersOutput)
	return ret0, ret1
}

// DisassociateMembersRequest indicates an expected call of DisassociateMembersRequest
func (mr *MockSecurityHubAPIMockRecorder) DisassociateMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateMembersRequest), arg0)
}

// DisassociateMembersWithContext mocks base method
func (m *MockSecurityHubAPI) DisassociateMembersWithContext(arg0 aws.Context, arg1 *securityhub.DisassociateMembersInput, arg2 ...request.Option) (*securityhub.DisassociateMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DisassociateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMembersWithContext indicates an expected call of DisassociateMembersWithContext
func (mr *MockSecurityHubAPIMockRecorder) DisassociateMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateMembersWithContext), varargs...)
}

// EnableImportFindingsForProduct mocks base method
func (m *MockSecurityHubAPI) EnableImportFindingsForProduct(arg0 *securityhub.EnableImportFindingsForProductInput) (*securityhub.EnableImportFindingsForProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableImportFindingsForProduct", arg0)
	ret0, _ := ret[0].(*securityhub.EnableImportFindingsForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableImportFindingsForProduct indicates an expected call of EnableImportFindingsForProduct
func (mr *MockSecurityHubAPIMockRecorder) EnableImportFindingsForProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableImportFindingsForProduct", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableImportFindingsForProduct), arg0)
}

// EnableImportFindingsForProductRequest mocks base method
func (m *MockSecurityHubAPI) EnableImportFindingsForProductRequest(arg0 *securityhub.EnableImportFindingsForProductInput) (*request.Request, *securityhub.EnableImportFindingsForProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableImportFindingsForProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.EnableImportFindingsForProductOutput)
	return ret0, ret1
}

// EnableImportFindingsForProductRequest indicates an expected call of EnableImportFindingsForProductRequest
func (mr *MockSecurityHubAPIMockRecorder) EnableImportFindingsForProductRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableImportFindingsForProductRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableImportFindingsForProductRequest), arg0)
}

// EnableImportFindingsForProductWithContext mocks base method
func (m *MockSecurityHubAPI) EnableImportFindingsForProductWithContext(arg0 aws.Context, arg1 *securityhub.EnableImportFindingsForProductInput, arg2 ...request.Option) (*securityhub.EnableImportFindingsForProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableImportFindingsForProductWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.EnableImportFindingsForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableImportFindingsForProductWithContext indicates an expected call of EnableImportFindingsForProductWithContext
func (mr *MockSecurityHubAPIMockRecorder) EnableImportFindingsForProductWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableImportFindingsForProductWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableImportFindingsForProductWithContext), varargs...)
}

// EnableSecurityHub mocks base method
func (m *MockSecurityHubAPI) EnableSecurityHub(arg0 *securityhub.EnableSecurityHubInput) (*securityhub.EnableSecurityHubOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSecurityHub", arg0)
	ret0, _ := ret[0].(*securityhub.EnableSecurityHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableSecurityHub indicates an expected call of EnableSecurityHub
func (mr *MockSecurityHubAPIMockRecorder) EnableSecurityHub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSecurityHub", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableSecurityHub), arg0)
}

// EnableSecurityHubRequest mocks base method
func (m *MockSecurityHubAPI) EnableSecurityHubRequest(arg0 *securityhub.EnableSecurityHubInput) (*request.Request, *securityhub.EnableSecurityHubOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSecurityHubRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.EnableSecurityHubOutput)
	return ret0, ret1
}

// EnableSecurityHubRequest indicates an expected call of EnableSecurityHubRequest
func (mr *MockSecurityHubAPIMockRecorder) EnableSecurityHubRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSecurityHubRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableSecurityHubRequest), arg0)
}

// EnableSecurityHubWithContext mocks base method
func (m *MockSecurityHubAPI) EnableSecurityHubWithContext(arg0 aws.Context, arg1 *securityhub.EnableSecurityHubInput, arg2 ...request.Option) (*securityhub.EnableSecurityHubOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableSecurityHubWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.EnableSecurityHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableSecurityHubWithContext indicates an expected call of EnableSecurityHubWithContext
func (mr *MockSecurityHubAPIMockRecorder) EnableSecurityHubWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSecurityHubWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableSecurityHubWithContext), varargs...)
}

// GetEnabledStandards mocks base method
func (m *MockSecurityHubAPI) GetEnabledStandards(arg0 *securityhub.GetEnabledStandardsInput) (*securityhub.GetEnabledStandardsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledStandards", arg0)
	ret0, _ := ret[0].(*securityhub.GetEnabledStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledStandards indicates an expected call of GetEnabledStandards
func (mr *MockSecurityHubAPIMockRecorder) GetEnabledStandards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledStandards", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetEnabledStandards), arg0)
}

// GetEnabledStandardsRequest mocks base method
func (m *MockSecurityHubAPI) GetEnabledStandardsRequest(arg0 *securityhub.GetEnabledStandardsInput) (*request.Request, *securityhub.GetEnabledStandardsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledStandardsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetEnabledStandardsOutput)
	return ret0, ret1
}

// GetEnabledStandardsRequest indicates an expected call of GetEnabledStandardsRequest
func (mr *MockSecurityHubAPIMockRecorder) GetEnabledStandardsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledStandardsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetEnabledStandardsRequest), arg0)
}

// GetEnabledStandardsWithContext mocks base method
func (m *MockSecurityHubAPI) GetEnabledStandardsWithContext(arg0 aws.Context, arg1 *securityhub.GetEnabledStandardsInput, arg2 ...request.Option) (*securityhub.GetEnabledStandardsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnabledStandardsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetEnabledStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledStandardsWithContext indicates an expected call of GetEnabledStandardsWithContext
func (mr *MockSecurityHubAPIMockRecorder) GetEnabledStandardsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledStandardsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetEnabledStandardsWithContext), varargs...)
}

// GetFindings mocks base method
func (m *MockSecurityHubAPI) GetFindings(arg0 *securityhub.GetFindingsInput) (*securityhub.GetFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindings", arg0)
	ret0, _ := ret[0].(*securityhub.GetFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindings indicates an expected call of GetFindings
func (mr *MockSecurityHubAPIMockRecorder) GetFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindings", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindings), arg0)
}

// GetFindingsPages mocks base method
func (m *MockSecurityHubAPI) GetFindingsPages(arg0 *securityhub.GetFindingsInput, arg1 func(*securityhub.GetFindingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFindingsPages indicates an expected call of GetFindingsPages
func (mr *MockSecurityHubAPIMockRecorder) GetFindingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingsPages), arg0, arg1)
}

// GetFindingsPagesWithContext mocks base method
func (m *MockSecurityHubAPI) GetFindingsPagesWithContext(arg0 aws.Context, arg1 *securityhub.GetFindingsInput, arg2 func(*securityhub.GetFindingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFindingsPagesWithContext indicates an expected call of GetFindingsPagesWithContext
func (mr *MockSecurityHubAPIMockRecorder) GetFindingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingsPagesWithContext), varargs...)
}

// GetFindingsRequest mocks base method
func (m *MockSecurityHubAPI) GetFindingsRequest(arg0 *securityhub.GetFindingsInput) (*request.Request, *securityhub.GetFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetFindingsOutput)
	return ret0, ret1
}

// GetFindingsRequest indicates an expected call of GetFindingsRequest
func (mr *MockSecurityHubAPIMockRecorder) GetFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingsRequest), arg0)
}

// GetFindingsWithContext mocks base method
func (m *MockSecurityHubAPI) GetFindingsWithContext(arg0 aws.Context, arg1 *securityhub.GetFindingsInput, arg2 ...request.Option) (*securityhub.GetFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingsWithContext indicates an expected call of GetFindingsWithContext
func (mr *MockSecurityHubAPIMockRecorder) GetFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingsWithContext), varargs...)
}

// GetInsightResults mocks base method
func (m *MockSecurityHubAPI) GetInsightResults(arg0 *securityhub.GetInsightResultsInput) (*securityhub.GetInsightResultsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightResults", arg0)
	ret0, _ := ret[0].(*securityhub.GetInsightResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightResults indicates an expected call of GetInsightResults
func (mr *MockSecurityHubAPIMockRecorder) GetInsightResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightResults", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightResults), arg0)
}

// GetInsightResultsRequest mocks base method
func (m *MockSecurityHubAPI) GetInsightResultsRequest(arg0 *securityhub.GetInsightResultsInput) (*request.Request, *securityhub.GetInsightResultsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightResultsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetInsightResultsOutput)
	return ret0, ret1
}

// GetInsightResultsRequest indicates an expected call of GetInsightResultsRequest
func (mr *MockSecurityHubAPIMockRecorder) GetInsightResultsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightResultsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightResultsRequest), arg0)
}

// GetInsightResultsWithContext mocks base method
func (m *MockSecurityHubAPI) GetInsightResultsWithContext(arg0 aws.Context, arg1 *securityhub.GetInsightResultsInput, arg2 ...request.Option) (*securityhub.GetInsightResultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightResultsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetInsightResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightResultsWithContext indicates an expected call of GetInsightResultsWithContext
func (mr *MockSecurityHubAPIMockRecorder) GetInsightResultsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightResultsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightResultsWithContext), varargs...)
}

// GetInsights mocks base method
func (m *MockSecurityHubAPI) GetInsights(arg0 *securityhub.GetInsightsInput) (*securityhub.GetInsightsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsights", arg0)
	ret0, _ := ret[0].(*securityhub.GetInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsights indicates an expected call of GetInsights
func (mr *MockSecurityHubAPIMockRecorder) GetInsights(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsights", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsights), arg0)
}

// GetInsightsPages mocks base method
func (m *MockSecurityHubAPI) GetInsightsPages(arg0 *securityhub.GetInsightsInput, arg1 func(*securityhub.GetInsightsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInsightsPages indicates an expected call of GetInsightsPages
func (mr *MockSecurityHubAPIMockRecorder) GetInsightsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightsPages), arg0, arg1)
}

// GetInsightsPagesWithContext mocks base method
func (m *MockSecurityHubAPI) GetInsightsPagesWithContext(arg0 aws.Context, arg1 *securityhub.GetInsightsInput, arg2 func(*securityhub.GetInsightsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInsightsPagesWithContext indicates an expected call of GetInsightsPagesWithContext
func (mr *MockSecurityHubAPIMockRecorder) GetInsightsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightsPagesWithContext), varargs...)
}

// GetInsightsRequest mocks base method
func (m *MockSecurityHubAPI) GetInsightsRequest(arg0 *securityhub.GetInsightsInput) (*request.Request, *securityhub.GetInsightsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetInsightsOutput)
	return ret0, ret1
}

// GetInsightsRequest indicates an expected call of GetInsightsRequest
func (mr *MockSecurityHubAPIMockRecorder) GetInsightsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightsRequest), arg0)
}

// GetInsightsWithContext mocks base method
func (m *MockSecurityHubAPI) GetInsightsWithContext(arg0 aws.Context, arg1 *securityhub.GetInsightsInput, arg2 ...request.Option) (*securityhub.GetInsightsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightsWithContext indicates an expected call of GetInsightsWithContext
func (mr *MockSecurityHubAPIMockRecorder) GetInsightsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightsWithContext), varargs...)
}

// GetInvitationsCount mocks base method
func (m *MockSecurityHubAPI) GetInvitationsCount(arg0 *securityhub.GetInvitationsCountInput) (*securityhub.GetInvitationsCountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitationsCount", arg0)
	ret0, _ := ret[0].(*securityhub.GetInvitationsCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitationsCount indicates an expected call of GetInvitationsCount
func (mr *MockSecurityHubAPIMockRecorder) GetInvitationsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationsCount", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInvitationsCount), arg0)
}

// GetInvitationsCountRequest mocks base method
func (m *MockSecurityHubAPI) GetInvitationsCountRequest(arg0 *securityhub.GetInvitationsCountInput) (*request.Request, *securityhub.GetInvitationsCountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitationsCountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetInvitationsCountOutput)
	return ret0, ret1
}

// GetInvitationsCountRequest indicates an expected call of GetInvitationsCountRequest
func (mr *MockSecurityHubAPIMockRecorder) GetInvitationsCountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationsCountRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInvitationsCountRequest), arg0)
}

// GetInvitationsCountWithContext mocks base method
func (m *MockSecurityHubAPI) GetInvitationsCountWithContext(arg0 aws.Context, arg1 *securityhub.GetInvitationsCountInput, arg2 ...request.Option) (*securityhub.GetInvitationsCountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvitationsCountWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetInvitationsCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitationsCountWithContext indicates an expected call of GetInvitationsCountWithContext
func (mr *MockSecurityHubAPIMockRecorder) GetInvitationsCountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationsCountWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInvitationsCountWithContext), varargs...)
}

// GetMasterAccount mocks base method
func (m *MockSecurityHubAPI) GetMasterAccount(arg0 *securityhub.GetMasterAccountInput) (*securityhub.GetMasterAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterAccount", arg0)
	ret0, _ := ret[0].(*securityhub.GetMasterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterAccount indicates an expected call of GetMasterAccount
func (mr *MockSecurityHubAPIMockRecorder) GetMasterAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterAccount", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMasterAccount), arg0)
}

// GetMasterAccountRequest mocks base method
func (m *MockSecurityHubAPI) GetMasterAccountRequest(arg0 *securityhub.GetMasterAccountInput) (*request.Request, *securityhub.GetMasterAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetMasterAccountOutput)
	return ret0, ret1
}

// GetMasterAccountRequest indicates an expected call of GetMasterAccountRequest
func (mr *MockSecurityHubAPIMockRecorder) GetMasterAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterAccountRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMasterAccountRequest), arg0)
}

// GetMasterAccountWithContext mocks base method
func (m *MockSecurityHubAPI) GetMasterAccountWithContext(arg0 aws.Context, arg1 *securityhub.GetMasterAccountInput, arg2 ...request.Option) (*securityhub.GetMasterAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMasterAccountWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetMasterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterAccountWithContext indicates an expected call of GetMasterAccountWithContext
func (mr *MockSecurityHubAPIMockRecorder) GetMasterAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterAccountWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMasterAccountWithContext), varargs...)
}

// GetMembers mocks base method
func (m *MockSecurityHubAPI) GetMembers(arg0 *securityhub.GetMembersInput) (*securityhub.GetMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", arg0)
	ret0, _ := ret[0].(*securityhub.GetMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers
func (mr *MockSecurityHubAPIMockRecorder) GetMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMembers), arg0)
}

// GetMembersRequest mocks base method
func (m *MockSecurityHubAPI) GetMembersRequest(arg0 *securityhub.GetMembersInput) (*request.Request, *securityhub.GetMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetMembersOutput)
	return ret0, ret1
}

// GetMembersRequest indicates an expected call of GetMembersRequest
func (mr *MockSecurityHubAPIMockRecorder) GetMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMembersRequest), arg0)
}

// GetMembersWithContext mocks base method
func (m *MockSecurityHubAPI) GetMembersWithContext(arg0 aws.Context, arg1 *securityhub.GetMembersInput, arg2 ...request.Option) (*securityhub.GetMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersWithContext indicates an expected call of GetMembersWithContext
func (mr *MockSecurityHubAPIMockRecorder) GetMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMembersWithContext), varargs...)
}

// InviteMembers mocks base method
func (m *MockSecurityHubAPI) InviteMembers(arg0 *securityhub.InviteMembersInput) (*securityhub.InviteMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteMembers", arg0)
	ret0, _ := ret[0].(*securityhub.InviteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteMembers indicates an expected call of InviteMembers
func (mr *MockSecurityHubAPIMockRecorder) InviteMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).InviteMembers), arg0)
}

// InviteMembersRequest mocks base method
func (m *MockSecurityHubAPI) InviteMembersRequest(arg0 *securityhub.InviteMembersInput) (*request.Request, *securityhub.InviteMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.InviteMembersOutput)
	return ret0, ret1
}

// InviteMembersRequest indicates an expected call of InviteMembersRequest
func (mr *MockSecurityHubAPIMockRecorder) InviteMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).InviteMembersRequest), arg0)
}

// InviteMembersWithContext mocks base method
func (m *MockSecurityHubAPI) InviteMembersWithContext(arg0 aws.Context, arg1 *securityhub.InviteMembersInput, arg2 ...request.Option) (*securityhub.InviteMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.InviteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteMembersWithContext indicates an expected call of InviteMembersWithContext
func (mr *MockSecurityHubAPIMockRecorder) InviteMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).InviteMembersWithContext), varargs...)
}

// ListEnabledProductsForImport mocks base method
func (m *MockSecurityHubAPI) ListEnabledProductsForImport(arg0 *securityhub.ListEnabledProductsForImportInput) (*securityhub.ListEnabledProductsForImportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledProductsForImport", arg0)
	ret0, _ := ret[0].(*securityhub.ListEnabledProductsForImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnabledProductsForImport indicates an expected call of ListEnabledProductsForImport
func (mr *MockSecurityHubAPIMockRecorder) ListEnabledProductsForImport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledProductsForImport", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListEnabledProductsForImport), arg0)
}

// ListEnabledProductsForImportPages mocks base method
func (m *MockSecurityHubAPI) ListEnabledProductsForImportPages(arg0 *securityhub.ListEnabledProductsForImportInput, arg1 func(*securityhub.ListEnabledProductsForImportOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledProductsForImportPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnabledProductsForImportPages indicates an expected call of ListEnabledProductsForImportPages
func (mr *MockSecurityHubAPIMockRecorder) ListEnabledProductsForImportPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledProductsForImportPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListEnabledProductsForImportPages), arg0, arg1)
}

// ListEnabledProductsForImportPagesWithContext mocks base method
func (m *MockSecurityHubAPI) ListEnabledProductsForImportPagesWithContext(arg0 aws.Context, arg1 *securityhub.ListEnabledProductsForImportInput, arg2 func(*securityhub.ListEnabledProductsForImportOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnabledProductsForImportPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnabledProductsForImportPagesWithContext indicates an expected call of ListEnabledProductsForImportPagesWithContext
func (mr *MockSecurityHubAPIMockRecorder) ListEnabledProductsForImportPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledProductsForImportPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListEnabledProductsForImportPagesWithContext), varargs...)
}

// ListEnabledProductsForImportRequest mocks base method
func (m *MockSecurityHubAPI) ListEnabledProductsForImportRequest(arg0 *securityhub.ListEnabledProductsForImportInput) (*request.Request, *securityhub.ListEnabledProductsForImportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledProductsForImportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListEnabledProductsForImportOutput)
	return ret0, ret1
}

// ListEnabledProductsForImportRequest indicates an expected call of ListEnabledProductsForImportRequest
func (mr *MockSecurityHubAPIMockRecorder) ListEnabledProductsForImportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledProductsForImportRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListEnabledProductsForImportRequest), arg0)
}

// ListEnabledProductsForImportWithContext mocks base method
func (m *MockSecurityHubAPI) ListEnabledProductsForImportWithContext(arg0 aws.Context, arg1 *securityhub.ListEnabledProductsForImportInput, arg2 ...request.Option) (*securityhub.ListEnabledProductsForImportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnabledProductsForImportWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListEnabledProductsForImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnabledProductsForImportWithContext indicates an expected call of ListEnabledProductsForImportWithContext
func (mr *MockSecurityHubAPIMockRecorder) ListEnabledProductsForImportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledProductsForImportWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListEnabledProductsForImportWithContext), varargs...)
}

// ListInvitations mocks base method
func (m *MockSecurityHubAPI) ListInvitations(arg0 *securityhub.ListInvitationsInput) (*securityhub.ListInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", arg0)
	ret0, _ := ret[0].(*securityhub.ListInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitations indicates an expected call of ListInvitations
func (mr *MockSecurityHubAPIMockRecorder) ListInvitations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListInvitations), arg0)
}

// ListInvitationsRequest mocks base method
func (m *MockSecurityHubAPI) ListInvitationsRequest(arg0 *securityhub.ListInvitationsInput) (*request.Request, *securityhub.ListInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListInvitationsOutput)
	return ret0, ret1
}

// ListInvitationsRequest indicates an expected call of ListInvitationsRequest
func (mr *MockSecurityHubAPIMockRecorder) ListInvitationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListInvitationsRequest), arg0)
}

// ListInvitationsWithContext mocks base method
func (m *MockSecurityHubAPI) ListInvitationsWithContext(arg0 aws.Context, arg1 *securityhub.ListInvitationsInput, arg2 ...request.Option) (*securityhub.ListInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitationsWithContext indicates an expected call of ListInvitationsWithContext
func (mr *MockSecurityHubAPIMockRecorder) ListInvitationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListInvitationsWithContext), varargs...)
}

// ListMembers mocks base method
func (m *MockSecurityHubAPI) ListMembers(arg0 *securityhub.ListMembersInput) (*securityhub.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0)
	ret0, _ := ret[0].(*securityhub.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers
func (mr *MockSecurityHubAPIMockRecorder) ListMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListMembers), arg0)
}

// ListMembersRequest mocks base method
func (m *MockSecurityHubAPI) ListMembersRequest(arg0 *securityhub.ListMembersInput) (*request.Request, *securityhub.ListMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListMembersOutput)
	return ret0, ret1
}

// ListMembersRequest indicates an expected call of ListMembersRequest
func (mr *MockSecurityHubAPIMockRecorder) ListMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListMembersRequest), arg0)
}

// ListMembersWithContext mocks base method
func (m *MockSecurityHubAPI) ListMembersWithContext(arg0 aws.Context, arg1 *securityhub.ListMembersInput, arg2 ...request.Option) (*securityhub.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersWithContext indicates an expected call of ListMembersWithContext
func (mr *MockSecurityHubAPIMockRecorder) ListMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListMembersWithContext), varargs...)
}

// UpdateFindings mocks base method
func (m *MockSecurityHubAPI) UpdateFindings(arg0 *securityhub.UpdateFindingsInput) (*securityhub.UpdateFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFindings", arg0)
	ret0, _ := ret[0].(*securityhub.UpdateFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFindings indicates an expected call of UpdateFindings
func (mr *MockSecurityHubAPIMockRecorder) UpdateFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindings", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateFindings), arg0)
}

// UpdateFindingsRequest mocks base method
func (m *MockSecurityHubAPI) UpdateFindingsRequest(arg0 *securityhub.UpdateFindingsInput) (*request.Request, *securityhub.UpdateFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.UpdateFindingsOutput)
	return ret0, ret1
}

// UpdateFindingsRequest indicates an expected call of UpdateFindingsRequest
func (mr *MockSecurityHubAPIMockRecorder) UpdateFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindingsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateFindingsRequest), arg0)
}

// UpdateFindingsWithContext mocks base method
func (m *MockSecurityHubAPI) UpdateFindingsWithContext(arg0 aws.Context, arg1 *securityhub.UpdateFindingsInput, arg2 ...request.Option) (*securityhub.UpdateFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.UpdateFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFindingsWithContext indicates an expected call of UpdateFindingsWithContext
func (mr *MockSecurityHubAPIMockRecorder) UpdateFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindingsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateFindingsWithContext), varargs...)
}

// UpdateInsight mocks base method
func (m *MockSecurityHubAPI) UpdateInsight(arg0 *securityhub.UpdateInsightInput) (*securityhub.UpdateInsightOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInsight", arg0)
	ret0, _ := ret[0].(*securityhub.UpdateInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInsight indicates an expected call of UpdateInsight
func (mr *MockSecurityHubAPIMockRecorder) UpdateInsight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInsight", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateInsight), arg0)
}

// UpdateInsightRequest mocks base method
func (m *MockSecurityHubAPI) UpdateInsightRequest(arg0 *securityhub.UpdateInsightInput) (*request.Request, *securityhub.UpdateInsightOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInsightRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.UpdateInsightOutput)
	return ret0, ret1
}

// UpdateInsightRequest indicates an expected call of UpdateInsightRequest
func (mr *MockSecurityHubAPIMockRecorder) UpdateInsightRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInsightRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateInsightRequest), arg0)
}

// UpdateInsightWithContext mocks base method
func (m *MockSecurityHubAPI) UpdateInsightWithContext(arg0 aws.Context, arg1 *securityhub.UpdateInsightInput, arg2 ...request.Option) (*securityhub.UpdateInsightOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInsightWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.UpdateInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInsightWithContext indicates an expected call of UpdateInsightWithContext
func (mr *MockSecurityHubAPIMockRecorder) UpdateInsightWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInsightWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateInsightWithContext), varargs...)
}
