// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/internetmonitor/internetmonitoriface (interfaces: InternetMonitorAPI)

// Package internetmonitormock is a generated GoMock package.
package internetmonitormock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	internetmonitor "github.com/aws/aws-sdk-go/service/internetmonitor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInternetMonitorAPI is a mock of InternetMonitorAPI interface
type MockInternetMonitorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInternetMonitorAPIMockRecorder
}

// MockInternetMonitorAPIMockRecorder is the mock recorder for MockInternetMonitorAPI
type MockInternetMonitorAPIMockRecorder struct {
	mock *MockInternetMonitorAPI
}

// NewMockInternetMonitorAPI creates a new mock instance
func NewMockInternetMonitorAPI(ctrl *gomock.Controller) *MockInternetMonitorAPI {
	mock := &MockInternetMonitorAPI{ctrl: ctrl}
	mock.recorder = &MockInternetMonitorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInternetMonitorAPI) EXPECT() *MockInternetMonitorAPIMockRecorder {
	return m.recorder
}

// CreateMonitor mocks base method
func (m *MockInternetMonitorAPI) CreateMonitor(arg0 *internetmonitor.CreateMonitorInput) (*internetmonitor.CreateMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitor", arg0)
	ret0, _ := ret[0].(*internetmonitor.CreateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitor indicates an expected call of CreateMonitor
func (mr *MockInternetMonitorAPIMockRecorder) CreateMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitor", reflect.TypeOf((*MockInternetMonitorAPI)(nil).CreateMonitor), arg0)
}

// CreateMonitorRequest mocks base method
func (m *MockInternetMonitorAPI) CreateMonitorRequest(arg0 *internetmonitor.CreateMonitorInput) (*request.Request, *internetmonitor.CreateMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*internetmonitor.CreateMonitorOutput)
	return ret0, ret1
}

// CreateMonitorRequest indicates an expected call of CreateMonitorRequest
func (mr *MockInternetMonitorAPIMockRecorder) CreateMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitorRequest", reflect.TypeOf((*MockInternetMonitorAPI)(nil).CreateMonitorRequest), arg0)
}

// CreateMonitorWithContext mocks base method
func (m *MockInternetMonitorAPI) CreateMonitorWithContext(arg0 context.Context, arg1 *internetmonitor.CreateMonitorInput, arg2 ...request.Option) (*internetmonitor.CreateMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*internetmonitor.CreateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitorWithContext indicates an expected call of CreateMonitorWithContext
func (mr *MockInternetMonitorAPIMockRecorder) CreateMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitorWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).CreateMonitorWithContext), varargs...)
}

// DeleteMonitor mocks base method
func (m *MockInternetMonitorAPI) DeleteMonitor(arg0 *internetmonitor.DeleteMonitorInput) (*internetmonitor.DeleteMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitor", arg0)
	ret0, _ := ret[0].(*internetmonitor.DeleteMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMonitor indicates an expected call of DeleteMonitor
func (mr *MockInternetMonitorAPIMockRecorder) DeleteMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitor", reflect.TypeOf((*MockInternetMonitorAPI)(nil).DeleteMonitor), arg0)
}

// DeleteMonitorRequest mocks base method
func (m *MockInternetMonitorAPI) DeleteMonitorRequest(arg0 *internetmonitor.DeleteMonitorInput) (*request.Request, *internetmonitor.DeleteMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*internetmonitor.DeleteMonitorOutput)
	return ret0, ret1
}

// DeleteMonitorRequest indicates an expected call of DeleteMonitorRequest
func (mr *MockInternetMonitorAPIMockRecorder) DeleteMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitorRequest", reflect.TypeOf((*MockInternetMonitorAPI)(nil).DeleteMonitorRequest), arg0)
}

// DeleteMonitorWithContext mocks base method
func (m *MockInternetMonitorAPI) DeleteMonitorWithContext(arg0 context.Context, arg1 *internetmonitor.DeleteMonitorInput, arg2 ...request.Option) (*internetmonitor.DeleteMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*internetmonitor.DeleteMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMonitorWithContext indicates an expected call of DeleteMonitorWithContext
func (mr *MockInternetMonitorAPIMockRecorder) DeleteMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitorWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).DeleteMonitorWithContext), varargs...)
}

// GetHealthEvent mocks base method
func (m *MockInternetMonitorAPI) GetHealthEvent(arg0 *internetmonitor.GetHealthEventInput) (*internetmonitor.GetHealthEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthEvent", arg0)
	ret0, _ := ret[0].(*internetmonitor.GetHealthEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthEvent indicates an expected call of GetHealthEvent
func (mr *MockInternetMonitorAPIMockRecorder) GetHealthEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthEvent", reflect.TypeOf((*MockInternetMonitorAPI)(nil).GetHealthEvent), arg0)
}

// GetHealthEventRequest mocks base method
func (m *MockInternetMonitorAPI) GetHealthEventRequest(arg0 *internetmonitor.GetHealthEventInput) (*request.Request, *internetmonitor.GetHealthEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*internetmonitor.GetHealthEventOutput)
	return ret0, ret1
}

// GetHealthEventRequest indicates an expected call of GetHealthEventRequest
func (mr *MockInternetMonitorAPIMockRecorder) GetHealthEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthEventRequest", reflect.TypeOf((*MockInternetMonitorAPI)(nil).GetHealthEventRequest), arg0)
}

// GetHealthEventWithContext mocks base method
func (m *MockInternetMonitorAPI) GetHealthEventWithContext(arg0 context.Context, arg1 *internetmonitor.GetHealthEventInput, arg2 ...request.Option) (*internetmonitor.GetHealthEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHealthEventWithContext", varargs...)
	ret0, _ := ret[0].(*internetmonitor.GetHealthEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthEventWithContext indicates an expected call of GetHealthEventWithContext
func (mr *MockInternetMonitorAPIMockRecorder) GetHealthEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthEventWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).GetHealthEventWithContext), varargs...)
}

// GetMonitor mocks base method
func (m *MockInternetMonitorAPI) GetMonitor(arg0 *internetmonitor.GetMonitorInput) (*internetmonitor.GetMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitor", arg0)
	ret0, _ := ret[0].(*internetmonitor.GetMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitor indicates an expected call of GetMonitor
func (mr *MockInternetMonitorAPIMockRecorder) GetMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitor", reflect.TypeOf((*MockInternetMonitorAPI)(nil).GetMonitor), arg0)
}

// GetMonitorRequest mocks base method
func (m *MockInternetMonitorAPI) GetMonitorRequest(arg0 *internetmonitor.GetMonitorInput) (*request.Request, *internetmonitor.GetMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*internetmonitor.GetMonitorOutput)
	return ret0, ret1
}

// GetMonitorRequest indicates an expected call of GetMonitorRequest
func (mr *MockInternetMonitorAPIMockRecorder) GetMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorRequest", reflect.TypeOf((*MockInternetMonitorAPI)(nil).GetMonitorRequest), arg0)
}

// GetMonitorWithContext mocks base method
func (m *MockInternetMonitorAPI) GetMonitorWithContext(arg0 context.Context, arg1 *internetmonitor.GetMonitorInput, arg2 ...request.Option) (*internetmonitor.GetMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*internetmonitor.GetMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitorWithContext indicates an expected call of GetMonitorWithContext
func (mr *MockInternetMonitorAPIMockRecorder) GetMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).GetMonitorWithContext), varargs...)
}

// ListHealthEvents mocks base method
func (m *MockInternetMonitorAPI) ListHealthEvents(arg0 *internetmonitor.ListHealthEventsInput) (*internetmonitor.ListHealthEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHealthEvents", arg0)
	ret0, _ := ret[0].(*internetmonitor.ListHealthEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHealthEvents indicates an expected call of ListHealthEvents
func (mr *MockInternetMonitorAPIMockRecorder) ListHealthEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHealthEvents", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListHealthEvents), arg0)
}

// ListHealthEventsPages mocks base method
func (m *MockInternetMonitorAPI) ListHealthEventsPages(arg0 *internetmonitor.ListHealthEventsInput, arg1 func(*internetmonitor.ListHealthEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHealthEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHealthEventsPages indicates an expected call of ListHealthEventsPages
func (mr *MockInternetMonitorAPIMockRecorder) ListHealthEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHealthEventsPages", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListHealthEventsPages), arg0, arg1)
}

// ListHealthEventsPagesWithContext mocks base method
func (m *MockInternetMonitorAPI) ListHealthEventsPagesWithContext(arg0 context.Context, arg1 *internetmonitor.ListHealthEventsInput, arg2 func(*internetmonitor.ListHealthEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHealthEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHealthEventsPagesWithContext indicates an expected call of ListHealthEventsPagesWithContext
func (mr *MockInternetMonitorAPIMockRecorder) ListHealthEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHealthEventsPagesWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListHealthEventsPagesWithContext), varargs...)
}

// ListHealthEventsRequest mocks base method
func (m *MockInternetMonitorAPI) ListHealthEventsRequest(arg0 *internetmonitor.ListHealthEventsInput) (*request.Request, *internetmonitor.ListHealthEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHealthEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*internetmonitor.ListHealthEventsOutput)
	return ret0, ret1
}

// ListHealthEventsRequest indicates an expected call of ListHealthEventsRequest
func (mr *MockInternetMonitorAPIMockRecorder) ListHealthEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHealthEventsRequest", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListHealthEventsRequest), arg0)
}

// ListHealthEventsWithContext mocks base method
func (m *MockInternetMonitorAPI) ListHealthEventsWithContext(arg0 context.Context, arg1 *internetmonitor.ListHealthEventsInput, arg2 ...request.Option) (*internetmonitor.ListHealthEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHealthEventsWithContext", varargs...)
	ret0, _ := ret[0].(*internetmonitor.ListHealthEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHealthEventsWithContext indicates an expected call of ListHealthEventsWithContext
func (mr *MockInternetMonitorAPIMockRecorder) ListHealthEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHealthEventsWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListHealthEventsWithContext), varargs...)
}

// ListMonitors mocks base method
func (m *MockInternetMonitorAPI) ListMonitors(arg0 *internetmonitor.ListMonitorsInput) (*internetmonitor.ListMonitorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitors", arg0)
	ret0, _ := ret[0].(*internetmonitor.ListMonitorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitors indicates an expected call of ListMonitors
func (mr *MockInternetMonitorAPIMockRecorder) ListMonitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitors", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListMonitors), arg0)
}

// ListMonitorsPages mocks base method
func (m *MockInternetMonitorAPI) ListMonitorsPages(arg0 *internetmonitor.ListMonitorsInput, arg1 func(*internetmonitor.ListMonitorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMonitorsPages indicates an expected call of ListMonitorsPages
func (mr *MockInternetMonitorAPIMockRecorder) ListMonitorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsPages", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListMonitorsPages), arg0, arg1)
}

// ListMonitorsPagesWithContext mocks base method
func (m *MockInternetMonitorAPI) ListMonitorsPagesWithContext(arg0 context.Context, arg1 *internetmonitor.ListMonitorsInput, arg2 func(*internetmonitor.ListMonitorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMonitorsPagesWithContext indicates an expected call of ListMonitorsPagesWithContext
func (mr *MockInternetMonitorAPIMockRecorder) ListMonitorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsPagesWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListMonitorsPagesWithContext), varargs...)
}

// ListMonitorsRequest mocks base method
func (m *MockInternetMonitorAPI) ListMonitorsRequest(arg0 *internetmonitor.ListMonitorsInput) (*request.Request, *internetmonitor.ListMonitorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*internetmonitor.ListMonitorsOutput)
	return ret0, ret1
}

// ListMonitorsRequest indicates an expected call of ListMonitorsRequest
func (mr *MockInternetMonitorAPIMockRecorder) ListMonitorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsRequest", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListMonitorsRequest), arg0)
}

// ListMonitorsWithContext mocks base method
func (m *MockInternetMonitorAPI) ListMonitorsWithContext(arg0 context.Context, arg1 *internetmonitor.ListMonitorsInput, arg2 ...request.Option) (*internetmonitor.ListMonitorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitorsWithContext", varargs...)
	ret0, _ := ret[0].(*internetmonitor.ListMonitorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitorsWithContext indicates an expected call of ListMonitorsWithContext
func (mr *MockInternetMonitorAPIMockRecorder) ListMonitorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListMonitorsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockInternetMonitorAPI) ListTagsForResource(arg0 *internetmonitor.ListTagsForResourceInput) (*internetmonitor.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*internetmonitor.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockInternetMonitorAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockInternetMonitorAPI) ListTagsForResourceRequest(arg0 *internetmonitor.ListTagsForResourceInput) (*request.Request, *internetmonitor.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*internetmonitor.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockInternetMonitorAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockInternetMonitorAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *internetmonitor.ListTagsForResourceInput, arg2 ...request.Option) (*internetmonitor.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*internetmonitor.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockInternetMonitorAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockInternetMonitorAPI) TagResource(arg0 *internetmonitor.TagResourceInput) (*internetmonitor.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*internetmonitor.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockInternetMonitorAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockInternetMonitorAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockInternetMonitorAPI) TagResourceRequest(arg0 *internetmonitor.TagResourceInput) (*request.Request, *internetmonitor.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*internetmonitor.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockInternetMonitorAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockInternetMonitorAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockInternetMonitorAPI) TagResourceWithContext(arg0 context.Context, arg1 *internetmonitor.TagResourceInput, arg2 ...request.Option) (*internetmonitor.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*internetmonitor.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockInternetMonitorAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockInternetMonitorAPI) UntagResource(arg0 *internetmonitor.UntagResourceInput) (*internetmonitor.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*internetmonitor.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockInternetMonitorAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockInternetMonitorAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockInternetMonitorAPI) UntagResourceRequest(arg0 *internetmonitor.UntagResourceInput) (*request.Request, *internetmonitor.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*internetmonitor.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockInternetMonitorAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockInternetMonitorAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockInternetMonitorAPI) UntagResourceWithContext(arg0 context.Context, arg1 *internetmonitor.UntagResourceInput, arg2 ...request.Option) (*internetmonitor.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*internetmonitor.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockInternetMonitorAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateMonitor mocks base method
func (m *MockInternetMonitorAPI) UpdateMonitor(arg0 *internetmonitor.UpdateMonitorInput) (*internetmonitor.UpdateMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitor", arg0)
	ret0, _ := ret[0].(*internetmonitor.UpdateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonitor indicates an expected call of UpdateMonitor
func (mr *MockInternetMonitorAPIMockRecorder) UpdateMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitor", reflect.TypeOf((*MockInternetMonitorAPI)(nil).UpdateMonitor), arg0)
}

// UpdateMonitorRequest mocks base method
func (m *MockInternetMonitorAPI) UpdateMonitorRequest(arg0 *internetmonitor.UpdateMonitorInput) (*request.Request, *internetmonitor.UpdateMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*internetmonitor.UpdateMonitorOutput)
	return ret0, ret1
}

// UpdateMonitorRequest indicates an expected call of UpdateMonitorRequest
func (mr *MockInternetMonitorAPIMockRecorder) UpdateMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitorRequest", reflect.TypeOf((*MockInternetMonitorAPI)(nil).UpdateMonitorRequest), arg0)
}

// UpdateMonitorWithContext mocks base method
func (m *MockInternetMonitorAPI) UpdateMonitorWithContext(arg0 context.Context, arg1 *internetmonitor.UpdateMonitorInput, arg2 ...request.Option) (*internetmonitor.UpdateMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*internetmonitor.UpdateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonitorWithContext indicates an expected call of UpdateMonitorWithContext
func (mr *MockInternetMonitorAPIMockRecorder) UpdateMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitorWithContext", reflect.TypeOf((*MockInternetMonitorAPI)(nil).UpdateMonitorWithContext), varargs...)
}
