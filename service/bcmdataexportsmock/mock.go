// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/bcmdataexports/bcmdataexportsiface (interfaces: BCMDataExportsAPI)

// Package bcmdataexportsmock is a generated GoMock package.
package bcmdataexportsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	bcmdataexports "github.com/aws/aws-sdk-go/service/bcmdataexports"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBCMDataExportsAPI is a mock of BCMDataExportsAPI interface
type MockBCMDataExportsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBCMDataExportsAPIMockRecorder
}

// MockBCMDataExportsAPIMockRecorder is the mock recorder for MockBCMDataExportsAPI
type MockBCMDataExportsAPIMockRecorder struct {
	mock *MockBCMDataExportsAPI
}

// NewMockBCMDataExportsAPI creates a new mock instance
func NewMockBCMDataExportsAPI(ctrl *gomock.Controller) *MockBCMDataExportsAPI {
	mock := &MockBCMDataExportsAPI{ctrl: ctrl}
	mock.recorder = &MockBCMDataExportsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBCMDataExportsAPI) EXPECT() *MockBCMDataExportsAPIMockRecorder {
	return m.recorder
}

// CreateExport mocks base method
func (m *MockBCMDataExportsAPI) CreateExport(arg0 *bcmdataexports.CreateExportInput) (*bcmdataexports.CreateExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExport", arg0)
	ret0, _ := ret[0].(*bcmdataexports.CreateExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExport indicates an expected call of CreateExport
func (mr *MockBCMDataExportsAPIMockRecorder) CreateExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExport", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).CreateExport), arg0)
}

// CreateExportRequest mocks base method
func (m *MockBCMDataExportsAPI) CreateExportRequest(arg0 *bcmdataexports.CreateExportInput) (*request.Request, *bcmdataexports.CreateExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.CreateExportOutput)
	return ret0, ret1
}

// CreateExportRequest indicates an expected call of CreateExportRequest
func (mr *MockBCMDataExportsAPIMockRecorder) CreateExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExportRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).CreateExportRequest), arg0)
}

// CreateExportWithContext mocks base method
func (m *MockBCMDataExportsAPI) CreateExportWithContext(arg0 context.Context, arg1 *bcmdataexports.CreateExportInput, arg2 ...request.Option) (*bcmdataexports.CreateExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExportWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.CreateExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExportWithContext indicates an expected call of CreateExportWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) CreateExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExportWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).CreateExportWithContext), varargs...)
}

// DeleteExport mocks base method
func (m *MockBCMDataExportsAPI) DeleteExport(arg0 *bcmdataexports.DeleteExportInput) (*bcmdataexports.DeleteExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExport", arg0)
	ret0, _ := ret[0].(*bcmdataexports.DeleteExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExport indicates an expected call of DeleteExport
func (mr *MockBCMDataExportsAPIMockRecorder) DeleteExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExport", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).DeleteExport), arg0)
}

// DeleteExportRequest mocks base method
func (m *MockBCMDataExportsAPI) DeleteExportRequest(arg0 *bcmdataexports.DeleteExportInput) (*request.Request, *bcmdataexports.DeleteExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.DeleteExportOutput)
	return ret0, ret1
}

// DeleteExportRequest indicates an expected call of DeleteExportRequest
func (mr *MockBCMDataExportsAPIMockRecorder) DeleteExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExportRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).DeleteExportRequest), arg0)
}

// DeleteExportWithContext mocks base method
func (m *MockBCMDataExportsAPI) DeleteExportWithContext(arg0 context.Context, arg1 *bcmdataexports.DeleteExportInput, arg2 ...request.Option) (*bcmdataexports.DeleteExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExportWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.DeleteExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExportWithContext indicates an expected call of DeleteExportWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) DeleteExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExportWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).DeleteExportWithContext), varargs...)
}

// GetExecution mocks base method
func (m *MockBCMDataExportsAPI) GetExecution(arg0 *bcmdataexports.GetExecutionInput) (*bcmdataexports.GetExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecution", arg0)
	ret0, _ := ret[0].(*bcmdataexports.GetExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecution indicates an expected call of GetExecution
func (mr *MockBCMDataExportsAPIMockRecorder) GetExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecution", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).GetExecution), arg0)
}

// GetExecutionRequest mocks base method
func (m *MockBCMDataExportsAPI) GetExecutionRequest(arg0 *bcmdataexports.GetExecutionInput) (*request.Request, *bcmdataexports.GetExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.GetExecutionOutput)
	return ret0, ret1
}

// GetExecutionRequest indicates an expected call of GetExecutionRequest
func (mr *MockBCMDataExportsAPIMockRecorder) GetExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).GetExecutionRequest), arg0)
}

// GetExecutionWithContext mocks base method
func (m *MockBCMDataExportsAPI) GetExecutionWithContext(arg0 context.Context, arg1 *bcmdataexports.GetExecutionInput, arg2 ...request.Option) (*bcmdataexports.GetExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.GetExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionWithContext indicates an expected call of GetExecutionWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) GetExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).GetExecutionWithContext), varargs...)
}

// GetExport mocks base method
func (m *MockBCMDataExportsAPI) GetExport(arg0 *bcmdataexports.GetExportInput) (*bcmdataexports.GetExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExport", arg0)
	ret0, _ := ret[0].(*bcmdataexports.GetExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExport indicates an expected call of GetExport
func (mr *MockBCMDataExportsAPIMockRecorder) GetExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExport", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).GetExport), arg0)
}

// GetExportRequest mocks base method
func (m *MockBCMDataExportsAPI) GetExportRequest(arg0 *bcmdataexports.GetExportInput) (*request.Request, *bcmdataexports.GetExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.GetExportOutput)
	return ret0, ret1
}

// GetExportRequest indicates an expected call of GetExportRequest
func (mr *MockBCMDataExportsAPIMockRecorder) GetExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExportRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).GetExportRequest), arg0)
}

// GetExportWithContext mocks base method
func (m *MockBCMDataExportsAPI) GetExportWithContext(arg0 context.Context, arg1 *bcmdataexports.GetExportInput, arg2 ...request.Option) (*bcmdataexports.GetExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExportWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.GetExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExportWithContext indicates an expected call of GetExportWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) GetExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExportWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).GetExportWithContext), varargs...)
}

// GetTable mocks base method
func (m *MockBCMDataExportsAPI) GetTable(arg0 *bcmdataexports.GetTableInput) (*bcmdataexports.GetTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable", arg0)
	ret0, _ := ret[0].(*bcmdataexports.GetTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTable indicates an expected call of GetTable
func (mr *MockBCMDataExportsAPIMockRecorder) GetTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).GetTable), arg0)
}

// GetTableRequest mocks base method
func (m *MockBCMDataExportsAPI) GetTableRequest(arg0 *bcmdataexports.GetTableInput) (*request.Request, *bcmdataexports.GetTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.GetTableOutput)
	return ret0, ret1
}

// GetTableRequest indicates an expected call of GetTableRequest
func (mr *MockBCMDataExportsAPIMockRecorder) GetTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).GetTableRequest), arg0)
}

// GetTableWithContext mocks base method
func (m *MockBCMDataExportsAPI) GetTableWithContext(arg0 context.Context, arg1 *bcmdataexports.GetTableInput, arg2 ...request.Option) (*bcmdataexports.GetTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.GetTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableWithContext indicates an expected call of GetTableWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) GetTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).GetTableWithContext), varargs...)
}

// ListExecutions mocks base method
func (m *MockBCMDataExportsAPI) ListExecutions(arg0 *bcmdataexports.ListExecutionsInput) (*bcmdataexports.ListExecutionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutions", arg0)
	ret0, _ := ret[0].(*bcmdataexports.ListExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutions indicates an expected call of ListExecutions
func (mr *MockBCMDataExportsAPIMockRecorder) ListExecutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutions", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListExecutions), arg0)
}

// ListExecutionsPages mocks base method
func (m *MockBCMDataExportsAPI) ListExecutionsPages(arg0 *bcmdataexports.ListExecutionsInput, arg1 func(*bcmdataexports.ListExecutionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExecutionsPages indicates an expected call of ListExecutionsPages
func (mr *MockBCMDataExportsAPIMockRecorder) ListExecutionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsPages", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListExecutionsPages), arg0, arg1)
}

// ListExecutionsPagesWithContext mocks base method
func (m *MockBCMDataExportsAPI) ListExecutionsPagesWithContext(arg0 context.Context, arg1 *bcmdataexports.ListExecutionsInput, arg2 func(*bcmdataexports.ListExecutionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExecutionsPagesWithContext indicates an expected call of ListExecutionsPagesWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) ListExecutionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsPagesWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListExecutionsPagesWithContext), varargs...)
}

// ListExecutionsRequest mocks base method
func (m *MockBCMDataExportsAPI) ListExecutionsRequest(arg0 *bcmdataexports.ListExecutionsInput) (*request.Request, *bcmdataexports.ListExecutionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.ListExecutionsOutput)
	return ret0, ret1
}

// ListExecutionsRequest indicates an expected call of ListExecutionsRequest
func (mr *MockBCMDataExportsAPIMockRecorder) ListExecutionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListExecutionsRequest), arg0)
}

// ListExecutionsWithContext mocks base method
func (m *MockBCMDataExportsAPI) ListExecutionsWithContext(arg0 context.Context, arg1 *bcmdataexports.ListExecutionsInput, arg2 ...request.Option) (*bcmdataexports.ListExecutionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutionsWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.ListExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutionsWithContext indicates an expected call of ListExecutionsWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) ListExecutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListExecutionsWithContext), varargs...)
}

// ListExports mocks base method
func (m *MockBCMDataExportsAPI) ListExports(arg0 *bcmdataexports.ListExportsInput) (*bcmdataexports.ListExportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExports", arg0)
	ret0, _ := ret[0].(*bcmdataexports.ListExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExports indicates an expected call of ListExports
func (mr *MockBCMDataExportsAPIMockRecorder) ListExports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExports", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListExports), arg0)
}

// ListExportsPages mocks base method
func (m *MockBCMDataExportsAPI) ListExportsPages(arg0 *bcmdataexports.ListExportsInput, arg1 func(*bcmdataexports.ListExportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExportsPages indicates an expected call of ListExportsPages
func (mr *MockBCMDataExportsAPIMockRecorder) ListExportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsPages", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListExportsPages), arg0, arg1)
}

// ListExportsPagesWithContext mocks base method
func (m *MockBCMDataExportsAPI) ListExportsPagesWithContext(arg0 context.Context, arg1 *bcmdataexports.ListExportsInput, arg2 func(*bcmdataexports.ListExportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExportsPagesWithContext indicates an expected call of ListExportsPagesWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) ListExportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsPagesWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListExportsPagesWithContext), varargs...)
}

// ListExportsRequest mocks base method
func (m *MockBCMDataExportsAPI) ListExportsRequest(arg0 *bcmdataexports.ListExportsInput) (*request.Request, *bcmdataexports.ListExportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.ListExportsOutput)
	return ret0, ret1
}

// ListExportsRequest indicates an expected call of ListExportsRequest
func (mr *MockBCMDataExportsAPIMockRecorder) ListExportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListExportsRequest), arg0)
}

// ListExportsWithContext mocks base method
func (m *MockBCMDataExportsAPI) ListExportsWithContext(arg0 context.Context, arg1 *bcmdataexports.ListExportsInput, arg2 ...request.Option) (*bcmdataexports.ListExportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExportsWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.ListExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExportsWithContext indicates an expected call of ListExportsWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) ListExportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListExportsWithContext), varargs...)
}

// ListTables mocks base method
func (m *MockBCMDataExportsAPI) ListTables(arg0 *bcmdataexports.ListTablesInput) (*bcmdataexports.ListTablesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", arg0)
	ret0, _ := ret[0].(*bcmdataexports.ListTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables
func (mr *MockBCMDataExportsAPIMockRecorder) ListTables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListTables), arg0)
}

// ListTablesPages mocks base method
func (m *MockBCMDataExportsAPI) ListTablesPages(arg0 *bcmdataexports.ListTablesInput, arg1 func(*bcmdataexports.ListTablesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTablesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTablesPages indicates an expected call of ListTablesPages
func (mr *MockBCMDataExportsAPIMockRecorder) ListTablesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesPages", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListTablesPages), arg0, arg1)
}

// ListTablesPagesWithContext mocks base method
func (m *MockBCMDataExportsAPI) ListTablesPagesWithContext(arg0 context.Context, arg1 *bcmdataexports.ListTablesInput, arg2 func(*bcmdataexports.ListTablesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTablesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTablesPagesWithContext indicates an expected call of ListTablesPagesWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) ListTablesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesPagesWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListTablesPagesWithContext), varargs...)
}

// ListTablesRequest mocks base method
func (m *MockBCMDataExportsAPI) ListTablesRequest(arg0 *bcmdataexports.ListTablesInput) (*request.Request, *bcmdataexports.ListTablesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTablesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.ListTablesOutput)
	return ret0, ret1
}

// ListTablesRequest indicates an expected call of ListTablesRequest
func (mr *MockBCMDataExportsAPIMockRecorder) ListTablesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListTablesRequest), arg0)
}

// ListTablesWithContext mocks base method
func (m *MockBCMDataExportsAPI) ListTablesWithContext(arg0 context.Context, arg1 *bcmdataexports.ListTablesInput, arg2 ...request.Option) (*bcmdataexports.ListTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTablesWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.ListTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTablesWithContext indicates an expected call of ListTablesWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) ListTablesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListTablesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockBCMDataExportsAPI) ListTagsForResource(arg0 *bcmdataexports.ListTagsForResourceInput) (*bcmdataexports.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*bcmdataexports.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockBCMDataExportsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockBCMDataExportsAPI) ListTagsForResourceRequest(arg0 *bcmdataexports.ListTagsForResourceInput) (*request.Request, *bcmdataexports.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockBCMDataExportsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockBCMDataExportsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *bcmdataexports.ListTagsForResourceInput, arg2 ...request.Option) (*bcmdataexports.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockBCMDataExportsAPI) TagResource(arg0 *bcmdataexports.TagResourceInput) (*bcmdataexports.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*bcmdataexports.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockBCMDataExportsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockBCMDataExportsAPI) TagResourceRequest(arg0 *bcmdataexports.TagResourceInput) (*request.Request, *bcmdataexports.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockBCMDataExportsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockBCMDataExportsAPI) TagResourceWithContext(arg0 context.Context, arg1 *bcmdataexports.TagResourceInput, arg2 ...request.Option) (*bcmdataexports.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockBCMDataExportsAPI) UntagResource(arg0 *bcmdataexports.UntagResourceInput) (*bcmdataexports.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*bcmdataexports.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockBCMDataExportsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockBCMDataExportsAPI) UntagResourceRequest(arg0 *bcmdataexports.UntagResourceInput) (*request.Request, *bcmdataexports.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockBCMDataExportsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockBCMDataExportsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *bcmdataexports.UntagResourceInput, arg2 ...request.Option) (*bcmdataexports.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateExport mocks base method
func (m *MockBCMDataExportsAPI) UpdateExport(arg0 *bcmdataexports.UpdateExportInput) (*bcmdataexports.UpdateExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExport", arg0)
	ret0, _ := ret[0].(*bcmdataexports.UpdateExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExport indicates an expected call of UpdateExport
func (mr *MockBCMDataExportsAPIMockRecorder) UpdateExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExport", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).UpdateExport), arg0)
}

// UpdateExportRequest mocks base method
func (m *MockBCMDataExportsAPI) UpdateExportRequest(arg0 *bcmdataexports.UpdateExportInput) (*request.Request, *bcmdataexports.UpdateExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bcmdataexports.UpdateExportOutput)
	return ret0, ret1
}

// UpdateExportRequest indicates an expected call of UpdateExportRequest
func (mr *MockBCMDataExportsAPIMockRecorder) UpdateExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExportRequest", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).UpdateExportRequest), arg0)
}

// UpdateExportWithContext mocks base method
func (m *MockBCMDataExportsAPI) UpdateExportWithContext(arg0 context.Context, arg1 *bcmdataexports.UpdateExportInput, arg2 ...request.Option) (*bcmdataexports.UpdateExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExportWithContext", varargs...)
	ret0, _ := ret[0].(*bcmdataexports.UpdateExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExportWithContext indicates an expected call of UpdateExportWithContext
func (mr *MockBCMDataExportsAPIMockRecorder) UpdateExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExportWithContext", reflect.TypeOf((*MockBCMDataExportsAPI)(nil).UpdateExportWithContext), varargs...)
}
