// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/paymentcryptographydata/paymentcryptographydataiface (interfaces: PaymentCryptographyDataAPI)

// Package paymentcryptographydatamock is a generated GoMock package.
package paymentcryptographydatamock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	paymentcryptographydata "github.com/aws/aws-sdk-go/service/paymentcryptographydata"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaymentCryptographyDataAPI is a mock of PaymentCryptographyDataAPI interface
type MockPaymentCryptographyDataAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentCryptographyDataAPIMockRecorder
}

// MockPaymentCryptographyDataAPIMockRecorder is the mock recorder for MockPaymentCryptographyDataAPI
type MockPaymentCryptographyDataAPIMockRecorder struct {
	mock *MockPaymentCryptographyDataAPI
}

// NewMockPaymentCryptographyDataAPI creates a new mock instance
func NewMockPaymentCryptographyDataAPI(ctrl *gomock.Controller) *MockPaymentCryptographyDataAPI {
	mock := &MockPaymentCryptographyDataAPI{ctrl: ctrl}
	mock.recorder = &MockPaymentCryptographyDataAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentCryptographyDataAPI) EXPECT() *MockPaymentCryptographyDataAPIMockRecorder {
	return m.recorder
}

// DecryptData mocks base method
func (m *MockPaymentCryptographyDataAPI) DecryptData(arg0 *paymentcryptographydata.DecryptDataInput) (*paymentcryptographydata.DecryptDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptData", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.DecryptDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptData indicates an expected call of DecryptData
func (mr *MockPaymentCryptographyDataAPIMockRecorder) DecryptData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptData", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).DecryptData), arg0)
}

// DecryptDataRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) DecryptDataRequest(arg0 *paymentcryptographydata.DecryptDataInput) (*request.Request, *paymentcryptographydata.DecryptDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.DecryptDataOutput)
	return ret0, ret1
}

// DecryptDataRequest indicates an expected call of DecryptDataRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) DecryptDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptDataRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).DecryptDataRequest), arg0)
}

// DecryptDataWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) DecryptDataWithContext(arg0 context.Context, arg1 *paymentcryptographydata.DecryptDataInput, arg2 ...request.Option) (*paymentcryptographydata.DecryptDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DecryptDataWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.DecryptDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptDataWithContext indicates an expected call of DecryptDataWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) DecryptDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptDataWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).DecryptDataWithContext), varargs...)
}

// EncryptData mocks base method
func (m *MockPaymentCryptographyDataAPI) EncryptData(arg0 *paymentcryptographydata.EncryptDataInput) (*paymentcryptographydata.EncryptDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptData", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.EncryptDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptData indicates an expected call of EncryptData
func (mr *MockPaymentCryptographyDataAPIMockRecorder) EncryptData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptData", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).EncryptData), arg0)
}

// EncryptDataRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) EncryptDataRequest(arg0 *paymentcryptographydata.EncryptDataInput) (*request.Request, *paymentcryptographydata.EncryptDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.EncryptDataOutput)
	return ret0, ret1
}

// EncryptDataRequest indicates an expected call of EncryptDataRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) EncryptDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptDataRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).EncryptDataRequest), arg0)
}

// EncryptDataWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) EncryptDataWithContext(arg0 context.Context, arg1 *paymentcryptographydata.EncryptDataInput, arg2 ...request.Option) (*paymentcryptographydata.EncryptDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EncryptDataWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.EncryptDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptDataWithContext indicates an expected call of EncryptDataWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) EncryptDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptDataWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).EncryptDataWithContext), varargs...)
}

// GenerateCardValidationData mocks base method
func (m *MockPaymentCryptographyDataAPI) GenerateCardValidationData(arg0 *paymentcryptographydata.GenerateCardValidationDataInput) (*paymentcryptographydata.GenerateCardValidationDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCardValidationData", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.GenerateCardValidationDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCardValidationData indicates an expected call of GenerateCardValidationData
func (mr *MockPaymentCryptographyDataAPIMockRecorder) GenerateCardValidationData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCardValidationData", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).GenerateCardValidationData), arg0)
}

// GenerateCardValidationDataRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) GenerateCardValidationDataRequest(arg0 *paymentcryptographydata.GenerateCardValidationDataInput) (*request.Request, *paymentcryptographydata.GenerateCardValidationDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCardValidationDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.GenerateCardValidationDataOutput)
	return ret0, ret1
}

// GenerateCardValidationDataRequest indicates an expected call of GenerateCardValidationDataRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) GenerateCardValidationDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCardValidationDataRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).GenerateCardValidationDataRequest), arg0)
}

// GenerateCardValidationDataWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) GenerateCardValidationDataWithContext(arg0 context.Context, arg1 *paymentcryptographydata.GenerateCardValidationDataInput, arg2 ...request.Option) (*paymentcryptographydata.GenerateCardValidationDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateCardValidationDataWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.GenerateCardValidationDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCardValidationDataWithContext indicates an expected call of GenerateCardValidationDataWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) GenerateCardValidationDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCardValidationDataWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).GenerateCardValidationDataWithContext), varargs...)
}

// GenerateMac mocks base method
func (m *MockPaymentCryptographyDataAPI) GenerateMac(arg0 *paymentcryptographydata.GenerateMacInput) (*paymentcryptographydata.GenerateMacOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMac", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.GenerateMacOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMac indicates an expected call of GenerateMac
func (mr *MockPaymentCryptographyDataAPIMockRecorder) GenerateMac(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMac", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).GenerateMac), arg0)
}

// GenerateMacRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) GenerateMacRequest(arg0 *paymentcryptographydata.GenerateMacInput) (*request.Request, *paymentcryptographydata.GenerateMacOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMacRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.GenerateMacOutput)
	return ret0, ret1
}

// GenerateMacRequest indicates an expected call of GenerateMacRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) GenerateMacRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMacRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).GenerateMacRequest), arg0)
}

// GenerateMacWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) GenerateMacWithContext(arg0 context.Context, arg1 *paymentcryptographydata.GenerateMacInput, arg2 ...request.Option) (*paymentcryptographydata.GenerateMacOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateMacWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.GenerateMacOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMacWithContext indicates an expected call of GenerateMacWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) GenerateMacWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMacWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).GenerateMacWithContext), varargs...)
}

// GeneratePinData mocks base method
func (m *MockPaymentCryptographyDataAPI) GeneratePinData(arg0 *paymentcryptographydata.GeneratePinDataInput) (*paymentcryptographydata.GeneratePinDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePinData", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.GeneratePinDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePinData indicates an expected call of GeneratePinData
func (mr *MockPaymentCryptographyDataAPIMockRecorder) GeneratePinData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePinData", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).GeneratePinData), arg0)
}

// GeneratePinDataRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) GeneratePinDataRequest(arg0 *paymentcryptographydata.GeneratePinDataInput) (*request.Request, *paymentcryptographydata.GeneratePinDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePinDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.GeneratePinDataOutput)
	return ret0, ret1
}

// GeneratePinDataRequest indicates an expected call of GeneratePinDataRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) GeneratePinDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePinDataRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).GeneratePinDataRequest), arg0)
}

// GeneratePinDataWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) GeneratePinDataWithContext(arg0 context.Context, arg1 *paymentcryptographydata.GeneratePinDataInput, arg2 ...request.Option) (*paymentcryptographydata.GeneratePinDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeneratePinDataWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.GeneratePinDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePinDataWithContext indicates an expected call of GeneratePinDataWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) GeneratePinDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePinDataWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).GeneratePinDataWithContext), varargs...)
}

// ReEncryptData mocks base method
func (m *MockPaymentCryptographyDataAPI) ReEncryptData(arg0 *paymentcryptographydata.ReEncryptDataInput) (*paymentcryptographydata.ReEncryptDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReEncryptData", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.ReEncryptDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReEncryptData indicates an expected call of ReEncryptData
func (mr *MockPaymentCryptographyDataAPIMockRecorder) ReEncryptData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReEncryptData", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).ReEncryptData), arg0)
}

// ReEncryptDataRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) ReEncryptDataRequest(arg0 *paymentcryptographydata.ReEncryptDataInput) (*request.Request, *paymentcryptographydata.ReEncryptDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReEncryptDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.ReEncryptDataOutput)
	return ret0, ret1
}

// ReEncryptDataRequest indicates an expected call of ReEncryptDataRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) ReEncryptDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReEncryptDataRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).ReEncryptDataRequest), arg0)
}

// ReEncryptDataWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) ReEncryptDataWithContext(arg0 context.Context, arg1 *paymentcryptographydata.ReEncryptDataInput, arg2 ...request.Option) (*paymentcryptographydata.ReEncryptDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReEncryptDataWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.ReEncryptDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReEncryptDataWithContext indicates an expected call of ReEncryptDataWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) ReEncryptDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReEncryptDataWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).ReEncryptDataWithContext), varargs...)
}

// TranslatePinData mocks base method
func (m *MockPaymentCryptographyDataAPI) TranslatePinData(arg0 *paymentcryptographydata.TranslatePinDataInput) (*paymentcryptographydata.TranslatePinDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslatePinData", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.TranslatePinDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslatePinData indicates an expected call of TranslatePinData
func (mr *MockPaymentCryptographyDataAPIMockRecorder) TranslatePinData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslatePinData", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).TranslatePinData), arg0)
}

// TranslatePinDataRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) TranslatePinDataRequest(arg0 *paymentcryptographydata.TranslatePinDataInput) (*request.Request, *paymentcryptographydata.TranslatePinDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslatePinDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.TranslatePinDataOutput)
	return ret0, ret1
}

// TranslatePinDataRequest indicates an expected call of TranslatePinDataRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) TranslatePinDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslatePinDataRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).TranslatePinDataRequest), arg0)
}

// TranslatePinDataWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) TranslatePinDataWithContext(arg0 context.Context, arg1 *paymentcryptographydata.TranslatePinDataInput, arg2 ...request.Option) (*paymentcryptographydata.TranslatePinDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TranslatePinDataWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.TranslatePinDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslatePinDataWithContext indicates an expected call of TranslatePinDataWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) TranslatePinDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslatePinDataWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).TranslatePinDataWithContext), varargs...)
}

// VerifyAuthRequestCryptogram mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyAuthRequestCryptogram(arg0 *paymentcryptographydata.VerifyAuthRequestCryptogramInput) (*paymentcryptographydata.VerifyAuthRequestCryptogramOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuthRequestCryptogram", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.VerifyAuthRequestCryptogramOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAuthRequestCryptogram indicates an expected call of VerifyAuthRequestCryptogram
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyAuthRequestCryptogram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthRequestCryptogram", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyAuthRequestCryptogram), arg0)
}

// VerifyAuthRequestCryptogramRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyAuthRequestCryptogramRequest(arg0 *paymentcryptographydata.VerifyAuthRequestCryptogramInput) (*request.Request, *paymentcryptographydata.VerifyAuthRequestCryptogramOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuthRequestCryptogramRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.VerifyAuthRequestCryptogramOutput)
	return ret0, ret1
}

// VerifyAuthRequestCryptogramRequest indicates an expected call of VerifyAuthRequestCryptogramRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyAuthRequestCryptogramRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthRequestCryptogramRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyAuthRequestCryptogramRequest), arg0)
}

// VerifyAuthRequestCryptogramWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyAuthRequestCryptogramWithContext(arg0 context.Context, arg1 *paymentcryptographydata.VerifyAuthRequestCryptogramInput, arg2 ...request.Option) (*paymentcryptographydata.VerifyAuthRequestCryptogramOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyAuthRequestCryptogramWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.VerifyAuthRequestCryptogramOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAuthRequestCryptogramWithContext indicates an expected call of VerifyAuthRequestCryptogramWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyAuthRequestCryptogramWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthRequestCryptogramWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyAuthRequestCryptogramWithContext), varargs...)
}

// VerifyCardValidationData mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyCardValidationData(arg0 *paymentcryptographydata.VerifyCardValidationDataInput) (*paymentcryptographydata.VerifyCardValidationDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCardValidationData", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.VerifyCardValidationDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCardValidationData indicates an expected call of VerifyCardValidationData
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyCardValidationData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCardValidationData", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyCardValidationData), arg0)
}

// VerifyCardValidationDataRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyCardValidationDataRequest(arg0 *paymentcryptographydata.VerifyCardValidationDataInput) (*request.Request, *paymentcryptographydata.VerifyCardValidationDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCardValidationDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.VerifyCardValidationDataOutput)
	return ret0, ret1
}

// VerifyCardValidationDataRequest indicates an expected call of VerifyCardValidationDataRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyCardValidationDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCardValidationDataRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyCardValidationDataRequest), arg0)
}

// VerifyCardValidationDataWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyCardValidationDataWithContext(arg0 context.Context, arg1 *paymentcryptographydata.VerifyCardValidationDataInput, arg2 ...request.Option) (*paymentcryptographydata.VerifyCardValidationDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyCardValidationDataWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.VerifyCardValidationDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCardValidationDataWithContext indicates an expected call of VerifyCardValidationDataWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyCardValidationDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCardValidationDataWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyCardValidationDataWithContext), varargs...)
}

// VerifyMac mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyMac(arg0 *paymentcryptographydata.VerifyMacInput) (*paymentcryptographydata.VerifyMacOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMac", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.VerifyMacOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMac indicates an expected call of VerifyMac
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyMac(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMac", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyMac), arg0)
}

// VerifyMacRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyMacRequest(arg0 *paymentcryptographydata.VerifyMacInput) (*request.Request, *paymentcryptographydata.VerifyMacOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMacRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.VerifyMacOutput)
	return ret0, ret1
}

// VerifyMacRequest indicates an expected call of VerifyMacRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyMacRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMacRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyMacRequest), arg0)
}

// VerifyMacWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyMacWithContext(arg0 context.Context, arg1 *paymentcryptographydata.VerifyMacInput, arg2 ...request.Option) (*paymentcryptographydata.VerifyMacOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyMacWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.VerifyMacOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMacWithContext indicates an expected call of VerifyMacWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyMacWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMacWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyMacWithContext), varargs...)
}

// VerifyPinData mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyPinData(arg0 *paymentcryptographydata.VerifyPinDataInput) (*paymentcryptographydata.VerifyPinDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPinData", arg0)
	ret0, _ := ret[0].(*paymentcryptographydata.VerifyPinDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPinData indicates an expected call of VerifyPinData
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyPinData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPinData", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyPinData), arg0)
}

// VerifyPinDataRequest mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyPinDataRequest(arg0 *paymentcryptographydata.VerifyPinDataInput) (*request.Request, *paymentcryptographydata.VerifyPinDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPinDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptographydata.VerifyPinDataOutput)
	return ret0, ret1
}

// VerifyPinDataRequest indicates an expected call of VerifyPinDataRequest
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyPinDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPinDataRequest", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyPinDataRequest), arg0)
}

// VerifyPinDataWithContext mocks base method
func (m *MockPaymentCryptographyDataAPI) VerifyPinDataWithContext(arg0 context.Context, arg1 *paymentcryptographydata.VerifyPinDataInput, arg2 ...request.Option) (*paymentcryptographydata.VerifyPinDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyPinDataWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptographydata.VerifyPinDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPinDataWithContext indicates an expected call of VerifyPinDataWithContext
func (mr *MockPaymentCryptographyDataAPIMockRecorder) VerifyPinDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPinDataWithContext", reflect.TypeOf((*MockPaymentCryptographyDataAPI)(nil).VerifyPinDataWithContext), varargs...)
}
