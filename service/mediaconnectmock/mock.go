// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/mediaconnect/mediaconnectiface (interfaces: MediaConnectAPI)

// Package mediaconnectmock is a generated GoMock package.
package mediaconnectmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	mediaconnect "github.com/aws/aws-sdk-go/service/mediaconnect"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMediaConnectAPI is a mock of MediaConnectAPI interface
type MockMediaConnectAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMediaConnectAPIMockRecorder
}

// MockMediaConnectAPIMockRecorder is the mock recorder for MockMediaConnectAPI
type MockMediaConnectAPIMockRecorder struct {
	mock *MockMediaConnectAPI
}

// NewMockMediaConnectAPI creates a new mock instance
func NewMockMediaConnectAPI(ctrl *gomock.Controller) *MockMediaConnectAPI {
	mock := &MockMediaConnectAPI{ctrl: ctrl}
	mock.recorder = &MockMediaConnectAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMediaConnectAPI) EXPECT() *MockMediaConnectAPIMockRecorder {
	return m.recorder
}

// AddFlowOutputs mocks base method
func (m *MockMediaConnectAPI) AddFlowOutputs(arg0 *mediaconnect.AddFlowOutputsInput) (*mediaconnect.AddFlowOutputsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowOutputs", arg0)
	ret0, _ := ret[0].(*mediaconnect.AddFlowOutputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlowOutputs indicates an expected call of AddFlowOutputs
func (mr *MockMediaConnectAPIMockRecorder) AddFlowOutputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowOutputs", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowOutputs), arg0)
}

// AddFlowOutputsRequest mocks base method
func (m *MockMediaConnectAPI) AddFlowOutputsRequest(arg0 *mediaconnect.AddFlowOutputsInput) (*request.Request, *mediaconnect.AddFlowOutputsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowOutputsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.AddFlowOutputsOutput)
	return ret0, ret1
}

// AddFlowOutputsRequest indicates an expected call of AddFlowOutputsRequest
func (mr *MockMediaConnectAPIMockRecorder) AddFlowOutputsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowOutputsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowOutputsRequest), arg0)
}

// AddFlowOutputsWithContext mocks base method
func (m *MockMediaConnectAPI) AddFlowOutputsWithContext(arg0 context.Context, arg1 *mediaconnect.AddFlowOutputsInput, arg2 ...request.Option) (*mediaconnect.AddFlowOutputsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFlowOutputsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.AddFlowOutputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlowOutputsWithContext indicates an expected call of AddFlowOutputsWithContext
func (mr *MockMediaConnectAPIMockRecorder) AddFlowOutputsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowOutputsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowOutputsWithContext), varargs...)
}

// CreateFlow mocks base method
func (m *MockMediaConnectAPI) CreateFlow(arg0 *mediaconnect.CreateFlowInput) (*mediaconnect.CreateFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.CreateFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlow indicates an expected call of CreateFlow
func (mr *MockMediaConnectAPIMockRecorder) CreateFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateFlow), arg0)
}

// CreateFlowRequest mocks base method
func (m *MockMediaConnectAPI) CreateFlowRequest(arg0 *mediaconnect.CreateFlowInput) (*request.Request, *mediaconnect.CreateFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.CreateFlowOutput)
	return ret0, ret1
}

// CreateFlowRequest indicates an expected call of CreateFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) CreateFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateFlowRequest), arg0)
}

// CreateFlowWithContext mocks base method
func (m *MockMediaConnectAPI) CreateFlowWithContext(arg0 context.Context, arg1 *mediaconnect.CreateFlowInput, arg2 ...request.Option) (*mediaconnect.CreateFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.CreateFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlowWithContext indicates an expected call of CreateFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) CreateFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateFlowWithContext), varargs...)
}

// DeleteFlow mocks base method
func (m *MockMediaConnectAPI) DeleteFlow(arg0 *mediaconnect.DeleteFlowInput) (*mediaconnect.DeleteFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.DeleteFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlow indicates an expected call of DeleteFlow
func (mr *MockMediaConnectAPIMockRecorder) DeleteFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteFlow), arg0)
}

// DeleteFlowRequest mocks base method
func (m *MockMediaConnectAPI) DeleteFlowRequest(arg0 *mediaconnect.DeleteFlowInput) (*request.Request, *mediaconnect.DeleteFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DeleteFlowOutput)
	return ret0, ret1
}

// DeleteFlowRequest indicates an expected call of DeleteFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) DeleteFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteFlowRequest), arg0)
}

// DeleteFlowWithContext mocks base method
func (m *MockMediaConnectAPI) DeleteFlowWithContext(arg0 context.Context, arg1 *mediaconnect.DeleteFlowInput, arg2 ...request.Option) (*mediaconnect.DeleteFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DeleteFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlowWithContext indicates an expected call of DeleteFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) DeleteFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteFlowWithContext), varargs...)
}

// DescribeFlow mocks base method
func (m *MockMediaConnectAPI) DescribeFlow(arg0 *mediaconnect.DescribeFlowInput) (*mediaconnect.DescribeFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.DescribeFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFlow indicates an expected call of DescribeFlow
func (mr *MockMediaConnectAPIMockRecorder) DescribeFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeFlow), arg0)
}

// DescribeFlowRequest mocks base method
func (m *MockMediaConnectAPI) DescribeFlowRequest(arg0 *mediaconnect.DescribeFlowInput) (*request.Request, *mediaconnect.DescribeFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DescribeFlowOutput)
	return ret0, ret1
}

// DescribeFlowRequest indicates an expected call of DescribeFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) DescribeFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeFlowRequest), arg0)
}

// DescribeFlowWithContext mocks base method
func (m *MockMediaConnectAPI) DescribeFlowWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeFlowInput, arg2 ...request.Option) (*mediaconnect.DescribeFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DescribeFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFlowWithContext indicates an expected call of DescribeFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) DescribeFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeFlowWithContext), varargs...)
}

// GrantFlowEntitlements mocks base method
func (m *MockMediaConnectAPI) GrantFlowEntitlements(arg0 *mediaconnect.GrantFlowEntitlementsInput) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantFlowEntitlements", arg0)
	ret0, _ := ret[0].(*mediaconnect.GrantFlowEntitlementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantFlowEntitlements indicates an expected call of GrantFlowEntitlements
func (mr *MockMediaConnectAPIMockRecorder) GrantFlowEntitlements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantFlowEntitlements", reflect.TypeOf((*MockMediaConnectAPI)(nil).GrantFlowEntitlements), arg0)
}

// GrantFlowEntitlementsRequest mocks base method
func (m *MockMediaConnectAPI) GrantFlowEntitlementsRequest(arg0 *mediaconnect.GrantFlowEntitlementsInput) (*request.Request, *mediaconnect.GrantFlowEntitlementsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantFlowEntitlementsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.GrantFlowEntitlementsOutput)
	return ret0, ret1
}

// GrantFlowEntitlementsRequest indicates an expected call of GrantFlowEntitlementsRequest
func (mr *MockMediaConnectAPIMockRecorder) GrantFlowEntitlementsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantFlowEntitlementsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).GrantFlowEntitlementsRequest), arg0)
}

// GrantFlowEntitlementsWithContext mocks base method
func (m *MockMediaConnectAPI) GrantFlowEntitlementsWithContext(arg0 context.Context, arg1 *mediaconnect.GrantFlowEntitlementsInput, arg2 ...request.Option) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantFlowEntitlementsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.GrantFlowEntitlementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantFlowEntitlementsWithContext indicates an expected call of GrantFlowEntitlementsWithContext
func (mr *MockMediaConnectAPIMockRecorder) GrantFlowEntitlementsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantFlowEntitlementsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).GrantFlowEntitlementsWithContext), varargs...)
}

// ListEntitlements mocks base method
func (m *MockMediaConnectAPI) ListEntitlements(arg0 *mediaconnect.ListEntitlementsInput) (*mediaconnect.ListEntitlementsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitlements", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListEntitlementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntitlements indicates an expected call of ListEntitlements
func (mr *MockMediaConnectAPIMockRecorder) ListEntitlements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitlements", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListEntitlements), arg0)
}

// ListEntitlementsPages mocks base method
func (m *MockMediaConnectAPI) ListEntitlementsPages(arg0 *mediaconnect.ListEntitlementsInput, arg1 func(*mediaconnect.ListEntitlementsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitlementsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEntitlementsPages indicates an expected call of ListEntitlementsPages
func (mr *MockMediaConnectAPIMockRecorder) ListEntitlementsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitlementsPages", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListEntitlementsPages), arg0, arg1)
}

// ListEntitlementsPagesWithContext mocks base method
func (m *MockMediaConnectAPI) ListEntitlementsPagesWithContext(arg0 context.Context, arg1 *mediaconnect.ListEntitlementsInput, arg2 func(*mediaconnect.ListEntitlementsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntitlementsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEntitlementsPagesWithContext indicates an expected call of ListEntitlementsPagesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListEntitlementsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitlementsPagesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListEntitlementsPagesWithContext), varargs...)
}

// ListEntitlementsRequest mocks base method
func (m *MockMediaConnectAPI) ListEntitlementsRequest(arg0 *mediaconnect.ListEntitlementsInput) (*request.Request, *mediaconnect.ListEntitlementsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitlementsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListEntitlementsOutput)
	return ret0, ret1
}

// ListEntitlementsRequest indicates an expected call of ListEntitlementsRequest
func (mr *MockMediaConnectAPIMockRecorder) ListEntitlementsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitlementsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListEntitlementsRequest), arg0)
}

// ListEntitlementsWithContext mocks base method
func (m *MockMediaConnectAPI) ListEntitlementsWithContext(arg0 context.Context, arg1 *mediaconnect.ListEntitlementsInput, arg2 ...request.Option) (*mediaconnect.ListEntitlementsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntitlementsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListEntitlementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntitlementsWithContext indicates an expected call of ListEntitlementsWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListEntitlementsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitlementsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListEntitlementsWithContext), varargs...)
}

// ListFlows mocks base method
func (m *MockMediaConnectAPI) ListFlows(arg0 *mediaconnect.ListFlowsInput) (*mediaconnect.ListFlowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlows", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListFlowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlows indicates an expected call of ListFlows
func (mr *MockMediaConnectAPIMockRecorder) ListFlows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlows", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListFlows), arg0)
}

// ListFlowsPages mocks base method
func (m *MockMediaConnectAPI) ListFlowsPages(arg0 *mediaconnect.ListFlowsInput, arg1 func(*mediaconnect.ListFlowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlowsPages indicates an expected call of ListFlowsPages
func (mr *MockMediaConnectAPIMockRecorder) ListFlowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsPages", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListFlowsPages), arg0, arg1)
}

// ListFlowsPagesWithContext mocks base method
func (m *MockMediaConnectAPI) ListFlowsPagesWithContext(arg0 context.Context, arg1 *mediaconnect.ListFlowsInput, arg2 func(*mediaconnect.ListFlowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlowsPagesWithContext indicates an expected call of ListFlowsPagesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListFlowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsPagesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListFlowsPagesWithContext), varargs...)
}

// ListFlowsRequest mocks base method
func (m *MockMediaConnectAPI) ListFlowsRequest(arg0 *mediaconnect.ListFlowsInput) (*request.Request, *mediaconnect.ListFlowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListFlowsOutput)
	return ret0, ret1
}

// ListFlowsRequest indicates an expected call of ListFlowsRequest
func (mr *MockMediaConnectAPIMockRecorder) ListFlowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListFlowsRequest), arg0)
}

// ListFlowsWithContext mocks base method
func (m *MockMediaConnectAPI) ListFlowsWithContext(arg0 context.Context, arg1 *mediaconnect.ListFlowsInput, arg2 ...request.Option) (*mediaconnect.ListFlowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListFlowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlowsWithContext indicates an expected call of ListFlowsWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListFlowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListFlowsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockMediaConnectAPI) ListTagsForResource(arg0 *mediaconnect.ListTagsForResourceInput) (*mediaconnect.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockMediaConnectAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockMediaConnectAPI) ListTagsForResourceRequest(arg0 *mediaconnect.ListTagsForResourceInput) (*request.Request, *mediaconnect.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockMediaConnectAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockMediaConnectAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *mediaconnect.ListTagsForResourceInput, arg2 ...request.Option) (*mediaconnect.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RemoveFlowOutput mocks base method
func (m *MockMediaConnectAPI) RemoveFlowOutput(arg0 *mediaconnect.RemoveFlowOutputInput) (*mediaconnect.RemoveFlowOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFlowOutput", arg0)
	ret0, _ := ret[0].(*mediaconnect.RemoveFlowOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFlowOutput indicates an expected call of RemoveFlowOutput
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowOutput", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowOutput), arg0)
}

// RemoveFlowOutputRequest mocks base method
func (m *MockMediaConnectAPI) RemoveFlowOutputRequest(arg0 *mediaconnect.RemoveFlowOutputInput) (*request.Request, *mediaconnect.RemoveFlowOutputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFlowOutputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.RemoveFlowOutputOutput)
	return ret0, ret1
}

// RemoveFlowOutputRequest indicates an expected call of RemoveFlowOutputRequest
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowOutputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowOutputRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowOutputRequest), arg0)
}

// RemoveFlowOutputWithContext mocks base method
func (m *MockMediaConnectAPI) RemoveFlowOutputWithContext(arg0 context.Context, arg1 *mediaconnect.RemoveFlowOutputInput, arg2 ...request.Option) (*mediaconnect.RemoveFlowOutputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFlowOutputWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.RemoveFlowOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFlowOutputWithContext indicates an expected call of RemoveFlowOutputWithContext
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowOutputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowOutputWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowOutputWithContext), varargs...)
}

// RevokeFlowEntitlement mocks base method
func (m *MockMediaConnectAPI) RevokeFlowEntitlement(arg0 *mediaconnect.RevokeFlowEntitlementInput) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeFlowEntitlement", arg0)
	ret0, _ := ret[0].(*mediaconnect.RevokeFlowEntitlementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeFlowEntitlement indicates an expected call of RevokeFlowEntitlement
func (mr *MockMediaConnectAPIMockRecorder) RevokeFlowEntitlement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeFlowEntitlement", reflect.TypeOf((*MockMediaConnectAPI)(nil).RevokeFlowEntitlement), arg0)
}

// RevokeFlowEntitlementRequest mocks base method
func (m *MockMediaConnectAPI) RevokeFlowEntitlementRequest(arg0 *mediaconnect.RevokeFlowEntitlementInput) (*request.Request, *mediaconnect.RevokeFlowEntitlementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeFlowEntitlementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.RevokeFlowEntitlementOutput)
	return ret0, ret1
}

// RevokeFlowEntitlementRequest indicates an expected call of RevokeFlowEntitlementRequest
func (mr *MockMediaConnectAPIMockRecorder) RevokeFlowEntitlementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeFlowEntitlementRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).RevokeFlowEntitlementRequest), arg0)
}

// RevokeFlowEntitlementWithContext mocks base method
func (m *MockMediaConnectAPI) RevokeFlowEntitlementWithContext(arg0 context.Context, arg1 *mediaconnect.RevokeFlowEntitlementInput, arg2 ...request.Option) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeFlowEntitlementWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.RevokeFlowEntitlementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeFlowEntitlementWithContext indicates an expected call of RevokeFlowEntitlementWithContext
func (mr *MockMediaConnectAPIMockRecorder) RevokeFlowEntitlementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeFlowEntitlementWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).RevokeFlowEntitlementWithContext), varargs...)
}

// StartFlow mocks base method
func (m *MockMediaConnectAPI) StartFlow(arg0 *mediaconnect.StartFlowInput) (*mediaconnect.StartFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.StartFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFlow indicates an expected call of StartFlow
func (mr *MockMediaConnectAPIMockRecorder) StartFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).StartFlow), arg0)
}

// StartFlowRequest mocks base method
func (m *MockMediaConnectAPI) StartFlowRequest(arg0 *mediaconnect.StartFlowInput) (*request.Request, *mediaconnect.StartFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.StartFlowOutput)
	return ret0, ret1
}

// StartFlowRequest indicates an expected call of StartFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) StartFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).StartFlowRequest), arg0)
}

// StartFlowWithContext mocks base method
func (m *MockMediaConnectAPI) StartFlowWithContext(arg0 context.Context, arg1 *mediaconnect.StartFlowInput, arg2 ...request.Option) (*mediaconnect.StartFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.StartFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFlowWithContext indicates an expected call of StartFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) StartFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).StartFlowWithContext), varargs...)
}

// StopFlow mocks base method
func (m *MockMediaConnectAPI) StopFlow(arg0 *mediaconnect.StopFlowInput) (*mediaconnect.StopFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.StopFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopFlow indicates an expected call of StopFlow
func (mr *MockMediaConnectAPIMockRecorder) StopFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).StopFlow), arg0)
}

// StopFlowRequest mocks base method
func (m *MockMediaConnectAPI) StopFlowRequest(arg0 *mediaconnect.StopFlowInput) (*request.Request, *mediaconnect.StopFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.StopFlowOutput)
	return ret0, ret1
}

// StopFlowRequest indicates an expected call of StopFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) StopFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).StopFlowRequest), arg0)
}

// StopFlowWithContext mocks base method
func (m *MockMediaConnectAPI) StopFlowWithContext(arg0 context.Context, arg1 *mediaconnect.StopFlowInput, arg2 ...request.Option) (*mediaconnect.StopFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.StopFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopFlowWithContext indicates an expected call of StopFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) StopFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).StopFlowWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockMediaConnectAPI) TagResource(arg0 *mediaconnect.TagResourceInput) (*mediaconnect.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*mediaconnect.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockMediaConnectAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMediaConnectAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockMediaConnectAPI) TagResourceRequest(arg0 *mediaconnect.TagResourceInput) (*request.Request, *mediaconnect.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockMediaConnectAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockMediaConnectAPI) TagResourceWithContext(arg0 context.Context, arg1 *mediaconnect.TagResourceInput, arg2 ...request.Option) (*mediaconnect.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockMediaConnectAPI) UntagResource(arg0 *mediaconnect.UntagResourceInput) (*mediaconnect.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*mediaconnect.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockMediaConnectAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMediaConnectAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockMediaConnectAPI) UntagResourceRequest(arg0 *mediaconnect.UntagResourceInput) (*request.Request, *mediaconnect.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockMediaConnectAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockMediaConnectAPI) UntagResourceWithContext(arg0 context.Context, arg1 *mediaconnect.UntagResourceInput, arg2 ...request.Option) (*mediaconnect.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateFlowEntitlement mocks base method
func (m *MockMediaConnectAPI) UpdateFlowEntitlement(arg0 *mediaconnect.UpdateFlowEntitlementInput) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowEntitlement", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowEntitlementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowEntitlement indicates an expected call of UpdateFlowEntitlement
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowEntitlement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowEntitlement", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowEntitlement), arg0)
}

// UpdateFlowEntitlementRequest mocks base method
func (m *MockMediaConnectAPI) UpdateFlowEntitlementRequest(arg0 *mediaconnect.UpdateFlowEntitlementInput) (*request.Request, *mediaconnect.UpdateFlowEntitlementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowEntitlementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateFlowEntitlementOutput)
	return ret0, ret1
}

// UpdateFlowEntitlementRequest indicates an expected call of UpdateFlowEntitlementRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowEntitlementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowEntitlementRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowEntitlementRequest), arg0)
}

// UpdateFlowEntitlementWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateFlowEntitlementWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateFlowEntitlementInput, arg2 ...request.Option) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlowEntitlementWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowEntitlementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowEntitlementWithContext indicates an expected call of UpdateFlowEntitlementWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowEntitlementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowEntitlementWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowEntitlementWithContext), varargs...)
}

// UpdateFlowOutput mocks base method
func (m *MockMediaConnectAPI) UpdateFlowOutput(arg0 *mediaconnect.UpdateFlowOutputInput) (*mediaconnect.UpdateFlowOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowOutput", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowOutput indicates an expected call of UpdateFlowOutput
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowOutput", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowOutput), arg0)
}

// UpdateFlowOutputRequest mocks base method
func (m *MockMediaConnectAPI) UpdateFlowOutputRequest(arg0 *mediaconnect.UpdateFlowOutputInput) (*request.Request, *mediaconnect.UpdateFlowOutputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowOutputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateFlowOutputOutput)
	return ret0, ret1
}

// UpdateFlowOutputRequest indicates an expected call of UpdateFlowOutputRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowOutputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowOutputRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowOutputRequest), arg0)
}

// UpdateFlowOutputWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateFlowOutputWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateFlowOutputInput, arg2 ...request.Option) (*mediaconnect.UpdateFlowOutputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlowOutputWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowOutputWithContext indicates an expected call of UpdateFlowOutputWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowOutputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowOutputWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowOutputWithContext), varargs...)
}

// UpdateFlowSource mocks base method
func (m *MockMediaConnectAPI) UpdateFlowSource(arg0 *mediaconnect.UpdateFlowSourceInput) (*mediaconnect.UpdateFlowSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowSource", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowSource indicates an expected call of UpdateFlowSource
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowSource", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowSource), arg0)
}

// UpdateFlowSourceRequest mocks base method
func (m *MockMediaConnectAPI) UpdateFlowSourceRequest(arg0 *mediaconnect.UpdateFlowSourceInput) (*request.Request, *mediaconnect.UpdateFlowSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateFlowSourceOutput)
	return ret0, ret1
}

// UpdateFlowSourceRequest indicates an expected call of UpdateFlowSourceRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowSourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowSourceRequest), arg0)
}

// UpdateFlowSourceWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateFlowSourceWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateFlowSourceInput, arg2 ...request.Option) (*mediaconnect.UpdateFlowSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlowSourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowSourceWithContext indicates an expected call of UpdateFlowSourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowSourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowSourceWithContext), varargs...)
}
