// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/mediaconnect/mediaconnectiface (interfaces: MediaConnectAPI)

// Package mediaconnectmock is a generated GoMock package.
package mediaconnectmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	mediaconnect "github.com/aws/aws-sdk-go/service/mediaconnect"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMediaConnectAPI is a mock of MediaConnectAPI interface
type MockMediaConnectAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMediaConnectAPIMockRecorder
}

// MockMediaConnectAPIMockRecorder is the mock recorder for MockMediaConnectAPI
type MockMediaConnectAPIMockRecorder struct {
	mock *MockMediaConnectAPI
}

// NewMockMediaConnectAPI creates a new mock instance
func NewMockMediaConnectAPI(ctrl *gomock.Controller) *MockMediaConnectAPI {
	mock := &MockMediaConnectAPI{ctrl: ctrl}
	mock.recorder = &MockMediaConnectAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMediaConnectAPI) EXPECT() *MockMediaConnectAPIMockRecorder {
	return m.recorder
}

// AddBridgeOutputs mocks base method
func (m *MockMediaConnectAPI) AddBridgeOutputs(arg0 *mediaconnect.AddBridgeOutputsInput) (*mediaconnect.AddBridgeOutputsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBridgeOutputs", arg0)
	ret0, _ := ret[0].(*mediaconnect.AddBridgeOutputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBridgeOutputs indicates an expected call of AddBridgeOutputs
func (mr *MockMediaConnectAPIMockRecorder) AddBridgeOutputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBridgeOutputs", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddBridgeOutputs), arg0)
}

// AddBridgeOutputsRequest mocks base method
func (m *MockMediaConnectAPI) AddBridgeOutputsRequest(arg0 *mediaconnect.AddBridgeOutputsInput) (*request.Request, *mediaconnect.AddBridgeOutputsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBridgeOutputsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.AddBridgeOutputsOutput)
	return ret0, ret1
}

// AddBridgeOutputsRequest indicates an expected call of AddBridgeOutputsRequest
func (mr *MockMediaConnectAPIMockRecorder) AddBridgeOutputsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBridgeOutputsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddBridgeOutputsRequest), arg0)
}

// AddBridgeOutputsWithContext mocks base method
func (m *MockMediaConnectAPI) AddBridgeOutputsWithContext(arg0 context.Context, arg1 *mediaconnect.AddBridgeOutputsInput, arg2 ...request.Option) (*mediaconnect.AddBridgeOutputsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBridgeOutputsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.AddBridgeOutputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBridgeOutputsWithContext indicates an expected call of AddBridgeOutputsWithContext
func (mr *MockMediaConnectAPIMockRecorder) AddBridgeOutputsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBridgeOutputsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddBridgeOutputsWithContext), varargs...)
}

// AddBridgeSources mocks base method
func (m *MockMediaConnectAPI) AddBridgeSources(arg0 *mediaconnect.AddBridgeSourcesInput) (*mediaconnect.AddBridgeSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBridgeSources", arg0)
	ret0, _ := ret[0].(*mediaconnect.AddBridgeSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBridgeSources indicates an expected call of AddBridgeSources
func (mr *MockMediaConnectAPIMockRecorder) AddBridgeSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBridgeSources", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddBridgeSources), arg0)
}

// AddBridgeSourcesRequest mocks base method
func (m *MockMediaConnectAPI) AddBridgeSourcesRequest(arg0 *mediaconnect.AddBridgeSourcesInput) (*request.Request, *mediaconnect.AddBridgeSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBridgeSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.AddBridgeSourcesOutput)
	return ret0, ret1
}

// AddBridgeSourcesRequest indicates an expected call of AddBridgeSourcesRequest
func (mr *MockMediaConnectAPIMockRecorder) AddBridgeSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBridgeSourcesRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddBridgeSourcesRequest), arg0)
}

// AddBridgeSourcesWithContext mocks base method
func (m *MockMediaConnectAPI) AddBridgeSourcesWithContext(arg0 context.Context, arg1 *mediaconnect.AddBridgeSourcesInput, arg2 ...request.Option) (*mediaconnect.AddBridgeSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBridgeSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.AddBridgeSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBridgeSourcesWithContext indicates an expected call of AddBridgeSourcesWithContext
func (mr *MockMediaConnectAPIMockRecorder) AddBridgeSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBridgeSourcesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddBridgeSourcesWithContext), varargs...)
}

// AddFlowMediaStreams mocks base method
func (m *MockMediaConnectAPI) AddFlowMediaStreams(arg0 *mediaconnect.AddFlowMediaStreamsInput) (*mediaconnect.AddFlowMediaStreamsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowMediaStreams", arg0)
	ret0, _ := ret[0].(*mediaconnect.AddFlowMediaStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlowMediaStreams indicates an expected call of AddFlowMediaStreams
func (mr *MockMediaConnectAPIMockRecorder) AddFlowMediaStreams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowMediaStreams", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowMediaStreams), arg0)
}

// AddFlowMediaStreamsRequest mocks base method
func (m *MockMediaConnectAPI) AddFlowMediaStreamsRequest(arg0 *mediaconnect.AddFlowMediaStreamsInput) (*request.Request, *mediaconnect.AddFlowMediaStreamsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowMediaStreamsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.AddFlowMediaStreamsOutput)
	return ret0, ret1
}

// AddFlowMediaStreamsRequest indicates an expected call of AddFlowMediaStreamsRequest
func (mr *MockMediaConnectAPIMockRecorder) AddFlowMediaStreamsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowMediaStreamsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowMediaStreamsRequest), arg0)
}

// AddFlowMediaStreamsWithContext mocks base method
func (m *MockMediaConnectAPI) AddFlowMediaStreamsWithContext(arg0 context.Context, arg1 *mediaconnect.AddFlowMediaStreamsInput, arg2 ...request.Option) (*mediaconnect.AddFlowMediaStreamsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFlowMediaStreamsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.AddFlowMediaStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlowMediaStreamsWithContext indicates an expected call of AddFlowMediaStreamsWithContext
func (mr *MockMediaConnectAPIMockRecorder) AddFlowMediaStreamsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowMediaStreamsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowMediaStreamsWithContext), varargs...)
}

// AddFlowOutputs mocks base method
func (m *MockMediaConnectAPI) AddFlowOutputs(arg0 *mediaconnect.AddFlowOutputsInput) (*mediaconnect.AddFlowOutputsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowOutputs", arg0)
	ret0, _ := ret[0].(*mediaconnect.AddFlowOutputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlowOutputs indicates an expected call of AddFlowOutputs
func (mr *MockMediaConnectAPIMockRecorder) AddFlowOutputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowOutputs", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowOutputs), arg0)
}

// AddFlowOutputsRequest mocks base method
func (m *MockMediaConnectAPI) AddFlowOutputsRequest(arg0 *mediaconnect.AddFlowOutputsInput) (*request.Request, *mediaconnect.AddFlowOutputsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowOutputsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.AddFlowOutputsOutput)
	return ret0, ret1
}

// AddFlowOutputsRequest indicates an expected call of AddFlowOutputsRequest
func (mr *MockMediaConnectAPIMockRecorder) AddFlowOutputsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowOutputsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowOutputsRequest), arg0)
}

// AddFlowOutputsWithContext mocks base method
func (m *MockMediaConnectAPI) AddFlowOutputsWithContext(arg0 context.Context, arg1 *mediaconnect.AddFlowOutputsInput, arg2 ...request.Option) (*mediaconnect.AddFlowOutputsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFlowOutputsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.AddFlowOutputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlowOutputsWithContext indicates an expected call of AddFlowOutputsWithContext
func (mr *MockMediaConnectAPIMockRecorder) AddFlowOutputsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowOutputsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowOutputsWithContext), varargs...)
}

// AddFlowSources mocks base method
func (m *MockMediaConnectAPI) AddFlowSources(arg0 *mediaconnect.AddFlowSourcesInput) (*mediaconnect.AddFlowSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowSources", arg0)
	ret0, _ := ret[0].(*mediaconnect.AddFlowSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlowSources indicates an expected call of AddFlowSources
func (mr *MockMediaConnectAPIMockRecorder) AddFlowSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowSources", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowSources), arg0)
}

// AddFlowSourcesRequest mocks base method
func (m *MockMediaConnectAPI) AddFlowSourcesRequest(arg0 *mediaconnect.AddFlowSourcesInput) (*request.Request, *mediaconnect.AddFlowSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.AddFlowSourcesOutput)
	return ret0, ret1
}

// AddFlowSourcesRequest indicates an expected call of AddFlowSourcesRequest
func (mr *MockMediaConnectAPIMockRecorder) AddFlowSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowSourcesRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowSourcesRequest), arg0)
}

// AddFlowSourcesWithContext mocks base method
func (m *MockMediaConnectAPI) AddFlowSourcesWithContext(arg0 context.Context, arg1 *mediaconnect.AddFlowSourcesInput, arg2 ...request.Option) (*mediaconnect.AddFlowSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFlowSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.AddFlowSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlowSourcesWithContext indicates an expected call of AddFlowSourcesWithContext
func (mr *MockMediaConnectAPIMockRecorder) AddFlowSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowSourcesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowSourcesWithContext), varargs...)
}

// AddFlowVpcInterfaces mocks base method
func (m *MockMediaConnectAPI) AddFlowVpcInterfaces(arg0 *mediaconnect.AddFlowVpcInterfacesInput) (*mediaconnect.AddFlowVpcInterfacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowVpcInterfaces", arg0)
	ret0, _ := ret[0].(*mediaconnect.AddFlowVpcInterfacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlowVpcInterfaces indicates an expected call of AddFlowVpcInterfaces
func (mr *MockMediaConnectAPIMockRecorder) AddFlowVpcInterfaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowVpcInterfaces", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowVpcInterfaces), arg0)
}

// AddFlowVpcInterfacesRequest mocks base method
func (m *MockMediaConnectAPI) AddFlowVpcInterfacesRequest(arg0 *mediaconnect.AddFlowVpcInterfacesInput) (*request.Request, *mediaconnect.AddFlowVpcInterfacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowVpcInterfacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.AddFlowVpcInterfacesOutput)
	return ret0, ret1
}

// AddFlowVpcInterfacesRequest indicates an expected call of AddFlowVpcInterfacesRequest
func (mr *MockMediaConnectAPIMockRecorder) AddFlowVpcInterfacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowVpcInterfacesRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowVpcInterfacesRequest), arg0)
}

// AddFlowVpcInterfacesWithContext mocks base method
func (m *MockMediaConnectAPI) AddFlowVpcInterfacesWithContext(arg0 context.Context, arg1 *mediaconnect.AddFlowVpcInterfacesInput, arg2 ...request.Option) (*mediaconnect.AddFlowVpcInterfacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFlowVpcInterfacesWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.AddFlowVpcInterfacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlowVpcInterfacesWithContext indicates an expected call of AddFlowVpcInterfacesWithContext
func (mr *MockMediaConnectAPIMockRecorder) AddFlowVpcInterfacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowVpcInterfacesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).AddFlowVpcInterfacesWithContext), varargs...)
}

// CreateBridge mocks base method
func (m *MockMediaConnectAPI) CreateBridge(arg0 *mediaconnect.CreateBridgeInput) (*mediaconnect.CreateBridgeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBridge", arg0)
	ret0, _ := ret[0].(*mediaconnect.CreateBridgeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBridge indicates an expected call of CreateBridge
func (mr *MockMediaConnectAPIMockRecorder) CreateBridge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBridge", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateBridge), arg0)
}

// CreateBridgeRequest mocks base method
func (m *MockMediaConnectAPI) CreateBridgeRequest(arg0 *mediaconnect.CreateBridgeInput) (*request.Request, *mediaconnect.CreateBridgeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBridgeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.CreateBridgeOutput)
	return ret0, ret1
}

// CreateBridgeRequest indicates an expected call of CreateBridgeRequest
func (mr *MockMediaConnectAPIMockRecorder) CreateBridgeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBridgeRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateBridgeRequest), arg0)
}

// CreateBridgeWithContext mocks base method
func (m *MockMediaConnectAPI) CreateBridgeWithContext(arg0 context.Context, arg1 *mediaconnect.CreateBridgeInput, arg2 ...request.Option) (*mediaconnect.CreateBridgeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBridgeWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.CreateBridgeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBridgeWithContext indicates an expected call of CreateBridgeWithContext
func (mr *MockMediaConnectAPIMockRecorder) CreateBridgeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBridgeWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateBridgeWithContext), varargs...)
}

// CreateFlow mocks base method
func (m *MockMediaConnectAPI) CreateFlow(arg0 *mediaconnect.CreateFlowInput) (*mediaconnect.CreateFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.CreateFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlow indicates an expected call of CreateFlow
func (mr *MockMediaConnectAPIMockRecorder) CreateFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateFlow), arg0)
}

// CreateFlowRequest mocks base method
func (m *MockMediaConnectAPI) CreateFlowRequest(arg0 *mediaconnect.CreateFlowInput) (*request.Request, *mediaconnect.CreateFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.CreateFlowOutput)
	return ret0, ret1
}

// CreateFlowRequest indicates an expected call of CreateFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) CreateFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateFlowRequest), arg0)
}

// CreateFlowWithContext mocks base method
func (m *MockMediaConnectAPI) CreateFlowWithContext(arg0 context.Context, arg1 *mediaconnect.CreateFlowInput, arg2 ...request.Option) (*mediaconnect.CreateFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.CreateFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlowWithContext indicates an expected call of CreateFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) CreateFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateFlowWithContext), varargs...)
}

// CreateGateway mocks base method
func (m *MockMediaConnectAPI) CreateGateway(arg0 *mediaconnect.CreateGatewayInput) (*mediaconnect.CreateGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGateway", arg0)
	ret0, _ := ret[0].(*mediaconnect.CreateGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGateway indicates an expected call of CreateGateway
func (mr *MockMediaConnectAPIMockRecorder) CreateGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGateway", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateGateway), arg0)
}

// CreateGatewayRequest mocks base method
func (m *MockMediaConnectAPI) CreateGatewayRequest(arg0 *mediaconnect.CreateGatewayInput) (*request.Request, *mediaconnect.CreateGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.CreateGatewayOutput)
	return ret0, ret1
}

// CreateGatewayRequest indicates an expected call of CreateGatewayRequest
func (mr *MockMediaConnectAPIMockRecorder) CreateGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateGatewayRequest), arg0)
}

// CreateGatewayWithContext mocks base method
func (m *MockMediaConnectAPI) CreateGatewayWithContext(arg0 context.Context, arg1 *mediaconnect.CreateGatewayInput, arg2 ...request.Option) (*mediaconnect.CreateGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.CreateGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGatewayWithContext indicates an expected call of CreateGatewayWithContext
func (mr *MockMediaConnectAPIMockRecorder) CreateGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).CreateGatewayWithContext), varargs...)
}

// DeleteBridge mocks base method
func (m *MockMediaConnectAPI) DeleteBridge(arg0 *mediaconnect.DeleteBridgeInput) (*mediaconnect.DeleteBridgeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBridge", arg0)
	ret0, _ := ret[0].(*mediaconnect.DeleteBridgeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBridge indicates an expected call of DeleteBridge
func (mr *MockMediaConnectAPIMockRecorder) DeleteBridge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBridge", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteBridge), arg0)
}

// DeleteBridgeRequest mocks base method
func (m *MockMediaConnectAPI) DeleteBridgeRequest(arg0 *mediaconnect.DeleteBridgeInput) (*request.Request, *mediaconnect.DeleteBridgeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBridgeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DeleteBridgeOutput)
	return ret0, ret1
}

// DeleteBridgeRequest indicates an expected call of DeleteBridgeRequest
func (mr *MockMediaConnectAPIMockRecorder) DeleteBridgeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBridgeRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteBridgeRequest), arg0)
}

// DeleteBridgeWithContext mocks base method
func (m *MockMediaConnectAPI) DeleteBridgeWithContext(arg0 context.Context, arg1 *mediaconnect.DeleteBridgeInput, arg2 ...request.Option) (*mediaconnect.DeleteBridgeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBridgeWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DeleteBridgeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBridgeWithContext indicates an expected call of DeleteBridgeWithContext
func (mr *MockMediaConnectAPIMockRecorder) DeleteBridgeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBridgeWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteBridgeWithContext), varargs...)
}

// DeleteFlow mocks base method
func (m *MockMediaConnectAPI) DeleteFlow(arg0 *mediaconnect.DeleteFlowInput) (*mediaconnect.DeleteFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.DeleteFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlow indicates an expected call of DeleteFlow
func (mr *MockMediaConnectAPIMockRecorder) DeleteFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteFlow), arg0)
}

// DeleteFlowRequest mocks base method
func (m *MockMediaConnectAPI) DeleteFlowRequest(arg0 *mediaconnect.DeleteFlowInput) (*request.Request, *mediaconnect.DeleteFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DeleteFlowOutput)
	return ret0, ret1
}

// DeleteFlowRequest indicates an expected call of DeleteFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) DeleteFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteFlowRequest), arg0)
}

// DeleteFlowWithContext mocks base method
func (m *MockMediaConnectAPI) DeleteFlowWithContext(arg0 context.Context, arg1 *mediaconnect.DeleteFlowInput, arg2 ...request.Option) (*mediaconnect.DeleteFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DeleteFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlowWithContext indicates an expected call of DeleteFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) DeleteFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteFlowWithContext), varargs...)
}

// DeleteGateway mocks base method
func (m *MockMediaConnectAPI) DeleteGateway(arg0 *mediaconnect.DeleteGatewayInput) (*mediaconnect.DeleteGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGateway", arg0)
	ret0, _ := ret[0].(*mediaconnect.DeleteGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGateway indicates an expected call of DeleteGateway
func (mr *MockMediaConnectAPIMockRecorder) DeleteGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteGateway), arg0)
}

// DeleteGatewayRequest mocks base method
func (m *MockMediaConnectAPI) DeleteGatewayRequest(arg0 *mediaconnect.DeleteGatewayInput) (*request.Request, *mediaconnect.DeleteGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DeleteGatewayOutput)
	return ret0, ret1
}

// DeleteGatewayRequest indicates an expected call of DeleteGatewayRequest
func (mr *MockMediaConnectAPIMockRecorder) DeleteGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteGatewayRequest), arg0)
}

// DeleteGatewayWithContext mocks base method
func (m *MockMediaConnectAPI) DeleteGatewayWithContext(arg0 context.Context, arg1 *mediaconnect.DeleteGatewayInput, arg2 ...request.Option) (*mediaconnect.DeleteGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DeleteGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGatewayWithContext indicates an expected call of DeleteGatewayWithContext
func (mr *MockMediaConnectAPIMockRecorder) DeleteGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeleteGatewayWithContext), varargs...)
}

// DeregisterGatewayInstance mocks base method
func (m *MockMediaConnectAPI) DeregisterGatewayInstance(arg0 *mediaconnect.DeregisterGatewayInstanceInput) (*mediaconnect.DeregisterGatewayInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterGatewayInstance", arg0)
	ret0, _ := ret[0].(*mediaconnect.DeregisterGatewayInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterGatewayInstance indicates an expected call of DeregisterGatewayInstance
func (mr *MockMediaConnectAPIMockRecorder) DeregisterGatewayInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterGatewayInstance", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeregisterGatewayInstance), arg0)
}

// DeregisterGatewayInstanceRequest mocks base method
func (m *MockMediaConnectAPI) DeregisterGatewayInstanceRequest(arg0 *mediaconnect.DeregisterGatewayInstanceInput) (*request.Request, *mediaconnect.DeregisterGatewayInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterGatewayInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DeregisterGatewayInstanceOutput)
	return ret0, ret1
}

// DeregisterGatewayInstanceRequest indicates an expected call of DeregisterGatewayInstanceRequest
func (mr *MockMediaConnectAPIMockRecorder) DeregisterGatewayInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterGatewayInstanceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeregisterGatewayInstanceRequest), arg0)
}

// DeregisterGatewayInstanceWithContext mocks base method
func (m *MockMediaConnectAPI) DeregisterGatewayInstanceWithContext(arg0 context.Context, arg1 *mediaconnect.DeregisterGatewayInstanceInput, arg2 ...request.Option) (*mediaconnect.DeregisterGatewayInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterGatewayInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DeregisterGatewayInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterGatewayInstanceWithContext indicates an expected call of DeregisterGatewayInstanceWithContext
func (mr *MockMediaConnectAPIMockRecorder) DeregisterGatewayInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterGatewayInstanceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DeregisterGatewayInstanceWithContext), varargs...)
}

// DescribeBridge mocks base method
func (m *MockMediaConnectAPI) DescribeBridge(arg0 *mediaconnect.DescribeBridgeInput) (*mediaconnect.DescribeBridgeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBridge", arg0)
	ret0, _ := ret[0].(*mediaconnect.DescribeBridgeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBridge indicates an expected call of DescribeBridge
func (mr *MockMediaConnectAPIMockRecorder) DescribeBridge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBridge", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeBridge), arg0)
}

// DescribeBridgeRequest mocks base method
func (m *MockMediaConnectAPI) DescribeBridgeRequest(arg0 *mediaconnect.DescribeBridgeInput) (*request.Request, *mediaconnect.DescribeBridgeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBridgeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DescribeBridgeOutput)
	return ret0, ret1
}

// DescribeBridgeRequest indicates an expected call of DescribeBridgeRequest
func (mr *MockMediaConnectAPIMockRecorder) DescribeBridgeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBridgeRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeBridgeRequest), arg0)
}

// DescribeBridgeWithContext mocks base method
func (m *MockMediaConnectAPI) DescribeBridgeWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeBridgeInput, arg2 ...request.Option) (*mediaconnect.DescribeBridgeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBridgeWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DescribeBridgeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBridgeWithContext indicates an expected call of DescribeBridgeWithContext
func (mr *MockMediaConnectAPIMockRecorder) DescribeBridgeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBridgeWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeBridgeWithContext), varargs...)
}

// DescribeFlow mocks base method
func (m *MockMediaConnectAPI) DescribeFlow(arg0 *mediaconnect.DescribeFlowInput) (*mediaconnect.DescribeFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.DescribeFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFlow indicates an expected call of DescribeFlow
func (mr *MockMediaConnectAPIMockRecorder) DescribeFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeFlow), arg0)
}

// DescribeFlowRequest mocks base method
func (m *MockMediaConnectAPI) DescribeFlowRequest(arg0 *mediaconnect.DescribeFlowInput) (*request.Request, *mediaconnect.DescribeFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DescribeFlowOutput)
	return ret0, ret1
}

// DescribeFlowRequest indicates an expected call of DescribeFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) DescribeFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeFlowRequest), arg0)
}

// DescribeFlowSourceMetadata mocks base method
func (m *MockMediaConnectAPI) DescribeFlowSourceMetadata(arg0 *mediaconnect.DescribeFlowSourceMetadataInput) (*mediaconnect.DescribeFlowSourceMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFlowSourceMetadata", arg0)
	ret0, _ := ret[0].(*mediaconnect.DescribeFlowSourceMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFlowSourceMetadata indicates an expected call of DescribeFlowSourceMetadata
func (mr *MockMediaConnectAPIMockRecorder) DescribeFlowSourceMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlowSourceMetadata", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeFlowSourceMetadata), arg0)
}

// DescribeFlowSourceMetadataRequest mocks base method
func (m *MockMediaConnectAPI) DescribeFlowSourceMetadataRequest(arg0 *mediaconnect.DescribeFlowSourceMetadataInput) (*request.Request, *mediaconnect.DescribeFlowSourceMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFlowSourceMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DescribeFlowSourceMetadataOutput)
	return ret0, ret1
}

// DescribeFlowSourceMetadataRequest indicates an expected call of DescribeFlowSourceMetadataRequest
func (mr *MockMediaConnectAPIMockRecorder) DescribeFlowSourceMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlowSourceMetadataRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeFlowSourceMetadataRequest), arg0)
}

// DescribeFlowSourceMetadataWithContext mocks base method
func (m *MockMediaConnectAPI) DescribeFlowSourceMetadataWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeFlowSourceMetadataInput, arg2 ...request.Option) (*mediaconnect.DescribeFlowSourceMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFlowSourceMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DescribeFlowSourceMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFlowSourceMetadataWithContext indicates an expected call of DescribeFlowSourceMetadataWithContext
func (mr *MockMediaConnectAPIMockRecorder) DescribeFlowSourceMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlowSourceMetadataWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeFlowSourceMetadataWithContext), varargs...)
}

// DescribeFlowWithContext mocks base method
func (m *MockMediaConnectAPI) DescribeFlowWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeFlowInput, arg2 ...request.Option) (*mediaconnect.DescribeFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DescribeFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFlowWithContext indicates an expected call of DescribeFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) DescribeFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeFlowWithContext), varargs...)
}

// DescribeGateway mocks base method
func (m *MockMediaConnectAPI) DescribeGateway(arg0 *mediaconnect.DescribeGatewayInput) (*mediaconnect.DescribeGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGateway", arg0)
	ret0, _ := ret[0].(*mediaconnect.DescribeGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGateway indicates an expected call of DescribeGateway
func (mr *MockMediaConnectAPIMockRecorder) DescribeGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGateway", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeGateway), arg0)
}

// DescribeGatewayInstance mocks base method
func (m *MockMediaConnectAPI) DescribeGatewayInstance(arg0 *mediaconnect.DescribeGatewayInstanceInput) (*mediaconnect.DescribeGatewayInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGatewayInstance", arg0)
	ret0, _ := ret[0].(*mediaconnect.DescribeGatewayInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGatewayInstance indicates an expected call of DescribeGatewayInstance
func (mr *MockMediaConnectAPIMockRecorder) DescribeGatewayInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGatewayInstance", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeGatewayInstance), arg0)
}

// DescribeGatewayInstanceRequest mocks base method
func (m *MockMediaConnectAPI) DescribeGatewayInstanceRequest(arg0 *mediaconnect.DescribeGatewayInstanceInput) (*request.Request, *mediaconnect.DescribeGatewayInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGatewayInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DescribeGatewayInstanceOutput)
	return ret0, ret1
}

// DescribeGatewayInstanceRequest indicates an expected call of DescribeGatewayInstanceRequest
func (mr *MockMediaConnectAPIMockRecorder) DescribeGatewayInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGatewayInstanceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeGatewayInstanceRequest), arg0)
}

// DescribeGatewayInstanceWithContext mocks base method
func (m *MockMediaConnectAPI) DescribeGatewayInstanceWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeGatewayInstanceInput, arg2 ...request.Option) (*mediaconnect.DescribeGatewayInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGatewayInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DescribeGatewayInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGatewayInstanceWithContext indicates an expected call of DescribeGatewayInstanceWithContext
func (mr *MockMediaConnectAPIMockRecorder) DescribeGatewayInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGatewayInstanceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeGatewayInstanceWithContext), varargs...)
}

// DescribeGatewayRequest mocks base method
func (m *MockMediaConnectAPI) DescribeGatewayRequest(arg0 *mediaconnect.DescribeGatewayInput) (*request.Request, *mediaconnect.DescribeGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DescribeGatewayOutput)
	return ret0, ret1
}

// DescribeGatewayRequest indicates an expected call of DescribeGatewayRequest
func (mr *MockMediaConnectAPIMockRecorder) DescribeGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGatewayRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeGatewayRequest), arg0)
}

// DescribeGatewayWithContext mocks base method
func (m *MockMediaConnectAPI) DescribeGatewayWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeGatewayInput, arg2 ...request.Option) (*mediaconnect.DescribeGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DescribeGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGatewayWithContext indicates an expected call of DescribeGatewayWithContext
func (mr *MockMediaConnectAPIMockRecorder) DescribeGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGatewayWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeGatewayWithContext), varargs...)
}

// DescribeOffering mocks base method
func (m *MockMediaConnectAPI) DescribeOffering(arg0 *mediaconnect.DescribeOfferingInput) (*mediaconnect.DescribeOfferingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOffering", arg0)
	ret0, _ := ret[0].(*mediaconnect.DescribeOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOffering indicates an expected call of DescribeOffering
func (mr *MockMediaConnectAPIMockRecorder) DescribeOffering(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOffering", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeOffering), arg0)
}

// DescribeOfferingRequest mocks base method
func (m *MockMediaConnectAPI) DescribeOfferingRequest(arg0 *mediaconnect.DescribeOfferingInput) (*request.Request, *mediaconnect.DescribeOfferingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOfferingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DescribeOfferingOutput)
	return ret0, ret1
}

// DescribeOfferingRequest indicates an expected call of DescribeOfferingRequest
func (mr *MockMediaConnectAPIMockRecorder) DescribeOfferingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOfferingRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeOfferingRequest), arg0)
}

// DescribeOfferingWithContext mocks base method
func (m *MockMediaConnectAPI) DescribeOfferingWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeOfferingInput, arg2 ...request.Option) (*mediaconnect.DescribeOfferingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOfferingWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DescribeOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOfferingWithContext indicates an expected call of DescribeOfferingWithContext
func (mr *MockMediaConnectAPIMockRecorder) DescribeOfferingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOfferingWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeOfferingWithContext), varargs...)
}

// DescribeReservation mocks base method
func (m *MockMediaConnectAPI) DescribeReservation(arg0 *mediaconnect.DescribeReservationInput) (*mediaconnect.DescribeReservationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReservation", arg0)
	ret0, _ := ret[0].(*mediaconnect.DescribeReservationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservation indicates an expected call of DescribeReservation
func (mr *MockMediaConnectAPIMockRecorder) DescribeReservation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservation", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeReservation), arg0)
}

// DescribeReservationRequest mocks base method
func (m *MockMediaConnectAPI) DescribeReservationRequest(arg0 *mediaconnect.DescribeReservationInput) (*request.Request, *mediaconnect.DescribeReservationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReservationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.DescribeReservationOutput)
	return ret0, ret1
}

// DescribeReservationRequest indicates an expected call of DescribeReservationRequest
func (mr *MockMediaConnectAPIMockRecorder) DescribeReservationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservationRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeReservationRequest), arg0)
}

// DescribeReservationWithContext mocks base method
func (m *MockMediaConnectAPI) DescribeReservationWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeReservationInput, arg2 ...request.Option) (*mediaconnect.DescribeReservationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservationWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.DescribeReservationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservationWithContext indicates an expected call of DescribeReservationWithContext
func (mr *MockMediaConnectAPIMockRecorder) DescribeReservationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservationWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).DescribeReservationWithContext), varargs...)
}

// GrantFlowEntitlements mocks base method
func (m *MockMediaConnectAPI) GrantFlowEntitlements(arg0 *mediaconnect.GrantFlowEntitlementsInput) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantFlowEntitlements", arg0)
	ret0, _ := ret[0].(*mediaconnect.GrantFlowEntitlementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantFlowEntitlements indicates an expected call of GrantFlowEntitlements
func (mr *MockMediaConnectAPIMockRecorder) GrantFlowEntitlements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantFlowEntitlements", reflect.TypeOf((*MockMediaConnectAPI)(nil).GrantFlowEntitlements), arg0)
}

// GrantFlowEntitlementsRequest mocks base method
func (m *MockMediaConnectAPI) GrantFlowEntitlementsRequest(arg0 *mediaconnect.GrantFlowEntitlementsInput) (*request.Request, *mediaconnect.GrantFlowEntitlementsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantFlowEntitlementsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.GrantFlowEntitlementsOutput)
	return ret0, ret1
}

// GrantFlowEntitlementsRequest indicates an expected call of GrantFlowEntitlementsRequest
func (mr *MockMediaConnectAPIMockRecorder) GrantFlowEntitlementsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantFlowEntitlementsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).GrantFlowEntitlementsRequest), arg0)
}

// GrantFlowEntitlementsWithContext mocks base method
func (m *MockMediaConnectAPI) GrantFlowEntitlementsWithContext(arg0 context.Context, arg1 *mediaconnect.GrantFlowEntitlementsInput, arg2 ...request.Option) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantFlowEntitlementsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.GrantFlowEntitlementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantFlowEntitlementsWithContext indicates an expected call of GrantFlowEntitlementsWithContext
func (mr *MockMediaConnectAPIMockRecorder) GrantFlowEntitlementsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantFlowEntitlementsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).GrantFlowEntitlementsWithContext), varargs...)
}

// ListBridges mocks base method
func (m *MockMediaConnectAPI) ListBridges(arg0 *mediaconnect.ListBridgesInput) (*mediaconnect.ListBridgesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBridges", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListBridgesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBridges indicates an expected call of ListBridges
func (mr *MockMediaConnectAPIMockRecorder) ListBridges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBridges", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListBridges), arg0)
}

// ListBridgesPages mocks base method
func (m *MockMediaConnectAPI) ListBridgesPages(arg0 *mediaconnect.ListBridgesInput, arg1 func(*mediaconnect.ListBridgesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBridgesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBridgesPages indicates an expected call of ListBridgesPages
func (mr *MockMediaConnectAPIMockRecorder) ListBridgesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBridgesPages", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListBridgesPages), arg0, arg1)
}

// ListBridgesPagesWithContext mocks base method
func (m *MockMediaConnectAPI) ListBridgesPagesWithContext(arg0 context.Context, arg1 *mediaconnect.ListBridgesInput, arg2 func(*mediaconnect.ListBridgesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBridgesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBridgesPagesWithContext indicates an expected call of ListBridgesPagesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListBridgesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBridgesPagesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListBridgesPagesWithContext), varargs...)
}

// ListBridgesRequest mocks base method
func (m *MockMediaConnectAPI) ListBridgesRequest(arg0 *mediaconnect.ListBridgesInput) (*request.Request, *mediaconnect.ListBridgesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBridgesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListBridgesOutput)
	return ret0, ret1
}

// ListBridgesRequest indicates an expected call of ListBridgesRequest
func (mr *MockMediaConnectAPIMockRecorder) ListBridgesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBridgesRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListBridgesRequest), arg0)
}

// ListBridgesWithContext mocks base method
func (m *MockMediaConnectAPI) ListBridgesWithContext(arg0 context.Context, arg1 *mediaconnect.ListBridgesInput, arg2 ...request.Option) (*mediaconnect.ListBridgesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBridgesWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListBridgesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBridgesWithContext indicates an expected call of ListBridgesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListBridgesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBridgesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListBridgesWithContext), varargs...)
}

// ListEntitlements mocks base method
func (m *MockMediaConnectAPI) ListEntitlements(arg0 *mediaconnect.ListEntitlementsInput) (*mediaconnect.ListEntitlementsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitlements", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListEntitlementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntitlements indicates an expected call of ListEntitlements
func (mr *MockMediaConnectAPIMockRecorder) ListEntitlements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitlements", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListEntitlements), arg0)
}

// ListEntitlementsPages mocks base method
func (m *MockMediaConnectAPI) ListEntitlementsPages(arg0 *mediaconnect.ListEntitlementsInput, arg1 func(*mediaconnect.ListEntitlementsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitlementsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEntitlementsPages indicates an expected call of ListEntitlementsPages
func (mr *MockMediaConnectAPIMockRecorder) ListEntitlementsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitlementsPages", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListEntitlementsPages), arg0, arg1)
}

// ListEntitlementsPagesWithContext mocks base method
func (m *MockMediaConnectAPI) ListEntitlementsPagesWithContext(arg0 context.Context, arg1 *mediaconnect.ListEntitlementsInput, arg2 func(*mediaconnect.ListEntitlementsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntitlementsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEntitlementsPagesWithContext indicates an expected call of ListEntitlementsPagesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListEntitlementsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitlementsPagesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListEntitlementsPagesWithContext), varargs...)
}

// ListEntitlementsRequest mocks base method
func (m *MockMediaConnectAPI) ListEntitlementsRequest(arg0 *mediaconnect.ListEntitlementsInput) (*request.Request, *mediaconnect.ListEntitlementsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitlementsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListEntitlementsOutput)
	return ret0, ret1
}

// ListEntitlementsRequest indicates an expected call of ListEntitlementsRequest
func (mr *MockMediaConnectAPIMockRecorder) ListEntitlementsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitlementsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListEntitlementsRequest), arg0)
}

// ListEntitlementsWithContext mocks base method
func (m *MockMediaConnectAPI) ListEntitlementsWithContext(arg0 context.Context, arg1 *mediaconnect.ListEntitlementsInput, arg2 ...request.Option) (*mediaconnect.ListEntitlementsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntitlementsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListEntitlementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntitlementsWithContext indicates an expected call of ListEntitlementsWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListEntitlementsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitlementsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListEntitlementsWithContext), varargs...)
}

// ListFlows mocks base method
func (m *MockMediaConnectAPI) ListFlows(arg0 *mediaconnect.ListFlowsInput) (*mediaconnect.ListFlowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlows", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListFlowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlows indicates an expected call of ListFlows
func (mr *MockMediaConnectAPIMockRecorder) ListFlows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlows", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListFlows), arg0)
}

// ListFlowsPages mocks base method
func (m *MockMediaConnectAPI) ListFlowsPages(arg0 *mediaconnect.ListFlowsInput, arg1 func(*mediaconnect.ListFlowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlowsPages indicates an expected call of ListFlowsPages
func (mr *MockMediaConnectAPIMockRecorder) ListFlowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsPages", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListFlowsPages), arg0, arg1)
}

// ListFlowsPagesWithContext mocks base method
func (m *MockMediaConnectAPI) ListFlowsPagesWithContext(arg0 context.Context, arg1 *mediaconnect.ListFlowsInput, arg2 func(*mediaconnect.ListFlowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlowsPagesWithContext indicates an expected call of ListFlowsPagesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListFlowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsPagesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListFlowsPagesWithContext), varargs...)
}

// ListFlowsRequest mocks base method
func (m *MockMediaConnectAPI) ListFlowsRequest(arg0 *mediaconnect.ListFlowsInput) (*request.Request, *mediaconnect.ListFlowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListFlowsOutput)
	return ret0, ret1
}

// ListFlowsRequest indicates an expected call of ListFlowsRequest
func (mr *MockMediaConnectAPIMockRecorder) ListFlowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListFlowsRequest), arg0)
}

// ListFlowsWithContext mocks base method
func (m *MockMediaConnectAPI) ListFlowsWithContext(arg0 context.Context, arg1 *mediaconnect.ListFlowsInput, arg2 ...request.Option) (*mediaconnect.ListFlowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListFlowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlowsWithContext indicates an expected call of ListFlowsWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListFlowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListFlowsWithContext), varargs...)
}

// ListGatewayInstances mocks base method
func (m *MockMediaConnectAPI) ListGatewayInstances(arg0 *mediaconnect.ListGatewayInstancesInput) (*mediaconnect.ListGatewayInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGatewayInstances", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListGatewayInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGatewayInstances indicates an expected call of ListGatewayInstances
func (mr *MockMediaConnectAPIMockRecorder) ListGatewayInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewayInstances", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListGatewayInstances), arg0)
}

// ListGatewayInstancesPages mocks base method
func (m *MockMediaConnectAPI) ListGatewayInstancesPages(arg0 *mediaconnect.ListGatewayInstancesInput, arg1 func(*mediaconnect.ListGatewayInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGatewayInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGatewayInstancesPages indicates an expected call of ListGatewayInstancesPages
func (mr *MockMediaConnectAPIMockRecorder) ListGatewayInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewayInstancesPages", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListGatewayInstancesPages), arg0, arg1)
}

// ListGatewayInstancesPagesWithContext mocks base method
func (m *MockMediaConnectAPI) ListGatewayInstancesPagesWithContext(arg0 context.Context, arg1 *mediaconnect.ListGatewayInstancesInput, arg2 func(*mediaconnect.ListGatewayInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGatewayInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGatewayInstancesPagesWithContext indicates an expected call of ListGatewayInstancesPagesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListGatewayInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewayInstancesPagesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListGatewayInstancesPagesWithContext), varargs...)
}

// ListGatewayInstancesRequest mocks base method
func (m *MockMediaConnectAPI) ListGatewayInstancesRequest(arg0 *mediaconnect.ListGatewayInstancesInput) (*request.Request, *mediaconnect.ListGatewayInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGatewayInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListGatewayInstancesOutput)
	return ret0, ret1
}

// ListGatewayInstancesRequest indicates an expected call of ListGatewayInstancesRequest
func (mr *MockMediaConnectAPIMockRecorder) ListGatewayInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewayInstancesRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListGatewayInstancesRequest), arg0)
}

// ListGatewayInstancesWithContext mocks base method
func (m *MockMediaConnectAPI) ListGatewayInstancesWithContext(arg0 context.Context, arg1 *mediaconnect.ListGatewayInstancesInput, arg2 ...request.Option) (*mediaconnect.ListGatewayInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGatewayInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListGatewayInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGatewayInstancesWithContext indicates an expected call of ListGatewayInstancesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListGatewayInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewayInstancesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListGatewayInstancesWithContext), varargs...)
}

// ListGateways mocks base method
func (m *MockMediaConnectAPI) ListGateways(arg0 *mediaconnect.ListGatewaysInput) (*mediaconnect.ListGatewaysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGateways", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGateways indicates an expected call of ListGateways
func (mr *MockMediaConnectAPIMockRecorder) ListGateways(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGateways", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListGateways), arg0)
}

// ListGatewaysPages mocks base method
func (m *MockMediaConnectAPI) ListGatewaysPages(arg0 *mediaconnect.ListGatewaysInput, arg1 func(*mediaconnect.ListGatewaysOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGatewaysPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGatewaysPages indicates an expected call of ListGatewaysPages
func (mr *MockMediaConnectAPIMockRecorder) ListGatewaysPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewaysPages", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListGatewaysPages), arg0, arg1)
}

// ListGatewaysPagesWithContext mocks base method
func (m *MockMediaConnectAPI) ListGatewaysPagesWithContext(arg0 context.Context, arg1 *mediaconnect.ListGatewaysInput, arg2 func(*mediaconnect.ListGatewaysOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGatewaysPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGatewaysPagesWithContext indicates an expected call of ListGatewaysPagesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListGatewaysPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewaysPagesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListGatewaysPagesWithContext), varargs...)
}

// ListGatewaysRequest mocks base method
func (m *MockMediaConnectAPI) ListGatewaysRequest(arg0 *mediaconnect.ListGatewaysInput) (*request.Request, *mediaconnect.ListGatewaysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGatewaysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListGatewaysOutput)
	return ret0, ret1
}

// ListGatewaysRequest indicates an expected call of ListGatewaysRequest
func (mr *MockMediaConnectAPIMockRecorder) ListGatewaysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewaysRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListGatewaysRequest), arg0)
}

// ListGatewaysWithContext mocks base method
func (m *MockMediaConnectAPI) ListGatewaysWithContext(arg0 context.Context, arg1 *mediaconnect.ListGatewaysInput, arg2 ...request.Option) (*mediaconnect.ListGatewaysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGatewaysWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGatewaysWithContext indicates an expected call of ListGatewaysWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListGatewaysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewaysWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListGatewaysWithContext), varargs...)
}

// ListOfferings mocks base method
func (m *MockMediaConnectAPI) ListOfferings(arg0 *mediaconnect.ListOfferingsInput) (*mediaconnect.ListOfferingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfferings", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfferings indicates an expected call of ListOfferings
func (mr *MockMediaConnectAPIMockRecorder) ListOfferings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfferings", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListOfferings), arg0)
}

// ListOfferingsPages mocks base method
func (m *MockMediaConnectAPI) ListOfferingsPages(arg0 *mediaconnect.ListOfferingsInput, arg1 func(*mediaconnect.ListOfferingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfferingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOfferingsPages indicates an expected call of ListOfferingsPages
func (mr *MockMediaConnectAPIMockRecorder) ListOfferingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfferingsPages", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListOfferingsPages), arg0, arg1)
}

// ListOfferingsPagesWithContext mocks base method
func (m *MockMediaConnectAPI) ListOfferingsPagesWithContext(arg0 context.Context, arg1 *mediaconnect.ListOfferingsInput, arg2 func(*mediaconnect.ListOfferingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOfferingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOfferingsPagesWithContext indicates an expected call of ListOfferingsPagesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListOfferingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfferingsPagesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListOfferingsPagesWithContext), varargs...)
}

// ListOfferingsRequest mocks base method
func (m *MockMediaConnectAPI) ListOfferingsRequest(arg0 *mediaconnect.ListOfferingsInput) (*request.Request, *mediaconnect.ListOfferingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfferingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListOfferingsOutput)
	return ret0, ret1
}

// ListOfferingsRequest indicates an expected call of ListOfferingsRequest
func (mr *MockMediaConnectAPIMockRecorder) ListOfferingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfferingsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListOfferingsRequest), arg0)
}

// ListOfferingsWithContext mocks base method
func (m *MockMediaConnectAPI) ListOfferingsWithContext(arg0 context.Context, arg1 *mediaconnect.ListOfferingsInput, arg2 ...request.Option) (*mediaconnect.ListOfferingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOfferingsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfferingsWithContext indicates an expected call of ListOfferingsWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListOfferingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfferingsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListOfferingsWithContext), varargs...)
}

// ListReservations mocks base method
func (m *MockMediaConnectAPI) ListReservations(arg0 *mediaconnect.ListReservationsInput) (*mediaconnect.ListReservationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReservations", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListReservationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReservations indicates an expected call of ListReservations
func (mr *MockMediaConnectAPIMockRecorder) ListReservations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservations", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListReservations), arg0)
}

// ListReservationsPages mocks base method
func (m *MockMediaConnectAPI) ListReservationsPages(arg0 *mediaconnect.ListReservationsInput, arg1 func(*mediaconnect.ListReservationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReservationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReservationsPages indicates an expected call of ListReservationsPages
func (mr *MockMediaConnectAPIMockRecorder) ListReservationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservationsPages", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListReservationsPages), arg0, arg1)
}

// ListReservationsPagesWithContext mocks base method
func (m *MockMediaConnectAPI) ListReservationsPagesWithContext(arg0 context.Context, arg1 *mediaconnect.ListReservationsInput, arg2 func(*mediaconnect.ListReservationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReservationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReservationsPagesWithContext indicates an expected call of ListReservationsPagesWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListReservationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservationsPagesWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListReservationsPagesWithContext), varargs...)
}

// ListReservationsRequest mocks base method
func (m *MockMediaConnectAPI) ListReservationsRequest(arg0 *mediaconnect.ListReservationsInput) (*request.Request, *mediaconnect.ListReservationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReservationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListReservationsOutput)
	return ret0, ret1
}

// ListReservationsRequest indicates an expected call of ListReservationsRequest
func (mr *MockMediaConnectAPIMockRecorder) ListReservationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservationsRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListReservationsRequest), arg0)
}

// ListReservationsWithContext mocks base method
func (m *MockMediaConnectAPI) ListReservationsWithContext(arg0 context.Context, arg1 *mediaconnect.ListReservationsInput, arg2 ...request.Option) (*mediaconnect.ListReservationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReservationsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListReservationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReservationsWithContext indicates an expected call of ListReservationsWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListReservationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservationsWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListReservationsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockMediaConnectAPI) ListTagsForResource(arg0 *mediaconnect.ListTagsForResourceInput) (*mediaconnect.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*mediaconnect.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockMediaConnectAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockMediaConnectAPI) ListTagsForResourceRequest(arg0 *mediaconnect.ListTagsForResourceInput) (*request.Request, *mediaconnect.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockMediaConnectAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockMediaConnectAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *mediaconnect.ListTagsForResourceInput, arg2 ...request.Option) (*mediaconnect.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PurchaseOffering mocks base method
func (m *MockMediaConnectAPI) PurchaseOffering(arg0 *mediaconnect.PurchaseOfferingInput) (*mediaconnect.PurchaseOfferingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseOffering", arg0)
	ret0, _ := ret[0].(*mediaconnect.PurchaseOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurchaseOffering indicates an expected call of PurchaseOffering
func (mr *MockMediaConnectAPIMockRecorder) PurchaseOffering(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseOffering", reflect.TypeOf((*MockMediaConnectAPI)(nil).PurchaseOffering), arg0)
}

// PurchaseOfferingRequest mocks base method
func (m *MockMediaConnectAPI) PurchaseOfferingRequest(arg0 *mediaconnect.PurchaseOfferingInput) (*request.Request, *mediaconnect.PurchaseOfferingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseOfferingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.PurchaseOfferingOutput)
	return ret0, ret1
}

// PurchaseOfferingRequest indicates an expected call of PurchaseOfferingRequest
func (mr *MockMediaConnectAPIMockRecorder) PurchaseOfferingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseOfferingRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).PurchaseOfferingRequest), arg0)
}

// PurchaseOfferingWithContext mocks base method
func (m *MockMediaConnectAPI) PurchaseOfferingWithContext(arg0 context.Context, arg1 *mediaconnect.PurchaseOfferingInput, arg2 ...request.Option) (*mediaconnect.PurchaseOfferingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PurchaseOfferingWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.PurchaseOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurchaseOfferingWithContext indicates an expected call of PurchaseOfferingWithContext
func (mr *MockMediaConnectAPIMockRecorder) PurchaseOfferingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseOfferingWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).PurchaseOfferingWithContext), varargs...)
}

// RemoveBridgeOutput mocks base method
func (m *MockMediaConnectAPI) RemoveBridgeOutput(arg0 *mediaconnect.RemoveBridgeOutputInput) (*mediaconnect.RemoveBridgeOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBridgeOutput", arg0)
	ret0, _ := ret[0].(*mediaconnect.RemoveBridgeOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBridgeOutput indicates an expected call of RemoveBridgeOutput
func (mr *MockMediaConnectAPIMockRecorder) RemoveBridgeOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBridgeOutput", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveBridgeOutput), arg0)
}

// RemoveBridgeOutputRequest mocks base method
func (m *MockMediaConnectAPI) RemoveBridgeOutputRequest(arg0 *mediaconnect.RemoveBridgeOutputInput) (*request.Request, *mediaconnect.RemoveBridgeOutputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBridgeOutputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.RemoveBridgeOutputOutput)
	return ret0, ret1
}

// RemoveBridgeOutputRequest indicates an expected call of RemoveBridgeOutputRequest
func (mr *MockMediaConnectAPIMockRecorder) RemoveBridgeOutputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBridgeOutputRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveBridgeOutputRequest), arg0)
}

// RemoveBridgeOutputWithContext mocks base method
func (m *MockMediaConnectAPI) RemoveBridgeOutputWithContext(arg0 context.Context, arg1 *mediaconnect.RemoveBridgeOutputInput, arg2 ...request.Option) (*mediaconnect.RemoveBridgeOutputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBridgeOutputWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.RemoveBridgeOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBridgeOutputWithContext indicates an expected call of RemoveBridgeOutputWithContext
func (mr *MockMediaConnectAPIMockRecorder) RemoveBridgeOutputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBridgeOutputWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveBridgeOutputWithContext), varargs...)
}

// RemoveBridgeSource mocks base method
func (m *MockMediaConnectAPI) RemoveBridgeSource(arg0 *mediaconnect.RemoveBridgeSourceInput) (*mediaconnect.RemoveBridgeSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBridgeSource", arg0)
	ret0, _ := ret[0].(*mediaconnect.RemoveBridgeSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBridgeSource indicates an expected call of RemoveBridgeSource
func (mr *MockMediaConnectAPIMockRecorder) RemoveBridgeSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBridgeSource", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveBridgeSource), arg0)
}

// RemoveBridgeSourceRequest mocks base method
func (m *MockMediaConnectAPI) RemoveBridgeSourceRequest(arg0 *mediaconnect.RemoveBridgeSourceInput) (*request.Request, *mediaconnect.RemoveBridgeSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBridgeSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.RemoveBridgeSourceOutput)
	return ret0, ret1
}

// RemoveBridgeSourceRequest indicates an expected call of RemoveBridgeSourceRequest
func (mr *MockMediaConnectAPIMockRecorder) RemoveBridgeSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBridgeSourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveBridgeSourceRequest), arg0)
}

// RemoveBridgeSourceWithContext mocks base method
func (m *MockMediaConnectAPI) RemoveBridgeSourceWithContext(arg0 context.Context, arg1 *mediaconnect.RemoveBridgeSourceInput, arg2 ...request.Option) (*mediaconnect.RemoveBridgeSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBridgeSourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.RemoveBridgeSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBridgeSourceWithContext indicates an expected call of RemoveBridgeSourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) RemoveBridgeSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBridgeSourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveBridgeSourceWithContext), varargs...)
}

// RemoveFlowMediaStream mocks base method
func (m *MockMediaConnectAPI) RemoveFlowMediaStream(arg0 *mediaconnect.RemoveFlowMediaStreamInput) (*mediaconnect.RemoveFlowMediaStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFlowMediaStream", arg0)
	ret0, _ := ret[0].(*mediaconnect.RemoveFlowMediaStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFlowMediaStream indicates an expected call of RemoveFlowMediaStream
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowMediaStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowMediaStream", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowMediaStream), arg0)
}

// RemoveFlowMediaStreamRequest mocks base method
func (m *MockMediaConnectAPI) RemoveFlowMediaStreamRequest(arg0 *mediaconnect.RemoveFlowMediaStreamInput) (*request.Request, *mediaconnect.RemoveFlowMediaStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFlowMediaStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.RemoveFlowMediaStreamOutput)
	return ret0, ret1
}

// RemoveFlowMediaStreamRequest indicates an expected call of RemoveFlowMediaStreamRequest
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowMediaStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowMediaStreamRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowMediaStreamRequest), arg0)
}

// RemoveFlowMediaStreamWithContext mocks base method
func (m *MockMediaConnectAPI) RemoveFlowMediaStreamWithContext(arg0 context.Context, arg1 *mediaconnect.RemoveFlowMediaStreamInput, arg2 ...request.Option) (*mediaconnect.RemoveFlowMediaStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFlowMediaStreamWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.RemoveFlowMediaStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFlowMediaStreamWithContext indicates an expected call of RemoveFlowMediaStreamWithContext
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowMediaStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowMediaStreamWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowMediaStreamWithContext), varargs...)
}

// RemoveFlowOutput mocks base method
func (m *MockMediaConnectAPI) RemoveFlowOutput(arg0 *mediaconnect.RemoveFlowOutputInput) (*mediaconnect.RemoveFlowOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFlowOutput", arg0)
	ret0, _ := ret[0].(*mediaconnect.RemoveFlowOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFlowOutput indicates an expected call of RemoveFlowOutput
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowOutput", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowOutput), arg0)
}

// RemoveFlowOutputRequest mocks base method
func (m *MockMediaConnectAPI) RemoveFlowOutputRequest(arg0 *mediaconnect.RemoveFlowOutputInput) (*request.Request, *mediaconnect.RemoveFlowOutputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFlowOutputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.RemoveFlowOutputOutput)
	return ret0, ret1
}

// RemoveFlowOutputRequest indicates an expected call of RemoveFlowOutputRequest
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowOutputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowOutputRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowOutputRequest), arg0)
}

// RemoveFlowOutputWithContext mocks base method
func (m *MockMediaConnectAPI) RemoveFlowOutputWithContext(arg0 context.Context, arg1 *mediaconnect.RemoveFlowOutputInput, arg2 ...request.Option) (*mediaconnect.RemoveFlowOutputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFlowOutputWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.RemoveFlowOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFlowOutputWithContext indicates an expected call of RemoveFlowOutputWithContext
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowOutputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowOutputWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowOutputWithContext), varargs...)
}

// RemoveFlowSource mocks base method
func (m *MockMediaConnectAPI) RemoveFlowSource(arg0 *mediaconnect.RemoveFlowSourceInput) (*mediaconnect.RemoveFlowSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFlowSource", arg0)
	ret0, _ := ret[0].(*mediaconnect.RemoveFlowSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFlowSource indicates an expected call of RemoveFlowSource
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowSource", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowSource), arg0)
}

// RemoveFlowSourceRequest mocks base method
func (m *MockMediaConnectAPI) RemoveFlowSourceRequest(arg0 *mediaconnect.RemoveFlowSourceInput) (*request.Request, *mediaconnect.RemoveFlowSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFlowSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.RemoveFlowSourceOutput)
	return ret0, ret1
}

// RemoveFlowSourceRequest indicates an expected call of RemoveFlowSourceRequest
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowSourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowSourceRequest), arg0)
}

// RemoveFlowSourceWithContext mocks base method
func (m *MockMediaConnectAPI) RemoveFlowSourceWithContext(arg0 context.Context, arg1 *mediaconnect.RemoveFlowSourceInput, arg2 ...request.Option) (*mediaconnect.RemoveFlowSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFlowSourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.RemoveFlowSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFlowSourceWithContext indicates an expected call of RemoveFlowSourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowSourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowSourceWithContext), varargs...)
}

// RemoveFlowVpcInterface mocks base method
func (m *MockMediaConnectAPI) RemoveFlowVpcInterface(arg0 *mediaconnect.RemoveFlowVpcInterfaceInput) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFlowVpcInterface", arg0)
	ret0, _ := ret[0].(*mediaconnect.RemoveFlowVpcInterfaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFlowVpcInterface indicates an expected call of RemoveFlowVpcInterface
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowVpcInterface(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowVpcInterface", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowVpcInterface), arg0)
}

// RemoveFlowVpcInterfaceRequest mocks base method
func (m *MockMediaConnectAPI) RemoveFlowVpcInterfaceRequest(arg0 *mediaconnect.RemoveFlowVpcInterfaceInput) (*request.Request, *mediaconnect.RemoveFlowVpcInterfaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFlowVpcInterfaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.RemoveFlowVpcInterfaceOutput)
	return ret0, ret1
}

// RemoveFlowVpcInterfaceRequest indicates an expected call of RemoveFlowVpcInterfaceRequest
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowVpcInterfaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowVpcInterfaceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowVpcInterfaceRequest), arg0)
}

// RemoveFlowVpcInterfaceWithContext mocks base method
func (m *MockMediaConnectAPI) RemoveFlowVpcInterfaceWithContext(arg0 context.Context, arg1 *mediaconnect.RemoveFlowVpcInterfaceInput, arg2 ...request.Option) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFlowVpcInterfaceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.RemoveFlowVpcInterfaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFlowVpcInterfaceWithContext indicates an expected call of RemoveFlowVpcInterfaceWithContext
func (mr *MockMediaConnectAPIMockRecorder) RemoveFlowVpcInterfaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFlowVpcInterfaceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).RemoveFlowVpcInterfaceWithContext), varargs...)
}

// RevokeFlowEntitlement mocks base method
func (m *MockMediaConnectAPI) RevokeFlowEntitlement(arg0 *mediaconnect.RevokeFlowEntitlementInput) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeFlowEntitlement", arg0)
	ret0, _ := ret[0].(*mediaconnect.RevokeFlowEntitlementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeFlowEntitlement indicates an expected call of RevokeFlowEntitlement
func (mr *MockMediaConnectAPIMockRecorder) RevokeFlowEntitlement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeFlowEntitlement", reflect.TypeOf((*MockMediaConnectAPI)(nil).RevokeFlowEntitlement), arg0)
}

// RevokeFlowEntitlementRequest mocks base method
func (m *MockMediaConnectAPI) RevokeFlowEntitlementRequest(arg0 *mediaconnect.RevokeFlowEntitlementInput) (*request.Request, *mediaconnect.RevokeFlowEntitlementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeFlowEntitlementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.RevokeFlowEntitlementOutput)
	return ret0, ret1
}

// RevokeFlowEntitlementRequest indicates an expected call of RevokeFlowEntitlementRequest
func (mr *MockMediaConnectAPIMockRecorder) RevokeFlowEntitlementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeFlowEntitlementRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).RevokeFlowEntitlementRequest), arg0)
}

// RevokeFlowEntitlementWithContext mocks base method
func (m *MockMediaConnectAPI) RevokeFlowEntitlementWithContext(arg0 context.Context, arg1 *mediaconnect.RevokeFlowEntitlementInput, arg2 ...request.Option) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeFlowEntitlementWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.RevokeFlowEntitlementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeFlowEntitlementWithContext indicates an expected call of RevokeFlowEntitlementWithContext
func (mr *MockMediaConnectAPIMockRecorder) RevokeFlowEntitlementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeFlowEntitlementWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).RevokeFlowEntitlementWithContext), varargs...)
}

// StartFlow mocks base method
func (m *MockMediaConnectAPI) StartFlow(arg0 *mediaconnect.StartFlowInput) (*mediaconnect.StartFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.StartFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFlow indicates an expected call of StartFlow
func (mr *MockMediaConnectAPIMockRecorder) StartFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).StartFlow), arg0)
}

// StartFlowRequest mocks base method
func (m *MockMediaConnectAPI) StartFlowRequest(arg0 *mediaconnect.StartFlowInput) (*request.Request, *mediaconnect.StartFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.StartFlowOutput)
	return ret0, ret1
}

// StartFlowRequest indicates an expected call of StartFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) StartFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).StartFlowRequest), arg0)
}

// StartFlowWithContext mocks base method
func (m *MockMediaConnectAPI) StartFlowWithContext(arg0 context.Context, arg1 *mediaconnect.StartFlowInput, arg2 ...request.Option) (*mediaconnect.StartFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.StartFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFlowWithContext indicates an expected call of StartFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) StartFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).StartFlowWithContext), varargs...)
}

// StopFlow mocks base method
func (m *MockMediaConnectAPI) StopFlow(arg0 *mediaconnect.StopFlowInput) (*mediaconnect.StopFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.StopFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopFlow indicates an expected call of StopFlow
func (mr *MockMediaConnectAPIMockRecorder) StopFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).StopFlow), arg0)
}

// StopFlowRequest mocks base method
func (m *MockMediaConnectAPI) StopFlowRequest(arg0 *mediaconnect.StopFlowInput) (*request.Request, *mediaconnect.StopFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.StopFlowOutput)
	return ret0, ret1
}

// StopFlowRequest indicates an expected call of StopFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) StopFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).StopFlowRequest), arg0)
}

// StopFlowWithContext mocks base method
func (m *MockMediaConnectAPI) StopFlowWithContext(arg0 context.Context, arg1 *mediaconnect.StopFlowInput, arg2 ...request.Option) (*mediaconnect.StopFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.StopFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopFlowWithContext indicates an expected call of StopFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) StopFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).StopFlowWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockMediaConnectAPI) TagResource(arg0 *mediaconnect.TagResourceInput) (*mediaconnect.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*mediaconnect.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockMediaConnectAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMediaConnectAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockMediaConnectAPI) TagResourceRequest(arg0 *mediaconnect.TagResourceInput) (*request.Request, *mediaconnect.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockMediaConnectAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockMediaConnectAPI) TagResourceWithContext(arg0 context.Context, arg1 *mediaconnect.TagResourceInput, arg2 ...request.Option) (*mediaconnect.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockMediaConnectAPI) UntagResource(arg0 *mediaconnect.UntagResourceInput) (*mediaconnect.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*mediaconnect.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockMediaConnectAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMediaConnectAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockMediaConnectAPI) UntagResourceRequest(arg0 *mediaconnect.UntagResourceInput) (*request.Request, *mediaconnect.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockMediaConnectAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockMediaConnectAPI) UntagResourceWithContext(arg0 context.Context, arg1 *mediaconnect.UntagResourceInput, arg2 ...request.Option) (*mediaconnect.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateBridge mocks base method
func (m *MockMediaConnectAPI) UpdateBridge(arg0 *mediaconnect.UpdateBridgeInput) (*mediaconnect.UpdateBridgeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBridge", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateBridgeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBridge indicates an expected call of UpdateBridge
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridge", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridge), arg0)
}

// UpdateBridgeOutput mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeOutput(arg0 *mediaconnect.UpdateBridgeOutputInput) (*mediaconnect.UpdateBridgeOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBridgeOutput", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateBridgeOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBridgeOutput indicates an expected call of UpdateBridgeOutput
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeOutput", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeOutput), arg0)
}

// UpdateBridgeOutputRequest mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeOutputRequest(arg0 *mediaconnect.UpdateBridgeOutputInput) (*request.Request, *mediaconnect.UpdateBridgeOutputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBridgeOutputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateBridgeOutputOutput)
	return ret0, ret1
}

// UpdateBridgeOutputRequest indicates an expected call of UpdateBridgeOutputRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeOutputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeOutputRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeOutputRequest), arg0)
}

// UpdateBridgeOutputWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeOutputWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateBridgeOutputInput, arg2 ...request.Option) (*mediaconnect.UpdateBridgeOutputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBridgeOutputWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateBridgeOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBridgeOutputWithContext indicates an expected call of UpdateBridgeOutputWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeOutputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeOutputWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeOutputWithContext), varargs...)
}

// UpdateBridgeRequest mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeRequest(arg0 *mediaconnect.UpdateBridgeInput) (*request.Request, *mediaconnect.UpdateBridgeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBridgeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateBridgeOutput)
	return ret0, ret1
}

// UpdateBridgeRequest indicates an expected call of UpdateBridgeRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeRequest), arg0)
}

// UpdateBridgeSource mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeSource(arg0 *mediaconnect.UpdateBridgeSourceInput) (*mediaconnect.UpdateBridgeSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBridgeSource", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateBridgeSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBridgeSource indicates an expected call of UpdateBridgeSource
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeSource", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeSource), arg0)
}

// UpdateBridgeSourceRequest mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeSourceRequest(arg0 *mediaconnect.UpdateBridgeSourceInput) (*request.Request, *mediaconnect.UpdateBridgeSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBridgeSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateBridgeSourceOutput)
	return ret0, ret1
}

// UpdateBridgeSourceRequest indicates an expected call of UpdateBridgeSourceRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeSourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeSourceRequest), arg0)
}

// UpdateBridgeSourceWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeSourceWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateBridgeSourceInput, arg2 ...request.Option) (*mediaconnect.UpdateBridgeSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBridgeSourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateBridgeSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBridgeSourceWithContext indicates an expected call of UpdateBridgeSourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeSourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeSourceWithContext), varargs...)
}

// UpdateBridgeState mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeState(arg0 *mediaconnect.UpdateBridgeStateInput) (*mediaconnect.UpdateBridgeStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBridgeState", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateBridgeStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBridgeState indicates an expected call of UpdateBridgeState
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeState", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeState), arg0)
}

// UpdateBridgeStateRequest mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeStateRequest(arg0 *mediaconnect.UpdateBridgeStateInput) (*request.Request, *mediaconnect.UpdateBridgeStateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBridgeStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateBridgeStateOutput)
	return ret0, ret1
}

// UpdateBridgeStateRequest indicates an expected call of UpdateBridgeStateRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeStateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeStateRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeStateRequest), arg0)
}

// UpdateBridgeStateWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeStateWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateBridgeStateInput, arg2 ...request.Option) (*mediaconnect.UpdateBridgeStateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBridgeStateWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateBridgeStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBridgeStateWithContext indicates an expected call of UpdateBridgeStateWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeStateWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeStateWithContext), varargs...)
}

// UpdateBridgeWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateBridgeWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateBridgeInput, arg2 ...request.Option) (*mediaconnect.UpdateBridgeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBridgeWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateBridgeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBridgeWithContext indicates an expected call of UpdateBridgeWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateBridgeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateBridgeWithContext), varargs...)
}

// UpdateFlow mocks base method
func (m *MockMediaConnectAPI) UpdateFlow(arg0 *mediaconnect.UpdateFlowInput) (*mediaconnect.UpdateFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlow", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlow indicates an expected call of UpdateFlow
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlow", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlow), arg0)
}

// UpdateFlowEntitlement mocks base method
func (m *MockMediaConnectAPI) UpdateFlowEntitlement(arg0 *mediaconnect.UpdateFlowEntitlementInput) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowEntitlement", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowEntitlementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowEntitlement indicates an expected call of UpdateFlowEntitlement
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowEntitlement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowEntitlement", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowEntitlement), arg0)
}

// UpdateFlowEntitlementRequest mocks base method
func (m *MockMediaConnectAPI) UpdateFlowEntitlementRequest(arg0 *mediaconnect.UpdateFlowEntitlementInput) (*request.Request, *mediaconnect.UpdateFlowEntitlementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowEntitlementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateFlowEntitlementOutput)
	return ret0, ret1
}

// UpdateFlowEntitlementRequest indicates an expected call of UpdateFlowEntitlementRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowEntitlementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowEntitlementRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowEntitlementRequest), arg0)
}

// UpdateFlowEntitlementWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateFlowEntitlementWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateFlowEntitlementInput, arg2 ...request.Option) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlowEntitlementWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowEntitlementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowEntitlementWithContext indicates an expected call of UpdateFlowEntitlementWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowEntitlementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowEntitlementWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowEntitlementWithContext), varargs...)
}

// UpdateFlowMediaStream mocks base method
func (m *MockMediaConnectAPI) UpdateFlowMediaStream(arg0 *mediaconnect.UpdateFlowMediaStreamInput) (*mediaconnect.UpdateFlowMediaStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowMediaStream", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowMediaStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowMediaStream indicates an expected call of UpdateFlowMediaStream
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowMediaStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowMediaStream", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowMediaStream), arg0)
}

// UpdateFlowMediaStreamRequest mocks base method
func (m *MockMediaConnectAPI) UpdateFlowMediaStreamRequest(arg0 *mediaconnect.UpdateFlowMediaStreamInput) (*request.Request, *mediaconnect.UpdateFlowMediaStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowMediaStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateFlowMediaStreamOutput)
	return ret0, ret1
}

// UpdateFlowMediaStreamRequest indicates an expected call of UpdateFlowMediaStreamRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowMediaStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowMediaStreamRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowMediaStreamRequest), arg0)
}

// UpdateFlowMediaStreamWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateFlowMediaStreamWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateFlowMediaStreamInput, arg2 ...request.Option) (*mediaconnect.UpdateFlowMediaStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlowMediaStreamWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowMediaStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowMediaStreamWithContext indicates an expected call of UpdateFlowMediaStreamWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowMediaStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowMediaStreamWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowMediaStreamWithContext), varargs...)
}

// UpdateFlowOutput mocks base method
func (m *MockMediaConnectAPI) UpdateFlowOutput(arg0 *mediaconnect.UpdateFlowOutputInput) (*mediaconnect.UpdateFlowOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowOutput", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowOutput indicates an expected call of UpdateFlowOutput
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowOutput", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowOutput), arg0)
}

// UpdateFlowOutputRequest mocks base method
func (m *MockMediaConnectAPI) UpdateFlowOutputRequest(arg0 *mediaconnect.UpdateFlowOutputInput) (*request.Request, *mediaconnect.UpdateFlowOutputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowOutputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateFlowOutputOutput)
	return ret0, ret1
}

// UpdateFlowOutputRequest indicates an expected call of UpdateFlowOutputRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowOutputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowOutputRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowOutputRequest), arg0)
}

// UpdateFlowOutputWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateFlowOutputWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateFlowOutputInput, arg2 ...request.Option) (*mediaconnect.UpdateFlowOutputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlowOutputWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowOutputWithContext indicates an expected call of UpdateFlowOutputWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowOutputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowOutputWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowOutputWithContext), varargs...)
}

// UpdateFlowRequest mocks base method
func (m *MockMediaConnectAPI) UpdateFlowRequest(arg0 *mediaconnect.UpdateFlowInput) (*request.Request, *mediaconnect.UpdateFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateFlowOutput)
	return ret0, ret1
}

// UpdateFlowRequest indicates an expected call of UpdateFlowRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowRequest), arg0)
}

// UpdateFlowSource mocks base method
func (m *MockMediaConnectAPI) UpdateFlowSource(arg0 *mediaconnect.UpdateFlowSourceInput) (*mediaconnect.UpdateFlowSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowSource", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowSource indicates an expected call of UpdateFlowSource
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowSource", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowSource), arg0)
}

// UpdateFlowSourceRequest mocks base method
func (m *MockMediaConnectAPI) UpdateFlowSourceRequest(arg0 *mediaconnect.UpdateFlowSourceInput) (*request.Request, *mediaconnect.UpdateFlowSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateFlowSourceOutput)
	return ret0, ret1
}

// UpdateFlowSourceRequest indicates an expected call of UpdateFlowSourceRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowSourceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowSourceRequest), arg0)
}

// UpdateFlowSourceWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateFlowSourceWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateFlowSourceInput, arg2 ...request.Option) (*mediaconnect.UpdateFlowSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlowSourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowSourceWithContext indicates an expected call of UpdateFlowSourceWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowSourceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowSourceWithContext), varargs...)
}

// UpdateFlowWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateFlowWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateFlowInput, arg2 ...request.Option) (*mediaconnect.UpdateFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlowWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowWithContext indicates an expected call of UpdateFlowWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateFlowWithContext), varargs...)
}

// UpdateGatewayInstance mocks base method
func (m *MockMediaConnectAPI) UpdateGatewayInstance(arg0 *mediaconnect.UpdateGatewayInstanceInput) (*mediaconnect.UpdateGatewayInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGatewayInstance", arg0)
	ret0, _ := ret[0].(*mediaconnect.UpdateGatewayInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGatewayInstance indicates an expected call of UpdateGatewayInstance
func (mr *MockMediaConnectAPIMockRecorder) UpdateGatewayInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayInstance", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateGatewayInstance), arg0)
}

// UpdateGatewayInstanceRequest mocks base method
func (m *MockMediaConnectAPI) UpdateGatewayInstanceRequest(arg0 *mediaconnect.UpdateGatewayInstanceInput) (*request.Request, *mediaconnect.UpdateGatewayInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGatewayInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconnect.UpdateGatewayInstanceOutput)
	return ret0, ret1
}

// UpdateGatewayInstanceRequest indicates an expected call of UpdateGatewayInstanceRequest
func (mr *MockMediaConnectAPIMockRecorder) UpdateGatewayInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayInstanceRequest", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateGatewayInstanceRequest), arg0)
}

// UpdateGatewayInstanceWithContext mocks base method
func (m *MockMediaConnectAPI) UpdateGatewayInstanceWithContext(arg0 context.Context, arg1 *mediaconnect.UpdateGatewayInstanceInput, arg2 ...request.Option) (*mediaconnect.UpdateGatewayInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconnect.UpdateGatewayInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGatewayInstanceWithContext indicates an expected call of UpdateGatewayInstanceWithContext
func (mr *MockMediaConnectAPIMockRecorder) UpdateGatewayInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayInstanceWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).UpdateGatewayInstanceWithContext), varargs...)
}

// WaitUntilFlowActive mocks base method
func (m *MockMediaConnectAPI) WaitUntilFlowActive(arg0 *mediaconnect.DescribeFlowInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilFlowActive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFlowActive indicates an expected call of WaitUntilFlowActive
func (mr *MockMediaConnectAPIMockRecorder) WaitUntilFlowActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFlowActive", reflect.TypeOf((*MockMediaConnectAPI)(nil).WaitUntilFlowActive), arg0)
}

// WaitUntilFlowActiveWithContext mocks base method
func (m *MockMediaConnectAPI) WaitUntilFlowActiveWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeFlowInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilFlowActiveWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFlowActiveWithContext indicates an expected call of WaitUntilFlowActiveWithContext
func (mr *MockMediaConnectAPIMockRecorder) WaitUntilFlowActiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFlowActiveWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).WaitUntilFlowActiveWithContext), varargs...)
}

// WaitUntilFlowDeleted mocks base method
func (m *MockMediaConnectAPI) WaitUntilFlowDeleted(arg0 *mediaconnect.DescribeFlowInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilFlowDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFlowDeleted indicates an expected call of WaitUntilFlowDeleted
func (mr *MockMediaConnectAPIMockRecorder) WaitUntilFlowDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFlowDeleted", reflect.TypeOf((*MockMediaConnectAPI)(nil).WaitUntilFlowDeleted), arg0)
}

// WaitUntilFlowDeletedWithContext mocks base method
func (m *MockMediaConnectAPI) WaitUntilFlowDeletedWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeFlowInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilFlowDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFlowDeletedWithContext indicates an expected call of WaitUntilFlowDeletedWithContext
func (mr *MockMediaConnectAPIMockRecorder) WaitUntilFlowDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFlowDeletedWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).WaitUntilFlowDeletedWithContext), varargs...)
}

// WaitUntilFlowStandby mocks base method
func (m *MockMediaConnectAPI) WaitUntilFlowStandby(arg0 *mediaconnect.DescribeFlowInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilFlowStandby", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFlowStandby indicates an expected call of WaitUntilFlowStandby
func (mr *MockMediaConnectAPIMockRecorder) WaitUntilFlowStandby(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFlowStandby", reflect.TypeOf((*MockMediaConnectAPI)(nil).WaitUntilFlowStandby), arg0)
}

// WaitUntilFlowStandbyWithContext mocks base method
func (m *MockMediaConnectAPI) WaitUntilFlowStandbyWithContext(arg0 context.Context, arg1 *mediaconnect.DescribeFlowInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilFlowStandbyWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFlowStandbyWithContext indicates an expected call of WaitUntilFlowStandbyWithContext
func (mr *MockMediaConnectAPIMockRecorder) WaitUntilFlowStandbyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFlowStandbyWithContext", reflect.TypeOf((*MockMediaConnectAPI)(nil).WaitUntilFlowStandbyWithContext), varargs...)
}
