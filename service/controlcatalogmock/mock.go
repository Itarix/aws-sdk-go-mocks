// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/controlcatalog/controlcatalogiface (interfaces: ControlCatalogAPI)

// Package controlcatalogmock is a generated GoMock package.
package controlcatalogmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	controlcatalog "github.com/aws/aws-sdk-go/service/controlcatalog"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockControlCatalogAPI is a mock of ControlCatalogAPI interface
type MockControlCatalogAPI struct {
	ctrl     *gomock.Controller
	recorder *MockControlCatalogAPIMockRecorder
}

// MockControlCatalogAPIMockRecorder is the mock recorder for MockControlCatalogAPI
type MockControlCatalogAPIMockRecorder struct {
	mock *MockControlCatalogAPI
}

// NewMockControlCatalogAPI creates a new mock instance
func NewMockControlCatalogAPI(ctrl *gomock.Controller) *MockControlCatalogAPI {
	mock := &MockControlCatalogAPI{ctrl: ctrl}
	mock.recorder = &MockControlCatalogAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockControlCatalogAPI) EXPECT() *MockControlCatalogAPIMockRecorder {
	return m.recorder
}

// ListCommonControls mocks base method
func (m *MockControlCatalogAPI) ListCommonControls(arg0 *controlcatalog.ListCommonControlsInput) (*controlcatalog.ListCommonControlsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommonControls", arg0)
	ret0, _ := ret[0].(*controlcatalog.ListCommonControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommonControls indicates an expected call of ListCommonControls
func (mr *MockControlCatalogAPIMockRecorder) ListCommonControls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommonControls", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListCommonControls), arg0)
}

// ListCommonControlsPages mocks base method
func (m *MockControlCatalogAPI) ListCommonControlsPages(arg0 *controlcatalog.ListCommonControlsInput, arg1 func(*controlcatalog.ListCommonControlsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommonControlsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCommonControlsPages indicates an expected call of ListCommonControlsPages
func (mr *MockControlCatalogAPIMockRecorder) ListCommonControlsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommonControlsPages", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListCommonControlsPages), arg0, arg1)
}

// ListCommonControlsPagesWithContext mocks base method
func (m *MockControlCatalogAPI) ListCommonControlsPagesWithContext(arg0 context.Context, arg1 *controlcatalog.ListCommonControlsInput, arg2 func(*controlcatalog.ListCommonControlsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommonControlsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCommonControlsPagesWithContext indicates an expected call of ListCommonControlsPagesWithContext
func (mr *MockControlCatalogAPIMockRecorder) ListCommonControlsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommonControlsPagesWithContext", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListCommonControlsPagesWithContext), varargs...)
}

// ListCommonControlsRequest mocks base method
func (m *MockControlCatalogAPI) ListCommonControlsRequest(arg0 *controlcatalog.ListCommonControlsInput) (*request.Request, *controlcatalog.ListCommonControlsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommonControlsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controlcatalog.ListCommonControlsOutput)
	return ret0, ret1
}

// ListCommonControlsRequest indicates an expected call of ListCommonControlsRequest
func (mr *MockControlCatalogAPIMockRecorder) ListCommonControlsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommonControlsRequest", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListCommonControlsRequest), arg0)
}

// ListCommonControlsWithContext mocks base method
func (m *MockControlCatalogAPI) ListCommonControlsWithContext(arg0 context.Context, arg1 *controlcatalog.ListCommonControlsInput, arg2 ...request.Option) (*controlcatalog.ListCommonControlsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommonControlsWithContext", varargs...)
	ret0, _ := ret[0].(*controlcatalog.ListCommonControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommonControlsWithContext indicates an expected call of ListCommonControlsWithContext
func (mr *MockControlCatalogAPIMockRecorder) ListCommonControlsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommonControlsWithContext", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListCommonControlsWithContext), varargs...)
}

// ListDomains mocks base method
func (m *MockControlCatalogAPI) ListDomains(arg0 *controlcatalog.ListDomainsInput) (*controlcatalog.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", arg0)
	ret0, _ := ret[0].(*controlcatalog.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains
func (mr *MockControlCatalogAPIMockRecorder) ListDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListDomains), arg0)
}

// ListDomainsPages mocks base method
func (m *MockControlCatalogAPI) ListDomainsPages(arg0 *controlcatalog.ListDomainsInput, arg1 func(*controlcatalog.ListDomainsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsPages indicates an expected call of ListDomainsPages
func (mr *MockControlCatalogAPIMockRecorder) ListDomainsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsPages", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListDomainsPages), arg0, arg1)
}

// ListDomainsPagesWithContext mocks base method
func (m *MockControlCatalogAPI) ListDomainsPagesWithContext(arg0 context.Context, arg1 *controlcatalog.ListDomainsInput, arg2 func(*controlcatalog.ListDomainsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsPagesWithContext indicates an expected call of ListDomainsPagesWithContext
func (mr *MockControlCatalogAPIMockRecorder) ListDomainsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsPagesWithContext", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListDomainsPagesWithContext), varargs...)
}

// ListDomainsRequest mocks base method
func (m *MockControlCatalogAPI) ListDomainsRequest(arg0 *controlcatalog.ListDomainsInput) (*request.Request, *controlcatalog.ListDomainsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controlcatalog.ListDomainsOutput)
	return ret0, ret1
}

// ListDomainsRequest indicates an expected call of ListDomainsRequest
func (mr *MockControlCatalogAPIMockRecorder) ListDomainsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsRequest", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListDomainsRequest), arg0)
}

// ListDomainsWithContext mocks base method
func (m *MockControlCatalogAPI) ListDomainsWithContext(arg0 context.Context, arg1 *controlcatalog.ListDomainsInput, arg2 ...request.Option) (*controlcatalog.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsWithContext", varargs...)
	ret0, _ := ret[0].(*controlcatalog.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainsWithContext indicates an expected call of ListDomainsWithContext
func (mr *MockControlCatalogAPIMockRecorder) ListDomainsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsWithContext", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListDomainsWithContext), varargs...)
}

// ListObjectives mocks base method
func (m *MockControlCatalogAPI) ListObjectives(arg0 *controlcatalog.ListObjectivesInput) (*controlcatalog.ListObjectivesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectives", arg0)
	ret0, _ := ret[0].(*controlcatalog.ListObjectivesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectives indicates an expected call of ListObjectives
func (mr *MockControlCatalogAPIMockRecorder) ListObjectives(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectives", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListObjectives), arg0)
}

// ListObjectivesPages mocks base method
func (m *MockControlCatalogAPI) ListObjectivesPages(arg0 *controlcatalog.ListObjectivesInput, arg1 func(*controlcatalog.ListObjectivesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectivesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectivesPages indicates an expected call of ListObjectivesPages
func (mr *MockControlCatalogAPIMockRecorder) ListObjectivesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectivesPages", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListObjectivesPages), arg0, arg1)
}

// ListObjectivesPagesWithContext mocks base method
func (m *MockControlCatalogAPI) ListObjectivesPagesWithContext(arg0 context.Context, arg1 *controlcatalog.ListObjectivesInput, arg2 func(*controlcatalog.ListObjectivesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectivesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectivesPagesWithContext indicates an expected call of ListObjectivesPagesWithContext
func (mr *MockControlCatalogAPIMockRecorder) ListObjectivesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectivesPagesWithContext", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListObjectivesPagesWithContext), varargs...)
}

// ListObjectivesRequest mocks base method
func (m *MockControlCatalogAPI) ListObjectivesRequest(arg0 *controlcatalog.ListObjectivesInput) (*request.Request, *controlcatalog.ListObjectivesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectivesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*controlcatalog.ListObjectivesOutput)
	return ret0, ret1
}

// ListObjectivesRequest indicates an expected call of ListObjectivesRequest
func (mr *MockControlCatalogAPIMockRecorder) ListObjectivesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectivesRequest", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListObjectivesRequest), arg0)
}

// ListObjectivesWithContext mocks base method
func (m *MockControlCatalogAPI) ListObjectivesWithContext(arg0 context.Context, arg1 *controlcatalog.ListObjectivesInput, arg2 ...request.Option) (*controlcatalog.ListObjectivesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectivesWithContext", varargs...)
	ret0, _ := ret[0].(*controlcatalog.ListObjectivesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectivesWithContext indicates an expected call of ListObjectivesWithContext
func (mr *MockControlCatalogAPIMockRecorder) ListObjectivesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectivesWithContext", reflect.TypeOf((*MockControlCatalogAPI)(nil).ListObjectivesWithContext), varargs...)
}
