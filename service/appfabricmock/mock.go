// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/appfabric/appfabriciface (interfaces: AppFabricAPI)

// Package appfabricmock is a generated GoMock package.
package appfabricmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	appfabric "github.com/aws/aws-sdk-go/service/appfabric"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAppFabricAPI is a mock of AppFabricAPI interface
type MockAppFabricAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAppFabricAPIMockRecorder
}

// MockAppFabricAPIMockRecorder is the mock recorder for MockAppFabricAPI
type MockAppFabricAPIMockRecorder struct {
	mock *MockAppFabricAPI
}

// NewMockAppFabricAPI creates a new mock instance
func NewMockAppFabricAPI(ctrl *gomock.Controller) *MockAppFabricAPI {
	mock := &MockAppFabricAPI{ctrl: ctrl}
	mock.recorder = &MockAppFabricAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppFabricAPI) EXPECT() *MockAppFabricAPIMockRecorder {
	return m.recorder
}

// BatchGetUserAccessTasks mocks base method
func (m *MockAppFabricAPI) BatchGetUserAccessTasks(arg0 *appfabric.BatchGetUserAccessTasksInput) (*appfabric.BatchGetUserAccessTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetUserAccessTasks", arg0)
	ret0, _ := ret[0].(*appfabric.BatchGetUserAccessTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetUserAccessTasks indicates an expected call of BatchGetUserAccessTasks
func (mr *MockAppFabricAPIMockRecorder) BatchGetUserAccessTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetUserAccessTasks", reflect.TypeOf((*MockAppFabricAPI)(nil).BatchGetUserAccessTasks), arg0)
}

// BatchGetUserAccessTasksRequest mocks base method
func (m *MockAppFabricAPI) BatchGetUserAccessTasksRequest(arg0 *appfabric.BatchGetUserAccessTasksInput) (*request.Request, *appfabric.BatchGetUserAccessTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetUserAccessTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.BatchGetUserAccessTasksOutput)
	return ret0, ret1
}

// BatchGetUserAccessTasksRequest indicates an expected call of BatchGetUserAccessTasksRequest
func (mr *MockAppFabricAPIMockRecorder) BatchGetUserAccessTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetUserAccessTasksRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).BatchGetUserAccessTasksRequest), arg0)
}

// BatchGetUserAccessTasksWithContext mocks base method
func (m *MockAppFabricAPI) BatchGetUserAccessTasksWithContext(arg0 context.Context, arg1 *appfabric.BatchGetUserAccessTasksInput, arg2 ...request.Option) (*appfabric.BatchGetUserAccessTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetUserAccessTasksWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.BatchGetUserAccessTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetUserAccessTasksWithContext indicates an expected call of BatchGetUserAccessTasksWithContext
func (mr *MockAppFabricAPIMockRecorder) BatchGetUserAccessTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetUserAccessTasksWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).BatchGetUserAccessTasksWithContext), varargs...)
}

// ConnectAppAuthorization mocks base method
func (m *MockAppFabricAPI) ConnectAppAuthorization(arg0 *appfabric.ConnectAppAuthorizationInput) (*appfabric.ConnectAppAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectAppAuthorization", arg0)
	ret0, _ := ret[0].(*appfabric.ConnectAppAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectAppAuthorization indicates an expected call of ConnectAppAuthorization
func (mr *MockAppFabricAPIMockRecorder) ConnectAppAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectAppAuthorization", reflect.TypeOf((*MockAppFabricAPI)(nil).ConnectAppAuthorization), arg0)
}

// ConnectAppAuthorizationRequest mocks base method
func (m *MockAppFabricAPI) ConnectAppAuthorizationRequest(arg0 *appfabric.ConnectAppAuthorizationInput) (*request.Request, *appfabric.ConnectAppAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectAppAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.ConnectAppAuthorizationOutput)
	return ret0, ret1
}

// ConnectAppAuthorizationRequest indicates an expected call of ConnectAppAuthorizationRequest
func (mr *MockAppFabricAPIMockRecorder) ConnectAppAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectAppAuthorizationRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).ConnectAppAuthorizationRequest), arg0)
}

// ConnectAppAuthorizationWithContext mocks base method
func (m *MockAppFabricAPI) ConnectAppAuthorizationWithContext(arg0 context.Context, arg1 *appfabric.ConnectAppAuthorizationInput, arg2 ...request.Option) (*appfabric.ConnectAppAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectAppAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.ConnectAppAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectAppAuthorizationWithContext indicates an expected call of ConnectAppAuthorizationWithContext
func (mr *MockAppFabricAPIMockRecorder) ConnectAppAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectAppAuthorizationWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).ConnectAppAuthorizationWithContext), varargs...)
}

// CreateAppAuthorization mocks base method
func (m *MockAppFabricAPI) CreateAppAuthorization(arg0 *appfabric.CreateAppAuthorizationInput) (*appfabric.CreateAppAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppAuthorization", arg0)
	ret0, _ := ret[0].(*appfabric.CreateAppAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppAuthorization indicates an expected call of CreateAppAuthorization
func (mr *MockAppFabricAPIMockRecorder) CreateAppAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppAuthorization", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateAppAuthorization), arg0)
}

// CreateAppAuthorizationRequest mocks base method
func (m *MockAppFabricAPI) CreateAppAuthorizationRequest(arg0 *appfabric.CreateAppAuthorizationInput) (*request.Request, *appfabric.CreateAppAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.CreateAppAuthorizationOutput)
	return ret0, ret1
}

// CreateAppAuthorizationRequest indicates an expected call of CreateAppAuthorizationRequest
func (mr *MockAppFabricAPIMockRecorder) CreateAppAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppAuthorizationRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateAppAuthorizationRequest), arg0)
}

// CreateAppAuthorizationWithContext mocks base method
func (m *MockAppFabricAPI) CreateAppAuthorizationWithContext(arg0 context.Context, arg1 *appfabric.CreateAppAuthorizationInput, arg2 ...request.Option) (*appfabric.CreateAppAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.CreateAppAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppAuthorizationWithContext indicates an expected call of CreateAppAuthorizationWithContext
func (mr *MockAppFabricAPIMockRecorder) CreateAppAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppAuthorizationWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateAppAuthorizationWithContext), varargs...)
}

// CreateAppBundle mocks base method
func (m *MockAppFabricAPI) CreateAppBundle(arg0 *appfabric.CreateAppBundleInput) (*appfabric.CreateAppBundleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppBundle", arg0)
	ret0, _ := ret[0].(*appfabric.CreateAppBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppBundle indicates an expected call of CreateAppBundle
func (mr *MockAppFabricAPIMockRecorder) CreateAppBundle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppBundle", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateAppBundle), arg0)
}

// CreateAppBundleRequest mocks base method
func (m *MockAppFabricAPI) CreateAppBundleRequest(arg0 *appfabric.CreateAppBundleInput) (*request.Request, *appfabric.CreateAppBundleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppBundleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.CreateAppBundleOutput)
	return ret0, ret1
}

// CreateAppBundleRequest indicates an expected call of CreateAppBundleRequest
func (mr *MockAppFabricAPIMockRecorder) CreateAppBundleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppBundleRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateAppBundleRequest), arg0)
}

// CreateAppBundleWithContext mocks base method
func (m *MockAppFabricAPI) CreateAppBundleWithContext(arg0 context.Context, arg1 *appfabric.CreateAppBundleInput, arg2 ...request.Option) (*appfabric.CreateAppBundleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppBundleWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.CreateAppBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppBundleWithContext indicates an expected call of CreateAppBundleWithContext
func (mr *MockAppFabricAPIMockRecorder) CreateAppBundleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppBundleWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateAppBundleWithContext), varargs...)
}

// CreateIngestion mocks base method
func (m *MockAppFabricAPI) CreateIngestion(arg0 *appfabric.CreateIngestionInput) (*appfabric.CreateIngestionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngestion", arg0)
	ret0, _ := ret[0].(*appfabric.CreateIngestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngestion indicates an expected call of CreateIngestion
func (mr *MockAppFabricAPIMockRecorder) CreateIngestion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngestion", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateIngestion), arg0)
}

// CreateIngestionDestination mocks base method
func (m *MockAppFabricAPI) CreateIngestionDestination(arg0 *appfabric.CreateIngestionDestinationInput) (*appfabric.CreateIngestionDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngestionDestination", arg0)
	ret0, _ := ret[0].(*appfabric.CreateIngestionDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngestionDestination indicates an expected call of CreateIngestionDestination
func (mr *MockAppFabricAPIMockRecorder) CreateIngestionDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngestionDestination", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateIngestionDestination), arg0)
}

// CreateIngestionDestinationRequest mocks base method
func (m *MockAppFabricAPI) CreateIngestionDestinationRequest(arg0 *appfabric.CreateIngestionDestinationInput) (*request.Request, *appfabric.CreateIngestionDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngestionDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.CreateIngestionDestinationOutput)
	return ret0, ret1
}

// CreateIngestionDestinationRequest indicates an expected call of CreateIngestionDestinationRequest
func (mr *MockAppFabricAPIMockRecorder) CreateIngestionDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngestionDestinationRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateIngestionDestinationRequest), arg0)
}

// CreateIngestionDestinationWithContext mocks base method
func (m *MockAppFabricAPI) CreateIngestionDestinationWithContext(arg0 context.Context, arg1 *appfabric.CreateIngestionDestinationInput, arg2 ...request.Option) (*appfabric.CreateIngestionDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIngestionDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.CreateIngestionDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngestionDestinationWithContext indicates an expected call of CreateIngestionDestinationWithContext
func (mr *MockAppFabricAPIMockRecorder) CreateIngestionDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngestionDestinationWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateIngestionDestinationWithContext), varargs...)
}

// CreateIngestionRequest mocks base method
func (m *MockAppFabricAPI) CreateIngestionRequest(arg0 *appfabric.CreateIngestionInput) (*request.Request, *appfabric.CreateIngestionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngestionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.CreateIngestionOutput)
	return ret0, ret1
}

// CreateIngestionRequest indicates an expected call of CreateIngestionRequest
func (mr *MockAppFabricAPIMockRecorder) CreateIngestionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngestionRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateIngestionRequest), arg0)
}

// CreateIngestionWithContext mocks base method
func (m *MockAppFabricAPI) CreateIngestionWithContext(arg0 context.Context, arg1 *appfabric.CreateIngestionInput, arg2 ...request.Option) (*appfabric.CreateIngestionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIngestionWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.CreateIngestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngestionWithContext indicates an expected call of CreateIngestionWithContext
func (mr *MockAppFabricAPIMockRecorder) CreateIngestionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngestionWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).CreateIngestionWithContext), varargs...)
}

// DeleteAppAuthorization mocks base method
func (m *MockAppFabricAPI) DeleteAppAuthorization(arg0 *appfabric.DeleteAppAuthorizationInput) (*appfabric.DeleteAppAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppAuthorization", arg0)
	ret0, _ := ret[0].(*appfabric.DeleteAppAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppAuthorization indicates an expected call of DeleteAppAuthorization
func (mr *MockAppFabricAPIMockRecorder) DeleteAppAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppAuthorization", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteAppAuthorization), arg0)
}

// DeleteAppAuthorizationRequest mocks base method
func (m *MockAppFabricAPI) DeleteAppAuthorizationRequest(arg0 *appfabric.DeleteAppAuthorizationInput) (*request.Request, *appfabric.DeleteAppAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.DeleteAppAuthorizationOutput)
	return ret0, ret1
}

// DeleteAppAuthorizationRequest indicates an expected call of DeleteAppAuthorizationRequest
func (mr *MockAppFabricAPIMockRecorder) DeleteAppAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppAuthorizationRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteAppAuthorizationRequest), arg0)
}

// DeleteAppAuthorizationWithContext mocks base method
func (m *MockAppFabricAPI) DeleteAppAuthorizationWithContext(arg0 context.Context, arg1 *appfabric.DeleteAppAuthorizationInput, arg2 ...request.Option) (*appfabric.DeleteAppAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.DeleteAppAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppAuthorizationWithContext indicates an expected call of DeleteAppAuthorizationWithContext
func (mr *MockAppFabricAPIMockRecorder) DeleteAppAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppAuthorizationWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteAppAuthorizationWithContext), varargs...)
}

// DeleteAppBundle mocks base method
func (m *MockAppFabricAPI) DeleteAppBundle(arg0 *appfabric.DeleteAppBundleInput) (*appfabric.DeleteAppBundleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppBundle", arg0)
	ret0, _ := ret[0].(*appfabric.DeleteAppBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppBundle indicates an expected call of DeleteAppBundle
func (mr *MockAppFabricAPIMockRecorder) DeleteAppBundle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppBundle", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteAppBundle), arg0)
}

// DeleteAppBundleRequest mocks base method
func (m *MockAppFabricAPI) DeleteAppBundleRequest(arg0 *appfabric.DeleteAppBundleInput) (*request.Request, *appfabric.DeleteAppBundleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppBundleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.DeleteAppBundleOutput)
	return ret0, ret1
}

// DeleteAppBundleRequest indicates an expected call of DeleteAppBundleRequest
func (mr *MockAppFabricAPIMockRecorder) DeleteAppBundleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppBundleRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteAppBundleRequest), arg0)
}

// DeleteAppBundleWithContext mocks base method
func (m *MockAppFabricAPI) DeleteAppBundleWithContext(arg0 context.Context, arg1 *appfabric.DeleteAppBundleInput, arg2 ...request.Option) (*appfabric.DeleteAppBundleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppBundleWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.DeleteAppBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppBundleWithContext indicates an expected call of DeleteAppBundleWithContext
func (mr *MockAppFabricAPIMockRecorder) DeleteAppBundleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppBundleWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteAppBundleWithContext), varargs...)
}

// DeleteIngestion mocks base method
func (m *MockAppFabricAPI) DeleteIngestion(arg0 *appfabric.DeleteIngestionInput) (*appfabric.DeleteIngestionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngestion", arg0)
	ret0, _ := ret[0].(*appfabric.DeleteIngestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIngestion indicates an expected call of DeleteIngestion
func (mr *MockAppFabricAPIMockRecorder) DeleteIngestion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngestion", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteIngestion), arg0)
}

// DeleteIngestionDestination mocks base method
func (m *MockAppFabricAPI) DeleteIngestionDestination(arg0 *appfabric.DeleteIngestionDestinationInput) (*appfabric.DeleteIngestionDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngestionDestination", arg0)
	ret0, _ := ret[0].(*appfabric.DeleteIngestionDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIngestionDestination indicates an expected call of DeleteIngestionDestination
func (mr *MockAppFabricAPIMockRecorder) DeleteIngestionDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngestionDestination", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteIngestionDestination), arg0)
}

// DeleteIngestionDestinationRequest mocks base method
func (m *MockAppFabricAPI) DeleteIngestionDestinationRequest(arg0 *appfabric.DeleteIngestionDestinationInput) (*request.Request, *appfabric.DeleteIngestionDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngestionDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.DeleteIngestionDestinationOutput)
	return ret0, ret1
}

// DeleteIngestionDestinationRequest indicates an expected call of DeleteIngestionDestinationRequest
func (mr *MockAppFabricAPIMockRecorder) DeleteIngestionDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngestionDestinationRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteIngestionDestinationRequest), arg0)
}

// DeleteIngestionDestinationWithContext mocks base method
func (m *MockAppFabricAPI) DeleteIngestionDestinationWithContext(arg0 context.Context, arg1 *appfabric.DeleteIngestionDestinationInput, arg2 ...request.Option) (*appfabric.DeleteIngestionDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIngestionDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.DeleteIngestionDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIngestionDestinationWithContext indicates an expected call of DeleteIngestionDestinationWithContext
func (mr *MockAppFabricAPIMockRecorder) DeleteIngestionDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngestionDestinationWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteIngestionDestinationWithContext), varargs...)
}

// DeleteIngestionRequest mocks base method
func (m *MockAppFabricAPI) DeleteIngestionRequest(arg0 *appfabric.DeleteIngestionInput) (*request.Request, *appfabric.DeleteIngestionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngestionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.DeleteIngestionOutput)
	return ret0, ret1
}

// DeleteIngestionRequest indicates an expected call of DeleteIngestionRequest
func (mr *MockAppFabricAPIMockRecorder) DeleteIngestionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngestionRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteIngestionRequest), arg0)
}

// DeleteIngestionWithContext mocks base method
func (m *MockAppFabricAPI) DeleteIngestionWithContext(arg0 context.Context, arg1 *appfabric.DeleteIngestionInput, arg2 ...request.Option) (*appfabric.DeleteIngestionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIngestionWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.DeleteIngestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIngestionWithContext indicates an expected call of DeleteIngestionWithContext
func (mr *MockAppFabricAPIMockRecorder) DeleteIngestionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngestionWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).DeleteIngestionWithContext), varargs...)
}

// GetAppAuthorization mocks base method
func (m *MockAppFabricAPI) GetAppAuthorization(arg0 *appfabric.GetAppAuthorizationInput) (*appfabric.GetAppAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppAuthorization", arg0)
	ret0, _ := ret[0].(*appfabric.GetAppAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppAuthorization indicates an expected call of GetAppAuthorization
func (mr *MockAppFabricAPIMockRecorder) GetAppAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppAuthorization", reflect.TypeOf((*MockAppFabricAPI)(nil).GetAppAuthorization), arg0)
}

// GetAppAuthorizationRequest mocks base method
func (m *MockAppFabricAPI) GetAppAuthorizationRequest(arg0 *appfabric.GetAppAuthorizationInput) (*request.Request, *appfabric.GetAppAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.GetAppAuthorizationOutput)
	return ret0, ret1
}

// GetAppAuthorizationRequest indicates an expected call of GetAppAuthorizationRequest
func (mr *MockAppFabricAPIMockRecorder) GetAppAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppAuthorizationRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).GetAppAuthorizationRequest), arg0)
}

// GetAppAuthorizationWithContext mocks base method
func (m *MockAppFabricAPI) GetAppAuthorizationWithContext(arg0 context.Context, arg1 *appfabric.GetAppAuthorizationInput, arg2 ...request.Option) (*appfabric.GetAppAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.GetAppAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppAuthorizationWithContext indicates an expected call of GetAppAuthorizationWithContext
func (mr *MockAppFabricAPIMockRecorder) GetAppAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppAuthorizationWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).GetAppAuthorizationWithContext), varargs...)
}

// GetAppBundle mocks base method
func (m *MockAppFabricAPI) GetAppBundle(arg0 *appfabric.GetAppBundleInput) (*appfabric.GetAppBundleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppBundle", arg0)
	ret0, _ := ret[0].(*appfabric.GetAppBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppBundle indicates an expected call of GetAppBundle
func (mr *MockAppFabricAPIMockRecorder) GetAppBundle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppBundle", reflect.TypeOf((*MockAppFabricAPI)(nil).GetAppBundle), arg0)
}

// GetAppBundleRequest mocks base method
func (m *MockAppFabricAPI) GetAppBundleRequest(arg0 *appfabric.GetAppBundleInput) (*request.Request, *appfabric.GetAppBundleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppBundleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.GetAppBundleOutput)
	return ret0, ret1
}

// GetAppBundleRequest indicates an expected call of GetAppBundleRequest
func (mr *MockAppFabricAPIMockRecorder) GetAppBundleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppBundleRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).GetAppBundleRequest), arg0)
}

// GetAppBundleWithContext mocks base method
func (m *MockAppFabricAPI) GetAppBundleWithContext(arg0 context.Context, arg1 *appfabric.GetAppBundleInput, arg2 ...request.Option) (*appfabric.GetAppBundleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppBundleWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.GetAppBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppBundleWithContext indicates an expected call of GetAppBundleWithContext
func (mr *MockAppFabricAPIMockRecorder) GetAppBundleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppBundleWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).GetAppBundleWithContext), varargs...)
}

// GetIngestion mocks base method
func (m *MockAppFabricAPI) GetIngestion(arg0 *appfabric.GetIngestionInput) (*appfabric.GetIngestionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngestion", arg0)
	ret0, _ := ret[0].(*appfabric.GetIngestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngestion indicates an expected call of GetIngestion
func (mr *MockAppFabricAPIMockRecorder) GetIngestion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestion", reflect.TypeOf((*MockAppFabricAPI)(nil).GetIngestion), arg0)
}

// GetIngestionDestination mocks base method
func (m *MockAppFabricAPI) GetIngestionDestination(arg0 *appfabric.GetIngestionDestinationInput) (*appfabric.GetIngestionDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngestionDestination", arg0)
	ret0, _ := ret[0].(*appfabric.GetIngestionDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngestionDestination indicates an expected call of GetIngestionDestination
func (mr *MockAppFabricAPIMockRecorder) GetIngestionDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestionDestination", reflect.TypeOf((*MockAppFabricAPI)(nil).GetIngestionDestination), arg0)
}

// GetIngestionDestinationRequest mocks base method
func (m *MockAppFabricAPI) GetIngestionDestinationRequest(arg0 *appfabric.GetIngestionDestinationInput) (*request.Request, *appfabric.GetIngestionDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngestionDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.GetIngestionDestinationOutput)
	return ret0, ret1
}

// GetIngestionDestinationRequest indicates an expected call of GetIngestionDestinationRequest
func (mr *MockAppFabricAPIMockRecorder) GetIngestionDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestionDestinationRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).GetIngestionDestinationRequest), arg0)
}

// GetIngestionDestinationWithContext mocks base method
func (m *MockAppFabricAPI) GetIngestionDestinationWithContext(arg0 context.Context, arg1 *appfabric.GetIngestionDestinationInput, arg2 ...request.Option) (*appfabric.GetIngestionDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIngestionDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.GetIngestionDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngestionDestinationWithContext indicates an expected call of GetIngestionDestinationWithContext
func (mr *MockAppFabricAPIMockRecorder) GetIngestionDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestionDestinationWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).GetIngestionDestinationWithContext), varargs...)
}

// GetIngestionRequest mocks base method
func (m *MockAppFabricAPI) GetIngestionRequest(arg0 *appfabric.GetIngestionInput) (*request.Request, *appfabric.GetIngestionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngestionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.GetIngestionOutput)
	return ret0, ret1
}

// GetIngestionRequest indicates an expected call of GetIngestionRequest
func (mr *MockAppFabricAPIMockRecorder) GetIngestionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestionRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).GetIngestionRequest), arg0)
}

// GetIngestionWithContext mocks base method
func (m *MockAppFabricAPI) GetIngestionWithContext(arg0 context.Context, arg1 *appfabric.GetIngestionInput, arg2 ...request.Option) (*appfabric.GetIngestionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIngestionWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.GetIngestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngestionWithContext indicates an expected call of GetIngestionWithContext
func (mr *MockAppFabricAPIMockRecorder) GetIngestionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestionWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).GetIngestionWithContext), varargs...)
}

// ListAppAuthorizations mocks base method
func (m *MockAppFabricAPI) ListAppAuthorizations(arg0 *appfabric.ListAppAuthorizationsInput) (*appfabric.ListAppAuthorizationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppAuthorizations", arg0)
	ret0, _ := ret[0].(*appfabric.ListAppAuthorizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppAuthorizations indicates an expected call of ListAppAuthorizations
func (mr *MockAppFabricAPIMockRecorder) ListAppAuthorizations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppAuthorizations", reflect.TypeOf((*MockAppFabricAPI)(nil).ListAppAuthorizations), arg0)
}

// ListAppAuthorizationsPages mocks base method
func (m *MockAppFabricAPI) ListAppAuthorizationsPages(arg0 *appfabric.ListAppAuthorizationsInput, arg1 func(*appfabric.ListAppAuthorizationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppAuthorizationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppAuthorizationsPages indicates an expected call of ListAppAuthorizationsPages
func (mr *MockAppFabricAPIMockRecorder) ListAppAuthorizationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppAuthorizationsPages", reflect.TypeOf((*MockAppFabricAPI)(nil).ListAppAuthorizationsPages), arg0, arg1)
}

// ListAppAuthorizationsPagesWithContext mocks base method
func (m *MockAppFabricAPI) ListAppAuthorizationsPagesWithContext(arg0 context.Context, arg1 *appfabric.ListAppAuthorizationsInput, arg2 func(*appfabric.ListAppAuthorizationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppAuthorizationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppAuthorizationsPagesWithContext indicates an expected call of ListAppAuthorizationsPagesWithContext
func (mr *MockAppFabricAPIMockRecorder) ListAppAuthorizationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppAuthorizationsPagesWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).ListAppAuthorizationsPagesWithContext), varargs...)
}

// ListAppAuthorizationsRequest mocks base method
func (m *MockAppFabricAPI) ListAppAuthorizationsRequest(arg0 *appfabric.ListAppAuthorizationsInput) (*request.Request, *appfabric.ListAppAuthorizationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppAuthorizationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.ListAppAuthorizationsOutput)
	return ret0, ret1
}

// ListAppAuthorizationsRequest indicates an expected call of ListAppAuthorizationsRequest
func (mr *MockAppFabricAPIMockRecorder) ListAppAuthorizationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppAuthorizationsRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).ListAppAuthorizationsRequest), arg0)
}

// ListAppAuthorizationsWithContext mocks base method
func (m *MockAppFabricAPI) ListAppAuthorizationsWithContext(arg0 context.Context, arg1 *appfabric.ListAppAuthorizationsInput, arg2 ...request.Option) (*appfabric.ListAppAuthorizationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppAuthorizationsWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.ListAppAuthorizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppAuthorizationsWithContext indicates an expected call of ListAppAuthorizationsWithContext
func (mr *MockAppFabricAPIMockRecorder) ListAppAuthorizationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppAuthorizationsWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).ListAppAuthorizationsWithContext), varargs...)
}

// ListAppBundles mocks base method
func (m *MockAppFabricAPI) ListAppBundles(arg0 *appfabric.ListAppBundlesInput) (*appfabric.ListAppBundlesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppBundles", arg0)
	ret0, _ := ret[0].(*appfabric.ListAppBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppBundles indicates an expected call of ListAppBundles
func (mr *MockAppFabricAPIMockRecorder) ListAppBundles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppBundles", reflect.TypeOf((*MockAppFabricAPI)(nil).ListAppBundles), arg0)
}

// ListAppBundlesPages mocks base method
func (m *MockAppFabricAPI) ListAppBundlesPages(arg0 *appfabric.ListAppBundlesInput, arg1 func(*appfabric.ListAppBundlesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppBundlesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppBundlesPages indicates an expected call of ListAppBundlesPages
func (mr *MockAppFabricAPIMockRecorder) ListAppBundlesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppBundlesPages", reflect.TypeOf((*MockAppFabricAPI)(nil).ListAppBundlesPages), arg0, arg1)
}

// ListAppBundlesPagesWithContext mocks base method
func (m *MockAppFabricAPI) ListAppBundlesPagesWithContext(arg0 context.Context, arg1 *appfabric.ListAppBundlesInput, arg2 func(*appfabric.ListAppBundlesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppBundlesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppBundlesPagesWithContext indicates an expected call of ListAppBundlesPagesWithContext
func (mr *MockAppFabricAPIMockRecorder) ListAppBundlesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppBundlesPagesWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).ListAppBundlesPagesWithContext), varargs...)
}

// ListAppBundlesRequest mocks base method
func (m *MockAppFabricAPI) ListAppBundlesRequest(arg0 *appfabric.ListAppBundlesInput) (*request.Request, *appfabric.ListAppBundlesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppBundlesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.ListAppBundlesOutput)
	return ret0, ret1
}

// ListAppBundlesRequest indicates an expected call of ListAppBundlesRequest
func (mr *MockAppFabricAPIMockRecorder) ListAppBundlesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppBundlesRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).ListAppBundlesRequest), arg0)
}

// ListAppBundlesWithContext mocks base method
func (m *MockAppFabricAPI) ListAppBundlesWithContext(arg0 context.Context, arg1 *appfabric.ListAppBundlesInput, arg2 ...request.Option) (*appfabric.ListAppBundlesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppBundlesWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.ListAppBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppBundlesWithContext indicates an expected call of ListAppBundlesWithContext
func (mr *MockAppFabricAPIMockRecorder) ListAppBundlesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppBundlesWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).ListAppBundlesWithContext), varargs...)
}

// ListIngestionDestinations mocks base method
func (m *MockAppFabricAPI) ListIngestionDestinations(arg0 *appfabric.ListIngestionDestinationsInput) (*appfabric.ListIngestionDestinationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngestionDestinations", arg0)
	ret0, _ := ret[0].(*appfabric.ListIngestionDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngestionDestinations indicates an expected call of ListIngestionDestinations
func (mr *MockAppFabricAPIMockRecorder) ListIngestionDestinations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionDestinations", reflect.TypeOf((*MockAppFabricAPI)(nil).ListIngestionDestinations), arg0)
}

// ListIngestionDestinationsPages mocks base method
func (m *MockAppFabricAPI) ListIngestionDestinationsPages(arg0 *appfabric.ListIngestionDestinationsInput, arg1 func(*appfabric.ListIngestionDestinationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngestionDestinationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIngestionDestinationsPages indicates an expected call of ListIngestionDestinationsPages
func (mr *MockAppFabricAPIMockRecorder) ListIngestionDestinationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionDestinationsPages", reflect.TypeOf((*MockAppFabricAPI)(nil).ListIngestionDestinationsPages), arg0, arg1)
}

// ListIngestionDestinationsPagesWithContext mocks base method
func (m *MockAppFabricAPI) ListIngestionDestinationsPagesWithContext(arg0 context.Context, arg1 *appfabric.ListIngestionDestinationsInput, arg2 func(*appfabric.ListIngestionDestinationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIngestionDestinationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIngestionDestinationsPagesWithContext indicates an expected call of ListIngestionDestinationsPagesWithContext
func (mr *MockAppFabricAPIMockRecorder) ListIngestionDestinationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionDestinationsPagesWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).ListIngestionDestinationsPagesWithContext), varargs...)
}

// ListIngestionDestinationsRequest mocks base method
func (m *MockAppFabricAPI) ListIngestionDestinationsRequest(arg0 *appfabric.ListIngestionDestinationsInput) (*request.Request, *appfabric.ListIngestionDestinationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngestionDestinationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.ListIngestionDestinationsOutput)
	return ret0, ret1
}

// ListIngestionDestinationsRequest indicates an expected call of ListIngestionDestinationsRequest
func (mr *MockAppFabricAPIMockRecorder) ListIngestionDestinationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionDestinationsRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).ListIngestionDestinationsRequest), arg0)
}

// ListIngestionDestinationsWithContext mocks base method
func (m *MockAppFabricAPI) ListIngestionDestinationsWithContext(arg0 context.Context, arg1 *appfabric.ListIngestionDestinationsInput, arg2 ...request.Option) (*appfabric.ListIngestionDestinationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIngestionDestinationsWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.ListIngestionDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngestionDestinationsWithContext indicates an expected call of ListIngestionDestinationsWithContext
func (mr *MockAppFabricAPIMockRecorder) ListIngestionDestinationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionDestinationsWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).ListIngestionDestinationsWithContext), varargs...)
}

// ListIngestions mocks base method
func (m *MockAppFabricAPI) ListIngestions(arg0 *appfabric.ListIngestionsInput) (*appfabric.ListIngestionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngestions", arg0)
	ret0, _ := ret[0].(*appfabric.ListIngestionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngestions indicates an expected call of ListIngestions
func (mr *MockAppFabricAPIMockRecorder) ListIngestions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestions", reflect.TypeOf((*MockAppFabricAPI)(nil).ListIngestions), arg0)
}

// ListIngestionsPages mocks base method
func (m *MockAppFabricAPI) ListIngestionsPages(arg0 *appfabric.ListIngestionsInput, arg1 func(*appfabric.ListIngestionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngestionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIngestionsPages indicates an expected call of ListIngestionsPages
func (mr *MockAppFabricAPIMockRecorder) ListIngestionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionsPages", reflect.TypeOf((*MockAppFabricAPI)(nil).ListIngestionsPages), arg0, arg1)
}

// ListIngestionsPagesWithContext mocks base method
func (m *MockAppFabricAPI) ListIngestionsPagesWithContext(arg0 context.Context, arg1 *appfabric.ListIngestionsInput, arg2 func(*appfabric.ListIngestionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIngestionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIngestionsPagesWithContext indicates an expected call of ListIngestionsPagesWithContext
func (mr *MockAppFabricAPIMockRecorder) ListIngestionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionsPagesWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).ListIngestionsPagesWithContext), varargs...)
}

// ListIngestionsRequest mocks base method
func (m *MockAppFabricAPI) ListIngestionsRequest(arg0 *appfabric.ListIngestionsInput) (*request.Request, *appfabric.ListIngestionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngestionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.ListIngestionsOutput)
	return ret0, ret1
}

// ListIngestionsRequest indicates an expected call of ListIngestionsRequest
func (mr *MockAppFabricAPIMockRecorder) ListIngestionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionsRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).ListIngestionsRequest), arg0)
}

// ListIngestionsWithContext mocks base method
func (m *MockAppFabricAPI) ListIngestionsWithContext(arg0 context.Context, arg1 *appfabric.ListIngestionsInput, arg2 ...request.Option) (*appfabric.ListIngestionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIngestionsWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.ListIngestionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngestionsWithContext indicates an expected call of ListIngestionsWithContext
func (mr *MockAppFabricAPIMockRecorder) ListIngestionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionsWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).ListIngestionsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockAppFabricAPI) ListTagsForResource(arg0 *appfabric.ListTagsForResourceInput) (*appfabric.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*appfabric.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockAppFabricAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAppFabricAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockAppFabricAPI) ListTagsForResourceRequest(arg0 *appfabric.ListTagsForResourceInput) (*request.Request, *appfabric.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockAppFabricAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockAppFabricAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *appfabric.ListTagsForResourceInput, arg2 ...request.Option) (*appfabric.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockAppFabricAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartIngestion mocks base method
func (m *MockAppFabricAPI) StartIngestion(arg0 *appfabric.StartIngestionInput) (*appfabric.StartIngestionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartIngestion", arg0)
	ret0, _ := ret[0].(*appfabric.StartIngestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartIngestion indicates an expected call of StartIngestion
func (mr *MockAppFabricAPIMockRecorder) StartIngestion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIngestion", reflect.TypeOf((*MockAppFabricAPI)(nil).StartIngestion), arg0)
}

// StartIngestionRequest mocks base method
func (m *MockAppFabricAPI) StartIngestionRequest(arg0 *appfabric.StartIngestionInput) (*request.Request, *appfabric.StartIngestionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartIngestionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.StartIngestionOutput)
	return ret0, ret1
}

// StartIngestionRequest indicates an expected call of StartIngestionRequest
func (mr *MockAppFabricAPIMockRecorder) StartIngestionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIngestionRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).StartIngestionRequest), arg0)
}

// StartIngestionWithContext mocks base method
func (m *MockAppFabricAPI) StartIngestionWithContext(arg0 context.Context, arg1 *appfabric.StartIngestionInput, arg2 ...request.Option) (*appfabric.StartIngestionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartIngestionWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.StartIngestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartIngestionWithContext indicates an expected call of StartIngestionWithContext
func (mr *MockAppFabricAPIMockRecorder) StartIngestionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIngestionWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).StartIngestionWithContext), varargs...)
}

// StartUserAccessTasks mocks base method
func (m *MockAppFabricAPI) StartUserAccessTasks(arg0 *appfabric.StartUserAccessTasksInput) (*appfabric.StartUserAccessTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUserAccessTasks", arg0)
	ret0, _ := ret[0].(*appfabric.StartUserAccessTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartUserAccessTasks indicates an expected call of StartUserAccessTasks
func (mr *MockAppFabricAPIMockRecorder) StartUserAccessTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUserAccessTasks", reflect.TypeOf((*MockAppFabricAPI)(nil).StartUserAccessTasks), arg0)
}

// StartUserAccessTasksRequest mocks base method
func (m *MockAppFabricAPI) StartUserAccessTasksRequest(arg0 *appfabric.StartUserAccessTasksInput) (*request.Request, *appfabric.StartUserAccessTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUserAccessTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.StartUserAccessTasksOutput)
	return ret0, ret1
}

// StartUserAccessTasksRequest indicates an expected call of StartUserAccessTasksRequest
func (mr *MockAppFabricAPIMockRecorder) StartUserAccessTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUserAccessTasksRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).StartUserAccessTasksRequest), arg0)
}

// StartUserAccessTasksWithContext mocks base method
func (m *MockAppFabricAPI) StartUserAccessTasksWithContext(arg0 context.Context, arg1 *appfabric.StartUserAccessTasksInput, arg2 ...request.Option) (*appfabric.StartUserAccessTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartUserAccessTasksWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.StartUserAccessTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartUserAccessTasksWithContext indicates an expected call of StartUserAccessTasksWithContext
func (mr *MockAppFabricAPIMockRecorder) StartUserAccessTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUserAccessTasksWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).StartUserAccessTasksWithContext), varargs...)
}

// StopIngestion mocks base method
func (m *MockAppFabricAPI) StopIngestion(arg0 *appfabric.StopIngestionInput) (*appfabric.StopIngestionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopIngestion", arg0)
	ret0, _ := ret[0].(*appfabric.StopIngestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopIngestion indicates an expected call of StopIngestion
func (mr *MockAppFabricAPIMockRecorder) StopIngestion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopIngestion", reflect.TypeOf((*MockAppFabricAPI)(nil).StopIngestion), arg0)
}

// StopIngestionRequest mocks base method
func (m *MockAppFabricAPI) StopIngestionRequest(arg0 *appfabric.StopIngestionInput) (*request.Request, *appfabric.StopIngestionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopIngestionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.StopIngestionOutput)
	return ret0, ret1
}

// StopIngestionRequest indicates an expected call of StopIngestionRequest
func (mr *MockAppFabricAPIMockRecorder) StopIngestionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopIngestionRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).StopIngestionRequest), arg0)
}

// StopIngestionWithContext mocks base method
func (m *MockAppFabricAPI) StopIngestionWithContext(arg0 context.Context, arg1 *appfabric.StopIngestionInput, arg2 ...request.Option) (*appfabric.StopIngestionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopIngestionWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.StopIngestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopIngestionWithContext indicates an expected call of StopIngestionWithContext
func (mr *MockAppFabricAPIMockRecorder) StopIngestionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopIngestionWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).StopIngestionWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockAppFabricAPI) TagResource(arg0 *appfabric.TagResourceInput) (*appfabric.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*appfabric.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockAppFabricAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockAppFabricAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockAppFabricAPI) TagResourceRequest(arg0 *appfabric.TagResourceInput) (*request.Request, *appfabric.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockAppFabricAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockAppFabricAPI) TagResourceWithContext(arg0 context.Context, arg1 *appfabric.TagResourceInput, arg2 ...request.Option) (*appfabric.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockAppFabricAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockAppFabricAPI) UntagResource(arg0 *appfabric.UntagResourceInput) (*appfabric.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*appfabric.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockAppFabricAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockAppFabricAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockAppFabricAPI) UntagResourceRequest(arg0 *appfabric.UntagResourceInput) (*request.Request, *appfabric.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockAppFabricAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockAppFabricAPI) UntagResourceWithContext(arg0 context.Context, arg1 *appfabric.UntagResourceInput, arg2 ...request.Option) (*appfabric.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockAppFabricAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAppAuthorization mocks base method
func (m *MockAppFabricAPI) UpdateAppAuthorization(arg0 *appfabric.UpdateAppAuthorizationInput) (*appfabric.UpdateAppAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppAuthorization", arg0)
	ret0, _ := ret[0].(*appfabric.UpdateAppAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppAuthorization indicates an expected call of UpdateAppAuthorization
func (mr *MockAppFabricAPIMockRecorder) UpdateAppAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppAuthorization", reflect.TypeOf((*MockAppFabricAPI)(nil).UpdateAppAuthorization), arg0)
}

// UpdateAppAuthorizationRequest mocks base method
func (m *MockAppFabricAPI) UpdateAppAuthorizationRequest(arg0 *appfabric.UpdateAppAuthorizationInput) (*request.Request, *appfabric.UpdateAppAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.UpdateAppAuthorizationOutput)
	return ret0, ret1
}

// UpdateAppAuthorizationRequest indicates an expected call of UpdateAppAuthorizationRequest
func (mr *MockAppFabricAPIMockRecorder) UpdateAppAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppAuthorizationRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).UpdateAppAuthorizationRequest), arg0)
}

// UpdateAppAuthorizationWithContext mocks base method
func (m *MockAppFabricAPI) UpdateAppAuthorizationWithContext(arg0 context.Context, arg1 *appfabric.UpdateAppAuthorizationInput, arg2 ...request.Option) (*appfabric.UpdateAppAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.UpdateAppAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppAuthorizationWithContext indicates an expected call of UpdateAppAuthorizationWithContext
func (mr *MockAppFabricAPIMockRecorder) UpdateAppAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppAuthorizationWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).UpdateAppAuthorizationWithContext), varargs...)
}

// UpdateIngestionDestination mocks base method
func (m *MockAppFabricAPI) UpdateIngestionDestination(arg0 *appfabric.UpdateIngestionDestinationInput) (*appfabric.UpdateIngestionDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngestionDestination", arg0)
	ret0, _ := ret[0].(*appfabric.UpdateIngestionDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngestionDestination indicates an expected call of UpdateIngestionDestination
func (mr *MockAppFabricAPIMockRecorder) UpdateIngestionDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngestionDestination", reflect.TypeOf((*MockAppFabricAPI)(nil).UpdateIngestionDestination), arg0)
}

// UpdateIngestionDestinationRequest mocks base method
func (m *MockAppFabricAPI) UpdateIngestionDestinationRequest(arg0 *appfabric.UpdateIngestionDestinationInput) (*request.Request, *appfabric.UpdateIngestionDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngestionDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appfabric.UpdateIngestionDestinationOutput)
	return ret0, ret1
}

// UpdateIngestionDestinationRequest indicates an expected call of UpdateIngestionDestinationRequest
func (mr *MockAppFabricAPIMockRecorder) UpdateIngestionDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngestionDestinationRequest", reflect.TypeOf((*MockAppFabricAPI)(nil).UpdateIngestionDestinationRequest), arg0)
}

// UpdateIngestionDestinationWithContext mocks base method
func (m *MockAppFabricAPI) UpdateIngestionDestinationWithContext(arg0 context.Context, arg1 *appfabric.UpdateIngestionDestinationInput, arg2 ...request.Option) (*appfabric.UpdateIngestionDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIngestionDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*appfabric.UpdateIngestionDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngestionDestinationWithContext indicates an expected call of UpdateIngestionDestinationWithContext
func (mr *MockAppFabricAPIMockRecorder) UpdateIngestionDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngestionDestinationWithContext", reflect.TypeOf((*MockAppFabricAPI)(nil).UpdateIngestionDestinationWithContext), varargs...)
}
