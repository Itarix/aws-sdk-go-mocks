// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/medicalimaging/medicalimagingiface (interfaces: MedicalImagingAPI)

// Package medicalimagingmock is a generated GoMock package.
package medicalimagingmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	medicalimaging "github.com/aws/aws-sdk-go/service/medicalimaging"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMedicalImagingAPI is a mock of MedicalImagingAPI interface
type MockMedicalImagingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMedicalImagingAPIMockRecorder
}

// MockMedicalImagingAPIMockRecorder is the mock recorder for MockMedicalImagingAPI
type MockMedicalImagingAPIMockRecorder struct {
	mock *MockMedicalImagingAPI
}

// NewMockMedicalImagingAPI creates a new mock instance
func NewMockMedicalImagingAPI(ctrl *gomock.Controller) *MockMedicalImagingAPI {
	mock := &MockMedicalImagingAPI{ctrl: ctrl}
	mock.recorder = &MockMedicalImagingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMedicalImagingAPI) EXPECT() *MockMedicalImagingAPIMockRecorder {
	return m.recorder
}

// CopyImageSet mocks base method
func (m *MockMedicalImagingAPI) CopyImageSet(arg0 *medicalimaging.CopyImageSetInput) (*medicalimaging.CopyImageSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyImageSet", arg0)
	ret0, _ := ret[0].(*medicalimaging.CopyImageSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyImageSet indicates an expected call of CopyImageSet
func (mr *MockMedicalImagingAPIMockRecorder) CopyImageSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImageSet", reflect.TypeOf((*MockMedicalImagingAPI)(nil).CopyImageSet), arg0)
}

// CopyImageSetRequest mocks base method
func (m *MockMedicalImagingAPI) CopyImageSetRequest(arg0 *medicalimaging.CopyImageSetInput) (*request.Request, *medicalimaging.CopyImageSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyImageSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.CopyImageSetOutput)
	return ret0, ret1
}

// CopyImageSetRequest indicates an expected call of CopyImageSetRequest
func (mr *MockMedicalImagingAPIMockRecorder) CopyImageSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImageSetRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).CopyImageSetRequest), arg0)
}

// CopyImageSetWithContext mocks base method
func (m *MockMedicalImagingAPI) CopyImageSetWithContext(arg0 context.Context, arg1 *medicalimaging.CopyImageSetInput, arg2 ...request.Option) (*medicalimaging.CopyImageSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyImageSetWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.CopyImageSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyImageSetWithContext indicates an expected call of CopyImageSetWithContext
func (mr *MockMedicalImagingAPIMockRecorder) CopyImageSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImageSetWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).CopyImageSetWithContext), varargs...)
}

// CreateDatastore mocks base method
func (m *MockMedicalImagingAPI) CreateDatastore(arg0 *medicalimaging.CreateDatastoreInput) (*medicalimaging.CreateDatastoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatastore", arg0)
	ret0, _ := ret[0].(*medicalimaging.CreateDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatastore indicates an expected call of CreateDatastore
func (mr *MockMedicalImagingAPIMockRecorder) CreateDatastore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatastore", reflect.TypeOf((*MockMedicalImagingAPI)(nil).CreateDatastore), arg0)
}

// CreateDatastoreRequest mocks base method
func (m *MockMedicalImagingAPI) CreateDatastoreRequest(arg0 *medicalimaging.CreateDatastoreInput) (*request.Request, *medicalimaging.CreateDatastoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatastoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.CreateDatastoreOutput)
	return ret0, ret1
}

// CreateDatastoreRequest indicates an expected call of CreateDatastoreRequest
func (mr *MockMedicalImagingAPIMockRecorder) CreateDatastoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatastoreRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).CreateDatastoreRequest), arg0)
}

// CreateDatastoreWithContext mocks base method
func (m *MockMedicalImagingAPI) CreateDatastoreWithContext(arg0 context.Context, arg1 *medicalimaging.CreateDatastoreInput, arg2 ...request.Option) (*medicalimaging.CreateDatastoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatastoreWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.CreateDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatastoreWithContext indicates an expected call of CreateDatastoreWithContext
func (mr *MockMedicalImagingAPIMockRecorder) CreateDatastoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatastoreWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).CreateDatastoreWithContext), varargs...)
}

// DeleteDatastore mocks base method
func (m *MockMedicalImagingAPI) DeleteDatastore(arg0 *medicalimaging.DeleteDatastoreInput) (*medicalimaging.DeleteDatastoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatastore", arg0)
	ret0, _ := ret[0].(*medicalimaging.DeleteDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatastore indicates an expected call of DeleteDatastore
func (mr *MockMedicalImagingAPIMockRecorder) DeleteDatastore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatastore", reflect.TypeOf((*MockMedicalImagingAPI)(nil).DeleteDatastore), arg0)
}

// DeleteDatastoreRequest mocks base method
func (m *MockMedicalImagingAPI) DeleteDatastoreRequest(arg0 *medicalimaging.DeleteDatastoreInput) (*request.Request, *medicalimaging.DeleteDatastoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatastoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.DeleteDatastoreOutput)
	return ret0, ret1
}

// DeleteDatastoreRequest indicates an expected call of DeleteDatastoreRequest
func (mr *MockMedicalImagingAPIMockRecorder) DeleteDatastoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatastoreRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).DeleteDatastoreRequest), arg0)
}

// DeleteDatastoreWithContext mocks base method
func (m *MockMedicalImagingAPI) DeleteDatastoreWithContext(arg0 context.Context, arg1 *medicalimaging.DeleteDatastoreInput, arg2 ...request.Option) (*medicalimaging.DeleteDatastoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatastoreWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.DeleteDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatastoreWithContext indicates an expected call of DeleteDatastoreWithContext
func (mr *MockMedicalImagingAPIMockRecorder) DeleteDatastoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatastoreWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).DeleteDatastoreWithContext), varargs...)
}

// DeleteImageSet mocks base method
func (m *MockMedicalImagingAPI) DeleteImageSet(arg0 *medicalimaging.DeleteImageSetInput) (*medicalimaging.DeleteImageSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageSet", arg0)
	ret0, _ := ret[0].(*medicalimaging.DeleteImageSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImageSet indicates an expected call of DeleteImageSet
func (mr *MockMedicalImagingAPIMockRecorder) DeleteImageSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageSet", reflect.TypeOf((*MockMedicalImagingAPI)(nil).DeleteImageSet), arg0)
}

// DeleteImageSetRequest mocks base method
func (m *MockMedicalImagingAPI) DeleteImageSetRequest(arg0 *medicalimaging.DeleteImageSetInput) (*request.Request, *medicalimaging.DeleteImageSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.DeleteImageSetOutput)
	return ret0, ret1
}

// DeleteImageSetRequest indicates an expected call of DeleteImageSetRequest
func (mr *MockMedicalImagingAPIMockRecorder) DeleteImageSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageSetRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).DeleteImageSetRequest), arg0)
}

// DeleteImageSetWithContext mocks base method
func (m *MockMedicalImagingAPI) DeleteImageSetWithContext(arg0 context.Context, arg1 *medicalimaging.DeleteImageSetInput, arg2 ...request.Option) (*medicalimaging.DeleteImageSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteImageSetWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.DeleteImageSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImageSetWithContext indicates an expected call of DeleteImageSetWithContext
func (mr *MockMedicalImagingAPIMockRecorder) DeleteImageSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageSetWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).DeleteImageSetWithContext), varargs...)
}

// GetDICOMImportJob mocks base method
func (m *MockMedicalImagingAPI) GetDICOMImportJob(arg0 *medicalimaging.GetDICOMImportJobInput) (*medicalimaging.GetDICOMImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDICOMImportJob", arg0)
	ret0, _ := ret[0].(*medicalimaging.GetDICOMImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDICOMImportJob indicates an expected call of GetDICOMImportJob
func (mr *MockMedicalImagingAPIMockRecorder) GetDICOMImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDICOMImportJob", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetDICOMImportJob), arg0)
}

// GetDICOMImportJobRequest mocks base method
func (m *MockMedicalImagingAPI) GetDICOMImportJobRequest(arg0 *medicalimaging.GetDICOMImportJobInput) (*request.Request, *medicalimaging.GetDICOMImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDICOMImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.GetDICOMImportJobOutput)
	return ret0, ret1
}

// GetDICOMImportJobRequest indicates an expected call of GetDICOMImportJobRequest
func (mr *MockMedicalImagingAPIMockRecorder) GetDICOMImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDICOMImportJobRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetDICOMImportJobRequest), arg0)
}

// GetDICOMImportJobWithContext mocks base method
func (m *MockMedicalImagingAPI) GetDICOMImportJobWithContext(arg0 context.Context, arg1 *medicalimaging.GetDICOMImportJobInput, arg2 ...request.Option) (*medicalimaging.GetDICOMImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDICOMImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.GetDICOMImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDICOMImportJobWithContext indicates an expected call of GetDICOMImportJobWithContext
func (mr *MockMedicalImagingAPIMockRecorder) GetDICOMImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDICOMImportJobWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetDICOMImportJobWithContext), varargs...)
}

// GetDatastore mocks base method
func (m *MockMedicalImagingAPI) GetDatastore(arg0 *medicalimaging.GetDatastoreInput) (*medicalimaging.GetDatastoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatastore", arg0)
	ret0, _ := ret[0].(*medicalimaging.GetDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatastore indicates an expected call of GetDatastore
func (mr *MockMedicalImagingAPIMockRecorder) GetDatastore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastore", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetDatastore), arg0)
}

// GetDatastoreRequest mocks base method
func (m *MockMedicalImagingAPI) GetDatastoreRequest(arg0 *medicalimaging.GetDatastoreInput) (*request.Request, *medicalimaging.GetDatastoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatastoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.GetDatastoreOutput)
	return ret0, ret1
}

// GetDatastoreRequest indicates an expected call of GetDatastoreRequest
func (mr *MockMedicalImagingAPIMockRecorder) GetDatastoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastoreRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetDatastoreRequest), arg0)
}

// GetDatastoreWithContext mocks base method
func (m *MockMedicalImagingAPI) GetDatastoreWithContext(arg0 context.Context, arg1 *medicalimaging.GetDatastoreInput, arg2 ...request.Option) (*medicalimaging.GetDatastoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatastoreWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.GetDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatastoreWithContext indicates an expected call of GetDatastoreWithContext
func (mr *MockMedicalImagingAPIMockRecorder) GetDatastoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastoreWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetDatastoreWithContext), varargs...)
}

// GetImageFrame mocks base method
func (m *MockMedicalImagingAPI) GetImageFrame(arg0 *medicalimaging.GetImageFrameInput) (*medicalimaging.GetImageFrameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFrame", arg0)
	ret0, _ := ret[0].(*medicalimaging.GetImageFrameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFrame indicates an expected call of GetImageFrame
func (mr *MockMedicalImagingAPIMockRecorder) GetImageFrame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFrame", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetImageFrame), arg0)
}

// GetImageFrameRequest mocks base method
func (m *MockMedicalImagingAPI) GetImageFrameRequest(arg0 *medicalimaging.GetImageFrameInput) (*request.Request, *medicalimaging.GetImageFrameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFrameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.GetImageFrameOutput)
	return ret0, ret1
}

// GetImageFrameRequest indicates an expected call of GetImageFrameRequest
func (mr *MockMedicalImagingAPIMockRecorder) GetImageFrameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFrameRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetImageFrameRequest), arg0)
}

// GetImageFrameWithContext mocks base method
func (m *MockMedicalImagingAPI) GetImageFrameWithContext(arg0 context.Context, arg1 *medicalimaging.GetImageFrameInput, arg2 ...request.Option) (*medicalimaging.GetImageFrameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImageFrameWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.GetImageFrameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFrameWithContext indicates an expected call of GetImageFrameWithContext
func (mr *MockMedicalImagingAPIMockRecorder) GetImageFrameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFrameWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetImageFrameWithContext), varargs...)
}

// GetImageSet mocks base method
func (m *MockMedicalImagingAPI) GetImageSet(arg0 *medicalimaging.GetImageSetInput) (*medicalimaging.GetImageSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSet", arg0)
	ret0, _ := ret[0].(*medicalimaging.GetImageSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSet indicates an expected call of GetImageSet
func (mr *MockMedicalImagingAPIMockRecorder) GetImageSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSet", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetImageSet), arg0)
}

// GetImageSetMetadata mocks base method
func (m *MockMedicalImagingAPI) GetImageSetMetadata(arg0 *medicalimaging.GetImageSetMetadataInput) (*medicalimaging.GetImageSetMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSetMetadata", arg0)
	ret0, _ := ret[0].(*medicalimaging.GetImageSetMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSetMetadata indicates an expected call of GetImageSetMetadata
func (mr *MockMedicalImagingAPIMockRecorder) GetImageSetMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSetMetadata", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetImageSetMetadata), arg0)
}

// GetImageSetMetadataRequest mocks base method
func (m *MockMedicalImagingAPI) GetImageSetMetadataRequest(arg0 *medicalimaging.GetImageSetMetadataInput) (*request.Request, *medicalimaging.GetImageSetMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSetMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.GetImageSetMetadataOutput)
	return ret0, ret1
}

// GetImageSetMetadataRequest indicates an expected call of GetImageSetMetadataRequest
func (mr *MockMedicalImagingAPIMockRecorder) GetImageSetMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSetMetadataRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetImageSetMetadataRequest), arg0)
}

// GetImageSetMetadataWithContext mocks base method
func (m *MockMedicalImagingAPI) GetImageSetMetadataWithContext(arg0 context.Context, arg1 *medicalimaging.GetImageSetMetadataInput, arg2 ...request.Option) (*medicalimaging.GetImageSetMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImageSetMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.GetImageSetMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSetMetadataWithContext indicates an expected call of GetImageSetMetadataWithContext
func (mr *MockMedicalImagingAPIMockRecorder) GetImageSetMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSetMetadataWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetImageSetMetadataWithContext), varargs...)
}

// GetImageSetRequest mocks base method
func (m *MockMedicalImagingAPI) GetImageSetRequest(arg0 *medicalimaging.GetImageSetInput) (*request.Request, *medicalimaging.GetImageSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.GetImageSetOutput)
	return ret0, ret1
}

// GetImageSetRequest indicates an expected call of GetImageSetRequest
func (mr *MockMedicalImagingAPIMockRecorder) GetImageSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSetRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetImageSetRequest), arg0)
}

// GetImageSetWithContext mocks base method
func (m *MockMedicalImagingAPI) GetImageSetWithContext(arg0 context.Context, arg1 *medicalimaging.GetImageSetInput, arg2 ...request.Option) (*medicalimaging.GetImageSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImageSetWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.GetImageSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSetWithContext indicates an expected call of GetImageSetWithContext
func (mr *MockMedicalImagingAPIMockRecorder) GetImageSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSetWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).GetImageSetWithContext), varargs...)
}

// ListDICOMImportJobs mocks base method
func (m *MockMedicalImagingAPI) ListDICOMImportJobs(arg0 *medicalimaging.ListDICOMImportJobsInput) (*medicalimaging.ListDICOMImportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDICOMImportJobs", arg0)
	ret0, _ := ret[0].(*medicalimaging.ListDICOMImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDICOMImportJobs indicates an expected call of ListDICOMImportJobs
func (mr *MockMedicalImagingAPIMockRecorder) ListDICOMImportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDICOMImportJobs", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListDICOMImportJobs), arg0)
}

// ListDICOMImportJobsPages mocks base method
func (m *MockMedicalImagingAPI) ListDICOMImportJobsPages(arg0 *medicalimaging.ListDICOMImportJobsInput, arg1 func(*medicalimaging.ListDICOMImportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDICOMImportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDICOMImportJobsPages indicates an expected call of ListDICOMImportJobsPages
func (mr *MockMedicalImagingAPIMockRecorder) ListDICOMImportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDICOMImportJobsPages", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListDICOMImportJobsPages), arg0, arg1)
}

// ListDICOMImportJobsPagesWithContext mocks base method
func (m *MockMedicalImagingAPI) ListDICOMImportJobsPagesWithContext(arg0 context.Context, arg1 *medicalimaging.ListDICOMImportJobsInput, arg2 func(*medicalimaging.ListDICOMImportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDICOMImportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDICOMImportJobsPagesWithContext indicates an expected call of ListDICOMImportJobsPagesWithContext
func (mr *MockMedicalImagingAPIMockRecorder) ListDICOMImportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDICOMImportJobsPagesWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListDICOMImportJobsPagesWithContext), varargs...)
}

// ListDICOMImportJobsRequest mocks base method
func (m *MockMedicalImagingAPI) ListDICOMImportJobsRequest(arg0 *medicalimaging.ListDICOMImportJobsInput) (*request.Request, *medicalimaging.ListDICOMImportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDICOMImportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.ListDICOMImportJobsOutput)
	return ret0, ret1
}

// ListDICOMImportJobsRequest indicates an expected call of ListDICOMImportJobsRequest
func (mr *MockMedicalImagingAPIMockRecorder) ListDICOMImportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDICOMImportJobsRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListDICOMImportJobsRequest), arg0)
}

// ListDICOMImportJobsWithContext mocks base method
func (m *MockMedicalImagingAPI) ListDICOMImportJobsWithContext(arg0 context.Context, arg1 *medicalimaging.ListDICOMImportJobsInput, arg2 ...request.Option) (*medicalimaging.ListDICOMImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDICOMImportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.ListDICOMImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDICOMImportJobsWithContext indicates an expected call of ListDICOMImportJobsWithContext
func (mr *MockMedicalImagingAPIMockRecorder) ListDICOMImportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDICOMImportJobsWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListDICOMImportJobsWithContext), varargs...)
}

// ListDatastores mocks base method
func (m *MockMedicalImagingAPI) ListDatastores(arg0 *medicalimaging.ListDatastoresInput) (*medicalimaging.ListDatastoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatastores", arg0)
	ret0, _ := ret[0].(*medicalimaging.ListDatastoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatastores indicates an expected call of ListDatastores
func (mr *MockMedicalImagingAPIMockRecorder) ListDatastores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatastores", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListDatastores), arg0)
}

// ListDatastoresPages mocks base method
func (m *MockMedicalImagingAPI) ListDatastoresPages(arg0 *medicalimaging.ListDatastoresInput, arg1 func(*medicalimaging.ListDatastoresOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatastoresPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatastoresPages indicates an expected call of ListDatastoresPages
func (mr *MockMedicalImagingAPIMockRecorder) ListDatastoresPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatastoresPages", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListDatastoresPages), arg0, arg1)
}

// ListDatastoresPagesWithContext mocks base method
func (m *MockMedicalImagingAPI) ListDatastoresPagesWithContext(arg0 context.Context, arg1 *medicalimaging.ListDatastoresInput, arg2 func(*medicalimaging.ListDatastoresOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatastoresPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatastoresPagesWithContext indicates an expected call of ListDatastoresPagesWithContext
func (mr *MockMedicalImagingAPIMockRecorder) ListDatastoresPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatastoresPagesWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListDatastoresPagesWithContext), varargs...)
}

// ListDatastoresRequest mocks base method
func (m *MockMedicalImagingAPI) ListDatastoresRequest(arg0 *medicalimaging.ListDatastoresInput) (*request.Request, *medicalimaging.ListDatastoresOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatastoresRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.ListDatastoresOutput)
	return ret0, ret1
}

// ListDatastoresRequest indicates an expected call of ListDatastoresRequest
func (mr *MockMedicalImagingAPIMockRecorder) ListDatastoresRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatastoresRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListDatastoresRequest), arg0)
}

// ListDatastoresWithContext mocks base method
func (m *MockMedicalImagingAPI) ListDatastoresWithContext(arg0 context.Context, arg1 *medicalimaging.ListDatastoresInput, arg2 ...request.Option) (*medicalimaging.ListDatastoresOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatastoresWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.ListDatastoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatastoresWithContext indicates an expected call of ListDatastoresWithContext
func (mr *MockMedicalImagingAPIMockRecorder) ListDatastoresWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatastoresWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListDatastoresWithContext), varargs...)
}

// ListImageSetVersions mocks base method
func (m *MockMedicalImagingAPI) ListImageSetVersions(arg0 *medicalimaging.ListImageSetVersionsInput) (*medicalimaging.ListImageSetVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImageSetVersions", arg0)
	ret0, _ := ret[0].(*medicalimaging.ListImageSetVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImageSetVersions indicates an expected call of ListImageSetVersions
func (mr *MockMedicalImagingAPIMockRecorder) ListImageSetVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImageSetVersions", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListImageSetVersions), arg0)
}

// ListImageSetVersionsPages mocks base method
func (m *MockMedicalImagingAPI) ListImageSetVersionsPages(arg0 *medicalimaging.ListImageSetVersionsInput, arg1 func(*medicalimaging.ListImageSetVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImageSetVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListImageSetVersionsPages indicates an expected call of ListImageSetVersionsPages
func (mr *MockMedicalImagingAPIMockRecorder) ListImageSetVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImageSetVersionsPages", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListImageSetVersionsPages), arg0, arg1)
}

// ListImageSetVersionsPagesWithContext mocks base method
func (m *MockMedicalImagingAPI) ListImageSetVersionsPagesWithContext(arg0 context.Context, arg1 *medicalimaging.ListImageSetVersionsInput, arg2 func(*medicalimaging.ListImageSetVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImageSetVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListImageSetVersionsPagesWithContext indicates an expected call of ListImageSetVersionsPagesWithContext
func (mr *MockMedicalImagingAPIMockRecorder) ListImageSetVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImageSetVersionsPagesWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListImageSetVersionsPagesWithContext), varargs...)
}

// ListImageSetVersionsRequest mocks base method
func (m *MockMedicalImagingAPI) ListImageSetVersionsRequest(arg0 *medicalimaging.ListImageSetVersionsInput) (*request.Request, *medicalimaging.ListImageSetVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImageSetVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.ListImageSetVersionsOutput)
	return ret0, ret1
}

// ListImageSetVersionsRequest indicates an expected call of ListImageSetVersionsRequest
func (mr *MockMedicalImagingAPIMockRecorder) ListImageSetVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImageSetVersionsRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListImageSetVersionsRequest), arg0)
}

// ListImageSetVersionsWithContext mocks base method
func (m *MockMedicalImagingAPI) ListImageSetVersionsWithContext(arg0 context.Context, arg1 *medicalimaging.ListImageSetVersionsInput, arg2 ...request.Option) (*medicalimaging.ListImageSetVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImageSetVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.ListImageSetVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImageSetVersionsWithContext indicates an expected call of ListImageSetVersionsWithContext
func (mr *MockMedicalImagingAPIMockRecorder) ListImageSetVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImageSetVersionsWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListImageSetVersionsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockMedicalImagingAPI) ListTagsForResource(arg0 *medicalimaging.ListTagsForResourceInput) (*medicalimaging.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*medicalimaging.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockMedicalImagingAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockMedicalImagingAPI) ListTagsForResourceRequest(arg0 *medicalimaging.ListTagsForResourceInput) (*request.Request, *medicalimaging.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockMedicalImagingAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockMedicalImagingAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *medicalimaging.ListTagsForResourceInput, arg2 ...request.Option) (*medicalimaging.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockMedicalImagingAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// SearchImageSets mocks base method
func (m *MockMedicalImagingAPI) SearchImageSets(arg0 *medicalimaging.SearchImageSetsInput) (*medicalimaging.SearchImageSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchImageSets", arg0)
	ret0, _ := ret[0].(*medicalimaging.SearchImageSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchImageSets indicates an expected call of SearchImageSets
func (mr *MockMedicalImagingAPIMockRecorder) SearchImageSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImageSets", reflect.TypeOf((*MockMedicalImagingAPI)(nil).SearchImageSets), arg0)
}

// SearchImageSetsPages mocks base method
func (m *MockMedicalImagingAPI) SearchImageSetsPages(arg0 *medicalimaging.SearchImageSetsInput, arg1 func(*medicalimaging.SearchImageSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchImageSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchImageSetsPages indicates an expected call of SearchImageSetsPages
func (mr *MockMedicalImagingAPIMockRecorder) SearchImageSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImageSetsPages", reflect.TypeOf((*MockMedicalImagingAPI)(nil).SearchImageSetsPages), arg0, arg1)
}

// SearchImageSetsPagesWithContext mocks base method
func (m *MockMedicalImagingAPI) SearchImageSetsPagesWithContext(arg0 context.Context, arg1 *medicalimaging.SearchImageSetsInput, arg2 func(*medicalimaging.SearchImageSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchImageSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchImageSetsPagesWithContext indicates an expected call of SearchImageSetsPagesWithContext
func (mr *MockMedicalImagingAPIMockRecorder) SearchImageSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImageSetsPagesWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).SearchImageSetsPagesWithContext), varargs...)
}

// SearchImageSetsRequest mocks base method
func (m *MockMedicalImagingAPI) SearchImageSetsRequest(arg0 *medicalimaging.SearchImageSetsInput) (*request.Request, *medicalimaging.SearchImageSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchImageSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.SearchImageSetsOutput)
	return ret0, ret1
}

// SearchImageSetsRequest indicates an expected call of SearchImageSetsRequest
func (mr *MockMedicalImagingAPIMockRecorder) SearchImageSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImageSetsRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).SearchImageSetsRequest), arg0)
}

// SearchImageSetsWithContext mocks base method
func (m *MockMedicalImagingAPI) SearchImageSetsWithContext(arg0 context.Context, arg1 *medicalimaging.SearchImageSetsInput, arg2 ...request.Option) (*medicalimaging.SearchImageSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchImageSetsWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.SearchImageSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchImageSetsWithContext indicates an expected call of SearchImageSetsWithContext
func (mr *MockMedicalImagingAPIMockRecorder) SearchImageSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImageSetsWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).SearchImageSetsWithContext), varargs...)
}

// StartDICOMImportJob mocks base method
func (m *MockMedicalImagingAPI) StartDICOMImportJob(arg0 *medicalimaging.StartDICOMImportJobInput) (*medicalimaging.StartDICOMImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDICOMImportJob", arg0)
	ret0, _ := ret[0].(*medicalimaging.StartDICOMImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDICOMImportJob indicates an expected call of StartDICOMImportJob
func (mr *MockMedicalImagingAPIMockRecorder) StartDICOMImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDICOMImportJob", reflect.TypeOf((*MockMedicalImagingAPI)(nil).StartDICOMImportJob), arg0)
}

// StartDICOMImportJobRequest mocks base method
func (m *MockMedicalImagingAPI) StartDICOMImportJobRequest(arg0 *medicalimaging.StartDICOMImportJobInput) (*request.Request, *medicalimaging.StartDICOMImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDICOMImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.StartDICOMImportJobOutput)
	return ret0, ret1
}

// StartDICOMImportJobRequest indicates an expected call of StartDICOMImportJobRequest
func (mr *MockMedicalImagingAPIMockRecorder) StartDICOMImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDICOMImportJobRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).StartDICOMImportJobRequest), arg0)
}

// StartDICOMImportJobWithContext mocks base method
func (m *MockMedicalImagingAPI) StartDICOMImportJobWithContext(arg0 context.Context, arg1 *medicalimaging.StartDICOMImportJobInput, arg2 ...request.Option) (*medicalimaging.StartDICOMImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDICOMImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.StartDICOMImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDICOMImportJobWithContext indicates an expected call of StartDICOMImportJobWithContext
func (mr *MockMedicalImagingAPIMockRecorder) StartDICOMImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDICOMImportJobWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).StartDICOMImportJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockMedicalImagingAPI) TagResource(arg0 *medicalimaging.TagResourceInput) (*medicalimaging.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*medicalimaging.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockMedicalImagingAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMedicalImagingAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockMedicalImagingAPI) TagResourceRequest(arg0 *medicalimaging.TagResourceInput) (*request.Request, *medicalimaging.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockMedicalImagingAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockMedicalImagingAPI) TagResourceWithContext(arg0 context.Context, arg1 *medicalimaging.TagResourceInput, arg2 ...request.Option) (*medicalimaging.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockMedicalImagingAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockMedicalImagingAPI) UntagResource(arg0 *medicalimaging.UntagResourceInput) (*medicalimaging.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*medicalimaging.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockMedicalImagingAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMedicalImagingAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockMedicalImagingAPI) UntagResourceRequest(arg0 *medicalimaging.UntagResourceInput) (*request.Request, *medicalimaging.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockMedicalImagingAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockMedicalImagingAPI) UntagResourceWithContext(arg0 context.Context, arg1 *medicalimaging.UntagResourceInput, arg2 ...request.Option) (*medicalimaging.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockMedicalImagingAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateImageSetMetadata mocks base method
func (m *MockMedicalImagingAPI) UpdateImageSetMetadata(arg0 *medicalimaging.UpdateImageSetMetadataInput) (*medicalimaging.UpdateImageSetMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageSetMetadata", arg0)
	ret0, _ := ret[0].(*medicalimaging.UpdateImageSetMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImageSetMetadata indicates an expected call of UpdateImageSetMetadata
func (mr *MockMedicalImagingAPIMockRecorder) UpdateImageSetMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageSetMetadata", reflect.TypeOf((*MockMedicalImagingAPI)(nil).UpdateImageSetMetadata), arg0)
}

// UpdateImageSetMetadataRequest mocks base method
func (m *MockMedicalImagingAPI) UpdateImageSetMetadataRequest(arg0 *medicalimaging.UpdateImageSetMetadataInput) (*request.Request, *medicalimaging.UpdateImageSetMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageSetMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*medicalimaging.UpdateImageSetMetadataOutput)
	return ret0, ret1
}

// UpdateImageSetMetadataRequest indicates an expected call of UpdateImageSetMetadataRequest
func (mr *MockMedicalImagingAPIMockRecorder) UpdateImageSetMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageSetMetadataRequest", reflect.TypeOf((*MockMedicalImagingAPI)(nil).UpdateImageSetMetadataRequest), arg0)
}

// UpdateImageSetMetadataWithContext mocks base method
func (m *MockMedicalImagingAPI) UpdateImageSetMetadataWithContext(arg0 context.Context, arg1 *medicalimaging.UpdateImageSetMetadataInput, arg2 ...request.Option) (*medicalimaging.UpdateImageSetMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateImageSetMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*medicalimaging.UpdateImageSetMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImageSetMetadataWithContext indicates an expected call of UpdateImageSetMetadataWithContext
func (mr *MockMedicalImagingAPIMockRecorder) UpdateImageSetMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageSetMetadataWithContext", reflect.TypeOf((*MockMedicalImagingAPI)(nil).UpdateImageSetMetadataWithContext), varargs...)
}
