// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/chime/chimeiface (interfaces: ChimeAPI)

// Package chimemock is a generated GoMock package.
package chimemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	chime "github.com/aws/aws-sdk-go/service/chime"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChimeAPI is a mock of ChimeAPI interface
type MockChimeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChimeAPIMockRecorder
}

// MockChimeAPIMockRecorder is the mock recorder for MockChimeAPI
type MockChimeAPIMockRecorder struct {
	mock *MockChimeAPI
}

// NewMockChimeAPI creates a new mock instance
func NewMockChimeAPI(ctrl *gomock.Controller) *MockChimeAPI {
	mock := &MockChimeAPI{ctrl: ctrl}
	mock.recorder = &MockChimeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChimeAPI) EXPECT() *MockChimeAPIMockRecorder {
	return m.recorder
}

// BatchSuspendUser mocks base method
func (m *MockChimeAPI) BatchSuspendUser(arg0 *chime.BatchSuspendUserInput) (*chime.BatchSuspendUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSuspendUser", arg0)
	ret0, _ := ret[0].(*chime.BatchSuspendUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSuspendUser indicates an expected call of BatchSuspendUser
func (mr *MockChimeAPIMockRecorder) BatchSuspendUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSuspendUser", reflect.TypeOf((*MockChimeAPI)(nil).BatchSuspendUser), arg0)
}

// BatchSuspendUserRequest mocks base method
func (m *MockChimeAPI) BatchSuspendUserRequest(arg0 *chime.BatchSuspendUserInput) (*request.Request, *chime.BatchSuspendUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSuspendUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.BatchSuspendUserOutput)
	return ret0, ret1
}

// BatchSuspendUserRequest indicates an expected call of BatchSuspendUserRequest
func (mr *MockChimeAPIMockRecorder) BatchSuspendUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSuspendUserRequest", reflect.TypeOf((*MockChimeAPI)(nil).BatchSuspendUserRequest), arg0)
}

// BatchSuspendUserWithContext mocks base method
func (m *MockChimeAPI) BatchSuspendUserWithContext(arg0 context.Context, arg1 *chime.BatchSuspendUserInput, arg2 ...request.Option) (*chime.BatchSuspendUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSuspendUserWithContext", varargs...)
	ret0, _ := ret[0].(*chime.BatchSuspendUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSuspendUserWithContext indicates an expected call of BatchSuspendUserWithContext
func (mr *MockChimeAPIMockRecorder) BatchSuspendUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSuspendUserWithContext", reflect.TypeOf((*MockChimeAPI)(nil).BatchSuspendUserWithContext), varargs...)
}

// BatchUnsuspendUser mocks base method
func (m *MockChimeAPI) BatchUnsuspendUser(arg0 *chime.BatchUnsuspendUserInput) (*chime.BatchUnsuspendUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUnsuspendUser", arg0)
	ret0, _ := ret[0].(*chime.BatchUnsuspendUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUnsuspendUser indicates an expected call of BatchUnsuspendUser
func (mr *MockChimeAPIMockRecorder) BatchUnsuspendUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUnsuspendUser", reflect.TypeOf((*MockChimeAPI)(nil).BatchUnsuspendUser), arg0)
}

// BatchUnsuspendUserRequest mocks base method
func (m *MockChimeAPI) BatchUnsuspendUserRequest(arg0 *chime.BatchUnsuspendUserInput) (*request.Request, *chime.BatchUnsuspendUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUnsuspendUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.BatchUnsuspendUserOutput)
	return ret0, ret1
}

// BatchUnsuspendUserRequest indicates an expected call of BatchUnsuspendUserRequest
func (mr *MockChimeAPIMockRecorder) BatchUnsuspendUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUnsuspendUserRequest", reflect.TypeOf((*MockChimeAPI)(nil).BatchUnsuspendUserRequest), arg0)
}

// BatchUnsuspendUserWithContext mocks base method
func (m *MockChimeAPI) BatchUnsuspendUserWithContext(arg0 context.Context, arg1 *chime.BatchUnsuspendUserInput, arg2 ...request.Option) (*chime.BatchUnsuspendUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUnsuspendUserWithContext", varargs...)
	ret0, _ := ret[0].(*chime.BatchUnsuspendUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUnsuspendUserWithContext indicates an expected call of BatchUnsuspendUserWithContext
func (mr *MockChimeAPIMockRecorder) BatchUnsuspendUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUnsuspendUserWithContext", reflect.TypeOf((*MockChimeAPI)(nil).BatchUnsuspendUserWithContext), varargs...)
}

// BatchUpdateUser mocks base method
func (m *MockChimeAPI) BatchUpdateUser(arg0 *chime.BatchUpdateUserInput) (*chime.BatchUpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateUser", arg0)
	ret0, _ := ret[0].(*chime.BatchUpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateUser indicates an expected call of BatchUpdateUser
func (mr *MockChimeAPIMockRecorder) BatchUpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateUser", reflect.TypeOf((*MockChimeAPI)(nil).BatchUpdateUser), arg0)
}

// BatchUpdateUserRequest mocks base method
func (m *MockChimeAPI) BatchUpdateUserRequest(arg0 *chime.BatchUpdateUserInput) (*request.Request, *chime.BatchUpdateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.BatchUpdateUserOutput)
	return ret0, ret1
}

// BatchUpdateUserRequest indicates an expected call of BatchUpdateUserRequest
func (mr *MockChimeAPIMockRecorder) BatchUpdateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateUserRequest", reflect.TypeOf((*MockChimeAPI)(nil).BatchUpdateUserRequest), arg0)
}

// BatchUpdateUserWithContext mocks base method
func (m *MockChimeAPI) BatchUpdateUserWithContext(arg0 context.Context, arg1 *chime.BatchUpdateUserInput, arg2 ...request.Option) (*chime.BatchUpdateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateUserWithContext", varargs...)
	ret0, _ := ret[0].(*chime.BatchUpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateUserWithContext indicates an expected call of BatchUpdateUserWithContext
func (mr *MockChimeAPIMockRecorder) BatchUpdateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateUserWithContext", reflect.TypeOf((*MockChimeAPI)(nil).BatchUpdateUserWithContext), varargs...)
}

// CreateAccount mocks base method
func (m *MockChimeAPI) CreateAccount(arg0 *chime.CreateAccountInput) (*chime.CreateAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0)
	ret0, _ := ret[0].(*chime.CreateAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockChimeAPIMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockChimeAPI)(nil).CreateAccount), arg0)
}

// CreateAccountRequest mocks base method
func (m *MockChimeAPI) CreateAccountRequest(arg0 *chime.CreateAccountInput) (*request.Request, *chime.CreateAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.CreateAccountOutput)
	return ret0, ret1
}

// CreateAccountRequest indicates an expected call of CreateAccountRequest
func (mr *MockChimeAPIMockRecorder) CreateAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountRequest", reflect.TypeOf((*MockChimeAPI)(nil).CreateAccountRequest), arg0)
}

// CreateAccountWithContext mocks base method
func (m *MockChimeAPI) CreateAccountWithContext(arg0 context.Context, arg1 *chime.CreateAccountInput, arg2 ...request.Option) (*chime.CreateAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccountWithContext", varargs...)
	ret0, _ := ret[0].(*chime.CreateAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountWithContext indicates an expected call of CreateAccountWithContext
func (mr *MockChimeAPIMockRecorder) CreateAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountWithContext", reflect.TypeOf((*MockChimeAPI)(nil).CreateAccountWithContext), varargs...)
}

// DeleteAccount mocks base method
func (m *MockChimeAPI) DeleteAccount(arg0 *chime.DeleteAccountInput) (*chime.DeleteAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0)
	ret0, _ := ret[0].(*chime.DeleteAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount
func (mr *MockChimeAPIMockRecorder) DeleteAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockChimeAPI)(nil).DeleteAccount), arg0)
}

// DeleteAccountRequest mocks base method
func (m *MockChimeAPI) DeleteAccountRequest(arg0 *chime.DeleteAccountInput) (*request.Request, *chime.DeleteAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.DeleteAccountOutput)
	return ret0, ret1
}

// DeleteAccountRequest indicates an expected call of DeleteAccountRequest
func (mr *MockChimeAPIMockRecorder) DeleteAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountRequest", reflect.TypeOf((*MockChimeAPI)(nil).DeleteAccountRequest), arg0)
}

// DeleteAccountWithContext mocks base method
func (m *MockChimeAPI) DeleteAccountWithContext(arg0 context.Context, arg1 *chime.DeleteAccountInput, arg2 ...request.Option) (*chime.DeleteAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccountWithContext", varargs...)
	ret0, _ := ret[0].(*chime.DeleteAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccountWithContext indicates an expected call of DeleteAccountWithContext
func (mr *MockChimeAPIMockRecorder) DeleteAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountWithContext", reflect.TypeOf((*MockChimeAPI)(nil).DeleteAccountWithContext), varargs...)
}

// GetAccount mocks base method
func (m *MockChimeAPI) GetAccount(arg0 *chime.GetAccountInput) (*chime.GetAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(*chime.GetAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockChimeAPIMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockChimeAPI)(nil).GetAccount), arg0)
}

// GetAccountRequest mocks base method
func (m *MockChimeAPI) GetAccountRequest(arg0 *chime.GetAccountInput) (*request.Request, *chime.GetAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.GetAccountOutput)
	return ret0, ret1
}

// GetAccountRequest indicates an expected call of GetAccountRequest
func (mr *MockChimeAPIMockRecorder) GetAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountRequest", reflect.TypeOf((*MockChimeAPI)(nil).GetAccountRequest), arg0)
}

// GetAccountSettings mocks base method
func (m *MockChimeAPI) GetAccountSettings(arg0 *chime.GetAccountSettingsInput) (*chime.GetAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSettings", arg0)
	ret0, _ := ret[0].(*chime.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettings indicates an expected call of GetAccountSettings
func (mr *MockChimeAPIMockRecorder) GetAccountSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettings", reflect.TypeOf((*MockChimeAPI)(nil).GetAccountSettings), arg0)
}

// GetAccountSettingsRequest mocks base method
func (m *MockChimeAPI) GetAccountSettingsRequest(arg0 *chime.GetAccountSettingsInput) (*request.Request, *chime.GetAccountSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.GetAccountSettingsOutput)
	return ret0, ret1
}

// GetAccountSettingsRequest indicates an expected call of GetAccountSettingsRequest
func (mr *MockChimeAPIMockRecorder) GetAccountSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettingsRequest", reflect.TypeOf((*MockChimeAPI)(nil).GetAccountSettingsRequest), arg0)
}

// GetAccountSettingsWithContext mocks base method
func (m *MockChimeAPI) GetAccountSettingsWithContext(arg0 context.Context, arg1 *chime.GetAccountSettingsInput, arg2 ...request.Option) (*chime.GetAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*chime.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettingsWithContext indicates an expected call of GetAccountSettingsWithContext
func (mr *MockChimeAPIMockRecorder) GetAccountSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettingsWithContext", reflect.TypeOf((*MockChimeAPI)(nil).GetAccountSettingsWithContext), varargs...)
}

// GetAccountWithContext mocks base method
func (m *MockChimeAPI) GetAccountWithContext(arg0 context.Context, arg1 *chime.GetAccountInput, arg2 ...request.Option) (*chime.GetAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountWithContext", varargs...)
	ret0, _ := ret[0].(*chime.GetAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountWithContext indicates an expected call of GetAccountWithContext
func (mr *MockChimeAPIMockRecorder) GetAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountWithContext", reflect.TypeOf((*MockChimeAPI)(nil).GetAccountWithContext), varargs...)
}

// GetUser mocks base method
func (m *MockChimeAPI) GetUser(arg0 *chime.GetUserInput) (*chime.GetUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*chime.GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockChimeAPIMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockChimeAPI)(nil).GetUser), arg0)
}

// GetUserRequest mocks base method
func (m *MockChimeAPI) GetUserRequest(arg0 *chime.GetUserInput) (*request.Request, *chime.GetUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.GetUserOutput)
	return ret0, ret1
}

// GetUserRequest indicates an expected call of GetUserRequest
func (mr *MockChimeAPIMockRecorder) GetUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRequest", reflect.TypeOf((*MockChimeAPI)(nil).GetUserRequest), arg0)
}

// GetUserWithContext mocks base method
func (m *MockChimeAPI) GetUserWithContext(arg0 context.Context, arg1 *chime.GetUserInput, arg2 ...request.Option) (*chime.GetUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserWithContext", varargs...)
	ret0, _ := ret[0].(*chime.GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithContext indicates an expected call of GetUserWithContext
func (mr *MockChimeAPIMockRecorder) GetUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithContext", reflect.TypeOf((*MockChimeAPI)(nil).GetUserWithContext), varargs...)
}

// InviteUsers mocks base method
func (m *MockChimeAPI) InviteUsers(arg0 *chime.InviteUsersInput) (*chime.InviteUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUsers", arg0)
	ret0, _ := ret[0].(*chime.InviteUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUsers indicates an expected call of InviteUsers
func (mr *MockChimeAPIMockRecorder) InviteUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUsers", reflect.TypeOf((*MockChimeAPI)(nil).InviteUsers), arg0)
}

// InviteUsersRequest mocks base method
func (m *MockChimeAPI) InviteUsersRequest(arg0 *chime.InviteUsersInput) (*request.Request, *chime.InviteUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.InviteUsersOutput)
	return ret0, ret1
}

// InviteUsersRequest indicates an expected call of InviteUsersRequest
func (mr *MockChimeAPIMockRecorder) InviteUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUsersRequest", reflect.TypeOf((*MockChimeAPI)(nil).InviteUsersRequest), arg0)
}

// InviteUsersWithContext mocks base method
func (m *MockChimeAPI) InviteUsersWithContext(arg0 context.Context, arg1 *chime.InviteUsersInput, arg2 ...request.Option) (*chime.InviteUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteUsersWithContext", varargs...)
	ret0, _ := ret[0].(*chime.InviteUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUsersWithContext indicates an expected call of InviteUsersWithContext
func (mr *MockChimeAPIMockRecorder) InviteUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUsersWithContext", reflect.TypeOf((*MockChimeAPI)(nil).InviteUsersWithContext), varargs...)
}

// ListAccounts mocks base method
func (m *MockChimeAPI) ListAccounts(arg0 *chime.ListAccountsInput) (*chime.ListAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0)
	ret0, _ := ret[0].(*chime.ListAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts
func (mr *MockChimeAPIMockRecorder) ListAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockChimeAPI)(nil).ListAccounts), arg0)
}

// ListAccountsPages mocks base method
func (m *MockChimeAPI) ListAccountsPages(arg0 *chime.ListAccountsInput, arg1 func(*chime.ListAccountsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountsPages indicates an expected call of ListAccountsPages
func (mr *MockChimeAPIMockRecorder) ListAccountsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsPages", reflect.TypeOf((*MockChimeAPI)(nil).ListAccountsPages), arg0, arg1)
}

// ListAccountsPagesWithContext mocks base method
func (m *MockChimeAPI) ListAccountsPagesWithContext(arg0 context.Context, arg1 *chime.ListAccountsInput, arg2 func(*chime.ListAccountsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountsPagesWithContext indicates an expected call of ListAccountsPagesWithContext
func (mr *MockChimeAPIMockRecorder) ListAccountsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsPagesWithContext", reflect.TypeOf((*MockChimeAPI)(nil).ListAccountsPagesWithContext), varargs...)
}

// ListAccountsRequest mocks base method
func (m *MockChimeAPI) ListAccountsRequest(arg0 *chime.ListAccountsInput) (*request.Request, *chime.ListAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.ListAccountsOutput)
	return ret0, ret1
}

// ListAccountsRequest indicates an expected call of ListAccountsRequest
func (mr *MockChimeAPIMockRecorder) ListAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsRequest", reflect.TypeOf((*MockChimeAPI)(nil).ListAccountsRequest), arg0)
}

// ListAccountsWithContext mocks base method
func (m *MockChimeAPI) ListAccountsWithContext(arg0 context.Context, arg1 *chime.ListAccountsInput, arg2 ...request.Option) (*chime.ListAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*chime.ListAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsWithContext indicates an expected call of ListAccountsWithContext
func (mr *MockChimeAPIMockRecorder) ListAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsWithContext", reflect.TypeOf((*MockChimeAPI)(nil).ListAccountsWithContext), varargs...)
}

// ListUsers mocks base method
func (m *MockChimeAPI) ListUsers(arg0 *chime.ListUsersInput) (*chime.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].(*chime.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockChimeAPIMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockChimeAPI)(nil).ListUsers), arg0)
}

// ListUsersPages mocks base method
func (m *MockChimeAPI) ListUsersPages(arg0 *chime.ListUsersInput, arg1 func(*chime.ListUsersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPages indicates an expected call of ListUsersPages
func (mr *MockChimeAPIMockRecorder) ListUsersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPages", reflect.TypeOf((*MockChimeAPI)(nil).ListUsersPages), arg0, arg1)
}

// ListUsersPagesWithContext mocks base method
func (m *MockChimeAPI) ListUsersPagesWithContext(arg0 context.Context, arg1 *chime.ListUsersInput, arg2 func(*chime.ListUsersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPagesWithContext indicates an expected call of ListUsersPagesWithContext
func (mr *MockChimeAPIMockRecorder) ListUsersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPagesWithContext", reflect.TypeOf((*MockChimeAPI)(nil).ListUsersPagesWithContext), varargs...)
}

// ListUsersRequest mocks base method
func (m *MockChimeAPI) ListUsersRequest(arg0 *chime.ListUsersInput) (*request.Request, *chime.ListUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.ListUsersOutput)
	return ret0, ret1
}

// ListUsersRequest indicates an expected call of ListUsersRequest
func (mr *MockChimeAPIMockRecorder) ListUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersRequest", reflect.TypeOf((*MockChimeAPI)(nil).ListUsersRequest), arg0)
}

// ListUsersWithContext mocks base method
func (m *MockChimeAPI) ListUsersWithContext(arg0 context.Context, arg1 *chime.ListUsersInput, arg2 ...request.Option) (*chime.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersWithContext", varargs...)
	ret0, _ := ret[0].(*chime.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersWithContext indicates an expected call of ListUsersWithContext
func (mr *MockChimeAPIMockRecorder) ListUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersWithContext", reflect.TypeOf((*MockChimeAPI)(nil).ListUsersWithContext), varargs...)
}

// LogoutUser mocks base method
func (m *MockChimeAPI) LogoutUser(arg0 *chime.LogoutUserInput) (*chime.LogoutUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", arg0)
	ret0, _ := ret[0].(*chime.LogoutUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogoutUser indicates an expected call of LogoutUser
func (mr *MockChimeAPIMockRecorder) LogoutUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockChimeAPI)(nil).LogoutUser), arg0)
}

// LogoutUserRequest mocks base method
func (m *MockChimeAPI) LogoutUserRequest(arg0 *chime.LogoutUserInput) (*request.Request, *chime.LogoutUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.LogoutUserOutput)
	return ret0, ret1
}

// LogoutUserRequest indicates an expected call of LogoutUserRequest
func (mr *MockChimeAPIMockRecorder) LogoutUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUserRequest", reflect.TypeOf((*MockChimeAPI)(nil).LogoutUserRequest), arg0)
}

// LogoutUserWithContext mocks base method
func (m *MockChimeAPI) LogoutUserWithContext(arg0 context.Context, arg1 *chime.LogoutUserInput, arg2 ...request.Option) (*chime.LogoutUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LogoutUserWithContext", varargs...)
	ret0, _ := ret[0].(*chime.LogoutUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogoutUserWithContext indicates an expected call of LogoutUserWithContext
func (mr *MockChimeAPIMockRecorder) LogoutUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUserWithContext", reflect.TypeOf((*MockChimeAPI)(nil).LogoutUserWithContext), varargs...)
}

// ResetPersonalPIN mocks base method
func (m *MockChimeAPI) ResetPersonalPIN(arg0 *chime.ResetPersonalPINInput) (*chime.ResetPersonalPINOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPersonalPIN", arg0)
	ret0, _ := ret[0].(*chime.ResetPersonalPINOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPersonalPIN indicates an expected call of ResetPersonalPIN
func (mr *MockChimeAPIMockRecorder) ResetPersonalPIN(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPersonalPIN", reflect.TypeOf((*MockChimeAPI)(nil).ResetPersonalPIN), arg0)
}

// ResetPersonalPINRequest mocks base method
func (m *MockChimeAPI) ResetPersonalPINRequest(arg0 *chime.ResetPersonalPINInput) (*request.Request, *chime.ResetPersonalPINOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPersonalPINRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.ResetPersonalPINOutput)
	return ret0, ret1
}

// ResetPersonalPINRequest indicates an expected call of ResetPersonalPINRequest
func (mr *MockChimeAPIMockRecorder) ResetPersonalPINRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPersonalPINRequest", reflect.TypeOf((*MockChimeAPI)(nil).ResetPersonalPINRequest), arg0)
}

// ResetPersonalPINWithContext mocks base method
func (m *MockChimeAPI) ResetPersonalPINWithContext(arg0 context.Context, arg1 *chime.ResetPersonalPINInput, arg2 ...request.Option) (*chime.ResetPersonalPINOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetPersonalPINWithContext", varargs...)
	ret0, _ := ret[0].(*chime.ResetPersonalPINOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPersonalPINWithContext indicates an expected call of ResetPersonalPINWithContext
func (mr *MockChimeAPIMockRecorder) ResetPersonalPINWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPersonalPINWithContext", reflect.TypeOf((*MockChimeAPI)(nil).ResetPersonalPINWithContext), varargs...)
}

// UpdateAccount mocks base method
func (m *MockChimeAPI) UpdateAccount(arg0 *chime.UpdateAccountInput) (*chime.UpdateAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0)
	ret0, _ := ret[0].(*chime.UpdateAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockChimeAPIMockRecorder) UpdateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockChimeAPI)(nil).UpdateAccount), arg0)
}

// UpdateAccountRequest mocks base method
func (m *MockChimeAPI) UpdateAccountRequest(arg0 *chime.UpdateAccountInput) (*request.Request, *chime.UpdateAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.UpdateAccountOutput)
	return ret0, ret1
}

// UpdateAccountRequest indicates an expected call of UpdateAccountRequest
func (mr *MockChimeAPIMockRecorder) UpdateAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountRequest", reflect.TypeOf((*MockChimeAPI)(nil).UpdateAccountRequest), arg0)
}

// UpdateAccountSettings mocks base method
func (m *MockChimeAPI) UpdateAccountSettings(arg0 *chime.UpdateAccountSettingsInput) (*chime.UpdateAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountSettings", arg0)
	ret0, _ := ret[0].(*chime.UpdateAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountSettings indicates an expected call of UpdateAccountSettings
func (mr *MockChimeAPIMockRecorder) UpdateAccountSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountSettings", reflect.TypeOf((*MockChimeAPI)(nil).UpdateAccountSettings), arg0)
}

// UpdateAccountSettingsRequest mocks base method
func (m *MockChimeAPI) UpdateAccountSettingsRequest(arg0 *chime.UpdateAccountSettingsInput) (*request.Request, *chime.UpdateAccountSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.UpdateAccountSettingsOutput)
	return ret0, ret1
}

// UpdateAccountSettingsRequest indicates an expected call of UpdateAccountSettingsRequest
func (mr *MockChimeAPIMockRecorder) UpdateAccountSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountSettingsRequest", reflect.TypeOf((*MockChimeAPI)(nil).UpdateAccountSettingsRequest), arg0)
}

// UpdateAccountSettingsWithContext mocks base method
func (m *MockChimeAPI) UpdateAccountSettingsWithContext(arg0 context.Context, arg1 *chime.UpdateAccountSettingsInput, arg2 ...request.Option) (*chime.UpdateAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccountSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*chime.UpdateAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountSettingsWithContext indicates an expected call of UpdateAccountSettingsWithContext
func (mr *MockChimeAPIMockRecorder) UpdateAccountSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountSettingsWithContext", reflect.TypeOf((*MockChimeAPI)(nil).UpdateAccountSettingsWithContext), varargs...)
}

// UpdateAccountWithContext mocks base method
func (m *MockChimeAPI) UpdateAccountWithContext(arg0 context.Context, arg1 *chime.UpdateAccountInput, arg2 ...request.Option) (*chime.UpdateAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccountWithContext", varargs...)
	ret0, _ := ret[0].(*chime.UpdateAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountWithContext indicates an expected call of UpdateAccountWithContext
func (mr *MockChimeAPIMockRecorder) UpdateAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountWithContext", reflect.TypeOf((*MockChimeAPI)(nil).UpdateAccountWithContext), varargs...)
}

// UpdateUser mocks base method
func (m *MockChimeAPI) UpdateUser(arg0 *chime.UpdateUserInput) (*chime.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*chime.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockChimeAPIMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockChimeAPI)(nil).UpdateUser), arg0)
}

// UpdateUserRequest mocks base method
func (m *MockChimeAPI) UpdateUserRequest(arg0 *chime.UpdateUserInput) (*request.Request, *chime.UpdateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chime.UpdateUserOutput)
	return ret0, ret1
}

// UpdateUserRequest indicates an expected call of UpdateUserRequest
func (mr *MockChimeAPIMockRecorder) UpdateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRequest", reflect.TypeOf((*MockChimeAPI)(nil).UpdateUserRequest), arg0)
}

// UpdateUserWithContext mocks base method
func (m *MockChimeAPI) UpdateUserWithContext(arg0 context.Context, arg1 *chime.UpdateUserInput, arg2 ...request.Option) (*chime.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserWithContext", varargs...)
	ret0, _ := ret[0].(*chime.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserWithContext indicates an expected call of UpdateUserWithContext
func (mr *MockChimeAPIMockRecorder) UpdateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWithContext", reflect.TypeOf((*MockChimeAPI)(nil).UpdateUserWithContext), varargs...)
}
