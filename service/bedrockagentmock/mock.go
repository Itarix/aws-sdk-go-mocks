// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/bedrockagent/bedrockagentiface (interfaces: BedrockAgentAPI)

// Package bedrockagentmock is a generated GoMock package.
package bedrockagentmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	bedrockagent "github.com/aws/aws-sdk-go/service/bedrockagent"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBedrockAgentAPI is a mock of BedrockAgentAPI interface
type MockBedrockAgentAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBedrockAgentAPIMockRecorder
}

// MockBedrockAgentAPIMockRecorder is the mock recorder for MockBedrockAgentAPI
type MockBedrockAgentAPIMockRecorder struct {
	mock *MockBedrockAgentAPI
}

// NewMockBedrockAgentAPI creates a new mock instance
func NewMockBedrockAgentAPI(ctrl *gomock.Controller) *MockBedrockAgentAPI {
	mock := &MockBedrockAgentAPI{ctrl: ctrl}
	mock.recorder = &MockBedrockAgentAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBedrockAgentAPI) EXPECT() *MockBedrockAgentAPIMockRecorder {
	return m.recorder
}

// AssociateAgentKnowledgeBase mocks base method
func (m *MockBedrockAgentAPI) AssociateAgentKnowledgeBase(arg0 *bedrockagent.AssociateAgentKnowledgeBaseInput) (*bedrockagent.AssociateAgentKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAgentKnowledgeBase", arg0)
	ret0, _ := ret[0].(*bedrockagent.AssociateAgentKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAgentKnowledgeBase indicates an expected call of AssociateAgentKnowledgeBase
func (mr *MockBedrockAgentAPIMockRecorder) AssociateAgentKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAgentKnowledgeBase", reflect.TypeOf((*MockBedrockAgentAPI)(nil).AssociateAgentKnowledgeBase), arg0)
}

// AssociateAgentKnowledgeBaseRequest mocks base method
func (m *MockBedrockAgentAPI) AssociateAgentKnowledgeBaseRequest(arg0 *bedrockagent.AssociateAgentKnowledgeBaseInput) (*request.Request, *bedrockagent.AssociateAgentKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAgentKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.AssociateAgentKnowledgeBaseOutput)
	return ret0, ret1
}

// AssociateAgentKnowledgeBaseRequest indicates an expected call of AssociateAgentKnowledgeBaseRequest
func (mr *MockBedrockAgentAPIMockRecorder) AssociateAgentKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAgentKnowledgeBaseRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).AssociateAgentKnowledgeBaseRequest), arg0)
}

// AssociateAgentKnowledgeBaseWithContext mocks base method
func (m *MockBedrockAgentAPI) AssociateAgentKnowledgeBaseWithContext(arg0 context.Context, arg1 *bedrockagent.AssociateAgentKnowledgeBaseInput, arg2 ...request.Option) (*bedrockagent.AssociateAgentKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateAgentKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.AssociateAgentKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAgentKnowledgeBaseWithContext indicates an expected call of AssociateAgentKnowledgeBaseWithContext
func (mr *MockBedrockAgentAPIMockRecorder) AssociateAgentKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAgentKnowledgeBaseWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).AssociateAgentKnowledgeBaseWithContext), varargs...)
}

// CreateAgent mocks base method
func (m *MockBedrockAgentAPI) CreateAgent(arg0 *bedrockagent.CreateAgentInput) (*bedrockagent.CreateAgentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgent", arg0)
	ret0, _ := ret[0].(*bedrockagent.CreateAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgent indicates an expected call of CreateAgent
func (mr *MockBedrockAgentAPIMockRecorder) CreateAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgent", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateAgent), arg0)
}

// CreateAgentActionGroup mocks base method
func (m *MockBedrockAgentAPI) CreateAgentActionGroup(arg0 *bedrockagent.CreateAgentActionGroupInput) (*bedrockagent.CreateAgentActionGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentActionGroup", arg0)
	ret0, _ := ret[0].(*bedrockagent.CreateAgentActionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentActionGroup indicates an expected call of CreateAgentActionGroup
func (mr *MockBedrockAgentAPIMockRecorder) CreateAgentActionGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentActionGroup", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateAgentActionGroup), arg0)
}

// CreateAgentActionGroupRequest mocks base method
func (m *MockBedrockAgentAPI) CreateAgentActionGroupRequest(arg0 *bedrockagent.CreateAgentActionGroupInput) (*request.Request, *bedrockagent.CreateAgentActionGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentActionGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.CreateAgentActionGroupOutput)
	return ret0, ret1
}

// CreateAgentActionGroupRequest indicates an expected call of CreateAgentActionGroupRequest
func (mr *MockBedrockAgentAPIMockRecorder) CreateAgentActionGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentActionGroupRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateAgentActionGroupRequest), arg0)
}

// CreateAgentActionGroupWithContext mocks base method
func (m *MockBedrockAgentAPI) CreateAgentActionGroupWithContext(arg0 context.Context, arg1 *bedrockagent.CreateAgentActionGroupInput, arg2 ...request.Option) (*bedrockagent.CreateAgentActionGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAgentActionGroupWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.CreateAgentActionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentActionGroupWithContext indicates an expected call of CreateAgentActionGroupWithContext
func (mr *MockBedrockAgentAPIMockRecorder) CreateAgentActionGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentActionGroupWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateAgentActionGroupWithContext), varargs...)
}

// CreateAgentAlias mocks base method
func (m *MockBedrockAgentAPI) CreateAgentAlias(arg0 *bedrockagent.CreateAgentAliasInput) (*bedrockagent.CreateAgentAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentAlias", arg0)
	ret0, _ := ret[0].(*bedrockagent.CreateAgentAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentAlias indicates an expected call of CreateAgentAlias
func (mr *MockBedrockAgentAPIMockRecorder) CreateAgentAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentAlias", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateAgentAlias), arg0)
}

// CreateAgentAliasRequest mocks base method
func (m *MockBedrockAgentAPI) CreateAgentAliasRequest(arg0 *bedrockagent.CreateAgentAliasInput) (*request.Request, *bedrockagent.CreateAgentAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.CreateAgentAliasOutput)
	return ret0, ret1
}

// CreateAgentAliasRequest indicates an expected call of CreateAgentAliasRequest
func (mr *MockBedrockAgentAPIMockRecorder) CreateAgentAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentAliasRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateAgentAliasRequest), arg0)
}

// CreateAgentAliasWithContext mocks base method
func (m *MockBedrockAgentAPI) CreateAgentAliasWithContext(arg0 context.Context, arg1 *bedrockagent.CreateAgentAliasInput, arg2 ...request.Option) (*bedrockagent.CreateAgentAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAgentAliasWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.CreateAgentAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentAliasWithContext indicates an expected call of CreateAgentAliasWithContext
func (mr *MockBedrockAgentAPIMockRecorder) CreateAgentAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentAliasWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateAgentAliasWithContext), varargs...)
}

// CreateAgentRequest mocks base method
func (m *MockBedrockAgentAPI) CreateAgentRequest(arg0 *bedrockagent.CreateAgentInput) (*request.Request, *bedrockagent.CreateAgentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.CreateAgentOutput)
	return ret0, ret1
}

// CreateAgentRequest indicates an expected call of CreateAgentRequest
func (mr *MockBedrockAgentAPIMockRecorder) CreateAgentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateAgentRequest), arg0)
}

// CreateAgentWithContext mocks base method
func (m *MockBedrockAgentAPI) CreateAgentWithContext(arg0 context.Context, arg1 *bedrockagent.CreateAgentInput, arg2 ...request.Option) (*bedrockagent.CreateAgentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAgentWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.CreateAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentWithContext indicates an expected call of CreateAgentWithContext
func (mr *MockBedrockAgentAPIMockRecorder) CreateAgentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateAgentWithContext), varargs...)
}

// CreateDataSource mocks base method
func (m *MockBedrockAgentAPI) CreateDataSource(arg0 *bedrockagent.CreateDataSourceInput) (*bedrockagent.CreateDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSource", arg0)
	ret0, _ := ret[0].(*bedrockagent.CreateDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataSource indicates an expected call of CreateDataSource
func (mr *MockBedrockAgentAPIMockRecorder) CreateDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSource", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateDataSource), arg0)
}

// CreateDataSourceRequest mocks base method
func (m *MockBedrockAgentAPI) CreateDataSourceRequest(arg0 *bedrockagent.CreateDataSourceInput) (*request.Request, *bedrockagent.CreateDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.CreateDataSourceOutput)
	return ret0, ret1
}

// CreateDataSourceRequest indicates an expected call of CreateDataSourceRequest
func (mr *MockBedrockAgentAPIMockRecorder) CreateDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSourceRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateDataSourceRequest), arg0)
}

// CreateDataSourceWithContext mocks base method
func (m *MockBedrockAgentAPI) CreateDataSourceWithContext(arg0 context.Context, arg1 *bedrockagent.CreateDataSourceInput, arg2 ...request.Option) (*bedrockagent.CreateDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.CreateDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataSourceWithContext indicates an expected call of CreateDataSourceWithContext
func (mr *MockBedrockAgentAPIMockRecorder) CreateDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSourceWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateDataSourceWithContext), varargs...)
}

// CreateFlow mocks base method
func (m *MockBedrockAgentAPI) CreateFlow(arg0 *bedrockagent.CreateFlowInput) (*bedrockagent.CreateFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlow", arg0)
	ret0, _ := ret[0].(*bedrockagent.CreateFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlow indicates an expected call of CreateFlow
func (mr *MockBedrockAgentAPIMockRecorder) CreateFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlow", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateFlow), arg0)
}

// CreateFlowAlias mocks base method
func (m *MockBedrockAgentAPI) CreateFlowAlias(arg0 *bedrockagent.CreateFlowAliasInput) (*bedrockagent.CreateFlowAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlowAlias", arg0)
	ret0, _ := ret[0].(*bedrockagent.CreateFlowAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlowAlias indicates an expected call of CreateFlowAlias
func (mr *MockBedrockAgentAPIMockRecorder) CreateFlowAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowAlias", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateFlowAlias), arg0)
}

// CreateFlowAliasRequest mocks base method
func (m *MockBedrockAgentAPI) CreateFlowAliasRequest(arg0 *bedrockagent.CreateFlowAliasInput) (*request.Request, *bedrockagent.CreateFlowAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlowAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.CreateFlowAliasOutput)
	return ret0, ret1
}

// CreateFlowAliasRequest indicates an expected call of CreateFlowAliasRequest
func (mr *MockBedrockAgentAPIMockRecorder) CreateFlowAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowAliasRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateFlowAliasRequest), arg0)
}

// CreateFlowAliasWithContext mocks base method
func (m *MockBedrockAgentAPI) CreateFlowAliasWithContext(arg0 context.Context, arg1 *bedrockagent.CreateFlowAliasInput, arg2 ...request.Option) (*bedrockagent.CreateFlowAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFlowAliasWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.CreateFlowAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlowAliasWithContext indicates an expected call of CreateFlowAliasWithContext
func (mr *MockBedrockAgentAPIMockRecorder) CreateFlowAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowAliasWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateFlowAliasWithContext), varargs...)
}

// CreateFlowRequest mocks base method
func (m *MockBedrockAgentAPI) CreateFlowRequest(arg0 *bedrockagent.CreateFlowInput) (*request.Request, *bedrockagent.CreateFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.CreateFlowOutput)
	return ret0, ret1
}

// CreateFlowRequest indicates an expected call of CreateFlowRequest
func (mr *MockBedrockAgentAPIMockRecorder) CreateFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateFlowRequest), arg0)
}

// CreateFlowVersion mocks base method
func (m *MockBedrockAgentAPI) CreateFlowVersion(arg0 *bedrockagent.CreateFlowVersionInput) (*bedrockagent.CreateFlowVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlowVersion", arg0)
	ret0, _ := ret[0].(*bedrockagent.CreateFlowVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlowVersion indicates an expected call of CreateFlowVersion
func (mr *MockBedrockAgentAPIMockRecorder) CreateFlowVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowVersion", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateFlowVersion), arg0)
}

// CreateFlowVersionRequest mocks base method
func (m *MockBedrockAgentAPI) CreateFlowVersionRequest(arg0 *bedrockagent.CreateFlowVersionInput) (*request.Request, *bedrockagent.CreateFlowVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlowVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.CreateFlowVersionOutput)
	return ret0, ret1
}

// CreateFlowVersionRequest indicates an expected call of CreateFlowVersionRequest
func (mr *MockBedrockAgentAPIMockRecorder) CreateFlowVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowVersionRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateFlowVersionRequest), arg0)
}

// CreateFlowVersionWithContext mocks base method
func (m *MockBedrockAgentAPI) CreateFlowVersionWithContext(arg0 context.Context, arg1 *bedrockagent.CreateFlowVersionInput, arg2 ...request.Option) (*bedrockagent.CreateFlowVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFlowVersionWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.CreateFlowVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlowVersionWithContext indicates an expected call of CreateFlowVersionWithContext
func (mr *MockBedrockAgentAPIMockRecorder) CreateFlowVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowVersionWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateFlowVersionWithContext), varargs...)
}

// CreateFlowWithContext mocks base method
func (m *MockBedrockAgentAPI) CreateFlowWithContext(arg0 context.Context, arg1 *bedrockagent.CreateFlowInput, arg2 ...request.Option) (*bedrockagent.CreateFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFlowWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.CreateFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlowWithContext indicates an expected call of CreateFlowWithContext
func (mr *MockBedrockAgentAPIMockRecorder) CreateFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateFlowWithContext), varargs...)
}

// CreateKnowledgeBase mocks base method
func (m *MockBedrockAgentAPI) CreateKnowledgeBase(arg0 *bedrockagent.CreateKnowledgeBaseInput) (*bedrockagent.CreateKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKnowledgeBase", arg0)
	ret0, _ := ret[0].(*bedrockagent.CreateKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKnowledgeBase indicates an expected call of CreateKnowledgeBase
func (mr *MockBedrockAgentAPIMockRecorder) CreateKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeBase", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateKnowledgeBase), arg0)
}

// CreateKnowledgeBaseRequest mocks base method
func (m *MockBedrockAgentAPI) CreateKnowledgeBaseRequest(arg0 *bedrockagent.CreateKnowledgeBaseInput) (*request.Request, *bedrockagent.CreateKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.CreateKnowledgeBaseOutput)
	return ret0, ret1
}

// CreateKnowledgeBaseRequest indicates an expected call of CreateKnowledgeBaseRequest
func (mr *MockBedrockAgentAPIMockRecorder) CreateKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeBaseRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateKnowledgeBaseRequest), arg0)
}

// CreateKnowledgeBaseWithContext mocks base method
func (m *MockBedrockAgentAPI) CreateKnowledgeBaseWithContext(arg0 context.Context, arg1 *bedrockagent.CreateKnowledgeBaseInput, arg2 ...request.Option) (*bedrockagent.CreateKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.CreateKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKnowledgeBaseWithContext indicates an expected call of CreateKnowledgeBaseWithContext
func (mr *MockBedrockAgentAPIMockRecorder) CreateKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeBaseWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreateKnowledgeBaseWithContext), varargs...)
}

// CreatePrompt mocks base method
func (m *MockBedrockAgentAPI) CreatePrompt(arg0 *bedrockagent.CreatePromptInput) (*bedrockagent.CreatePromptOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrompt", arg0)
	ret0, _ := ret[0].(*bedrockagent.CreatePromptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrompt indicates an expected call of CreatePrompt
func (mr *MockBedrockAgentAPIMockRecorder) CreatePrompt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrompt", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreatePrompt), arg0)
}

// CreatePromptRequest mocks base method
func (m *MockBedrockAgentAPI) CreatePromptRequest(arg0 *bedrockagent.CreatePromptInput) (*request.Request, *bedrockagent.CreatePromptOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromptRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.CreatePromptOutput)
	return ret0, ret1
}

// CreatePromptRequest indicates an expected call of CreatePromptRequest
func (mr *MockBedrockAgentAPIMockRecorder) CreatePromptRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromptRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreatePromptRequest), arg0)
}

// CreatePromptVersion mocks base method
func (m *MockBedrockAgentAPI) CreatePromptVersion(arg0 *bedrockagent.CreatePromptVersionInput) (*bedrockagent.CreatePromptVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromptVersion", arg0)
	ret0, _ := ret[0].(*bedrockagent.CreatePromptVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromptVersion indicates an expected call of CreatePromptVersion
func (mr *MockBedrockAgentAPIMockRecorder) CreatePromptVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromptVersion", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreatePromptVersion), arg0)
}

// CreatePromptVersionRequest mocks base method
func (m *MockBedrockAgentAPI) CreatePromptVersionRequest(arg0 *bedrockagent.CreatePromptVersionInput) (*request.Request, *bedrockagent.CreatePromptVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromptVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.CreatePromptVersionOutput)
	return ret0, ret1
}

// CreatePromptVersionRequest indicates an expected call of CreatePromptVersionRequest
func (mr *MockBedrockAgentAPIMockRecorder) CreatePromptVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromptVersionRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreatePromptVersionRequest), arg0)
}

// CreatePromptVersionWithContext mocks base method
func (m *MockBedrockAgentAPI) CreatePromptVersionWithContext(arg0 context.Context, arg1 *bedrockagent.CreatePromptVersionInput, arg2 ...request.Option) (*bedrockagent.CreatePromptVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePromptVersionWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.CreatePromptVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromptVersionWithContext indicates an expected call of CreatePromptVersionWithContext
func (mr *MockBedrockAgentAPIMockRecorder) CreatePromptVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromptVersionWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreatePromptVersionWithContext), varargs...)
}

// CreatePromptWithContext mocks base method
func (m *MockBedrockAgentAPI) CreatePromptWithContext(arg0 context.Context, arg1 *bedrockagent.CreatePromptInput, arg2 ...request.Option) (*bedrockagent.CreatePromptOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePromptWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.CreatePromptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromptWithContext indicates an expected call of CreatePromptWithContext
func (mr *MockBedrockAgentAPIMockRecorder) CreatePromptWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromptWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).CreatePromptWithContext), varargs...)
}

// DeleteAgent mocks base method
func (m *MockBedrockAgentAPI) DeleteAgent(arg0 *bedrockagent.DeleteAgentInput) (*bedrockagent.DeleteAgentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgent", arg0)
	ret0, _ := ret[0].(*bedrockagent.DeleteAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgent indicates an expected call of DeleteAgent
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgent", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgent), arg0)
}

// DeleteAgentActionGroup mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentActionGroup(arg0 *bedrockagent.DeleteAgentActionGroupInput) (*bedrockagent.DeleteAgentActionGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentActionGroup", arg0)
	ret0, _ := ret[0].(*bedrockagent.DeleteAgentActionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgentActionGroup indicates an expected call of DeleteAgentActionGroup
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentActionGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentActionGroup", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentActionGroup), arg0)
}

// DeleteAgentActionGroupRequest mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentActionGroupRequest(arg0 *bedrockagent.DeleteAgentActionGroupInput) (*request.Request, *bedrockagent.DeleteAgentActionGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentActionGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DeleteAgentActionGroupOutput)
	return ret0, ret1
}

// DeleteAgentActionGroupRequest indicates an expected call of DeleteAgentActionGroupRequest
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentActionGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentActionGroupRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentActionGroupRequest), arg0)
}

// DeleteAgentActionGroupWithContext mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentActionGroupWithContext(arg0 context.Context, arg1 *bedrockagent.DeleteAgentActionGroupInput, arg2 ...request.Option) (*bedrockagent.DeleteAgentActionGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAgentActionGroupWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DeleteAgentActionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgentActionGroupWithContext indicates an expected call of DeleteAgentActionGroupWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentActionGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentActionGroupWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentActionGroupWithContext), varargs...)
}

// DeleteAgentAlias mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentAlias(arg0 *bedrockagent.DeleteAgentAliasInput) (*bedrockagent.DeleteAgentAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentAlias", arg0)
	ret0, _ := ret[0].(*bedrockagent.DeleteAgentAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgentAlias indicates an expected call of DeleteAgentAlias
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentAlias", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentAlias), arg0)
}

// DeleteAgentAliasRequest mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentAliasRequest(arg0 *bedrockagent.DeleteAgentAliasInput) (*request.Request, *bedrockagent.DeleteAgentAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DeleteAgentAliasOutput)
	return ret0, ret1
}

// DeleteAgentAliasRequest indicates an expected call of DeleteAgentAliasRequest
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentAliasRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentAliasRequest), arg0)
}

// DeleteAgentAliasWithContext mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentAliasWithContext(arg0 context.Context, arg1 *bedrockagent.DeleteAgentAliasInput, arg2 ...request.Option) (*bedrockagent.DeleteAgentAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAgentAliasWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DeleteAgentAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgentAliasWithContext indicates an expected call of DeleteAgentAliasWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentAliasWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentAliasWithContext), varargs...)
}

// DeleteAgentRequest mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentRequest(arg0 *bedrockagent.DeleteAgentInput) (*request.Request, *bedrockagent.DeleteAgentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DeleteAgentOutput)
	return ret0, ret1
}

// DeleteAgentRequest indicates an expected call of DeleteAgentRequest
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentRequest), arg0)
}

// DeleteAgentVersion mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentVersion(arg0 *bedrockagent.DeleteAgentVersionInput) (*bedrockagent.DeleteAgentVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentVersion", arg0)
	ret0, _ := ret[0].(*bedrockagent.DeleteAgentVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgentVersion indicates an expected call of DeleteAgentVersion
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentVersion", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentVersion), arg0)
}

// DeleteAgentVersionRequest mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentVersionRequest(arg0 *bedrockagent.DeleteAgentVersionInput) (*request.Request, *bedrockagent.DeleteAgentVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DeleteAgentVersionOutput)
	return ret0, ret1
}

// DeleteAgentVersionRequest indicates an expected call of DeleteAgentVersionRequest
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentVersionRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentVersionRequest), arg0)
}

// DeleteAgentVersionWithContext mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentVersionWithContext(arg0 context.Context, arg1 *bedrockagent.DeleteAgentVersionInput, arg2 ...request.Option) (*bedrockagent.DeleteAgentVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAgentVersionWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DeleteAgentVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgentVersionWithContext indicates an expected call of DeleteAgentVersionWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentVersionWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentVersionWithContext), varargs...)
}

// DeleteAgentWithContext mocks base method
func (m *MockBedrockAgentAPI) DeleteAgentWithContext(arg0 context.Context, arg1 *bedrockagent.DeleteAgentInput, arg2 ...request.Option) (*bedrockagent.DeleteAgentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAgentWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DeleteAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgentWithContext indicates an expected call of DeleteAgentWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DeleteAgentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteAgentWithContext), varargs...)
}

// DeleteDataSource mocks base method
func (m *MockBedrockAgentAPI) DeleteDataSource(arg0 *bedrockagent.DeleteDataSourceInput) (*bedrockagent.DeleteDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataSource", arg0)
	ret0, _ := ret[0].(*bedrockagent.DeleteDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataSource indicates an expected call of DeleteDataSource
func (mr *MockBedrockAgentAPIMockRecorder) DeleteDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSource", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteDataSource), arg0)
}

// DeleteDataSourceRequest mocks base method
func (m *MockBedrockAgentAPI) DeleteDataSourceRequest(arg0 *bedrockagent.DeleteDataSourceInput) (*request.Request, *bedrockagent.DeleteDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DeleteDataSourceOutput)
	return ret0, ret1
}

// DeleteDataSourceRequest indicates an expected call of DeleteDataSourceRequest
func (mr *MockBedrockAgentAPIMockRecorder) DeleteDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSourceRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteDataSourceRequest), arg0)
}

// DeleteDataSourceWithContext mocks base method
func (m *MockBedrockAgentAPI) DeleteDataSourceWithContext(arg0 context.Context, arg1 *bedrockagent.DeleteDataSourceInput, arg2 ...request.Option) (*bedrockagent.DeleteDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DeleteDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataSourceWithContext indicates an expected call of DeleteDataSourceWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DeleteDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSourceWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteDataSourceWithContext), varargs...)
}

// DeleteFlow mocks base method
func (m *MockBedrockAgentAPI) DeleteFlow(arg0 *bedrockagent.DeleteFlowInput) (*bedrockagent.DeleteFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlow", arg0)
	ret0, _ := ret[0].(*bedrockagent.DeleteFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlow indicates an expected call of DeleteFlow
func (mr *MockBedrockAgentAPIMockRecorder) DeleteFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlow", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteFlow), arg0)
}

// DeleteFlowAlias mocks base method
func (m *MockBedrockAgentAPI) DeleteFlowAlias(arg0 *bedrockagent.DeleteFlowAliasInput) (*bedrockagent.DeleteFlowAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowAlias", arg0)
	ret0, _ := ret[0].(*bedrockagent.DeleteFlowAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlowAlias indicates an expected call of DeleteFlowAlias
func (mr *MockBedrockAgentAPIMockRecorder) DeleteFlowAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowAlias", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteFlowAlias), arg0)
}

// DeleteFlowAliasRequest mocks base method
func (m *MockBedrockAgentAPI) DeleteFlowAliasRequest(arg0 *bedrockagent.DeleteFlowAliasInput) (*request.Request, *bedrockagent.DeleteFlowAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DeleteFlowAliasOutput)
	return ret0, ret1
}

// DeleteFlowAliasRequest indicates an expected call of DeleteFlowAliasRequest
func (mr *MockBedrockAgentAPIMockRecorder) DeleteFlowAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowAliasRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteFlowAliasRequest), arg0)
}

// DeleteFlowAliasWithContext mocks base method
func (m *MockBedrockAgentAPI) DeleteFlowAliasWithContext(arg0 context.Context, arg1 *bedrockagent.DeleteFlowAliasInput, arg2 ...request.Option) (*bedrockagent.DeleteFlowAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFlowAliasWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DeleteFlowAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlowAliasWithContext indicates an expected call of DeleteFlowAliasWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DeleteFlowAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowAliasWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteFlowAliasWithContext), varargs...)
}

// DeleteFlowRequest mocks base method
func (m *MockBedrockAgentAPI) DeleteFlowRequest(arg0 *bedrockagent.DeleteFlowInput) (*request.Request, *bedrockagent.DeleteFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DeleteFlowOutput)
	return ret0, ret1
}

// DeleteFlowRequest indicates an expected call of DeleteFlowRequest
func (mr *MockBedrockAgentAPIMockRecorder) DeleteFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteFlowRequest), arg0)
}

// DeleteFlowVersion mocks base method
func (m *MockBedrockAgentAPI) DeleteFlowVersion(arg0 *bedrockagent.DeleteFlowVersionInput) (*bedrockagent.DeleteFlowVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowVersion", arg0)
	ret0, _ := ret[0].(*bedrockagent.DeleteFlowVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlowVersion indicates an expected call of DeleteFlowVersion
func (mr *MockBedrockAgentAPIMockRecorder) DeleteFlowVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowVersion", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteFlowVersion), arg0)
}

// DeleteFlowVersionRequest mocks base method
func (m *MockBedrockAgentAPI) DeleteFlowVersionRequest(arg0 *bedrockagent.DeleteFlowVersionInput) (*request.Request, *bedrockagent.DeleteFlowVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DeleteFlowVersionOutput)
	return ret0, ret1
}

// DeleteFlowVersionRequest indicates an expected call of DeleteFlowVersionRequest
func (mr *MockBedrockAgentAPIMockRecorder) DeleteFlowVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowVersionRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteFlowVersionRequest), arg0)
}

// DeleteFlowVersionWithContext mocks base method
func (m *MockBedrockAgentAPI) DeleteFlowVersionWithContext(arg0 context.Context, arg1 *bedrockagent.DeleteFlowVersionInput, arg2 ...request.Option) (*bedrockagent.DeleteFlowVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFlowVersionWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DeleteFlowVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlowVersionWithContext indicates an expected call of DeleteFlowVersionWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DeleteFlowVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowVersionWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteFlowVersionWithContext), varargs...)
}

// DeleteFlowWithContext mocks base method
func (m *MockBedrockAgentAPI) DeleteFlowWithContext(arg0 context.Context, arg1 *bedrockagent.DeleteFlowInput, arg2 ...request.Option) (*bedrockagent.DeleteFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFlowWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DeleteFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlowWithContext indicates an expected call of DeleteFlowWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DeleteFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteFlowWithContext), varargs...)
}

// DeleteKnowledgeBase mocks base method
func (m *MockBedrockAgentAPI) DeleteKnowledgeBase(arg0 *bedrockagent.DeleteKnowledgeBaseInput) (*bedrockagent.DeleteKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledgeBase", arg0)
	ret0, _ := ret[0].(*bedrockagent.DeleteKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKnowledgeBase indicates an expected call of DeleteKnowledgeBase
func (mr *MockBedrockAgentAPIMockRecorder) DeleteKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeBase", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteKnowledgeBase), arg0)
}

// DeleteKnowledgeBaseRequest mocks base method
func (m *MockBedrockAgentAPI) DeleteKnowledgeBaseRequest(arg0 *bedrockagent.DeleteKnowledgeBaseInput) (*request.Request, *bedrockagent.DeleteKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DeleteKnowledgeBaseOutput)
	return ret0, ret1
}

// DeleteKnowledgeBaseRequest indicates an expected call of DeleteKnowledgeBaseRequest
func (mr *MockBedrockAgentAPIMockRecorder) DeleteKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeBaseRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteKnowledgeBaseRequest), arg0)
}

// DeleteKnowledgeBaseWithContext mocks base method
func (m *MockBedrockAgentAPI) DeleteKnowledgeBaseWithContext(arg0 context.Context, arg1 *bedrockagent.DeleteKnowledgeBaseInput, arg2 ...request.Option) (*bedrockagent.DeleteKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DeleteKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKnowledgeBaseWithContext indicates an expected call of DeleteKnowledgeBaseWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DeleteKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeBaseWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeleteKnowledgeBaseWithContext), varargs...)
}

// DeletePrompt mocks base method
func (m *MockBedrockAgentAPI) DeletePrompt(arg0 *bedrockagent.DeletePromptInput) (*bedrockagent.DeletePromptOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrompt", arg0)
	ret0, _ := ret[0].(*bedrockagent.DeletePromptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrompt indicates an expected call of DeletePrompt
func (mr *MockBedrockAgentAPIMockRecorder) DeletePrompt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrompt", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeletePrompt), arg0)
}

// DeletePromptRequest mocks base method
func (m *MockBedrockAgentAPI) DeletePromptRequest(arg0 *bedrockagent.DeletePromptInput) (*request.Request, *bedrockagent.DeletePromptOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePromptRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DeletePromptOutput)
	return ret0, ret1
}

// DeletePromptRequest indicates an expected call of DeletePromptRequest
func (mr *MockBedrockAgentAPIMockRecorder) DeletePromptRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePromptRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeletePromptRequest), arg0)
}

// DeletePromptWithContext mocks base method
func (m *MockBedrockAgentAPI) DeletePromptWithContext(arg0 context.Context, arg1 *bedrockagent.DeletePromptInput, arg2 ...request.Option) (*bedrockagent.DeletePromptOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePromptWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DeletePromptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePromptWithContext indicates an expected call of DeletePromptWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DeletePromptWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePromptWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DeletePromptWithContext), varargs...)
}

// DisassociateAgentKnowledgeBase mocks base method
func (m *MockBedrockAgentAPI) DisassociateAgentKnowledgeBase(arg0 *bedrockagent.DisassociateAgentKnowledgeBaseInput) (*bedrockagent.DisassociateAgentKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAgentKnowledgeBase", arg0)
	ret0, _ := ret[0].(*bedrockagent.DisassociateAgentKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAgentKnowledgeBase indicates an expected call of DisassociateAgentKnowledgeBase
func (mr *MockBedrockAgentAPIMockRecorder) DisassociateAgentKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAgentKnowledgeBase", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DisassociateAgentKnowledgeBase), arg0)
}

// DisassociateAgentKnowledgeBaseRequest mocks base method
func (m *MockBedrockAgentAPI) DisassociateAgentKnowledgeBaseRequest(arg0 *bedrockagent.DisassociateAgentKnowledgeBaseInput) (*request.Request, *bedrockagent.DisassociateAgentKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAgentKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.DisassociateAgentKnowledgeBaseOutput)
	return ret0, ret1
}

// DisassociateAgentKnowledgeBaseRequest indicates an expected call of DisassociateAgentKnowledgeBaseRequest
func (mr *MockBedrockAgentAPIMockRecorder) DisassociateAgentKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAgentKnowledgeBaseRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DisassociateAgentKnowledgeBaseRequest), arg0)
}

// DisassociateAgentKnowledgeBaseWithContext mocks base method
func (m *MockBedrockAgentAPI) DisassociateAgentKnowledgeBaseWithContext(arg0 context.Context, arg1 *bedrockagent.DisassociateAgentKnowledgeBaseInput, arg2 ...request.Option) (*bedrockagent.DisassociateAgentKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateAgentKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.DisassociateAgentKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAgentKnowledgeBaseWithContext indicates an expected call of DisassociateAgentKnowledgeBaseWithContext
func (mr *MockBedrockAgentAPIMockRecorder) DisassociateAgentKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAgentKnowledgeBaseWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).DisassociateAgentKnowledgeBaseWithContext), varargs...)
}

// GetAgent mocks base method
func (m *MockBedrockAgentAPI) GetAgent(arg0 *bedrockagent.GetAgentInput) (*bedrockagent.GetAgentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgent", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgent indicates an expected call of GetAgent
func (mr *MockBedrockAgentAPIMockRecorder) GetAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgent), arg0)
}

// GetAgentActionGroup mocks base method
func (m *MockBedrockAgentAPI) GetAgentActionGroup(arg0 *bedrockagent.GetAgentActionGroupInput) (*bedrockagent.GetAgentActionGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentActionGroup", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetAgentActionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentActionGroup indicates an expected call of GetAgentActionGroup
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentActionGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentActionGroup", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentActionGroup), arg0)
}

// GetAgentActionGroupRequest mocks base method
func (m *MockBedrockAgentAPI) GetAgentActionGroupRequest(arg0 *bedrockagent.GetAgentActionGroupInput) (*request.Request, *bedrockagent.GetAgentActionGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentActionGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetAgentActionGroupOutput)
	return ret0, ret1
}

// GetAgentActionGroupRequest indicates an expected call of GetAgentActionGroupRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentActionGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentActionGroupRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentActionGroupRequest), arg0)
}

// GetAgentActionGroupWithContext mocks base method
func (m *MockBedrockAgentAPI) GetAgentActionGroupWithContext(arg0 context.Context, arg1 *bedrockagent.GetAgentActionGroupInput, arg2 ...request.Option) (*bedrockagent.GetAgentActionGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentActionGroupWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetAgentActionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentActionGroupWithContext indicates an expected call of GetAgentActionGroupWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentActionGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentActionGroupWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentActionGroupWithContext), varargs...)
}

// GetAgentAlias mocks base method
func (m *MockBedrockAgentAPI) GetAgentAlias(arg0 *bedrockagent.GetAgentAliasInput) (*bedrockagent.GetAgentAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentAlias", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetAgentAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentAlias indicates an expected call of GetAgentAlias
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentAlias", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentAlias), arg0)
}

// GetAgentAliasRequest mocks base method
func (m *MockBedrockAgentAPI) GetAgentAliasRequest(arg0 *bedrockagent.GetAgentAliasInput) (*request.Request, *bedrockagent.GetAgentAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetAgentAliasOutput)
	return ret0, ret1
}

// GetAgentAliasRequest indicates an expected call of GetAgentAliasRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentAliasRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentAliasRequest), arg0)
}

// GetAgentAliasWithContext mocks base method
func (m *MockBedrockAgentAPI) GetAgentAliasWithContext(arg0 context.Context, arg1 *bedrockagent.GetAgentAliasInput, arg2 ...request.Option) (*bedrockagent.GetAgentAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentAliasWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetAgentAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentAliasWithContext indicates an expected call of GetAgentAliasWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentAliasWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentAliasWithContext), varargs...)
}

// GetAgentKnowledgeBase mocks base method
func (m *MockBedrockAgentAPI) GetAgentKnowledgeBase(arg0 *bedrockagent.GetAgentKnowledgeBaseInput) (*bedrockagent.GetAgentKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentKnowledgeBase", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetAgentKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentKnowledgeBase indicates an expected call of GetAgentKnowledgeBase
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentKnowledgeBase", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentKnowledgeBase), arg0)
}

// GetAgentKnowledgeBaseRequest mocks base method
func (m *MockBedrockAgentAPI) GetAgentKnowledgeBaseRequest(arg0 *bedrockagent.GetAgentKnowledgeBaseInput) (*request.Request, *bedrockagent.GetAgentKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetAgentKnowledgeBaseOutput)
	return ret0, ret1
}

// GetAgentKnowledgeBaseRequest indicates an expected call of GetAgentKnowledgeBaseRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentKnowledgeBaseRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentKnowledgeBaseRequest), arg0)
}

// GetAgentKnowledgeBaseWithContext mocks base method
func (m *MockBedrockAgentAPI) GetAgentKnowledgeBaseWithContext(arg0 context.Context, arg1 *bedrockagent.GetAgentKnowledgeBaseInput, arg2 ...request.Option) (*bedrockagent.GetAgentKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetAgentKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentKnowledgeBaseWithContext indicates an expected call of GetAgentKnowledgeBaseWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentKnowledgeBaseWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentKnowledgeBaseWithContext), varargs...)
}

// GetAgentRequest mocks base method
func (m *MockBedrockAgentAPI) GetAgentRequest(arg0 *bedrockagent.GetAgentInput) (*request.Request, *bedrockagent.GetAgentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetAgentOutput)
	return ret0, ret1
}

// GetAgentRequest indicates an expected call of GetAgentRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentRequest), arg0)
}

// GetAgentVersion mocks base method
func (m *MockBedrockAgentAPI) GetAgentVersion(arg0 *bedrockagent.GetAgentVersionInput) (*bedrockagent.GetAgentVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentVersion", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetAgentVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentVersion indicates an expected call of GetAgentVersion
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentVersion", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentVersion), arg0)
}

// GetAgentVersionRequest mocks base method
func (m *MockBedrockAgentAPI) GetAgentVersionRequest(arg0 *bedrockagent.GetAgentVersionInput) (*request.Request, *bedrockagent.GetAgentVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetAgentVersionOutput)
	return ret0, ret1
}

// GetAgentVersionRequest indicates an expected call of GetAgentVersionRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentVersionRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentVersionRequest), arg0)
}

// GetAgentVersionWithContext mocks base method
func (m *MockBedrockAgentAPI) GetAgentVersionWithContext(arg0 context.Context, arg1 *bedrockagent.GetAgentVersionInput, arg2 ...request.Option) (*bedrockagent.GetAgentVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentVersionWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetAgentVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentVersionWithContext indicates an expected call of GetAgentVersionWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentVersionWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentVersionWithContext), varargs...)
}

// GetAgentWithContext mocks base method
func (m *MockBedrockAgentAPI) GetAgentWithContext(arg0 context.Context, arg1 *bedrockagent.GetAgentInput, arg2 ...request.Option) (*bedrockagent.GetAgentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentWithContext indicates an expected call of GetAgentWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetAgentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetAgentWithContext), varargs...)
}

// GetDataSource mocks base method
func (m *MockBedrockAgentAPI) GetDataSource(arg0 *bedrockagent.GetDataSourceInput) (*bedrockagent.GetDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSource", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSource indicates an expected call of GetDataSource
func (mr *MockBedrockAgentAPIMockRecorder) GetDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSource", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetDataSource), arg0)
}

// GetDataSourceRequest mocks base method
func (m *MockBedrockAgentAPI) GetDataSourceRequest(arg0 *bedrockagent.GetDataSourceInput) (*request.Request, *bedrockagent.GetDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetDataSourceOutput)
	return ret0, ret1
}

// GetDataSourceRequest indicates an expected call of GetDataSourceRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetDataSourceRequest), arg0)
}

// GetDataSourceWithContext mocks base method
func (m *MockBedrockAgentAPI) GetDataSourceWithContext(arg0 context.Context, arg1 *bedrockagent.GetDataSourceInput, arg2 ...request.Option) (*bedrockagent.GetDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSourceWithContext indicates an expected call of GetDataSourceWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetDataSourceWithContext), varargs...)
}

// GetFlow mocks base method
func (m *MockBedrockAgentAPI) GetFlow(arg0 *bedrockagent.GetFlowInput) (*bedrockagent.GetFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlow", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlow indicates an expected call of GetFlow
func (mr *MockBedrockAgentAPIMockRecorder) GetFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlow", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetFlow), arg0)
}

// GetFlowAlias mocks base method
func (m *MockBedrockAgentAPI) GetFlowAlias(arg0 *bedrockagent.GetFlowAliasInput) (*bedrockagent.GetFlowAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowAlias", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetFlowAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowAlias indicates an expected call of GetFlowAlias
func (mr *MockBedrockAgentAPIMockRecorder) GetFlowAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowAlias", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetFlowAlias), arg0)
}

// GetFlowAliasRequest mocks base method
func (m *MockBedrockAgentAPI) GetFlowAliasRequest(arg0 *bedrockagent.GetFlowAliasInput) (*request.Request, *bedrockagent.GetFlowAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetFlowAliasOutput)
	return ret0, ret1
}

// GetFlowAliasRequest indicates an expected call of GetFlowAliasRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetFlowAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowAliasRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetFlowAliasRequest), arg0)
}

// GetFlowAliasWithContext mocks base method
func (m *MockBedrockAgentAPI) GetFlowAliasWithContext(arg0 context.Context, arg1 *bedrockagent.GetFlowAliasInput, arg2 ...request.Option) (*bedrockagent.GetFlowAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFlowAliasWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetFlowAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowAliasWithContext indicates an expected call of GetFlowAliasWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetFlowAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowAliasWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetFlowAliasWithContext), varargs...)
}

// GetFlowRequest mocks base method
func (m *MockBedrockAgentAPI) GetFlowRequest(arg0 *bedrockagent.GetFlowInput) (*request.Request, *bedrockagent.GetFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetFlowOutput)
	return ret0, ret1
}

// GetFlowRequest indicates an expected call of GetFlowRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetFlowRequest), arg0)
}

// GetFlowVersion mocks base method
func (m *MockBedrockAgentAPI) GetFlowVersion(arg0 *bedrockagent.GetFlowVersionInput) (*bedrockagent.GetFlowVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowVersion", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetFlowVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowVersion indicates an expected call of GetFlowVersion
func (mr *MockBedrockAgentAPIMockRecorder) GetFlowVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowVersion", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetFlowVersion), arg0)
}

// GetFlowVersionRequest mocks base method
func (m *MockBedrockAgentAPI) GetFlowVersionRequest(arg0 *bedrockagent.GetFlowVersionInput) (*request.Request, *bedrockagent.GetFlowVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetFlowVersionOutput)
	return ret0, ret1
}

// GetFlowVersionRequest indicates an expected call of GetFlowVersionRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetFlowVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowVersionRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetFlowVersionRequest), arg0)
}

// GetFlowVersionWithContext mocks base method
func (m *MockBedrockAgentAPI) GetFlowVersionWithContext(arg0 context.Context, arg1 *bedrockagent.GetFlowVersionInput, arg2 ...request.Option) (*bedrockagent.GetFlowVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFlowVersionWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetFlowVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowVersionWithContext indicates an expected call of GetFlowVersionWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetFlowVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowVersionWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetFlowVersionWithContext), varargs...)
}

// GetFlowWithContext mocks base method
func (m *MockBedrockAgentAPI) GetFlowWithContext(arg0 context.Context, arg1 *bedrockagent.GetFlowInput, arg2 ...request.Option) (*bedrockagent.GetFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFlowWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowWithContext indicates an expected call of GetFlowWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetFlowWithContext), varargs...)
}

// GetIngestionJob mocks base method
func (m *MockBedrockAgentAPI) GetIngestionJob(arg0 *bedrockagent.GetIngestionJobInput) (*bedrockagent.GetIngestionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngestionJob", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetIngestionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngestionJob indicates an expected call of GetIngestionJob
func (mr *MockBedrockAgentAPIMockRecorder) GetIngestionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestionJob", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetIngestionJob), arg0)
}

// GetIngestionJobRequest mocks base method
func (m *MockBedrockAgentAPI) GetIngestionJobRequest(arg0 *bedrockagent.GetIngestionJobInput) (*request.Request, *bedrockagent.GetIngestionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngestionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetIngestionJobOutput)
	return ret0, ret1
}

// GetIngestionJobRequest indicates an expected call of GetIngestionJobRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetIngestionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestionJobRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetIngestionJobRequest), arg0)
}

// GetIngestionJobWithContext mocks base method
func (m *MockBedrockAgentAPI) GetIngestionJobWithContext(arg0 context.Context, arg1 *bedrockagent.GetIngestionJobInput, arg2 ...request.Option) (*bedrockagent.GetIngestionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIngestionJobWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetIngestionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngestionJobWithContext indicates an expected call of GetIngestionJobWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetIngestionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestionJobWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetIngestionJobWithContext), varargs...)
}

// GetKnowledgeBase mocks base method
func (m *MockBedrockAgentAPI) GetKnowledgeBase(arg0 *bedrockagent.GetKnowledgeBaseInput) (*bedrockagent.GetKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnowledgeBase", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnowledgeBase indicates an expected call of GetKnowledgeBase
func (mr *MockBedrockAgentAPIMockRecorder) GetKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeBase", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetKnowledgeBase), arg0)
}

// GetKnowledgeBaseRequest mocks base method
func (m *MockBedrockAgentAPI) GetKnowledgeBaseRequest(arg0 *bedrockagent.GetKnowledgeBaseInput) (*request.Request, *bedrockagent.GetKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetKnowledgeBaseOutput)
	return ret0, ret1
}

// GetKnowledgeBaseRequest indicates an expected call of GetKnowledgeBaseRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeBaseRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetKnowledgeBaseRequest), arg0)
}

// GetKnowledgeBaseWithContext mocks base method
func (m *MockBedrockAgentAPI) GetKnowledgeBaseWithContext(arg0 context.Context, arg1 *bedrockagent.GetKnowledgeBaseInput, arg2 ...request.Option) (*bedrockagent.GetKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnowledgeBaseWithContext indicates an expected call of GetKnowledgeBaseWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeBaseWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetKnowledgeBaseWithContext), varargs...)
}

// GetPrompt mocks base method
func (m *MockBedrockAgentAPI) GetPrompt(arg0 *bedrockagent.GetPromptInput) (*bedrockagent.GetPromptOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrompt", arg0)
	ret0, _ := ret[0].(*bedrockagent.GetPromptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrompt indicates an expected call of GetPrompt
func (mr *MockBedrockAgentAPIMockRecorder) GetPrompt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrompt", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetPrompt), arg0)
}

// GetPromptRequest mocks base method
func (m *MockBedrockAgentAPI) GetPromptRequest(arg0 *bedrockagent.GetPromptInput) (*request.Request, *bedrockagent.GetPromptOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromptRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.GetPromptOutput)
	return ret0, ret1
}

// GetPromptRequest indicates an expected call of GetPromptRequest
func (mr *MockBedrockAgentAPIMockRecorder) GetPromptRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromptRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetPromptRequest), arg0)
}

// GetPromptWithContext mocks base method
func (m *MockBedrockAgentAPI) GetPromptWithContext(arg0 context.Context, arg1 *bedrockagent.GetPromptInput, arg2 ...request.Option) (*bedrockagent.GetPromptOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPromptWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.GetPromptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromptWithContext indicates an expected call of GetPromptWithContext
func (mr *MockBedrockAgentAPIMockRecorder) GetPromptWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromptWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).GetPromptWithContext), varargs...)
}

// ListAgentActionGroups mocks base method
func (m *MockBedrockAgentAPI) ListAgentActionGroups(arg0 *bedrockagent.ListAgentActionGroupsInput) (*bedrockagent.ListAgentActionGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentActionGroups", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListAgentActionGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentActionGroups indicates an expected call of ListAgentActionGroups
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentActionGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentActionGroups", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentActionGroups), arg0)
}

// ListAgentActionGroupsPages mocks base method
func (m *MockBedrockAgentAPI) ListAgentActionGroupsPages(arg0 *bedrockagent.ListAgentActionGroupsInput, arg1 func(*bedrockagent.ListAgentActionGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentActionGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAgentActionGroupsPages indicates an expected call of ListAgentActionGroupsPages
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentActionGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentActionGroupsPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentActionGroupsPages), arg0, arg1)
}

// ListAgentActionGroupsPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListAgentActionGroupsPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListAgentActionGroupsInput, arg2 func(*bedrockagent.ListAgentActionGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentActionGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAgentActionGroupsPagesWithContext indicates an expected call of ListAgentActionGroupsPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentActionGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentActionGroupsPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentActionGroupsPagesWithContext), varargs...)
}

// ListAgentActionGroupsRequest mocks base method
func (m *MockBedrockAgentAPI) ListAgentActionGroupsRequest(arg0 *bedrockagent.ListAgentActionGroupsInput) (*request.Request, *bedrockagent.ListAgentActionGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentActionGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListAgentActionGroupsOutput)
	return ret0, ret1
}

// ListAgentActionGroupsRequest indicates an expected call of ListAgentActionGroupsRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentActionGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentActionGroupsRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentActionGroupsRequest), arg0)
}

// ListAgentActionGroupsWithContext mocks base method
func (m *MockBedrockAgentAPI) ListAgentActionGroupsWithContext(arg0 context.Context, arg1 *bedrockagent.ListAgentActionGroupsInput, arg2 ...request.Option) (*bedrockagent.ListAgentActionGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentActionGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListAgentActionGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentActionGroupsWithContext indicates an expected call of ListAgentActionGroupsWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentActionGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentActionGroupsWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentActionGroupsWithContext), varargs...)
}

// ListAgentAliases mocks base method
func (m *MockBedrockAgentAPI) ListAgentAliases(arg0 *bedrockagent.ListAgentAliasesInput) (*bedrockagent.ListAgentAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentAliases", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListAgentAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentAliases indicates an expected call of ListAgentAliases
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentAliases", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentAliases), arg0)
}

// ListAgentAliasesPages mocks base method
func (m *MockBedrockAgentAPI) ListAgentAliasesPages(arg0 *bedrockagent.ListAgentAliasesInput, arg1 func(*bedrockagent.ListAgentAliasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentAliasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAgentAliasesPages indicates an expected call of ListAgentAliasesPages
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentAliasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentAliasesPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentAliasesPages), arg0, arg1)
}

// ListAgentAliasesPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListAgentAliasesPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListAgentAliasesInput, arg2 func(*bedrockagent.ListAgentAliasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentAliasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAgentAliasesPagesWithContext indicates an expected call of ListAgentAliasesPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentAliasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentAliasesPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentAliasesPagesWithContext), varargs...)
}

// ListAgentAliasesRequest mocks base method
func (m *MockBedrockAgentAPI) ListAgentAliasesRequest(arg0 *bedrockagent.ListAgentAliasesInput) (*request.Request, *bedrockagent.ListAgentAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListAgentAliasesOutput)
	return ret0, ret1
}

// ListAgentAliasesRequest indicates an expected call of ListAgentAliasesRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentAliasesRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentAliasesRequest), arg0)
}

// ListAgentAliasesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListAgentAliasesWithContext(arg0 context.Context, arg1 *bedrockagent.ListAgentAliasesInput, arg2 ...request.Option) (*bedrockagent.ListAgentAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListAgentAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentAliasesWithContext indicates an expected call of ListAgentAliasesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentAliasesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentAliasesWithContext), varargs...)
}

// ListAgentKnowledgeBases mocks base method
func (m *MockBedrockAgentAPI) ListAgentKnowledgeBases(arg0 *bedrockagent.ListAgentKnowledgeBasesInput) (*bedrockagent.ListAgentKnowledgeBasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentKnowledgeBases", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListAgentKnowledgeBasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentKnowledgeBases indicates an expected call of ListAgentKnowledgeBases
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentKnowledgeBases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentKnowledgeBases", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentKnowledgeBases), arg0)
}

// ListAgentKnowledgeBasesPages mocks base method
func (m *MockBedrockAgentAPI) ListAgentKnowledgeBasesPages(arg0 *bedrockagent.ListAgentKnowledgeBasesInput, arg1 func(*bedrockagent.ListAgentKnowledgeBasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentKnowledgeBasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAgentKnowledgeBasesPages indicates an expected call of ListAgentKnowledgeBasesPages
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentKnowledgeBasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentKnowledgeBasesPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentKnowledgeBasesPages), arg0, arg1)
}

// ListAgentKnowledgeBasesPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListAgentKnowledgeBasesPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListAgentKnowledgeBasesInput, arg2 func(*bedrockagent.ListAgentKnowledgeBasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentKnowledgeBasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAgentKnowledgeBasesPagesWithContext indicates an expected call of ListAgentKnowledgeBasesPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentKnowledgeBasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentKnowledgeBasesPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentKnowledgeBasesPagesWithContext), varargs...)
}

// ListAgentKnowledgeBasesRequest mocks base method
func (m *MockBedrockAgentAPI) ListAgentKnowledgeBasesRequest(arg0 *bedrockagent.ListAgentKnowledgeBasesInput) (*request.Request, *bedrockagent.ListAgentKnowledgeBasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentKnowledgeBasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListAgentKnowledgeBasesOutput)
	return ret0, ret1
}

// ListAgentKnowledgeBasesRequest indicates an expected call of ListAgentKnowledgeBasesRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentKnowledgeBasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentKnowledgeBasesRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentKnowledgeBasesRequest), arg0)
}

// ListAgentKnowledgeBasesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListAgentKnowledgeBasesWithContext(arg0 context.Context, arg1 *bedrockagent.ListAgentKnowledgeBasesInput, arg2 ...request.Option) (*bedrockagent.ListAgentKnowledgeBasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentKnowledgeBasesWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListAgentKnowledgeBasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentKnowledgeBasesWithContext indicates an expected call of ListAgentKnowledgeBasesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentKnowledgeBasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentKnowledgeBasesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentKnowledgeBasesWithContext), varargs...)
}

// ListAgentVersions mocks base method
func (m *MockBedrockAgentAPI) ListAgentVersions(arg0 *bedrockagent.ListAgentVersionsInput) (*bedrockagent.ListAgentVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentVersions", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListAgentVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentVersions indicates an expected call of ListAgentVersions
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentVersions", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentVersions), arg0)
}

// ListAgentVersionsPages mocks base method
func (m *MockBedrockAgentAPI) ListAgentVersionsPages(arg0 *bedrockagent.ListAgentVersionsInput, arg1 func(*bedrockagent.ListAgentVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAgentVersionsPages indicates an expected call of ListAgentVersionsPages
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentVersionsPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentVersionsPages), arg0, arg1)
}

// ListAgentVersionsPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListAgentVersionsPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListAgentVersionsInput, arg2 func(*bedrockagent.ListAgentVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAgentVersionsPagesWithContext indicates an expected call of ListAgentVersionsPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentVersionsPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentVersionsPagesWithContext), varargs...)
}

// ListAgentVersionsRequest mocks base method
func (m *MockBedrockAgentAPI) ListAgentVersionsRequest(arg0 *bedrockagent.ListAgentVersionsInput) (*request.Request, *bedrockagent.ListAgentVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListAgentVersionsOutput)
	return ret0, ret1
}

// ListAgentVersionsRequest indicates an expected call of ListAgentVersionsRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentVersionsRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentVersionsRequest), arg0)
}

// ListAgentVersionsWithContext mocks base method
func (m *MockBedrockAgentAPI) ListAgentVersionsWithContext(arg0 context.Context, arg1 *bedrockagent.ListAgentVersionsInput, arg2 ...request.Option) (*bedrockagent.ListAgentVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListAgentVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentVersionsWithContext indicates an expected call of ListAgentVersionsWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentVersionsWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentVersionsWithContext), varargs...)
}

// ListAgents mocks base method
func (m *MockBedrockAgentAPI) ListAgents(arg0 *bedrockagent.ListAgentsInput) (*bedrockagent.ListAgentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgents", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListAgentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgents indicates an expected call of ListAgents
func (mr *MockBedrockAgentAPIMockRecorder) ListAgents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgents", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgents), arg0)
}

// ListAgentsPages mocks base method
func (m *MockBedrockAgentAPI) ListAgentsPages(arg0 *bedrockagent.ListAgentsInput, arg1 func(*bedrockagent.ListAgentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAgentsPages indicates an expected call of ListAgentsPages
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentsPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentsPages), arg0, arg1)
}

// ListAgentsPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListAgentsPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListAgentsInput, arg2 func(*bedrockagent.ListAgentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAgentsPagesWithContext indicates an expected call of ListAgentsPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentsPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentsPagesWithContext), varargs...)
}

// ListAgentsRequest mocks base method
func (m *MockBedrockAgentAPI) ListAgentsRequest(arg0 *bedrockagent.ListAgentsInput) (*request.Request, *bedrockagent.ListAgentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListAgentsOutput)
	return ret0, ret1
}

// ListAgentsRequest indicates an expected call of ListAgentsRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentsRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentsRequest), arg0)
}

// ListAgentsWithContext mocks base method
func (m *MockBedrockAgentAPI) ListAgentsWithContext(arg0 context.Context, arg1 *bedrockagent.ListAgentsInput, arg2 ...request.Option) (*bedrockagent.ListAgentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentsWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListAgentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentsWithContext indicates an expected call of ListAgentsWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListAgentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentsWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListAgentsWithContext), varargs...)
}

// ListDataSources mocks base method
func (m *MockBedrockAgentAPI) ListDataSources(arg0 *bedrockagent.ListDataSourcesInput) (*bedrockagent.ListDataSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSources", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListDataSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSources indicates an expected call of ListDataSources
func (mr *MockBedrockAgentAPIMockRecorder) ListDataSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSources", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListDataSources), arg0)
}

// ListDataSourcesPages mocks base method
func (m *MockBedrockAgentAPI) ListDataSourcesPages(arg0 *bedrockagent.ListDataSourcesInput, arg1 func(*bedrockagent.ListDataSourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourcesPages indicates an expected call of ListDataSourcesPages
func (mr *MockBedrockAgentAPIMockRecorder) ListDataSourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListDataSourcesPages), arg0, arg1)
}

// ListDataSourcesPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListDataSourcesPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListDataSourcesInput, arg2 func(*bedrockagent.ListDataSourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourcesPagesWithContext indicates an expected call of ListDataSourcesPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListDataSourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListDataSourcesPagesWithContext), varargs...)
}

// ListDataSourcesRequest mocks base method
func (m *MockBedrockAgentAPI) ListDataSourcesRequest(arg0 *bedrockagent.ListDataSourcesInput) (*request.Request, *bedrockagent.ListDataSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListDataSourcesOutput)
	return ret0, ret1
}

// ListDataSourcesRequest indicates an expected call of ListDataSourcesRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListDataSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListDataSourcesRequest), arg0)
}

// ListDataSourcesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListDataSourcesWithContext(arg0 context.Context, arg1 *bedrockagent.ListDataSourcesInput, arg2 ...request.Option) (*bedrockagent.ListDataSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListDataSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSourcesWithContext indicates an expected call of ListDataSourcesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListDataSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListDataSourcesWithContext), varargs...)
}

// ListFlowAliases mocks base method
func (m *MockBedrockAgentAPI) ListFlowAliases(arg0 *bedrockagent.ListFlowAliasesInput) (*bedrockagent.ListFlowAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowAliases", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListFlowAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlowAliases indicates an expected call of ListFlowAliases
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowAliases", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowAliases), arg0)
}

// ListFlowAliasesPages mocks base method
func (m *MockBedrockAgentAPI) ListFlowAliasesPages(arg0 *bedrockagent.ListFlowAliasesInput, arg1 func(*bedrockagent.ListFlowAliasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowAliasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlowAliasesPages indicates an expected call of ListFlowAliasesPages
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowAliasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowAliasesPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowAliasesPages), arg0, arg1)
}

// ListFlowAliasesPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListFlowAliasesPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListFlowAliasesInput, arg2 func(*bedrockagent.ListFlowAliasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowAliasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlowAliasesPagesWithContext indicates an expected call of ListFlowAliasesPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowAliasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowAliasesPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowAliasesPagesWithContext), varargs...)
}

// ListFlowAliasesRequest mocks base method
func (m *MockBedrockAgentAPI) ListFlowAliasesRequest(arg0 *bedrockagent.ListFlowAliasesInput) (*request.Request, *bedrockagent.ListFlowAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListFlowAliasesOutput)
	return ret0, ret1
}

// ListFlowAliasesRequest indicates an expected call of ListFlowAliasesRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowAliasesRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowAliasesRequest), arg0)
}

// ListFlowAliasesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListFlowAliasesWithContext(arg0 context.Context, arg1 *bedrockagent.ListFlowAliasesInput, arg2 ...request.Option) (*bedrockagent.ListFlowAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListFlowAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlowAliasesWithContext indicates an expected call of ListFlowAliasesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowAliasesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowAliasesWithContext), varargs...)
}

// ListFlowVersions mocks base method
func (m *MockBedrockAgentAPI) ListFlowVersions(arg0 *bedrockagent.ListFlowVersionsInput) (*bedrockagent.ListFlowVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowVersions", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListFlowVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlowVersions indicates an expected call of ListFlowVersions
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowVersions", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowVersions), arg0)
}

// ListFlowVersionsPages mocks base method
func (m *MockBedrockAgentAPI) ListFlowVersionsPages(arg0 *bedrockagent.ListFlowVersionsInput, arg1 func(*bedrockagent.ListFlowVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlowVersionsPages indicates an expected call of ListFlowVersionsPages
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowVersionsPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowVersionsPages), arg0, arg1)
}

// ListFlowVersionsPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListFlowVersionsPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListFlowVersionsInput, arg2 func(*bedrockagent.ListFlowVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlowVersionsPagesWithContext indicates an expected call of ListFlowVersionsPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowVersionsPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowVersionsPagesWithContext), varargs...)
}

// ListFlowVersionsRequest mocks base method
func (m *MockBedrockAgentAPI) ListFlowVersionsRequest(arg0 *bedrockagent.ListFlowVersionsInput) (*request.Request, *bedrockagent.ListFlowVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListFlowVersionsOutput)
	return ret0, ret1
}

// ListFlowVersionsRequest indicates an expected call of ListFlowVersionsRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowVersionsRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowVersionsRequest), arg0)
}

// ListFlowVersionsWithContext mocks base method
func (m *MockBedrockAgentAPI) ListFlowVersionsWithContext(arg0 context.Context, arg1 *bedrockagent.ListFlowVersionsInput, arg2 ...request.Option) (*bedrockagent.ListFlowVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListFlowVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlowVersionsWithContext indicates an expected call of ListFlowVersionsWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowVersionsWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowVersionsWithContext), varargs...)
}

// ListFlows mocks base method
func (m *MockBedrockAgentAPI) ListFlows(arg0 *bedrockagent.ListFlowsInput) (*bedrockagent.ListFlowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlows", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListFlowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlows indicates an expected call of ListFlows
func (mr *MockBedrockAgentAPIMockRecorder) ListFlows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlows", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlows), arg0)
}

// ListFlowsPages mocks base method
func (m *MockBedrockAgentAPI) ListFlowsPages(arg0 *bedrockagent.ListFlowsInput, arg1 func(*bedrockagent.ListFlowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlowsPages indicates an expected call of ListFlowsPages
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowsPages), arg0, arg1)
}

// ListFlowsPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListFlowsPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListFlowsInput, arg2 func(*bedrockagent.ListFlowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlowsPagesWithContext indicates an expected call of ListFlowsPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowsPagesWithContext), varargs...)
}

// ListFlowsRequest mocks base method
func (m *MockBedrockAgentAPI) ListFlowsRequest(arg0 *bedrockagent.ListFlowsInput) (*request.Request, *bedrockagent.ListFlowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListFlowsOutput)
	return ret0, ret1
}

// ListFlowsRequest indicates an expected call of ListFlowsRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowsRequest), arg0)
}

// ListFlowsWithContext mocks base method
func (m *MockBedrockAgentAPI) ListFlowsWithContext(arg0 context.Context, arg1 *bedrockagent.ListFlowsInput, arg2 ...request.Option) (*bedrockagent.ListFlowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowsWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListFlowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlowsWithContext indicates an expected call of ListFlowsWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListFlowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowsWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListFlowsWithContext), varargs...)
}

// ListIngestionJobs mocks base method
func (m *MockBedrockAgentAPI) ListIngestionJobs(arg0 *bedrockagent.ListIngestionJobsInput) (*bedrockagent.ListIngestionJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngestionJobs", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListIngestionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngestionJobs indicates an expected call of ListIngestionJobs
func (mr *MockBedrockAgentAPIMockRecorder) ListIngestionJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionJobs", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListIngestionJobs), arg0)
}

// ListIngestionJobsPages mocks base method
func (m *MockBedrockAgentAPI) ListIngestionJobsPages(arg0 *bedrockagent.ListIngestionJobsInput, arg1 func(*bedrockagent.ListIngestionJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngestionJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIngestionJobsPages indicates an expected call of ListIngestionJobsPages
func (mr *MockBedrockAgentAPIMockRecorder) ListIngestionJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionJobsPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListIngestionJobsPages), arg0, arg1)
}

// ListIngestionJobsPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListIngestionJobsPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListIngestionJobsInput, arg2 func(*bedrockagent.ListIngestionJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIngestionJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIngestionJobsPagesWithContext indicates an expected call of ListIngestionJobsPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListIngestionJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionJobsPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListIngestionJobsPagesWithContext), varargs...)
}

// ListIngestionJobsRequest mocks base method
func (m *MockBedrockAgentAPI) ListIngestionJobsRequest(arg0 *bedrockagent.ListIngestionJobsInput) (*request.Request, *bedrockagent.ListIngestionJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngestionJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListIngestionJobsOutput)
	return ret0, ret1
}

// ListIngestionJobsRequest indicates an expected call of ListIngestionJobsRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListIngestionJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionJobsRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListIngestionJobsRequest), arg0)
}

// ListIngestionJobsWithContext mocks base method
func (m *MockBedrockAgentAPI) ListIngestionJobsWithContext(arg0 context.Context, arg1 *bedrockagent.ListIngestionJobsInput, arg2 ...request.Option) (*bedrockagent.ListIngestionJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIngestionJobsWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListIngestionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngestionJobsWithContext indicates an expected call of ListIngestionJobsWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListIngestionJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngestionJobsWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListIngestionJobsWithContext), varargs...)
}

// ListKnowledgeBases mocks base method
func (m *MockBedrockAgentAPI) ListKnowledgeBases(arg0 *bedrockagent.ListKnowledgeBasesInput) (*bedrockagent.ListKnowledgeBasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBases", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListKnowledgeBasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledgeBases indicates an expected call of ListKnowledgeBases
func (mr *MockBedrockAgentAPIMockRecorder) ListKnowledgeBases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBases", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListKnowledgeBases), arg0)
}

// ListKnowledgeBasesPages mocks base method
func (m *MockBedrockAgentAPI) ListKnowledgeBasesPages(arg0 *bedrockagent.ListKnowledgeBasesInput, arg1 func(*bedrockagent.ListKnowledgeBasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKnowledgeBasesPages indicates an expected call of ListKnowledgeBasesPages
func (mr *MockBedrockAgentAPIMockRecorder) ListKnowledgeBasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListKnowledgeBasesPages), arg0, arg1)
}

// ListKnowledgeBasesPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListKnowledgeBasesPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListKnowledgeBasesInput, arg2 func(*bedrockagent.ListKnowledgeBasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKnowledgeBasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKnowledgeBasesPagesWithContext indicates an expected call of ListKnowledgeBasesPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListKnowledgeBasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListKnowledgeBasesPagesWithContext), varargs...)
}

// ListKnowledgeBasesRequest mocks base method
func (m *MockBedrockAgentAPI) ListKnowledgeBasesRequest(arg0 *bedrockagent.ListKnowledgeBasesInput) (*request.Request, *bedrockagent.ListKnowledgeBasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListKnowledgeBasesOutput)
	return ret0, ret1
}

// ListKnowledgeBasesRequest indicates an expected call of ListKnowledgeBasesRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListKnowledgeBasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListKnowledgeBasesRequest), arg0)
}

// ListKnowledgeBasesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListKnowledgeBasesWithContext(arg0 context.Context, arg1 *bedrockagent.ListKnowledgeBasesInput, arg2 ...request.Option) (*bedrockagent.ListKnowledgeBasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKnowledgeBasesWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListKnowledgeBasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledgeBasesWithContext indicates an expected call of ListKnowledgeBasesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListKnowledgeBasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListKnowledgeBasesWithContext), varargs...)
}

// ListPrompts mocks base method
func (m *MockBedrockAgentAPI) ListPrompts(arg0 *bedrockagent.ListPromptsInput) (*bedrockagent.ListPromptsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrompts", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListPromptsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrompts indicates an expected call of ListPrompts
func (mr *MockBedrockAgentAPIMockRecorder) ListPrompts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrompts", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListPrompts), arg0)
}

// ListPromptsPages mocks base method
func (m *MockBedrockAgentAPI) ListPromptsPages(arg0 *bedrockagent.ListPromptsInput, arg1 func(*bedrockagent.ListPromptsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromptsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPromptsPages indicates an expected call of ListPromptsPages
func (mr *MockBedrockAgentAPIMockRecorder) ListPromptsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsPages", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListPromptsPages), arg0, arg1)
}

// ListPromptsPagesWithContext mocks base method
func (m *MockBedrockAgentAPI) ListPromptsPagesWithContext(arg0 context.Context, arg1 *bedrockagent.ListPromptsInput, arg2 func(*bedrockagent.ListPromptsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPromptsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPromptsPagesWithContext indicates an expected call of ListPromptsPagesWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListPromptsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsPagesWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListPromptsPagesWithContext), varargs...)
}

// ListPromptsRequest mocks base method
func (m *MockBedrockAgentAPI) ListPromptsRequest(arg0 *bedrockagent.ListPromptsInput) (*request.Request, *bedrockagent.ListPromptsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromptsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListPromptsOutput)
	return ret0, ret1
}

// ListPromptsRequest indicates an expected call of ListPromptsRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListPromptsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListPromptsRequest), arg0)
}

// ListPromptsWithContext mocks base method
func (m *MockBedrockAgentAPI) ListPromptsWithContext(arg0 context.Context, arg1 *bedrockagent.ListPromptsInput, arg2 ...request.Option) (*bedrockagent.ListPromptsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPromptsWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListPromptsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPromptsWithContext indicates an expected call of ListPromptsWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListPromptsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListPromptsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockBedrockAgentAPI) ListTagsForResource(arg0 *bedrockagent.ListTagsForResourceInput) (*bedrockagent.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*bedrockagent.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockBedrockAgentAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockBedrockAgentAPI) ListTagsForResourceRequest(arg0 *bedrockagent.ListTagsForResourceInput) (*request.Request, *bedrockagent.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockBedrockAgentAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockBedrockAgentAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *bedrockagent.ListTagsForResourceInput, arg2 ...request.Option) (*bedrockagent.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockBedrockAgentAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PrepareAgent mocks base method
func (m *MockBedrockAgentAPI) PrepareAgent(arg0 *bedrockagent.PrepareAgentInput) (*bedrockagent.PrepareAgentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareAgent", arg0)
	ret0, _ := ret[0].(*bedrockagent.PrepareAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareAgent indicates an expected call of PrepareAgent
func (mr *MockBedrockAgentAPIMockRecorder) PrepareAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareAgent", reflect.TypeOf((*MockBedrockAgentAPI)(nil).PrepareAgent), arg0)
}

// PrepareAgentRequest mocks base method
func (m *MockBedrockAgentAPI) PrepareAgentRequest(arg0 *bedrockagent.PrepareAgentInput) (*request.Request, *bedrockagent.PrepareAgentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareAgentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.PrepareAgentOutput)
	return ret0, ret1
}

// PrepareAgentRequest indicates an expected call of PrepareAgentRequest
func (mr *MockBedrockAgentAPIMockRecorder) PrepareAgentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareAgentRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).PrepareAgentRequest), arg0)
}

// PrepareAgentWithContext mocks base method
func (m *MockBedrockAgentAPI) PrepareAgentWithContext(arg0 context.Context, arg1 *bedrockagent.PrepareAgentInput, arg2 ...request.Option) (*bedrockagent.PrepareAgentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareAgentWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.PrepareAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareAgentWithContext indicates an expected call of PrepareAgentWithContext
func (mr *MockBedrockAgentAPIMockRecorder) PrepareAgentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareAgentWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).PrepareAgentWithContext), varargs...)
}

// PrepareFlow mocks base method
func (m *MockBedrockAgentAPI) PrepareFlow(arg0 *bedrockagent.PrepareFlowInput) (*bedrockagent.PrepareFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareFlow", arg0)
	ret0, _ := ret[0].(*bedrockagent.PrepareFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareFlow indicates an expected call of PrepareFlow
func (mr *MockBedrockAgentAPIMockRecorder) PrepareFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareFlow", reflect.TypeOf((*MockBedrockAgentAPI)(nil).PrepareFlow), arg0)
}

// PrepareFlowRequest mocks base method
func (m *MockBedrockAgentAPI) PrepareFlowRequest(arg0 *bedrockagent.PrepareFlowInput) (*request.Request, *bedrockagent.PrepareFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.PrepareFlowOutput)
	return ret0, ret1
}

// PrepareFlowRequest indicates an expected call of PrepareFlowRequest
func (mr *MockBedrockAgentAPIMockRecorder) PrepareFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareFlowRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).PrepareFlowRequest), arg0)
}

// PrepareFlowWithContext mocks base method
func (m *MockBedrockAgentAPI) PrepareFlowWithContext(arg0 context.Context, arg1 *bedrockagent.PrepareFlowInput, arg2 ...request.Option) (*bedrockagent.PrepareFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareFlowWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.PrepareFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareFlowWithContext indicates an expected call of PrepareFlowWithContext
func (mr *MockBedrockAgentAPIMockRecorder) PrepareFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareFlowWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).PrepareFlowWithContext), varargs...)
}

// StartIngestionJob mocks base method
func (m *MockBedrockAgentAPI) StartIngestionJob(arg0 *bedrockagent.StartIngestionJobInput) (*bedrockagent.StartIngestionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartIngestionJob", arg0)
	ret0, _ := ret[0].(*bedrockagent.StartIngestionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartIngestionJob indicates an expected call of StartIngestionJob
func (mr *MockBedrockAgentAPIMockRecorder) StartIngestionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIngestionJob", reflect.TypeOf((*MockBedrockAgentAPI)(nil).StartIngestionJob), arg0)
}

// StartIngestionJobRequest mocks base method
func (m *MockBedrockAgentAPI) StartIngestionJobRequest(arg0 *bedrockagent.StartIngestionJobInput) (*request.Request, *bedrockagent.StartIngestionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartIngestionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.StartIngestionJobOutput)
	return ret0, ret1
}

// StartIngestionJobRequest indicates an expected call of StartIngestionJobRequest
func (mr *MockBedrockAgentAPIMockRecorder) StartIngestionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIngestionJobRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).StartIngestionJobRequest), arg0)
}

// StartIngestionJobWithContext mocks base method
func (m *MockBedrockAgentAPI) StartIngestionJobWithContext(arg0 context.Context, arg1 *bedrockagent.StartIngestionJobInput, arg2 ...request.Option) (*bedrockagent.StartIngestionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartIngestionJobWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.StartIngestionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartIngestionJobWithContext indicates an expected call of StartIngestionJobWithContext
func (mr *MockBedrockAgentAPIMockRecorder) StartIngestionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIngestionJobWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).StartIngestionJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockBedrockAgentAPI) TagResource(arg0 *bedrockagent.TagResourceInput) (*bedrockagent.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*bedrockagent.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockBedrockAgentAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockBedrockAgentAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockBedrockAgentAPI) TagResourceRequest(arg0 *bedrockagent.TagResourceInput) (*request.Request, *bedrockagent.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockBedrockAgentAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockBedrockAgentAPI) TagResourceWithContext(arg0 context.Context, arg1 *bedrockagent.TagResourceInput, arg2 ...request.Option) (*bedrockagent.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockBedrockAgentAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockBedrockAgentAPI) UntagResource(arg0 *bedrockagent.UntagResourceInput) (*bedrockagent.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*bedrockagent.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockBedrockAgentAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockBedrockAgentAPI) UntagResourceRequest(arg0 *bedrockagent.UntagResourceInput) (*request.Request, *bedrockagent.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockBedrockAgentAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockBedrockAgentAPI) UntagResourceWithContext(arg0 context.Context, arg1 *bedrockagent.UntagResourceInput, arg2 ...request.Option) (*bedrockagent.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockBedrockAgentAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAgent mocks base method
func (m *MockBedrockAgentAPI) UpdateAgent(arg0 *bedrockagent.UpdateAgentInput) (*bedrockagent.UpdateAgentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgent", arg0)
	ret0, _ := ret[0].(*bedrockagent.UpdateAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgent indicates an expected call of UpdateAgent
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgent", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgent), arg0)
}

// UpdateAgentActionGroup mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentActionGroup(arg0 *bedrockagent.UpdateAgentActionGroupInput) (*bedrockagent.UpdateAgentActionGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentActionGroup", arg0)
	ret0, _ := ret[0].(*bedrockagent.UpdateAgentActionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentActionGroup indicates an expected call of UpdateAgentActionGroup
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentActionGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentActionGroup", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentActionGroup), arg0)
}

// UpdateAgentActionGroupRequest mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentActionGroupRequest(arg0 *bedrockagent.UpdateAgentActionGroupInput) (*request.Request, *bedrockagent.UpdateAgentActionGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentActionGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.UpdateAgentActionGroupOutput)
	return ret0, ret1
}

// UpdateAgentActionGroupRequest indicates an expected call of UpdateAgentActionGroupRequest
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentActionGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentActionGroupRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentActionGroupRequest), arg0)
}

// UpdateAgentActionGroupWithContext mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentActionGroupWithContext(arg0 context.Context, arg1 *bedrockagent.UpdateAgentActionGroupInput, arg2 ...request.Option) (*bedrockagent.UpdateAgentActionGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAgentActionGroupWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.UpdateAgentActionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentActionGroupWithContext indicates an expected call of UpdateAgentActionGroupWithContext
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentActionGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentActionGroupWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentActionGroupWithContext), varargs...)
}

// UpdateAgentAlias mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentAlias(arg0 *bedrockagent.UpdateAgentAliasInput) (*bedrockagent.UpdateAgentAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentAlias", arg0)
	ret0, _ := ret[0].(*bedrockagent.UpdateAgentAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentAlias indicates an expected call of UpdateAgentAlias
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentAlias", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentAlias), arg0)
}

// UpdateAgentAliasRequest mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentAliasRequest(arg0 *bedrockagent.UpdateAgentAliasInput) (*request.Request, *bedrockagent.UpdateAgentAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.UpdateAgentAliasOutput)
	return ret0, ret1
}

// UpdateAgentAliasRequest indicates an expected call of UpdateAgentAliasRequest
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentAliasRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentAliasRequest), arg0)
}

// UpdateAgentAliasWithContext mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentAliasWithContext(arg0 context.Context, arg1 *bedrockagent.UpdateAgentAliasInput, arg2 ...request.Option) (*bedrockagent.UpdateAgentAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAgentAliasWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.UpdateAgentAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentAliasWithContext indicates an expected call of UpdateAgentAliasWithContext
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentAliasWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentAliasWithContext), varargs...)
}

// UpdateAgentKnowledgeBase mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentKnowledgeBase(arg0 *bedrockagent.UpdateAgentKnowledgeBaseInput) (*bedrockagent.UpdateAgentKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentKnowledgeBase", arg0)
	ret0, _ := ret[0].(*bedrockagent.UpdateAgentKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentKnowledgeBase indicates an expected call of UpdateAgentKnowledgeBase
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentKnowledgeBase", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentKnowledgeBase), arg0)
}

// UpdateAgentKnowledgeBaseRequest mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentKnowledgeBaseRequest(arg0 *bedrockagent.UpdateAgentKnowledgeBaseInput) (*request.Request, *bedrockagent.UpdateAgentKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.UpdateAgentKnowledgeBaseOutput)
	return ret0, ret1
}

// UpdateAgentKnowledgeBaseRequest indicates an expected call of UpdateAgentKnowledgeBaseRequest
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentKnowledgeBaseRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentKnowledgeBaseRequest), arg0)
}

// UpdateAgentKnowledgeBaseWithContext mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentKnowledgeBaseWithContext(arg0 context.Context, arg1 *bedrockagent.UpdateAgentKnowledgeBaseInput, arg2 ...request.Option) (*bedrockagent.UpdateAgentKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAgentKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.UpdateAgentKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentKnowledgeBaseWithContext indicates an expected call of UpdateAgentKnowledgeBaseWithContext
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentKnowledgeBaseWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentKnowledgeBaseWithContext), varargs...)
}

// UpdateAgentRequest mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentRequest(arg0 *bedrockagent.UpdateAgentInput) (*request.Request, *bedrockagent.UpdateAgentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.UpdateAgentOutput)
	return ret0, ret1
}

// UpdateAgentRequest indicates an expected call of UpdateAgentRequest
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentRequest), arg0)
}

// UpdateAgentWithContext mocks base method
func (m *MockBedrockAgentAPI) UpdateAgentWithContext(arg0 context.Context, arg1 *bedrockagent.UpdateAgentInput, arg2 ...request.Option) (*bedrockagent.UpdateAgentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAgentWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.UpdateAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentWithContext indicates an expected call of UpdateAgentWithContext
func (mr *MockBedrockAgentAPIMockRecorder) UpdateAgentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateAgentWithContext), varargs...)
}

// UpdateDataSource mocks base method
func (m *MockBedrockAgentAPI) UpdateDataSource(arg0 *bedrockagent.UpdateDataSourceInput) (*bedrockagent.UpdateDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSource", arg0)
	ret0, _ := ret[0].(*bedrockagent.UpdateDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSource indicates an expected call of UpdateDataSource
func (mr *MockBedrockAgentAPIMockRecorder) UpdateDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSource", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateDataSource), arg0)
}

// UpdateDataSourceRequest mocks base method
func (m *MockBedrockAgentAPI) UpdateDataSourceRequest(arg0 *bedrockagent.UpdateDataSourceInput) (*request.Request, *bedrockagent.UpdateDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.UpdateDataSourceOutput)
	return ret0, ret1
}

// UpdateDataSourceRequest indicates an expected call of UpdateDataSourceRequest
func (mr *MockBedrockAgentAPIMockRecorder) UpdateDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSourceRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateDataSourceRequest), arg0)
}

// UpdateDataSourceWithContext mocks base method
func (m *MockBedrockAgentAPI) UpdateDataSourceWithContext(arg0 context.Context, arg1 *bedrockagent.UpdateDataSourceInput, arg2 ...request.Option) (*bedrockagent.UpdateDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.UpdateDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSourceWithContext indicates an expected call of UpdateDataSourceWithContext
func (mr *MockBedrockAgentAPIMockRecorder) UpdateDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSourceWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateDataSourceWithContext), varargs...)
}

// UpdateFlow mocks base method
func (m *MockBedrockAgentAPI) UpdateFlow(arg0 *bedrockagent.UpdateFlowInput) (*bedrockagent.UpdateFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlow", arg0)
	ret0, _ := ret[0].(*bedrockagent.UpdateFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlow indicates an expected call of UpdateFlow
func (mr *MockBedrockAgentAPIMockRecorder) UpdateFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlow", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateFlow), arg0)
}

// UpdateFlowAlias mocks base method
func (m *MockBedrockAgentAPI) UpdateFlowAlias(arg0 *bedrockagent.UpdateFlowAliasInput) (*bedrockagent.UpdateFlowAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowAlias", arg0)
	ret0, _ := ret[0].(*bedrockagent.UpdateFlowAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowAlias indicates an expected call of UpdateFlowAlias
func (mr *MockBedrockAgentAPIMockRecorder) UpdateFlowAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowAlias", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateFlowAlias), arg0)
}

// UpdateFlowAliasRequest mocks base method
func (m *MockBedrockAgentAPI) UpdateFlowAliasRequest(arg0 *bedrockagent.UpdateFlowAliasInput) (*request.Request, *bedrockagent.UpdateFlowAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.UpdateFlowAliasOutput)
	return ret0, ret1
}

// UpdateFlowAliasRequest indicates an expected call of UpdateFlowAliasRequest
func (mr *MockBedrockAgentAPIMockRecorder) UpdateFlowAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowAliasRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateFlowAliasRequest), arg0)
}

// UpdateFlowAliasWithContext mocks base method
func (m *MockBedrockAgentAPI) UpdateFlowAliasWithContext(arg0 context.Context, arg1 *bedrockagent.UpdateFlowAliasInput, arg2 ...request.Option) (*bedrockagent.UpdateFlowAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlowAliasWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.UpdateFlowAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowAliasWithContext indicates an expected call of UpdateFlowAliasWithContext
func (mr *MockBedrockAgentAPIMockRecorder) UpdateFlowAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowAliasWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateFlowAliasWithContext), varargs...)
}

// UpdateFlowRequest mocks base method
func (m *MockBedrockAgentAPI) UpdateFlowRequest(arg0 *bedrockagent.UpdateFlowInput) (*request.Request, *bedrockagent.UpdateFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.UpdateFlowOutput)
	return ret0, ret1
}

// UpdateFlowRequest indicates an expected call of UpdateFlowRequest
func (mr *MockBedrockAgentAPIMockRecorder) UpdateFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateFlowRequest), arg0)
}

// UpdateFlowWithContext mocks base method
func (m *MockBedrockAgentAPI) UpdateFlowWithContext(arg0 context.Context, arg1 *bedrockagent.UpdateFlowInput, arg2 ...request.Option) (*bedrockagent.UpdateFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFlowWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.UpdateFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowWithContext indicates an expected call of UpdateFlowWithContext
func (mr *MockBedrockAgentAPIMockRecorder) UpdateFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateFlowWithContext), varargs...)
}

// UpdateKnowledgeBase mocks base method
func (m *MockBedrockAgentAPI) UpdateKnowledgeBase(arg0 *bedrockagent.UpdateKnowledgeBaseInput) (*bedrockagent.UpdateKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKnowledgeBase", arg0)
	ret0, _ := ret[0].(*bedrockagent.UpdateKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKnowledgeBase indicates an expected call of UpdateKnowledgeBase
func (mr *MockBedrockAgentAPIMockRecorder) UpdateKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgeBase", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateKnowledgeBase), arg0)
}

// UpdateKnowledgeBaseRequest mocks base method
func (m *MockBedrockAgentAPI) UpdateKnowledgeBaseRequest(arg0 *bedrockagent.UpdateKnowledgeBaseInput) (*request.Request, *bedrockagent.UpdateKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.UpdateKnowledgeBaseOutput)
	return ret0, ret1
}

// UpdateKnowledgeBaseRequest indicates an expected call of UpdateKnowledgeBaseRequest
func (mr *MockBedrockAgentAPIMockRecorder) UpdateKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgeBaseRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateKnowledgeBaseRequest), arg0)
}

// UpdateKnowledgeBaseWithContext mocks base method
func (m *MockBedrockAgentAPI) UpdateKnowledgeBaseWithContext(arg0 context.Context, arg1 *bedrockagent.UpdateKnowledgeBaseInput, arg2 ...request.Option) (*bedrockagent.UpdateKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.UpdateKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKnowledgeBaseWithContext indicates an expected call of UpdateKnowledgeBaseWithContext
func (mr *MockBedrockAgentAPIMockRecorder) UpdateKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgeBaseWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdateKnowledgeBaseWithContext), varargs...)
}

// UpdatePrompt mocks base method
func (m *MockBedrockAgentAPI) UpdatePrompt(arg0 *bedrockagent.UpdatePromptInput) (*bedrockagent.UpdatePromptOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrompt", arg0)
	ret0, _ := ret[0].(*bedrockagent.UpdatePromptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrompt indicates an expected call of UpdatePrompt
func (mr *MockBedrockAgentAPIMockRecorder) UpdatePrompt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrompt", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdatePrompt), arg0)
}

// UpdatePromptRequest mocks base method
func (m *MockBedrockAgentAPI) UpdatePromptRequest(arg0 *bedrockagent.UpdatePromptInput) (*request.Request, *bedrockagent.UpdatePromptOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePromptRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*bedrockagent.UpdatePromptOutput)
	return ret0, ret1
}

// UpdatePromptRequest indicates an expected call of UpdatePromptRequest
func (mr *MockBedrockAgentAPIMockRecorder) UpdatePromptRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePromptRequest", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdatePromptRequest), arg0)
}

// UpdatePromptWithContext mocks base method
func (m *MockBedrockAgentAPI) UpdatePromptWithContext(arg0 context.Context, arg1 *bedrockagent.UpdatePromptInput, arg2 ...request.Option) (*bedrockagent.UpdatePromptOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePromptWithContext", varargs...)
	ret0, _ := ret[0].(*bedrockagent.UpdatePromptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePromptWithContext indicates an expected call of UpdatePromptWithContext
func (mr *MockBedrockAgentAPIMockRecorder) UpdatePromptWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePromptWithContext", reflect.TypeOf((*MockBedrockAgentAPI)(nil).UpdatePromptWithContext), varargs...)
}
