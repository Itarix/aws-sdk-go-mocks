// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/costoptimizationhub/costoptimizationhubiface (interfaces: CostOptimizationHubAPI)

// Package costoptimizationhubmock is a generated GoMock package.
package costoptimizationhubmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	costoptimizationhub "github.com/aws/aws-sdk-go/service/costoptimizationhub"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCostOptimizationHubAPI is a mock of CostOptimizationHubAPI interface
type MockCostOptimizationHubAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCostOptimizationHubAPIMockRecorder
}

// MockCostOptimizationHubAPIMockRecorder is the mock recorder for MockCostOptimizationHubAPI
type MockCostOptimizationHubAPIMockRecorder struct {
	mock *MockCostOptimizationHubAPI
}

// NewMockCostOptimizationHubAPI creates a new mock instance
func NewMockCostOptimizationHubAPI(ctrl *gomock.Controller) *MockCostOptimizationHubAPI {
	mock := &MockCostOptimizationHubAPI{ctrl: ctrl}
	mock.recorder = &MockCostOptimizationHubAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCostOptimizationHubAPI) EXPECT() *MockCostOptimizationHubAPIMockRecorder {
	return m.recorder
}

// GetPreferences mocks base method
func (m *MockCostOptimizationHubAPI) GetPreferences(arg0 *costoptimizationhub.GetPreferencesInput) (*costoptimizationhub.GetPreferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferences", arg0)
	ret0, _ := ret[0].(*costoptimizationhub.GetPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferences indicates an expected call of GetPreferences
func (mr *MockCostOptimizationHubAPIMockRecorder) GetPreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferences", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).GetPreferences), arg0)
}

// GetPreferencesRequest mocks base method
func (m *MockCostOptimizationHubAPI) GetPreferencesRequest(arg0 *costoptimizationhub.GetPreferencesInput) (*request.Request, *costoptimizationhub.GetPreferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costoptimizationhub.GetPreferencesOutput)
	return ret0, ret1
}

// GetPreferencesRequest indicates an expected call of GetPreferencesRequest
func (mr *MockCostOptimizationHubAPIMockRecorder) GetPreferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferencesRequest", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).GetPreferencesRequest), arg0)
}

// GetPreferencesWithContext mocks base method
func (m *MockCostOptimizationHubAPI) GetPreferencesWithContext(arg0 context.Context, arg1 *costoptimizationhub.GetPreferencesInput, arg2 ...request.Option) (*costoptimizationhub.GetPreferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPreferencesWithContext", varargs...)
	ret0, _ := ret[0].(*costoptimizationhub.GetPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferencesWithContext indicates an expected call of GetPreferencesWithContext
func (mr *MockCostOptimizationHubAPIMockRecorder) GetPreferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferencesWithContext", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).GetPreferencesWithContext), varargs...)
}

// GetRecommendation mocks base method
func (m *MockCostOptimizationHubAPI) GetRecommendation(arg0 *costoptimizationhub.GetRecommendationInput) (*costoptimizationhub.GetRecommendationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendation", arg0)
	ret0, _ := ret[0].(*costoptimizationhub.GetRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendation indicates an expected call of GetRecommendation
func (mr *MockCostOptimizationHubAPIMockRecorder) GetRecommendation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendation", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).GetRecommendation), arg0)
}

// GetRecommendationRequest mocks base method
func (m *MockCostOptimizationHubAPI) GetRecommendationRequest(arg0 *costoptimizationhub.GetRecommendationInput) (*request.Request, *costoptimizationhub.GetRecommendationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costoptimizationhub.GetRecommendationOutput)
	return ret0, ret1
}

// GetRecommendationRequest indicates an expected call of GetRecommendationRequest
func (mr *MockCostOptimizationHubAPIMockRecorder) GetRecommendationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationRequest", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).GetRecommendationRequest), arg0)
}

// GetRecommendationWithContext mocks base method
func (m *MockCostOptimizationHubAPI) GetRecommendationWithContext(arg0 context.Context, arg1 *costoptimizationhub.GetRecommendationInput, arg2 ...request.Option) (*costoptimizationhub.GetRecommendationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecommendationWithContext", varargs...)
	ret0, _ := ret[0].(*costoptimizationhub.GetRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationWithContext indicates an expected call of GetRecommendationWithContext
func (mr *MockCostOptimizationHubAPIMockRecorder) GetRecommendationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationWithContext", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).GetRecommendationWithContext), varargs...)
}

// ListEnrollmentStatuses mocks base method
func (m *MockCostOptimizationHubAPI) ListEnrollmentStatuses(arg0 *costoptimizationhub.ListEnrollmentStatusesInput) (*costoptimizationhub.ListEnrollmentStatusesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnrollmentStatuses", arg0)
	ret0, _ := ret[0].(*costoptimizationhub.ListEnrollmentStatusesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnrollmentStatuses indicates an expected call of ListEnrollmentStatuses
func (mr *MockCostOptimizationHubAPIMockRecorder) ListEnrollmentStatuses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnrollmentStatuses", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListEnrollmentStatuses), arg0)
}

// ListEnrollmentStatusesPages mocks base method
func (m *MockCostOptimizationHubAPI) ListEnrollmentStatusesPages(arg0 *costoptimizationhub.ListEnrollmentStatusesInput, arg1 func(*costoptimizationhub.ListEnrollmentStatusesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnrollmentStatusesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnrollmentStatusesPages indicates an expected call of ListEnrollmentStatusesPages
func (mr *MockCostOptimizationHubAPIMockRecorder) ListEnrollmentStatusesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnrollmentStatusesPages", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListEnrollmentStatusesPages), arg0, arg1)
}

// ListEnrollmentStatusesPagesWithContext mocks base method
func (m *MockCostOptimizationHubAPI) ListEnrollmentStatusesPagesWithContext(arg0 context.Context, arg1 *costoptimizationhub.ListEnrollmentStatusesInput, arg2 func(*costoptimizationhub.ListEnrollmentStatusesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnrollmentStatusesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnrollmentStatusesPagesWithContext indicates an expected call of ListEnrollmentStatusesPagesWithContext
func (mr *MockCostOptimizationHubAPIMockRecorder) ListEnrollmentStatusesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnrollmentStatusesPagesWithContext", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListEnrollmentStatusesPagesWithContext), varargs...)
}

// ListEnrollmentStatusesRequest mocks base method
func (m *MockCostOptimizationHubAPI) ListEnrollmentStatusesRequest(arg0 *costoptimizationhub.ListEnrollmentStatusesInput) (*request.Request, *costoptimizationhub.ListEnrollmentStatusesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnrollmentStatusesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costoptimizationhub.ListEnrollmentStatusesOutput)
	return ret0, ret1
}

// ListEnrollmentStatusesRequest indicates an expected call of ListEnrollmentStatusesRequest
func (mr *MockCostOptimizationHubAPIMockRecorder) ListEnrollmentStatusesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnrollmentStatusesRequest", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListEnrollmentStatusesRequest), arg0)
}

// ListEnrollmentStatusesWithContext mocks base method
func (m *MockCostOptimizationHubAPI) ListEnrollmentStatusesWithContext(arg0 context.Context, arg1 *costoptimizationhub.ListEnrollmentStatusesInput, arg2 ...request.Option) (*costoptimizationhub.ListEnrollmentStatusesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnrollmentStatusesWithContext", varargs...)
	ret0, _ := ret[0].(*costoptimizationhub.ListEnrollmentStatusesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnrollmentStatusesWithContext indicates an expected call of ListEnrollmentStatusesWithContext
func (mr *MockCostOptimizationHubAPIMockRecorder) ListEnrollmentStatusesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnrollmentStatusesWithContext", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListEnrollmentStatusesWithContext), varargs...)
}

// ListRecommendationSummaries mocks base method
func (m *MockCostOptimizationHubAPI) ListRecommendationSummaries(arg0 *costoptimizationhub.ListRecommendationSummariesInput) (*costoptimizationhub.ListRecommendationSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationSummaries", arg0)
	ret0, _ := ret[0].(*costoptimizationhub.ListRecommendationSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendationSummaries indicates an expected call of ListRecommendationSummaries
func (mr *MockCostOptimizationHubAPIMockRecorder) ListRecommendationSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationSummaries", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListRecommendationSummaries), arg0)
}

// ListRecommendationSummariesPages mocks base method
func (m *MockCostOptimizationHubAPI) ListRecommendationSummariesPages(arg0 *costoptimizationhub.ListRecommendationSummariesInput, arg1 func(*costoptimizationhub.ListRecommendationSummariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationSummariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendationSummariesPages indicates an expected call of ListRecommendationSummariesPages
func (mr *MockCostOptimizationHubAPIMockRecorder) ListRecommendationSummariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationSummariesPages", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListRecommendationSummariesPages), arg0, arg1)
}

// ListRecommendationSummariesPagesWithContext mocks base method
func (m *MockCostOptimizationHubAPI) ListRecommendationSummariesPagesWithContext(arg0 context.Context, arg1 *costoptimizationhub.ListRecommendationSummariesInput, arg2 func(*costoptimizationhub.ListRecommendationSummariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendationSummariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendationSummariesPagesWithContext indicates an expected call of ListRecommendationSummariesPagesWithContext
func (mr *MockCostOptimizationHubAPIMockRecorder) ListRecommendationSummariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationSummariesPagesWithContext", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListRecommendationSummariesPagesWithContext), varargs...)
}

// ListRecommendationSummariesRequest mocks base method
func (m *MockCostOptimizationHubAPI) ListRecommendationSummariesRequest(arg0 *costoptimizationhub.ListRecommendationSummariesInput) (*request.Request, *costoptimizationhub.ListRecommendationSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costoptimizationhub.ListRecommendationSummariesOutput)
	return ret0, ret1
}

// ListRecommendationSummariesRequest indicates an expected call of ListRecommendationSummariesRequest
func (mr *MockCostOptimizationHubAPIMockRecorder) ListRecommendationSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationSummariesRequest", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListRecommendationSummariesRequest), arg0)
}

// ListRecommendationSummariesWithContext mocks base method
func (m *MockCostOptimizationHubAPI) ListRecommendationSummariesWithContext(arg0 context.Context, arg1 *costoptimizationhub.ListRecommendationSummariesInput, arg2 ...request.Option) (*costoptimizationhub.ListRecommendationSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendationSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*costoptimizationhub.ListRecommendationSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendationSummariesWithContext indicates an expected call of ListRecommendationSummariesWithContext
func (mr *MockCostOptimizationHubAPIMockRecorder) ListRecommendationSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationSummariesWithContext", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListRecommendationSummariesWithContext), varargs...)
}

// ListRecommendations mocks base method
func (m *MockCostOptimizationHubAPI) ListRecommendations(arg0 *costoptimizationhub.ListRecommendationsInput) (*costoptimizationhub.ListRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendations", arg0)
	ret0, _ := ret[0].(*costoptimizationhub.ListRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendations indicates an expected call of ListRecommendations
func (mr *MockCostOptimizationHubAPIMockRecorder) ListRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendations", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListRecommendations), arg0)
}

// ListRecommendationsPages mocks base method
func (m *MockCostOptimizationHubAPI) ListRecommendationsPages(arg0 *costoptimizationhub.ListRecommendationsInput, arg1 func(*costoptimizationhub.ListRecommendationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendationsPages indicates an expected call of ListRecommendationsPages
func (mr *MockCostOptimizationHubAPIMockRecorder) ListRecommendationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationsPages", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListRecommendationsPages), arg0, arg1)
}

// ListRecommendationsPagesWithContext mocks base method
func (m *MockCostOptimizationHubAPI) ListRecommendationsPagesWithContext(arg0 context.Context, arg1 *costoptimizationhub.ListRecommendationsInput, arg2 func(*costoptimizationhub.ListRecommendationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendationsPagesWithContext indicates an expected call of ListRecommendationsPagesWithContext
func (mr *MockCostOptimizationHubAPIMockRecorder) ListRecommendationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationsPagesWithContext", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListRecommendationsPagesWithContext), varargs...)
}

// ListRecommendationsRequest mocks base method
func (m *MockCostOptimizationHubAPI) ListRecommendationsRequest(arg0 *costoptimizationhub.ListRecommendationsInput) (*request.Request, *costoptimizationhub.ListRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costoptimizationhub.ListRecommendationsOutput)
	return ret0, ret1
}

// ListRecommendationsRequest indicates an expected call of ListRecommendationsRequest
func (mr *MockCostOptimizationHubAPIMockRecorder) ListRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationsRequest", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListRecommendationsRequest), arg0)
}

// ListRecommendationsWithContext mocks base method
func (m *MockCostOptimizationHubAPI) ListRecommendationsWithContext(arg0 context.Context, arg1 *costoptimizationhub.ListRecommendationsInput, arg2 ...request.Option) (*costoptimizationhub.ListRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*costoptimizationhub.ListRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendationsWithContext indicates an expected call of ListRecommendationsWithContext
func (mr *MockCostOptimizationHubAPIMockRecorder) ListRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationsWithContext", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).ListRecommendationsWithContext), varargs...)
}

// UpdateEnrollmentStatus mocks base method
func (m *MockCostOptimizationHubAPI) UpdateEnrollmentStatus(arg0 *costoptimizationhub.UpdateEnrollmentStatusInput) (*costoptimizationhub.UpdateEnrollmentStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrollmentStatus", arg0)
	ret0, _ := ret[0].(*costoptimizationhub.UpdateEnrollmentStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrollmentStatus indicates an expected call of UpdateEnrollmentStatus
func (mr *MockCostOptimizationHubAPIMockRecorder) UpdateEnrollmentStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrollmentStatus", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).UpdateEnrollmentStatus), arg0)
}

// UpdateEnrollmentStatusRequest mocks base method
func (m *MockCostOptimizationHubAPI) UpdateEnrollmentStatusRequest(arg0 *costoptimizationhub.UpdateEnrollmentStatusInput) (*request.Request, *costoptimizationhub.UpdateEnrollmentStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrollmentStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costoptimizationhub.UpdateEnrollmentStatusOutput)
	return ret0, ret1
}

// UpdateEnrollmentStatusRequest indicates an expected call of UpdateEnrollmentStatusRequest
func (mr *MockCostOptimizationHubAPIMockRecorder) UpdateEnrollmentStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrollmentStatusRequest", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).UpdateEnrollmentStatusRequest), arg0)
}

// UpdateEnrollmentStatusWithContext mocks base method
func (m *MockCostOptimizationHubAPI) UpdateEnrollmentStatusWithContext(arg0 context.Context, arg1 *costoptimizationhub.UpdateEnrollmentStatusInput, arg2 ...request.Option) (*costoptimizationhub.UpdateEnrollmentStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnrollmentStatusWithContext", varargs...)
	ret0, _ := ret[0].(*costoptimizationhub.UpdateEnrollmentStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrollmentStatusWithContext indicates an expected call of UpdateEnrollmentStatusWithContext
func (mr *MockCostOptimizationHubAPIMockRecorder) UpdateEnrollmentStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrollmentStatusWithContext", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).UpdateEnrollmentStatusWithContext), varargs...)
}

// UpdatePreferences mocks base method
func (m *MockCostOptimizationHubAPI) UpdatePreferences(arg0 *costoptimizationhub.UpdatePreferencesInput) (*costoptimizationhub.UpdatePreferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreferences", arg0)
	ret0, _ := ret[0].(*costoptimizationhub.UpdatePreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePreferences indicates an expected call of UpdatePreferences
func (mr *MockCostOptimizationHubAPIMockRecorder) UpdatePreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreferences", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).UpdatePreferences), arg0)
}

// UpdatePreferencesRequest mocks base method
func (m *MockCostOptimizationHubAPI) UpdatePreferencesRequest(arg0 *costoptimizationhub.UpdatePreferencesInput) (*request.Request, *costoptimizationhub.UpdatePreferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costoptimizationhub.UpdatePreferencesOutput)
	return ret0, ret1
}

// UpdatePreferencesRequest indicates an expected call of UpdatePreferencesRequest
func (mr *MockCostOptimizationHubAPIMockRecorder) UpdatePreferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreferencesRequest", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).UpdatePreferencesRequest), arg0)
}

// UpdatePreferencesWithContext mocks base method
func (m *MockCostOptimizationHubAPI) UpdatePreferencesWithContext(arg0 context.Context, arg1 *costoptimizationhub.UpdatePreferencesInput, arg2 ...request.Option) (*costoptimizationhub.UpdatePreferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePreferencesWithContext", varargs...)
	ret0, _ := ret[0].(*costoptimizationhub.UpdatePreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePreferencesWithContext indicates an expected call of UpdatePreferencesWithContext
func (mr *MockCostOptimizationHubAPIMockRecorder) UpdatePreferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreferencesWithContext", reflect.TypeOf((*MockCostOptimizationHubAPI)(nil).UpdatePreferencesWithContext), varargs...)
}
