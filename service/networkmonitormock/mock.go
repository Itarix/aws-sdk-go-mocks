// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/networkmonitor/networkmonitoriface (interfaces: NetworkMonitorAPI)

// Package networkmonitormock is a generated GoMock package.
package networkmonitormock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	networkmonitor "github.com/aws/aws-sdk-go/service/networkmonitor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNetworkMonitorAPI is a mock of NetworkMonitorAPI interface
type MockNetworkMonitorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMonitorAPIMockRecorder
}

// MockNetworkMonitorAPIMockRecorder is the mock recorder for MockNetworkMonitorAPI
type MockNetworkMonitorAPIMockRecorder struct {
	mock *MockNetworkMonitorAPI
}

// NewMockNetworkMonitorAPI creates a new mock instance
func NewMockNetworkMonitorAPI(ctrl *gomock.Controller) *MockNetworkMonitorAPI {
	mock := &MockNetworkMonitorAPI{ctrl: ctrl}
	mock.recorder = &MockNetworkMonitorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkMonitorAPI) EXPECT() *MockNetworkMonitorAPIMockRecorder {
	return m.recorder
}

// CreateMonitor mocks base method
func (m *MockNetworkMonitorAPI) CreateMonitor(arg0 *networkmonitor.CreateMonitorInput) (*networkmonitor.CreateMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitor", arg0)
	ret0, _ := ret[0].(*networkmonitor.CreateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitor indicates an expected call of CreateMonitor
func (mr *MockNetworkMonitorAPIMockRecorder) CreateMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitor", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).CreateMonitor), arg0)
}

// CreateMonitorRequest mocks base method
func (m *MockNetworkMonitorAPI) CreateMonitorRequest(arg0 *networkmonitor.CreateMonitorInput) (*request.Request, *networkmonitor.CreateMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.CreateMonitorOutput)
	return ret0, ret1
}

// CreateMonitorRequest indicates an expected call of CreateMonitorRequest
func (mr *MockNetworkMonitorAPIMockRecorder) CreateMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitorRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).CreateMonitorRequest), arg0)
}

// CreateMonitorWithContext mocks base method
func (m *MockNetworkMonitorAPI) CreateMonitorWithContext(arg0 context.Context, arg1 *networkmonitor.CreateMonitorInput, arg2 ...request.Option) (*networkmonitor.CreateMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.CreateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitorWithContext indicates an expected call of CreateMonitorWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) CreateMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitorWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).CreateMonitorWithContext), varargs...)
}

// CreateProbe mocks base method
func (m *MockNetworkMonitorAPI) CreateProbe(arg0 *networkmonitor.CreateProbeInput) (*networkmonitor.CreateProbeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProbe", arg0)
	ret0, _ := ret[0].(*networkmonitor.CreateProbeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProbe indicates an expected call of CreateProbe
func (mr *MockNetworkMonitorAPIMockRecorder) CreateProbe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProbe", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).CreateProbe), arg0)
}

// CreateProbeRequest mocks base method
func (m *MockNetworkMonitorAPI) CreateProbeRequest(arg0 *networkmonitor.CreateProbeInput) (*request.Request, *networkmonitor.CreateProbeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProbeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.CreateProbeOutput)
	return ret0, ret1
}

// CreateProbeRequest indicates an expected call of CreateProbeRequest
func (mr *MockNetworkMonitorAPIMockRecorder) CreateProbeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProbeRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).CreateProbeRequest), arg0)
}

// CreateProbeWithContext mocks base method
func (m *MockNetworkMonitorAPI) CreateProbeWithContext(arg0 context.Context, arg1 *networkmonitor.CreateProbeInput, arg2 ...request.Option) (*networkmonitor.CreateProbeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProbeWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.CreateProbeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProbeWithContext indicates an expected call of CreateProbeWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) CreateProbeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProbeWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).CreateProbeWithContext), varargs...)
}

// DeleteMonitor mocks base method
func (m *MockNetworkMonitorAPI) DeleteMonitor(arg0 *networkmonitor.DeleteMonitorInput) (*networkmonitor.DeleteMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitor", arg0)
	ret0, _ := ret[0].(*networkmonitor.DeleteMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMonitor indicates an expected call of DeleteMonitor
func (mr *MockNetworkMonitorAPIMockRecorder) DeleteMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitor", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).DeleteMonitor), arg0)
}

// DeleteMonitorRequest mocks base method
func (m *MockNetworkMonitorAPI) DeleteMonitorRequest(arg0 *networkmonitor.DeleteMonitorInput) (*request.Request, *networkmonitor.DeleteMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.DeleteMonitorOutput)
	return ret0, ret1
}

// DeleteMonitorRequest indicates an expected call of DeleteMonitorRequest
func (mr *MockNetworkMonitorAPIMockRecorder) DeleteMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitorRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).DeleteMonitorRequest), arg0)
}

// DeleteMonitorWithContext mocks base method
func (m *MockNetworkMonitorAPI) DeleteMonitorWithContext(arg0 context.Context, arg1 *networkmonitor.DeleteMonitorInput, arg2 ...request.Option) (*networkmonitor.DeleteMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.DeleteMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMonitorWithContext indicates an expected call of DeleteMonitorWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) DeleteMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitorWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).DeleteMonitorWithContext), varargs...)
}

// DeleteProbe mocks base method
func (m *MockNetworkMonitorAPI) DeleteProbe(arg0 *networkmonitor.DeleteProbeInput) (*networkmonitor.DeleteProbeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProbe", arg0)
	ret0, _ := ret[0].(*networkmonitor.DeleteProbeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProbe indicates an expected call of DeleteProbe
func (mr *MockNetworkMonitorAPIMockRecorder) DeleteProbe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProbe", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).DeleteProbe), arg0)
}

// DeleteProbeRequest mocks base method
func (m *MockNetworkMonitorAPI) DeleteProbeRequest(arg0 *networkmonitor.DeleteProbeInput) (*request.Request, *networkmonitor.DeleteProbeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProbeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.DeleteProbeOutput)
	return ret0, ret1
}

// DeleteProbeRequest indicates an expected call of DeleteProbeRequest
func (mr *MockNetworkMonitorAPIMockRecorder) DeleteProbeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProbeRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).DeleteProbeRequest), arg0)
}

// DeleteProbeWithContext mocks base method
func (m *MockNetworkMonitorAPI) DeleteProbeWithContext(arg0 context.Context, arg1 *networkmonitor.DeleteProbeInput, arg2 ...request.Option) (*networkmonitor.DeleteProbeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProbeWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.DeleteProbeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProbeWithContext indicates an expected call of DeleteProbeWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) DeleteProbeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProbeWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).DeleteProbeWithContext), varargs...)
}

// GetMonitor mocks base method
func (m *MockNetworkMonitorAPI) GetMonitor(arg0 *networkmonitor.GetMonitorInput) (*networkmonitor.GetMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitor", arg0)
	ret0, _ := ret[0].(*networkmonitor.GetMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitor indicates an expected call of GetMonitor
func (mr *MockNetworkMonitorAPIMockRecorder) GetMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitor", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).GetMonitor), arg0)
}

// GetMonitorRequest mocks base method
func (m *MockNetworkMonitorAPI) GetMonitorRequest(arg0 *networkmonitor.GetMonitorInput) (*request.Request, *networkmonitor.GetMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.GetMonitorOutput)
	return ret0, ret1
}

// GetMonitorRequest indicates an expected call of GetMonitorRequest
func (mr *MockNetworkMonitorAPIMockRecorder) GetMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).GetMonitorRequest), arg0)
}

// GetMonitorWithContext mocks base method
func (m *MockNetworkMonitorAPI) GetMonitorWithContext(arg0 context.Context, arg1 *networkmonitor.GetMonitorInput, arg2 ...request.Option) (*networkmonitor.GetMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.GetMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitorWithContext indicates an expected call of GetMonitorWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) GetMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).GetMonitorWithContext), varargs...)
}

// GetProbe mocks base method
func (m *MockNetworkMonitorAPI) GetProbe(arg0 *networkmonitor.GetProbeInput) (*networkmonitor.GetProbeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProbe", arg0)
	ret0, _ := ret[0].(*networkmonitor.GetProbeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProbe indicates an expected call of GetProbe
func (mr *MockNetworkMonitorAPIMockRecorder) GetProbe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProbe", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).GetProbe), arg0)
}

// GetProbeRequest mocks base method
func (m *MockNetworkMonitorAPI) GetProbeRequest(arg0 *networkmonitor.GetProbeInput) (*request.Request, *networkmonitor.GetProbeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProbeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.GetProbeOutput)
	return ret0, ret1
}

// GetProbeRequest indicates an expected call of GetProbeRequest
func (mr *MockNetworkMonitorAPIMockRecorder) GetProbeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProbeRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).GetProbeRequest), arg0)
}

// GetProbeWithContext mocks base method
func (m *MockNetworkMonitorAPI) GetProbeWithContext(arg0 context.Context, arg1 *networkmonitor.GetProbeInput, arg2 ...request.Option) (*networkmonitor.GetProbeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProbeWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.GetProbeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProbeWithContext indicates an expected call of GetProbeWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) GetProbeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProbeWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).GetProbeWithContext), varargs...)
}

// ListMonitors mocks base method
func (m *MockNetworkMonitorAPI) ListMonitors(arg0 *networkmonitor.ListMonitorsInput) (*networkmonitor.ListMonitorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitors", arg0)
	ret0, _ := ret[0].(*networkmonitor.ListMonitorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitors indicates an expected call of ListMonitors
func (mr *MockNetworkMonitorAPIMockRecorder) ListMonitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitors", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).ListMonitors), arg0)
}

// ListMonitorsPages mocks base method
func (m *MockNetworkMonitorAPI) ListMonitorsPages(arg0 *networkmonitor.ListMonitorsInput, arg1 func(*networkmonitor.ListMonitorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMonitorsPages indicates an expected call of ListMonitorsPages
func (mr *MockNetworkMonitorAPIMockRecorder) ListMonitorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsPages", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).ListMonitorsPages), arg0, arg1)
}

// ListMonitorsPagesWithContext mocks base method
func (m *MockNetworkMonitorAPI) ListMonitorsPagesWithContext(arg0 context.Context, arg1 *networkmonitor.ListMonitorsInput, arg2 func(*networkmonitor.ListMonitorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMonitorsPagesWithContext indicates an expected call of ListMonitorsPagesWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) ListMonitorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsPagesWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).ListMonitorsPagesWithContext), varargs...)
}

// ListMonitorsRequest mocks base method
func (m *MockNetworkMonitorAPI) ListMonitorsRequest(arg0 *networkmonitor.ListMonitorsInput) (*request.Request, *networkmonitor.ListMonitorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.ListMonitorsOutput)
	return ret0, ret1
}

// ListMonitorsRequest indicates an expected call of ListMonitorsRequest
func (mr *MockNetworkMonitorAPIMockRecorder) ListMonitorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).ListMonitorsRequest), arg0)
}

// ListMonitorsWithContext mocks base method
func (m *MockNetworkMonitorAPI) ListMonitorsWithContext(arg0 context.Context, arg1 *networkmonitor.ListMonitorsInput, arg2 ...request.Option) (*networkmonitor.ListMonitorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitorsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.ListMonitorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitorsWithContext indicates an expected call of ListMonitorsWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) ListMonitorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorsWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).ListMonitorsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockNetworkMonitorAPI) ListTagsForResource(arg0 *networkmonitor.ListTagsForResourceInput) (*networkmonitor.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*networkmonitor.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockNetworkMonitorAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockNetworkMonitorAPI) ListTagsForResourceRequest(arg0 *networkmonitor.ListTagsForResourceInput) (*request.Request, *networkmonitor.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockNetworkMonitorAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockNetworkMonitorAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *networkmonitor.ListTagsForResourceInput, arg2 ...request.Option) (*networkmonitor.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockNetworkMonitorAPI) TagResource(arg0 *networkmonitor.TagResourceInput) (*networkmonitor.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*networkmonitor.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockNetworkMonitorAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockNetworkMonitorAPI) TagResourceRequest(arg0 *networkmonitor.TagResourceInput) (*request.Request, *networkmonitor.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockNetworkMonitorAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockNetworkMonitorAPI) TagResourceWithContext(arg0 context.Context, arg1 *networkmonitor.TagResourceInput, arg2 ...request.Option) (*networkmonitor.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockNetworkMonitorAPI) UntagResource(arg0 *networkmonitor.UntagResourceInput) (*networkmonitor.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*networkmonitor.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockNetworkMonitorAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockNetworkMonitorAPI) UntagResourceRequest(arg0 *networkmonitor.UntagResourceInput) (*request.Request, *networkmonitor.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockNetworkMonitorAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockNetworkMonitorAPI) UntagResourceWithContext(arg0 context.Context, arg1 *networkmonitor.UntagResourceInput, arg2 ...request.Option) (*networkmonitor.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateMonitor mocks base method
func (m *MockNetworkMonitorAPI) UpdateMonitor(arg0 *networkmonitor.UpdateMonitorInput) (*networkmonitor.UpdateMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitor", arg0)
	ret0, _ := ret[0].(*networkmonitor.UpdateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonitor indicates an expected call of UpdateMonitor
func (mr *MockNetworkMonitorAPIMockRecorder) UpdateMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitor", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).UpdateMonitor), arg0)
}

// UpdateMonitorRequest mocks base method
func (m *MockNetworkMonitorAPI) UpdateMonitorRequest(arg0 *networkmonitor.UpdateMonitorInput) (*request.Request, *networkmonitor.UpdateMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.UpdateMonitorOutput)
	return ret0, ret1
}

// UpdateMonitorRequest indicates an expected call of UpdateMonitorRequest
func (mr *MockNetworkMonitorAPIMockRecorder) UpdateMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitorRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).UpdateMonitorRequest), arg0)
}

// UpdateMonitorWithContext mocks base method
func (m *MockNetworkMonitorAPI) UpdateMonitorWithContext(arg0 context.Context, arg1 *networkmonitor.UpdateMonitorInput, arg2 ...request.Option) (*networkmonitor.UpdateMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.UpdateMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonitorWithContext indicates an expected call of UpdateMonitorWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) UpdateMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitorWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).UpdateMonitorWithContext), varargs...)
}

// UpdateProbe mocks base method
func (m *MockNetworkMonitorAPI) UpdateProbe(arg0 *networkmonitor.UpdateProbeInput) (*networkmonitor.UpdateProbeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProbe", arg0)
	ret0, _ := ret[0].(*networkmonitor.UpdateProbeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProbe indicates an expected call of UpdateProbe
func (mr *MockNetworkMonitorAPIMockRecorder) UpdateProbe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProbe", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).UpdateProbe), arg0)
}

// UpdateProbeRequest mocks base method
func (m *MockNetworkMonitorAPI) UpdateProbeRequest(arg0 *networkmonitor.UpdateProbeInput) (*request.Request, *networkmonitor.UpdateProbeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProbeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmonitor.UpdateProbeOutput)
	return ret0, ret1
}

// UpdateProbeRequest indicates an expected call of UpdateProbeRequest
func (mr *MockNetworkMonitorAPIMockRecorder) UpdateProbeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProbeRequest", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).UpdateProbeRequest), arg0)
}

// UpdateProbeWithContext mocks base method
func (m *MockNetworkMonitorAPI) UpdateProbeWithContext(arg0 context.Context, arg1 *networkmonitor.UpdateProbeInput, arg2 ...request.Option) (*networkmonitor.UpdateProbeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProbeWithContext", varargs...)
	ret0, _ := ret[0].(*networkmonitor.UpdateProbeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProbeWithContext indicates an expected call of UpdateProbeWithContext
func (mr *MockNetworkMonitorAPIMockRecorder) UpdateProbeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProbeWithContext", reflect.TypeOf((*MockNetworkMonitorAPI)(nil).UpdateProbeWithContext), varargs...)
}
