// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/emrserverless/emrserverlessiface (interfaces: EMRServerlessAPI)

// Package emrserverlessmock is a generated GoMock package.
package emrserverlessmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	emrserverless "github.com/aws/aws-sdk-go/service/emrserverless"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEMRServerlessAPI is a mock of EMRServerlessAPI interface
type MockEMRServerlessAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEMRServerlessAPIMockRecorder
}

// MockEMRServerlessAPIMockRecorder is the mock recorder for MockEMRServerlessAPI
type MockEMRServerlessAPIMockRecorder struct {
	mock *MockEMRServerlessAPI
}

// NewMockEMRServerlessAPI creates a new mock instance
func NewMockEMRServerlessAPI(ctrl *gomock.Controller) *MockEMRServerlessAPI {
	mock := &MockEMRServerlessAPI{ctrl: ctrl}
	mock.recorder = &MockEMRServerlessAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEMRServerlessAPI) EXPECT() *MockEMRServerlessAPIMockRecorder {
	return m.recorder
}

// CancelJobRun mocks base method
func (m *MockEMRServerlessAPI) CancelJobRun(arg0 *emrserverless.CancelJobRunInput) (*emrserverless.CancelJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobRun", arg0)
	ret0, _ := ret[0].(*emrserverless.CancelJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobRun indicates an expected call of CancelJobRun
func (mr *MockEMRServerlessAPIMockRecorder) CancelJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRun", reflect.TypeOf((*MockEMRServerlessAPI)(nil).CancelJobRun), arg0)
}

// CancelJobRunRequest mocks base method
func (m *MockEMRServerlessAPI) CancelJobRunRequest(arg0 *emrserverless.CancelJobRunInput) (*request.Request, *emrserverless.CancelJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.CancelJobRunOutput)
	return ret0, ret1
}

// CancelJobRunRequest indicates an expected call of CancelJobRunRequest
func (mr *MockEMRServerlessAPIMockRecorder) CancelJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRunRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).CancelJobRunRequest), arg0)
}

// CancelJobRunWithContext mocks base method
func (m *MockEMRServerlessAPI) CancelJobRunWithContext(arg0 context.Context, arg1 *emrserverless.CancelJobRunInput, arg2 ...request.Option) (*emrserverless.CancelJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.CancelJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobRunWithContext indicates an expected call of CancelJobRunWithContext
func (mr *MockEMRServerlessAPIMockRecorder) CancelJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRunWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).CancelJobRunWithContext), varargs...)
}

// CreateApplication mocks base method
func (m *MockEMRServerlessAPI) CreateApplication(arg0 *emrserverless.CreateApplicationInput) (*emrserverless.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*emrserverless.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockEMRServerlessAPIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockEMRServerlessAPI)(nil).CreateApplication), arg0)
}

// CreateApplicationRequest mocks base method
func (m *MockEMRServerlessAPI) CreateApplicationRequest(arg0 *emrserverless.CreateApplicationInput) (*request.Request, *emrserverless.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest
func (mr *MockEMRServerlessAPIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationWithContext mocks base method
func (m *MockEMRServerlessAPI) CreateApplicationWithContext(arg0 context.Context, arg1 *emrserverless.CreateApplicationInput, arg2 ...request.Option) (*emrserverless.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext
func (mr *MockEMRServerlessAPIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).CreateApplicationWithContext), varargs...)
}

// DeleteApplication mocks base method
func (m *MockEMRServerlessAPI) DeleteApplication(arg0 *emrserverless.DeleteApplicationInput) (*emrserverless.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*emrserverless.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockEMRServerlessAPIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockEMRServerlessAPI)(nil).DeleteApplication), arg0)
}

// DeleteApplicationRequest mocks base method
func (m *MockEMRServerlessAPI) DeleteApplicationRequest(arg0 *emrserverless.DeleteApplicationInput) (*request.Request, *emrserverless.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest
func (mr *MockEMRServerlessAPIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationWithContext mocks base method
func (m *MockEMRServerlessAPI) DeleteApplicationWithContext(arg0 context.Context, arg1 *emrserverless.DeleteApplicationInput, arg2 ...request.Option) (*emrserverless.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext
func (mr *MockEMRServerlessAPIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).DeleteApplicationWithContext), varargs...)
}

// GetApplication mocks base method
func (m *MockEMRServerlessAPI) GetApplication(arg0 *emrserverless.GetApplicationInput) (*emrserverless.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*emrserverless.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockEMRServerlessAPIMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockEMRServerlessAPI)(nil).GetApplication), arg0)
}

// GetApplicationRequest mocks base method
func (m *MockEMRServerlessAPI) GetApplicationRequest(arg0 *emrserverless.GetApplicationInput) (*request.Request, *emrserverless.GetApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.GetApplicationOutput)
	return ret0, ret1
}

// GetApplicationRequest indicates an expected call of GetApplicationRequest
func (mr *MockEMRServerlessAPIMockRecorder) GetApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).GetApplicationRequest), arg0)
}

// GetApplicationWithContext mocks base method
func (m *MockEMRServerlessAPI) GetApplicationWithContext(arg0 context.Context, arg1 *emrserverless.GetApplicationInput, arg2 ...request.Option) (*emrserverless.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationWithContext indicates an expected call of GetApplicationWithContext
func (mr *MockEMRServerlessAPIMockRecorder) GetApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).GetApplicationWithContext), varargs...)
}

// GetJobRun mocks base method
func (m *MockEMRServerlessAPI) GetJobRun(arg0 *emrserverless.GetJobRunInput) (*emrserverless.GetJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRun", arg0)
	ret0, _ := ret[0].(*emrserverless.GetJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRun indicates an expected call of GetJobRun
func (mr *MockEMRServerlessAPIMockRecorder) GetJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRun", reflect.TypeOf((*MockEMRServerlessAPI)(nil).GetJobRun), arg0)
}

// GetJobRunRequest mocks base method
func (m *MockEMRServerlessAPI) GetJobRunRequest(arg0 *emrserverless.GetJobRunInput) (*request.Request, *emrserverless.GetJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.GetJobRunOutput)
	return ret0, ret1
}

// GetJobRunRequest indicates an expected call of GetJobRunRequest
func (mr *MockEMRServerlessAPIMockRecorder) GetJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).GetJobRunRequest), arg0)
}

// GetJobRunWithContext mocks base method
func (m *MockEMRServerlessAPI) GetJobRunWithContext(arg0 context.Context, arg1 *emrserverless.GetJobRunInput, arg2 ...request.Option) (*emrserverless.GetJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.GetJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRunWithContext indicates an expected call of GetJobRunWithContext
func (mr *MockEMRServerlessAPIMockRecorder) GetJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).GetJobRunWithContext), varargs...)
}

// ListApplications mocks base method
func (m *MockEMRServerlessAPI) ListApplications(arg0 *emrserverless.ListApplicationsInput) (*emrserverless.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*emrserverless.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockEMRServerlessAPIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method
func (m *MockEMRServerlessAPI) ListApplicationsPages(arg0 *emrserverless.ListApplicationsInput, arg1 func(*emrserverless.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages
func (mr *MockEMRServerlessAPIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method
func (m *MockEMRServerlessAPI) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *emrserverless.ListApplicationsInput, arg2 func(*emrserverless.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext
func (mr *MockEMRServerlessAPIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method
func (m *MockEMRServerlessAPI) ListApplicationsRequest(arg0 *emrserverless.ListApplicationsInput) (*request.Request, *emrserverless.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest
func (mr *MockEMRServerlessAPIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method
func (m *MockEMRServerlessAPI) ListApplicationsWithContext(arg0 context.Context, arg1 *emrserverless.ListApplicationsInput, arg2 ...request.Option) (*emrserverless.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext
func (mr *MockEMRServerlessAPIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListApplicationsWithContext), varargs...)
}

// ListJobRuns mocks base method
func (m *MockEMRServerlessAPI) ListJobRuns(arg0 *emrserverless.ListJobRunsInput) (*emrserverless.ListJobRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobRuns", arg0)
	ret0, _ := ret[0].(*emrserverless.ListJobRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobRuns indicates an expected call of ListJobRuns
func (mr *MockEMRServerlessAPIMockRecorder) ListJobRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRuns", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListJobRuns), arg0)
}

// ListJobRunsPages mocks base method
func (m *MockEMRServerlessAPI) ListJobRunsPages(arg0 *emrserverless.ListJobRunsInput, arg1 func(*emrserverless.ListJobRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobRunsPages indicates an expected call of ListJobRunsPages
func (mr *MockEMRServerlessAPIMockRecorder) ListJobRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsPages", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListJobRunsPages), arg0, arg1)
}

// ListJobRunsPagesWithContext mocks base method
func (m *MockEMRServerlessAPI) ListJobRunsPagesWithContext(arg0 context.Context, arg1 *emrserverless.ListJobRunsInput, arg2 func(*emrserverless.ListJobRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobRunsPagesWithContext indicates an expected call of ListJobRunsPagesWithContext
func (mr *MockEMRServerlessAPIMockRecorder) ListJobRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsPagesWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListJobRunsPagesWithContext), varargs...)
}

// ListJobRunsRequest mocks base method
func (m *MockEMRServerlessAPI) ListJobRunsRequest(arg0 *emrserverless.ListJobRunsInput) (*request.Request, *emrserverless.ListJobRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.ListJobRunsOutput)
	return ret0, ret1
}

// ListJobRunsRequest indicates an expected call of ListJobRunsRequest
func (mr *MockEMRServerlessAPIMockRecorder) ListJobRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListJobRunsRequest), arg0)
}

// ListJobRunsWithContext mocks base method
func (m *MockEMRServerlessAPI) ListJobRunsWithContext(arg0 context.Context, arg1 *emrserverless.ListJobRunsInput, arg2 ...request.Option) (*emrserverless.ListJobRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobRunsWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.ListJobRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobRunsWithContext indicates an expected call of ListJobRunsWithContext
func (mr *MockEMRServerlessAPIMockRecorder) ListJobRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListJobRunsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockEMRServerlessAPI) ListTagsForResource(arg0 *emrserverless.ListTagsForResourceInput) (*emrserverless.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*emrserverless.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockEMRServerlessAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockEMRServerlessAPI) ListTagsForResourceRequest(arg0 *emrserverless.ListTagsForResourceInput) (*request.Request, *emrserverless.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockEMRServerlessAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockEMRServerlessAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *emrserverless.ListTagsForResourceInput, arg2 ...request.Option) (*emrserverless.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockEMRServerlessAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartApplication mocks base method
func (m *MockEMRServerlessAPI) StartApplication(arg0 *emrserverless.StartApplicationInput) (*emrserverless.StartApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApplication", arg0)
	ret0, _ := ret[0].(*emrserverless.StartApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApplication indicates an expected call of StartApplication
func (mr *MockEMRServerlessAPIMockRecorder) StartApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplication", reflect.TypeOf((*MockEMRServerlessAPI)(nil).StartApplication), arg0)
}

// StartApplicationRequest mocks base method
func (m *MockEMRServerlessAPI) StartApplicationRequest(arg0 *emrserverless.StartApplicationInput) (*request.Request, *emrserverless.StartApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.StartApplicationOutput)
	return ret0, ret1
}

// StartApplicationRequest indicates an expected call of StartApplicationRequest
func (mr *MockEMRServerlessAPIMockRecorder) StartApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplicationRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).StartApplicationRequest), arg0)
}

// StartApplicationWithContext mocks base method
func (m *MockEMRServerlessAPI) StartApplicationWithContext(arg0 context.Context, arg1 *emrserverless.StartApplicationInput, arg2 ...request.Option) (*emrserverless.StartApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.StartApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApplicationWithContext indicates an expected call of StartApplicationWithContext
func (mr *MockEMRServerlessAPIMockRecorder) StartApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplicationWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).StartApplicationWithContext), varargs...)
}

// StartJobRun mocks base method
func (m *MockEMRServerlessAPI) StartJobRun(arg0 *emrserverless.StartJobRunInput) (*emrserverless.StartJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRun", arg0)
	ret0, _ := ret[0].(*emrserverless.StartJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobRun indicates an expected call of StartJobRun
func (mr *MockEMRServerlessAPIMockRecorder) StartJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRun", reflect.TypeOf((*MockEMRServerlessAPI)(nil).StartJobRun), arg0)
}

// StartJobRunRequest mocks base method
func (m *MockEMRServerlessAPI) StartJobRunRequest(arg0 *emrserverless.StartJobRunInput) (*request.Request, *emrserverless.StartJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.StartJobRunOutput)
	return ret0, ret1
}

// StartJobRunRequest indicates an expected call of StartJobRunRequest
func (mr *MockEMRServerlessAPIMockRecorder) StartJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRunRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).StartJobRunRequest), arg0)
}

// StartJobRunWithContext mocks base method
func (m *MockEMRServerlessAPI) StartJobRunWithContext(arg0 context.Context, arg1 *emrserverless.StartJobRunInput, arg2 ...request.Option) (*emrserverless.StartJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.StartJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobRunWithContext indicates an expected call of StartJobRunWithContext
func (mr *MockEMRServerlessAPIMockRecorder) StartJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRunWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).StartJobRunWithContext), varargs...)
}

// StopApplication mocks base method
func (m *MockEMRServerlessAPI) StopApplication(arg0 *emrserverless.StopApplicationInput) (*emrserverless.StopApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopApplication", arg0)
	ret0, _ := ret[0].(*emrserverless.StopApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApplication indicates an expected call of StopApplication
func (mr *MockEMRServerlessAPIMockRecorder) StopApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplication", reflect.TypeOf((*MockEMRServerlessAPI)(nil).StopApplication), arg0)
}

// StopApplicationRequest mocks base method
func (m *MockEMRServerlessAPI) StopApplicationRequest(arg0 *emrserverless.StopApplicationInput) (*request.Request, *emrserverless.StopApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.StopApplicationOutput)
	return ret0, ret1
}

// StopApplicationRequest indicates an expected call of StopApplicationRequest
func (mr *MockEMRServerlessAPIMockRecorder) StopApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplicationRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).StopApplicationRequest), arg0)
}

// StopApplicationWithContext mocks base method
func (m *MockEMRServerlessAPI) StopApplicationWithContext(arg0 context.Context, arg1 *emrserverless.StopApplicationInput, arg2 ...request.Option) (*emrserverless.StopApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.StopApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApplicationWithContext indicates an expected call of StopApplicationWithContext
func (mr *MockEMRServerlessAPIMockRecorder) StopApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplicationWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).StopApplicationWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockEMRServerlessAPI) TagResource(arg0 *emrserverless.TagResourceInput) (*emrserverless.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*emrserverless.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockEMRServerlessAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockEMRServerlessAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockEMRServerlessAPI) TagResourceRequest(arg0 *emrserverless.TagResourceInput) (*request.Request, *emrserverless.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockEMRServerlessAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockEMRServerlessAPI) TagResourceWithContext(arg0 context.Context, arg1 *emrserverless.TagResourceInput, arg2 ...request.Option) (*emrserverless.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockEMRServerlessAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockEMRServerlessAPI) UntagResource(arg0 *emrserverless.UntagResourceInput) (*emrserverless.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*emrserverless.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockEMRServerlessAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockEMRServerlessAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockEMRServerlessAPI) UntagResourceRequest(arg0 *emrserverless.UntagResourceInput) (*request.Request, *emrserverless.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockEMRServerlessAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockEMRServerlessAPI) UntagResourceWithContext(arg0 context.Context, arg1 *emrserverless.UntagResourceInput, arg2 ...request.Option) (*emrserverless.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockEMRServerlessAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApplication mocks base method
func (m *MockEMRServerlessAPI) UpdateApplication(arg0 *emrserverless.UpdateApplicationInput) (*emrserverless.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0)
	ret0, _ := ret[0].(*emrserverless.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockEMRServerlessAPIMockRecorder) UpdateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockEMRServerlessAPI)(nil).UpdateApplication), arg0)
}

// UpdateApplicationRequest mocks base method
func (m *MockEMRServerlessAPI) UpdateApplicationRequest(arg0 *emrserverless.UpdateApplicationInput) (*request.Request, *emrserverless.UpdateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*emrserverless.UpdateApplicationOutput)
	return ret0, ret1
}

// UpdateApplicationRequest indicates an expected call of UpdateApplicationRequest
func (mr *MockEMRServerlessAPIMockRecorder) UpdateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRequest", reflect.TypeOf((*MockEMRServerlessAPI)(nil).UpdateApplicationRequest), arg0)
}

// UpdateApplicationWithContext mocks base method
func (m *MockEMRServerlessAPI) UpdateApplicationWithContext(arg0 context.Context, arg1 *emrserverless.UpdateApplicationInput, arg2 ...request.Option) (*emrserverless.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*emrserverless.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithContext indicates an expected call of UpdateApplicationWithContext
func (mr *MockEMRServerlessAPIMockRecorder) UpdateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithContext", reflect.TypeOf((*MockEMRServerlessAPI)(nil).UpdateApplicationWithContext), varargs...)
}
