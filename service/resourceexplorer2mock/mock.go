// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/resourceexplorer2/resourceexplorer2iface (interfaces: ResourceExplorer2API)

// Package resourceexplorer2mock is a generated GoMock package.
package resourceexplorer2mock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	resourceexplorer2 "github.com/aws/aws-sdk-go/service/resourceexplorer2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockResourceExplorer2API is a mock of ResourceExplorer2API interface
type MockResourceExplorer2API struct {
	ctrl     *gomock.Controller
	recorder *MockResourceExplorer2APIMockRecorder
}

// MockResourceExplorer2APIMockRecorder is the mock recorder for MockResourceExplorer2API
type MockResourceExplorer2APIMockRecorder struct {
	mock *MockResourceExplorer2API
}

// NewMockResourceExplorer2API creates a new mock instance
func NewMockResourceExplorer2API(ctrl *gomock.Controller) *MockResourceExplorer2API {
	mock := &MockResourceExplorer2API{ctrl: ctrl}
	mock.recorder = &MockResourceExplorer2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceExplorer2API) EXPECT() *MockResourceExplorer2APIMockRecorder {
	return m.recorder
}

// AssociateDefaultView mocks base method
func (m *MockResourceExplorer2API) AssociateDefaultView(arg0 *resourceexplorer2.AssociateDefaultViewInput) (*resourceexplorer2.AssociateDefaultViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateDefaultView", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.AssociateDefaultViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateDefaultView indicates an expected call of AssociateDefaultView
func (mr *MockResourceExplorer2APIMockRecorder) AssociateDefaultView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateDefaultView", reflect.TypeOf((*MockResourceExplorer2API)(nil).AssociateDefaultView), arg0)
}

// AssociateDefaultViewRequest mocks base method
func (m *MockResourceExplorer2API) AssociateDefaultViewRequest(arg0 *resourceexplorer2.AssociateDefaultViewInput) (*request.Request, *resourceexplorer2.AssociateDefaultViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateDefaultViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.AssociateDefaultViewOutput)
	return ret0, ret1
}

// AssociateDefaultViewRequest indicates an expected call of AssociateDefaultViewRequest
func (mr *MockResourceExplorer2APIMockRecorder) AssociateDefaultViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateDefaultViewRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).AssociateDefaultViewRequest), arg0)
}

// AssociateDefaultViewWithContext mocks base method
func (m *MockResourceExplorer2API) AssociateDefaultViewWithContext(arg0 context.Context, arg1 *resourceexplorer2.AssociateDefaultViewInput, arg2 ...request.Option) (*resourceexplorer2.AssociateDefaultViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateDefaultViewWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.AssociateDefaultViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateDefaultViewWithContext indicates an expected call of AssociateDefaultViewWithContext
func (mr *MockResourceExplorer2APIMockRecorder) AssociateDefaultViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateDefaultViewWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).AssociateDefaultViewWithContext), varargs...)
}

// BatchGetView mocks base method
func (m *MockResourceExplorer2API) BatchGetView(arg0 *resourceexplorer2.BatchGetViewInput) (*resourceexplorer2.BatchGetViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetView", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.BatchGetViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetView indicates an expected call of BatchGetView
func (mr *MockResourceExplorer2APIMockRecorder) BatchGetView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetView", reflect.TypeOf((*MockResourceExplorer2API)(nil).BatchGetView), arg0)
}

// BatchGetViewRequest mocks base method
func (m *MockResourceExplorer2API) BatchGetViewRequest(arg0 *resourceexplorer2.BatchGetViewInput) (*request.Request, *resourceexplorer2.BatchGetViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.BatchGetViewOutput)
	return ret0, ret1
}

// BatchGetViewRequest indicates an expected call of BatchGetViewRequest
func (mr *MockResourceExplorer2APIMockRecorder) BatchGetViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetViewRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).BatchGetViewRequest), arg0)
}

// BatchGetViewWithContext mocks base method
func (m *MockResourceExplorer2API) BatchGetViewWithContext(arg0 context.Context, arg1 *resourceexplorer2.BatchGetViewInput, arg2 ...request.Option) (*resourceexplorer2.BatchGetViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetViewWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.BatchGetViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetViewWithContext indicates an expected call of BatchGetViewWithContext
func (mr *MockResourceExplorer2APIMockRecorder) BatchGetViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetViewWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).BatchGetViewWithContext), varargs...)
}

// CreateIndex mocks base method
func (m *MockResourceExplorer2API) CreateIndex(arg0 *resourceexplorer2.CreateIndexInput) (*resourceexplorer2.CreateIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.CreateIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndex indicates an expected call of CreateIndex
func (mr *MockResourceExplorer2APIMockRecorder) CreateIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockResourceExplorer2API)(nil).CreateIndex), arg0)
}

// CreateIndexRequest mocks base method
func (m *MockResourceExplorer2API) CreateIndexRequest(arg0 *resourceexplorer2.CreateIndexInput) (*request.Request, *resourceexplorer2.CreateIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.CreateIndexOutput)
	return ret0, ret1
}

// CreateIndexRequest indicates an expected call of CreateIndexRequest
func (mr *MockResourceExplorer2APIMockRecorder) CreateIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).CreateIndexRequest), arg0)
}

// CreateIndexWithContext mocks base method
func (m *MockResourceExplorer2API) CreateIndexWithContext(arg0 context.Context, arg1 *resourceexplorer2.CreateIndexInput, arg2 ...request.Option) (*resourceexplorer2.CreateIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIndexWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.CreateIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndexWithContext indicates an expected call of CreateIndexWithContext
func (mr *MockResourceExplorer2APIMockRecorder) CreateIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).CreateIndexWithContext), varargs...)
}

// CreateView mocks base method
func (m *MockResourceExplorer2API) CreateView(arg0 *resourceexplorer2.CreateViewInput) (*resourceexplorer2.CreateViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateView", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.CreateViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateView indicates an expected call of CreateView
func (mr *MockResourceExplorer2APIMockRecorder) CreateView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockResourceExplorer2API)(nil).CreateView), arg0)
}

// CreateViewRequest mocks base method
func (m *MockResourceExplorer2API) CreateViewRequest(arg0 *resourceexplorer2.CreateViewInput) (*request.Request, *resourceexplorer2.CreateViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.CreateViewOutput)
	return ret0, ret1
}

// CreateViewRequest indicates an expected call of CreateViewRequest
func (mr *MockResourceExplorer2APIMockRecorder) CreateViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateViewRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).CreateViewRequest), arg0)
}

// CreateViewWithContext mocks base method
func (m *MockResourceExplorer2API) CreateViewWithContext(arg0 context.Context, arg1 *resourceexplorer2.CreateViewInput, arg2 ...request.Option) (*resourceexplorer2.CreateViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateViewWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.CreateViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateViewWithContext indicates an expected call of CreateViewWithContext
func (mr *MockResourceExplorer2APIMockRecorder) CreateViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateViewWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).CreateViewWithContext), varargs...)
}

// DeleteIndex mocks base method
func (m *MockResourceExplorer2API) DeleteIndex(arg0 *resourceexplorer2.DeleteIndexInput) (*resourceexplorer2.DeleteIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.DeleteIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIndex indicates an expected call of DeleteIndex
func (mr *MockResourceExplorer2APIMockRecorder) DeleteIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockResourceExplorer2API)(nil).DeleteIndex), arg0)
}

// DeleteIndexRequest mocks base method
func (m *MockResourceExplorer2API) DeleteIndexRequest(arg0 *resourceexplorer2.DeleteIndexInput) (*request.Request, *resourceexplorer2.DeleteIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.DeleteIndexOutput)
	return ret0, ret1
}

// DeleteIndexRequest indicates an expected call of DeleteIndexRequest
func (mr *MockResourceExplorer2APIMockRecorder) DeleteIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndexRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).DeleteIndexRequest), arg0)
}

// DeleteIndexWithContext mocks base method
func (m *MockResourceExplorer2API) DeleteIndexWithContext(arg0 context.Context, arg1 *resourceexplorer2.DeleteIndexInput, arg2 ...request.Option) (*resourceexplorer2.DeleteIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIndexWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.DeleteIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIndexWithContext indicates an expected call of DeleteIndexWithContext
func (mr *MockResourceExplorer2APIMockRecorder) DeleteIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndexWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).DeleteIndexWithContext), varargs...)
}

// DeleteView mocks base method
func (m *MockResourceExplorer2API) DeleteView(arg0 *resourceexplorer2.DeleteViewInput) (*resourceexplorer2.DeleteViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteView", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.DeleteViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteView indicates an expected call of DeleteView
func (mr *MockResourceExplorer2APIMockRecorder) DeleteView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteView", reflect.TypeOf((*MockResourceExplorer2API)(nil).DeleteView), arg0)
}

// DeleteViewRequest mocks base method
func (m *MockResourceExplorer2API) DeleteViewRequest(arg0 *resourceexplorer2.DeleteViewInput) (*request.Request, *resourceexplorer2.DeleteViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.DeleteViewOutput)
	return ret0, ret1
}

// DeleteViewRequest indicates an expected call of DeleteViewRequest
func (mr *MockResourceExplorer2APIMockRecorder) DeleteViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteViewRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).DeleteViewRequest), arg0)
}

// DeleteViewWithContext mocks base method
func (m *MockResourceExplorer2API) DeleteViewWithContext(arg0 context.Context, arg1 *resourceexplorer2.DeleteViewInput, arg2 ...request.Option) (*resourceexplorer2.DeleteViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteViewWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.DeleteViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteViewWithContext indicates an expected call of DeleteViewWithContext
func (mr *MockResourceExplorer2APIMockRecorder) DeleteViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteViewWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).DeleteViewWithContext), varargs...)
}

// DisassociateDefaultView mocks base method
func (m *MockResourceExplorer2API) DisassociateDefaultView(arg0 *resourceexplorer2.DisassociateDefaultViewInput) (*resourceexplorer2.DisassociateDefaultViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateDefaultView", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.DisassociateDefaultViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateDefaultView indicates an expected call of DisassociateDefaultView
func (mr *MockResourceExplorer2APIMockRecorder) DisassociateDefaultView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateDefaultView", reflect.TypeOf((*MockResourceExplorer2API)(nil).DisassociateDefaultView), arg0)
}

// DisassociateDefaultViewRequest mocks base method
func (m *MockResourceExplorer2API) DisassociateDefaultViewRequest(arg0 *resourceexplorer2.DisassociateDefaultViewInput) (*request.Request, *resourceexplorer2.DisassociateDefaultViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateDefaultViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.DisassociateDefaultViewOutput)
	return ret0, ret1
}

// DisassociateDefaultViewRequest indicates an expected call of DisassociateDefaultViewRequest
func (mr *MockResourceExplorer2APIMockRecorder) DisassociateDefaultViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateDefaultViewRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).DisassociateDefaultViewRequest), arg0)
}

// DisassociateDefaultViewWithContext mocks base method
func (m *MockResourceExplorer2API) DisassociateDefaultViewWithContext(arg0 context.Context, arg1 *resourceexplorer2.DisassociateDefaultViewInput, arg2 ...request.Option) (*resourceexplorer2.DisassociateDefaultViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateDefaultViewWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.DisassociateDefaultViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateDefaultViewWithContext indicates an expected call of DisassociateDefaultViewWithContext
func (mr *MockResourceExplorer2APIMockRecorder) DisassociateDefaultViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateDefaultViewWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).DisassociateDefaultViewWithContext), varargs...)
}

// GetDefaultView mocks base method
func (m *MockResourceExplorer2API) GetDefaultView(arg0 *resourceexplorer2.GetDefaultViewInput) (*resourceexplorer2.GetDefaultViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultView", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.GetDefaultViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultView indicates an expected call of GetDefaultView
func (mr *MockResourceExplorer2APIMockRecorder) GetDefaultView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultView", reflect.TypeOf((*MockResourceExplorer2API)(nil).GetDefaultView), arg0)
}

// GetDefaultViewRequest mocks base method
func (m *MockResourceExplorer2API) GetDefaultViewRequest(arg0 *resourceexplorer2.GetDefaultViewInput) (*request.Request, *resourceexplorer2.GetDefaultViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.GetDefaultViewOutput)
	return ret0, ret1
}

// GetDefaultViewRequest indicates an expected call of GetDefaultViewRequest
func (mr *MockResourceExplorer2APIMockRecorder) GetDefaultViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultViewRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).GetDefaultViewRequest), arg0)
}

// GetDefaultViewWithContext mocks base method
func (m *MockResourceExplorer2API) GetDefaultViewWithContext(arg0 context.Context, arg1 *resourceexplorer2.GetDefaultViewInput, arg2 ...request.Option) (*resourceexplorer2.GetDefaultViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefaultViewWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.GetDefaultViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultViewWithContext indicates an expected call of GetDefaultViewWithContext
func (mr *MockResourceExplorer2APIMockRecorder) GetDefaultViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultViewWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).GetDefaultViewWithContext), varargs...)
}

// GetIndex mocks base method
func (m *MockResourceExplorer2API) GetIndex(arg0 *resourceexplorer2.GetIndexInput) (*resourceexplorer2.GetIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.GetIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex
func (mr *MockResourceExplorer2APIMockRecorder) GetIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockResourceExplorer2API)(nil).GetIndex), arg0)
}

// GetIndexRequest mocks base method
func (m *MockResourceExplorer2API) GetIndexRequest(arg0 *resourceexplorer2.GetIndexInput) (*request.Request, *resourceexplorer2.GetIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.GetIndexOutput)
	return ret0, ret1
}

// GetIndexRequest indicates an expected call of GetIndexRequest
func (mr *MockResourceExplorer2APIMockRecorder) GetIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).GetIndexRequest), arg0)
}

// GetIndexWithContext mocks base method
func (m *MockResourceExplorer2API) GetIndexWithContext(arg0 context.Context, arg1 *resourceexplorer2.GetIndexInput, arg2 ...request.Option) (*resourceexplorer2.GetIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIndexWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.GetIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexWithContext indicates an expected call of GetIndexWithContext
func (mr *MockResourceExplorer2APIMockRecorder) GetIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).GetIndexWithContext), varargs...)
}

// GetView mocks base method
func (m *MockResourceExplorer2API) GetView(arg0 *resourceexplorer2.GetViewInput) (*resourceexplorer2.GetViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetView", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.GetViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetView indicates an expected call of GetView
func (mr *MockResourceExplorer2APIMockRecorder) GetView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetView", reflect.TypeOf((*MockResourceExplorer2API)(nil).GetView), arg0)
}

// GetViewRequest mocks base method
func (m *MockResourceExplorer2API) GetViewRequest(arg0 *resourceexplorer2.GetViewInput) (*request.Request, *resourceexplorer2.GetViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.GetViewOutput)
	return ret0, ret1
}

// GetViewRequest indicates an expected call of GetViewRequest
func (mr *MockResourceExplorer2APIMockRecorder) GetViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).GetViewRequest), arg0)
}

// GetViewWithContext mocks base method
func (m *MockResourceExplorer2API) GetViewWithContext(arg0 context.Context, arg1 *resourceexplorer2.GetViewInput, arg2 ...request.Option) (*resourceexplorer2.GetViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetViewWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.GetViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetViewWithContext indicates an expected call of GetViewWithContext
func (mr *MockResourceExplorer2APIMockRecorder) GetViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).GetViewWithContext), varargs...)
}

// ListIndexes mocks base method
func (m *MockResourceExplorer2API) ListIndexes(arg0 *resourceexplorer2.ListIndexesInput) (*resourceexplorer2.ListIndexesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexes", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.ListIndexesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexes indicates an expected call of ListIndexes
func (mr *MockResourceExplorer2APIMockRecorder) ListIndexes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexes", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListIndexes), arg0)
}

// ListIndexesPages mocks base method
func (m *MockResourceExplorer2API) ListIndexesPages(arg0 *resourceexplorer2.ListIndexesInput, arg1 func(*resourceexplorer2.ListIndexesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIndexesPages indicates an expected call of ListIndexesPages
func (mr *MockResourceExplorer2APIMockRecorder) ListIndexesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexesPages", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListIndexesPages), arg0, arg1)
}

// ListIndexesPagesWithContext mocks base method
func (m *MockResourceExplorer2API) ListIndexesPagesWithContext(arg0 context.Context, arg1 *resourceexplorer2.ListIndexesInput, arg2 func(*resourceexplorer2.ListIndexesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndexesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIndexesPagesWithContext indicates an expected call of ListIndexesPagesWithContext
func (mr *MockResourceExplorer2APIMockRecorder) ListIndexesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexesPagesWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListIndexesPagesWithContext), varargs...)
}

// ListIndexesRequest mocks base method
func (m *MockResourceExplorer2API) ListIndexesRequest(arg0 *resourceexplorer2.ListIndexesInput) (*request.Request, *resourceexplorer2.ListIndexesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.ListIndexesOutput)
	return ret0, ret1
}

// ListIndexesRequest indicates an expected call of ListIndexesRequest
func (mr *MockResourceExplorer2APIMockRecorder) ListIndexesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexesRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListIndexesRequest), arg0)
}

// ListIndexesWithContext mocks base method
func (m *MockResourceExplorer2API) ListIndexesWithContext(arg0 context.Context, arg1 *resourceexplorer2.ListIndexesInput, arg2 ...request.Option) (*resourceexplorer2.ListIndexesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndexesWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.ListIndexesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexesWithContext indicates an expected call of ListIndexesWithContext
func (mr *MockResourceExplorer2APIMockRecorder) ListIndexesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexesWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListIndexesWithContext), varargs...)
}

// ListSupportedResourceTypes mocks base method
func (m *MockResourceExplorer2API) ListSupportedResourceTypes(arg0 *resourceexplorer2.ListSupportedResourceTypesInput) (*resourceexplorer2.ListSupportedResourceTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedResourceTypes", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.ListSupportedResourceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSupportedResourceTypes indicates an expected call of ListSupportedResourceTypes
func (mr *MockResourceExplorer2APIMockRecorder) ListSupportedResourceTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedResourceTypes", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListSupportedResourceTypes), arg0)
}

// ListSupportedResourceTypesPages mocks base method
func (m *MockResourceExplorer2API) ListSupportedResourceTypesPages(arg0 *resourceexplorer2.ListSupportedResourceTypesInput, arg1 func(*resourceexplorer2.ListSupportedResourceTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedResourceTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSupportedResourceTypesPages indicates an expected call of ListSupportedResourceTypesPages
func (mr *MockResourceExplorer2APIMockRecorder) ListSupportedResourceTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedResourceTypesPages", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListSupportedResourceTypesPages), arg0, arg1)
}

// ListSupportedResourceTypesPagesWithContext mocks base method
func (m *MockResourceExplorer2API) ListSupportedResourceTypesPagesWithContext(arg0 context.Context, arg1 *resourceexplorer2.ListSupportedResourceTypesInput, arg2 func(*resourceexplorer2.ListSupportedResourceTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSupportedResourceTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSupportedResourceTypesPagesWithContext indicates an expected call of ListSupportedResourceTypesPagesWithContext
func (mr *MockResourceExplorer2APIMockRecorder) ListSupportedResourceTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedResourceTypesPagesWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListSupportedResourceTypesPagesWithContext), varargs...)
}

// ListSupportedResourceTypesRequest mocks base method
func (m *MockResourceExplorer2API) ListSupportedResourceTypesRequest(arg0 *resourceexplorer2.ListSupportedResourceTypesInput) (*request.Request, *resourceexplorer2.ListSupportedResourceTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedResourceTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.ListSupportedResourceTypesOutput)
	return ret0, ret1
}

// ListSupportedResourceTypesRequest indicates an expected call of ListSupportedResourceTypesRequest
func (mr *MockResourceExplorer2APIMockRecorder) ListSupportedResourceTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedResourceTypesRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListSupportedResourceTypesRequest), arg0)
}

// ListSupportedResourceTypesWithContext mocks base method
func (m *MockResourceExplorer2API) ListSupportedResourceTypesWithContext(arg0 context.Context, arg1 *resourceexplorer2.ListSupportedResourceTypesInput, arg2 ...request.Option) (*resourceexplorer2.ListSupportedResourceTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSupportedResourceTypesWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.ListSupportedResourceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSupportedResourceTypesWithContext indicates an expected call of ListSupportedResourceTypesWithContext
func (mr *MockResourceExplorer2APIMockRecorder) ListSupportedResourceTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedResourceTypesWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListSupportedResourceTypesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockResourceExplorer2API) ListTagsForResource(arg0 *resourceexplorer2.ListTagsForResourceInput) (*resourceexplorer2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockResourceExplorer2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockResourceExplorer2API) ListTagsForResourceRequest(arg0 *resourceexplorer2.ListTagsForResourceInput) (*request.Request, *resourceexplorer2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockResourceExplorer2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockResourceExplorer2API) ListTagsForResourceWithContext(arg0 context.Context, arg1 *resourceexplorer2.ListTagsForResourceInput, arg2 ...request.Option) (*resourceexplorer2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockResourceExplorer2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListViews mocks base method
func (m *MockResourceExplorer2API) ListViews(arg0 *resourceexplorer2.ListViewsInput) (*resourceexplorer2.ListViewsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListViews", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.ListViewsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListViews indicates an expected call of ListViews
func (mr *MockResourceExplorer2APIMockRecorder) ListViews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViews", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListViews), arg0)
}

// ListViewsPages mocks base method
func (m *MockResourceExplorer2API) ListViewsPages(arg0 *resourceexplorer2.ListViewsInput, arg1 func(*resourceexplorer2.ListViewsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListViewsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListViewsPages indicates an expected call of ListViewsPages
func (mr *MockResourceExplorer2APIMockRecorder) ListViewsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViewsPages", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListViewsPages), arg0, arg1)
}

// ListViewsPagesWithContext mocks base method
func (m *MockResourceExplorer2API) ListViewsPagesWithContext(arg0 context.Context, arg1 *resourceexplorer2.ListViewsInput, arg2 func(*resourceexplorer2.ListViewsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListViewsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListViewsPagesWithContext indicates an expected call of ListViewsPagesWithContext
func (mr *MockResourceExplorer2APIMockRecorder) ListViewsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViewsPagesWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListViewsPagesWithContext), varargs...)
}

// ListViewsRequest mocks base method
func (m *MockResourceExplorer2API) ListViewsRequest(arg0 *resourceexplorer2.ListViewsInput) (*request.Request, *resourceexplorer2.ListViewsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListViewsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.ListViewsOutput)
	return ret0, ret1
}

// ListViewsRequest indicates an expected call of ListViewsRequest
func (mr *MockResourceExplorer2APIMockRecorder) ListViewsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViewsRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListViewsRequest), arg0)
}

// ListViewsWithContext mocks base method
func (m *MockResourceExplorer2API) ListViewsWithContext(arg0 context.Context, arg1 *resourceexplorer2.ListViewsInput, arg2 ...request.Option) (*resourceexplorer2.ListViewsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListViewsWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.ListViewsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListViewsWithContext indicates an expected call of ListViewsWithContext
func (mr *MockResourceExplorer2APIMockRecorder) ListViewsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViewsWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).ListViewsWithContext), varargs...)
}

// Search mocks base method
func (m *MockResourceExplorer2API) Search(arg0 *resourceexplorer2.SearchInput) (*resourceexplorer2.SearchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.SearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockResourceExplorer2APIMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockResourceExplorer2API)(nil).Search), arg0)
}

// SearchPages mocks base method
func (m *MockResourceExplorer2API) SearchPages(arg0 *resourceexplorer2.SearchInput, arg1 func(*resourceexplorer2.SearchOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchPages indicates an expected call of SearchPages
func (mr *MockResourceExplorer2APIMockRecorder) SearchPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPages", reflect.TypeOf((*MockResourceExplorer2API)(nil).SearchPages), arg0, arg1)
}

// SearchPagesWithContext mocks base method
func (m *MockResourceExplorer2API) SearchPagesWithContext(arg0 context.Context, arg1 *resourceexplorer2.SearchInput, arg2 func(*resourceexplorer2.SearchOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchPagesWithContext indicates an expected call of SearchPagesWithContext
func (mr *MockResourceExplorer2APIMockRecorder) SearchPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPagesWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).SearchPagesWithContext), varargs...)
}

// SearchRequest mocks base method
func (m *MockResourceExplorer2API) SearchRequest(arg0 *resourceexplorer2.SearchInput) (*request.Request, *resourceexplorer2.SearchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.SearchOutput)
	return ret0, ret1
}

// SearchRequest indicates an expected call of SearchRequest
func (mr *MockResourceExplorer2APIMockRecorder) SearchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).SearchRequest), arg0)
}

// SearchWithContext mocks base method
func (m *MockResourceExplorer2API) SearchWithContext(arg0 context.Context, arg1 *resourceexplorer2.SearchInput, arg2 ...request.Option) (*resourceexplorer2.SearchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.SearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithContext indicates an expected call of SearchWithContext
func (mr *MockResourceExplorer2APIMockRecorder) SearchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).SearchWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockResourceExplorer2API) TagResource(arg0 *resourceexplorer2.TagResourceInput) (*resourceexplorer2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockResourceExplorer2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockResourceExplorer2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockResourceExplorer2API) TagResourceRequest(arg0 *resourceexplorer2.TagResourceInput) (*request.Request, *resourceexplorer2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockResourceExplorer2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockResourceExplorer2API) TagResourceWithContext(arg0 context.Context, arg1 *resourceexplorer2.TagResourceInput, arg2 ...request.Option) (*resourceexplorer2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockResourceExplorer2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockResourceExplorer2API) UntagResource(arg0 *resourceexplorer2.UntagResourceInput) (*resourceexplorer2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockResourceExplorer2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockResourceExplorer2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockResourceExplorer2API) UntagResourceRequest(arg0 *resourceexplorer2.UntagResourceInput) (*request.Request, *resourceexplorer2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockResourceExplorer2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockResourceExplorer2API) UntagResourceWithContext(arg0 context.Context, arg1 *resourceexplorer2.UntagResourceInput, arg2 ...request.Option) (*resourceexplorer2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockResourceExplorer2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateIndexType mocks base method
func (m *MockResourceExplorer2API) UpdateIndexType(arg0 *resourceexplorer2.UpdateIndexTypeInput) (*resourceexplorer2.UpdateIndexTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndexType", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.UpdateIndexTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIndexType indicates an expected call of UpdateIndexType
func (mr *MockResourceExplorer2APIMockRecorder) UpdateIndexType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexType", reflect.TypeOf((*MockResourceExplorer2API)(nil).UpdateIndexType), arg0)
}

// UpdateIndexTypeRequest mocks base method
func (m *MockResourceExplorer2API) UpdateIndexTypeRequest(arg0 *resourceexplorer2.UpdateIndexTypeInput) (*request.Request, *resourceexplorer2.UpdateIndexTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndexTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.UpdateIndexTypeOutput)
	return ret0, ret1
}

// UpdateIndexTypeRequest indicates an expected call of UpdateIndexTypeRequest
func (mr *MockResourceExplorer2APIMockRecorder) UpdateIndexTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexTypeRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).UpdateIndexTypeRequest), arg0)
}

// UpdateIndexTypeWithContext mocks base method
func (m *MockResourceExplorer2API) UpdateIndexTypeWithContext(arg0 context.Context, arg1 *resourceexplorer2.UpdateIndexTypeInput, arg2 ...request.Option) (*resourceexplorer2.UpdateIndexTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIndexTypeWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.UpdateIndexTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIndexTypeWithContext indicates an expected call of UpdateIndexTypeWithContext
func (mr *MockResourceExplorer2APIMockRecorder) UpdateIndexTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexTypeWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).UpdateIndexTypeWithContext), varargs...)
}

// UpdateView mocks base method
func (m *MockResourceExplorer2API) UpdateView(arg0 *resourceexplorer2.UpdateViewInput) (*resourceexplorer2.UpdateViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateView", arg0)
	ret0, _ := ret[0].(*resourceexplorer2.UpdateViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateView indicates an expected call of UpdateView
func (mr *MockResourceExplorer2APIMockRecorder) UpdateView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateView", reflect.TypeOf((*MockResourceExplorer2API)(nil).UpdateView), arg0)
}

// UpdateViewRequest mocks base method
func (m *MockResourceExplorer2API) UpdateViewRequest(arg0 *resourceexplorer2.UpdateViewInput) (*request.Request, *resourceexplorer2.UpdateViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourceexplorer2.UpdateViewOutput)
	return ret0, ret1
}

// UpdateViewRequest indicates an expected call of UpdateViewRequest
func (mr *MockResourceExplorer2APIMockRecorder) UpdateViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateViewRequest", reflect.TypeOf((*MockResourceExplorer2API)(nil).UpdateViewRequest), arg0)
}

// UpdateViewWithContext mocks base method
func (m *MockResourceExplorer2API) UpdateViewWithContext(arg0 context.Context, arg1 *resourceexplorer2.UpdateViewInput, arg2 ...request.Option) (*resourceexplorer2.UpdateViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateViewWithContext", varargs...)
	ret0, _ := ret[0].(*resourceexplorer2.UpdateViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateViewWithContext indicates an expected call of UpdateViewWithContext
func (mr *MockResourceExplorer2APIMockRecorder) UpdateViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateViewWithContext", reflect.TypeOf((*MockResourceExplorer2API)(nil).UpdateViewWithContext), varargs...)
}
