// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/cleanrooms/cleanroomsiface (interfaces: CleanRoomsAPI)

// Package cleanroomsmock is a generated GoMock package.
package cleanroomsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	cleanrooms "github.com/aws/aws-sdk-go/service/cleanrooms"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCleanRoomsAPI is a mock of CleanRoomsAPI interface
type MockCleanRoomsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCleanRoomsAPIMockRecorder
}

// MockCleanRoomsAPIMockRecorder is the mock recorder for MockCleanRoomsAPI
type MockCleanRoomsAPIMockRecorder struct {
	mock *MockCleanRoomsAPI
}

// NewMockCleanRoomsAPI creates a new mock instance
func NewMockCleanRoomsAPI(ctrl *gomock.Controller) *MockCleanRoomsAPI {
	mock := &MockCleanRoomsAPI{ctrl: ctrl}
	mock.recorder = &MockCleanRoomsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCleanRoomsAPI) EXPECT() *MockCleanRoomsAPIMockRecorder {
	return m.recorder
}

// BatchGetSchema mocks base method
func (m *MockCleanRoomsAPI) BatchGetSchema(arg0 *cleanrooms.BatchGetSchemaInput) (*cleanrooms.BatchGetSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetSchema", arg0)
	ret0, _ := ret[0].(*cleanrooms.BatchGetSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetSchema indicates an expected call of BatchGetSchema
func (mr *MockCleanRoomsAPIMockRecorder) BatchGetSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSchema", reflect.TypeOf((*MockCleanRoomsAPI)(nil).BatchGetSchema), arg0)
}

// BatchGetSchemaRequest mocks base method
func (m *MockCleanRoomsAPI) BatchGetSchemaRequest(arg0 *cleanrooms.BatchGetSchemaInput) (*request.Request, *cleanrooms.BatchGetSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.BatchGetSchemaOutput)
	return ret0, ret1
}

// BatchGetSchemaRequest indicates an expected call of BatchGetSchemaRequest
func (mr *MockCleanRoomsAPIMockRecorder) BatchGetSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSchemaRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).BatchGetSchemaRequest), arg0)
}

// BatchGetSchemaWithContext mocks base method
func (m *MockCleanRoomsAPI) BatchGetSchemaWithContext(arg0 context.Context, arg1 *cleanrooms.BatchGetSchemaInput, arg2 ...request.Option) (*cleanrooms.BatchGetSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.BatchGetSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetSchemaWithContext indicates an expected call of BatchGetSchemaWithContext
func (mr *MockCleanRoomsAPIMockRecorder) BatchGetSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSchemaWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).BatchGetSchemaWithContext), varargs...)
}

// CreateCollaboration mocks base method
func (m *MockCleanRoomsAPI) CreateCollaboration(arg0 *cleanrooms.CreateCollaborationInput) (*cleanrooms.CreateCollaborationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollaboration", arg0)
	ret0, _ := ret[0].(*cleanrooms.CreateCollaborationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollaboration indicates an expected call of CreateCollaboration
func (mr *MockCleanRoomsAPIMockRecorder) CreateCollaboration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollaboration", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateCollaboration), arg0)
}

// CreateCollaborationRequest mocks base method
func (m *MockCleanRoomsAPI) CreateCollaborationRequest(arg0 *cleanrooms.CreateCollaborationInput) (*request.Request, *cleanrooms.CreateCollaborationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollaborationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.CreateCollaborationOutput)
	return ret0, ret1
}

// CreateCollaborationRequest indicates an expected call of CreateCollaborationRequest
func (mr *MockCleanRoomsAPIMockRecorder) CreateCollaborationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollaborationRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateCollaborationRequest), arg0)
}

// CreateCollaborationWithContext mocks base method
func (m *MockCleanRoomsAPI) CreateCollaborationWithContext(arg0 context.Context, arg1 *cleanrooms.CreateCollaborationInput, arg2 ...request.Option) (*cleanrooms.CreateCollaborationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollaborationWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.CreateCollaborationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollaborationWithContext indicates an expected call of CreateCollaborationWithContext
func (mr *MockCleanRoomsAPIMockRecorder) CreateCollaborationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollaborationWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateCollaborationWithContext), varargs...)
}

// CreateConfiguredTable mocks base method
func (m *MockCleanRoomsAPI) CreateConfiguredTable(arg0 *cleanrooms.CreateConfiguredTableInput) (*cleanrooms.CreateConfiguredTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguredTable", arg0)
	ret0, _ := ret[0].(*cleanrooms.CreateConfiguredTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguredTable indicates an expected call of CreateConfiguredTable
func (mr *MockCleanRoomsAPIMockRecorder) CreateConfiguredTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredTable", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateConfiguredTable), arg0)
}

// CreateConfiguredTableAnalysisRule mocks base method
func (m *MockCleanRoomsAPI) CreateConfiguredTableAnalysisRule(arg0 *cleanrooms.CreateConfiguredTableAnalysisRuleInput) (*cleanrooms.CreateConfiguredTableAnalysisRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguredTableAnalysisRule", arg0)
	ret0, _ := ret[0].(*cleanrooms.CreateConfiguredTableAnalysisRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguredTableAnalysisRule indicates an expected call of CreateConfiguredTableAnalysisRule
func (mr *MockCleanRoomsAPIMockRecorder) CreateConfiguredTableAnalysisRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredTableAnalysisRule", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateConfiguredTableAnalysisRule), arg0)
}

// CreateConfiguredTableAnalysisRuleRequest mocks base method
func (m *MockCleanRoomsAPI) CreateConfiguredTableAnalysisRuleRequest(arg0 *cleanrooms.CreateConfiguredTableAnalysisRuleInput) (*request.Request, *cleanrooms.CreateConfiguredTableAnalysisRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguredTableAnalysisRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.CreateConfiguredTableAnalysisRuleOutput)
	return ret0, ret1
}

// CreateConfiguredTableAnalysisRuleRequest indicates an expected call of CreateConfiguredTableAnalysisRuleRequest
func (mr *MockCleanRoomsAPIMockRecorder) CreateConfiguredTableAnalysisRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredTableAnalysisRuleRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateConfiguredTableAnalysisRuleRequest), arg0)
}

// CreateConfiguredTableAnalysisRuleWithContext mocks base method
func (m *MockCleanRoomsAPI) CreateConfiguredTableAnalysisRuleWithContext(arg0 context.Context, arg1 *cleanrooms.CreateConfiguredTableAnalysisRuleInput, arg2 ...request.Option) (*cleanrooms.CreateConfiguredTableAnalysisRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfiguredTableAnalysisRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.CreateConfiguredTableAnalysisRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguredTableAnalysisRuleWithContext indicates an expected call of CreateConfiguredTableAnalysisRuleWithContext
func (mr *MockCleanRoomsAPIMockRecorder) CreateConfiguredTableAnalysisRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredTableAnalysisRuleWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateConfiguredTableAnalysisRuleWithContext), varargs...)
}

// CreateConfiguredTableAssociation mocks base method
func (m *MockCleanRoomsAPI) CreateConfiguredTableAssociation(arg0 *cleanrooms.CreateConfiguredTableAssociationInput) (*cleanrooms.CreateConfiguredTableAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguredTableAssociation", arg0)
	ret0, _ := ret[0].(*cleanrooms.CreateConfiguredTableAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguredTableAssociation indicates an expected call of CreateConfiguredTableAssociation
func (mr *MockCleanRoomsAPIMockRecorder) CreateConfiguredTableAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredTableAssociation", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateConfiguredTableAssociation), arg0)
}

// CreateConfiguredTableAssociationRequest mocks base method
func (m *MockCleanRoomsAPI) CreateConfiguredTableAssociationRequest(arg0 *cleanrooms.CreateConfiguredTableAssociationInput) (*request.Request, *cleanrooms.CreateConfiguredTableAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguredTableAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.CreateConfiguredTableAssociationOutput)
	return ret0, ret1
}

// CreateConfiguredTableAssociationRequest indicates an expected call of CreateConfiguredTableAssociationRequest
func (mr *MockCleanRoomsAPIMockRecorder) CreateConfiguredTableAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredTableAssociationRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateConfiguredTableAssociationRequest), arg0)
}

// CreateConfiguredTableAssociationWithContext mocks base method
func (m *MockCleanRoomsAPI) CreateConfiguredTableAssociationWithContext(arg0 context.Context, arg1 *cleanrooms.CreateConfiguredTableAssociationInput, arg2 ...request.Option) (*cleanrooms.CreateConfiguredTableAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfiguredTableAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.CreateConfiguredTableAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguredTableAssociationWithContext indicates an expected call of CreateConfiguredTableAssociationWithContext
func (mr *MockCleanRoomsAPIMockRecorder) CreateConfiguredTableAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredTableAssociationWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateConfiguredTableAssociationWithContext), varargs...)
}

// CreateConfiguredTableRequest mocks base method
func (m *MockCleanRoomsAPI) CreateConfiguredTableRequest(arg0 *cleanrooms.CreateConfiguredTableInput) (*request.Request, *cleanrooms.CreateConfiguredTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguredTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.CreateConfiguredTableOutput)
	return ret0, ret1
}

// CreateConfiguredTableRequest indicates an expected call of CreateConfiguredTableRequest
func (mr *MockCleanRoomsAPIMockRecorder) CreateConfiguredTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredTableRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateConfiguredTableRequest), arg0)
}

// CreateConfiguredTableWithContext mocks base method
func (m *MockCleanRoomsAPI) CreateConfiguredTableWithContext(arg0 context.Context, arg1 *cleanrooms.CreateConfiguredTableInput, arg2 ...request.Option) (*cleanrooms.CreateConfiguredTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfiguredTableWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.CreateConfiguredTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguredTableWithContext indicates an expected call of CreateConfiguredTableWithContext
func (mr *MockCleanRoomsAPIMockRecorder) CreateConfiguredTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguredTableWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateConfiguredTableWithContext), varargs...)
}

// CreateMembership mocks base method
func (m *MockCleanRoomsAPI) CreateMembership(arg0 *cleanrooms.CreateMembershipInput) (*cleanrooms.CreateMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembership", arg0)
	ret0, _ := ret[0].(*cleanrooms.CreateMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMembership indicates an expected call of CreateMembership
func (mr *MockCleanRoomsAPIMockRecorder) CreateMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembership", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateMembership), arg0)
}

// CreateMembershipRequest mocks base method
func (m *MockCleanRoomsAPI) CreateMembershipRequest(arg0 *cleanrooms.CreateMembershipInput) (*request.Request, *cleanrooms.CreateMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.CreateMembershipOutput)
	return ret0, ret1
}

// CreateMembershipRequest indicates an expected call of CreateMembershipRequest
func (mr *MockCleanRoomsAPIMockRecorder) CreateMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembershipRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateMembershipRequest), arg0)
}

// CreateMembershipWithContext mocks base method
func (m *MockCleanRoomsAPI) CreateMembershipWithContext(arg0 context.Context, arg1 *cleanrooms.CreateMembershipInput, arg2 ...request.Option) (*cleanrooms.CreateMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.CreateMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMembershipWithContext indicates an expected call of CreateMembershipWithContext
func (mr *MockCleanRoomsAPIMockRecorder) CreateMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembershipWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).CreateMembershipWithContext), varargs...)
}

// DeleteCollaboration mocks base method
func (m *MockCleanRoomsAPI) DeleteCollaboration(arg0 *cleanrooms.DeleteCollaborationInput) (*cleanrooms.DeleteCollaborationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollaboration", arg0)
	ret0, _ := ret[0].(*cleanrooms.DeleteCollaborationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollaboration indicates an expected call of DeleteCollaboration
func (mr *MockCleanRoomsAPIMockRecorder) DeleteCollaboration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollaboration", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteCollaboration), arg0)
}

// DeleteCollaborationRequest mocks base method
func (m *MockCleanRoomsAPI) DeleteCollaborationRequest(arg0 *cleanrooms.DeleteCollaborationInput) (*request.Request, *cleanrooms.DeleteCollaborationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollaborationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.DeleteCollaborationOutput)
	return ret0, ret1
}

// DeleteCollaborationRequest indicates an expected call of DeleteCollaborationRequest
func (mr *MockCleanRoomsAPIMockRecorder) DeleteCollaborationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollaborationRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteCollaborationRequest), arg0)
}

// DeleteCollaborationWithContext mocks base method
func (m *MockCleanRoomsAPI) DeleteCollaborationWithContext(arg0 context.Context, arg1 *cleanrooms.DeleteCollaborationInput, arg2 ...request.Option) (*cleanrooms.DeleteCollaborationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCollaborationWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.DeleteCollaborationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollaborationWithContext indicates an expected call of DeleteCollaborationWithContext
func (mr *MockCleanRoomsAPIMockRecorder) DeleteCollaborationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollaborationWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteCollaborationWithContext), varargs...)
}

// DeleteConfiguredTable mocks base method
func (m *MockCleanRoomsAPI) DeleteConfiguredTable(arg0 *cleanrooms.DeleteConfiguredTableInput) (*cleanrooms.DeleteConfiguredTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguredTable", arg0)
	ret0, _ := ret[0].(*cleanrooms.DeleteConfiguredTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguredTable indicates an expected call of DeleteConfiguredTable
func (mr *MockCleanRoomsAPIMockRecorder) DeleteConfiguredTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredTable", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteConfiguredTable), arg0)
}

// DeleteConfiguredTableAnalysisRule mocks base method
func (m *MockCleanRoomsAPI) DeleteConfiguredTableAnalysisRule(arg0 *cleanrooms.DeleteConfiguredTableAnalysisRuleInput) (*cleanrooms.DeleteConfiguredTableAnalysisRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguredTableAnalysisRule", arg0)
	ret0, _ := ret[0].(*cleanrooms.DeleteConfiguredTableAnalysisRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguredTableAnalysisRule indicates an expected call of DeleteConfiguredTableAnalysisRule
func (mr *MockCleanRoomsAPIMockRecorder) DeleteConfiguredTableAnalysisRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredTableAnalysisRule", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteConfiguredTableAnalysisRule), arg0)
}

// DeleteConfiguredTableAnalysisRuleRequest mocks base method
func (m *MockCleanRoomsAPI) DeleteConfiguredTableAnalysisRuleRequest(arg0 *cleanrooms.DeleteConfiguredTableAnalysisRuleInput) (*request.Request, *cleanrooms.DeleteConfiguredTableAnalysisRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguredTableAnalysisRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.DeleteConfiguredTableAnalysisRuleOutput)
	return ret0, ret1
}

// DeleteConfiguredTableAnalysisRuleRequest indicates an expected call of DeleteConfiguredTableAnalysisRuleRequest
func (mr *MockCleanRoomsAPIMockRecorder) DeleteConfiguredTableAnalysisRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredTableAnalysisRuleRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteConfiguredTableAnalysisRuleRequest), arg0)
}

// DeleteConfiguredTableAnalysisRuleWithContext mocks base method
func (m *MockCleanRoomsAPI) DeleteConfiguredTableAnalysisRuleWithContext(arg0 context.Context, arg1 *cleanrooms.DeleteConfiguredTableAnalysisRuleInput, arg2 ...request.Option) (*cleanrooms.DeleteConfiguredTableAnalysisRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfiguredTableAnalysisRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.DeleteConfiguredTableAnalysisRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguredTableAnalysisRuleWithContext indicates an expected call of DeleteConfiguredTableAnalysisRuleWithContext
func (mr *MockCleanRoomsAPIMockRecorder) DeleteConfiguredTableAnalysisRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredTableAnalysisRuleWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteConfiguredTableAnalysisRuleWithContext), varargs...)
}

// DeleteConfiguredTableAssociation mocks base method
func (m *MockCleanRoomsAPI) DeleteConfiguredTableAssociation(arg0 *cleanrooms.DeleteConfiguredTableAssociationInput) (*cleanrooms.DeleteConfiguredTableAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguredTableAssociation", arg0)
	ret0, _ := ret[0].(*cleanrooms.DeleteConfiguredTableAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguredTableAssociation indicates an expected call of DeleteConfiguredTableAssociation
func (mr *MockCleanRoomsAPIMockRecorder) DeleteConfiguredTableAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredTableAssociation", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteConfiguredTableAssociation), arg0)
}

// DeleteConfiguredTableAssociationRequest mocks base method
func (m *MockCleanRoomsAPI) DeleteConfiguredTableAssociationRequest(arg0 *cleanrooms.DeleteConfiguredTableAssociationInput) (*request.Request, *cleanrooms.DeleteConfiguredTableAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguredTableAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.DeleteConfiguredTableAssociationOutput)
	return ret0, ret1
}

// DeleteConfiguredTableAssociationRequest indicates an expected call of DeleteConfiguredTableAssociationRequest
func (mr *MockCleanRoomsAPIMockRecorder) DeleteConfiguredTableAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredTableAssociationRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteConfiguredTableAssociationRequest), arg0)
}

// DeleteConfiguredTableAssociationWithContext mocks base method
func (m *MockCleanRoomsAPI) DeleteConfiguredTableAssociationWithContext(arg0 context.Context, arg1 *cleanrooms.DeleteConfiguredTableAssociationInput, arg2 ...request.Option) (*cleanrooms.DeleteConfiguredTableAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfiguredTableAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.DeleteConfiguredTableAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguredTableAssociationWithContext indicates an expected call of DeleteConfiguredTableAssociationWithContext
func (mr *MockCleanRoomsAPIMockRecorder) DeleteConfiguredTableAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredTableAssociationWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteConfiguredTableAssociationWithContext), varargs...)
}

// DeleteConfiguredTableRequest mocks base method
func (m *MockCleanRoomsAPI) DeleteConfiguredTableRequest(arg0 *cleanrooms.DeleteConfiguredTableInput) (*request.Request, *cleanrooms.DeleteConfiguredTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguredTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.DeleteConfiguredTableOutput)
	return ret0, ret1
}

// DeleteConfiguredTableRequest indicates an expected call of DeleteConfiguredTableRequest
func (mr *MockCleanRoomsAPIMockRecorder) DeleteConfiguredTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredTableRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteConfiguredTableRequest), arg0)
}

// DeleteConfiguredTableWithContext mocks base method
func (m *MockCleanRoomsAPI) DeleteConfiguredTableWithContext(arg0 context.Context, arg1 *cleanrooms.DeleteConfiguredTableInput, arg2 ...request.Option) (*cleanrooms.DeleteConfiguredTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfiguredTableWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.DeleteConfiguredTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguredTableWithContext indicates an expected call of DeleteConfiguredTableWithContext
func (mr *MockCleanRoomsAPIMockRecorder) DeleteConfiguredTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguredTableWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteConfiguredTableWithContext), varargs...)
}

// DeleteMember mocks base method
func (m *MockCleanRoomsAPI) DeleteMember(arg0 *cleanrooms.DeleteMemberInput) (*cleanrooms.DeleteMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", arg0)
	ret0, _ := ret[0].(*cleanrooms.DeleteMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMember indicates an expected call of DeleteMember
func (mr *MockCleanRoomsAPIMockRecorder) DeleteMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteMember), arg0)
}

// DeleteMemberRequest mocks base method
func (m *MockCleanRoomsAPI) DeleteMemberRequest(arg0 *cleanrooms.DeleteMemberInput) (*request.Request, *cleanrooms.DeleteMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.DeleteMemberOutput)
	return ret0, ret1
}

// DeleteMemberRequest indicates an expected call of DeleteMemberRequest
func (mr *MockCleanRoomsAPIMockRecorder) DeleteMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemberRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteMemberRequest), arg0)
}

// DeleteMemberWithContext mocks base method
func (m *MockCleanRoomsAPI) DeleteMemberWithContext(arg0 context.Context, arg1 *cleanrooms.DeleteMemberInput, arg2 ...request.Option) (*cleanrooms.DeleteMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMemberWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.DeleteMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMemberWithContext indicates an expected call of DeleteMemberWithContext
func (mr *MockCleanRoomsAPIMockRecorder) DeleteMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemberWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteMemberWithContext), varargs...)
}

// DeleteMembership mocks base method
func (m *MockCleanRoomsAPI) DeleteMembership(arg0 *cleanrooms.DeleteMembershipInput) (*cleanrooms.DeleteMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembership", arg0)
	ret0, _ := ret[0].(*cleanrooms.DeleteMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMembership indicates an expected call of DeleteMembership
func (mr *MockCleanRoomsAPIMockRecorder) DeleteMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembership", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteMembership), arg0)
}

// DeleteMembershipRequest mocks base method
func (m *MockCleanRoomsAPI) DeleteMembershipRequest(arg0 *cleanrooms.DeleteMembershipInput) (*request.Request, *cleanrooms.DeleteMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.DeleteMembershipOutput)
	return ret0, ret1
}

// DeleteMembershipRequest indicates an expected call of DeleteMembershipRequest
func (mr *MockCleanRoomsAPIMockRecorder) DeleteMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembershipRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteMembershipRequest), arg0)
}

// DeleteMembershipWithContext mocks base method
func (m *MockCleanRoomsAPI) DeleteMembershipWithContext(arg0 context.Context, arg1 *cleanrooms.DeleteMembershipInput, arg2 ...request.Option) (*cleanrooms.DeleteMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.DeleteMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMembershipWithContext indicates an expected call of DeleteMembershipWithContext
func (mr *MockCleanRoomsAPIMockRecorder) DeleteMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembershipWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).DeleteMembershipWithContext), varargs...)
}

// GetCollaboration mocks base method
func (m *MockCleanRoomsAPI) GetCollaboration(arg0 *cleanrooms.GetCollaborationInput) (*cleanrooms.GetCollaborationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollaboration", arg0)
	ret0, _ := ret[0].(*cleanrooms.GetCollaborationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollaboration indicates an expected call of GetCollaboration
func (mr *MockCleanRoomsAPIMockRecorder) GetCollaboration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollaboration", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetCollaboration), arg0)
}

// GetCollaborationRequest mocks base method
func (m *MockCleanRoomsAPI) GetCollaborationRequest(arg0 *cleanrooms.GetCollaborationInput) (*request.Request, *cleanrooms.GetCollaborationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollaborationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.GetCollaborationOutput)
	return ret0, ret1
}

// GetCollaborationRequest indicates an expected call of GetCollaborationRequest
func (mr *MockCleanRoomsAPIMockRecorder) GetCollaborationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollaborationRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetCollaborationRequest), arg0)
}

// GetCollaborationWithContext mocks base method
func (m *MockCleanRoomsAPI) GetCollaborationWithContext(arg0 context.Context, arg1 *cleanrooms.GetCollaborationInput, arg2 ...request.Option) (*cleanrooms.GetCollaborationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCollaborationWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.GetCollaborationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollaborationWithContext indicates an expected call of GetCollaborationWithContext
func (mr *MockCleanRoomsAPIMockRecorder) GetCollaborationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollaborationWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetCollaborationWithContext), varargs...)
}

// GetConfiguredTable mocks base method
func (m *MockCleanRoomsAPI) GetConfiguredTable(arg0 *cleanrooms.GetConfiguredTableInput) (*cleanrooms.GetConfiguredTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredTable", arg0)
	ret0, _ := ret[0].(*cleanrooms.GetConfiguredTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredTable indicates an expected call of GetConfiguredTable
func (mr *MockCleanRoomsAPIMockRecorder) GetConfiguredTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredTable", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetConfiguredTable), arg0)
}

// GetConfiguredTableAnalysisRule mocks base method
func (m *MockCleanRoomsAPI) GetConfiguredTableAnalysisRule(arg0 *cleanrooms.GetConfiguredTableAnalysisRuleInput) (*cleanrooms.GetConfiguredTableAnalysisRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredTableAnalysisRule", arg0)
	ret0, _ := ret[0].(*cleanrooms.GetConfiguredTableAnalysisRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredTableAnalysisRule indicates an expected call of GetConfiguredTableAnalysisRule
func (mr *MockCleanRoomsAPIMockRecorder) GetConfiguredTableAnalysisRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredTableAnalysisRule", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetConfiguredTableAnalysisRule), arg0)
}

// GetConfiguredTableAnalysisRuleRequest mocks base method
func (m *MockCleanRoomsAPI) GetConfiguredTableAnalysisRuleRequest(arg0 *cleanrooms.GetConfiguredTableAnalysisRuleInput) (*request.Request, *cleanrooms.GetConfiguredTableAnalysisRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredTableAnalysisRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.GetConfiguredTableAnalysisRuleOutput)
	return ret0, ret1
}

// GetConfiguredTableAnalysisRuleRequest indicates an expected call of GetConfiguredTableAnalysisRuleRequest
func (mr *MockCleanRoomsAPIMockRecorder) GetConfiguredTableAnalysisRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredTableAnalysisRuleRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetConfiguredTableAnalysisRuleRequest), arg0)
}

// GetConfiguredTableAnalysisRuleWithContext mocks base method
func (m *MockCleanRoomsAPI) GetConfiguredTableAnalysisRuleWithContext(arg0 context.Context, arg1 *cleanrooms.GetConfiguredTableAnalysisRuleInput, arg2 ...request.Option) (*cleanrooms.GetConfiguredTableAnalysisRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfiguredTableAnalysisRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.GetConfiguredTableAnalysisRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredTableAnalysisRuleWithContext indicates an expected call of GetConfiguredTableAnalysisRuleWithContext
func (mr *MockCleanRoomsAPIMockRecorder) GetConfiguredTableAnalysisRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredTableAnalysisRuleWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetConfiguredTableAnalysisRuleWithContext), varargs...)
}

// GetConfiguredTableAssociation mocks base method
func (m *MockCleanRoomsAPI) GetConfiguredTableAssociation(arg0 *cleanrooms.GetConfiguredTableAssociationInput) (*cleanrooms.GetConfiguredTableAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredTableAssociation", arg0)
	ret0, _ := ret[0].(*cleanrooms.GetConfiguredTableAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredTableAssociation indicates an expected call of GetConfiguredTableAssociation
func (mr *MockCleanRoomsAPIMockRecorder) GetConfiguredTableAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredTableAssociation", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetConfiguredTableAssociation), arg0)
}

// GetConfiguredTableAssociationRequest mocks base method
func (m *MockCleanRoomsAPI) GetConfiguredTableAssociationRequest(arg0 *cleanrooms.GetConfiguredTableAssociationInput) (*request.Request, *cleanrooms.GetConfiguredTableAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredTableAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.GetConfiguredTableAssociationOutput)
	return ret0, ret1
}

// GetConfiguredTableAssociationRequest indicates an expected call of GetConfiguredTableAssociationRequest
func (mr *MockCleanRoomsAPIMockRecorder) GetConfiguredTableAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredTableAssociationRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetConfiguredTableAssociationRequest), arg0)
}

// GetConfiguredTableAssociationWithContext mocks base method
func (m *MockCleanRoomsAPI) GetConfiguredTableAssociationWithContext(arg0 context.Context, arg1 *cleanrooms.GetConfiguredTableAssociationInput, arg2 ...request.Option) (*cleanrooms.GetConfiguredTableAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfiguredTableAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.GetConfiguredTableAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredTableAssociationWithContext indicates an expected call of GetConfiguredTableAssociationWithContext
func (mr *MockCleanRoomsAPIMockRecorder) GetConfiguredTableAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredTableAssociationWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetConfiguredTableAssociationWithContext), varargs...)
}

// GetConfiguredTableRequest mocks base method
func (m *MockCleanRoomsAPI) GetConfiguredTableRequest(arg0 *cleanrooms.GetConfiguredTableInput) (*request.Request, *cleanrooms.GetConfiguredTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.GetConfiguredTableOutput)
	return ret0, ret1
}

// GetConfiguredTableRequest indicates an expected call of GetConfiguredTableRequest
func (mr *MockCleanRoomsAPIMockRecorder) GetConfiguredTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredTableRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetConfiguredTableRequest), arg0)
}

// GetConfiguredTableWithContext mocks base method
func (m *MockCleanRoomsAPI) GetConfiguredTableWithContext(arg0 context.Context, arg1 *cleanrooms.GetConfiguredTableInput, arg2 ...request.Option) (*cleanrooms.GetConfiguredTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfiguredTableWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.GetConfiguredTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredTableWithContext indicates an expected call of GetConfiguredTableWithContext
func (mr *MockCleanRoomsAPIMockRecorder) GetConfiguredTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredTableWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetConfiguredTableWithContext), varargs...)
}

// GetMembership mocks base method
func (m *MockCleanRoomsAPI) GetMembership(arg0 *cleanrooms.GetMembershipInput) (*cleanrooms.GetMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembership", arg0)
	ret0, _ := ret[0].(*cleanrooms.GetMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembership indicates an expected call of GetMembership
func (mr *MockCleanRoomsAPIMockRecorder) GetMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembership", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetMembership), arg0)
}

// GetMembershipRequest mocks base method
func (m *MockCleanRoomsAPI) GetMembershipRequest(arg0 *cleanrooms.GetMembershipInput) (*request.Request, *cleanrooms.GetMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.GetMembershipOutput)
	return ret0, ret1
}

// GetMembershipRequest indicates an expected call of GetMembershipRequest
func (mr *MockCleanRoomsAPIMockRecorder) GetMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembershipRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetMembershipRequest), arg0)
}

// GetMembershipWithContext mocks base method
func (m *MockCleanRoomsAPI) GetMembershipWithContext(arg0 context.Context, arg1 *cleanrooms.GetMembershipInput, arg2 ...request.Option) (*cleanrooms.GetMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.GetMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembershipWithContext indicates an expected call of GetMembershipWithContext
func (mr *MockCleanRoomsAPIMockRecorder) GetMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembershipWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetMembershipWithContext), varargs...)
}

// GetProtectedQuery mocks base method
func (m *MockCleanRoomsAPI) GetProtectedQuery(arg0 *cleanrooms.GetProtectedQueryInput) (*cleanrooms.GetProtectedQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtectedQuery", arg0)
	ret0, _ := ret[0].(*cleanrooms.GetProtectedQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtectedQuery indicates an expected call of GetProtectedQuery
func (mr *MockCleanRoomsAPIMockRecorder) GetProtectedQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectedQuery", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetProtectedQuery), arg0)
}

// GetProtectedQueryRequest mocks base method
func (m *MockCleanRoomsAPI) GetProtectedQueryRequest(arg0 *cleanrooms.GetProtectedQueryInput) (*request.Request, *cleanrooms.GetProtectedQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtectedQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.GetProtectedQueryOutput)
	return ret0, ret1
}

// GetProtectedQueryRequest indicates an expected call of GetProtectedQueryRequest
func (mr *MockCleanRoomsAPIMockRecorder) GetProtectedQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectedQueryRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetProtectedQueryRequest), arg0)
}

// GetProtectedQueryWithContext mocks base method
func (m *MockCleanRoomsAPI) GetProtectedQueryWithContext(arg0 context.Context, arg1 *cleanrooms.GetProtectedQueryInput, arg2 ...request.Option) (*cleanrooms.GetProtectedQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProtectedQueryWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.GetProtectedQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtectedQueryWithContext indicates an expected call of GetProtectedQueryWithContext
func (mr *MockCleanRoomsAPIMockRecorder) GetProtectedQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectedQueryWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetProtectedQueryWithContext), varargs...)
}

// GetSchema mocks base method
func (m *MockCleanRoomsAPI) GetSchema(arg0 *cleanrooms.GetSchemaInput) (*cleanrooms.GetSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", arg0)
	ret0, _ := ret[0].(*cleanrooms.GetSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema
func (mr *MockCleanRoomsAPIMockRecorder) GetSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetSchema), arg0)
}

// GetSchemaAnalysisRule mocks base method
func (m *MockCleanRoomsAPI) GetSchemaAnalysisRule(arg0 *cleanrooms.GetSchemaAnalysisRuleInput) (*cleanrooms.GetSchemaAnalysisRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaAnalysisRule", arg0)
	ret0, _ := ret[0].(*cleanrooms.GetSchemaAnalysisRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaAnalysisRule indicates an expected call of GetSchemaAnalysisRule
func (mr *MockCleanRoomsAPIMockRecorder) GetSchemaAnalysisRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaAnalysisRule", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetSchemaAnalysisRule), arg0)
}

// GetSchemaAnalysisRuleRequest mocks base method
func (m *MockCleanRoomsAPI) GetSchemaAnalysisRuleRequest(arg0 *cleanrooms.GetSchemaAnalysisRuleInput) (*request.Request, *cleanrooms.GetSchemaAnalysisRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaAnalysisRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.GetSchemaAnalysisRuleOutput)
	return ret0, ret1
}

// GetSchemaAnalysisRuleRequest indicates an expected call of GetSchemaAnalysisRuleRequest
func (mr *MockCleanRoomsAPIMockRecorder) GetSchemaAnalysisRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaAnalysisRuleRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetSchemaAnalysisRuleRequest), arg0)
}

// GetSchemaAnalysisRuleWithContext mocks base method
func (m *MockCleanRoomsAPI) GetSchemaAnalysisRuleWithContext(arg0 context.Context, arg1 *cleanrooms.GetSchemaAnalysisRuleInput, arg2 ...request.Option) (*cleanrooms.GetSchemaAnalysisRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaAnalysisRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.GetSchemaAnalysisRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaAnalysisRuleWithContext indicates an expected call of GetSchemaAnalysisRuleWithContext
func (mr *MockCleanRoomsAPIMockRecorder) GetSchemaAnalysisRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaAnalysisRuleWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetSchemaAnalysisRuleWithContext), varargs...)
}

// GetSchemaRequest mocks base method
func (m *MockCleanRoomsAPI) GetSchemaRequest(arg0 *cleanrooms.GetSchemaInput) (*request.Request, *cleanrooms.GetSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.GetSchemaOutput)
	return ret0, ret1
}

// GetSchemaRequest indicates an expected call of GetSchemaRequest
func (mr *MockCleanRoomsAPIMockRecorder) GetSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetSchemaRequest), arg0)
}

// GetSchemaWithContext mocks base method
func (m *MockCleanRoomsAPI) GetSchemaWithContext(arg0 context.Context, arg1 *cleanrooms.GetSchemaInput, arg2 ...request.Option) (*cleanrooms.GetSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.GetSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaWithContext indicates an expected call of GetSchemaWithContext
func (mr *MockCleanRoomsAPIMockRecorder) GetSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).GetSchemaWithContext), varargs...)
}

// ListCollaborations mocks base method
func (m *MockCleanRoomsAPI) ListCollaborations(arg0 *cleanrooms.ListCollaborationsInput) (*cleanrooms.ListCollaborationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollaborations", arg0)
	ret0, _ := ret[0].(*cleanrooms.ListCollaborationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollaborations indicates an expected call of ListCollaborations
func (mr *MockCleanRoomsAPIMockRecorder) ListCollaborations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollaborations", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListCollaborations), arg0)
}

// ListCollaborationsPages mocks base method
func (m *MockCleanRoomsAPI) ListCollaborationsPages(arg0 *cleanrooms.ListCollaborationsInput, arg1 func(*cleanrooms.ListCollaborationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollaborationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCollaborationsPages indicates an expected call of ListCollaborationsPages
func (mr *MockCleanRoomsAPIMockRecorder) ListCollaborationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollaborationsPages", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListCollaborationsPages), arg0, arg1)
}

// ListCollaborationsPagesWithContext mocks base method
func (m *MockCleanRoomsAPI) ListCollaborationsPagesWithContext(arg0 context.Context, arg1 *cleanrooms.ListCollaborationsInput, arg2 func(*cleanrooms.ListCollaborationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollaborationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCollaborationsPagesWithContext indicates an expected call of ListCollaborationsPagesWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListCollaborationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollaborationsPagesWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListCollaborationsPagesWithContext), varargs...)
}

// ListCollaborationsRequest mocks base method
func (m *MockCleanRoomsAPI) ListCollaborationsRequest(arg0 *cleanrooms.ListCollaborationsInput) (*request.Request, *cleanrooms.ListCollaborationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollaborationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.ListCollaborationsOutput)
	return ret0, ret1
}

// ListCollaborationsRequest indicates an expected call of ListCollaborationsRequest
func (mr *MockCleanRoomsAPIMockRecorder) ListCollaborationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollaborationsRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListCollaborationsRequest), arg0)
}

// ListCollaborationsWithContext mocks base method
func (m *MockCleanRoomsAPI) ListCollaborationsWithContext(arg0 context.Context, arg1 *cleanrooms.ListCollaborationsInput, arg2 ...request.Option) (*cleanrooms.ListCollaborationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollaborationsWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.ListCollaborationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollaborationsWithContext indicates an expected call of ListCollaborationsWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListCollaborationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollaborationsWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListCollaborationsWithContext), varargs...)
}

// ListConfiguredTableAssociations mocks base method
func (m *MockCleanRoomsAPI) ListConfiguredTableAssociations(arg0 *cleanrooms.ListConfiguredTableAssociationsInput) (*cleanrooms.ListConfiguredTableAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfiguredTableAssociations", arg0)
	ret0, _ := ret[0].(*cleanrooms.ListConfiguredTableAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfiguredTableAssociations indicates an expected call of ListConfiguredTableAssociations
func (mr *MockCleanRoomsAPIMockRecorder) ListConfiguredTableAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredTableAssociations", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListConfiguredTableAssociations), arg0)
}

// ListConfiguredTableAssociationsPages mocks base method
func (m *MockCleanRoomsAPI) ListConfiguredTableAssociationsPages(arg0 *cleanrooms.ListConfiguredTableAssociationsInput, arg1 func(*cleanrooms.ListConfiguredTableAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfiguredTableAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfiguredTableAssociationsPages indicates an expected call of ListConfiguredTableAssociationsPages
func (mr *MockCleanRoomsAPIMockRecorder) ListConfiguredTableAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredTableAssociationsPages", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListConfiguredTableAssociationsPages), arg0, arg1)
}

// ListConfiguredTableAssociationsPagesWithContext mocks base method
func (m *MockCleanRoomsAPI) ListConfiguredTableAssociationsPagesWithContext(arg0 context.Context, arg1 *cleanrooms.ListConfiguredTableAssociationsInput, arg2 func(*cleanrooms.ListConfiguredTableAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfiguredTableAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfiguredTableAssociationsPagesWithContext indicates an expected call of ListConfiguredTableAssociationsPagesWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListConfiguredTableAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredTableAssociationsPagesWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListConfiguredTableAssociationsPagesWithContext), varargs...)
}

// ListConfiguredTableAssociationsRequest mocks base method
func (m *MockCleanRoomsAPI) ListConfiguredTableAssociationsRequest(arg0 *cleanrooms.ListConfiguredTableAssociationsInput) (*request.Request, *cleanrooms.ListConfiguredTableAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfiguredTableAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.ListConfiguredTableAssociationsOutput)
	return ret0, ret1
}

// ListConfiguredTableAssociationsRequest indicates an expected call of ListConfiguredTableAssociationsRequest
func (mr *MockCleanRoomsAPIMockRecorder) ListConfiguredTableAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredTableAssociationsRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListConfiguredTableAssociationsRequest), arg0)
}

// ListConfiguredTableAssociationsWithContext mocks base method
func (m *MockCleanRoomsAPI) ListConfiguredTableAssociationsWithContext(arg0 context.Context, arg1 *cleanrooms.ListConfiguredTableAssociationsInput, arg2 ...request.Option) (*cleanrooms.ListConfiguredTableAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfiguredTableAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.ListConfiguredTableAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfiguredTableAssociationsWithContext indicates an expected call of ListConfiguredTableAssociationsWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListConfiguredTableAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredTableAssociationsWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListConfiguredTableAssociationsWithContext), varargs...)
}

// ListConfiguredTables mocks base method
func (m *MockCleanRoomsAPI) ListConfiguredTables(arg0 *cleanrooms.ListConfiguredTablesInput) (*cleanrooms.ListConfiguredTablesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfiguredTables", arg0)
	ret0, _ := ret[0].(*cleanrooms.ListConfiguredTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfiguredTables indicates an expected call of ListConfiguredTables
func (mr *MockCleanRoomsAPIMockRecorder) ListConfiguredTables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredTables", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListConfiguredTables), arg0)
}

// ListConfiguredTablesPages mocks base method
func (m *MockCleanRoomsAPI) ListConfiguredTablesPages(arg0 *cleanrooms.ListConfiguredTablesInput, arg1 func(*cleanrooms.ListConfiguredTablesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfiguredTablesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfiguredTablesPages indicates an expected call of ListConfiguredTablesPages
func (mr *MockCleanRoomsAPIMockRecorder) ListConfiguredTablesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredTablesPages", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListConfiguredTablesPages), arg0, arg1)
}

// ListConfiguredTablesPagesWithContext mocks base method
func (m *MockCleanRoomsAPI) ListConfiguredTablesPagesWithContext(arg0 context.Context, arg1 *cleanrooms.ListConfiguredTablesInput, arg2 func(*cleanrooms.ListConfiguredTablesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfiguredTablesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfiguredTablesPagesWithContext indicates an expected call of ListConfiguredTablesPagesWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListConfiguredTablesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredTablesPagesWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListConfiguredTablesPagesWithContext), varargs...)
}

// ListConfiguredTablesRequest mocks base method
func (m *MockCleanRoomsAPI) ListConfiguredTablesRequest(arg0 *cleanrooms.ListConfiguredTablesInput) (*request.Request, *cleanrooms.ListConfiguredTablesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfiguredTablesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.ListConfiguredTablesOutput)
	return ret0, ret1
}

// ListConfiguredTablesRequest indicates an expected call of ListConfiguredTablesRequest
func (mr *MockCleanRoomsAPIMockRecorder) ListConfiguredTablesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredTablesRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListConfiguredTablesRequest), arg0)
}

// ListConfiguredTablesWithContext mocks base method
func (m *MockCleanRoomsAPI) ListConfiguredTablesWithContext(arg0 context.Context, arg1 *cleanrooms.ListConfiguredTablesInput, arg2 ...request.Option) (*cleanrooms.ListConfiguredTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfiguredTablesWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.ListConfiguredTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfiguredTablesWithContext indicates an expected call of ListConfiguredTablesWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListConfiguredTablesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfiguredTablesWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListConfiguredTablesWithContext), varargs...)
}

// ListMembers mocks base method
func (m *MockCleanRoomsAPI) ListMembers(arg0 *cleanrooms.ListMembersInput) (*cleanrooms.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0)
	ret0, _ := ret[0].(*cleanrooms.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers
func (mr *MockCleanRoomsAPIMockRecorder) ListMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListMembers), arg0)
}

// ListMembersPages mocks base method
func (m *MockCleanRoomsAPI) ListMembersPages(arg0 *cleanrooms.ListMembersInput, arg1 func(*cleanrooms.ListMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPages indicates an expected call of ListMembersPages
func (mr *MockCleanRoomsAPIMockRecorder) ListMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPages", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListMembersPages), arg0, arg1)
}

// ListMembersPagesWithContext mocks base method
func (m *MockCleanRoomsAPI) ListMembersPagesWithContext(arg0 context.Context, arg1 *cleanrooms.ListMembersInput, arg2 func(*cleanrooms.ListMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPagesWithContext indicates an expected call of ListMembersPagesWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPagesWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListMembersPagesWithContext), varargs...)
}

// ListMembersRequest mocks base method
func (m *MockCleanRoomsAPI) ListMembersRequest(arg0 *cleanrooms.ListMembersInput) (*request.Request, *cleanrooms.ListMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.ListMembersOutput)
	return ret0, ret1
}

// ListMembersRequest indicates an expected call of ListMembersRequest
func (mr *MockCleanRoomsAPIMockRecorder) ListMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListMembersRequest), arg0)
}

// ListMembersWithContext mocks base method
func (m *MockCleanRoomsAPI) ListMembersWithContext(arg0 context.Context, arg1 *cleanrooms.ListMembersInput, arg2 ...request.Option) (*cleanrooms.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersWithContext indicates an expected call of ListMembersWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListMembersWithContext), varargs...)
}

// ListMemberships mocks base method
func (m *MockCleanRoomsAPI) ListMemberships(arg0 *cleanrooms.ListMembershipsInput) (*cleanrooms.ListMembershipsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMemberships", arg0)
	ret0, _ := ret[0].(*cleanrooms.ListMembershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMemberships indicates an expected call of ListMemberships
func (mr *MockCleanRoomsAPIMockRecorder) ListMemberships(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMemberships", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListMemberships), arg0)
}

// ListMembershipsPages mocks base method
func (m *MockCleanRoomsAPI) ListMembershipsPages(arg0 *cleanrooms.ListMembershipsInput, arg1 func(*cleanrooms.ListMembershipsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembershipsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembershipsPages indicates an expected call of ListMembershipsPages
func (mr *MockCleanRoomsAPIMockRecorder) ListMembershipsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembershipsPages", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListMembershipsPages), arg0, arg1)
}

// ListMembershipsPagesWithContext mocks base method
func (m *MockCleanRoomsAPI) ListMembershipsPagesWithContext(arg0 context.Context, arg1 *cleanrooms.ListMembershipsInput, arg2 func(*cleanrooms.ListMembershipsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembershipsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembershipsPagesWithContext indicates an expected call of ListMembershipsPagesWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListMembershipsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembershipsPagesWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListMembershipsPagesWithContext), varargs...)
}

// ListMembershipsRequest mocks base method
func (m *MockCleanRoomsAPI) ListMembershipsRequest(arg0 *cleanrooms.ListMembershipsInput) (*request.Request, *cleanrooms.ListMembershipsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembershipsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.ListMembershipsOutput)
	return ret0, ret1
}

// ListMembershipsRequest indicates an expected call of ListMembershipsRequest
func (mr *MockCleanRoomsAPIMockRecorder) ListMembershipsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembershipsRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListMembershipsRequest), arg0)
}

// ListMembershipsWithContext mocks base method
func (m *MockCleanRoomsAPI) ListMembershipsWithContext(arg0 context.Context, arg1 *cleanrooms.ListMembershipsInput, arg2 ...request.Option) (*cleanrooms.ListMembershipsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembershipsWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.ListMembershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembershipsWithContext indicates an expected call of ListMembershipsWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListMembershipsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembershipsWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListMembershipsWithContext), varargs...)
}

// ListProtectedQueries mocks base method
func (m *MockCleanRoomsAPI) ListProtectedQueries(arg0 *cleanrooms.ListProtectedQueriesInput) (*cleanrooms.ListProtectedQueriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProtectedQueries", arg0)
	ret0, _ := ret[0].(*cleanrooms.ListProtectedQueriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProtectedQueries indicates an expected call of ListProtectedQueries
func (mr *MockCleanRoomsAPIMockRecorder) ListProtectedQueries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedQueries", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListProtectedQueries), arg0)
}

// ListProtectedQueriesPages mocks base method
func (m *MockCleanRoomsAPI) ListProtectedQueriesPages(arg0 *cleanrooms.ListProtectedQueriesInput, arg1 func(*cleanrooms.ListProtectedQueriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProtectedQueriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProtectedQueriesPages indicates an expected call of ListProtectedQueriesPages
func (mr *MockCleanRoomsAPIMockRecorder) ListProtectedQueriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedQueriesPages", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListProtectedQueriesPages), arg0, arg1)
}

// ListProtectedQueriesPagesWithContext mocks base method
func (m *MockCleanRoomsAPI) ListProtectedQueriesPagesWithContext(arg0 context.Context, arg1 *cleanrooms.ListProtectedQueriesInput, arg2 func(*cleanrooms.ListProtectedQueriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectedQueriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProtectedQueriesPagesWithContext indicates an expected call of ListProtectedQueriesPagesWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListProtectedQueriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedQueriesPagesWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListProtectedQueriesPagesWithContext), varargs...)
}

// ListProtectedQueriesRequest mocks base method
func (m *MockCleanRoomsAPI) ListProtectedQueriesRequest(arg0 *cleanrooms.ListProtectedQueriesInput) (*request.Request, *cleanrooms.ListProtectedQueriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProtectedQueriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.ListProtectedQueriesOutput)
	return ret0, ret1
}

// ListProtectedQueriesRequest indicates an expected call of ListProtectedQueriesRequest
func (mr *MockCleanRoomsAPIMockRecorder) ListProtectedQueriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedQueriesRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListProtectedQueriesRequest), arg0)
}

// ListProtectedQueriesWithContext mocks base method
func (m *MockCleanRoomsAPI) ListProtectedQueriesWithContext(arg0 context.Context, arg1 *cleanrooms.ListProtectedQueriesInput, arg2 ...request.Option) (*cleanrooms.ListProtectedQueriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectedQueriesWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.ListProtectedQueriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProtectedQueriesWithContext indicates an expected call of ListProtectedQueriesWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListProtectedQueriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedQueriesWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListProtectedQueriesWithContext), varargs...)
}

// ListSchemas mocks base method
func (m *MockCleanRoomsAPI) ListSchemas(arg0 *cleanrooms.ListSchemasInput) (*cleanrooms.ListSchemasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemas", arg0)
	ret0, _ := ret[0].(*cleanrooms.ListSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemas indicates an expected call of ListSchemas
func (mr *MockCleanRoomsAPIMockRecorder) ListSchemas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemas", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListSchemas), arg0)
}

// ListSchemasPages mocks base method
func (m *MockCleanRoomsAPI) ListSchemasPages(arg0 *cleanrooms.ListSchemasInput, arg1 func(*cleanrooms.ListSchemasOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemasPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemasPages indicates an expected call of ListSchemasPages
func (mr *MockCleanRoomsAPIMockRecorder) ListSchemasPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasPages", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListSchemasPages), arg0, arg1)
}

// ListSchemasPagesWithContext mocks base method
func (m *MockCleanRoomsAPI) ListSchemasPagesWithContext(arg0 context.Context, arg1 *cleanrooms.ListSchemasInput, arg2 func(*cleanrooms.ListSchemasOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemasPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemasPagesWithContext indicates an expected call of ListSchemasPagesWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListSchemasPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasPagesWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListSchemasPagesWithContext), varargs...)
}

// ListSchemasRequest mocks base method
func (m *MockCleanRoomsAPI) ListSchemasRequest(arg0 *cleanrooms.ListSchemasInput) (*request.Request, *cleanrooms.ListSchemasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.ListSchemasOutput)
	return ret0, ret1
}

// ListSchemasRequest indicates an expected call of ListSchemasRequest
func (mr *MockCleanRoomsAPIMockRecorder) ListSchemasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListSchemasRequest), arg0)
}

// ListSchemasWithContext mocks base method
func (m *MockCleanRoomsAPI) ListSchemasWithContext(arg0 context.Context, arg1 *cleanrooms.ListSchemasInput, arg2 ...request.Option) (*cleanrooms.ListSchemasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemasWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.ListSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemasWithContext indicates an expected call of ListSchemasWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListSchemasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListSchemasWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCleanRoomsAPI) ListTagsForResource(arg0 *cleanrooms.ListTagsForResourceInput) (*cleanrooms.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*cleanrooms.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCleanRoomsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCleanRoomsAPI) ListTagsForResourceRequest(arg0 *cleanrooms.ListTagsForResourceInput) (*request.Request, *cleanrooms.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCleanRoomsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCleanRoomsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *cleanrooms.ListTagsForResourceInput, arg2 ...request.Option) (*cleanrooms.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCleanRoomsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartProtectedQuery mocks base method
func (m *MockCleanRoomsAPI) StartProtectedQuery(arg0 *cleanrooms.StartProtectedQueryInput) (*cleanrooms.StartProtectedQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProtectedQuery", arg0)
	ret0, _ := ret[0].(*cleanrooms.StartProtectedQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProtectedQuery indicates an expected call of StartProtectedQuery
func (mr *MockCleanRoomsAPIMockRecorder) StartProtectedQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProtectedQuery", reflect.TypeOf((*MockCleanRoomsAPI)(nil).StartProtectedQuery), arg0)
}

// StartProtectedQueryRequest mocks base method
func (m *MockCleanRoomsAPI) StartProtectedQueryRequest(arg0 *cleanrooms.StartProtectedQueryInput) (*request.Request, *cleanrooms.StartProtectedQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProtectedQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.StartProtectedQueryOutput)
	return ret0, ret1
}

// StartProtectedQueryRequest indicates an expected call of StartProtectedQueryRequest
func (mr *MockCleanRoomsAPIMockRecorder) StartProtectedQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProtectedQueryRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).StartProtectedQueryRequest), arg0)
}

// StartProtectedQueryWithContext mocks base method
func (m *MockCleanRoomsAPI) StartProtectedQueryWithContext(arg0 context.Context, arg1 *cleanrooms.StartProtectedQueryInput, arg2 ...request.Option) (*cleanrooms.StartProtectedQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartProtectedQueryWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.StartProtectedQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProtectedQueryWithContext indicates an expected call of StartProtectedQueryWithContext
func (mr *MockCleanRoomsAPIMockRecorder) StartProtectedQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProtectedQueryWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).StartProtectedQueryWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCleanRoomsAPI) TagResource(arg0 *cleanrooms.TagResourceInput) (*cleanrooms.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*cleanrooms.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCleanRoomsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCleanRoomsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCleanRoomsAPI) TagResourceRequest(arg0 *cleanrooms.TagResourceInput) (*request.Request, *cleanrooms.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCleanRoomsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCleanRoomsAPI) TagResourceWithContext(arg0 context.Context, arg1 *cleanrooms.TagResourceInput, arg2 ...request.Option) (*cleanrooms.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCleanRoomsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCleanRoomsAPI) UntagResource(arg0 *cleanrooms.UntagResourceInput) (*cleanrooms.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*cleanrooms.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCleanRoomsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCleanRoomsAPI) UntagResourceRequest(arg0 *cleanrooms.UntagResourceInput) (*request.Request, *cleanrooms.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCleanRoomsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCleanRoomsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *cleanrooms.UntagResourceInput, arg2 ...request.Option) (*cleanrooms.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCleanRoomsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCollaboration mocks base method
func (m *MockCleanRoomsAPI) UpdateCollaboration(arg0 *cleanrooms.UpdateCollaborationInput) (*cleanrooms.UpdateCollaborationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCollaboration", arg0)
	ret0, _ := ret[0].(*cleanrooms.UpdateCollaborationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollaboration indicates an expected call of UpdateCollaboration
func (mr *MockCleanRoomsAPIMockRecorder) UpdateCollaboration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollaboration", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateCollaboration), arg0)
}

// UpdateCollaborationRequest mocks base method
func (m *MockCleanRoomsAPI) UpdateCollaborationRequest(arg0 *cleanrooms.UpdateCollaborationInput) (*request.Request, *cleanrooms.UpdateCollaborationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCollaborationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.UpdateCollaborationOutput)
	return ret0, ret1
}

// UpdateCollaborationRequest indicates an expected call of UpdateCollaborationRequest
func (mr *MockCleanRoomsAPIMockRecorder) UpdateCollaborationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollaborationRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateCollaborationRequest), arg0)
}

// UpdateCollaborationWithContext mocks base method
func (m *MockCleanRoomsAPI) UpdateCollaborationWithContext(arg0 context.Context, arg1 *cleanrooms.UpdateCollaborationInput, arg2 ...request.Option) (*cleanrooms.UpdateCollaborationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCollaborationWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.UpdateCollaborationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollaborationWithContext indicates an expected call of UpdateCollaborationWithContext
func (mr *MockCleanRoomsAPIMockRecorder) UpdateCollaborationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollaborationWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateCollaborationWithContext), varargs...)
}

// UpdateConfiguredTable mocks base method
func (m *MockCleanRoomsAPI) UpdateConfiguredTable(arg0 *cleanrooms.UpdateConfiguredTableInput) (*cleanrooms.UpdateConfiguredTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguredTable", arg0)
	ret0, _ := ret[0].(*cleanrooms.UpdateConfiguredTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguredTable indicates an expected call of UpdateConfiguredTable
func (mr *MockCleanRoomsAPIMockRecorder) UpdateConfiguredTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredTable", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateConfiguredTable), arg0)
}

// UpdateConfiguredTableAnalysisRule mocks base method
func (m *MockCleanRoomsAPI) UpdateConfiguredTableAnalysisRule(arg0 *cleanrooms.UpdateConfiguredTableAnalysisRuleInput) (*cleanrooms.UpdateConfiguredTableAnalysisRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguredTableAnalysisRule", arg0)
	ret0, _ := ret[0].(*cleanrooms.UpdateConfiguredTableAnalysisRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguredTableAnalysisRule indicates an expected call of UpdateConfiguredTableAnalysisRule
func (mr *MockCleanRoomsAPIMockRecorder) UpdateConfiguredTableAnalysisRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredTableAnalysisRule", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateConfiguredTableAnalysisRule), arg0)
}

// UpdateConfiguredTableAnalysisRuleRequest mocks base method
func (m *MockCleanRoomsAPI) UpdateConfiguredTableAnalysisRuleRequest(arg0 *cleanrooms.UpdateConfiguredTableAnalysisRuleInput) (*request.Request, *cleanrooms.UpdateConfiguredTableAnalysisRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguredTableAnalysisRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.UpdateConfiguredTableAnalysisRuleOutput)
	return ret0, ret1
}

// UpdateConfiguredTableAnalysisRuleRequest indicates an expected call of UpdateConfiguredTableAnalysisRuleRequest
func (mr *MockCleanRoomsAPIMockRecorder) UpdateConfiguredTableAnalysisRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredTableAnalysisRuleRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateConfiguredTableAnalysisRuleRequest), arg0)
}

// UpdateConfiguredTableAnalysisRuleWithContext mocks base method
func (m *MockCleanRoomsAPI) UpdateConfiguredTableAnalysisRuleWithContext(arg0 context.Context, arg1 *cleanrooms.UpdateConfiguredTableAnalysisRuleInput, arg2 ...request.Option) (*cleanrooms.UpdateConfiguredTableAnalysisRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfiguredTableAnalysisRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.UpdateConfiguredTableAnalysisRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguredTableAnalysisRuleWithContext indicates an expected call of UpdateConfiguredTableAnalysisRuleWithContext
func (mr *MockCleanRoomsAPIMockRecorder) UpdateConfiguredTableAnalysisRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredTableAnalysisRuleWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateConfiguredTableAnalysisRuleWithContext), varargs...)
}

// UpdateConfiguredTableAssociation mocks base method
func (m *MockCleanRoomsAPI) UpdateConfiguredTableAssociation(arg0 *cleanrooms.UpdateConfiguredTableAssociationInput) (*cleanrooms.UpdateConfiguredTableAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguredTableAssociation", arg0)
	ret0, _ := ret[0].(*cleanrooms.UpdateConfiguredTableAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguredTableAssociation indicates an expected call of UpdateConfiguredTableAssociation
func (mr *MockCleanRoomsAPIMockRecorder) UpdateConfiguredTableAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredTableAssociation", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateConfiguredTableAssociation), arg0)
}

// UpdateConfiguredTableAssociationRequest mocks base method
func (m *MockCleanRoomsAPI) UpdateConfiguredTableAssociationRequest(arg0 *cleanrooms.UpdateConfiguredTableAssociationInput) (*request.Request, *cleanrooms.UpdateConfiguredTableAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguredTableAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.UpdateConfiguredTableAssociationOutput)
	return ret0, ret1
}

// UpdateConfiguredTableAssociationRequest indicates an expected call of UpdateConfiguredTableAssociationRequest
func (mr *MockCleanRoomsAPIMockRecorder) UpdateConfiguredTableAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredTableAssociationRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateConfiguredTableAssociationRequest), arg0)
}

// UpdateConfiguredTableAssociationWithContext mocks base method
func (m *MockCleanRoomsAPI) UpdateConfiguredTableAssociationWithContext(arg0 context.Context, arg1 *cleanrooms.UpdateConfiguredTableAssociationInput, arg2 ...request.Option) (*cleanrooms.UpdateConfiguredTableAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfiguredTableAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.UpdateConfiguredTableAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguredTableAssociationWithContext indicates an expected call of UpdateConfiguredTableAssociationWithContext
func (mr *MockCleanRoomsAPIMockRecorder) UpdateConfiguredTableAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredTableAssociationWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateConfiguredTableAssociationWithContext), varargs...)
}

// UpdateConfiguredTableRequest mocks base method
func (m *MockCleanRoomsAPI) UpdateConfiguredTableRequest(arg0 *cleanrooms.UpdateConfiguredTableInput) (*request.Request, *cleanrooms.UpdateConfiguredTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguredTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.UpdateConfiguredTableOutput)
	return ret0, ret1
}

// UpdateConfiguredTableRequest indicates an expected call of UpdateConfiguredTableRequest
func (mr *MockCleanRoomsAPIMockRecorder) UpdateConfiguredTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredTableRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateConfiguredTableRequest), arg0)
}

// UpdateConfiguredTableWithContext mocks base method
func (m *MockCleanRoomsAPI) UpdateConfiguredTableWithContext(arg0 context.Context, arg1 *cleanrooms.UpdateConfiguredTableInput, arg2 ...request.Option) (*cleanrooms.UpdateConfiguredTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfiguredTableWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.UpdateConfiguredTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguredTableWithContext indicates an expected call of UpdateConfiguredTableWithContext
func (mr *MockCleanRoomsAPIMockRecorder) UpdateConfiguredTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguredTableWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateConfiguredTableWithContext), varargs...)
}

// UpdateMembership mocks base method
func (m *MockCleanRoomsAPI) UpdateMembership(arg0 *cleanrooms.UpdateMembershipInput) (*cleanrooms.UpdateMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMembership", arg0)
	ret0, _ := ret[0].(*cleanrooms.UpdateMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMembership indicates an expected call of UpdateMembership
func (mr *MockCleanRoomsAPIMockRecorder) UpdateMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMembership", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateMembership), arg0)
}

// UpdateMembershipRequest mocks base method
func (m *MockCleanRoomsAPI) UpdateMembershipRequest(arg0 *cleanrooms.UpdateMembershipInput) (*request.Request, *cleanrooms.UpdateMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.UpdateMembershipOutput)
	return ret0, ret1
}

// UpdateMembershipRequest indicates an expected call of UpdateMembershipRequest
func (mr *MockCleanRoomsAPIMockRecorder) UpdateMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMembershipRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateMembershipRequest), arg0)
}

// UpdateMembershipWithContext mocks base method
func (m *MockCleanRoomsAPI) UpdateMembershipWithContext(arg0 context.Context, arg1 *cleanrooms.UpdateMembershipInput, arg2 ...request.Option) (*cleanrooms.UpdateMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.UpdateMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMembershipWithContext indicates an expected call of UpdateMembershipWithContext
func (mr *MockCleanRoomsAPIMockRecorder) UpdateMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMembershipWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateMembershipWithContext), varargs...)
}

// UpdateProtectedQuery mocks base method
func (m *MockCleanRoomsAPI) UpdateProtectedQuery(arg0 *cleanrooms.UpdateProtectedQueryInput) (*cleanrooms.UpdateProtectedQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProtectedQuery", arg0)
	ret0, _ := ret[0].(*cleanrooms.UpdateProtectedQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProtectedQuery indicates an expected call of UpdateProtectedQuery
func (mr *MockCleanRoomsAPIMockRecorder) UpdateProtectedQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectedQuery", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateProtectedQuery), arg0)
}

// UpdateProtectedQueryRequest mocks base method
func (m *MockCleanRoomsAPI) UpdateProtectedQueryRequest(arg0 *cleanrooms.UpdateProtectedQueryInput) (*request.Request, *cleanrooms.UpdateProtectedQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProtectedQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cleanrooms.UpdateProtectedQueryOutput)
	return ret0, ret1
}

// UpdateProtectedQueryRequest indicates an expected call of UpdateProtectedQueryRequest
func (mr *MockCleanRoomsAPIMockRecorder) UpdateProtectedQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectedQueryRequest", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateProtectedQueryRequest), arg0)
}

// UpdateProtectedQueryWithContext mocks base method
func (m *MockCleanRoomsAPI) UpdateProtectedQueryWithContext(arg0 context.Context, arg1 *cleanrooms.UpdateProtectedQueryInput, arg2 ...request.Option) (*cleanrooms.UpdateProtectedQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProtectedQueryWithContext", varargs...)
	ret0, _ := ret[0].(*cleanrooms.UpdateProtectedQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProtectedQueryWithContext indicates an expected call of UpdateProtectedQueryWithContext
func (mr *MockCleanRoomsAPIMockRecorder) UpdateProtectedQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectedQueryWithContext", reflect.TypeOf((*MockCleanRoomsAPI)(nil).UpdateProtectedQueryWithContext), varargs...)
}
