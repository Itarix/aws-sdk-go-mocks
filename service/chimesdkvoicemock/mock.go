// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/chimesdkvoice/chimesdkvoiceiface (interfaces: ChimeSDKVoiceAPI)

// Package chimesdkvoicemock is a generated GoMock package.
package chimesdkvoicemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	chimesdkvoice "github.com/aws/aws-sdk-go/service/chimesdkvoice"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChimeSDKVoiceAPI is a mock of ChimeSDKVoiceAPI interface
type MockChimeSDKVoiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChimeSDKVoiceAPIMockRecorder
}

// MockChimeSDKVoiceAPIMockRecorder is the mock recorder for MockChimeSDKVoiceAPI
type MockChimeSDKVoiceAPIMockRecorder struct {
	mock *MockChimeSDKVoiceAPI
}

// NewMockChimeSDKVoiceAPI creates a new mock instance
func NewMockChimeSDKVoiceAPI(ctrl *gomock.Controller) *MockChimeSDKVoiceAPI {
	mock := &MockChimeSDKVoiceAPI{ctrl: ctrl}
	mock.recorder = &MockChimeSDKVoiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChimeSDKVoiceAPI) EXPECT() *MockChimeSDKVoiceAPIMockRecorder {
	return m.recorder
}

// AssociatePhoneNumbersWithVoiceConnector mocks base method
func (m *MockChimeSDKVoiceAPI) AssociatePhoneNumbersWithVoiceConnector(arg0 *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorInput) (*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePhoneNumbersWithVoiceConnector", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociatePhoneNumbersWithVoiceConnector indicates an expected call of AssociatePhoneNumbersWithVoiceConnector
func (mr *MockChimeSDKVoiceAPIMockRecorder) AssociatePhoneNumbersWithVoiceConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePhoneNumbersWithVoiceConnector", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).AssociatePhoneNumbersWithVoiceConnector), arg0)
}

// AssociatePhoneNumbersWithVoiceConnectorGroup mocks base method
func (m *MockChimeSDKVoiceAPI) AssociatePhoneNumbersWithVoiceConnectorGroup(arg0 *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupInput) (*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePhoneNumbersWithVoiceConnectorGroup", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociatePhoneNumbersWithVoiceConnectorGroup indicates an expected call of AssociatePhoneNumbersWithVoiceConnectorGroup
func (mr *MockChimeSDKVoiceAPIMockRecorder) AssociatePhoneNumbersWithVoiceConnectorGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePhoneNumbersWithVoiceConnectorGroup", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).AssociatePhoneNumbersWithVoiceConnectorGroup), arg0)
}

// AssociatePhoneNumbersWithVoiceConnectorGroupRequest mocks base method
func (m *MockChimeSDKVoiceAPI) AssociatePhoneNumbersWithVoiceConnectorGroupRequest(arg0 *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupInput) (*request.Request, *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePhoneNumbersWithVoiceConnectorGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput)
	return ret0, ret1
}

// AssociatePhoneNumbersWithVoiceConnectorGroupRequest indicates an expected call of AssociatePhoneNumbersWithVoiceConnectorGroupRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) AssociatePhoneNumbersWithVoiceConnectorGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePhoneNumbersWithVoiceConnectorGroupRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).AssociatePhoneNumbersWithVoiceConnectorGroupRequest), arg0)
}

// AssociatePhoneNumbersWithVoiceConnectorGroupWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) AssociatePhoneNumbersWithVoiceConnectorGroupWithContext(arg0 context.Context, arg1 *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupInput, arg2 ...request.Option) (*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociatePhoneNumbersWithVoiceConnectorGroupWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociatePhoneNumbersWithVoiceConnectorGroupWithContext indicates an expected call of AssociatePhoneNumbersWithVoiceConnectorGroupWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) AssociatePhoneNumbersWithVoiceConnectorGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePhoneNumbersWithVoiceConnectorGroupWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).AssociatePhoneNumbersWithVoiceConnectorGroupWithContext), varargs...)
}

// AssociatePhoneNumbersWithVoiceConnectorRequest mocks base method
func (m *MockChimeSDKVoiceAPI) AssociatePhoneNumbersWithVoiceConnectorRequest(arg0 *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorInput) (*request.Request, *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePhoneNumbersWithVoiceConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput)
	return ret0, ret1
}

// AssociatePhoneNumbersWithVoiceConnectorRequest indicates an expected call of AssociatePhoneNumbersWithVoiceConnectorRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) AssociatePhoneNumbersWithVoiceConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePhoneNumbersWithVoiceConnectorRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).AssociatePhoneNumbersWithVoiceConnectorRequest), arg0)
}

// AssociatePhoneNumbersWithVoiceConnectorWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) AssociatePhoneNumbersWithVoiceConnectorWithContext(arg0 context.Context, arg1 *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorInput, arg2 ...request.Option) (*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociatePhoneNumbersWithVoiceConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociatePhoneNumbersWithVoiceConnectorWithContext indicates an expected call of AssociatePhoneNumbersWithVoiceConnectorWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) AssociatePhoneNumbersWithVoiceConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePhoneNumbersWithVoiceConnectorWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).AssociatePhoneNumbersWithVoiceConnectorWithContext), varargs...)
}

// BatchDeletePhoneNumber mocks base method
func (m *MockChimeSDKVoiceAPI) BatchDeletePhoneNumber(arg0 *chimesdkvoice.BatchDeletePhoneNumberInput) (*chimesdkvoice.BatchDeletePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeletePhoneNumber", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.BatchDeletePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeletePhoneNumber indicates an expected call of BatchDeletePhoneNumber
func (mr *MockChimeSDKVoiceAPIMockRecorder) BatchDeletePhoneNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeletePhoneNumber", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).BatchDeletePhoneNumber), arg0)
}

// BatchDeletePhoneNumberRequest mocks base method
func (m *MockChimeSDKVoiceAPI) BatchDeletePhoneNumberRequest(arg0 *chimesdkvoice.BatchDeletePhoneNumberInput) (*request.Request, *chimesdkvoice.BatchDeletePhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeletePhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.BatchDeletePhoneNumberOutput)
	return ret0, ret1
}

// BatchDeletePhoneNumberRequest indicates an expected call of BatchDeletePhoneNumberRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) BatchDeletePhoneNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeletePhoneNumberRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).BatchDeletePhoneNumberRequest), arg0)
}

// BatchDeletePhoneNumberWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) BatchDeletePhoneNumberWithContext(arg0 context.Context, arg1 *chimesdkvoice.BatchDeletePhoneNumberInput, arg2 ...request.Option) (*chimesdkvoice.BatchDeletePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeletePhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.BatchDeletePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeletePhoneNumberWithContext indicates an expected call of BatchDeletePhoneNumberWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) BatchDeletePhoneNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeletePhoneNumberWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).BatchDeletePhoneNumberWithContext), varargs...)
}

// BatchUpdatePhoneNumber mocks base method
func (m *MockChimeSDKVoiceAPI) BatchUpdatePhoneNumber(arg0 *chimesdkvoice.BatchUpdatePhoneNumberInput) (*chimesdkvoice.BatchUpdatePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdatePhoneNumber", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.BatchUpdatePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdatePhoneNumber indicates an expected call of BatchUpdatePhoneNumber
func (mr *MockChimeSDKVoiceAPIMockRecorder) BatchUpdatePhoneNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdatePhoneNumber", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).BatchUpdatePhoneNumber), arg0)
}

// BatchUpdatePhoneNumberRequest mocks base method
func (m *MockChimeSDKVoiceAPI) BatchUpdatePhoneNumberRequest(arg0 *chimesdkvoice.BatchUpdatePhoneNumberInput) (*request.Request, *chimesdkvoice.BatchUpdatePhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdatePhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.BatchUpdatePhoneNumberOutput)
	return ret0, ret1
}

// BatchUpdatePhoneNumberRequest indicates an expected call of BatchUpdatePhoneNumberRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) BatchUpdatePhoneNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdatePhoneNumberRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).BatchUpdatePhoneNumberRequest), arg0)
}

// BatchUpdatePhoneNumberWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) BatchUpdatePhoneNumberWithContext(arg0 context.Context, arg1 *chimesdkvoice.BatchUpdatePhoneNumberInput, arg2 ...request.Option) (*chimesdkvoice.BatchUpdatePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdatePhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.BatchUpdatePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdatePhoneNumberWithContext indicates an expected call of BatchUpdatePhoneNumberWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) BatchUpdatePhoneNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdatePhoneNumberWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).BatchUpdatePhoneNumberWithContext), varargs...)
}

// CreatePhoneNumberOrder mocks base method
func (m *MockChimeSDKVoiceAPI) CreatePhoneNumberOrder(arg0 *chimesdkvoice.CreatePhoneNumberOrderInput) (*chimesdkvoice.CreatePhoneNumberOrderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePhoneNumberOrder", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.CreatePhoneNumberOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePhoneNumberOrder indicates an expected call of CreatePhoneNumberOrder
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreatePhoneNumberOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePhoneNumberOrder", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreatePhoneNumberOrder), arg0)
}

// CreatePhoneNumberOrderRequest mocks base method
func (m *MockChimeSDKVoiceAPI) CreatePhoneNumberOrderRequest(arg0 *chimesdkvoice.CreatePhoneNumberOrderInput) (*request.Request, *chimesdkvoice.CreatePhoneNumberOrderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePhoneNumberOrderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.CreatePhoneNumberOrderOutput)
	return ret0, ret1
}

// CreatePhoneNumberOrderRequest indicates an expected call of CreatePhoneNumberOrderRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreatePhoneNumberOrderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePhoneNumberOrderRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreatePhoneNumberOrderRequest), arg0)
}

// CreatePhoneNumberOrderWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) CreatePhoneNumberOrderWithContext(arg0 context.Context, arg1 *chimesdkvoice.CreatePhoneNumberOrderInput, arg2 ...request.Option) (*chimesdkvoice.CreatePhoneNumberOrderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePhoneNumberOrderWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.CreatePhoneNumberOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePhoneNumberOrderWithContext indicates an expected call of CreatePhoneNumberOrderWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreatePhoneNumberOrderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePhoneNumberOrderWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreatePhoneNumberOrderWithContext), varargs...)
}

// CreateProxySession mocks base method
func (m *MockChimeSDKVoiceAPI) CreateProxySession(arg0 *chimesdkvoice.CreateProxySessionInput) (*chimesdkvoice.CreateProxySessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProxySession", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.CreateProxySessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProxySession indicates an expected call of CreateProxySession
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateProxySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProxySession", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateProxySession), arg0)
}

// CreateProxySessionRequest mocks base method
func (m *MockChimeSDKVoiceAPI) CreateProxySessionRequest(arg0 *chimesdkvoice.CreateProxySessionInput) (*request.Request, *chimesdkvoice.CreateProxySessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProxySessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.CreateProxySessionOutput)
	return ret0, ret1
}

// CreateProxySessionRequest indicates an expected call of CreateProxySessionRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateProxySessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProxySessionRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateProxySessionRequest), arg0)
}

// CreateProxySessionWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) CreateProxySessionWithContext(arg0 context.Context, arg1 *chimesdkvoice.CreateProxySessionInput, arg2 ...request.Option) (*chimesdkvoice.CreateProxySessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProxySessionWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.CreateProxySessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProxySessionWithContext indicates an expected call of CreateProxySessionWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateProxySessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProxySessionWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateProxySessionWithContext), varargs...)
}

// CreateSipMediaApplication mocks base method
func (m *MockChimeSDKVoiceAPI) CreateSipMediaApplication(arg0 *chimesdkvoice.CreateSipMediaApplicationInput) (*chimesdkvoice.CreateSipMediaApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSipMediaApplication", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.CreateSipMediaApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSipMediaApplication indicates an expected call of CreateSipMediaApplication
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateSipMediaApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSipMediaApplication", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateSipMediaApplication), arg0)
}

// CreateSipMediaApplicationCall mocks base method
func (m *MockChimeSDKVoiceAPI) CreateSipMediaApplicationCall(arg0 *chimesdkvoice.CreateSipMediaApplicationCallInput) (*chimesdkvoice.CreateSipMediaApplicationCallOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSipMediaApplicationCall", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.CreateSipMediaApplicationCallOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSipMediaApplicationCall indicates an expected call of CreateSipMediaApplicationCall
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateSipMediaApplicationCall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSipMediaApplicationCall", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateSipMediaApplicationCall), arg0)
}

// CreateSipMediaApplicationCallRequest mocks base method
func (m *MockChimeSDKVoiceAPI) CreateSipMediaApplicationCallRequest(arg0 *chimesdkvoice.CreateSipMediaApplicationCallInput) (*request.Request, *chimesdkvoice.CreateSipMediaApplicationCallOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSipMediaApplicationCallRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.CreateSipMediaApplicationCallOutput)
	return ret0, ret1
}

// CreateSipMediaApplicationCallRequest indicates an expected call of CreateSipMediaApplicationCallRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateSipMediaApplicationCallRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSipMediaApplicationCallRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateSipMediaApplicationCallRequest), arg0)
}

// CreateSipMediaApplicationCallWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) CreateSipMediaApplicationCallWithContext(arg0 context.Context, arg1 *chimesdkvoice.CreateSipMediaApplicationCallInput, arg2 ...request.Option) (*chimesdkvoice.CreateSipMediaApplicationCallOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSipMediaApplicationCallWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.CreateSipMediaApplicationCallOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSipMediaApplicationCallWithContext indicates an expected call of CreateSipMediaApplicationCallWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateSipMediaApplicationCallWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSipMediaApplicationCallWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateSipMediaApplicationCallWithContext), varargs...)
}

// CreateSipMediaApplicationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) CreateSipMediaApplicationRequest(arg0 *chimesdkvoice.CreateSipMediaApplicationInput) (*request.Request, *chimesdkvoice.CreateSipMediaApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSipMediaApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.CreateSipMediaApplicationOutput)
	return ret0, ret1
}

// CreateSipMediaApplicationRequest indicates an expected call of CreateSipMediaApplicationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateSipMediaApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSipMediaApplicationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateSipMediaApplicationRequest), arg0)
}

// CreateSipMediaApplicationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) CreateSipMediaApplicationWithContext(arg0 context.Context, arg1 *chimesdkvoice.CreateSipMediaApplicationInput, arg2 ...request.Option) (*chimesdkvoice.CreateSipMediaApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSipMediaApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.CreateSipMediaApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSipMediaApplicationWithContext indicates an expected call of CreateSipMediaApplicationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateSipMediaApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSipMediaApplicationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateSipMediaApplicationWithContext), varargs...)
}

// CreateSipRule mocks base method
func (m *MockChimeSDKVoiceAPI) CreateSipRule(arg0 *chimesdkvoice.CreateSipRuleInput) (*chimesdkvoice.CreateSipRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSipRule", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.CreateSipRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSipRule indicates an expected call of CreateSipRule
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateSipRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSipRule", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateSipRule), arg0)
}

// CreateSipRuleRequest mocks base method
func (m *MockChimeSDKVoiceAPI) CreateSipRuleRequest(arg0 *chimesdkvoice.CreateSipRuleInput) (*request.Request, *chimesdkvoice.CreateSipRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSipRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.CreateSipRuleOutput)
	return ret0, ret1
}

// CreateSipRuleRequest indicates an expected call of CreateSipRuleRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateSipRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSipRuleRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateSipRuleRequest), arg0)
}

// CreateSipRuleWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) CreateSipRuleWithContext(arg0 context.Context, arg1 *chimesdkvoice.CreateSipRuleInput, arg2 ...request.Option) (*chimesdkvoice.CreateSipRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSipRuleWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.CreateSipRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSipRuleWithContext indicates an expected call of CreateSipRuleWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateSipRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSipRuleWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateSipRuleWithContext), varargs...)
}

// CreateVoiceConnector mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceConnector(arg0 *chimesdkvoice.CreateVoiceConnectorInput) (*chimesdkvoice.CreateVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoiceConnector", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.CreateVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoiceConnector indicates an expected call of CreateVoiceConnector
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceConnector", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceConnector), arg0)
}

// CreateVoiceConnectorGroup mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceConnectorGroup(arg0 *chimesdkvoice.CreateVoiceConnectorGroupInput) (*chimesdkvoice.CreateVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoiceConnectorGroup", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.CreateVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoiceConnectorGroup indicates an expected call of CreateVoiceConnectorGroup
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceConnectorGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceConnectorGroup", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceConnectorGroup), arg0)
}

// CreateVoiceConnectorGroupRequest mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceConnectorGroupRequest(arg0 *chimesdkvoice.CreateVoiceConnectorGroupInput) (*request.Request, *chimesdkvoice.CreateVoiceConnectorGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoiceConnectorGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.CreateVoiceConnectorGroupOutput)
	return ret0, ret1
}

// CreateVoiceConnectorGroupRequest indicates an expected call of CreateVoiceConnectorGroupRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceConnectorGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceConnectorGroupRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceConnectorGroupRequest), arg0)
}

// CreateVoiceConnectorGroupWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceConnectorGroupWithContext(arg0 context.Context, arg1 *chimesdkvoice.CreateVoiceConnectorGroupInput, arg2 ...request.Option) (*chimesdkvoice.CreateVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVoiceConnectorGroupWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.CreateVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoiceConnectorGroupWithContext indicates an expected call of CreateVoiceConnectorGroupWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceConnectorGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceConnectorGroupWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceConnectorGroupWithContext), varargs...)
}

// CreateVoiceConnectorRequest mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceConnectorRequest(arg0 *chimesdkvoice.CreateVoiceConnectorInput) (*request.Request, *chimesdkvoice.CreateVoiceConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoiceConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.CreateVoiceConnectorOutput)
	return ret0, ret1
}

// CreateVoiceConnectorRequest indicates an expected call of CreateVoiceConnectorRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceConnectorRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceConnectorRequest), arg0)
}

// CreateVoiceConnectorWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceConnectorWithContext(arg0 context.Context, arg1 *chimesdkvoice.CreateVoiceConnectorInput, arg2 ...request.Option) (*chimesdkvoice.CreateVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVoiceConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.CreateVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoiceConnectorWithContext indicates an expected call of CreateVoiceConnectorWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceConnectorWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceConnectorWithContext), varargs...)
}

// CreateVoiceProfile mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceProfile(arg0 *chimesdkvoice.CreateVoiceProfileInput) (*chimesdkvoice.CreateVoiceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoiceProfile", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.CreateVoiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoiceProfile indicates an expected call of CreateVoiceProfile
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceProfile", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceProfile), arg0)
}

// CreateVoiceProfileDomain mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceProfileDomain(arg0 *chimesdkvoice.CreateVoiceProfileDomainInput) (*chimesdkvoice.CreateVoiceProfileDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoiceProfileDomain", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.CreateVoiceProfileDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoiceProfileDomain indicates an expected call of CreateVoiceProfileDomain
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceProfileDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceProfileDomain", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceProfileDomain), arg0)
}

// CreateVoiceProfileDomainRequest mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceProfileDomainRequest(arg0 *chimesdkvoice.CreateVoiceProfileDomainInput) (*request.Request, *chimesdkvoice.CreateVoiceProfileDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoiceProfileDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.CreateVoiceProfileDomainOutput)
	return ret0, ret1
}

// CreateVoiceProfileDomainRequest indicates an expected call of CreateVoiceProfileDomainRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceProfileDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceProfileDomainRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceProfileDomainRequest), arg0)
}

// CreateVoiceProfileDomainWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceProfileDomainWithContext(arg0 context.Context, arg1 *chimesdkvoice.CreateVoiceProfileDomainInput, arg2 ...request.Option) (*chimesdkvoice.CreateVoiceProfileDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVoiceProfileDomainWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.CreateVoiceProfileDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoiceProfileDomainWithContext indicates an expected call of CreateVoiceProfileDomainWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceProfileDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceProfileDomainWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceProfileDomainWithContext), varargs...)
}

// CreateVoiceProfileRequest mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceProfileRequest(arg0 *chimesdkvoice.CreateVoiceProfileInput) (*request.Request, *chimesdkvoice.CreateVoiceProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoiceProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.CreateVoiceProfileOutput)
	return ret0, ret1
}

// CreateVoiceProfileRequest indicates an expected call of CreateVoiceProfileRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceProfileRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceProfileRequest), arg0)
}

// CreateVoiceProfileWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) CreateVoiceProfileWithContext(arg0 context.Context, arg1 *chimesdkvoice.CreateVoiceProfileInput, arg2 ...request.Option) (*chimesdkvoice.CreateVoiceProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVoiceProfileWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.CreateVoiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoiceProfileWithContext indicates an expected call of CreateVoiceProfileWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) CreateVoiceProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoiceProfileWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).CreateVoiceProfileWithContext), varargs...)
}

// DeletePhoneNumber mocks base method
func (m *MockChimeSDKVoiceAPI) DeletePhoneNumber(arg0 *chimesdkvoice.DeletePhoneNumberInput) (*chimesdkvoice.DeletePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhoneNumber", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeletePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePhoneNumber indicates an expected call of DeletePhoneNumber
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeletePhoneNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhoneNumber", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeletePhoneNumber), arg0)
}

// DeletePhoneNumberRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeletePhoneNumberRequest(arg0 *chimesdkvoice.DeletePhoneNumberInput) (*request.Request, *chimesdkvoice.DeletePhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeletePhoneNumberOutput)
	return ret0, ret1
}

// DeletePhoneNumberRequest indicates an expected call of DeletePhoneNumberRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeletePhoneNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhoneNumberRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeletePhoneNumberRequest), arg0)
}

// DeletePhoneNumberWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeletePhoneNumberWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeletePhoneNumberInput, arg2 ...request.Option) (*chimesdkvoice.DeletePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeletePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePhoneNumberWithContext indicates an expected call of DeletePhoneNumberWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeletePhoneNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhoneNumberWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeletePhoneNumberWithContext), varargs...)
}

// DeleteProxySession mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteProxySession(arg0 *chimesdkvoice.DeleteProxySessionInput) (*chimesdkvoice.DeleteProxySessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProxySession", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteProxySessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProxySession indicates an expected call of DeleteProxySession
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteProxySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProxySession", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteProxySession), arg0)
}

// DeleteProxySessionRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteProxySessionRequest(arg0 *chimesdkvoice.DeleteProxySessionInput) (*request.Request, *chimesdkvoice.DeleteProxySessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProxySessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteProxySessionOutput)
	return ret0, ret1
}

// DeleteProxySessionRequest indicates an expected call of DeleteProxySessionRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteProxySessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProxySessionRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteProxySessionRequest), arg0)
}

// DeleteProxySessionWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteProxySessionWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteProxySessionInput, arg2 ...request.Option) (*chimesdkvoice.DeleteProxySessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProxySessionWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteProxySessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProxySessionWithContext indicates an expected call of DeleteProxySessionWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteProxySessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProxySessionWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteProxySessionWithContext), varargs...)
}

// DeleteSipMediaApplication mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteSipMediaApplication(arg0 *chimesdkvoice.DeleteSipMediaApplicationInput) (*chimesdkvoice.DeleteSipMediaApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSipMediaApplication", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteSipMediaApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSipMediaApplication indicates an expected call of DeleteSipMediaApplication
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteSipMediaApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSipMediaApplication", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteSipMediaApplication), arg0)
}

// DeleteSipMediaApplicationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteSipMediaApplicationRequest(arg0 *chimesdkvoice.DeleteSipMediaApplicationInput) (*request.Request, *chimesdkvoice.DeleteSipMediaApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSipMediaApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteSipMediaApplicationOutput)
	return ret0, ret1
}

// DeleteSipMediaApplicationRequest indicates an expected call of DeleteSipMediaApplicationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteSipMediaApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSipMediaApplicationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteSipMediaApplicationRequest), arg0)
}

// DeleteSipMediaApplicationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteSipMediaApplicationWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteSipMediaApplicationInput, arg2 ...request.Option) (*chimesdkvoice.DeleteSipMediaApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSipMediaApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteSipMediaApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSipMediaApplicationWithContext indicates an expected call of DeleteSipMediaApplicationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteSipMediaApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSipMediaApplicationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteSipMediaApplicationWithContext), varargs...)
}

// DeleteSipRule mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteSipRule(arg0 *chimesdkvoice.DeleteSipRuleInput) (*chimesdkvoice.DeleteSipRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSipRule", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteSipRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSipRule indicates an expected call of DeleteSipRule
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteSipRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSipRule", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteSipRule), arg0)
}

// DeleteSipRuleRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteSipRuleRequest(arg0 *chimesdkvoice.DeleteSipRuleInput) (*request.Request, *chimesdkvoice.DeleteSipRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSipRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteSipRuleOutput)
	return ret0, ret1
}

// DeleteSipRuleRequest indicates an expected call of DeleteSipRuleRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteSipRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSipRuleRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteSipRuleRequest), arg0)
}

// DeleteSipRuleWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteSipRuleWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteSipRuleInput, arg2 ...request.Option) (*chimesdkvoice.DeleteSipRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSipRuleWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteSipRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSipRuleWithContext indicates an expected call of DeleteSipRuleWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteSipRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSipRuleWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteSipRuleWithContext), varargs...)
}

// DeleteVoiceConnector mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnector(arg0 *chimesdkvoice.DeleteVoiceConnectorInput) (*chimesdkvoice.DeleteVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnector", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnector indicates an expected call of DeleteVoiceConnector
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnector", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnector), arg0)
}

// DeleteVoiceConnectorEmergencyCallingConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorEmergencyCallingConfiguration(arg0 *chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationInput) (*chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorEmergencyCallingConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorEmergencyCallingConfiguration indicates an expected call of DeleteVoiceConnectorEmergencyCallingConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorEmergencyCallingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorEmergencyCallingConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorEmergencyCallingConfiguration), arg0)
}

// DeleteVoiceConnectorEmergencyCallingConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorEmergencyCallingConfigurationRequest(arg0 *chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationInput) (*request.Request, *chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorEmergencyCallingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput)
	return ret0, ret1
}

// DeleteVoiceConnectorEmergencyCallingConfigurationRequest indicates an expected call of DeleteVoiceConnectorEmergencyCallingConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorEmergencyCallingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorEmergencyCallingConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorEmergencyCallingConfigurationRequest), arg0)
}

// DeleteVoiceConnectorEmergencyCallingConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorEmergencyCallingConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorEmergencyCallingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorEmergencyCallingConfigurationWithContext indicates an expected call of DeleteVoiceConnectorEmergencyCallingConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorEmergencyCallingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorEmergencyCallingConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorEmergencyCallingConfigurationWithContext), varargs...)
}

// DeleteVoiceConnectorGroup mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorGroup(arg0 *chimesdkvoice.DeleteVoiceConnectorGroupInput) (*chimesdkvoice.DeleteVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorGroup", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorGroup indicates an expected call of DeleteVoiceConnectorGroup
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorGroup", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorGroup), arg0)
}

// DeleteVoiceConnectorGroupRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorGroupRequest(arg0 *chimesdkvoice.DeleteVoiceConnectorGroupInput) (*request.Request, *chimesdkvoice.DeleteVoiceConnectorGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteVoiceConnectorGroupOutput)
	return ret0, ret1
}

// DeleteVoiceConnectorGroupRequest indicates an expected call of DeleteVoiceConnectorGroupRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorGroupRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorGroupRequest), arg0)
}

// DeleteVoiceConnectorGroupWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorGroupWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteVoiceConnectorGroupInput, arg2 ...request.Option) (*chimesdkvoice.DeleteVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorGroupWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorGroupWithContext indicates an expected call of DeleteVoiceConnectorGroupWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorGroupWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorGroupWithContext), varargs...)
}

// DeleteVoiceConnectorOrigination mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorOrigination(arg0 *chimesdkvoice.DeleteVoiceConnectorOriginationInput) (*chimesdkvoice.DeleteVoiceConnectorOriginationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorOrigination", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorOriginationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorOrigination indicates an expected call of DeleteVoiceConnectorOrigination
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorOrigination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorOrigination", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorOrigination), arg0)
}

// DeleteVoiceConnectorOriginationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorOriginationRequest(arg0 *chimesdkvoice.DeleteVoiceConnectorOriginationInput) (*request.Request, *chimesdkvoice.DeleteVoiceConnectorOriginationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorOriginationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteVoiceConnectorOriginationOutput)
	return ret0, ret1
}

// DeleteVoiceConnectorOriginationRequest indicates an expected call of DeleteVoiceConnectorOriginationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorOriginationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorOriginationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorOriginationRequest), arg0)
}

// DeleteVoiceConnectorOriginationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorOriginationWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteVoiceConnectorOriginationInput, arg2 ...request.Option) (*chimesdkvoice.DeleteVoiceConnectorOriginationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorOriginationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorOriginationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorOriginationWithContext indicates an expected call of DeleteVoiceConnectorOriginationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorOriginationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorOriginationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorOriginationWithContext), varargs...)
}

// DeleteVoiceConnectorProxy mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorProxy(arg0 *chimesdkvoice.DeleteVoiceConnectorProxyInput) (*chimesdkvoice.DeleteVoiceConnectorProxyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorProxy", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorProxyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorProxy indicates an expected call of DeleteVoiceConnectorProxy
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorProxy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorProxy", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorProxy), arg0)
}

// DeleteVoiceConnectorProxyRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorProxyRequest(arg0 *chimesdkvoice.DeleteVoiceConnectorProxyInput) (*request.Request, *chimesdkvoice.DeleteVoiceConnectorProxyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorProxyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteVoiceConnectorProxyOutput)
	return ret0, ret1
}

// DeleteVoiceConnectorProxyRequest indicates an expected call of DeleteVoiceConnectorProxyRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorProxyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorProxyRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorProxyRequest), arg0)
}

// DeleteVoiceConnectorProxyWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorProxyWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteVoiceConnectorProxyInput, arg2 ...request.Option) (*chimesdkvoice.DeleteVoiceConnectorProxyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorProxyWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorProxyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorProxyWithContext indicates an expected call of DeleteVoiceConnectorProxyWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorProxyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorProxyWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorProxyWithContext), varargs...)
}

// DeleteVoiceConnectorRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorRequest(arg0 *chimesdkvoice.DeleteVoiceConnectorInput) (*request.Request, *chimesdkvoice.DeleteVoiceConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteVoiceConnectorOutput)
	return ret0, ret1
}

// DeleteVoiceConnectorRequest indicates an expected call of DeleteVoiceConnectorRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorRequest), arg0)
}

// DeleteVoiceConnectorStreamingConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorStreamingConfiguration(arg0 *chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationInput) (*chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorStreamingConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorStreamingConfiguration indicates an expected call of DeleteVoiceConnectorStreamingConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorStreamingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorStreamingConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorStreamingConfiguration), arg0)
}

// DeleteVoiceConnectorStreamingConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorStreamingConfigurationRequest(arg0 *chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationInput) (*request.Request, *chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorStreamingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput)
	return ret0, ret1
}

// DeleteVoiceConnectorStreamingConfigurationRequest indicates an expected call of DeleteVoiceConnectorStreamingConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorStreamingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorStreamingConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorStreamingConfigurationRequest), arg0)
}

// DeleteVoiceConnectorStreamingConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorStreamingConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorStreamingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorStreamingConfigurationWithContext indicates an expected call of DeleteVoiceConnectorStreamingConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorStreamingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorStreamingConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorStreamingConfigurationWithContext), varargs...)
}

// DeleteVoiceConnectorTermination mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorTermination(arg0 *chimesdkvoice.DeleteVoiceConnectorTerminationInput) (*chimesdkvoice.DeleteVoiceConnectorTerminationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorTermination", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorTerminationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorTermination indicates an expected call of DeleteVoiceConnectorTermination
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorTermination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorTermination", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorTermination), arg0)
}

// DeleteVoiceConnectorTerminationCredentials mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorTerminationCredentials(arg0 *chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsInput) (*chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorTerminationCredentials", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorTerminationCredentials indicates an expected call of DeleteVoiceConnectorTerminationCredentials
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorTerminationCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorTerminationCredentials", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorTerminationCredentials), arg0)
}

// DeleteVoiceConnectorTerminationCredentialsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorTerminationCredentialsRequest(arg0 *chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsInput) (*request.Request, *chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorTerminationCredentialsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput)
	return ret0, ret1
}

// DeleteVoiceConnectorTerminationCredentialsRequest indicates an expected call of DeleteVoiceConnectorTerminationCredentialsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorTerminationCredentialsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorTerminationCredentialsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorTerminationCredentialsRequest), arg0)
}

// DeleteVoiceConnectorTerminationCredentialsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorTerminationCredentialsWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsInput, arg2 ...request.Option) (*chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorTerminationCredentialsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorTerminationCredentialsWithContext indicates an expected call of DeleteVoiceConnectorTerminationCredentialsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorTerminationCredentialsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorTerminationCredentialsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorTerminationCredentialsWithContext), varargs...)
}

// DeleteVoiceConnectorTerminationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorTerminationRequest(arg0 *chimesdkvoice.DeleteVoiceConnectorTerminationInput) (*request.Request, *chimesdkvoice.DeleteVoiceConnectorTerminationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorTerminationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteVoiceConnectorTerminationOutput)
	return ret0, ret1
}

// DeleteVoiceConnectorTerminationRequest indicates an expected call of DeleteVoiceConnectorTerminationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorTerminationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorTerminationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorTerminationRequest), arg0)
}

// DeleteVoiceConnectorTerminationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorTerminationWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteVoiceConnectorTerminationInput, arg2 ...request.Option) (*chimesdkvoice.DeleteVoiceConnectorTerminationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorTerminationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorTerminationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorTerminationWithContext indicates an expected call of DeleteVoiceConnectorTerminationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorTerminationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorTerminationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorTerminationWithContext), varargs...)
}

// DeleteVoiceConnectorWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceConnectorWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteVoiceConnectorInput, arg2 ...request.Option) (*chimesdkvoice.DeleteVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceConnectorWithContext indicates an expected call of DeleteVoiceConnectorWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceConnectorWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceConnectorWithContext), varargs...)
}

// DeleteVoiceProfile mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceProfile(arg0 *chimesdkvoice.DeleteVoiceProfileInput) (*chimesdkvoice.DeleteVoiceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceProfile", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceProfile indicates an expected call of DeleteVoiceProfile
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceProfile", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceProfile), arg0)
}

// DeleteVoiceProfileDomain mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceProfileDomain(arg0 *chimesdkvoice.DeleteVoiceProfileDomainInput) (*chimesdkvoice.DeleteVoiceProfileDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceProfileDomain", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceProfileDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceProfileDomain indicates an expected call of DeleteVoiceProfileDomain
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceProfileDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceProfileDomain", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceProfileDomain), arg0)
}

// DeleteVoiceProfileDomainRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceProfileDomainRequest(arg0 *chimesdkvoice.DeleteVoiceProfileDomainInput) (*request.Request, *chimesdkvoice.DeleteVoiceProfileDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceProfileDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteVoiceProfileDomainOutput)
	return ret0, ret1
}

// DeleteVoiceProfileDomainRequest indicates an expected call of DeleteVoiceProfileDomainRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceProfileDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceProfileDomainRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceProfileDomainRequest), arg0)
}

// DeleteVoiceProfileDomainWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceProfileDomainWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteVoiceProfileDomainInput, arg2 ...request.Option) (*chimesdkvoice.DeleteVoiceProfileDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceProfileDomainWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceProfileDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceProfileDomainWithContext indicates an expected call of DeleteVoiceProfileDomainWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceProfileDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceProfileDomainWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceProfileDomainWithContext), varargs...)
}

// DeleteVoiceProfileRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceProfileRequest(arg0 *chimesdkvoice.DeleteVoiceProfileInput) (*request.Request, *chimesdkvoice.DeleteVoiceProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DeleteVoiceProfileOutput)
	return ret0, ret1
}

// DeleteVoiceProfileRequest indicates an expected call of DeleteVoiceProfileRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceProfileRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceProfileRequest), arg0)
}

// DeleteVoiceProfileWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DeleteVoiceProfileWithContext(arg0 context.Context, arg1 *chimesdkvoice.DeleteVoiceProfileInput, arg2 ...request.Option) (*chimesdkvoice.DeleteVoiceProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceProfileWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DeleteVoiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceProfileWithContext indicates an expected call of DeleteVoiceProfileWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DeleteVoiceProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceProfileWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DeleteVoiceProfileWithContext), varargs...)
}

// DisassociatePhoneNumbersFromVoiceConnector mocks base method
func (m *MockChimeSDKVoiceAPI) DisassociatePhoneNumbersFromVoiceConnector(arg0 *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorInput) (*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociatePhoneNumbersFromVoiceConnector", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociatePhoneNumbersFromVoiceConnector indicates an expected call of DisassociatePhoneNumbersFromVoiceConnector
func (mr *MockChimeSDKVoiceAPIMockRecorder) DisassociatePhoneNumbersFromVoiceConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePhoneNumbersFromVoiceConnector", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DisassociatePhoneNumbersFromVoiceConnector), arg0)
}

// DisassociatePhoneNumbersFromVoiceConnectorGroup mocks base method
func (m *MockChimeSDKVoiceAPI) DisassociatePhoneNumbersFromVoiceConnectorGroup(arg0 *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupInput) (*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociatePhoneNumbersFromVoiceConnectorGroup", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociatePhoneNumbersFromVoiceConnectorGroup indicates an expected call of DisassociatePhoneNumbersFromVoiceConnectorGroup
func (mr *MockChimeSDKVoiceAPIMockRecorder) DisassociatePhoneNumbersFromVoiceConnectorGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePhoneNumbersFromVoiceConnectorGroup", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DisassociatePhoneNumbersFromVoiceConnectorGroup), arg0)
}

// DisassociatePhoneNumbersFromVoiceConnectorGroupRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DisassociatePhoneNumbersFromVoiceConnectorGroupRequest(arg0 *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupInput) (*request.Request, *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociatePhoneNumbersFromVoiceConnectorGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput)
	return ret0, ret1
}

// DisassociatePhoneNumbersFromVoiceConnectorGroupRequest indicates an expected call of DisassociatePhoneNumbersFromVoiceConnectorGroupRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DisassociatePhoneNumbersFromVoiceConnectorGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePhoneNumbersFromVoiceConnectorGroupRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DisassociatePhoneNumbersFromVoiceConnectorGroupRequest), arg0)
}

// DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext(arg0 context.Context, arg1 *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, arg2 ...request.Option) (*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext indicates an expected call of DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DisassociatePhoneNumbersFromVoiceConnectorGroupWithContext), varargs...)
}

// DisassociatePhoneNumbersFromVoiceConnectorRequest mocks base method
func (m *MockChimeSDKVoiceAPI) DisassociatePhoneNumbersFromVoiceConnectorRequest(arg0 *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorInput) (*request.Request, *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociatePhoneNumbersFromVoiceConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput)
	return ret0, ret1
}

// DisassociatePhoneNumbersFromVoiceConnectorRequest indicates an expected call of DisassociatePhoneNumbersFromVoiceConnectorRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) DisassociatePhoneNumbersFromVoiceConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePhoneNumbersFromVoiceConnectorRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DisassociatePhoneNumbersFromVoiceConnectorRequest), arg0)
}

// DisassociatePhoneNumbersFromVoiceConnectorWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) DisassociatePhoneNumbersFromVoiceConnectorWithContext(arg0 context.Context, arg1 *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorInput, arg2 ...request.Option) (*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociatePhoneNumbersFromVoiceConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociatePhoneNumbersFromVoiceConnectorWithContext indicates an expected call of DisassociatePhoneNumbersFromVoiceConnectorWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) DisassociatePhoneNumbersFromVoiceConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePhoneNumbersFromVoiceConnectorWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).DisassociatePhoneNumbersFromVoiceConnectorWithContext), varargs...)
}

// GetGlobalSettings mocks base method
func (m *MockChimeSDKVoiceAPI) GetGlobalSettings(arg0 *chimesdkvoice.GetGlobalSettingsInput) (*chimesdkvoice.GetGlobalSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalSettings", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetGlobalSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalSettings indicates an expected call of GetGlobalSettings
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetGlobalSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalSettings", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetGlobalSettings), arg0)
}

// GetGlobalSettingsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetGlobalSettingsRequest(arg0 *chimesdkvoice.GetGlobalSettingsInput) (*request.Request, *chimesdkvoice.GetGlobalSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetGlobalSettingsOutput)
	return ret0, ret1
}

// GetGlobalSettingsRequest indicates an expected call of GetGlobalSettingsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetGlobalSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalSettingsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetGlobalSettingsRequest), arg0)
}

// GetGlobalSettingsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetGlobalSettingsWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetGlobalSettingsInput, arg2 ...request.Option) (*chimesdkvoice.GetGlobalSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGlobalSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetGlobalSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalSettingsWithContext indicates an expected call of GetGlobalSettingsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetGlobalSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalSettingsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetGlobalSettingsWithContext), varargs...)
}

// GetPhoneNumber mocks base method
func (m *MockChimeSDKVoiceAPI) GetPhoneNumber(arg0 *chimesdkvoice.GetPhoneNumberInput) (*chimesdkvoice.GetPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneNumber", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhoneNumber indicates an expected call of GetPhoneNumber
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetPhoneNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumber", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetPhoneNumber), arg0)
}

// GetPhoneNumberOrder mocks base method
func (m *MockChimeSDKVoiceAPI) GetPhoneNumberOrder(arg0 *chimesdkvoice.GetPhoneNumberOrderInput) (*chimesdkvoice.GetPhoneNumberOrderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneNumberOrder", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetPhoneNumberOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhoneNumberOrder indicates an expected call of GetPhoneNumberOrder
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetPhoneNumberOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumberOrder", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetPhoneNumberOrder), arg0)
}

// GetPhoneNumberOrderRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetPhoneNumberOrderRequest(arg0 *chimesdkvoice.GetPhoneNumberOrderInput) (*request.Request, *chimesdkvoice.GetPhoneNumberOrderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneNumberOrderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetPhoneNumberOrderOutput)
	return ret0, ret1
}

// GetPhoneNumberOrderRequest indicates an expected call of GetPhoneNumberOrderRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetPhoneNumberOrderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumberOrderRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetPhoneNumberOrderRequest), arg0)
}

// GetPhoneNumberOrderWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetPhoneNumberOrderWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetPhoneNumberOrderInput, arg2 ...request.Option) (*chimesdkvoice.GetPhoneNumberOrderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPhoneNumberOrderWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetPhoneNumberOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhoneNumberOrderWithContext indicates an expected call of GetPhoneNumberOrderWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetPhoneNumberOrderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumberOrderWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetPhoneNumberOrderWithContext), varargs...)
}

// GetPhoneNumberRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetPhoneNumberRequest(arg0 *chimesdkvoice.GetPhoneNumberInput) (*request.Request, *chimesdkvoice.GetPhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetPhoneNumberOutput)
	return ret0, ret1
}

// GetPhoneNumberRequest indicates an expected call of GetPhoneNumberRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetPhoneNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumberRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetPhoneNumberRequest), arg0)
}

// GetPhoneNumberSettings mocks base method
func (m *MockChimeSDKVoiceAPI) GetPhoneNumberSettings(arg0 *chimesdkvoice.GetPhoneNumberSettingsInput) (*chimesdkvoice.GetPhoneNumberSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneNumberSettings", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetPhoneNumberSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhoneNumberSettings indicates an expected call of GetPhoneNumberSettings
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetPhoneNumberSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumberSettings", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetPhoneNumberSettings), arg0)
}

// GetPhoneNumberSettingsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetPhoneNumberSettingsRequest(arg0 *chimesdkvoice.GetPhoneNumberSettingsInput) (*request.Request, *chimesdkvoice.GetPhoneNumberSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneNumberSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetPhoneNumberSettingsOutput)
	return ret0, ret1
}

// GetPhoneNumberSettingsRequest indicates an expected call of GetPhoneNumberSettingsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetPhoneNumberSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumberSettingsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetPhoneNumberSettingsRequest), arg0)
}

// GetPhoneNumberSettingsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetPhoneNumberSettingsWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetPhoneNumberSettingsInput, arg2 ...request.Option) (*chimesdkvoice.GetPhoneNumberSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPhoneNumberSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetPhoneNumberSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhoneNumberSettingsWithContext indicates an expected call of GetPhoneNumberSettingsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetPhoneNumberSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumberSettingsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetPhoneNumberSettingsWithContext), varargs...)
}

// GetPhoneNumberWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetPhoneNumberWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetPhoneNumberInput, arg2 ...request.Option) (*chimesdkvoice.GetPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhoneNumberWithContext indicates an expected call of GetPhoneNumberWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetPhoneNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumberWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetPhoneNumberWithContext), varargs...)
}

// GetProxySession mocks base method
func (m *MockChimeSDKVoiceAPI) GetProxySession(arg0 *chimesdkvoice.GetProxySessionInput) (*chimesdkvoice.GetProxySessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxySession", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetProxySessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxySession indicates an expected call of GetProxySession
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetProxySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxySession", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetProxySession), arg0)
}

// GetProxySessionRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetProxySessionRequest(arg0 *chimesdkvoice.GetProxySessionInput) (*request.Request, *chimesdkvoice.GetProxySessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxySessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetProxySessionOutput)
	return ret0, ret1
}

// GetProxySessionRequest indicates an expected call of GetProxySessionRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetProxySessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxySessionRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetProxySessionRequest), arg0)
}

// GetProxySessionWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetProxySessionWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetProxySessionInput, arg2 ...request.Option) (*chimesdkvoice.GetProxySessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProxySessionWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetProxySessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxySessionWithContext indicates an expected call of GetProxySessionWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetProxySessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxySessionWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetProxySessionWithContext), varargs...)
}

// GetSipMediaApplication mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipMediaApplication(arg0 *chimesdkvoice.GetSipMediaApplicationInput) (*chimesdkvoice.GetSipMediaApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSipMediaApplication", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetSipMediaApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSipMediaApplication indicates an expected call of GetSipMediaApplication
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipMediaApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipMediaApplication", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipMediaApplication), arg0)
}

// GetSipMediaApplicationAlexaSkillConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipMediaApplicationAlexaSkillConfiguration(arg0 *chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationInput) (*chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSipMediaApplicationAlexaSkillConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSipMediaApplicationAlexaSkillConfiguration indicates an expected call of GetSipMediaApplicationAlexaSkillConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipMediaApplicationAlexaSkillConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipMediaApplicationAlexaSkillConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipMediaApplicationAlexaSkillConfiguration), arg0)
}

// GetSipMediaApplicationAlexaSkillConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipMediaApplicationAlexaSkillConfigurationRequest(arg0 *chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationInput) (*request.Request, *chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSipMediaApplicationAlexaSkillConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput)
	return ret0, ret1
}

// GetSipMediaApplicationAlexaSkillConfigurationRequest indicates an expected call of GetSipMediaApplicationAlexaSkillConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipMediaApplicationAlexaSkillConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipMediaApplicationAlexaSkillConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipMediaApplicationAlexaSkillConfigurationRequest), arg0)
}

// GetSipMediaApplicationAlexaSkillConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipMediaApplicationAlexaSkillConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSipMediaApplicationAlexaSkillConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSipMediaApplicationAlexaSkillConfigurationWithContext indicates an expected call of GetSipMediaApplicationAlexaSkillConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipMediaApplicationAlexaSkillConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipMediaApplicationAlexaSkillConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipMediaApplicationAlexaSkillConfigurationWithContext), varargs...)
}

// GetSipMediaApplicationLoggingConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipMediaApplicationLoggingConfiguration(arg0 *chimesdkvoice.GetSipMediaApplicationLoggingConfigurationInput) (*chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSipMediaApplicationLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSipMediaApplicationLoggingConfiguration indicates an expected call of GetSipMediaApplicationLoggingConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipMediaApplicationLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipMediaApplicationLoggingConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipMediaApplicationLoggingConfiguration), arg0)
}

// GetSipMediaApplicationLoggingConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipMediaApplicationLoggingConfigurationRequest(arg0 *chimesdkvoice.GetSipMediaApplicationLoggingConfigurationInput) (*request.Request, *chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSipMediaApplicationLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput)
	return ret0, ret1
}

// GetSipMediaApplicationLoggingConfigurationRequest indicates an expected call of GetSipMediaApplicationLoggingConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipMediaApplicationLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipMediaApplicationLoggingConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipMediaApplicationLoggingConfigurationRequest), arg0)
}

// GetSipMediaApplicationLoggingConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipMediaApplicationLoggingConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetSipMediaApplicationLoggingConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSipMediaApplicationLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSipMediaApplicationLoggingConfigurationWithContext indicates an expected call of GetSipMediaApplicationLoggingConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipMediaApplicationLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipMediaApplicationLoggingConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipMediaApplicationLoggingConfigurationWithContext), varargs...)
}

// GetSipMediaApplicationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipMediaApplicationRequest(arg0 *chimesdkvoice.GetSipMediaApplicationInput) (*request.Request, *chimesdkvoice.GetSipMediaApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSipMediaApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetSipMediaApplicationOutput)
	return ret0, ret1
}

// GetSipMediaApplicationRequest indicates an expected call of GetSipMediaApplicationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipMediaApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipMediaApplicationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipMediaApplicationRequest), arg0)
}

// GetSipMediaApplicationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipMediaApplicationWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetSipMediaApplicationInput, arg2 ...request.Option) (*chimesdkvoice.GetSipMediaApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSipMediaApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetSipMediaApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSipMediaApplicationWithContext indicates an expected call of GetSipMediaApplicationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipMediaApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipMediaApplicationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipMediaApplicationWithContext), varargs...)
}

// GetSipRule mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipRule(arg0 *chimesdkvoice.GetSipRuleInput) (*chimesdkvoice.GetSipRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSipRule", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetSipRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSipRule indicates an expected call of GetSipRule
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipRule", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipRule), arg0)
}

// GetSipRuleRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipRuleRequest(arg0 *chimesdkvoice.GetSipRuleInput) (*request.Request, *chimesdkvoice.GetSipRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSipRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetSipRuleOutput)
	return ret0, ret1
}

// GetSipRuleRequest indicates an expected call of GetSipRuleRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipRuleRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipRuleRequest), arg0)
}

// GetSipRuleWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetSipRuleWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetSipRuleInput, arg2 ...request.Option) (*chimesdkvoice.GetSipRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSipRuleWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetSipRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSipRuleWithContext indicates an expected call of GetSipRuleWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSipRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSipRuleWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSipRuleWithContext), varargs...)
}

// GetSpeakerSearchTask mocks base method
func (m *MockChimeSDKVoiceAPI) GetSpeakerSearchTask(arg0 *chimesdkvoice.GetSpeakerSearchTaskInput) (*chimesdkvoice.GetSpeakerSearchTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpeakerSearchTask", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetSpeakerSearchTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpeakerSearchTask indicates an expected call of GetSpeakerSearchTask
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSpeakerSearchTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpeakerSearchTask", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSpeakerSearchTask), arg0)
}

// GetSpeakerSearchTaskRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetSpeakerSearchTaskRequest(arg0 *chimesdkvoice.GetSpeakerSearchTaskInput) (*request.Request, *chimesdkvoice.GetSpeakerSearchTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpeakerSearchTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetSpeakerSearchTaskOutput)
	return ret0, ret1
}

// GetSpeakerSearchTaskRequest indicates an expected call of GetSpeakerSearchTaskRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSpeakerSearchTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpeakerSearchTaskRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSpeakerSearchTaskRequest), arg0)
}

// GetSpeakerSearchTaskWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetSpeakerSearchTaskWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetSpeakerSearchTaskInput, arg2 ...request.Option) (*chimesdkvoice.GetSpeakerSearchTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpeakerSearchTaskWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetSpeakerSearchTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpeakerSearchTaskWithContext indicates an expected call of GetSpeakerSearchTaskWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetSpeakerSearchTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpeakerSearchTaskWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetSpeakerSearchTaskWithContext), varargs...)
}

// GetVoiceConnector mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnector(arg0 *chimesdkvoice.GetVoiceConnectorInput) (*chimesdkvoice.GetVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnector", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnector indicates an expected call of GetVoiceConnector
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnector", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnector), arg0)
}

// GetVoiceConnectorEmergencyCallingConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorEmergencyCallingConfiguration(arg0 *chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationInput) (*chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorEmergencyCallingConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorEmergencyCallingConfiguration indicates an expected call of GetVoiceConnectorEmergencyCallingConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorEmergencyCallingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorEmergencyCallingConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorEmergencyCallingConfiguration), arg0)
}

// GetVoiceConnectorEmergencyCallingConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorEmergencyCallingConfigurationRequest(arg0 *chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationInput) (*request.Request, *chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorEmergencyCallingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput)
	return ret0, ret1
}

// GetVoiceConnectorEmergencyCallingConfigurationRequest indicates an expected call of GetVoiceConnectorEmergencyCallingConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorEmergencyCallingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorEmergencyCallingConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorEmergencyCallingConfigurationRequest), arg0)
}

// GetVoiceConnectorEmergencyCallingConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorEmergencyCallingConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceConnectorEmergencyCallingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorEmergencyCallingConfigurationWithContext indicates an expected call of GetVoiceConnectorEmergencyCallingConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorEmergencyCallingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorEmergencyCallingConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorEmergencyCallingConfigurationWithContext), varargs...)
}

// GetVoiceConnectorGroup mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorGroup(arg0 *chimesdkvoice.GetVoiceConnectorGroupInput) (*chimesdkvoice.GetVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorGroup", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorGroup indicates an expected call of GetVoiceConnectorGroup
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorGroup", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorGroup), arg0)
}

// GetVoiceConnectorGroupRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorGroupRequest(arg0 *chimesdkvoice.GetVoiceConnectorGroupInput) (*request.Request, *chimesdkvoice.GetVoiceConnectorGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceConnectorGroupOutput)
	return ret0, ret1
}

// GetVoiceConnectorGroupRequest indicates an expected call of GetVoiceConnectorGroupRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorGroupRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorGroupRequest), arg0)
}

// GetVoiceConnectorGroupWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorGroupWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceConnectorGroupInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceConnectorGroupWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorGroupWithContext indicates an expected call of GetVoiceConnectorGroupWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorGroupWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorGroupWithContext), varargs...)
}

// GetVoiceConnectorLoggingConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorLoggingConfiguration(arg0 *chimesdkvoice.GetVoiceConnectorLoggingConfigurationInput) (*chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorLoggingConfiguration indicates an expected call of GetVoiceConnectorLoggingConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorLoggingConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorLoggingConfiguration), arg0)
}

// GetVoiceConnectorLoggingConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorLoggingConfigurationRequest(arg0 *chimesdkvoice.GetVoiceConnectorLoggingConfigurationInput) (*request.Request, *chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput)
	return ret0, ret1
}

// GetVoiceConnectorLoggingConfigurationRequest indicates an expected call of GetVoiceConnectorLoggingConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorLoggingConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorLoggingConfigurationRequest), arg0)
}

// GetVoiceConnectorLoggingConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorLoggingConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceConnectorLoggingConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceConnectorLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorLoggingConfigurationWithContext indicates an expected call of GetVoiceConnectorLoggingConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorLoggingConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorLoggingConfigurationWithContext), varargs...)
}

// GetVoiceConnectorOrigination mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorOrigination(arg0 *chimesdkvoice.GetVoiceConnectorOriginationInput) (*chimesdkvoice.GetVoiceConnectorOriginationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorOrigination", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorOriginationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorOrigination indicates an expected call of GetVoiceConnectorOrigination
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorOrigination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorOrigination", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorOrigination), arg0)
}

// GetVoiceConnectorOriginationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorOriginationRequest(arg0 *chimesdkvoice.GetVoiceConnectorOriginationInput) (*request.Request, *chimesdkvoice.GetVoiceConnectorOriginationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorOriginationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceConnectorOriginationOutput)
	return ret0, ret1
}

// GetVoiceConnectorOriginationRequest indicates an expected call of GetVoiceConnectorOriginationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorOriginationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorOriginationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorOriginationRequest), arg0)
}

// GetVoiceConnectorOriginationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorOriginationWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceConnectorOriginationInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceConnectorOriginationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceConnectorOriginationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorOriginationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorOriginationWithContext indicates an expected call of GetVoiceConnectorOriginationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorOriginationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorOriginationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorOriginationWithContext), varargs...)
}

// GetVoiceConnectorProxy mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorProxy(arg0 *chimesdkvoice.GetVoiceConnectorProxyInput) (*chimesdkvoice.GetVoiceConnectorProxyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorProxy", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorProxyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorProxy indicates an expected call of GetVoiceConnectorProxy
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorProxy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorProxy", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorProxy), arg0)
}

// GetVoiceConnectorProxyRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorProxyRequest(arg0 *chimesdkvoice.GetVoiceConnectorProxyInput) (*request.Request, *chimesdkvoice.GetVoiceConnectorProxyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorProxyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceConnectorProxyOutput)
	return ret0, ret1
}

// GetVoiceConnectorProxyRequest indicates an expected call of GetVoiceConnectorProxyRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorProxyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorProxyRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorProxyRequest), arg0)
}

// GetVoiceConnectorProxyWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorProxyWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceConnectorProxyInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceConnectorProxyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceConnectorProxyWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorProxyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorProxyWithContext indicates an expected call of GetVoiceConnectorProxyWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorProxyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorProxyWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorProxyWithContext), varargs...)
}

// GetVoiceConnectorRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorRequest(arg0 *chimesdkvoice.GetVoiceConnectorInput) (*request.Request, *chimesdkvoice.GetVoiceConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceConnectorOutput)
	return ret0, ret1
}

// GetVoiceConnectorRequest indicates an expected call of GetVoiceConnectorRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorRequest), arg0)
}

// GetVoiceConnectorStreamingConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorStreamingConfiguration(arg0 *chimesdkvoice.GetVoiceConnectorStreamingConfigurationInput) (*chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorStreamingConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorStreamingConfiguration indicates an expected call of GetVoiceConnectorStreamingConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorStreamingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorStreamingConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorStreamingConfiguration), arg0)
}

// GetVoiceConnectorStreamingConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorStreamingConfigurationRequest(arg0 *chimesdkvoice.GetVoiceConnectorStreamingConfigurationInput) (*request.Request, *chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorStreamingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput)
	return ret0, ret1
}

// GetVoiceConnectorStreamingConfigurationRequest indicates an expected call of GetVoiceConnectorStreamingConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorStreamingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorStreamingConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorStreamingConfigurationRequest), arg0)
}

// GetVoiceConnectorStreamingConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorStreamingConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceConnectorStreamingConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceConnectorStreamingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorStreamingConfigurationWithContext indicates an expected call of GetVoiceConnectorStreamingConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorStreamingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorStreamingConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorStreamingConfigurationWithContext), varargs...)
}

// GetVoiceConnectorTermination mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorTermination(arg0 *chimesdkvoice.GetVoiceConnectorTerminationInput) (*chimesdkvoice.GetVoiceConnectorTerminationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorTermination", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorTerminationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorTermination indicates an expected call of GetVoiceConnectorTermination
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorTermination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorTermination", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorTermination), arg0)
}

// GetVoiceConnectorTerminationHealth mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorTerminationHealth(arg0 *chimesdkvoice.GetVoiceConnectorTerminationHealthInput) (*chimesdkvoice.GetVoiceConnectorTerminationHealthOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorTerminationHealth", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorTerminationHealthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorTerminationHealth indicates an expected call of GetVoiceConnectorTerminationHealth
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorTerminationHealth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorTerminationHealth", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorTerminationHealth), arg0)
}

// GetVoiceConnectorTerminationHealthRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorTerminationHealthRequest(arg0 *chimesdkvoice.GetVoiceConnectorTerminationHealthInput) (*request.Request, *chimesdkvoice.GetVoiceConnectorTerminationHealthOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorTerminationHealthRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceConnectorTerminationHealthOutput)
	return ret0, ret1
}

// GetVoiceConnectorTerminationHealthRequest indicates an expected call of GetVoiceConnectorTerminationHealthRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorTerminationHealthRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorTerminationHealthRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorTerminationHealthRequest), arg0)
}

// GetVoiceConnectorTerminationHealthWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorTerminationHealthWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceConnectorTerminationHealthInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceConnectorTerminationHealthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceConnectorTerminationHealthWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorTerminationHealthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorTerminationHealthWithContext indicates an expected call of GetVoiceConnectorTerminationHealthWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorTerminationHealthWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorTerminationHealthWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorTerminationHealthWithContext), varargs...)
}

// GetVoiceConnectorTerminationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorTerminationRequest(arg0 *chimesdkvoice.GetVoiceConnectorTerminationInput) (*request.Request, *chimesdkvoice.GetVoiceConnectorTerminationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceConnectorTerminationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceConnectorTerminationOutput)
	return ret0, ret1
}

// GetVoiceConnectorTerminationRequest indicates an expected call of GetVoiceConnectorTerminationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorTerminationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorTerminationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorTerminationRequest), arg0)
}

// GetVoiceConnectorTerminationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorTerminationWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceConnectorTerminationInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceConnectorTerminationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceConnectorTerminationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorTerminationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorTerminationWithContext indicates an expected call of GetVoiceConnectorTerminationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorTerminationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorTerminationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorTerminationWithContext), varargs...)
}

// GetVoiceConnectorWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceConnectorWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceConnectorInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceConnectorWithContext indicates an expected call of GetVoiceConnectorWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceConnectorWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceConnectorWithContext), varargs...)
}

// GetVoiceProfile mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceProfile(arg0 *chimesdkvoice.GetVoiceProfileInput) (*chimesdkvoice.GetVoiceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceProfile", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceProfile indicates an expected call of GetVoiceProfile
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceProfile", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceProfile), arg0)
}

// GetVoiceProfileDomain mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceProfileDomain(arg0 *chimesdkvoice.GetVoiceProfileDomainInput) (*chimesdkvoice.GetVoiceProfileDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceProfileDomain", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceProfileDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceProfileDomain indicates an expected call of GetVoiceProfileDomain
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceProfileDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceProfileDomain", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceProfileDomain), arg0)
}

// GetVoiceProfileDomainRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceProfileDomainRequest(arg0 *chimesdkvoice.GetVoiceProfileDomainInput) (*request.Request, *chimesdkvoice.GetVoiceProfileDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceProfileDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceProfileDomainOutput)
	return ret0, ret1
}

// GetVoiceProfileDomainRequest indicates an expected call of GetVoiceProfileDomainRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceProfileDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceProfileDomainRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceProfileDomainRequest), arg0)
}

// GetVoiceProfileDomainWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceProfileDomainWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceProfileDomainInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceProfileDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceProfileDomainWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceProfileDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceProfileDomainWithContext indicates an expected call of GetVoiceProfileDomainWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceProfileDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceProfileDomainWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceProfileDomainWithContext), varargs...)
}

// GetVoiceProfileRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceProfileRequest(arg0 *chimesdkvoice.GetVoiceProfileInput) (*request.Request, *chimesdkvoice.GetVoiceProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceProfileOutput)
	return ret0, ret1
}

// GetVoiceProfileRequest indicates an expected call of GetVoiceProfileRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceProfileRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceProfileRequest), arg0)
}

// GetVoiceProfileWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceProfileWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceProfileInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceProfileWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceProfileWithContext indicates an expected call of GetVoiceProfileWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceProfileWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceProfileWithContext), varargs...)
}

// GetVoiceToneAnalysisTask mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceToneAnalysisTask(arg0 *chimesdkvoice.GetVoiceToneAnalysisTaskInput) (*chimesdkvoice.GetVoiceToneAnalysisTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceToneAnalysisTask", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceToneAnalysisTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceToneAnalysisTask indicates an expected call of GetVoiceToneAnalysisTask
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceToneAnalysisTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceToneAnalysisTask", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceToneAnalysisTask), arg0)
}

// GetVoiceToneAnalysisTaskRequest mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceToneAnalysisTaskRequest(arg0 *chimesdkvoice.GetVoiceToneAnalysisTaskInput) (*request.Request, *chimesdkvoice.GetVoiceToneAnalysisTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoiceToneAnalysisTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.GetVoiceToneAnalysisTaskOutput)
	return ret0, ret1
}

// GetVoiceToneAnalysisTaskRequest indicates an expected call of GetVoiceToneAnalysisTaskRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceToneAnalysisTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceToneAnalysisTaskRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceToneAnalysisTaskRequest), arg0)
}

// GetVoiceToneAnalysisTaskWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) GetVoiceToneAnalysisTaskWithContext(arg0 context.Context, arg1 *chimesdkvoice.GetVoiceToneAnalysisTaskInput, arg2 ...request.Option) (*chimesdkvoice.GetVoiceToneAnalysisTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVoiceToneAnalysisTaskWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.GetVoiceToneAnalysisTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoiceToneAnalysisTaskWithContext indicates an expected call of GetVoiceToneAnalysisTaskWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) GetVoiceToneAnalysisTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoiceToneAnalysisTaskWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).GetVoiceToneAnalysisTaskWithContext), varargs...)
}

// ListAvailableVoiceConnectorRegions mocks base method
func (m *MockChimeSDKVoiceAPI) ListAvailableVoiceConnectorRegions(arg0 *chimesdkvoice.ListAvailableVoiceConnectorRegionsInput) (*chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableVoiceConnectorRegions", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableVoiceConnectorRegions indicates an expected call of ListAvailableVoiceConnectorRegions
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListAvailableVoiceConnectorRegions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableVoiceConnectorRegions", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListAvailableVoiceConnectorRegions), arg0)
}

// ListAvailableVoiceConnectorRegionsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListAvailableVoiceConnectorRegionsRequest(arg0 *chimesdkvoice.ListAvailableVoiceConnectorRegionsInput) (*request.Request, *chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableVoiceConnectorRegionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput)
	return ret0, ret1
}

// ListAvailableVoiceConnectorRegionsRequest indicates an expected call of ListAvailableVoiceConnectorRegionsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListAvailableVoiceConnectorRegionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableVoiceConnectorRegionsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListAvailableVoiceConnectorRegionsRequest), arg0)
}

// ListAvailableVoiceConnectorRegionsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListAvailableVoiceConnectorRegionsWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListAvailableVoiceConnectorRegionsInput, arg2 ...request.Option) (*chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAvailableVoiceConnectorRegionsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableVoiceConnectorRegionsWithContext indicates an expected call of ListAvailableVoiceConnectorRegionsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListAvailableVoiceConnectorRegionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableVoiceConnectorRegionsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListAvailableVoiceConnectorRegionsWithContext), varargs...)
}

// ListPhoneNumberOrders mocks base method
func (m *MockChimeSDKVoiceAPI) ListPhoneNumberOrders(arg0 *chimesdkvoice.ListPhoneNumberOrdersInput) (*chimesdkvoice.ListPhoneNumberOrdersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumberOrders", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListPhoneNumberOrdersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumberOrders indicates an expected call of ListPhoneNumberOrders
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListPhoneNumberOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumberOrders", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListPhoneNumberOrders), arg0)
}

// ListPhoneNumberOrdersPages mocks base method
func (m *MockChimeSDKVoiceAPI) ListPhoneNumberOrdersPages(arg0 *chimesdkvoice.ListPhoneNumberOrdersInput, arg1 func(*chimesdkvoice.ListPhoneNumberOrdersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumberOrdersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPhoneNumberOrdersPages indicates an expected call of ListPhoneNumberOrdersPages
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListPhoneNumberOrdersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumberOrdersPages", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListPhoneNumberOrdersPages), arg0, arg1)
}

// ListPhoneNumberOrdersPagesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListPhoneNumberOrdersPagesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListPhoneNumberOrdersInput, arg2 func(*chimesdkvoice.ListPhoneNumberOrdersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumberOrdersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPhoneNumberOrdersPagesWithContext indicates an expected call of ListPhoneNumberOrdersPagesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListPhoneNumberOrdersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumberOrdersPagesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListPhoneNumberOrdersPagesWithContext), varargs...)
}

// ListPhoneNumberOrdersRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListPhoneNumberOrdersRequest(arg0 *chimesdkvoice.ListPhoneNumberOrdersInput) (*request.Request, *chimesdkvoice.ListPhoneNumberOrdersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumberOrdersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListPhoneNumberOrdersOutput)
	return ret0, ret1
}

// ListPhoneNumberOrdersRequest indicates an expected call of ListPhoneNumberOrdersRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListPhoneNumberOrdersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumberOrdersRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListPhoneNumberOrdersRequest), arg0)
}

// ListPhoneNumberOrdersWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListPhoneNumberOrdersWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListPhoneNumberOrdersInput, arg2 ...request.Option) (*chimesdkvoice.ListPhoneNumberOrdersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumberOrdersWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListPhoneNumberOrdersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumberOrdersWithContext indicates an expected call of ListPhoneNumberOrdersWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListPhoneNumberOrdersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumberOrdersWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListPhoneNumberOrdersWithContext), varargs...)
}

// ListPhoneNumbers mocks base method
func (m *MockChimeSDKVoiceAPI) ListPhoneNumbers(arg0 *chimesdkvoice.ListPhoneNumbersInput) (*chimesdkvoice.ListPhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbers", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListPhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumbers indicates an expected call of ListPhoneNumbers
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListPhoneNumbers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbers", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListPhoneNumbers), arg0)
}

// ListPhoneNumbersPages mocks base method
func (m *MockChimeSDKVoiceAPI) ListPhoneNumbersPages(arg0 *chimesdkvoice.ListPhoneNumbersInput, arg1 func(*chimesdkvoice.ListPhoneNumbersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPhoneNumbersPages indicates an expected call of ListPhoneNumbersPages
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListPhoneNumbersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersPages", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListPhoneNumbersPages), arg0, arg1)
}

// ListPhoneNumbersPagesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListPhoneNumbersPagesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListPhoneNumbersInput, arg2 func(*chimesdkvoice.ListPhoneNumbersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumbersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPhoneNumbersPagesWithContext indicates an expected call of ListPhoneNumbersPagesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListPhoneNumbersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersPagesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListPhoneNumbersPagesWithContext), varargs...)
}

// ListPhoneNumbersRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListPhoneNumbersRequest(arg0 *chimesdkvoice.ListPhoneNumbersInput) (*request.Request, *chimesdkvoice.ListPhoneNumbersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListPhoneNumbersOutput)
	return ret0, ret1
}

// ListPhoneNumbersRequest indicates an expected call of ListPhoneNumbersRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListPhoneNumbersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListPhoneNumbersRequest), arg0)
}

// ListPhoneNumbersWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListPhoneNumbersWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListPhoneNumbersInput, arg2 ...request.Option) (*chimesdkvoice.ListPhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumbersWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListPhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumbersWithContext indicates an expected call of ListPhoneNumbersWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListPhoneNumbersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListPhoneNumbersWithContext), varargs...)
}

// ListProxySessions mocks base method
func (m *MockChimeSDKVoiceAPI) ListProxySessions(arg0 *chimesdkvoice.ListProxySessionsInput) (*chimesdkvoice.ListProxySessionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProxySessions", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListProxySessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProxySessions indicates an expected call of ListProxySessions
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListProxySessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProxySessions", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListProxySessions), arg0)
}

// ListProxySessionsPages mocks base method
func (m *MockChimeSDKVoiceAPI) ListProxySessionsPages(arg0 *chimesdkvoice.ListProxySessionsInput, arg1 func(*chimesdkvoice.ListProxySessionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProxySessionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProxySessionsPages indicates an expected call of ListProxySessionsPages
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListProxySessionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProxySessionsPages", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListProxySessionsPages), arg0, arg1)
}

// ListProxySessionsPagesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListProxySessionsPagesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListProxySessionsInput, arg2 func(*chimesdkvoice.ListProxySessionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProxySessionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProxySessionsPagesWithContext indicates an expected call of ListProxySessionsPagesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListProxySessionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProxySessionsPagesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListProxySessionsPagesWithContext), varargs...)
}

// ListProxySessionsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListProxySessionsRequest(arg0 *chimesdkvoice.ListProxySessionsInput) (*request.Request, *chimesdkvoice.ListProxySessionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProxySessionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListProxySessionsOutput)
	return ret0, ret1
}

// ListProxySessionsRequest indicates an expected call of ListProxySessionsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListProxySessionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProxySessionsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListProxySessionsRequest), arg0)
}

// ListProxySessionsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListProxySessionsWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListProxySessionsInput, arg2 ...request.Option) (*chimesdkvoice.ListProxySessionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProxySessionsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListProxySessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProxySessionsWithContext indicates an expected call of ListProxySessionsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListProxySessionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProxySessionsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListProxySessionsWithContext), varargs...)
}

// ListSipMediaApplications mocks base method
func (m *MockChimeSDKVoiceAPI) ListSipMediaApplications(arg0 *chimesdkvoice.ListSipMediaApplicationsInput) (*chimesdkvoice.ListSipMediaApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSipMediaApplications", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListSipMediaApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSipMediaApplications indicates an expected call of ListSipMediaApplications
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSipMediaApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSipMediaApplications", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSipMediaApplications), arg0)
}

// ListSipMediaApplicationsPages mocks base method
func (m *MockChimeSDKVoiceAPI) ListSipMediaApplicationsPages(arg0 *chimesdkvoice.ListSipMediaApplicationsInput, arg1 func(*chimesdkvoice.ListSipMediaApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSipMediaApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSipMediaApplicationsPages indicates an expected call of ListSipMediaApplicationsPages
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSipMediaApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSipMediaApplicationsPages", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSipMediaApplicationsPages), arg0, arg1)
}

// ListSipMediaApplicationsPagesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListSipMediaApplicationsPagesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListSipMediaApplicationsInput, arg2 func(*chimesdkvoice.ListSipMediaApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSipMediaApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSipMediaApplicationsPagesWithContext indicates an expected call of ListSipMediaApplicationsPagesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSipMediaApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSipMediaApplicationsPagesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSipMediaApplicationsPagesWithContext), varargs...)
}

// ListSipMediaApplicationsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListSipMediaApplicationsRequest(arg0 *chimesdkvoice.ListSipMediaApplicationsInput) (*request.Request, *chimesdkvoice.ListSipMediaApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSipMediaApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListSipMediaApplicationsOutput)
	return ret0, ret1
}

// ListSipMediaApplicationsRequest indicates an expected call of ListSipMediaApplicationsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSipMediaApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSipMediaApplicationsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSipMediaApplicationsRequest), arg0)
}

// ListSipMediaApplicationsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListSipMediaApplicationsWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListSipMediaApplicationsInput, arg2 ...request.Option) (*chimesdkvoice.ListSipMediaApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSipMediaApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListSipMediaApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSipMediaApplicationsWithContext indicates an expected call of ListSipMediaApplicationsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSipMediaApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSipMediaApplicationsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSipMediaApplicationsWithContext), varargs...)
}

// ListSipRules mocks base method
func (m *MockChimeSDKVoiceAPI) ListSipRules(arg0 *chimesdkvoice.ListSipRulesInput) (*chimesdkvoice.ListSipRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSipRules", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListSipRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSipRules indicates an expected call of ListSipRules
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSipRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSipRules", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSipRules), arg0)
}

// ListSipRulesPages mocks base method
func (m *MockChimeSDKVoiceAPI) ListSipRulesPages(arg0 *chimesdkvoice.ListSipRulesInput, arg1 func(*chimesdkvoice.ListSipRulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSipRulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSipRulesPages indicates an expected call of ListSipRulesPages
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSipRulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSipRulesPages", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSipRulesPages), arg0, arg1)
}

// ListSipRulesPagesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListSipRulesPagesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListSipRulesInput, arg2 func(*chimesdkvoice.ListSipRulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSipRulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSipRulesPagesWithContext indicates an expected call of ListSipRulesPagesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSipRulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSipRulesPagesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSipRulesPagesWithContext), varargs...)
}

// ListSipRulesRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListSipRulesRequest(arg0 *chimesdkvoice.ListSipRulesInput) (*request.Request, *chimesdkvoice.ListSipRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSipRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListSipRulesOutput)
	return ret0, ret1
}

// ListSipRulesRequest indicates an expected call of ListSipRulesRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSipRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSipRulesRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSipRulesRequest), arg0)
}

// ListSipRulesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListSipRulesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListSipRulesInput, arg2 ...request.Option) (*chimesdkvoice.ListSipRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSipRulesWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListSipRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSipRulesWithContext indicates an expected call of ListSipRulesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSipRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSipRulesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSipRulesWithContext), varargs...)
}

// ListSupportedPhoneNumberCountries mocks base method
func (m *MockChimeSDKVoiceAPI) ListSupportedPhoneNumberCountries(arg0 *chimesdkvoice.ListSupportedPhoneNumberCountriesInput) (*chimesdkvoice.ListSupportedPhoneNumberCountriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedPhoneNumberCountries", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListSupportedPhoneNumberCountriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSupportedPhoneNumberCountries indicates an expected call of ListSupportedPhoneNumberCountries
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSupportedPhoneNumberCountries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedPhoneNumberCountries", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSupportedPhoneNumberCountries), arg0)
}

// ListSupportedPhoneNumberCountriesRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListSupportedPhoneNumberCountriesRequest(arg0 *chimesdkvoice.ListSupportedPhoneNumberCountriesInput) (*request.Request, *chimesdkvoice.ListSupportedPhoneNumberCountriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedPhoneNumberCountriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListSupportedPhoneNumberCountriesOutput)
	return ret0, ret1
}

// ListSupportedPhoneNumberCountriesRequest indicates an expected call of ListSupportedPhoneNumberCountriesRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSupportedPhoneNumberCountriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedPhoneNumberCountriesRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSupportedPhoneNumberCountriesRequest), arg0)
}

// ListSupportedPhoneNumberCountriesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListSupportedPhoneNumberCountriesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListSupportedPhoneNumberCountriesInput, arg2 ...request.Option) (*chimesdkvoice.ListSupportedPhoneNumberCountriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSupportedPhoneNumberCountriesWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListSupportedPhoneNumberCountriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSupportedPhoneNumberCountriesWithContext indicates an expected call of ListSupportedPhoneNumberCountriesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListSupportedPhoneNumberCountriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedPhoneNumberCountriesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListSupportedPhoneNumberCountriesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockChimeSDKVoiceAPI) ListTagsForResource(arg0 *chimesdkvoice.ListTagsForResourceInput) (*chimesdkvoice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListTagsForResourceRequest(arg0 *chimesdkvoice.ListTagsForResourceInput) (*request.Request, *chimesdkvoice.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListTagsForResourceInput, arg2 ...request.Option) (*chimesdkvoice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListVoiceConnectorGroups mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorGroups(arg0 *chimesdkvoice.ListVoiceConnectorGroupsInput) (*chimesdkvoice.ListVoiceConnectorGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceConnectorGroups", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListVoiceConnectorGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoiceConnectorGroups indicates an expected call of ListVoiceConnectorGroups
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorGroups", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorGroups), arg0)
}

// ListVoiceConnectorGroupsPages mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorGroupsPages(arg0 *chimesdkvoice.ListVoiceConnectorGroupsInput, arg1 func(*chimesdkvoice.ListVoiceConnectorGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceConnectorGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVoiceConnectorGroupsPages indicates an expected call of ListVoiceConnectorGroupsPages
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorGroupsPages", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorGroupsPages), arg0, arg1)
}

// ListVoiceConnectorGroupsPagesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorGroupsPagesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListVoiceConnectorGroupsInput, arg2 func(*chimesdkvoice.ListVoiceConnectorGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVoiceConnectorGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVoiceConnectorGroupsPagesWithContext indicates an expected call of ListVoiceConnectorGroupsPagesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorGroupsPagesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorGroupsPagesWithContext), varargs...)
}

// ListVoiceConnectorGroupsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorGroupsRequest(arg0 *chimesdkvoice.ListVoiceConnectorGroupsInput) (*request.Request, *chimesdkvoice.ListVoiceConnectorGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceConnectorGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListVoiceConnectorGroupsOutput)
	return ret0, ret1
}

// ListVoiceConnectorGroupsRequest indicates an expected call of ListVoiceConnectorGroupsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorGroupsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorGroupsRequest), arg0)
}

// ListVoiceConnectorGroupsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorGroupsWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListVoiceConnectorGroupsInput, arg2 ...request.Option) (*chimesdkvoice.ListVoiceConnectorGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVoiceConnectorGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListVoiceConnectorGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoiceConnectorGroupsWithContext indicates an expected call of ListVoiceConnectorGroupsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorGroupsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorGroupsWithContext), varargs...)
}

// ListVoiceConnectorTerminationCredentials mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorTerminationCredentials(arg0 *chimesdkvoice.ListVoiceConnectorTerminationCredentialsInput) (*chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceConnectorTerminationCredentials", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoiceConnectorTerminationCredentials indicates an expected call of ListVoiceConnectorTerminationCredentials
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorTerminationCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorTerminationCredentials", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorTerminationCredentials), arg0)
}

// ListVoiceConnectorTerminationCredentialsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorTerminationCredentialsRequest(arg0 *chimesdkvoice.ListVoiceConnectorTerminationCredentialsInput) (*request.Request, *chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceConnectorTerminationCredentialsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput)
	return ret0, ret1
}

// ListVoiceConnectorTerminationCredentialsRequest indicates an expected call of ListVoiceConnectorTerminationCredentialsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorTerminationCredentialsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorTerminationCredentialsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorTerminationCredentialsRequest), arg0)
}

// ListVoiceConnectorTerminationCredentialsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorTerminationCredentialsWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListVoiceConnectorTerminationCredentialsInput, arg2 ...request.Option) (*chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVoiceConnectorTerminationCredentialsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoiceConnectorTerminationCredentialsWithContext indicates an expected call of ListVoiceConnectorTerminationCredentialsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorTerminationCredentialsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorTerminationCredentialsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorTerminationCredentialsWithContext), varargs...)
}

// ListVoiceConnectors mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectors(arg0 *chimesdkvoice.ListVoiceConnectorsInput) (*chimesdkvoice.ListVoiceConnectorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceConnectors", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListVoiceConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoiceConnectors indicates an expected call of ListVoiceConnectors
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectors", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectors), arg0)
}

// ListVoiceConnectorsPages mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorsPages(arg0 *chimesdkvoice.ListVoiceConnectorsInput, arg1 func(*chimesdkvoice.ListVoiceConnectorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceConnectorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVoiceConnectorsPages indicates an expected call of ListVoiceConnectorsPages
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorsPages", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorsPages), arg0, arg1)
}

// ListVoiceConnectorsPagesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorsPagesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListVoiceConnectorsInput, arg2 func(*chimesdkvoice.ListVoiceConnectorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVoiceConnectorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVoiceConnectorsPagesWithContext indicates an expected call of ListVoiceConnectorsPagesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorsPagesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorsPagesWithContext), varargs...)
}

// ListVoiceConnectorsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorsRequest(arg0 *chimesdkvoice.ListVoiceConnectorsInput) (*request.Request, *chimesdkvoice.ListVoiceConnectorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceConnectorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListVoiceConnectorsOutput)
	return ret0, ret1
}

// ListVoiceConnectorsRequest indicates an expected call of ListVoiceConnectorsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorsRequest), arg0)
}

// ListVoiceConnectorsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceConnectorsWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListVoiceConnectorsInput, arg2 ...request.Option) (*chimesdkvoice.ListVoiceConnectorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVoiceConnectorsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListVoiceConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoiceConnectorsWithContext indicates an expected call of ListVoiceConnectorsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceConnectorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceConnectorsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceConnectorsWithContext), varargs...)
}

// ListVoiceProfileDomains mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceProfileDomains(arg0 *chimesdkvoice.ListVoiceProfileDomainsInput) (*chimesdkvoice.ListVoiceProfileDomainsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceProfileDomains", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListVoiceProfileDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoiceProfileDomains indicates an expected call of ListVoiceProfileDomains
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceProfileDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceProfileDomains", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceProfileDomains), arg0)
}

// ListVoiceProfileDomainsPages mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceProfileDomainsPages(arg0 *chimesdkvoice.ListVoiceProfileDomainsInput, arg1 func(*chimesdkvoice.ListVoiceProfileDomainsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceProfileDomainsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVoiceProfileDomainsPages indicates an expected call of ListVoiceProfileDomainsPages
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceProfileDomainsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceProfileDomainsPages", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceProfileDomainsPages), arg0, arg1)
}

// ListVoiceProfileDomainsPagesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceProfileDomainsPagesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListVoiceProfileDomainsInput, arg2 func(*chimesdkvoice.ListVoiceProfileDomainsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVoiceProfileDomainsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVoiceProfileDomainsPagesWithContext indicates an expected call of ListVoiceProfileDomainsPagesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceProfileDomainsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceProfileDomainsPagesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceProfileDomainsPagesWithContext), varargs...)
}

// ListVoiceProfileDomainsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceProfileDomainsRequest(arg0 *chimesdkvoice.ListVoiceProfileDomainsInput) (*request.Request, *chimesdkvoice.ListVoiceProfileDomainsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceProfileDomainsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListVoiceProfileDomainsOutput)
	return ret0, ret1
}

// ListVoiceProfileDomainsRequest indicates an expected call of ListVoiceProfileDomainsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceProfileDomainsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceProfileDomainsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceProfileDomainsRequest), arg0)
}

// ListVoiceProfileDomainsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceProfileDomainsWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListVoiceProfileDomainsInput, arg2 ...request.Option) (*chimesdkvoice.ListVoiceProfileDomainsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVoiceProfileDomainsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListVoiceProfileDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoiceProfileDomainsWithContext indicates an expected call of ListVoiceProfileDomainsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceProfileDomainsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceProfileDomainsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceProfileDomainsWithContext), varargs...)
}

// ListVoiceProfiles mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceProfiles(arg0 *chimesdkvoice.ListVoiceProfilesInput) (*chimesdkvoice.ListVoiceProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceProfiles", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ListVoiceProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoiceProfiles indicates an expected call of ListVoiceProfiles
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceProfiles", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceProfiles), arg0)
}

// ListVoiceProfilesPages mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceProfilesPages(arg0 *chimesdkvoice.ListVoiceProfilesInput, arg1 func(*chimesdkvoice.ListVoiceProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVoiceProfilesPages indicates an expected call of ListVoiceProfilesPages
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceProfilesPages", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceProfilesPages), arg0, arg1)
}

// ListVoiceProfilesPagesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceProfilesPagesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListVoiceProfilesInput, arg2 func(*chimesdkvoice.ListVoiceProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVoiceProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVoiceProfilesPagesWithContext indicates an expected call of ListVoiceProfilesPagesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceProfilesPagesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceProfilesPagesWithContext), varargs...)
}

// ListVoiceProfilesRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceProfilesRequest(arg0 *chimesdkvoice.ListVoiceProfilesInput) (*request.Request, *chimesdkvoice.ListVoiceProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoiceProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ListVoiceProfilesOutput)
	return ret0, ret1
}

// ListVoiceProfilesRequest indicates an expected call of ListVoiceProfilesRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceProfilesRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceProfilesRequest), arg0)
}

// ListVoiceProfilesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ListVoiceProfilesWithContext(arg0 context.Context, arg1 *chimesdkvoice.ListVoiceProfilesInput, arg2 ...request.Option) (*chimesdkvoice.ListVoiceProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVoiceProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ListVoiceProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoiceProfilesWithContext indicates an expected call of ListVoiceProfilesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ListVoiceProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoiceProfilesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ListVoiceProfilesWithContext), varargs...)
}

// PutSipMediaApplicationAlexaSkillConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) PutSipMediaApplicationAlexaSkillConfiguration(arg0 *chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationInput) (*chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSipMediaApplicationAlexaSkillConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSipMediaApplicationAlexaSkillConfiguration indicates an expected call of PutSipMediaApplicationAlexaSkillConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutSipMediaApplicationAlexaSkillConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSipMediaApplicationAlexaSkillConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutSipMediaApplicationAlexaSkillConfiguration), arg0)
}

// PutSipMediaApplicationAlexaSkillConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) PutSipMediaApplicationAlexaSkillConfigurationRequest(arg0 *chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationInput) (*request.Request, *chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSipMediaApplicationAlexaSkillConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput)
	return ret0, ret1
}

// PutSipMediaApplicationAlexaSkillConfigurationRequest indicates an expected call of PutSipMediaApplicationAlexaSkillConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutSipMediaApplicationAlexaSkillConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSipMediaApplicationAlexaSkillConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutSipMediaApplicationAlexaSkillConfigurationRequest), arg0)
}

// PutSipMediaApplicationAlexaSkillConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) PutSipMediaApplicationAlexaSkillConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSipMediaApplicationAlexaSkillConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSipMediaApplicationAlexaSkillConfigurationWithContext indicates an expected call of PutSipMediaApplicationAlexaSkillConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutSipMediaApplicationAlexaSkillConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSipMediaApplicationAlexaSkillConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutSipMediaApplicationAlexaSkillConfigurationWithContext), varargs...)
}

// PutSipMediaApplicationLoggingConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) PutSipMediaApplicationLoggingConfiguration(arg0 *chimesdkvoice.PutSipMediaApplicationLoggingConfigurationInput) (*chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSipMediaApplicationLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSipMediaApplicationLoggingConfiguration indicates an expected call of PutSipMediaApplicationLoggingConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutSipMediaApplicationLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSipMediaApplicationLoggingConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutSipMediaApplicationLoggingConfiguration), arg0)
}

// PutSipMediaApplicationLoggingConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) PutSipMediaApplicationLoggingConfigurationRequest(arg0 *chimesdkvoice.PutSipMediaApplicationLoggingConfigurationInput) (*request.Request, *chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSipMediaApplicationLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput)
	return ret0, ret1
}

// PutSipMediaApplicationLoggingConfigurationRequest indicates an expected call of PutSipMediaApplicationLoggingConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutSipMediaApplicationLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSipMediaApplicationLoggingConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutSipMediaApplicationLoggingConfigurationRequest), arg0)
}

// PutSipMediaApplicationLoggingConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) PutSipMediaApplicationLoggingConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.PutSipMediaApplicationLoggingConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSipMediaApplicationLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSipMediaApplicationLoggingConfigurationWithContext indicates an expected call of PutSipMediaApplicationLoggingConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutSipMediaApplicationLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSipMediaApplicationLoggingConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutSipMediaApplicationLoggingConfigurationWithContext), varargs...)
}

// PutVoiceConnectorEmergencyCallingConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorEmergencyCallingConfiguration(arg0 *chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationInput) (*chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorEmergencyCallingConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorEmergencyCallingConfiguration indicates an expected call of PutVoiceConnectorEmergencyCallingConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorEmergencyCallingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorEmergencyCallingConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorEmergencyCallingConfiguration), arg0)
}

// PutVoiceConnectorEmergencyCallingConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorEmergencyCallingConfigurationRequest(arg0 *chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationInput) (*request.Request, *chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorEmergencyCallingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput)
	return ret0, ret1
}

// PutVoiceConnectorEmergencyCallingConfigurationRequest indicates an expected call of PutVoiceConnectorEmergencyCallingConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorEmergencyCallingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorEmergencyCallingConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorEmergencyCallingConfigurationRequest), arg0)
}

// PutVoiceConnectorEmergencyCallingConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorEmergencyCallingConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutVoiceConnectorEmergencyCallingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorEmergencyCallingConfigurationWithContext indicates an expected call of PutVoiceConnectorEmergencyCallingConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorEmergencyCallingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorEmergencyCallingConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorEmergencyCallingConfigurationWithContext), varargs...)
}

// PutVoiceConnectorLoggingConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorLoggingConfiguration(arg0 *chimesdkvoice.PutVoiceConnectorLoggingConfigurationInput) (*chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorLoggingConfiguration indicates an expected call of PutVoiceConnectorLoggingConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorLoggingConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorLoggingConfiguration), arg0)
}

// PutVoiceConnectorLoggingConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorLoggingConfigurationRequest(arg0 *chimesdkvoice.PutVoiceConnectorLoggingConfigurationInput) (*request.Request, *chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput)
	return ret0, ret1
}

// PutVoiceConnectorLoggingConfigurationRequest indicates an expected call of PutVoiceConnectorLoggingConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorLoggingConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorLoggingConfigurationRequest), arg0)
}

// PutVoiceConnectorLoggingConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorLoggingConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.PutVoiceConnectorLoggingConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutVoiceConnectorLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorLoggingConfigurationWithContext indicates an expected call of PutVoiceConnectorLoggingConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorLoggingConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorLoggingConfigurationWithContext), varargs...)
}

// PutVoiceConnectorOrigination mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorOrigination(arg0 *chimesdkvoice.PutVoiceConnectorOriginationInput) (*chimesdkvoice.PutVoiceConnectorOriginationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorOrigination", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorOriginationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorOrigination indicates an expected call of PutVoiceConnectorOrigination
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorOrigination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorOrigination", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorOrigination), arg0)
}

// PutVoiceConnectorOriginationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorOriginationRequest(arg0 *chimesdkvoice.PutVoiceConnectorOriginationInput) (*request.Request, *chimesdkvoice.PutVoiceConnectorOriginationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorOriginationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.PutVoiceConnectorOriginationOutput)
	return ret0, ret1
}

// PutVoiceConnectorOriginationRequest indicates an expected call of PutVoiceConnectorOriginationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorOriginationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorOriginationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorOriginationRequest), arg0)
}

// PutVoiceConnectorOriginationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorOriginationWithContext(arg0 context.Context, arg1 *chimesdkvoice.PutVoiceConnectorOriginationInput, arg2 ...request.Option) (*chimesdkvoice.PutVoiceConnectorOriginationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutVoiceConnectorOriginationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorOriginationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorOriginationWithContext indicates an expected call of PutVoiceConnectorOriginationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorOriginationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorOriginationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorOriginationWithContext), varargs...)
}

// PutVoiceConnectorProxy mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorProxy(arg0 *chimesdkvoice.PutVoiceConnectorProxyInput) (*chimesdkvoice.PutVoiceConnectorProxyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorProxy", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorProxyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorProxy indicates an expected call of PutVoiceConnectorProxy
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorProxy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorProxy", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorProxy), arg0)
}

// PutVoiceConnectorProxyRequest mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorProxyRequest(arg0 *chimesdkvoice.PutVoiceConnectorProxyInput) (*request.Request, *chimesdkvoice.PutVoiceConnectorProxyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorProxyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.PutVoiceConnectorProxyOutput)
	return ret0, ret1
}

// PutVoiceConnectorProxyRequest indicates an expected call of PutVoiceConnectorProxyRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorProxyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorProxyRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorProxyRequest), arg0)
}

// PutVoiceConnectorProxyWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorProxyWithContext(arg0 context.Context, arg1 *chimesdkvoice.PutVoiceConnectorProxyInput, arg2 ...request.Option) (*chimesdkvoice.PutVoiceConnectorProxyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutVoiceConnectorProxyWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorProxyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorProxyWithContext indicates an expected call of PutVoiceConnectorProxyWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorProxyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorProxyWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorProxyWithContext), varargs...)
}

// PutVoiceConnectorStreamingConfiguration mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorStreamingConfiguration(arg0 *chimesdkvoice.PutVoiceConnectorStreamingConfigurationInput) (*chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorStreamingConfiguration", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorStreamingConfiguration indicates an expected call of PutVoiceConnectorStreamingConfiguration
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorStreamingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorStreamingConfiguration", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorStreamingConfiguration), arg0)
}

// PutVoiceConnectorStreamingConfigurationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorStreamingConfigurationRequest(arg0 *chimesdkvoice.PutVoiceConnectorStreamingConfigurationInput) (*request.Request, *chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorStreamingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput)
	return ret0, ret1
}

// PutVoiceConnectorStreamingConfigurationRequest indicates an expected call of PutVoiceConnectorStreamingConfigurationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorStreamingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorStreamingConfigurationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorStreamingConfigurationRequest), arg0)
}

// PutVoiceConnectorStreamingConfigurationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorStreamingConfigurationWithContext(arg0 context.Context, arg1 *chimesdkvoice.PutVoiceConnectorStreamingConfigurationInput, arg2 ...request.Option) (*chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutVoiceConnectorStreamingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorStreamingConfigurationWithContext indicates an expected call of PutVoiceConnectorStreamingConfigurationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorStreamingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorStreamingConfigurationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorStreamingConfigurationWithContext), varargs...)
}

// PutVoiceConnectorTermination mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorTermination(arg0 *chimesdkvoice.PutVoiceConnectorTerminationInput) (*chimesdkvoice.PutVoiceConnectorTerminationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorTermination", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorTerminationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorTermination indicates an expected call of PutVoiceConnectorTermination
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorTermination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorTermination", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorTermination), arg0)
}

// PutVoiceConnectorTerminationCredentials mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorTerminationCredentials(arg0 *chimesdkvoice.PutVoiceConnectorTerminationCredentialsInput) (*chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorTerminationCredentials", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorTerminationCredentials indicates an expected call of PutVoiceConnectorTerminationCredentials
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorTerminationCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorTerminationCredentials", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorTerminationCredentials), arg0)
}

// PutVoiceConnectorTerminationCredentialsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorTerminationCredentialsRequest(arg0 *chimesdkvoice.PutVoiceConnectorTerminationCredentialsInput) (*request.Request, *chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorTerminationCredentialsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput)
	return ret0, ret1
}

// PutVoiceConnectorTerminationCredentialsRequest indicates an expected call of PutVoiceConnectorTerminationCredentialsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorTerminationCredentialsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorTerminationCredentialsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorTerminationCredentialsRequest), arg0)
}

// PutVoiceConnectorTerminationCredentialsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorTerminationCredentialsWithContext(arg0 context.Context, arg1 *chimesdkvoice.PutVoiceConnectorTerminationCredentialsInput, arg2 ...request.Option) (*chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutVoiceConnectorTerminationCredentialsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorTerminationCredentialsWithContext indicates an expected call of PutVoiceConnectorTerminationCredentialsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorTerminationCredentialsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorTerminationCredentialsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorTerminationCredentialsWithContext), varargs...)
}

// PutVoiceConnectorTerminationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorTerminationRequest(arg0 *chimesdkvoice.PutVoiceConnectorTerminationInput) (*request.Request, *chimesdkvoice.PutVoiceConnectorTerminationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutVoiceConnectorTerminationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.PutVoiceConnectorTerminationOutput)
	return ret0, ret1
}

// PutVoiceConnectorTerminationRequest indicates an expected call of PutVoiceConnectorTerminationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorTerminationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorTerminationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorTerminationRequest), arg0)
}

// PutVoiceConnectorTerminationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) PutVoiceConnectorTerminationWithContext(arg0 context.Context, arg1 *chimesdkvoice.PutVoiceConnectorTerminationInput, arg2 ...request.Option) (*chimesdkvoice.PutVoiceConnectorTerminationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutVoiceConnectorTerminationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.PutVoiceConnectorTerminationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutVoiceConnectorTerminationWithContext indicates an expected call of PutVoiceConnectorTerminationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) PutVoiceConnectorTerminationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVoiceConnectorTerminationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).PutVoiceConnectorTerminationWithContext), varargs...)
}

// RestorePhoneNumber mocks base method
func (m *MockChimeSDKVoiceAPI) RestorePhoneNumber(arg0 *chimesdkvoice.RestorePhoneNumberInput) (*chimesdkvoice.RestorePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestorePhoneNumber", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.RestorePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestorePhoneNumber indicates an expected call of RestorePhoneNumber
func (mr *MockChimeSDKVoiceAPIMockRecorder) RestorePhoneNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePhoneNumber", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).RestorePhoneNumber), arg0)
}

// RestorePhoneNumberRequest mocks base method
func (m *MockChimeSDKVoiceAPI) RestorePhoneNumberRequest(arg0 *chimesdkvoice.RestorePhoneNumberInput) (*request.Request, *chimesdkvoice.RestorePhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestorePhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.RestorePhoneNumberOutput)
	return ret0, ret1
}

// RestorePhoneNumberRequest indicates an expected call of RestorePhoneNumberRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) RestorePhoneNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePhoneNumberRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).RestorePhoneNumberRequest), arg0)
}

// RestorePhoneNumberWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) RestorePhoneNumberWithContext(arg0 context.Context, arg1 *chimesdkvoice.RestorePhoneNumberInput, arg2 ...request.Option) (*chimesdkvoice.RestorePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestorePhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.RestorePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestorePhoneNumberWithContext indicates an expected call of RestorePhoneNumberWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) RestorePhoneNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePhoneNumberWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).RestorePhoneNumberWithContext), varargs...)
}

// SearchAvailablePhoneNumbers mocks base method
func (m *MockChimeSDKVoiceAPI) SearchAvailablePhoneNumbers(arg0 *chimesdkvoice.SearchAvailablePhoneNumbersInput) (*chimesdkvoice.SearchAvailablePhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAvailablePhoneNumbers", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.SearchAvailablePhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAvailablePhoneNumbers indicates an expected call of SearchAvailablePhoneNumbers
func (mr *MockChimeSDKVoiceAPIMockRecorder) SearchAvailablePhoneNumbers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAvailablePhoneNumbers", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).SearchAvailablePhoneNumbers), arg0)
}

// SearchAvailablePhoneNumbersPages mocks base method
func (m *MockChimeSDKVoiceAPI) SearchAvailablePhoneNumbersPages(arg0 *chimesdkvoice.SearchAvailablePhoneNumbersInput, arg1 func(*chimesdkvoice.SearchAvailablePhoneNumbersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAvailablePhoneNumbersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchAvailablePhoneNumbersPages indicates an expected call of SearchAvailablePhoneNumbersPages
func (mr *MockChimeSDKVoiceAPIMockRecorder) SearchAvailablePhoneNumbersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAvailablePhoneNumbersPages", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).SearchAvailablePhoneNumbersPages), arg0, arg1)
}

// SearchAvailablePhoneNumbersPagesWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) SearchAvailablePhoneNumbersPagesWithContext(arg0 context.Context, arg1 *chimesdkvoice.SearchAvailablePhoneNumbersInput, arg2 func(*chimesdkvoice.SearchAvailablePhoneNumbersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAvailablePhoneNumbersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchAvailablePhoneNumbersPagesWithContext indicates an expected call of SearchAvailablePhoneNumbersPagesWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) SearchAvailablePhoneNumbersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAvailablePhoneNumbersPagesWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).SearchAvailablePhoneNumbersPagesWithContext), varargs...)
}

// SearchAvailablePhoneNumbersRequest mocks base method
func (m *MockChimeSDKVoiceAPI) SearchAvailablePhoneNumbersRequest(arg0 *chimesdkvoice.SearchAvailablePhoneNumbersInput) (*request.Request, *chimesdkvoice.SearchAvailablePhoneNumbersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAvailablePhoneNumbersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.SearchAvailablePhoneNumbersOutput)
	return ret0, ret1
}

// SearchAvailablePhoneNumbersRequest indicates an expected call of SearchAvailablePhoneNumbersRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) SearchAvailablePhoneNumbersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAvailablePhoneNumbersRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).SearchAvailablePhoneNumbersRequest), arg0)
}

// SearchAvailablePhoneNumbersWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) SearchAvailablePhoneNumbersWithContext(arg0 context.Context, arg1 *chimesdkvoice.SearchAvailablePhoneNumbersInput, arg2 ...request.Option) (*chimesdkvoice.SearchAvailablePhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAvailablePhoneNumbersWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.SearchAvailablePhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAvailablePhoneNumbersWithContext indicates an expected call of SearchAvailablePhoneNumbersWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) SearchAvailablePhoneNumbersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAvailablePhoneNumbersWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).SearchAvailablePhoneNumbersWithContext), varargs...)
}

// StartSpeakerSearchTask mocks base method
func (m *MockChimeSDKVoiceAPI) StartSpeakerSearchTask(arg0 *chimesdkvoice.StartSpeakerSearchTaskInput) (*chimesdkvoice.StartSpeakerSearchTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSpeakerSearchTask", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.StartSpeakerSearchTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSpeakerSearchTask indicates an expected call of StartSpeakerSearchTask
func (mr *MockChimeSDKVoiceAPIMockRecorder) StartSpeakerSearchTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpeakerSearchTask", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StartSpeakerSearchTask), arg0)
}

// StartSpeakerSearchTaskRequest mocks base method
func (m *MockChimeSDKVoiceAPI) StartSpeakerSearchTaskRequest(arg0 *chimesdkvoice.StartSpeakerSearchTaskInput) (*request.Request, *chimesdkvoice.StartSpeakerSearchTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSpeakerSearchTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.StartSpeakerSearchTaskOutput)
	return ret0, ret1
}

// StartSpeakerSearchTaskRequest indicates an expected call of StartSpeakerSearchTaskRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) StartSpeakerSearchTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpeakerSearchTaskRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StartSpeakerSearchTaskRequest), arg0)
}

// StartSpeakerSearchTaskWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) StartSpeakerSearchTaskWithContext(arg0 context.Context, arg1 *chimesdkvoice.StartSpeakerSearchTaskInput, arg2 ...request.Option) (*chimesdkvoice.StartSpeakerSearchTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSpeakerSearchTaskWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.StartSpeakerSearchTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSpeakerSearchTaskWithContext indicates an expected call of StartSpeakerSearchTaskWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) StartSpeakerSearchTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpeakerSearchTaskWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StartSpeakerSearchTaskWithContext), varargs...)
}

// StartVoiceToneAnalysisTask mocks base method
func (m *MockChimeSDKVoiceAPI) StartVoiceToneAnalysisTask(arg0 *chimesdkvoice.StartVoiceToneAnalysisTaskInput) (*chimesdkvoice.StartVoiceToneAnalysisTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVoiceToneAnalysisTask", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.StartVoiceToneAnalysisTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartVoiceToneAnalysisTask indicates an expected call of StartVoiceToneAnalysisTask
func (mr *MockChimeSDKVoiceAPIMockRecorder) StartVoiceToneAnalysisTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVoiceToneAnalysisTask", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StartVoiceToneAnalysisTask), arg0)
}

// StartVoiceToneAnalysisTaskRequest mocks base method
func (m *MockChimeSDKVoiceAPI) StartVoiceToneAnalysisTaskRequest(arg0 *chimesdkvoice.StartVoiceToneAnalysisTaskInput) (*request.Request, *chimesdkvoice.StartVoiceToneAnalysisTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVoiceToneAnalysisTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.StartVoiceToneAnalysisTaskOutput)
	return ret0, ret1
}

// StartVoiceToneAnalysisTaskRequest indicates an expected call of StartVoiceToneAnalysisTaskRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) StartVoiceToneAnalysisTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVoiceToneAnalysisTaskRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StartVoiceToneAnalysisTaskRequest), arg0)
}

// StartVoiceToneAnalysisTaskWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) StartVoiceToneAnalysisTaskWithContext(arg0 context.Context, arg1 *chimesdkvoice.StartVoiceToneAnalysisTaskInput, arg2 ...request.Option) (*chimesdkvoice.StartVoiceToneAnalysisTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartVoiceToneAnalysisTaskWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.StartVoiceToneAnalysisTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartVoiceToneAnalysisTaskWithContext indicates an expected call of StartVoiceToneAnalysisTaskWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) StartVoiceToneAnalysisTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVoiceToneAnalysisTaskWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StartVoiceToneAnalysisTaskWithContext), varargs...)
}

// StopSpeakerSearchTask mocks base method
func (m *MockChimeSDKVoiceAPI) StopSpeakerSearchTask(arg0 *chimesdkvoice.StopSpeakerSearchTaskInput) (*chimesdkvoice.StopSpeakerSearchTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSpeakerSearchTask", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.StopSpeakerSearchTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSpeakerSearchTask indicates an expected call of StopSpeakerSearchTask
func (mr *MockChimeSDKVoiceAPIMockRecorder) StopSpeakerSearchTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSpeakerSearchTask", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StopSpeakerSearchTask), arg0)
}

// StopSpeakerSearchTaskRequest mocks base method
func (m *MockChimeSDKVoiceAPI) StopSpeakerSearchTaskRequest(arg0 *chimesdkvoice.StopSpeakerSearchTaskInput) (*request.Request, *chimesdkvoice.StopSpeakerSearchTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSpeakerSearchTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.StopSpeakerSearchTaskOutput)
	return ret0, ret1
}

// StopSpeakerSearchTaskRequest indicates an expected call of StopSpeakerSearchTaskRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) StopSpeakerSearchTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSpeakerSearchTaskRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StopSpeakerSearchTaskRequest), arg0)
}

// StopSpeakerSearchTaskWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) StopSpeakerSearchTaskWithContext(arg0 context.Context, arg1 *chimesdkvoice.StopSpeakerSearchTaskInput, arg2 ...request.Option) (*chimesdkvoice.StopSpeakerSearchTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopSpeakerSearchTaskWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.StopSpeakerSearchTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSpeakerSearchTaskWithContext indicates an expected call of StopSpeakerSearchTaskWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) StopSpeakerSearchTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSpeakerSearchTaskWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StopSpeakerSearchTaskWithContext), varargs...)
}

// StopVoiceToneAnalysisTask mocks base method
func (m *MockChimeSDKVoiceAPI) StopVoiceToneAnalysisTask(arg0 *chimesdkvoice.StopVoiceToneAnalysisTaskInput) (*chimesdkvoice.StopVoiceToneAnalysisTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVoiceToneAnalysisTask", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.StopVoiceToneAnalysisTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopVoiceToneAnalysisTask indicates an expected call of StopVoiceToneAnalysisTask
func (mr *MockChimeSDKVoiceAPIMockRecorder) StopVoiceToneAnalysisTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVoiceToneAnalysisTask", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StopVoiceToneAnalysisTask), arg0)
}

// StopVoiceToneAnalysisTaskRequest mocks base method
func (m *MockChimeSDKVoiceAPI) StopVoiceToneAnalysisTaskRequest(arg0 *chimesdkvoice.StopVoiceToneAnalysisTaskInput) (*request.Request, *chimesdkvoice.StopVoiceToneAnalysisTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVoiceToneAnalysisTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.StopVoiceToneAnalysisTaskOutput)
	return ret0, ret1
}

// StopVoiceToneAnalysisTaskRequest indicates an expected call of StopVoiceToneAnalysisTaskRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) StopVoiceToneAnalysisTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVoiceToneAnalysisTaskRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StopVoiceToneAnalysisTaskRequest), arg0)
}

// StopVoiceToneAnalysisTaskWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) StopVoiceToneAnalysisTaskWithContext(arg0 context.Context, arg1 *chimesdkvoice.StopVoiceToneAnalysisTaskInput, arg2 ...request.Option) (*chimesdkvoice.StopVoiceToneAnalysisTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopVoiceToneAnalysisTaskWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.StopVoiceToneAnalysisTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopVoiceToneAnalysisTaskWithContext indicates an expected call of StopVoiceToneAnalysisTaskWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) StopVoiceToneAnalysisTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVoiceToneAnalysisTaskWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).StopVoiceToneAnalysisTaskWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockChimeSDKVoiceAPI) TagResource(arg0 *chimesdkvoice.TagResourceInput) (*chimesdkvoice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockChimeSDKVoiceAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockChimeSDKVoiceAPI) TagResourceRequest(arg0 *chimesdkvoice.TagResourceInput) (*request.Request, *chimesdkvoice.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) TagResourceWithContext(arg0 context.Context, arg1 *chimesdkvoice.TagResourceInput, arg2 ...request.Option) (*chimesdkvoice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockChimeSDKVoiceAPI) UntagResource(arg0 *chimesdkvoice.UntagResourceInput) (*chimesdkvoice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockChimeSDKVoiceAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UntagResourceRequest(arg0 *chimesdkvoice.UntagResourceInput) (*request.Request, *chimesdkvoice.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UntagResourceWithContext(arg0 context.Context, arg1 *chimesdkvoice.UntagResourceInput, arg2 ...request.Option) (*chimesdkvoice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateGlobalSettings mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateGlobalSettings(arg0 *chimesdkvoice.UpdateGlobalSettingsInput) (*chimesdkvoice.UpdateGlobalSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalSettings", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateGlobalSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalSettings indicates an expected call of UpdateGlobalSettings
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateGlobalSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSettings", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateGlobalSettings), arg0)
}

// UpdateGlobalSettingsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateGlobalSettingsRequest(arg0 *chimesdkvoice.UpdateGlobalSettingsInput) (*request.Request, *chimesdkvoice.UpdateGlobalSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdateGlobalSettingsOutput)
	return ret0, ret1
}

// UpdateGlobalSettingsRequest indicates an expected call of UpdateGlobalSettingsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateGlobalSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSettingsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateGlobalSettingsRequest), arg0)
}

// UpdateGlobalSettingsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateGlobalSettingsWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdateGlobalSettingsInput, arg2 ...request.Option) (*chimesdkvoice.UpdateGlobalSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateGlobalSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalSettingsWithContext indicates an expected call of UpdateGlobalSettingsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateGlobalSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSettingsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateGlobalSettingsWithContext), varargs...)
}

// UpdatePhoneNumber mocks base method
func (m *MockChimeSDKVoiceAPI) UpdatePhoneNumber(arg0 *chimesdkvoice.UpdatePhoneNumberInput) (*chimesdkvoice.UpdatePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoneNumber", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdatePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhoneNumber indicates an expected call of UpdatePhoneNumber
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdatePhoneNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumber", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdatePhoneNumber), arg0)
}

// UpdatePhoneNumberRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdatePhoneNumberRequest(arg0 *chimesdkvoice.UpdatePhoneNumberInput) (*request.Request, *chimesdkvoice.UpdatePhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdatePhoneNumberOutput)
	return ret0, ret1
}

// UpdatePhoneNumberRequest indicates an expected call of UpdatePhoneNumberRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdatePhoneNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumberRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdatePhoneNumberRequest), arg0)
}

// UpdatePhoneNumberSettings mocks base method
func (m *MockChimeSDKVoiceAPI) UpdatePhoneNumberSettings(arg0 *chimesdkvoice.UpdatePhoneNumberSettingsInput) (*chimesdkvoice.UpdatePhoneNumberSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoneNumberSettings", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdatePhoneNumberSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhoneNumberSettings indicates an expected call of UpdatePhoneNumberSettings
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdatePhoneNumberSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumberSettings", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdatePhoneNumberSettings), arg0)
}

// UpdatePhoneNumberSettingsRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdatePhoneNumberSettingsRequest(arg0 *chimesdkvoice.UpdatePhoneNumberSettingsInput) (*request.Request, *chimesdkvoice.UpdatePhoneNumberSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoneNumberSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdatePhoneNumberSettingsOutput)
	return ret0, ret1
}

// UpdatePhoneNumberSettingsRequest indicates an expected call of UpdatePhoneNumberSettingsRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdatePhoneNumberSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumberSettingsRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdatePhoneNumberSettingsRequest), arg0)
}

// UpdatePhoneNumberSettingsWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdatePhoneNumberSettingsWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdatePhoneNumberSettingsInput, arg2 ...request.Option) (*chimesdkvoice.UpdatePhoneNumberSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePhoneNumberSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdatePhoneNumberSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhoneNumberSettingsWithContext indicates an expected call of UpdatePhoneNumberSettingsWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdatePhoneNumberSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumberSettingsWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdatePhoneNumberSettingsWithContext), varargs...)
}

// UpdatePhoneNumberWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdatePhoneNumberWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdatePhoneNumberInput, arg2 ...request.Option) (*chimesdkvoice.UpdatePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdatePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhoneNumberWithContext indicates an expected call of UpdatePhoneNumberWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdatePhoneNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumberWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdatePhoneNumberWithContext), varargs...)
}

// UpdateProxySession mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateProxySession(arg0 *chimesdkvoice.UpdateProxySessionInput) (*chimesdkvoice.UpdateProxySessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProxySession", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateProxySessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProxySession indicates an expected call of UpdateProxySession
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateProxySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProxySession", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateProxySession), arg0)
}

// UpdateProxySessionRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateProxySessionRequest(arg0 *chimesdkvoice.UpdateProxySessionInput) (*request.Request, *chimesdkvoice.UpdateProxySessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProxySessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdateProxySessionOutput)
	return ret0, ret1
}

// UpdateProxySessionRequest indicates an expected call of UpdateProxySessionRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateProxySessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProxySessionRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateProxySessionRequest), arg0)
}

// UpdateProxySessionWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateProxySessionWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdateProxySessionInput, arg2 ...request.Option) (*chimesdkvoice.UpdateProxySessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProxySessionWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateProxySessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProxySessionWithContext indicates an expected call of UpdateProxySessionWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateProxySessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProxySessionWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateProxySessionWithContext), varargs...)
}

// UpdateSipMediaApplication mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateSipMediaApplication(arg0 *chimesdkvoice.UpdateSipMediaApplicationInput) (*chimesdkvoice.UpdateSipMediaApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSipMediaApplication", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateSipMediaApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSipMediaApplication indicates an expected call of UpdateSipMediaApplication
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateSipMediaApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSipMediaApplication", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateSipMediaApplication), arg0)
}

// UpdateSipMediaApplicationCall mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateSipMediaApplicationCall(arg0 *chimesdkvoice.UpdateSipMediaApplicationCallInput) (*chimesdkvoice.UpdateSipMediaApplicationCallOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSipMediaApplicationCall", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateSipMediaApplicationCallOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSipMediaApplicationCall indicates an expected call of UpdateSipMediaApplicationCall
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateSipMediaApplicationCall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSipMediaApplicationCall", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateSipMediaApplicationCall), arg0)
}

// UpdateSipMediaApplicationCallRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateSipMediaApplicationCallRequest(arg0 *chimesdkvoice.UpdateSipMediaApplicationCallInput) (*request.Request, *chimesdkvoice.UpdateSipMediaApplicationCallOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSipMediaApplicationCallRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdateSipMediaApplicationCallOutput)
	return ret0, ret1
}

// UpdateSipMediaApplicationCallRequest indicates an expected call of UpdateSipMediaApplicationCallRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateSipMediaApplicationCallRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSipMediaApplicationCallRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateSipMediaApplicationCallRequest), arg0)
}

// UpdateSipMediaApplicationCallWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateSipMediaApplicationCallWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdateSipMediaApplicationCallInput, arg2 ...request.Option) (*chimesdkvoice.UpdateSipMediaApplicationCallOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSipMediaApplicationCallWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateSipMediaApplicationCallOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSipMediaApplicationCallWithContext indicates an expected call of UpdateSipMediaApplicationCallWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateSipMediaApplicationCallWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSipMediaApplicationCallWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateSipMediaApplicationCallWithContext), varargs...)
}

// UpdateSipMediaApplicationRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateSipMediaApplicationRequest(arg0 *chimesdkvoice.UpdateSipMediaApplicationInput) (*request.Request, *chimesdkvoice.UpdateSipMediaApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSipMediaApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdateSipMediaApplicationOutput)
	return ret0, ret1
}

// UpdateSipMediaApplicationRequest indicates an expected call of UpdateSipMediaApplicationRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateSipMediaApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSipMediaApplicationRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateSipMediaApplicationRequest), arg0)
}

// UpdateSipMediaApplicationWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateSipMediaApplicationWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdateSipMediaApplicationInput, arg2 ...request.Option) (*chimesdkvoice.UpdateSipMediaApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSipMediaApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateSipMediaApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSipMediaApplicationWithContext indicates an expected call of UpdateSipMediaApplicationWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateSipMediaApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSipMediaApplicationWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateSipMediaApplicationWithContext), varargs...)
}

// UpdateSipRule mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateSipRule(arg0 *chimesdkvoice.UpdateSipRuleInput) (*chimesdkvoice.UpdateSipRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSipRule", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateSipRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSipRule indicates an expected call of UpdateSipRule
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateSipRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSipRule", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateSipRule), arg0)
}

// UpdateSipRuleRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateSipRuleRequest(arg0 *chimesdkvoice.UpdateSipRuleInput) (*request.Request, *chimesdkvoice.UpdateSipRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSipRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdateSipRuleOutput)
	return ret0, ret1
}

// UpdateSipRuleRequest indicates an expected call of UpdateSipRuleRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateSipRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSipRuleRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateSipRuleRequest), arg0)
}

// UpdateSipRuleWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateSipRuleWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdateSipRuleInput, arg2 ...request.Option) (*chimesdkvoice.UpdateSipRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSipRuleWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateSipRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSipRuleWithContext indicates an expected call of UpdateSipRuleWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateSipRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSipRuleWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateSipRuleWithContext), varargs...)
}

// UpdateVoiceConnector mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceConnector(arg0 *chimesdkvoice.UpdateVoiceConnectorInput) (*chimesdkvoice.UpdateVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoiceConnector", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoiceConnector indicates an expected call of UpdateVoiceConnector
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceConnector", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceConnector), arg0)
}

// UpdateVoiceConnectorGroup mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceConnectorGroup(arg0 *chimesdkvoice.UpdateVoiceConnectorGroupInput) (*chimesdkvoice.UpdateVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoiceConnectorGroup", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoiceConnectorGroup indicates an expected call of UpdateVoiceConnectorGroup
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceConnectorGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceConnectorGroup", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceConnectorGroup), arg0)
}

// UpdateVoiceConnectorGroupRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceConnectorGroupRequest(arg0 *chimesdkvoice.UpdateVoiceConnectorGroupInput) (*request.Request, *chimesdkvoice.UpdateVoiceConnectorGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoiceConnectorGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdateVoiceConnectorGroupOutput)
	return ret0, ret1
}

// UpdateVoiceConnectorGroupRequest indicates an expected call of UpdateVoiceConnectorGroupRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceConnectorGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceConnectorGroupRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceConnectorGroupRequest), arg0)
}

// UpdateVoiceConnectorGroupWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceConnectorGroupWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdateVoiceConnectorGroupInput, arg2 ...request.Option) (*chimesdkvoice.UpdateVoiceConnectorGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVoiceConnectorGroupWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateVoiceConnectorGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoiceConnectorGroupWithContext indicates an expected call of UpdateVoiceConnectorGroupWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceConnectorGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceConnectorGroupWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceConnectorGroupWithContext), varargs...)
}

// UpdateVoiceConnectorRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceConnectorRequest(arg0 *chimesdkvoice.UpdateVoiceConnectorInput) (*request.Request, *chimesdkvoice.UpdateVoiceConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoiceConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdateVoiceConnectorOutput)
	return ret0, ret1
}

// UpdateVoiceConnectorRequest indicates an expected call of UpdateVoiceConnectorRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceConnectorRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceConnectorRequest), arg0)
}

// UpdateVoiceConnectorWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceConnectorWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdateVoiceConnectorInput, arg2 ...request.Option) (*chimesdkvoice.UpdateVoiceConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVoiceConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateVoiceConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoiceConnectorWithContext indicates an expected call of UpdateVoiceConnectorWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceConnectorWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceConnectorWithContext), varargs...)
}

// UpdateVoiceProfile mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceProfile(arg0 *chimesdkvoice.UpdateVoiceProfileInput) (*chimesdkvoice.UpdateVoiceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoiceProfile", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateVoiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoiceProfile indicates an expected call of UpdateVoiceProfile
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceProfile", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceProfile), arg0)
}

// UpdateVoiceProfileDomain mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceProfileDomain(arg0 *chimesdkvoice.UpdateVoiceProfileDomainInput) (*chimesdkvoice.UpdateVoiceProfileDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoiceProfileDomain", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateVoiceProfileDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoiceProfileDomain indicates an expected call of UpdateVoiceProfileDomain
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceProfileDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceProfileDomain", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceProfileDomain), arg0)
}

// UpdateVoiceProfileDomainRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceProfileDomainRequest(arg0 *chimesdkvoice.UpdateVoiceProfileDomainInput) (*request.Request, *chimesdkvoice.UpdateVoiceProfileDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoiceProfileDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdateVoiceProfileDomainOutput)
	return ret0, ret1
}

// UpdateVoiceProfileDomainRequest indicates an expected call of UpdateVoiceProfileDomainRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceProfileDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceProfileDomainRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceProfileDomainRequest), arg0)
}

// UpdateVoiceProfileDomainWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceProfileDomainWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdateVoiceProfileDomainInput, arg2 ...request.Option) (*chimesdkvoice.UpdateVoiceProfileDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVoiceProfileDomainWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateVoiceProfileDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoiceProfileDomainWithContext indicates an expected call of UpdateVoiceProfileDomainWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceProfileDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceProfileDomainWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceProfileDomainWithContext), varargs...)
}

// UpdateVoiceProfileRequest mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceProfileRequest(arg0 *chimesdkvoice.UpdateVoiceProfileInput) (*request.Request, *chimesdkvoice.UpdateVoiceProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoiceProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.UpdateVoiceProfileOutput)
	return ret0, ret1
}

// UpdateVoiceProfileRequest indicates an expected call of UpdateVoiceProfileRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceProfileRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceProfileRequest), arg0)
}

// UpdateVoiceProfileWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) UpdateVoiceProfileWithContext(arg0 context.Context, arg1 *chimesdkvoice.UpdateVoiceProfileInput, arg2 ...request.Option) (*chimesdkvoice.UpdateVoiceProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVoiceProfileWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.UpdateVoiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoiceProfileWithContext indicates an expected call of UpdateVoiceProfileWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) UpdateVoiceProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoiceProfileWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).UpdateVoiceProfileWithContext), varargs...)
}

// ValidateE911Address mocks base method
func (m *MockChimeSDKVoiceAPI) ValidateE911Address(arg0 *chimesdkvoice.ValidateE911AddressInput) (*chimesdkvoice.ValidateE911AddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateE911Address", arg0)
	ret0, _ := ret[0].(*chimesdkvoice.ValidateE911AddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateE911Address indicates an expected call of ValidateE911Address
func (mr *MockChimeSDKVoiceAPIMockRecorder) ValidateE911Address(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateE911Address", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ValidateE911Address), arg0)
}

// ValidateE911AddressRequest mocks base method
func (m *MockChimeSDKVoiceAPI) ValidateE911AddressRequest(arg0 *chimesdkvoice.ValidateE911AddressInput) (*request.Request, *chimesdkvoice.ValidateE911AddressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateE911AddressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkvoice.ValidateE911AddressOutput)
	return ret0, ret1
}

// ValidateE911AddressRequest indicates an expected call of ValidateE911AddressRequest
func (mr *MockChimeSDKVoiceAPIMockRecorder) ValidateE911AddressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateE911AddressRequest", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ValidateE911AddressRequest), arg0)
}

// ValidateE911AddressWithContext mocks base method
func (m *MockChimeSDKVoiceAPI) ValidateE911AddressWithContext(arg0 context.Context, arg1 *chimesdkvoice.ValidateE911AddressInput, arg2 ...request.Option) (*chimesdkvoice.ValidateE911AddressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateE911AddressWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkvoice.ValidateE911AddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateE911AddressWithContext indicates an expected call of ValidateE911AddressWithContext
func (mr *MockChimeSDKVoiceAPIMockRecorder) ValidateE911AddressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateE911AddressWithContext", reflect.TypeOf((*MockChimeSDKVoiceAPI)(nil).ValidateE911AddressWithContext), varargs...)
}
