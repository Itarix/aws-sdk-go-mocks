// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/fsx/fsxiface (interfaces: FSxAPI)

// Package fsxmock is a generated GoMock package.
package fsxmock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	fsx "github.com/aws/aws-sdk-go/service/fsx"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFSxAPI is a mock of FSxAPI interface
type MockFSxAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFSxAPIMockRecorder
}

// MockFSxAPIMockRecorder is the mock recorder for MockFSxAPI
type MockFSxAPIMockRecorder struct {
	mock *MockFSxAPI
}

// NewMockFSxAPI creates a new mock instance
func NewMockFSxAPI(ctrl *gomock.Controller) *MockFSxAPI {
	mock := &MockFSxAPI{ctrl: ctrl}
	mock.recorder = &MockFSxAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFSxAPI) EXPECT() *MockFSxAPIMockRecorder {
	return m.recorder
}

// CreateBackup mocks base method
func (m *MockFSxAPI) CreateBackup(arg0 *fsx.CreateBackupInput) (*fsx.CreateBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", arg0)
	ret0, _ := ret[0].(*fsx.CreateBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackup indicates an expected call of CreateBackup
func (mr *MockFSxAPIMockRecorder) CreateBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockFSxAPI)(nil).CreateBackup), arg0)
}

// CreateBackupRequest mocks base method
func (m *MockFSxAPI) CreateBackupRequest(arg0 *fsx.CreateBackupInput) (*request.Request, *fsx.CreateBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CreateBackupOutput)
	return ret0, ret1
}

// CreateBackupRequest indicates an expected call of CreateBackupRequest
func (mr *MockFSxAPIMockRecorder) CreateBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupRequest", reflect.TypeOf((*MockFSxAPI)(nil).CreateBackupRequest), arg0)
}

// CreateBackupWithContext mocks base method
func (m *MockFSxAPI) CreateBackupWithContext(arg0 aws.Context, arg1 *fsx.CreateBackupInput, arg2 ...request.Option) (*fsx.CreateBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackupWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupWithContext indicates an expected call of CreateBackupWithContext
func (mr *MockFSxAPIMockRecorder) CreateBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CreateBackupWithContext), varargs...)
}

// CreateFileSystem mocks base method
func (m *MockFSxAPI) CreateFileSystem(arg0 *fsx.CreateFileSystemInput) (*fsx.CreateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystem", arg0)
	ret0, _ := ret[0].(*fsx.CreateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystem indicates an expected call of CreateFileSystem
func (mr *MockFSxAPIMockRecorder) CreateFileSystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystem", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystem), arg0)
}

// CreateFileSystemFromBackup mocks base method
func (m *MockFSxAPI) CreateFileSystemFromBackup(arg0 *fsx.CreateFileSystemFromBackupInput) (*fsx.CreateFileSystemFromBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystemFromBackup", arg0)
	ret0, _ := ret[0].(*fsx.CreateFileSystemFromBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystemFromBackup indicates an expected call of CreateFileSystemFromBackup
func (mr *MockFSxAPIMockRecorder) CreateFileSystemFromBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemFromBackup", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystemFromBackup), arg0)
}

// CreateFileSystemFromBackupRequest mocks base method
func (m *MockFSxAPI) CreateFileSystemFromBackupRequest(arg0 *fsx.CreateFileSystemFromBackupInput) (*request.Request, *fsx.CreateFileSystemFromBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystemFromBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CreateFileSystemFromBackupOutput)
	return ret0, ret1
}

// CreateFileSystemFromBackupRequest indicates an expected call of CreateFileSystemFromBackupRequest
func (mr *MockFSxAPIMockRecorder) CreateFileSystemFromBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemFromBackupRequest", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystemFromBackupRequest), arg0)
}

// CreateFileSystemFromBackupWithContext mocks base method
func (m *MockFSxAPI) CreateFileSystemFromBackupWithContext(arg0 aws.Context, arg1 *fsx.CreateFileSystemFromBackupInput, arg2 ...request.Option) (*fsx.CreateFileSystemFromBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFileSystemFromBackupWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateFileSystemFromBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystemFromBackupWithContext indicates an expected call of CreateFileSystemFromBackupWithContext
func (mr *MockFSxAPIMockRecorder) CreateFileSystemFromBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemFromBackupWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystemFromBackupWithContext), varargs...)
}

// CreateFileSystemRequest mocks base method
func (m *MockFSxAPI) CreateFileSystemRequest(arg0 *fsx.CreateFileSystemInput) (*request.Request, *fsx.CreateFileSystemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CreateFileSystemOutput)
	return ret0, ret1
}

// CreateFileSystemRequest indicates an expected call of CreateFileSystemRequest
func (mr *MockFSxAPIMockRecorder) CreateFileSystemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemRequest", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystemRequest), arg0)
}

// CreateFileSystemWithContext mocks base method
func (m *MockFSxAPI) CreateFileSystemWithContext(arg0 aws.Context, arg1 *fsx.CreateFileSystemInput, arg2 ...request.Option) (*fsx.CreateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystemWithContext indicates an expected call of CreateFileSystemWithContext
func (mr *MockFSxAPIMockRecorder) CreateFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystemWithContext), varargs...)
}

// DeleteBackup mocks base method
func (m *MockFSxAPI) DeleteBackup(arg0 *fsx.DeleteBackupInput) (*fsx.DeleteBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", arg0)
	ret0, _ := ret[0].(*fsx.DeleteBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackup indicates an expected call of DeleteBackup
func (mr *MockFSxAPIMockRecorder) DeleteBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockFSxAPI)(nil).DeleteBackup), arg0)
}

// DeleteBackupRequest mocks base method
func (m *MockFSxAPI) DeleteBackupRequest(arg0 *fsx.DeleteBackupInput) (*request.Request, *fsx.DeleteBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DeleteBackupOutput)
	return ret0, ret1
}

// DeleteBackupRequest indicates an expected call of DeleteBackupRequest
func (mr *MockFSxAPIMockRecorder) DeleteBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupRequest", reflect.TypeOf((*MockFSxAPI)(nil).DeleteBackupRequest), arg0)
}

// DeleteBackupWithContext mocks base method
func (m *MockFSxAPI) DeleteBackupWithContext(arg0 aws.Context, arg1 *fsx.DeleteBackupInput, arg2 ...request.Option) (*fsx.DeleteBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DeleteBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupWithContext indicates an expected call of DeleteBackupWithContext
func (mr *MockFSxAPIMockRecorder) DeleteBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DeleteBackupWithContext), varargs...)
}

// DeleteFileSystem mocks base method
func (m *MockFSxAPI) DeleteFileSystem(arg0 *fsx.DeleteFileSystemInput) (*fsx.DeleteFileSystemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystem", arg0)
	ret0, _ := ret[0].(*fsx.DeleteFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileSystem indicates an expected call of DeleteFileSystem
func (mr *MockFSxAPIMockRecorder) DeleteFileSystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystem", reflect.TypeOf((*MockFSxAPI)(nil).DeleteFileSystem), arg0)
}

// DeleteFileSystemRequest mocks base method
func (m *MockFSxAPI) DeleteFileSystemRequest(arg0 *fsx.DeleteFileSystemInput) (*request.Request, *fsx.DeleteFileSystemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DeleteFileSystemOutput)
	return ret0, ret1
}

// DeleteFileSystemRequest indicates an expected call of DeleteFileSystemRequest
func (mr *MockFSxAPIMockRecorder) DeleteFileSystemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystemRequest", reflect.TypeOf((*MockFSxAPI)(nil).DeleteFileSystemRequest), arg0)
}

// DeleteFileSystemWithContext mocks base method
func (m *MockFSxAPI) DeleteFileSystemWithContext(arg0 aws.Context, arg1 *fsx.DeleteFileSystemInput, arg2 ...request.Option) (*fsx.DeleteFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DeleteFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileSystemWithContext indicates an expected call of DeleteFileSystemWithContext
func (mr *MockFSxAPIMockRecorder) DeleteFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystemWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DeleteFileSystemWithContext), varargs...)
}

// DescribeBackups mocks base method
func (m *MockFSxAPI) DescribeBackups(arg0 *fsx.DescribeBackupsInput) (*fsx.DescribeBackupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackups", arg0)
	ret0, _ := ret[0].(*fsx.DescribeBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackups indicates an expected call of DescribeBackups
func (mr *MockFSxAPIMockRecorder) DescribeBackups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackups", reflect.TypeOf((*MockFSxAPI)(nil).DescribeBackups), arg0)
}

// DescribeBackupsPages mocks base method
func (m *MockFSxAPI) DescribeBackupsPages(arg0 *fsx.DescribeBackupsInput, arg1 func(*fsx.DescribeBackupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeBackupsPages indicates an expected call of DescribeBackupsPages
func (mr *MockFSxAPIMockRecorder) DescribeBackupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupsPages", reflect.TypeOf((*MockFSxAPI)(nil).DescribeBackupsPages), arg0, arg1)
}

// DescribeBackupsPagesWithContext mocks base method
func (m *MockFSxAPI) DescribeBackupsPagesWithContext(arg0 aws.Context, arg1 *fsx.DescribeBackupsInput, arg2 func(*fsx.DescribeBackupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBackupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeBackupsPagesWithContext indicates an expected call of DescribeBackupsPagesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeBackupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupsPagesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeBackupsPagesWithContext), varargs...)
}

// DescribeBackupsRequest mocks base method
func (m *MockFSxAPI) DescribeBackupsRequest(arg0 *fsx.DescribeBackupsInput) (*request.Request, *fsx.DescribeBackupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DescribeBackupsOutput)
	return ret0, ret1
}

// DescribeBackupsRequest indicates an expected call of DescribeBackupsRequest
func (mr *MockFSxAPIMockRecorder) DescribeBackupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupsRequest", reflect.TypeOf((*MockFSxAPI)(nil).DescribeBackupsRequest), arg0)
}

// DescribeBackupsWithContext mocks base method
func (m *MockFSxAPI) DescribeBackupsWithContext(arg0 aws.Context, arg1 *fsx.DescribeBackupsInput, arg2 ...request.Option) (*fsx.DescribeBackupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBackupsWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackupsWithContext indicates an expected call of DescribeBackupsWithContext
func (mr *MockFSxAPIMockRecorder) DescribeBackupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupsWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeBackupsWithContext), varargs...)
}

// DescribeFileSystems mocks base method
func (m *MockFSxAPI) DescribeFileSystems(arg0 *fsx.DescribeFileSystemsInput) (*fsx.DescribeFileSystemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystems", arg0)
	ret0, _ := ret[0].(*fsx.DescribeFileSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystems indicates an expected call of DescribeFileSystems
func (mr *MockFSxAPIMockRecorder) DescribeFileSystems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystems", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystems), arg0)
}

// DescribeFileSystemsPages mocks base method
func (m *MockFSxAPI) DescribeFileSystemsPages(arg0 *fsx.DescribeFileSystemsInput, arg1 func(*fsx.DescribeFileSystemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeFileSystemsPages indicates an expected call of DescribeFileSystemsPages
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsPages", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemsPages), arg0, arg1)
}

// DescribeFileSystemsPagesWithContext mocks base method
func (m *MockFSxAPI) DescribeFileSystemsPagesWithContext(arg0 aws.Context, arg1 *fsx.DescribeFileSystemsInput, arg2 func(*fsx.DescribeFileSystemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeFileSystemsPagesWithContext indicates an expected call of DescribeFileSystemsPagesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsPagesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemsPagesWithContext), varargs...)
}

// DescribeFileSystemsRequest mocks base method
func (m *MockFSxAPI) DescribeFileSystemsRequest(arg0 *fsx.DescribeFileSystemsInput) (*request.Request, *fsx.DescribeFileSystemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DescribeFileSystemsOutput)
	return ret0, ret1
}

// DescribeFileSystemsRequest indicates an expected call of DescribeFileSystemsRequest
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsRequest", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemsRequest), arg0)
}

// DescribeFileSystemsWithContext mocks base method
func (m *MockFSxAPI) DescribeFileSystemsWithContext(arg0 aws.Context, arg1 *fsx.DescribeFileSystemsInput, arg2 ...request.Option) (*fsx.DescribeFileSystemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystemsWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeFileSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystemsWithContext indicates an expected call of DescribeFileSystemsWithContext
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockFSxAPI) ListTagsForResource(arg0 *fsx.ListTagsForResourceInput) (*fsx.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*fsx.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockFSxAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockFSxAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockFSxAPI) ListTagsForResourceRequest(arg0 *fsx.ListTagsForResourceInput) (*request.Request, *fsx.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockFSxAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockFSxAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockFSxAPI) ListTagsForResourceWithContext(arg0 aws.Context, arg1 *fsx.ListTagsForResourceInput, arg2 ...request.Option) (*fsx.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockFSxAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockFSxAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockFSxAPI) TagResource(arg0 *fsx.TagResourceInput) (*fsx.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*fsx.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockFSxAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockFSxAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockFSxAPI) TagResourceRequest(arg0 *fsx.TagResourceInput) (*request.Request, *fsx.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockFSxAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockFSxAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockFSxAPI) TagResourceWithContext(arg0 aws.Context, arg1 *fsx.TagResourceInput, arg2 ...request.Option) (*fsx.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockFSxAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockFSxAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockFSxAPI) UntagResource(arg0 *fsx.UntagResourceInput) (*fsx.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*fsx.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockFSxAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockFSxAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockFSxAPI) UntagResourceRequest(arg0 *fsx.UntagResourceInput) (*request.Request, *fsx.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockFSxAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockFSxAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockFSxAPI) UntagResourceWithContext(arg0 aws.Context, arg1 *fsx.UntagResourceInput, arg2 ...request.Option) (*fsx.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockFSxAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockFSxAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateFileSystem mocks base method
func (m *MockFSxAPI) UpdateFileSystem(arg0 *fsx.UpdateFileSystemInput) (*fsx.UpdateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSystem", arg0)
	ret0, _ := ret[0].(*fsx.UpdateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileSystem indicates an expected call of UpdateFileSystem
func (mr *MockFSxAPIMockRecorder) UpdateFileSystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystem", reflect.TypeOf((*MockFSxAPI)(nil).UpdateFileSystem), arg0)
}

// UpdateFileSystemRequest mocks base method
func (m *MockFSxAPI) UpdateFileSystemRequest(arg0 *fsx.UpdateFileSystemInput) (*request.Request, *fsx.UpdateFileSystemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSystemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.UpdateFileSystemOutput)
	return ret0, ret1
}

// UpdateFileSystemRequest indicates an expected call of UpdateFileSystemRequest
func (mr *MockFSxAPIMockRecorder) UpdateFileSystemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystemRequest", reflect.TypeOf((*MockFSxAPI)(nil).UpdateFileSystemRequest), arg0)
}

// UpdateFileSystemWithContext mocks base method
func (m *MockFSxAPI) UpdateFileSystemWithContext(arg0 aws.Context, arg1 *fsx.UpdateFileSystemInput, arg2 ...request.Option) (*fsx.UpdateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.UpdateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileSystemWithContext indicates an expected call of UpdateFileSystemWithContext
func (mr *MockFSxAPIMockRecorder) UpdateFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystemWithContext", reflect.TypeOf((*MockFSxAPI)(nil).UpdateFileSystemWithContext), varargs...)
}
