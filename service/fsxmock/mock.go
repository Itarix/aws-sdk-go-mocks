// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/fsx/fsxiface (interfaces: FSxAPI)

// Package fsxmock is a generated GoMock package.
package fsxmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	fsx "github.com/aws/aws-sdk-go/service/fsx"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFSxAPI is a mock of FSxAPI interface
type MockFSxAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFSxAPIMockRecorder
}

// MockFSxAPIMockRecorder is the mock recorder for MockFSxAPI
type MockFSxAPIMockRecorder struct {
	mock *MockFSxAPI
}

// NewMockFSxAPI creates a new mock instance
func NewMockFSxAPI(ctrl *gomock.Controller) *MockFSxAPI {
	mock := &MockFSxAPI{ctrl: ctrl}
	mock.recorder = &MockFSxAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFSxAPI) EXPECT() *MockFSxAPIMockRecorder {
	return m.recorder
}

// AssociateFileSystemAliases mocks base method
func (m *MockFSxAPI) AssociateFileSystemAliases(arg0 *fsx.AssociateFileSystemAliasesInput) (*fsx.AssociateFileSystemAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateFileSystemAliases", arg0)
	ret0, _ := ret[0].(*fsx.AssociateFileSystemAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateFileSystemAliases indicates an expected call of AssociateFileSystemAliases
func (mr *MockFSxAPIMockRecorder) AssociateFileSystemAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateFileSystemAliases", reflect.TypeOf((*MockFSxAPI)(nil).AssociateFileSystemAliases), arg0)
}

// AssociateFileSystemAliasesRequest mocks base method
func (m *MockFSxAPI) AssociateFileSystemAliasesRequest(arg0 *fsx.AssociateFileSystemAliasesInput) (*request.Request, *fsx.AssociateFileSystemAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateFileSystemAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.AssociateFileSystemAliasesOutput)
	return ret0, ret1
}

// AssociateFileSystemAliasesRequest indicates an expected call of AssociateFileSystemAliasesRequest
func (mr *MockFSxAPIMockRecorder) AssociateFileSystemAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateFileSystemAliasesRequest", reflect.TypeOf((*MockFSxAPI)(nil).AssociateFileSystemAliasesRequest), arg0)
}

// AssociateFileSystemAliasesWithContext mocks base method
func (m *MockFSxAPI) AssociateFileSystemAliasesWithContext(arg0 context.Context, arg1 *fsx.AssociateFileSystemAliasesInput, arg2 ...request.Option) (*fsx.AssociateFileSystemAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateFileSystemAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.AssociateFileSystemAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateFileSystemAliasesWithContext indicates an expected call of AssociateFileSystemAliasesWithContext
func (mr *MockFSxAPIMockRecorder) AssociateFileSystemAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateFileSystemAliasesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).AssociateFileSystemAliasesWithContext), varargs...)
}

// CancelDataRepositoryTask mocks base method
func (m *MockFSxAPI) CancelDataRepositoryTask(arg0 *fsx.CancelDataRepositoryTaskInput) (*fsx.CancelDataRepositoryTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDataRepositoryTask", arg0)
	ret0, _ := ret[0].(*fsx.CancelDataRepositoryTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelDataRepositoryTask indicates an expected call of CancelDataRepositoryTask
func (mr *MockFSxAPIMockRecorder) CancelDataRepositoryTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDataRepositoryTask", reflect.TypeOf((*MockFSxAPI)(nil).CancelDataRepositoryTask), arg0)
}

// CancelDataRepositoryTaskRequest mocks base method
func (m *MockFSxAPI) CancelDataRepositoryTaskRequest(arg0 *fsx.CancelDataRepositoryTaskInput) (*request.Request, *fsx.CancelDataRepositoryTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDataRepositoryTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CancelDataRepositoryTaskOutput)
	return ret0, ret1
}

// CancelDataRepositoryTaskRequest indicates an expected call of CancelDataRepositoryTaskRequest
func (mr *MockFSxAPIMockRecorder) CancelDataRepositoryTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDataRepositoryTaskRequest", reflect.TypeOf((*MockFSxAPI)(nil).CancelDataRepositoryTaskRequest), arg0)
}

// CancelDataRepositoryTaskWithContext mocks base method
func (m *MockFSxAPI) CancelDataRepositoryTaskWithContext(arg0 context.Context, arg1 *fsx.CancelDataRepositoryTaskInput, arg2 ...request.Option) (*fsx.CancelDataRepositoryTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelDataRepositoryTaskWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CancelDataRepositoryTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelDataRepositoryTaskWithContext indicates an expected call of CancelDataRepositoryTaskWithContext
func (mr *MockFSxAPIMockRecorder) CancelDataRepositoryTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDataRepositoryTaskWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CancelDataRepositoryTaskWithContext), varargs...)
}

// CopyBackup mocks base method
func (m *MockFSxAPI) CopyBackup(arg0 *fsx.CopyBackupInput) (*fsx.CopyBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyBackup", arg0)
	ret0, _ := ret[0].(*fsx.CopyBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyBackup indicates an expected call of CopyBackup
func (mr *MockFSxAPIMockRecorder) CopyBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyBackup", reflect.TypeOf((*MockFSxAPI)(nil).CopyBackup), arg0)
}

// CopyBackupRequest mocks base method
func (m *MockFSxAPI) CopyBackupRequest(arg0 *fsx.CopyBackupInput) (*request.Request, *fsx.CopyBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CopyBackupOutput)
	return ret0, ret1
}

// CopyBackupRequest indicates an expected call of CopyBackupRequest
func (mr *MockFSxAPIMockRecorder) CopyBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyBackupRequest", reflect.TypeOf((*MockFSxAPI)(nil).CopyBackupRequest), arg0)
}

// CopyBackupWithContext mocks base method
func (m *MockFSxAPI) CopyBackupWithContext(arg0 context.Context, arg1 *fsx.CopyBackupInput, arg2 ...request.Option) (*fsx.CopyBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyBackupWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CopyBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyBackupWithContext indicates an expected call of CopyBackupWithContext
func (mr *MockFSxAPIMockRecorder) CopyBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyBackupWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CopyBackupWithContext), varargs...)
}

// CreateBackup mocks base method
func (m *MockFSxAPI) CreateBackup(arg0 *fsx.CreateBackupInput) (*fsx.CreateBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", arg0)
	ret0, _ := ret[0].(*fsx.CreateBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackup indicates an expected call of CreateBackup
func (mr *MockFSxAPIMockRecorder) CreateBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockFSxAPI)(nil).CreateBackup), arg0)
}

// CreateBackupRequest mocks base method
func (m *MockFSxAPI) CreateBackupRequest(arg0 *fsx.CreateBackupInput) (*request.Request, *fsx.CreateBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CreateBackupOutput)
	return ret0, ret1
}

// CreateBackupRequest indicates an expected call of CreateBackupRequest
func (mr *MockFSxAPIMockRecorder) CreateBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupRequest", reflect.TypeOf((*MockFSxAPI)(nil).CreateBackupRequest), arg0)
}

// CreateBackupWithContext mocks base method
func (m *MockFSxAPI) CreateBackupWithContext(arg0 context.Context, arg1 *fsx.CreateBackupInput, arg2 ...request.Option) (*fsx.CreateBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackupWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupWithContext indicates an expected call of CreateBackupWithContext
func (mr *MockFSxAPIMockRecorder) CreateBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CreateBackupWithContext), varargs...)
}

// CreateDataRepositoryTask mocks base method
func (m *MockFSxAPI) CreateDataRepositoryTask(arg0 *fsx.CreateDataRepositoryTaskInput) (*fsx.CreateDataRepositoryTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataRepositoryTask", arg0)
	ret0, _ := ret[0].(*fsx.CreateDataRepositoryTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataRepositoryTask indicates an expected call of CreateDataRepositoryTask
func (mr *MockFSxAPIMockRecorder) CreateDataRepositoryTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataRepositoryTask", reflect.TypeOf((*MockFSxAPI)(nil).CreateDataRepositoryTask), arg0)
}

// CreateDataRepositoryTaskRequest mocks base method
func (m *MockFSxAPI) CreateDataRepositoryTaskRequest(arg0 *fsx.CreateDataRepositoryTaskInput) (*request.Request, *fsx.CreateDataRepositoryTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataRepositoryTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CreateDataRepositoryTaskOutput)
	return ret0, ret1
}

// CreateDataRepositoryTaskRequest indicates an expected call of CreateDataRepositoryTaskRequest
func (mr *MockFSxAPIMockRecorder) CreateDataRepositoryTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataRepositoryTaskRequest", reflect.TypeOf((*MockFSxAPI)(nil).CreateDataRepositoryTaskRequest), arg0)
}

// CreateDataRepositoryTaskWithContext mocks base method
func (m *MockFSxAPI) CreateDataRepositoryTaskWithContext(arg0 context.Context, arg1 *fsx.CreateDataRepositoryTaskInput, arg2 ...request.Option) (*fsx.CreateDataRepositoryTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataRepositoryTaskWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateDataRepositoryTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataRepositoryTaskWithContext indicates an expected call of CreateDataRepositoryTaskWithContext
func (mr *MockFSxAPIMockRecorder) CreateDataRepositoryTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataRepositoryTaskWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CreateDataRepositoryTaskWithContext), varargs...)
}

// CreateFileSystem mocks base method
func (m *MockFSxAPI) CreateFileSystem(arg0 *fsx.CreateFileSystemInput) (*fsx.CreateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystem", arg0)
	ret0, _ := ret[0].(*fsx.CreateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystem indicates an expected call of CreateFileSystem
func (mr *MockFSxAPIMockRecorder) CreateFileSystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystem", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystem), arg0)
}

// CreateFileSystemFromBackup mocks base method
func (m *MockFSxAPI) CreateFileSystemFromBackup(arg0 *fsx.CreateFileSystemFromBackupInput) (*fsx.CreateFileSystemFromBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystemFromBackup", arg0)
	ret0, _ := ret[0].(*fsx.CreateFileSystemFromBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystemFromBackup indicates an expected call of CreateFileSystemFromBackup
func (mr *MockFSxAPIMockRecorder) CreateFileSystemFromBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemFromBackup", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystemFromBackup), arg0)
}

// CreateFileSystemFromBackupRequest mocks base method
func (m *MockFSxAPI) CreateFileSystemFromBackupRequest(arg0 *fsx.CreateFileSystemFromBackupInput) (*request.Request, *fsx.CreateFileSystemFromBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystemFromBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CreateFileSystemFromBackupOutput)
	return ret0, ret1
}

// CreateFileSystemFromBackupRequest indicates an expected call of CreateFileSystemFromBackupRequest
func (mr *MockFSxAPIMockRecorder) CreateFileSystemFromBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemFromBackupRequest", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystemFromBackupRequest), arg0)
}

// CreateFileSystemFromBackupWithContext mocks base method
func (m *MockFSxAPI) CreateFileSystemFromBackupWithContext(arg0 context.Context, arg1 *fsx.CreateFileSystemFromBackupInput, arg2 ...request.Option) (*fsx.CreateFileSystemFromBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFileSystemFromBackupWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateFileSystemFromBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystemFromBackupWithContext indicates an expected call of CreateFileSystemFromBackupWithContext
func (mr *MockFSxAPIMockRecorder) CreateFileSystemFromBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemFromBackupWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystemFromBackupWithContext), varargs...)
}

// CreateFileSystemRequest mocks base method
func (m *MockFSxAPI) CreateFileSystemRequest(arg0 *fsx.CreateFileSystemInput) (*request.Request, *fsx.CreateFileSystemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CreateFileSystemOutput)
	return ret0, ret1
}

// CreateFileSystemRequest indicates an expected call of CreateFileSystemRequest
func (mr *MockFSxAPIMockRecorder) CreateFileSystemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemRequest", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystemRequest), arg0)
}

// CreateFileSystemWithContext mocks base method
func (m *MockFSxAPI) CreateFileSystemWithContext(arg0 context.Context, arg1 *fsx.CreateFileSystemInput, arg2 ...request.Option) (*fsx.CreateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystemWithContext indicates an expected call of CreateFileSystemWithContext
func (mr *MockFSxAPIMockRecorder) CreateFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CreateFileSystemWithContext), varargs...)
}

// CreateStorageVirtualMachine mocks base method
func (m *MockFSxAPI) CreateStorageVirtualMachine(arg0 *fsx.CreateStorageVirtualMachineInput) (*fsx.CreateStorageVirtualMachineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorageVirtualMachine", arg0)
	ret0, _ := ret[0].(*fsx.CreateStorageVirtualMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorageVirtualMachine indicates an expected call of CreateStorageVirtualMachine
func (mr *MockFSxAPIMockRecorder) CreateStorageVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageVirtualMachine", reflect.TypeOf((*MockFSxAPI)(nil).CreateStorageVirtualMachine), arg0)
}

// CreateStorageVirtualMachineRequest mocks base method
func (m *MockFSxAPI) CreateStorageVirtualMachineRequest(arg0 *fsx.CreateStorageVirtualMachineInput) (*request.Request, *fsx.CreateStorageVirtualMachineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorageVirtualMachineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CreateStorageVirtualMachineOutput)
	return ret0, ret1
}

// CreateStorageVirtualMachineRequest indicates an expected call of CreateStorageVirtualMachineRequest
func (mr *MockFSxAPIMockRecorder) CreateStorageVirtualMachineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageVirtualMachineRequest", reflect.TypeOf((*MockFSxAPI)(nil).CreateStorageVirtualMachineRequest), arg0)
}

// CreateStorageVirtualMachineWithContext mocks base method
func (m *MockFSxAPI) CreateStorageVirtualMachineWithContext(arg0 context.Context, arg1 *fsx.CreateStorageVirtualMachineInput, arg2 ...request.Option) (*fsx.CreateStorageVirtualMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStorageVirtualMachineWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateStorageVirtualMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorageVirtualMachineWithContext indicates an expected call of CreateStorageVirtualMachineWithContext
func (mr *MockFSxAPIMockRecorder) CreateStorageVirtualMachineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageVirtualMachineWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CreateStorageVirtualMachineWithContext), varargs...)
}

// CreateVolume mocks base method
func (m *MockFSxAPI) CreateVolume(arg0 *fsx.CreateVolumeInput) (*fsx.CreateVolumeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0)
	ret0, _ := ret[0].(*fsx.CreateVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume
func (mr *MockFSxAPIMockRecorder) CreateVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockFSxAPI)(nil).CreateVolume), arg0)
}

// CreateVolumeFromBackup mocks base method
func (m *MockFSxAPI) CreateVolumeFromBackup(arg0 *fsx.CreateVolumeFromBackupInput) (*fsx.CreateVolumeFromBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeFromBackup", arg0)
	ret0, _ := ret[0].(*fsx.CreateVolumeFromBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeFromBackup indicates an expected call of CreateVolumeFromBackup
func (mr *MockFSxAPIMockRecorder) CreateVolumeFromBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeFromBackup", reflect.TypeOf((*MockFSxAPI)(nil).CreateVolumeFromBackup), arg0)
}

// CreateVolumeFromBackupRequest mocks base method
func (m *MockFSxAPI) CreateVolumeFromBackupRequest(arg0 *fsx.CreateVolumeFromBackupInput) (*request.Request, *fsx.CreateVolumeFromBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeFromBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CreateVolumeFromBackupOutput)
	return ret0, ret1
}

// CreateVolumeFromBackupRequest indicates an expected call of CreateVolumeFromBackupRequest
func (mr *MockFSxAPIMockRecorder) CreateVolumeFromBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeFromBackupRequest", reflect.TypeOf((*MockFSxAPI)(nil).CreateVolumeFromBackupRequest), arg0)
}

// CreateVolumeFromBackupWithContext mocks base method
func (m *MockFSxAPI) CreateVolumeFromBackupWithContext(arg0 context.Context, arg1 *fsx.CreateVolumeFromBackupInput, arg2 ...request.Option) (*fsx.CreateVolumeFromBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVolumeFromBackupWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateVolumeFromBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeFromBackupWithContext indicates an expected call of CreateVolumeFromBackupWithContext
func (mr *MockFSxAPIMockRecorder) CreateVolumeFromBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeFromBackupWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CreateVolumeFromBackupWithContext), varargs...)
}

// CreateVolumeRequest mocks base method
func (m *MockFSxAPI) CreateVolumeRequest(arg0 *fsx.CreateVolumeInput) (*request.Request, *fsx.CreateVolumeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.CreateVolumeOutput)
	return ret0, ret1
}

// CreateVolumeRequest indicates an expected call of CreateVolumeRequest
func (mr *MockFSxAPIMockRecorder) CreateVolumeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeRequest", reflect.TypeOf((*MockFSxAPI)(nil).CreateVolumeRequest), arg0)
}

// CreateVolumeWithContext mocks base method
func (m *MockFSxAPI) CreateVolumeWithContext(arg0 context.Context, arg1 *fsx.CreateVolumeInput, arg2 ...request.Option) (*fsx.CreateVolumeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVolumeWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeWithContext indicates an expected call of CreateVolumeWithContext
func (mr *MockFSxAPIMockRecorder) CreateVolumeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeWithContext", reflect.TypeOf((*MockFSxAPI)(nil).CreateVolumeWithContext), varargs...)
}

// DeleteBackup mocks base method
func (m *MockFSxAPI) DeleteBackup(arg0 *fsx.DeleteBackupInput) (*fsx.DeleteBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", arg0)
	ret0, _ := ret[0].(*fsx.DeleteBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackup indicates an expected call of DeleteBackup
func (mr *MockFSxAPIMockRecorder) DeleteBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockFSxAPI)(nil).DeleteBackup), arg0)
}

// DeleteBackupRequest mocks base method
func (m *MockFSxAPI) DeleteBackupRequest(arg0 *fsx.DeleteBackupInput) (*request.Request, *fsx.DeleteBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DeleteBackupOutput)
	return ret0, ret1
}

// DeleteBackupRequest indicates an expected call of DeleteBackupRequest
func (mr *MockFSxAPIMockRecorder) DeleteBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupRequest", reflect.TypeOf((*MockFSxAPI)(nil).DeleteBackupRequest), arg0)
}

// DeleteBackupWithContext mocks base method
func (m *MockFSxAPI) DeleteBackupWithContext(arg0 context.Context, arg1 *fsx.DeleteBackupInput, arg2 ...request.Option) (*fsx.DeleteBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DeleteBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupWithContext indicates an expected call of DeleteBackupWithContext
func (mr *MockFSxAPIMockRecorder) DeleteBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DeleteBackupWithContext), varargs...)
}

// DeleteFileSystem mocks base method
func (m *MockFSxAPI) DeleteFileSystem(arg0 *fsx.DeleteFileSystemInput) (*fsx.DeleteFileSystemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystem", arg0)
	ret0, _ := ret[0].(*fsx.DeleteFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileSystem indicates an expected call of DeleteFileSystem
func (mr *MockFSxAPIMockRecorder) DeleteFileSystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystem", reflect.TypeOf((*MockFSxAPI)(nil).DeleteFileSystem), arg0)
}

// DeleteFileSystemRequest mocks base method
func (m *MockFSxAPI) DeleteFileSystemRequest(arg0 *fsx.DeleteFileSystemInput) (*request.Request, *fsx.DeleteFileSystemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DeleteFileSystemOutput)
	return ret0, ret1
}

// DeleteFileSystemRequest indicates an expected call of DeleteFileSystemRequest
func (mr *MockFSxAPIMockRecorder) DeleteFileSystemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystemRequest", reflect.TypeOf((*MockFSxAPI)(nil).DeleteFileSystemRequest), arg0)
}

// DeleteFileSystemWithContext mocks base method
func (m *MockFSxAPI) DeleteFileSystemWithContext(arg0 context.Context, arg1 *fsx.DeleteFileSystemInput, arg2 ...request.Option) (*fsx.DeleteFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DeleteFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileSystemWithContext indicates an expected call of DeleteFileSystemWithContext
func (mr *MockFSxAPIMockRecorder) DeleteFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystemWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DeleteFileSystemWithContext), varargs...)
}

// DeleteStorageVirtualMachine mocks base method
func (m *MockFSxAPI) DeleteStorageVirtualMachine(arg0 *fsx.DeleteStorageVirtualMachineInput) (*fsx.DeleteStorageVirtualMachineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageVirtualMachine", arg0)
	ret0, _ := ret[0].(*fsx.DeleteStorageVirtualMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStorageVirtualMachine indicates an expected call of DeleteStorageVirtualMachine
func (mr *MockFSxAPIMockRecorder) DeleteStorageVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageVirtualMachine", reflect.TypeOf((*MockFSxAPI)(nil).DeleteStorageVirtualMachine), arg0)
}

// DeleteStorageVirtualMachineRequest mocks base method
func (m *MockFSxAPI) DeleteStorageVirtualMachineRequest(arg0 *fsx.DeleteStorageVirtualMachineInput) (*request.Request, *fsx.DeleteStorageVirtualMachineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageVirtualMachineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DeleteStorageVirtualMachineOutput)
	return ret0, ret1
}

// DeleteStorageVirtualMachineRequest indicates an expected call of DeleteStorageVirtualMachineRequest
func (mr *MockFSxAPIMockRecorder) DeleteStorageVirtualMachineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageVirtualMachineRequest", reflect.TypeOf((*MockFSxAPI)(nil).DeleteStorageVirtualMachineRequest), arg0)
}

// DeleteStorageVirtualMachineWithContext mocks base method
func (m *MockFSxAPI) DeleteStorageVirtualMachineWithContext(arg0 context.Context, arg1 *fsx.DeleteStorageVirtualMachineInput, arg2 ...request.Option) (*fsx.DeleteStorageVirtualMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStorageVirtualMachineWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DeleteStorageVirtualMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStorageVirtualMachineWithContext indicates an expected call of DeleteStorageVirtualMachineWithContext
func (mr *MockFSxAPIMockRecorder) DeleteStorageVirtualMachineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageVirtualMachineWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DeleteStorageVirtualMachineWithContext), varargs...)
}

// DeleteVolume mocks base method
func (m *MockFSxAPI) DeleteVolume(arg0 *fsx.DeleteVolumeInput) (*fsx.DeleteVolumeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0)
	ret0, _ := ret[0].(*fsx.DeleteVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume
func (mr *MockFSxAPIMockRecorder) DeleteVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockFSxAPI)(nil).DeleteVolume), arg0)
}

// DeleteVolumeRequest mocks base method
func (m *MockFSxAPI) DeleteVolumeRequest(arg0 *fsx.DeleteVolumeInput) (*request.Request, *fsx.DeleteVolumeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DeleteVolumeOutput)
	return ret0, ret1
}

// DeleteVolumeRequest indicates an expected call of DeleteVolumeRequest
func (mr *MockFSxAPIMockRecorder) DeleteVolumeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeRequest", reflect.TypeOf((*MockFSxAPI)(nil).DeleteVolumeRequest), arg0)
}

// DeleteVolumeWithContext mocks base method
func (m *MockFSxAPI) DeleteVolumeWithContext(arg0 context.Context, arg1 *fsx.DeleteVolumeInput, arg2 ...request.Option) (*fsx.DeleteVolumeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVolumeWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DeleteVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolumeWithContext indicates an expected call of DeleteVolumeWithContext
func (mr *MockFSxAPIMockRecorder) DeleteVolumeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DeleteVolumeWithContext), varargs...)
}

// DescribeBackups mocks base method
func (m *MockFSxAPI) DescribeBackups(arg0 *fsx.DescribeBackupsInput) (*fsx.DescribeBackupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackups", arg0)
	ret0, _ := ret[0].(*fsx.DescribeBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackups indicates an expected call of DescribeBackups
func (mr *MockFSxAPIMockRecorder) DescribeBackups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackups", reflect.TypeOf((*MockFSxAPI)(nil).DescribeBackups), arg0)
}

// DescribeBackupsPages mocks base method
func (m *MockFSxAPI) DescribeBackupsPages(arg0 *fsx.DescribeBackupsInput, arg1 func(*fsx.DescribeBackupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeBackupsPages indicates an expected call of DescribeBackupsPages
func (mr *MockFSxAPIMockRecorder) DescribeBackupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupsPages", reflect.TypeOf((*MockFSxAPI)(nil).DescribeBackupsPages), arg0, arg1)
}

// DescribeBackupsPagesWithContext mocks base method
func (m *MockFSxAPI) DescribeBackupsPagesWithContext(arg0 context.Context, arg1 *fsx.DescribeBackupsInput, arg2 func(*fsx.DescribeBackupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBackupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeBackupsPagesWithContext indicates an expected call of DescribeBackupsPagesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeBackupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupsPagesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeBackupsPagesWithContext), varargs...)
}

// DescribeBackupsRequest mocks base method
func (m *MockFSxAPI) DescribeBackupsRequest(arg0 *fsx.DescribeBackupsInput) (*request.Request, *fsx.DescribeBackupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DescribeBackupsOutput)
	return ret0, ret1
}

// DescribeBackupsRequest indicates an expected call of DescribeBackupsRequest
func (mr *MockFSxAPIMockRecorder) DescribeBackupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupsRequest", reflect.TypeOf((*MockFSxAPI)(nil).DescribeBackupsRequest), arg0)
}

// DescribeBackupsWithContext mocks base method
func (m *MockFSxAPI) DescribeBackupsWithContext(arg0 context.Context, arg1 *fsx.DescribeBackupsInput, arg2 ...request.Option) (*fsx.DescribeBackupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBackupsWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackupsWithContext indicates an expected call of DescribeBackupsWithContext
func (mr *MockFSxAPIMockRecorder) DescribeBackupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupsWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeBackupsWithContext), varargs...)
}

// DescribeDataRepositoryTasks mocks base method
func (m *MockFSxAPI) DescribeDataRepositoryTasks(arg0 *fsx.DescribeDataRepositoryTasksInput) (*fsx.DescribeDataRepositoryTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataRepositoryTasks", arg0)
	ret0, _ := ret[0].(*fsx.DescribeDataRepositoryTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataRepositoryTasks indicates an expected call of DescribeDataRepositoryTasks
func (mr *MockFSxAPIMockRecorder) DescribeDataRepositoryTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataRepositoryTasks", reflect.TypeOf((*MockFSxAPI)(nil).DescribeDataRepositoryTasks), arg0)
}

// DescribeDataRepositoryTasksPages mocks base method
func (m *MockFSxAPI) DescribeDataRepositoryTasksPages(arg0 *fsx.DescribeDataRepositoryTasksInput, arg1 func(*fsx.DescribeDataRepositoryTasksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataRepositoryTasksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDataRepositoryTasksPages indicates an expected call of DescribeDataRepositoryTasksPages
func (mr *MockFSxAPIMockRecorder) DescribeDataRepositoryTasksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataRepositoryTasksPages", reflect.TypeOf((*MockFSxAPI)(nil).DescribeDataRepositoryTasksPages), arg0, arg1)
}

// DescribeDataRepositoryTasksPagesWithContext mocks base method
func (m *MockFSxAPI) DescribeDataRepositoryTasksPagesWithContext(arg0 context.Context, arg1 *fsx.DescribeDataRepositoryTasksInput, arg2 func(*fsx.DescribeDataRepositoryTasksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDataRepositoryTasksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDataRepositoryTasksPagesWithContext indicates an expected call of DescribeDataRepositoryTasksPagesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeDataRepositoryTasksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataRepositoryTasksPagesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeDataRepositoryTasksPagesWithContext), varargs...)
}

// DescribeDataRepositoryTasksRequest mocks base method
func (m *MockFSxAPI) DescribeDataRepositoryTasksRequest(arg0 *fsx.DescribeDataRepositoryTasksInput) (*request.Request, *fsx.DescribeDataRepositoryTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataRepositoryTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DescribeDataRepositoryTasksOutput)
	return ret0, ret1
}

// DescribeDataRepositoryTasksRequest indicates an expected call of DescribeDataRepositoryTasksRequest
func (mr *MockFSxAPIMockRecorder) DescribeDataRepositoryTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataRepositoryTasksRequest", reflect.TypeOf((*MockFSxAPI)(nil).DescribeDataRepositoryTasksRequest), arg0)
}

// DescribeDataRepositoryTasksWithContext mocks base method
func (m *MockFSxAPI) DescribeDataRepositoryTasksWithContext(arg0 context.Context, arg1 *fsx.DescribeDataRepositoryTasksInput, arg2 ...request.Option) (*fsx.DescribeDataRepositoryTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDataRepositoryTasksWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeDataRepositoryTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataRepositoryTasksWithContext indicates an expected call of DescribeDataRepositoryTasksWithContext
func (mr *MockFSxAPIMockRecorder) DescribeDataRepositoryTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataRepositoryTasksWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeDataRepositoryTasksWithContext), varargs...)
}

// DescribeFileSystemAliases mocks base method
func (m *MockFSxAPI) DescribeFileSystemAliases(arg0 *fsx.DescribeFileSystemAliasesInput) (*fsx.DescribeFileSystemAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemAliases", arg0)
	ret0, _ := ret[0].(*fsx.DescribeFileSystemAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystemAliases indicates an expected call of DescribeFileSystemAliases
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemAliases", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemAliases), arg0)
}

// DescribeFileSystemAliasesPages mocks base method
func (m *MockFSxAPI) DescribeFileSystemAliasesPages(arg0 *fsx.DescribeFileSystemAliasesInput, arg1 func(*fsx.DescribeFileSystemAliasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemAliasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeFileSystemAliasesPages indicates an expected call of DescribeFileSystemAliasesPages
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemAliasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemAliasesPages", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemAliasesPages), arg0, arg1)
}

// DescribeFileSystemAliasesPagesWithContext mocks base method
func (m *MockFSxAPI) DescribeFileSystemAliasesPagesWithContext(arg0 context.Context, arg1 *fsx.DescribeFileSystemAliasesInput, arg2 func(*fsx.DescribeFileSystemAliasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystemAliasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeFileSystemAliasesPagesWithContext indicates an expected call of DescribeFileSystemAliasesPagesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemAliasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemAliasesPagesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemAliasesPagesWithContext), varargs...)
}

// DescribeFileSystemAliasesRequest mocks base method
func (m *MockFSxAPI) DescribeFileSystemAliasesRequest(arg0 *fsx.DescribeFileSystemAliasesInput) (*request.Request, *fsx.DescribeFileSystemAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DescribeFileSystemAliasesOutput)
	return ret0, ret1
}

// DescribeFileSystemAliasesRequest indicates an expected call of DescribeFileSystemAliasesRequest
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemAliasesRequest", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemAliasesRequest), arg0)
}

// DescribeFileSystemAliasesWithContext mocks base method
func (m *MockFSxAPI) DescribeFileSystemAliasesWithContext(arg0 context.Context, arg1 *fsx.DescribeFileSystemAliasesInput, arg2 ...request.Option) (*fsx.DescribeFileSystemAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystemAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeFileSystemAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystemAliasesWithContext indicates an expected call of DescribeFileSystemAliasesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemAliasesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemAliasesWithContext), varargs...)
}

// DescribeFileSystems mocks base method
func (m *MockFSxAPI) DescribeFileSystems(arg0 *fsx.DescribeFileSystemsInput) (*fsx.DescribeFileSystemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystems", arg0)
	ret0, _ := ret[0].(*fsx.DescribeFileSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystems indicates an expected call of DescribeFileSystems
func (mr *MockFSxAPIMockRecorder) DescribeFileSystems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystems", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystems), arg0)
}

// DescribeFileSystemsPages mocks base method
func (m *MockFSxAPI) DescribeFileSystemsPages(arg0 *fsx.DescribeFileSystemsInput, arg1 func(*fsx.DescribeFileSystemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeFileSystemsPages indicates an expected call of DescribeFileSystemsPages
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsPages", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemsPages), arg0, arg1)
}

// DescribeFileSystemsPagesWithContext mocks base method
func (m *MockFSxAPI) DescribeFileSystemsPagesWithContext(arg0 context.Context, arg1 *fsx.DescribeFileSystemsInput, arg2 func(*fsx.DescribeFileSystemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeFileSystemsPagesWithContext indicates an expected call of DescribeFileSystemsPagesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsPagesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemsPagesWithContext), varargs...)
}

// DescribeFileSystemsRequest mocks base method
func (m *MockFSxAPI) DescribeFileSystemsRequest(arg0 *fsx.DescribeFileSystemsInput) (*request.Request, *fsx.DescribeFileSystemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DescribeFileSystemsOutput)
	return ret0, ret1
}

// DescribeFileSystemsRequest indicates an expected call of DescribeFileSystemsRequest
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsRequest", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemsRequest), arg0)
}

// DescribeFileSystemsWithContext mocks base method
func (m *MockFSxAPI) DescribeFileSystemsWithContext(arg0 context.Context, arg1 *fsx.DescribeFileSystemsInput, arg2 ...request.Option) (*fsx.DescribeFileSystemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystemsWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeFileSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystemsWithContext indicates an expected call of DescribeFileSystemsWithContext
func (mr *MockFSxAPIMockRecorder) DescribeFileSystemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeFileSystemsWithContext), varargs...)
}

// DescribeStorageVirtualMachines mocks base method
func (m *MockFSxAPI) DescribeStorageVirtualMachines(arg0 *fsx.DescribeStorageVirtualMachinesInput) (*fsx.DescribeStorageVirtualMachinesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStorageVirtualMachines", arg0)
	ret0, _ := ret[0].(*fsx.DescribeStorageVirtualMachinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStorageVirtualMachines indicates an expected call of DescribeStorageVirtualMachines
func (mr *MockFSxAPIMockRecorder) DescribeStorageVirtualMachines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStorageVirtualMachines", reflect.TypeOf((*MockFSxAPI)(nil).DescribeStorageVirtualMachines), arg0)
}

// DescribeStorageVirtualMachinesPages mocks base method
func (m *MockFSxAPI) DescribeStorageVirtualMachinesPages(arg0 *fsx.DescribeStorageVirtualMachinesInput, arg1 func(*fsx.DescribeStorageVirtualMachinesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStorageVirtualMachinesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeStorageVirtualMachinesPages indicates an expected call of DescribeStorageVirtualMachinesPages
func (mr *MockFSxAPIMockRecorder) DescribeStorageVirtualMachinesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStorageVirtualMachinesPages", reflect.TypeOf((*MockFSxAPI)(nil).DescribeStorageVirtualMachinesPages), arg0, arg1)
}

// DescribeStorageVirtualMachinesPagesWithContext mocks base method
func (m *MockFSxAPI) DescribeStorageVirtualMachinesPagesWithContext(arg0 context.Context, arg1 *fsx.DescribeStorageVirtualMachinesInput, arg2 func(*fsx.DescribeStorageVirtualMachinesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStorageVirtualMachinesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeStorageVirtualMachinesPagesWithContext indicates an expected call of DescribeStorageVirtualMachinesPagesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeStorageVirtualMachinesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStorageVirtualMachinesPagesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeStorageVirtualMachinesPagesWithContext), varargs...)
}

// DescribeStorageVirtualMachinesRequest mocks base method
func (m *MockFSxAPI) DescribeStorageVirtualMachinesRequest(arg0 *fsx.DescribeStorageVirtualMachinesInput) (*request.Request, *fsx.DescribeStorageVirtualMachinesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStorageVirtualMachinesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DescribeStorageVirtualMachinesOutput)
	return ret0, ret1
}

// DescribeStorageVirtualMachinesRequest indicates an expected call of DescribeStorageVirtualMachinesRequest
func (mr *MockFSxAPIMockRecorder) DescribeStorageVirtualMachinesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStorageVirtualMachinesRequest", reflect.TypeOf((*MockFSxAPI)(nil).DescribeStorageVirtualMachinesRequest), arg0)
}

// DescribeStorageVirtualMachinesWithContext mocks base method
func (m *MockFSxAPI) DescribeStorageVirtualMachinesWithContext(arg0 context.Context, arg1 *fsx.DescribeStorageVirtualMachinesInput, arg2 ...request.Option) (*fsx.DescribeStorageVirtualMachinesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStorageVirtualMachinesWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeStorageVirtualMachinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStorageVirtualMachinesWithContext indicates an expected call of DescribeStorageVirtualMachinesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeStorageVirtualMachinesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStorageVirtualMachinesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeStorageVirtualMachinesWithContext), varargs...)
}

// DescribeVolumes mocks base method
func (m *MockFSxAPI) DescribeVolumes(arg0 *fsx.DescribeVolumesInput) (*fsx.DescribeVolumesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVolumes", arg0)
	ret0, _ := ret[0].(*fsx.DescribeVolumesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumes indicates an expected call of DescribeVolumes
func (mr *MockFSxAPIMockRecorder) DescribeVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumes", reflect.TypeOf((*MockFSxAPI)(nil).DescribeVolumes), arg0)
}

// DescribeVolumesPages mocks base method
func (m *MockFSxAPI) DescribeVolumesPages(arg0 *fsx.DescribeVolumesInput, arg1 func(*fsx.DescribeVolumesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVolumesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeVolumesPages indicates an expected call of DescribeVolumesPages
func (mr *MockFSxAPIMockRecorder) DescribeVolumesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumesPages", reflect.TypeOf((*MockFSxAPI)(nil).DescribeVolumesPages), arg0, arg1)
}

// DescribeVolumesPagesWithContext mocks base method
func (m *MockFSxAPI) DescribeVolumesPagesWithContext(arg0 context.Context, arg1 *fsx.DescribeVolumesInput, arg2 func(*fsx.DescribeVolumesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVolumesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeVolumesPagesWithContext indicates an expected call of DescribeVolumesPagesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeVolumesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumesPagesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeVolumesPagesWithContext), varargs...)
}

// DescribeVolumesRequest mocks base method
func (m *MockFSxAPI) DescribeVolumesRequest(arg0 *fsx.DescribeVolumesInput) (*request.Request, *fsx.DescribeVolumesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVolumesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DescribeVolumesOutput)
	return ret0, ret1
}

// DescribeVolumesRequest indicates an expected call of DescribeVolumesRequest
func (mr *MockFSxAPIMockRecorder) DescribeVolumesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumesRequest", reflect.TypeOf((*MockFSxAPI)(nil).DescribeVolumesRequest), arg0)
}

// DescribeVolumesWithContext mocks base method
func (m *MockFSxAPI) DescribeVolumesWithContext(arg0 context.Context, arg1 *fsx.DescribeVolumesInput, arg2 ...request.Option) (*fsx.DescribeVolumesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVolumesWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeVolumesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumesWithContext indicates an expected call of DescribeVolumesWithContext
func (mr *MockFSxAPIMockRecorder) DescribeVolumesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DescribeVolumesWithContext), varargs...)
}

// DisassociateFileSystemAliases mocks base method
func (m *MockFSxAPI) DisassociateFileSystemAliases(arg0 *fsx.DisassociateFileSystemAliasesInput) (*fsx.DisassociateFileSystemAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateFileSystemAliases", arg0)
	ret0, _ := ret[0].(*fsx.DisassociateFileSystemAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateFileSystemAliases indicates an expected call of DisassociateFileSystemAliases
func (mr *MockFSxAPIMockRecorder) DisassociateFileSystemAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFileSystemAliases", reflect.TypeOf((*MockFSxAPI)(nil).DisassociateFileSystemAliases), arg0)
}

// DisassociateFileSystemAliasesRequest mocks base method
func (m *MockFSxAPI) DisassociateFileSystemAliasesRequest(arg0 *fsx.DisassociateFileSystemAliasesInput) (*request.Request, *fsx.DisassociateFileSystemAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateFileSystemAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.DisassociateFileSystemAliasesOutput)
	return ret0, ret1
}

// DisassociateFileSystemAliasesRequest indicates an expected call of DisassociateFileSystemAliasesRequest
func (mr *MockFSxAPIMockRecorder) DisassociateFileSystemAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFileSystemAliasesRequest", reflect.TypeOf((*MockFSxAPI)(nil).DisassociateFileSystemAliasesRequest), arg0)
}

// DisassociateFileSystemAliasesWithContext mocks base method
func (m *MockFSxAPI) DisassociateFileSystemAliasesWithContext(arg0 context.Context, arg1 *fsx.DisassociateFileSystemAliasesInput, arg2 ...request.Option) (*fsx.DisassociateFileSystemAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateFileSystemAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DisassociateFileSystemAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateFileSystemAliasesWithContext indicates an expected call of DisassociateFileSystemAliasesWithContext
func (mr *MockFSxAPIMockRecorder) DisassociateFileSystemAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFileSystemAliasesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).DisassociateFileSystemAliasesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockFSxAPI) ListTagsForResource(arg0 *fsx.ListTagsForResourceInput) (*fsx.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*fsx.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockFSxAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockFSxAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method
func (m *MockFSxAPI) ListTagsForResourcePages(arg0 *fsx.ListTagsForResourceInput, arg1 func(*fsx.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages
func (mr *MockFSxAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockFSxAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method
func (m *MockFSxAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *fsx.ListTagsForResourceInput, arg2 func(*fsx.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext
func (mr *MockFSxAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockFSxAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method
func (m *MockFSxAPI) ListTagsForResourceRequest(arg0 *fsx.ListTagsForResourceInput) (*request.Request, *fsx.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockFSxAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockFSxAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockFSxAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *fsx.ListTagsForResourceInput, arg2 ...request.Option) (*fsx.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockFSxAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockFSxAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockFSxAPI) TagResource(arg0 *fsx.TagResourceInput) (*fsx.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*fsx.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockFSxAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockFSxAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockFSxAPI) TagResourceRequest(arg0 *fsx.TagResourceInput) (*request.Request, *fsx.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockFSxAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockFSxAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockFSxAPI) TagResourceWithContext(arg0 context.Context, arg1 *fsx.TagResourceInput, arg2 ...request.Option) (*fsx.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockFSxAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockFSxAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockFSxAPI) UntagResource(arg0 *fsx.UntagResourceInput) (*fsx.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*fsx.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockFSxAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockFSxAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockFSxAPI) UntagResourceRequest(arg0 *fsx.UntagResourceInput) (*request.Request, *fsx.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockFSxAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockFSxAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockFSxAPI) UntagResourceWithContext(arg0 context.Context, arg1 *fsx.UntagResourceInput, arg2 ...request.Option) (*fsx.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockFSxAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockFSxAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateFileSystem mocks base method
func (m *MockFSxAPI) UpdateFileSystem(arg0 *fsx.UpdateFileSystemInput) (*fsx.UpdateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSystem", arg0)
	ret0, _ := ret[0].(*fsx.UpdateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileSystem indicates an expected call of UpdateFileSystem
func (mr *MockFSxAPIMockRecorder) UpdateFileSystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystem", reflect.TypeOf((*MockFSxAPI)(nil).UpdateFileSystem), arg0)
}

// UpdateFileSystemRequest mocks base method
func (m *MockFSxAPI) UpdateFileSystemRequest(arg0 *fsx.UpdateFileSystemInput) (*request.Request, *fsx.UpdateFileSystemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSystemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.UpdateFileSystemOutput)
	return ret0, ret1
}

// UpdateFileSystemRequest indicates an expected call of UpdateFileSystemRequest
func (mr *MockFSxAPIMockRecorder) UpdateFileSystemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystemRequest", reflect.TypeOf((*MockFSxAPI)(nil).UpdateFileSystemRequest), arg0)
}

// UpdateFileSystemWithContext mocks base method
func (m *MockFSxAPI) UpdateFileSystemWithContext(arg0 context.Context, arg1 *fsx.UpdateFileSystemInput, arg2 ...request.Option) (*fsx.UpdateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.UpdateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileSystemWithContext indicates an expected call of UpdateFileSystemWithContext
func (mr *MockFSxAPIMockRecorder) UpdateFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystemWithContext", reflect.TypeOf((*MockFSxAPI)(nil).UpdateFileSystemWithContext), varargs...)
}

// UpdateStorageVirtualMachine mocks base method
func (m *MockFSxAPI) UpdateStorageVirtualMachine(arg0 *fsx.UpdateStorageVirtualMachineInput) (*fsx.UpdateStorageVirtualMachineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorageVirtualMachine", arg0)
	ret0, _ := ret[0].(*fsx.UpdateStorageVirtualMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStorageVirtualMachine indicates an expected call of UpdateStorageVirtualMachine
func (mr *MockFSxAPIMockRecorder) UpdateStorageVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageVirtualMachine", reflect.TypeOf((*MockFSxAPI)(nil).UpdateStorageVirtualMachine), arg0)
}

// UpdateStorageVirtualMachineRequest mocks base method
func (m *MockFSxAPI) UpdateStorageVirtualMachineRequest(arg0 *fsx.UpdateStorageVirtualMachineInput) (*request.Request, *fsx.UpdateStorageVirtualMachineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorageVirtualMachineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.UpdateStorageVirtualMachineOutput)
	return ret0, ret1
}

// UpdateStorageVirtualMachineRequest indicates an expected call of UpdateStorageVirtualMachineRequest
func (mr *MockFSxAPIMockRecorder) UpdateStorageVirtualMachineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageVirtualMachineRequest", reflect.TypeOf((*MockFSxAPI)(nil).UpdateStorageVirtualMachineRequest), arg0)
}

// UpdateStorageVirtualMachineWithContext mocks base method
func (m *MockFSxAPI) UpdateStorageVirtualMachineWithContext(arg0 context.Context, arg1 *fsx.UpdateStorageVirtualMachineInput, arg2 ...request.Option) (*fsx.UpdateStorageVirtualMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStorageVirtualMachineWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.UpdateStorageVirtualMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStorageVirtualMachineWithContext indicates an expected call of UpdateStorageVirtualMachineWithContext
func (mr *MockFSxAPIMockRecorder) UpdateStorageVirtualMachineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageVirtualMachineWithContext", reflect.TypeOf((*MockFSxAPI)(nil).UpdateStorageVirtualMachineWithContext), varargs...)
}

// UpdateVolume mocks base method
func (m *MockFSxAPI) UpdateVolume(arg0 *fsx.UpdateVolumeInput) (*fsx.UpdateVolumeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", arg0)
	ret0, _ := ret[0].(*fsx.UpdateVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume
func (mr *MockFSxAPIMockRecorder) UpdateVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockFSxAPI)(nil).UpdateVolume), arg0)
}

// UpdateVolumeRequest mocks base method
func (m *MockFSxAPI) UpdateVolumeRequest(arg0 *fsx.UpdateVolumeInput) (*request.Request, *fsx.UpdateVolumeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fsx.UpdateVolumeOutput)
	return ret0, ret1
}

// UpdateVolumeRequest indicates an expected call of UpdateVolumeRequest
func (mr *MockFSxAPIMockRecorder) UpdateVolumeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeRequest", reflect.TypeOf((*MockFSxAPI)(nil).UpdateVolumeRequest), arg0)
}

// UpdateVolumeWithContext mocks base method
func (m *MockFSxAPI) UpdateVolumeWithContext(arg0 context.Context, arg1 *fsx.UpdateVolumeInput, arg2 ...request.Option) (*fsx.UpdateVolumeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVolumeWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.UpdateVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolumeWithContext indicates an expected call of UpdateVolumeWithContext
func (mr *MockFSxAPIMockRecorder) UpdateVolumeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeWithContext", reflect.TypeOf((*MockFSxAPI)(nil).UpdateVolumeWithContext), varargs...)
}
