// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/docdbelastic/docdbelasticiface (interfaces: DocDBElasticAPI)

// Package docdbelasticmock is a generated GoMock package.
package docdbelasticmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	docdbelastic "github.com/aws/aws-sdk-go/service/docdbelastic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDocDBElasticAPI is a mock of DocDBElasticAPI interface
type MockDocDBElasticAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDocDBElasticAPIMockRecorder
}

// MockDocDBElasticAPIMockRecorder is the mock recorder for MockDocDBElasticAPI
type MockDocDBElasticAPIMockRecorder struct {
	mock *MockDocDBElasticAPI
}

// NewMockDocDBElasticAPI creates a new mock instance
func NewMockDocDBElasticAPI(ctrl *gomock.Controller) *MockDocDBElasticAPI {
	mock := &MockDocDBElasticAPI{ctrl: ctrl}
	mock.recorder = &MockDocDBElasticAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocDBElasticAPI) EXPECT() *MockDocDBElasticAPIMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method
func (m *MockDocDBElasticAPI) CreateCluster(arg0 *docdbelastic.CreateClusterInput) (*docdbelastic.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0)
	ret0, _ := ret[0].(*docdbelastic.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster
func (mr *MockDocDBElasticAPIMockRecorder) CreateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockDocDBElasticAPI)(nil).CreateCluster), arg0)
}

// CreateClusterRequest mocks base method
func (m *MockDocDBElasticAPI) CreateClusterRequest(arg0 *docdbelastic.CreateClusterInput) (*request.Request, *docdbelastic.CreateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.CreateClusterOutput)
	return ret0, ret1
}

// CreateClusterRequest indicates an expected call of CreateClusterRequest
func (mr *MockDocDBElasticAPIMockRecorder) CreateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).CreateClusterRequest), arg0)
}

// CreateClusterSnapshot mocks base method
func (m *MockDocDBElasticAPI) CreateClusterSnapshot(arg0 *docdbelastic.CreateClusterSnapshotInput) (*docdbelastic.CreateClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterSnapshot", arg0)
	ret0, _ := ret[0].(*docdbelastic.CreateClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterSnapshot indicates an expected call of CreateClusterSnapshot
func (mr *MockDocDBElasticAPIMockRecorder) CreateClusterSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterSnapshot", reflect.TypeOf((*MockDocDBElasticAPI)(nil).CreateClusterSnapshot), arg0)
}

// CreateClusterSnapshotRequest mocks base method
func (m *MockDocDBElasticAPI) CreateClusterSnapshotRequest(arg0 *docdbelastic.CreateClusterSnapshotInput) (*request.Request, *docdbelastic.CreateClusterSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.CreateClusterSnapshotOutput)
	return ret0, ret1
}

// CreateClusterSnapshotRequest indicates an expected call of CreateClusterSnapshotRequest
func (mr *MockDocDBElasticAPIMockRecorder) CreateClusterSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterSnapshotRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).CreateClusterSnapshotRequest), arg0)
}

// CreateClusterSnapshotWithContext mocks base method
func (m *MockDocDBElasticAPI) CreateClusterSnapshotWithContext(arg0 context.Context, arg1 *docdbelastic.CreateClusterSnapshotInput, arg2 ...request.Option) (*docdbelastic.CreateClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.CreateClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterSnapshotWithContext indicates an expected call of CreateClusterSnapshotWithContext
func (mr *MockDocDBElasticAPIMockRecorder) CreateClusterSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterSnapshotWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).CreateClusterSnapshotWithContext), varargs...)
}

// CreateClusterWithContext mocks base method
func (m *MockDocDBElasticAPI) CreateClusterWithContext(arg0 context.Context, arg1 *docdbelastic.CreateClusterInput, arg2 ...request.Option) (*docdbelastic.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterWithContext indicates an expected call of CreateClusterWithContext
func (mr *MockDocDBElasticAPIMockRecorder) CreateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).CreateClusterWithContext), varargs...)
}

// DeleteCluster mocks base method
func (m *MockDocDBElasticAPI) DeleteCluster(arg0 *docdbelastic.DeleteClusterInput) (*docdbelastic.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0)
	ret0, _ := ret[0].(*docdbelastic.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster
func (mr *MockDocDBElasticAPIMockRecorder) DeleteCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockDocDBElasticAPI)(nil).DeleteCluster), arg0)
}

// DeleteClusterRequest mocks base method
func (m *MockDocDBElasticAPI) DeleteClusterRequest(arg0 *docdbelastic.DeleteClusterInput) (*request.Request, *docdbelastic.DeleteClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.DeleteClusterOutput)
	return ret0, ret1
}

// DeleteClusterRequest indicates an expected call of DeleteClusterRequest
func (mr *MockDocDBElasticAPIMockRecorder) DeleteClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).DeleteClusterRequest), arg0)
}

// DeleteClusterSnapshot mocks base method
func (m *MockDocDBElasticAPI) DeleteClusterSnapshot(arg0 *docdbelastic.DeleteClusterSnapshotInput) (*docdbelastic.DeleteClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterSnapshot", arg0)
	ret0, _ := ret[0].(*docdbelastic.DeleteClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterSnapshot indicates an expected call of DeleteClusterSnapshot
func (mr *MockDocDBElasticAPIMockRecorder) DeleteClusterSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterSnapshot", reflect.TypeOf((*MockDocDBElasticAPI)(nil).DeleteClusterSnapshot), arg0)
}

// DeleteClusterSnapshotRequest mocks base method
func (m *MockDocDBElasticAPI) DeleteClusterSnapshotRequest(arg0 *docdbelastic.DeleteClusterSnapshotInput) (*request.Request, *docdbelastic.DeleteClusterSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.DeleteClusterSnapshotOutput)
	return ret0, ret1
}

// DeleteClusterSnapshotRequest indicates an expected call of DeleteClusterSnapshotRequest
func (mr *MockDocDBElasticAPIMockRecorder) DeleteClusterSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterSnapshotRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).DeleteClusterSnapshotRequest), arg0)
}

// DeleteClusterSnapshotWithContext mocks base method
func (m *MockDocDBElasticAPI) DeleteClusterSnapshotWithContext(arg0 context.Context, arg1 *docdbelastic.DeleteClusterSnapshotInput, arg2 ...request.Option) (*docdbelastic.DeleteClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClusterSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.DeleteClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterSnapshotWithContext indicates an expected call of DeleteClusterSnapshotWithContext
func (mr *MockDocDBElasticAPIMockRecorder) DeleteClusterSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterSnapshotWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).DeleteClusterSnapshotWithContext), varargs...)
}

// DeleteClusterWithContext mocks base method
func (m *MockDocDBElasticAPI) DeleteClusterWithContext(arg0 context.Context, arg1 *docdbelastic.DeleteClusterInput, arg2 ...request.Option) (*docdbelastic.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClusterWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterWithContext indicates an expected call of DeleteClusterWithContext
func (mr *MockDocDBElasticAPIMockRecorder) DeleteClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).DeleteClusterWithContext), varargs...)
}

// GetCluster mocks base method
func (m *MockDocDBElasticAPI) GetCluster(arg0 *docdbelastic.GetClusterInput) (*docdbelastic.GetClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0)
	ret0, _ := ret[0].(*docdbelastic.GetClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster
func (mr *MockDocDBElasticAPIMockRecorder) GetCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockDocDBElasticAPI)(nil).GetCluster), arg0)
}

// GetClusterRequest mocks base method
func (m *MockDocDBElasticAPI) GetClusterRequest(arg0 *docdbelastic.GetClusterInput) (*request.Request, *docdbelastic.GetClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.GetClusterOutput)
	return ret0, ret1
}

// GetClusterRequest indicates an expected call of GetClusterRequest
func (mr *MockDocDBElasticAPIMockRecorder) GetClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).GetClusterRequest), arg0)
}

// GetClusterSnapshot mocks base method
func (m *MockDocDBElasticAPI) GetClusterSnapshot(arg0 *docdbelastic.GetClusterSnapshotInput) (*docdbelastic.GetClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterSnapshot", arg0)
	ret0, _ := ret[0].(*docdbelastic.GetClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterSnapshot indicates an expected call of GetClusterSnapshot
func (mr *MockDocDBElasticAPIMockRecorder) GetClusterSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterSnapshot", reflect.TypeOf((*MockDocDBElasticAPI)(nil).GetClusterSnapshot), arg0)
}

// GetClusterSnapshotRequest mocks base method
func (m *MockDocDBElasticAPI) GetClusterSnapshotRequest(arg0 *docdbelastic.GetClusterSnapshotInput) (*request.Request, *docdbelastic.GetClusterSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.GetClusterSnapshotOutput)
	return ret0, ret1
}

// GetClusterSnapshotRequest indicates an expected call of GetClusterSnapshotRequest
func (mr *MockDocDBElasticAPIMockRecorder) GetClusterSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterSnapshotRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).GetClusterSnapshotRequest), arg0)
}

// GetClusterSnapshotWithContext mocks base method
func (m *MockDocDBElasticAPI) GetClusterSnapshotWithContext(arg0 context.Context, arg1 *docdbelastic.GetClusterSnapshotInput, arg2 ...request.Option) (*docdbelastic.GetClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.GetClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterSnapshotWithContext indicates an expected call of GetClusterSnapshotWithContext
func (mr *MockDocDBElasticAPIMockRecorder) GetClusterSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterSnapshotWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).GetClusterSnapshotWithContext), varargs...)
}

// GetClusterWithContext mocks base method
func (m *MockDocDBElasticAPI) GetClusterWithContext(arg0 context.Context, arg1 *docdbelastic.GetClusterInput, arg2 ...request.Option) (*docdbelastic.GetClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.GetClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterWithContext indicates an expected call of GetClusterWithContext
func (mr *MockDocDBElasticAPIMockRecorder) GetClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).GetClusterWithContext), varargs...)
}

// ListClusterSnapshots mocks base method
func (m *MockDocDBElasticAPI) ListClusterSnapshots(arg0 *docdbelastic.ListClusterSnapshotsInput) (*docdbelastic.ListClusterSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterSnapshots", arg0)
	ret0, _ := ret[0].(*docdbelastic.ListClusterSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterSnapshots indicates an expected call of ListClusterSnapshots
func (mr *MockDocDBElasticAPIMockRecorder) ListClusterSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterSnapshots", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListClusterSnapshots), arg0)
}

// ListClusterSnapshotsPages mocks base method
func (m *MockDocDBElasticAPI) ListClusterSnapshotsPages(arg0 *docdbelastic.ListClusterSnapshotsInput, arg1 func(*docdbelastic.ListClusterSnapshotsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterSnapshotsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClusterSnapshotsPages indicates an expected call of ListClusterSnapshotsPages
func (mr *MockDocDBElasticAPIMockRecorder) ListClusterSnapshotsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterSnapshotsPages", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListClusterSnapshotsPages), arg0, arg1)
}

// ListClusterSnapshotsPagesWithContext mocks base method
func (m *MockDocDBElasticAPI) ListClusterSnapshotsPagesWithContext(arg0 context.Context, arg1 *docdbelastic.ListClusterSnapshotsInput, arg2 func(*docdbelastic.ListClusterSnapshotsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterSnapshotsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClusterSnapshotsPagesWithContext indicates an expected call of ListClusterSnapshotsPagesWithContext
func (mr *MockDocDBElasticAPIMockRecorder) ListClusterSnapshotsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterSnapshotsPagesWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListClusterSnapshotsPagesWithContext), varargs...)
}

// ListClusterSnapshotsRequest mocks base method
func (m *MockDocDBElasticAPI) ListClusterSnapshotsRequest(arg0 *docdbelastic.ListClusterSnapshotsInput) (*request.Request, *docdbelastic.ListClusterSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.ListClusterSnapshotsOutput)
	return ret0, ret1
}

// ListClusterSnapshotsRequest indicates an expected call of ListClusterSnapshotsRequest
func (mr *MockDocDBElasticAPIMockRecorder) ListClusterSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterSnapshotsRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListClusterSnapshotsRequest), arg0)
}

// ListClusterSnapshotsWithContext mocks base method
func (m *MockDocDBElasticAPI) ListClusterSnapshotsWithContext(arg0 context.Context, arg1 *docdbelastic.ListClusterSnapshotsInput, arg2 ...request.Option) (*docdbelastic.ListClusterSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.ListClusterSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterSnapshotsWithContext indicates an expected call of ListClusterSnapshotsWithContext
func (mr *MockDocDBElasticAPIMockRecorder) ListClusterSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterSnapshotsWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListClusterSnapshotsWithContext), varargs...)
}

// ListClusters mocks base method
func (m *MockDocDBElasticAPI) ListClusters(arg0 *docdbelastic.ListClustersInput) (*docdbelastic.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0)
	ret0, _ := ret[0].(*docdbelastic.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters
func (mr *MockDocDBElasticAPIMockRecorder) ListClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListClusters), arg0)
}

// ListClustersPages mocks base method
func (m *MockDocDBElasticAPI) ListClustersPages(arg0 *docdbelastic.ListClustersInput, arg1 func(*docdbelastic.ListClustersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClustersPages indicates an expected call of ListClustersPages
func (mr *MockDocDBElasticAPIMockRecorder) ListClustersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersPages", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListClustersPages), arg0, arg1)
}

// ListClustersPagesWithContext mocks base method
func (m *MockDocDBElasticAPI) ListClustersPagesWithContext(arg0 context.Context, arg1 *docdbelastic.ListClustersInput, arg2 func(*docdbelastic.ListClustersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClustersPagesWithContext indicates an expected call of ListClustersPagesWithContext
func (mr *MockDocDBElasticAPIMockRecorder) ListClustersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersPagesWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListClustersPagesWithContext), varargs...)
}

// ListClustersRequest mocks base method
func (m *MockDocDBElasticAPI) ListClustersRequest(arg0 *docdbelastic.ListClustersInput) (*request.Request, *docdbelastic.ListClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.ListClustersOutput)
	return ret0, ret1
}

// ListClustersRequest indicates an expected call of ListClustersRequest
func (mr *MockDocDBElasticAPIMockRecorder) ListClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListClustersRequest), arg0)
}

// ListClustersWithContext mocks base method
func (m *MockDocDBElasticAPI) ListClustersWithContext(arg0 context.Context, arg1 *docdbelastic.ListClustersInput, arg2 ...request.Option) (*docdbelastic.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersWithContext indicates an expected call of ListClustersWithContext
func (mr *MockDocDBElasticAPIMockRecorder) ListClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListClustersWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockDocDBElasticAPI) ListTagsForResource(arg0 *docdbelastic.ListTagsForResourceInput) (*docdbelastic.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*docdbelastic.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockDocDBElasticAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockDocDBElasticAPI) ListTagsForResourceRequest(arg0 *docdbelastic.ListTagsForResourceInput) (*request.Request, *docdbelastic.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockDocDBElasticAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockDocDBElasticAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *docdbelastic.ListTagsForResourceInput, arg2 ...request.Option) (*docdbelastic.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockDocDBElasticAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RestoreClusterFromSnapshot mocks base method
func (m *MockDocDBElasticAPI) RestoreClusterFromSnapshot(arg0 *docdbelastic.RestoreClusterFromSnapshotInput) (*docdbelastic.RestoreClusterFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreClusterFromSnapshot", arg0)
	ret0, _ := ret[0].(*docdbelastic.RestoreClusterFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreClusterFromSnapshot indicates an expected call of RestoreClusterFromSnapshot
func (mr *MockDocDBElasticAPIMockRecorder) RestoreClusterFromSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreClusterFromSnapshot", reflect.TypeOf((*MockDocDBElasticAPI)(nil).RestoreClusterFromSnapshot), arg0)
}

// RestoreClusterFromSnapshotRequest mocks base method
func (m *MockDocDBElasticAPI) RestoreClusterFromSnapshotRequest(arg0 *docdbelastic.RestoreClusterFromSnapshotInput) (*request.Request, *docdbelastic.RestoreClusterFromSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreClusterFromSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.RestoreClusterFromSnapshotOutput)
	return ret0, ret1
}

// RestoreClusterFromSnapshotRequest indicates an expected call of RestoreClusterFromSnapshotRequest
func (mr *MockDocDBElasticAPIMockRecorder) RestoreClusterFromSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreClusterFromSnapshotRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).RestoreClusterFromSnapshotRequest), arg0)
}

// RestoreClusterFromSnapshotWithContext mocks base method
func (m *MockDocDBElasticAPI) RestoreClusterFromSnapshotWithContext(arg0 context.Context, arg1 *docdbelastic.RestoreClusterFromSnapshotInput, arg2 ...request.Option) (*docdbelastic.RestoreClusterFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreClusterFromSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.RestoreClusterFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreClusterFromSnapshotWithContext indicates an expected call of RestoreClusterFromSnapshotWithContext
func (mr *MockDocDBElasticAPIMockRecorder) RestoreClusterFromSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreClusterFromSnapshotWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).RestoreClusterFromSnapshotWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockDocDBElasticAPI) TagResource(arg0 *docdbelastic.TagResourceInput) (*docdbelastic.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*docdbelastic.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockDocDBElasticAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockDocDBElasticAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockDocDBElasticAPI) TagResourceRequest(arg0 *docdbelastic.TagResourceInput) (*request.Request, *docdbelastic.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockDocDBElasticAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockDocDBElasticAPI) TagResourceWithContext(arg0 context.Context, arg1 *docdbelastic.TagResourceInput, arg2 ...request.Option) (*docdbelastic.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockDocDBElasticAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockDocDBElasticAPI) UntagResource(arg0 *docdbelastic.UntagResourceInput) (*docdbelastic.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*docdbelastic.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockDocDBElasticAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockDocDBElasticAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockDocDBElasticAPI) UntagResourceRequest(arg0 *docdbelastic.UntagResourceInput) (*request.Request, *docdbelastic.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockDocDBElasticAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockDocDBElasticAPI) UntagResourceWithContext(arg0 context.Context, arg1 *docdbelastic.UntagResourceInput, arg2 ...request.Option) (*docdbelastic.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockDocDBElasticAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCluster mocks base method
func (m *MockDocDBElasticAPI) UpdateCluster(arg0 *docdbelastic.UpdateClusterInput) (*docdbelastic.UpdateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0)
	ret0, _ := ret[0].(*docdbelastic.UpdateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster
func (mr *MockDocDBElasticAPIMockRecorder) UpdateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockDocDBElasticAPI)(nil).UpdateCluster), arg0)
}

// UpdateClusterRequest mocks base method
func (m *MockDocDBElasticAPI) UpdateClusterRequest(arg0 *docdbelastic.UpdateClusterInput) (*request.Request, *docdbelastic.UpdateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdbelastic.UpdateClusterOutput)
	return ret0, ret1
}

// UpdateClusterRequest indicates an expected call of UpdateClusterRequest
func (mr *MockDocDBElasticAPIMockRecorder) UpdateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRequest", reflect.TypeOf((*MockDocDBElasticAPI)(nil).UpdateClusterRequest), arg0)
}

// UpdateClusterWithContext mocks base method
func (m *MockDocDBElasticAPI) UpdateClusterWithContext(arg0 context.Context, arg1 *docdbelastic.UpdateClusterInput, arg2 ...request.Option) (*docdbelastic.UpdateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*docdbelastic.UpdateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterWithContext indicates an expected call of UpdateClusterWithContext
func (mr *MockDocDBElasticAPIMockRecorder) UpdateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterWithContext", reflect.TypeOf((*MockDocDBElasticAPI)(nil).UpdateClusterWithContext), varargs...)
}
