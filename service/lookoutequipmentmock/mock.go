// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/lookoutequipment/lookoutequipmentiface (interfaces: LookoutEquipmentAPI)

// Package lookoutequipmentmock is a generated GoMock package.
package lookoutequipmentmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	lookoutequipment "github.com/aws/aws-sdk-go/service/lookoutequipment"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLookoutEquipmentAPI is a mock of LookoutEquipmentAPI interface
type MockLookoutEquipmentAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLookoutEquipmentAPIMockRecorder
}

// MockLookoutEquipmentAPIMockRecorder is the mock recorder for MockLookoutEquipmentAPI
type MockLookoutEquipmentAPIMockRecorder struct {
	mock *MockLookoutEquipmentAPI
}

// NewMockLookoutEquipmentAPI creates a new mock instance
func NewMockLookoutEquipmentAPI(ctrl *gomock.Controller) *MockLookoutEquipmentAPI {
	mock := &MockLookoutEquipmentAPI{ctrl: ctrl}
	mock.recorder = &MockLookoutEquipmentAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLookoutEquipmentAPI) EXPECT() *MockLookoutEquipmentAPIMockRecorder {
	return m.recorder
}

// CreateDataset mocks base method
func (m *MockLookoutEquipmentAPI) CreateDataset(arg0 *lookoutequipment.CreateDatasetInput) (*lookoutequipment.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", arg0)
	ret0, _ := ret[0].(*lookoutequipment.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateDataset), arg0)
}

// CreateDatasetRequest mocks base method
func (m *MockLookoutEquipmentAPI) CreateDatasetRequest(arg0 *lookoutequipment.CreateDatasetInput) (*request.Request, *lookoutequipment.CreateDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.CreateDatasetOutput)
	return ret0, ret1
}

// CreateDatasetRequest indicates an expected call of CreateDatasetRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateDatasetRequest), arg0)
}

// CreateDatasetWithContext mocks base method
func (m *MockLookoutEquipmentAPI) CreateDatasetWithContext(arg0 context.Context, arg1 *lookoutequipment.CreateDatasetInput, arg2 ...request.Option) (*lookoutequipment.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetWithContext indicates an expected call of CreateDatasetWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateDatasetWithContext), varargs...)
}

// CreateInferenceScheduler mocks base method
func (m *MockLookoutEquipmentAPI) CreateInferenceScheduler(arg0 *lookoutequipment.CreateInferenceSchedulerInput) (*lookoutequipment.CreateInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInferenceScheduler", arg0)
	ret0, _ := ret[0].(*lookoutequipment.CreateInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInferenceScheduler indicates an expected call of CreateInferenceScheduler
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateInferenceScheduler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInferenceScheduler", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateInferenceScheduler), arg0)
}

// CreateInferenceSchedulerRequest mocks base method
func (m *MockLookoutEquipmentAPI) CreateInferenceSchedulerRequest(arg0 *lookoutequipment.CreateInferenceSchedulerInput) (*request.Request, *lookoutequipment.CreateInferenceSchedulerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInferenceSchedulerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.CreateInferenceSchedulerOutput)
	return ret0, ret1
}

// CreateInferenceSchedulerRequest indicates an expected call of CreateInferenceSchedulerRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateInferenceSchedulerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInferenceSchedulerRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateInferenceSchedulerRequest), arg0)
}

// CreateInferenceSchedulerWithContext mocks base method
func (m *MockLookoutEquipmentAPI) CreateInferenceSchedulerWithContext(arg0 context.Context, arg1 *lookoutequipment.CreateInferenceSchedulerInput, arg2 ...request.Option) (*lookoutequipment.CreateInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInferenceSchedulerWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.CreateInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInferenceSchedulerWithContext indicates an expected call of CreateInferenceSchedulerWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateInferenceSchedulerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInferenceSchedulerWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateInferenceSchedulerWithContext), varargs...)
}

// CreateLabel mocks base method
func (m *MockLookoutEquipmentAPI) CreateLabel(arg0 *lookoutequipment.CreateLabelInput) (*lookoutequipment.CreateLabelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", arg0)
	ret0, _ := ret[0].(*lookoutequipment.CreateLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLabel indicates an expected call of CreateLabel
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateLabel), arg0)
}

// CreateLabelGroup mocks base method
func (m *MockLookoutEquipmentAPI) CreateLabelGroup(arg0 *lookoutequipment.CreateLabelGroupInput) (*lookoutequipment.CreateLabelGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabelGroup", arg0)
	ret0, _ := ret[0].(*lookoutequipment.CreateLabelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLabelGroup indicates an expected call of CreateLabelGroup
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateLabelGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabelGroup", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateLabelGroup), arg0)
}

// CreateLabelGroupRequest mocks base method
func (m *MockLookoutEquipmentAPI) CreateLabelGroupRequest(arg0 *lookoutequipment.CreateLabelGroupInput) (*request.Request, *lookoutequipment.CreateLabelGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabelGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.CreateLabelGroupOutput)
	return ret0, ret1
}

// CreateLabelGroupRequest indicates an expected call of CreateLabelGroupRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateLabelGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabelGroupRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateLabelGroupRequest), arg0)
}

// CreateLabelGroupWithContext mocks base method
func (m *MockLookoutEquipmentAPI) CreateLabelGroupWithContext(arg0 context.Context, arg1 *lookoutequipment.CreateLabelGroupInput, arg2 ...request.Option) (*lookoutequipment.CreateLabelGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLabelGroupWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.CreateLabelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLabelGroupWithContext indicates an expected call of CreateLabelGroupWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateLabelGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabelGroupWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateLabelGroupWithContext), varargs...)
}

// CreateLabelRequest mocks base method
func (m *MockLookoutEquipmentAPI) CreateLabelRequest(arg0 *lookoutequipment.CreateLabelInput) (*request.Request, *lookoutequipment.CreateLabelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.CreateLabelOutput)
	return ret0, ret1
}

// CreateLabelRequest indicates an expected call of CreateLabelRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateLabelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabelRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateLabelRequest), arg0)
}

// CreateLabelWithContext mocks base method
func (m *MockLookoutEquipmentAPI) CreateLabelWithContext(arg0 context.Context, arg1 *lookoutequipment.CreateLabelInput, arg2 ...request.Option) (*lookoutequipment.CreateLabelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLabelWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.CreateLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLabelWithContext indicates an expected call of CreateLabelWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateLabelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabelWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateLabelWithContext), varargs...)
}

// CreateModel mocks base method
func (m *MockLookoutEquipmentAPI) CreateModel(arg0 *lookoutequipment.CreateModelInput) (*lookoutequipment.CreateModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0)
	ret0, _ := ret[0].(*lookoutequipment.CreateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateModel), arg0)
}

// CreateModelRequest mocks base method
func (m *MockLookoutEquipmentAPI) CreateModelRequest(arg0 *lookoutequipment.CreateModelInput) (*request.Request, *lookoutequipment.CreateModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.CreateModelOutput)
	return ret0, ret1
}

// CreateModelRequest indicates an expected call of CreateModelRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateModelRequest), arg0)
}

// CreateModelWithContext mocks base method
func (m *MockLookoutEquipmentAPI) CreateModelWithContext(arg0 context.Context, arg1 *lookoutequipment.CreateModelInput, arg2 ...request.Option) (*lookoutequipment.CreateModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.CreateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelWithContext indicates an expected call of CreateModelWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) CreateModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).CreateModelWithContext), varargs...)
}

// DeleteDataset mocks base method
func (m *MockLookoutEquipmentAPI) DeleteDataset(arg0 *lookoutequipment.DeleteDatasetInput) (*lookoutequipment.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataset indicates an expected call of DeleteDataset
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteDataset), arg0)
}

// DeleteDatasetRequest mocks base method
func (m *MockLookoutEquipmentAPI) DeleteDatasetRequest(arg0 *lookoutequipment.DeleteDatasetInput) (*request.Request, *lookoutequipment.DeleteDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DeleteDatasetOutput)
	return ret0, ret1
}

// DeleteDatasetRequest indicates an expected call of DeleteDatasetRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteDatasetRequest), arg0)
}

// DeleteDatasetWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DeleteDatasetWithContext(arg0 context.Context, arg1 *lookoutequipment.DeleteDatasetInput, arg2 ...request.Option) (*lookoutequipment.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetWithContext indicates an expected call of DeleteDatasetWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteDatasetWithContext), varargs...)
}

// DeleteInferenceScheduler mocks base method
func (m *MockLookoutEquipmentAPI) DeleteInferenceScheduler(arg0 *lookoutequipment.DeleteInferenceSchedulerInput) (*lookoutequipment.DeleteInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInferenceScheduler", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DeleteInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInferenceScheduler indicates an expected call of DeleteInferenceScheduler
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteInferenceScheduler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInferenceScheduler", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteInferenceScheduler), arg0)
}

// DeleteInferenceSchedulerRequest mocks base method
func (m *MockLookoutEquipmentAPI) DeleteInferenceSchedulerRequest(arg0 *lookoutequipment.DeleteInferenceSchedulerInput) (*request.Request, *lookoutequipment.DeleteInferenceSchedulerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInferenceSchedulerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DeleteInferenceSchedulerOutput)
	return ret0, ret1
}

// DeleteInferenceSchedulerRequest indicates an expected call of DeleteInferenceSchedulerRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteInferenceSchedulerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInferenceSchedulerRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteInferenceSchedulerRequest), arg0)
}

// DeleteInferenceSchedulerWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DeleteInferenceSchedulerWithContext(arg0 context.Context, arg1 *lookoutequipment.DeleteInferenceSchedulerInput, arg2 ...request.Option) (*lookoutequipment.DeleteInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInferenceSchedulerWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DeleteInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInferenceSchedulerWithContext indicates an expected call of DeleteInferenceSchedulerWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteInferenceSchedulerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInferenceSchedulerWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteInferenceSchedulerWithContext), varargs...)
}

// DeleteLabel mocks base method
func (m *MockLookoutEquipmentAPI) DeleteLabel(arg0 *lookoutequipment.DeleteLabelInput) (*lookoutequipment.DeleteLabelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabel", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DeleteLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLabel indicates an expected call of DeleteLabel
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabel", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteLabel), arg0)
}

// DeleteLabelGroup mocks base method
func (m *MockLookoutEquipmentAPI) DeleteLabelGroup(arg0 *lookoutequipment.DeleteLabelGroupInput) (*lookoutequipment.DeleteLabelGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabelGroup", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DeleteLabelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLabelGroup indicates an expected call of DeleteLabelGroup
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteLabelGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabelGroup", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteLabelGroup), arg0)
}

// DeleteLabelGroupRequest mocks base method
func (m *MockLookoutEquipmentAPI) DeleteLabelGroupRequest(arg0 *lookoutequipment.DeleteLabelGroupInput) (*request.Request, *lookoutequipment.DeleteLabelGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabelGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DeleteLabelGroupOutput)
	return ret0, ret1
}

// DeleteLabelGroupRequest indicates an expected call of DeleteLabelGroupRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteLabelGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabelGroupRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteLabelGroupRequest), arg0)
}

// DeleteLabelGroupWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DeleteLabelGroupWithContext(arg0 context.Context, arg1 *lookoutequipment.DeleteLabelGroupInput, arg2 ...request.Option) (*lookoutequipment.DeleteLabelGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLabelGroupWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DeleteLabelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLabelGroupWithContext indicates an expected call of DeleteLabelGroupWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteLabelGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabelGroupWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteLabelGroupWithContext), varargs...)
}

// DeleteLabelRequest mocks base method
func (m *MockLookoutEquipmentAPI) DeleteLabelRequest(arg0 *lookoutequipment.DeleteLabelInput) (*request.Request, *lookoutequipment.DeleteLabelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DeleteLabelOutput)
	return ret0, ret1
}

// DeleteLabelRequest indicates an expected call of DeleteLabelRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteLabelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabelRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteLabelRequest), arg0)
}

// DeleteLabelWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DeleteLabelWithContext(arg0 context.Context, arg1 *lookoutequipment.DeleteLabelInput, arg2 ...request.Option) (*lookoutequipment.DeleteLabelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLabelWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DeleteLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLabelWithContext indicates an expected call of DeleteLabelWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteLabelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabelWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteLabelWithContext), varargs...)
}

// DeleteModel mocks base method
func (m *MockLookoutEquipmentAPI) DeleteModel(arg0 *lookoutequipment.DeleteModelInput) (*lookoutequipment.DeleteModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DeleteModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModel indicates an expected call of DeleteModel
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteModel), arg0)
}

// DeleteModelRequest mocks base method
func (m *MockLookoutEquipmentAPI) DeleteModelRequest(arg0 *lookoutequipment.DeleteModelInput) (*request.Request, *lookoutequipment.DeleteModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DeleteModelOutput)
	return ret0, ret1
}

// DeleteModelRequest indicates an expected call of DeleteModelRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteModelRequest), arg0)
}

// DeleteModelWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DeleteModelWithContext(arg0 context.Context, arg1 *lookoutequipment.DeleteModelInput, arg2 ...request.Option) (*lookoutequipment.DeleteModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DeleteModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelWithContext indicates an expected call of DeleteModelWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DeleteModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DeleteModelWithContext), varargs...)
}

// DescribeDataIngestionJob mocks base method
func (m *MockLookoutEquipmentAPI) DescribeDataIngestionJob(arg0 *lookoutequipment.DescribeDataIngestionJobInput) (*lookoutequipment.DescribeDataIngestionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataIngestionJob", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DescribeDataIngestionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataIngestionJob indicates an expected call of DescribeDataIngestionJob
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeDataIngestionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataIngestionJob", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeDataIngestionJob), arg0)
}

// DescribeDataIngestionJobRequest mocks base method
func (m *MockLookoutEquipmentAPI) DescribeDataIngestionJobRequest(arg0 *lookoutequipment.DescribeDataIngestionJobInput) (*request.Request, *lookoutequipment.DescribeDataIngestionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataIngestionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DescribeDataIngestionJobOutput)
	return ret0, ret1
}

// DescribeDataIngestionJobRequest indicates an expected call of DescribeDataIngestionJobRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeDataIngestionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataIngestionJobRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeDataIngestionJobRequest), arg0)
}

// DescribeDataIngestionJobWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DescribeDataIngestionJobWithContext(arg0 context.Context, arg1 *lookoutequipment.DescribeDataIngestionJobInput, arg2 ...request.Option) (*lookoutequipment.DescribeDataIngestionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDataIngestionJobWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DescribeDataIngestionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataIngestionJobWithContext indicates an expected call of DescribeDataIngestionJobWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeDataIngestionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataIngestionJobWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeDataIngestionJobWithContext), varargs...)
}

// DescribeDataset mocks base method
func (m *MockLookoutEquipmentAPI) DescribeDataset(arg0 *lookoutequipment.DescribeDatasetInput) (*lookoutequipment.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataset", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataset indicates an expected call of DescribeDataset
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataset", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeDataset), arg0)
}

// DescribeDatasetRequest mocks base method
func (m *MockLookoutEquipmentAPI) DescribeDatasetRequest(arg0 *lookoutequipment.DescribeDatasetInput) (*request.Request, *lookoutequipment.DescribeDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DescribeDatasetOutput)
	return ret0, ret1
}

// DescribeDatasetRequest indicates an expected call of DescribeDatasetRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeDatasetRequest), arg0)
}

// DescribeDatasetWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DescribeDatasetWithContext(arg0 context.Context, arg1 *lookoutequipment.DescribeDatasetInput, arg2 ...request.Option) (*lookoutequipment.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetWithContext indicates an expected call of DescribeDatasetWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeDatasetWithContext), varargs...)
}

// DescribeInferenceScheduler mocks base method
func (m *MockLookoutEquipmentAPI) DescribeInferenceScheduler(arg0 *lookoutequipment.DescribeInferenceSchedulerInput) (*lookoutequipment.DescribeInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInferenceScheduler", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DescribeInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInferenceScheduler indicates an expected call of DescribeInferenceScheduler
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeInferenceScheduler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInferenceScheduler", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeInferenceScheduler), arg0)
}

// DescribeInferenceSchedulerRequest mocks base method
func (m *MockLookoutEquipmentAPI) DescribeInferenceSchedulerRequest(arg0 *lookoutequipment.DescribeInferenceSchedulerInput) (*request.Request, *lookoutequipment.DescribeInferenceSchedulerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInferenceSchedulerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DescribeInferenceSchedulerOutput)
	return ret0, ret1
}

// DescribeInferenceSchedulerRequest indicates an expected call of DescribeInferenceSchedulerRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeInferenceSchedulerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInferenceSchedulerRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeInferenceSchedulerRequest), arg0)
}

// DescribeInferenceSchedulerWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DescribeInferenceSchedulerWithContext(arg0 context.Context, arg1 *lookoutequipment.DescribeInferenceSchedulerInput, arg2 ...request.Option) (*lookoutequipment.DescribeInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInferenceSchedulerWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DescribeInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInferenceSchedulerWithContext indicates an expected call of DescribeInferenceSchedulerWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeInferenceSchedulerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInferenceSchedulerWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeInferenceSchedulerWithContext), varargs...)
}

// DescribeLabel mocks base method
func (m *MockLookoutEquipmentAPI) DescribeLabel(arg0 *lookoutequipment.DescribeLabelInput) (*lookoutequipment.DescribeLabelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLabel", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DescribeLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLabel indicates an expected call of DescribeLabel
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLabel", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeLabel), arg0)
}

// DescribeLabelGroup mocks base method
func (m *MockLookoutEquipmentAPI) DescribeLabelGroup(arg0 *lookoutequipment.DescribeLabelGroupInput) (*lookoutequipment.DescribeLabelGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLabelGroup", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DescribeLabelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLabelGroup indicates an expected call of DescribeLabelGroup
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeLabelGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLabelGroup", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeLabelGroup), arg0)
}

// DescribeLabelGroupRequest mocks base method
func (m *MockLookoutEquipmentAPI) DescribeLabelGroupRequest(arg0 *lookoutequipment.DescribeLabelGroupInput) (*request.Request, *lookoutequipment.DescribeLabelGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLabelGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DescribeLabelGroupOutput)
	return ret0, ret1
}

// DescribeLabelGroupRequest indicates an expected call of DescribeLabelGroupRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeLabelGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLabelGroupRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeLabelGroupRequest), arg0)
}

// DescribeLabelGroupWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DescribeLabelGroupWithContext(arg0 context.Context, arg1 *lookoutequipment.DescribeLabelGroupInput, arg2 ...request.Option) (*lookoutequipment.DescribeLabelGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLabelGroupWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DescribeLabelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLabelGroupWithContext indicates an expected call of DescribeLabelGroupWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeLabelGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLabelGroupWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeLabelGroupWithContext), varargs...)
}

// DescribeLabelRequest mocks base method
func (m *MockLookoutEquipmentAPI) DescribeLabelRequest(arg0 *lookoutequipment.DescribeLabelInput) (*request.Request, *lookoutequipment.DescribeLabelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLabelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DescribeLabelOutput)
	return ret0, ret1
}

// DescribeLabelRequest indicates an expected call of DescribeLabelRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeLabelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLabelRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeLabelRequest), arg0)
}

// DescribeLabelWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DescribeLabelWithContext(arg0 context.Context, arg1 *lookoutequipment.DescribeLabelInput, arg2 ...request.Option) (*lookoutequipment.DescribeLabelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLabelWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DescribeLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLabelWithContext indicates an expected call of DescribeLabelWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeLabelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLabelWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeLabelWithContext), varargs...)
}

// DescribeModel mocks base method
func (m *MockLookoutEquipmentAPI) DescribeModel(arg0 *lookoutequipment.DescribeModelInput) (*lookoutequipment.DescribeModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeModel", arg0)
	ret0, _ := ret[0].(*lookoutequipment.DescribeModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModel indicates an expected call of DescribeModel
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModel", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeModel), arg0)
}

// DescribeModelRequest mocks base method
func (m *MockLookoutEquipmentAPI) DescribeModelRequest(arg0 *lookoutequipment.DescribeModelInput) (*request.Request, *lookoutequipment.DescribeModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.DescribeModelOutput)
	return ret0, ret1
}

// DescribeModelRequest indicates an expected call of DescribeModelRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeModelRequest), arg0)
}

// DescribeModelWithContext mocks base method
func (m *MockLookoutEquipmentAPI) DescribeModelWithContext(arg0 context.Context, arg1 *lookoutequipment.DescribeModelInput, arg2 ...request.Option) (*lookoutequipment.DescribeModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.DescribeModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelWithContext indicates an expected call of DescribeModelWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) DescribeModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).DescribeModelWithContext), varargs...)
}

// ListDataIngestionJobs mocks base method
func (m *MockLookoutEquipmentAPI) ListDataIngestionJobs(arg0 *lookoutequipment.ListDataIngestionJobsInput) (*lookoutequipment.ListDataIngestionJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataIngestionJobs", arg0)
	ret0, _ := ret[0].(*lookoutequipment.ListDataIngestionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataIngestionJobs indicates an expected call of ListDataIngestionJobs
func (mr *MockLookoutEquipmentAPIMockRecorder) ListDataIngestionJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataIngestionJobs", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListDataIngestionJobs), arg0)
}

// ListDataIngestionJobsPages mocks base method
func (m *MockLookoutEquipmentAPI) ListDataIngestionJobsPages(arg0 *lookoutequipment.ListDataIngestionJobsInput, arg1 func(*lookoutequipment.ListDataIngestionJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataIngestionJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataIngestionJobsPages indicates an expected call of ListDataIngestionJobsPages
func (mr *MockLookoutEquipmentAPIMockRecorder) ListDataIngestionJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataIngestionJobsPages", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListDataIngestionJobsPages), arg0, arg1)
}

// ListDataIngestionJobsPagesWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListDataIngestionJobsPagesWithContext(arg0 context.Context, arg1 *lookoutequipment.ListDataIngestionJobsInput, arg2 func(*lookoutequipment.ListDataIngestionJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataIngestionJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataIngestionJobsPagesWithContext indicates an expected call of ListDataIngestionJobsPagesWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListDataIngestionJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataIngestionJobsPagesWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListDataIngestionJobsPagesWithContext), varargs...)
}

// ListDataIngestionJobsRequest mocks base method
func (m *MockLookoutEquipmentAPI) ListDataIngestionJobsRequest(arg0 *lookoutequipment.ListDataIngestionJobsInput) (*request.Request, *lookoutequipment.ListDataIngestionJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataIngestionJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.ListDataIngestionJobsOutput)
	return ret0, ret1
}

// ListDataIngestionJobsRequest indicates an expected call of ListDataIngestionJobsRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) ListDataIngestionJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataIngestionJobsRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListDataIngestionJobsRequest), arg0)
}

// ListDataIngestionJobsWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListDataIngestionJobsWithContext(arg0 context.Context, arg1 *lookoutequipment.ListDataIngestionJobsInput, arg2 ...request.Option) (*lookoutequipment.ListDataIngestionJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataIngestionJobsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.ListDataIngestionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataIngestionJobsWithContext indicates an expected call of ListDataIngestionJobsWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListDataIngestionJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataIngestionJobsWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListDataIngestionJobsWithContext), varargs...)
}

// ListDatasets mocks base method
func (m *MockLookoutEquipmentAPI) ListDatasets(arg0 *lookoutequipment.ListDatasetsInput) (*lookoutequipment.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasets", arg0)
	ret0, _ := ret[0].(*lookoutequipment.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasets indicates an expected call of ListDatasets
func (mr *MockLookoutEquipmentAPIMockRecorder) ListDatasets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListDatasets), arg0)
}

// ListDatasetsPages mocks base method
func (m *MockLookoutEquipmentAPI) ListDatasetsPages(arg0 *lookoutequipment.ListDatasetsInput, arg1 func(*lookoutequipment.ListDatasetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPages indicates an expected call of ListDatasetsPages
func (mr *MockLookoutEquipmentAPIMockRecorder) ListDatasetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPages", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListDatasetsPages), arg0, arg1)
}

// ListDatasetsPagesWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListDatasetsPagesWithContext(arg0 context.Context, arg1 *lookoutequipment.ListDatasetsInput, arg2 func(*lookoutequipment.ListDatasetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPagesWithContext indicates an expected call of ListDatasetsPagesWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListDatasetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPagesWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListDatasetsPagesWithContext), varargs...)
}

// ListDatasetsRequest mocks base method
func (m *MockLookoutEquipmentAPI) ListDatasetsRequest(arg0 *lookoutequipment.ListDatasetsInput) (*request.Request, *lookoutequipment.ListDatasetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.ListDatasetsOutput)
	return ret0, ret1
}

// ListDatasetsRequest indicates an expected call of ListDatasetsRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) ListDatasetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListDatasetsRequest), arg0)
}

// ListDatasetsWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListDatasetsWithContext(arg0 context.Context, arg1 *lookoutequipment.ListDatasetsInput, arg2 ...request.Option) (*lookoutequipment.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetsWithContext indicates an expected call of ListDatasetsWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListDatasetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListDatasetsWithContext), varargs...)
}

// ListInferenceEvents mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceEvents(arg0 *lookoutequipment.ListInferenceEventsInput) (*lookoutequipment.ListInferenceEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInferenceEvents", arg0)
	ret0, _ := ret[0].(*lookoutequipment.ListInferenceEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInferenceEvents indicates an expected call of ListInferenceEvents
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceEvents", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceEvents), arg0)
}

// ListInferenceEventsPages mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceEventsPages(arg0 *lookoutequipment.ListInferenceEventsInput, arg1 func(*lookoutequipment.ListInferenceEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInferenceEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInferenceEventsPages indicates an expected call of ListInferenceEventsPages
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceEventsPages", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceEventsPages), arg0, arg1)
}

// ListInferenceEventsPagesWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceEventsPagesWithContext(arg0 context.Context, arg1 *lookoutequipment.ListInferenceEventsInput, arg2 func(*lookoutequipment.ListInferenceEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInferenceEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInferenceEventsPagesWithContext indicates an expected call of ListInferenceEventsPagesWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceEventsPagesWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceEventsPagesWithContext), varargs...)
}

// ListInferenceEventsRequest mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceEventsRequest(arg0 *lookoutequipment.ListInferenceEventsInput) (*request.Request, *lookoutequipment.ListInferenceEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInferenceEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.ListInferenceEventsOutput)
	return ret0, ret1
}

// ListInferenceEventsRequest indicates an expected call of ListInferenceEventsRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceEventsRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceEventsRequest), arg0)
}

// ListInferenceEventsWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceEventsWithContext(arg0 context.Context, arg1 *lookoutequipment.ListInferenceEventsInput, arg2 ...request.Option) (*lookoutequipment.ListInferenceEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInferenceEventsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.ListInferenceEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInferenceEventsWithContext indicates an expected call of ListInferenceEventsWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceEventsWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceEventsWithContext), varargs...)
}

// ListInferenceExecutions mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceExecutions(arg0 *lookoutequipment.ListInferenceExecutionsInput) (*lookoutequipment.ListInferenceExecutionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInferenceExecutions", arg0)
	ret0, _ := ret[0].(*lookoutequipment.ListInferenceExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInferenceExecutions indicates an expected call of ListInferenceExecutions
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceExecutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceExecutions", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceExecutions), arg0)
}

// ListInferenceExecutionsPages mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceExecutionsPages(arg0 *lookoutequipment.ListInferenceExecutionsInput, arg1 func(*lookoutequipment.ListInferenceExecutionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInferenceExecutionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInferenceExecutionsPages indicates an expected call of ListInferenceExecutionsPages
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceExecutionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceExecutionsPages", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceExecutionsPages), arg0, arg1)
}

// ListInferenceExecutionsPagesWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceExecutionsPagesWithContext(arg0 context.Context, arg1 *lookoutequipment.ListInferenceExecutionsInput, arg2 func(*lookoutequipment.ListInferenceExecutionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInferenceExecutionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInferenceExecutionsPagesWithContext indicates an expected call of ListInferenceExecutionsPagesWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceExecutionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceExecutionsPagesWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceExecutionsPagesWithContext), varargs...)
}

// ListInferenceExecutionsRequest mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceExecutionsRequest(arg0 *lookoutequipment.ListInferenceExecutionsInput) (*request.Request, *lookoutequipment.ListInferenceExecutionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInferenceExecutionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.ListInferenceExecutionsOutput)
	return ret0, ret1
}

// ListInferenceExecutionsRequest indicates an expected call of ListInferenceExecutionsRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceExecutionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceExecutionsRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceExecutionsRequest), arg0)
}

// ListInferenceExecutionsWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceExecutionsWithContext(arg0 context.Context, arg1 *lookoutequipment.ListInferenceExecutionsInput, arg2 ...request.Option) (*lookoutequipment.ListInferenceExecutionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInferenceExecutionsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.ListInferenceExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInferenceExecutionsWithContext indicates an expected call of ListInferenceExecutionsWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceExecutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceExecutionsWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceExecutionsWithContext), varargs...)
}

// ListInferenceSchedulers mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceSchedulers(arg0 *lookoutequipment.ListInferenceSchedulersInput) (*lookoutequipment.ListInferenceSchedulersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInferenceSchedulers", arg0)
	ret0, _ := ret[0].(*lookoutequipment.ListInferenceSchedulersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInferenceSchedulers indicates an expected call of ListInferenceSchedulers
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceSchedulers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceSchedulers", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceSchedulers), arg0)
}

// ListInferenceSchedulersPages mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceSchedulersPages(arg0 *lookoutequipment.ListInferenceSchedulersInput, arg1 func(*lookoutequipment.ListInferenceSchedulersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInferenceSchedulersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInferenceSchedulersPages indicates an expected call of ListInferenceSchedulersPages
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceSchedulersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceSchedulersPages", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceSchedulersPages), arg0, arg1)
}

// ListInferenceSchedulersPagesWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceSchedulersPagesWithContext(arg0 context.Context, arg1 *lookoutequipment.ListInferenceSchedulersInput, arg2 func(*lookoutequipment.ListInferenceSchedulersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInferenceSchedulersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInferenceSchedulersPagesWithContext indicates an expected call of ListInferenceSchedulersPagesWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceSchedulersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceSchedulersPagesWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceSchedulersPagesWithContext), varargs...)
}

// ListInferenceSchedulersRequest mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceSchedulersRequest(arg0 *lookoutequipment.ListInferenceSchedulersInput) (*request.Request, *lookoutequipment.ListInferenceSchedulersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInferenceSchedulersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.ListInferenceSchedulersOutput)
	return ret0, ret1
}

// ListInferenceSchedulersRequest indicates an expected call of ListInferenceSchedulersRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceSchedulersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceSchedulersRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceSchedulersRequest), arg0)
}

// ListInferenceSchedulersWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListInferenceSchedulersWithContext(arg0 context.Context, arg1 *lookoutequipment.ListInferenceSchedulersInput, arg2 ...request.Option) (*lookoutequipment.ListInferenceSchedulersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInferenceSchedulersWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.ListInferenceSchedulersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInferenceSchedulersWithContext indicates an expected call of ListInferenceSchedulersWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListInferenceSchedulersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceSchedulersWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListInferenceSchedulersWithContext), varargs...)
}

// ListLabelGroups mocks base method
func (m *MockLookoutEquipmentAPI) ListLabelGroups(arg0 *lookoutequipment.ListLabelGroupsInput) (*lookoutequipment.ListLabelGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabelGroups", arg0)
	ret0, _ := ret[0].(*lookoutequipment.ListLabelGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabelGroups indicates an expected call of ListLabelGroups
func (mr *MockLookoutEquipmentAPIMockRecorder) ListLabelGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelGroups", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListLabelGroups), arg0)
}

// ListLabelGroupsPages mocks base method
func (m *MockLookoutEquipmentAPI) ListLabelGroupsPages(arg0 *lookoutequipment.ListLabelGroupsInput, arg1 func(*lookoutequipment.ListLabelGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabelGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLabelGroupsPages indicates an expected call of ListLabelGroupsPages
func (mr *MockLookoutEquipmentAPIMockRecorder) ListLabelGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelGroupsPages", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListLabelGroupsPages), arg0, arg1)
}

// ListLabelGroupsPagesWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListLabelGroupsPagesWithContext(arg0 context.Context, arg1 *lookoutequipment.ListLabelGroupsInput, arg2 func(*lookoutequipment.ListLabelGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLabelGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLabelGroupsPagesWithContext indicates an expected call of ListLabelGroupsPagesWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListLabelGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelGroupsPagesWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListLabelGroupsPagesWithContext), varargs...)
}

// ListLabelGroupsRequest mocks base method
func (m *MockLookoutEquipmentAPI) ListLabelGroupsRequest(arg0 *lookoutequipment.ListLabelGroupsInput) (*request.Request, *lookoutequipment.ListLabelGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabelGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.ListLabelGroupsOutput)
	return ret0, ret1
}

// ListLabelGroupsRequest indicates an expected call of ListLabelGroupsRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) ListLabelGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelGroupsRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListLabelGroupsRequest), arg0)
}

// ListLabelGroupsWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListLabelGroupsWithContext(arg0 context.Context, arg1 *lookoutequipment.ListLabelGroupsInput, arg2 ...request.Option) (*lookoutequipment.ListLabelGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLabelGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.ListLabelGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabelGroupsWithContext indicates an expected call of ListLabelGroupsWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListLabelGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelGroupsWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListLabelGroupsWithContext), varargs...)
}

// ListLabels mocks base method
func (m *MockLookoutEquipmentAPI) ListLabels(arg0 *lookoutequipment.ListLabelsInput) (*lookoutequipment.ListLabelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabels", arg0)
	ret0, _ := ret[0].(*lookoutequipment.ListLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabels indicates an expected call of ListLabels
func (mr *MockLookoutEquipmentAPIMockRecorder) ListLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabels", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListLabels), arg0)
}

// ListLabelsPages mocks base method
func (m *MockLookoutEquipmentAPI) ListLabelsPages(arg0 *lookoutequipment.ListLabelsInput, arg1 func(*lookoutequipment.ListLabelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLabelsPages indicates an expected call of ListLabelsPages
func (mr *MockLookoutEquipmentAPIMockRecorder) ListLabelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelsPages", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListLabelsPages), arg0, arg1)
}

// ListLabelsPagesWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListLabelsPagesWithContext(arg0 context.Context, arg1 *lookoutequipment.ListLabelsInput, arg2 func(*lookoutequipment.ListLabelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLabelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLabelsPagesWithContext indicates an expected call of ListLabelsPagesWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListLabelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelsPagesWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListLabelsPagesWithContext), varargs...)
}

// ListLabelsRequest mocks base method
func (m *MockLookoutEquipmentAPI) ListLabelsRequest(arg0 *lookoutequipment.ListLabelsInput) (*request.Request, *lookoutequipment.ListLabelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.ListLabelsOutput)
	return ret0, ret1
}

// ListLabelsRequest indicates an expected call of ListLabelsRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) ListLabelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelsRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListLabelsRequest), arg0)
}

// ListLabelsWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListLabelsWithContext(arg0 context.Context, arg1 *lookoutequipment.ListLabelsInput, arg2 ...request.Option) (*lookoutequipment.ListLabelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLabelsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.ListLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabelsWithContext indicates an expected call of ListLabelsWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListLabelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelsWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListLabelsWithContext), varargs...)
}

// ListModels mocks base method
func (m *MockLookoutEquipmentAPI) ListModels(arg0 *lookoutequipment.ListModelsInput) (*lookoutequipment.ListModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", arg0)
	ret0, _ := ret[0].(*lookoutequipment.ListModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels
func (mr *MockLookoutEquipmentAPIMockRecorder) ListModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListModels), arg0)
}

// ListModelsPages mocks base method
func (m *MockLookoutEquipmentAPI) ListModelsPages(arg0 *lookoutequipment.ListModelsInput, arg1 func(*lookoutequipment.ListModelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListModelsPages indicates an expected call of ListModelsPages
func (mr *MockLookoutEquipmentAPIMockRecorder) ListModelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsPages", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListModelsPages), arg0, arg1)
}

// ListModelsPagesWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListModelsPagesWithContext(arg0 context.Context, arg1 *lookoutequipment.ListModelsInput, arg2 func(*lookoutequipment.ListModelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListModelsPagesWithContext indicates an expected call of ListModelsPagesWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListModelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsPagesWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListModelsPagesWithContext), varargs...)
}

// ListModelsRequest mocks base method
func (m *MockLookoutEquipmentAPI) ListModelsRequest(arg0 *lookoutequipment.ListModelsInput) (*request.Request, *lookoutequipment.ListModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.ListModelsOutput)
	return ret0, ret1
}

// ListModelsRequest indicates an expected call of ListModelsRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) ListModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListModelsRequest), arg0)
}

// ListModelsWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListModelsWithContext(arg0 context.Context, arg1 *lookoutequipment.ListModelsInput, arg2 ...request.Option) (*lookoutequipment.ListModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.ListModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelsWithContext indicates an expected call of ListModelsWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListModelsWithContext), varargs...)
}

// ListSensorStatistics mocks base method
func (m *MockLookoutEquipmentAPI) ListSensorStatistics(arg0 *lookoutequipment.ListSensorStatisticsInput) (*lookoutequipment.ListSensorStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSensorStatistics", arg0)
	ret0, _ := ret[0].(*lookoutequipment.ListSensorStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSensorStatistics indicates an expected call of ListSensorStatistics
func (mr *MockLookoutEquipmentAPIMockRecorder) ListSensorStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSensorStatistics", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListSensorStatistics), arg0)
}

// ListSensorStatisticsPages mocks base method
func (m *MockLookoutEquipmentAPI) ListSensorStatisticsPages(arg0 *lookoutequipment.ListSensorStatisticsInput, arg1 func(*lookoutequipment.ListSensorStatisticsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSensorStatisticsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSensorStatisticsPages indicates an expected call of ListSensorStatisticsPages
func (mr *MockLookoutEquipmentAPIMockRecorder) ListSensorStatisticsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSensorStatisticsPages", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListSensorStatisticsPages), arg0, arg1)
}

// ListSensorStatisticsPagesWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListSensorStatisticsPagesWithContext(arg0 context.Context, arg1 *lookoutequipment.ListSensorStatisticsInput, arg2 func(*lookoutequipment.ListSensorStatisticsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSensorStatisticsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSensorStatisticsPagesWithContext indicates an expected call of ListSensorStatisticsPagesWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListSensorStatisticsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSensorStatisticsPagesWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListSensorStatisticsPagesWithContext), varargs...)
}

// ListSensorStatisticsRequest mocks base method
func (m *MockLookoutEquipmentAPI) ListSensorStatisticsRequest(arg0 *lookoutequipment.ListSensorStatisticsInput) (*request.Request, *lookoutequipment.ListSensorStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSensorStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.ListSensorStatisticsOutput)
	return ret0, ret1
}

// ListSensorStatisticsRequest indicates an expected call of ListSensorStatisticsRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) ListSensorStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSensorStatisticsRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListSensorStatisticsRequest), arg0)
}

// ListSensorStatisticsWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListSensorStatisticsWithContext(arg0 context.Context, arg1 *lookoutequipment.ListSensorStatisticsInput, arg2 ...request.Option) (*lookoutequipment.ListSensorStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSensorStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.ListSensorStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSensorStatisticsWithContext indicates an expected call of ListSensorStatisticsWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListSensorStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSensorStatisticsWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListSensorStatisticsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockLookoutEquipmentAPI) ListTagsForResource(arg0 *lookoutequipment.ListTagsForResourceInput) (*lookoutequipment.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*lookoutequipment.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockLookoutEquipmentAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockLookoutEquipmentAPI) ListTagsForResourceRequest(arg0 *lookoutequipment.ListTagsForResourceInput) (*request.Request, *lookoutequipment.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockLookoutEquipmentAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *lookoutequipment.ListTagsForResourceInput, arg2 ...request.Option) (*lookoutequipment.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartDataIngestionJob mocks base method
func (m *MockLookoutEquipmentAPI) StartDataIngestionJob(arg0 *lookoutequipment.StartDataIngestionJobInput) (*lookoutequipment.StartDataIngestionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDataIngestionJob", arg0)
	ret0, _ := ret[0].(*lookoutequipment.StartDataIngestionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataIngestionJob indicates an expected call of StartDataIngestionJob
func (mr *MockLookoutEquipmentAPIMockRecorder) StartDataIngestionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataIngestionJob", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).StartDataIngestionJob), arg0)
}

// StartDataIngestionJobRequest mocks base method
func (m *MockLookoutEquipmentAPI) StartDataIngestionJobRequest(arg0 *lookoutequipment.StartDataIngestionJobInput) (*request.Request, *lookoutequipment.StartDataIngestionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDataIngestionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.StartDataIngestionJobOutput)
	return ret0, ret1
}

// StartDataIngestionJobRequest indicates an expected call of StartDataIngestionJobRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) StartDataIngestionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataIngestionJobRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).StartDataIngestionJobRequest), arg0)
}

// StartDataIngestionJobWithContext mocks base method
func (m *MockLookoutEquipmentAPI) StartDataIngestionJobWithContext(arg0 context.Context, arg1 *lookoutequipment.StartDataIngestionJobInput, arg2 ...request.Option) (*lookoutequipment.StartDataIngestionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDataIngestionJobWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.StartDataIngestionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataIngestionJobWithContext indicates an expected call of StartDataIngestionJobWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) StartDataIngestionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataIngestionJobWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).StartDataIngestionJobWithContext), varargs...)
}

// StartInferenceScheduler mocks base method
func (m *MockLookoutEquipmentAPI) StartInferenceScheduler(arg0 *lookoutequipment.StartInferenceSchedulerInput) (*lookoutequipment.StartInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInferenceScheduler", arg0)
	ret0, _ := ret[0].(*lookoutequipment.StartInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInferenceScheduler indicates an expected call of StartInferenceScheduler
func (mr *MockLookoutEquipmentAPIMockRecorder) StartInferenceScheduler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInferenceScheduler", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).StartInferenceScheduler), arg0)
}

// StartInferenceSchedulerRequest mocks base method
func (m *MockLookoutEquipmentAPI) StartInferenceSchedulerRequest(arg0 *lookoutequipment.StartInferenceSchedulerInput) (*request.Request, *lookoutequipment.StartInferenceSchedulerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInferenceSchedulerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.StartInferenceSchedulerOutput)
	return ret0, ret1
}

// StartInferenceSchedulerRequest indicates an expected call of StartInferenceSchedulerRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) StartInferenceSchedulerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInferenceSchedulerRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).StartInferenceSchedulerRequest), arg0)
}

// StartInferenceSchedulerWithContext mocks base method
func (m *MockLookoutEquipmentAPI) StartInferenceSchedulerWithContext(arg0 context.Context, arg1 *lookoutequipment.StartInferenceSchedulerInput, arg2 ...request.Option) (*lookoutequipment.StartInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartInferenceSchedulerWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.StartInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInferenceSchedulerWithContext indicates an expected call of StartInferenceSchedulerWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) StartInferenceSchedulerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInferenceSchedulerWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).StartInferenceSchedulerWithContext), varargs...)
}

// StopInferenceScheduler mocks base method
func (m *MockLookoutEquipmentAPI) StopInferenceScheduler(arg0 *lookoutequipment.StopInferenceSchedulerInput) (*lookoutequipment.StopInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInferenceScheduler", arg0)
	ret0, _ := ret[0].(*lookoutequipment.StopInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInferenceScheduler indicates an expected call of StopInferenceScheduler
func (mr *MockLookoutEquipmentAPIMockRecorder) StopInferenceScheduler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInferenceScheduler", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).StopInferenceScheduler), arg0)
}

// StopInferenceSchedulerRequest mocks base method
func (m *MockLookoutEquipmentAPI) StopInferenceSchedulerRequest(arg0 *lookoutequipment.StopInferenceSchedulerInput) (*request.Request, *lookoutequipment.StopInferenceSchedulerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInferenceSchedulerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.StopInferenceSchedulerOutput)
	return ret0, ret1
}

// StopInferenceSchedulerRequest indicates an expected call of StopInferenceSchedulerRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) StopInferenceSchedulerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInferenceSchedulerRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).StopInferenceSchedulerRequest), arg0)
}

// StopInferenceSchedulerWithContext mocks base method
func (m *MockLookoutEquipmentAPI) StopInferenceSchedulerWithContext(arg0 context.Context, arg1 *lookoutequipment.StopInferenceSchedulerInput, arg2 ...request.Option) (*lookoutequipment.StopInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInferenceSchedulerWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.StopInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInferenceSchedulerWithContext indicates an expected call of StopInferenceSchedulerWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) StopInferenceSchedulerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInferenceSchedulerWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).StopInferenceSchedulerWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockLookoutEquipmentAPI) TagResource(arg0 *lookoutequipment.TagResourceInput) (*lookoutequipment.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*lookoutequipment.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockLookoutEquipmentAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockLookoutEquipmentAPI) TagResourceRequest(arg0 *lookoutequipment.TagResourceInput) (*request.Request, *lookoutequipment.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockLookoutEquipmentAPI) TagResourceWithContext(arg0 context.Context, arg1 *lookoutequipment.TagResourceInput, arg2 ...request.Option) (*lookoutequipment.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockLookoutEquipmentAPI) UntagResource(arg0 *lookoutequipment.UntagResourceInput) (*lookoutequipment.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*lookoutequipment.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockLookoutEquipmentAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockLookoutEquipmentAPI) UntagResourceRequest(arg0 *lookoutequipment.UntagResourceInput) (*request.Request, *lookoutequipment.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockLookoutEquipmentAPI) UntagResourceWithContext(arg0 context.Context, arg1 *lookoutequipment.UntagResourceInput, arg2 ...request.Option) (*lookoutequipment.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateInferenceScheduler mocks base method
func (m *MockLookoutEquipmentAPI) UpdateInferenceScheduler(arg0 *lookoutequipment.UpdateInferenceSchedulerInput) (*lookoutequipment.UpdateInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInferenceScheduler", arg0)
	ret0, _ := ret[0].(*lookoutequipment.UpdateInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInferenceScheduler indicates an expected call of UpdateInferenceScheduler
func (mr *MockLookoutEquipmentAPIMockRecorder) UpdateInferenceScheduler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInferenceScheduler", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).UpdateInferenceScheduler), arg0)
}

// UpdateInferenceSchedulerRequest mocks base method
func (m *MockLookoutEquipmentAPI) UpdateInferenceSchedulerRequest(arg0 *lookoutequipment.UpdateInferenceSchedulerInput) (*request.Request, *lookoutequipment.UpdateInferenceSchedulerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInferenceSchedulerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.UpdateInferenceSchedulerOutput)
	return ret0, ret1
}

// UpdateInferenceSchedulerRequest indicates an expected call of UpdateInferenceSchedulerRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) UpdateInferenceSchedulerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInferenceSchedulerRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).UpdateInferenceSchedulerRequest), arg0)
}

// UpdateInferenceSchedulerWithContext mocks base method
func (m *MockLookoutEquipmentAPI) UpdateInferenceSchedulerWithContext(arg0 context.Context, arg1 *lookoutequipment.UpdateInferenceSchedulerInput, arg2 ...request.Option) (*lookoutequipment.UpdateInferenceSchedulerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInferenceSchedulerWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.UpdateInferenceSchedulerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInferenceSchedulerWithContext indicates an expected call of UpdateInferenceSchedulerWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) UpdateInferenceSchedulerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInferenceSchedulerWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).UpdateInferenceSchedulerWithContext), varargs...)
}

// UpdateLabelGroup mocks base method
func (m *MockLookoutEquipmentAPI) UpdateLabelGroup(arg0 *lookoutequipment.UpdateLabelGroupInput) (*lookoutequipment.UpdateLabelGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabelGroup", arg0)
	ret0, _ := ret[0].(*lookoutequipment.UpdateLabelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLabelGroup indicates an expected call of UpdateLabelGroup
func (mr *MockLookoutEquipmentAPIMockRecorder) UpdateLabelGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabelGroup", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).UpdateLabelGroup), arg0)
}

// UpdateLabelGroupRequest mocks base method
func (m *MockLookoutEquipmentAPI) UpdateLabelGroupRequest(arg0 *lookoutequipment.UpdateLabelGroupInput) (*request.Request, *lookoutequipment.UpdateLabelGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabelGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutequipment.UpdateLabelGroupOutput)
	return ret0, ret1
}

// UpdateLabelGroupRequest indicates an expected call of UpdateLabelGroupRequest
func (mr *MockLookoutEquipmentAPIMockRecorder) UpdateLabelGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabelGroupRequest", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).UpdateLabelGroupRequest), arg0)
}

// UpdateLabelGroupWithContext mocks base method
func (m *MockLookoutEquipmentAPI) UpdateLabelGroupWithContext(arg0 context.Context, arg1 *lookoutequipment.UpdateLabelGroupInput, arg2 ...request.Option) (*lookoutequipment.UpdateLabelGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLabelGroupWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutequipment.UpdateLabelGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLabelGroupWithContext indicates an expected call of UpdateLabelGroupWithContext
func (mr *MockLookoutEquipmentAPIMockRecorder) UpdateLabelGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabelGroupWithContext", reflect.TypeOf((*MockLookoutEquipmentAPI)(nil).UpdateLabelGroupWithContext), varargs...)
}
