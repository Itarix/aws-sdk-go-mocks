// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/iotfleetwise/iotfleetwiseiface (interfaces: IoTFleetWiseAPI)

// Package iotfleetwisemock is a generated GoMock package.
package iotfleetwisemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	iotfleetwise "github.com/aws/aws-sdk-go/service/iotfleetwise"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIoTFleetWiseAPI is a mock of IoTFleetWiseAPI interface
type MockIoTFleetWiseAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIoTFleetWiseAPIMockRecorder
}

// MockIoTFleetWiseAPIMockRecorder is the mock recorder for MockIoTFleetWiseAPI
type MockIoTFleetWiseAPIMockRecorder struct {
	mock *MockIoTFleetWiseAPI
}

// NewMockIoTFleetWiseAPI creates a new mock instance
func NewMockIoTFleetWiseAPI(ctrl *gomock.Controller) *MockIoTFleetWiseAPI {
	mock := &MockIoTFleetWiseAPI{ctrl: ctrl}
	mock.recorder = &MockIoTFleetWiseAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIoTFleetWiseAPI) EXPECT() *MockIoTFleetWiseAPIMockRecorder {
	return m.recorder
}

// AssociateVehicleFleet mocks base method
func (m *MockIoTFleetWiseAPI) AssociateVehicleFleet(arg0 *iotfleetwise.AssociateVehicleFleetInput) (*iotfleetwise.AssociateVehicleFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateVehicleFleet", arg0)
	ret0, _ := ret[0].(*iotfleetwise.AssociateVehicleFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateVehicleFleet indicates an expected call of AssociateVehicleFleet
func (mr *MockIoTFleetWiseAPIMockRecorder) AssociateVehicleFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateVehicleFleet", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).AssociateVehicleFleet), arg0)
}

// AssociateVehicleFleetRequest mocks base method
func (m *MockIoTFleetWiseAPI) AssociateVehicleFleetRequest(arg0 *iotfleetwise.AssociateVehicleFleetInput) (*request.Request, *iotfleetwise.AssociateVehicleFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateVehicleFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.AssociateVehicleFleetOutput)
	return ret0, ret1
}

// AssociateVehicleFleetRequest indicates an expected call of AssociateVehicleFleetRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) AssociateVehicleFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateVehicleFleetRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).AssociateVehicleFleetRequest), arg0)
}

// AssociateVehicleFleetWithContext mocks base method
func (m *MockIoTFleetWiseAPI) AssociateVehicleFleetWithContext(arg0 context.Context, arg1 *iotfleetwise.AssociateVehicleFleetInput, arg2 ...request.Option) (*iotfleetwise.AssociateVehicleFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateVehicleFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.AssociateVehicleFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateVehicleFleetWithContext indicates an expected call of AssociateVehicleFleetWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) AssociateVehicleFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateVehicleFleetWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).AssociateVehicleFleetWithContext), varargs...)
}

// BatchCreateVehicle mocks base method
func (m *MockIoTFleetWiseAPI) BatchCreateVehicle(arg0 *iotfleetwise.BatchCreateVehicleInput) (*iotfleetwise.BatchCreateVehicleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateVehicle", arg0)
	ret0, _ := ret[0].(*iotfleetwise.BatchCreateVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateVehicle indicates an expected call of BatchCreateVehicle
func (mr *MockIoTFleetWiseAPIMockRecorder) BatchCreateVehicle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateVehicle", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).BatchCreateVehicle), arg0)
}

// BatchCreateVehicleRequest mocks base method
func (m *MockIoTFleetWiseAPI) BatchCreateVehicleRequest(arg0 *iotfleetwise.BatchCreateVehicleInput) (*request.Request, *iotfleetwise.BatchCreateVehicleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateVehicleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.BatchCreateVehicleOutput)
	return ret0, ret1
}

// BatchCreateVehicleRequest indicates an expected call of BatchCreateVehicleRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) BatchCreateVehicleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateVehicleRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).BatchCreateVehicleRequest), arg0)
}

// BatchCreateVehicleWithContext mocks base method
func (m *MockIoTFleetWiseAPI) BatchCreateVehicleWithContext(arg0 context.Context, arg1 *iotfleetwise.BatchCreateVehicleInput, arg2 ...request.Option) (*iotfleetwise.BatchCreateVehicleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateVehicleWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.BatchCreateVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateVehicleWithContext indicates an expected call of BatchCreateVehicleWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) BatchCreateVehicleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateVehicleWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).BatchCreateVehicleWithContext), varargs...)
}

// BatchUpdateVehicle mocks base method
func (m *MockIoTFleetWiseAPI) BatchUpdateVehicle(arg0 *iotfleetwise.BatchUpdateVehicleInput) (*iotfleetwise.BatchUpdateVehicleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateVehicle", arg0)
	ret0, _ := ret[0].(*iotfleetwise.BatchUpdateVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateVehicle indicates an expected call of BatchUpdateVehicle
func (mr *MockIoTFleetWiseAPIMockRecorder) BatchUpdateVehicle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateVehicle", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).BatchUpdateVehicle), arg0)
}

// BatchUpdateVehicleRequest mocks base method
func (m *MockIoTFleetWiseAPI) BatchUpdateVehicleRequest(arg0 *iotfleetwise.BatchUpdateVehicleInput) (*request.Request, *iotfleetwise.BatchUpdateVehicleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateVehicleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.BatchUpdateVehicleOutput)
	return ret0, ret1
}

// BatchUpdateVehicleRequest indicates an expected call of BatchUpdateVehicleRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) BatchUpdateVehicleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateVehicleRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).BatchUpdateVehicleRequest), arg0)
}

// BatchUpdateVehicleWithContext mocks base method
func (m *MockIoTFleetWiseAPI) BatchUpdateVehicleWithContext(arg0 context.Context, arg1 *iotfleetwise.BatchUpdateVehicleInput, arg2 ...request.Option) (*iotfleetwise.BatchUpdateVehicleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateVehicleWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.BatchUpdateVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateVehicleWithContext indicates an expected call of BatchUpdateVehicleWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) BatchUpdateVehicleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateVehicleWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).BatchUpdateVehicleWithContext), varargs...)
}

// CreateCampaign mocks base method
func (m *MockIoTFleetWiseAPI) CreateCampaign(arg0 *iotfleetwise.CreateCampaignInput) (*iotfleetwise.CreateCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", arg0)
	ret0, _ := ret[0].(*iotfleetwise.CreateCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaign indicates an expected call of CreateCampaign
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateCampaign), arg0)
}

// CreateCampaignRequest mocks base method
func (m *MockIoTFleetWiseAPI) CreateCampaignRequest(arg0 *iotfleetwise.CreateCampaignInput) (*request.Request, *iotfleetwise.CreateCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.CreateCampaignOutput)
	return ret0, ret1
}

// CreateCampaignRequest indicates an expected call of CreateCampaignRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaignRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateCampaignRequest), arg0)
}

// CreateCampaignWithContext mocks base method
func (m *MockIoTFleetWiseAPI) CreateCampaignWithContext(arg0 context.Context, arg1 *iotfleetwise.CreateCampaignInput, arg2 ...request.Option) (*iotfleetwise.CreateCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.CreateCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaignWithContext indicates an expected call of CreateCampaignWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaignWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateCampaignWithContext), varargs...)
}

// CreateDecoderManifest mocks base method
func (m *MockIoTFleetWiseAPI) CreateDecoderManifest(arg0 *iotfleetwise.CreateDecoderManifestInput) (*iotfleetwise.CreateDecoderManifestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDecoderManifest", arg0)
	ret0, _ := ret[0].(*iotfleetwise.CreateDecoderManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDecoderManifest indicates an expected call of CreateDecoderManifest
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateDecoderManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDecoderManifest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateDecoderManifest), arg0)
}

// CreateDecoderManifestRequest mocks base method
func (m *MockIoTFleetWiseAPI) CreateDecoderManifestRequest(arg0 *iotfleetwise.CreateDecoderManifestInput) (*request.Request, *iotfleetwise.CreateDecoderManifestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDecoderManifestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.CreateDecoderManifestOutput)
	return ret0, ret1
}

// CreateDecoderManifestRequest indicates an expected call of CreateDecoderManifestRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateDecoderManifestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDecoderManifestRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateDecoderManifestRequest), arg0)
}

// CreateDecoderManifestWithContext mocks base method
func (m *MockIoTFleetWiseAPI) CreateDecoderManifestWithContext(arg0 context.Context, arg1 *iotfleetwise.CreateDecoderManifestInput, arg2 ...request.Option) (*iotfleetwise.CreateDecoderManifestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDecoderManifestWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.CreateDecoderManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDecoderManifestWithContext indicates an expected call of CreateDecoderManifestWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateDecoderManifestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDecoderManifestWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateDecoderManifestWithContext), varargs...)
}

// CreateFleet mocks base method
func (m *MockIoTFleetWiseAPI) CreateFleet(arg0 *iotfleetwise.CreateFleetInput) (*iotfleetwise.CreateFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleet", arg0)
	ret0, _ := ret[0].(*iotfleetwise.CreateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleet indicates an expected call of CreateFleet
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleet", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateFleet), arg0)
}

// CreateFleetRequest mocks base method
func (m *MockIoTFleetWiseAPI) CreateFleetRequest(arg0 *iotfleetwise.CreateFleetInput) (*request.Request, *iotfleetwise.CreateFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.CreateFleetOutput)
	return ret0, ret1
}

// CreateFleetRequest indicates an expected call of CreateFleetRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleetRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateFleetRequest), arg0)
}

// CreateFleetWithContext mocks base method
func (m *MockIoTFleetWiseAPI) CreateFleetWithContext(arg0 context.Context, arg1 *iotfleetwise.CreateFleetInput, arg2 ...request.Option) (*iotfleetwise.CreateFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.CreateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleetWithContext indicates an expected call of CreateFleetWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleetWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateFleetWithContext), varargs...)
}

// CreateModelManifest mocks base method
func (m *MockIoTFleetWiseAPI) CreateModelManifest(arg0 *iotfleetwise.CreateModelManifestInput) (*iotfleetwise.CreateModelManifestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelManifest", arg0)
	ret0, _ := ret[0].(*iotfleetwise.CreateModelManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelManifest indicates an expected call of CreateModelManifest
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateModelManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelManifest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateModelManifest), arg0)
}

// CreateModelManifestRequest mocks base method
func (m *MockIoTFleetWiseAPI) CreateModelManifestRequest(arg0 *iotfleetwise.CreateModelManifestInput) (*request.Request, *iotfleetwise.CreateModelManifestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelManifestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.CreateModelManifestOutput)
	return ret0, ret1
}

// CreateModelManifestRequest indicates an expected call of CreateModelManifestRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateModelManifestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelManifestRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateModelManifestRequest), arg0)
}

// CreateModelManifestWithContext mocks base method
func (m *MockIoTFleetWiseAPI) CreateModelManifestWithContext(arg0 context.Context, arg1 *iotfleetwise.CreateModelManifestInput, arg2 ...request.Option) (*iotfleetwise.CreateModelManifestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelManifestWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.CreateModelManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelManifestWithContext indicates an expected call of CreateModelManifestWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateModelManifestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelManifestWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateModelManifestWithContext), varargs...)
}

// CreateSignalCatalog mocks base method
func (m *MockIoTFleetWiseAPI) CreateSignalCatalog(arg0 *iotfleetwise.CreateSignalCatalogInput) (*iotfleetwise.CreateSignalCatalogOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignalCatalog", arg0)
	ret0, _ := ret[0].(*iotfleetwise.CreateSignalCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSignalCatalog indicates an expected call of CreateSignalCatalog
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateSignalCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignalCatalog", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateSignalCatalog), arg0)
}

// CreateSignalCatalogRequest mocks base method
func (m *MockIoTFleetWiseAPI) CreateSignalCatalogRequest(arg0 *iotfleetwise.CreateSignalCatalogInput) (*request.Request, *iotfleetwise.CreateSignalCatalogOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignalCatalogRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.CreateSignalCatalogOutput)
	return ret0, ret1
}

// CreateSignalCatalogRequest indicates an expected call of CreateSignalCatalogRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateSignalCatalogRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignalCatalogRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateSignalCatalogRequest), arg0)
}

// CreateSignalCatalogWithContext mocks base method
func (m *MockIoTFleetWiseAPI) CreateSignalCatalogWithContext(arg0 context.Context, arg1 *iotfleetwise.CreateSignalCatalogInput, arg2 ...request.Option) (*iotfleetwise.CreateSignalCatalogOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSignalCatalogWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.CreateSignalCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSignalCatalogWithContext indicates an expected call of CreateSignalCatalogWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateSignalCatalogWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignalCatalogWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateSignalCatalogWithContext), varargs...)
}

// CreateVehicle mocks base method
func (m *MockIoTFleetWiseAPI) CreateVehicle(arg0 *iotfleetwise.CreateVehicleInput) (*iotfleetwise.CreateVehicleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVehicle", arg0)
	ret0, _ := ret[0].(*iotfleetwise.CreateVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVehicle indicates an expected call of CreateVehicle
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateVehicle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVehicle", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateVehicle), arg0)
}

// CreateVehicleRequest mocks base method
func (m *MockIoTFleetWiseAPI) CreateVehicleRequest(arg0 *iotfleetwise.CreateVehicleInput) (*request.Request, *iotfleetwise.CreateVehicleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVehicleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.CreateVehicleOutput)
	return ret0, ret1
}

// CreateVehicleRequest indicates an expected call of CreateVehicleRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateVehicleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVehicleRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateVehicleRequest), arg0)
}

// CreateVehicleWithContext mocks base method
func (m *MockIoTFleetWiseAPI) CreateVehicleWithContext(arg0 context.Context, arg1 *iotfleetwise.CreateVehicleInput, arg2 ...request.Option) (*iotfleetwise.CreateVehicleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVehicleWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.CreateVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVehicleWithContext indicates an expected call of CreateVehicleWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) CreateVehicleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVehicleWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).CreateVehicleWithContext), varargs...)
}

// DeleteCampaign mocks base method
func (m *MockIoTFleetWiseAPI) DeleteCampaign(arg0 *iotfleetwise.DeleteCampaignInput) (*iotfleetwise.DeleteCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCampaign", arg0)
	ret0, _ := ret[0].(*iotfleetwise.DeleteCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCampaign indicates an expected call of DeleteCampaign
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaign", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteCampaign), arg0)
}

// DeleteCampaignRequest mocks base method
func (m *MockIoTFleetWiseAPI) DeleteCampaignRequest(arg0 *iotfleetwise.DeleteCampaignInput) (*request.Request, *iotfleetwise.DeleteCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.DeleteCampaignOutput)
	return ret0, ret1
}

// DeleteCampaignRequest indicates an expected call of DeleteCampaignRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaignRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteCampaignRequest), arg0)
}

// DeleteCampaignWithContext mocks base method
func (m *MockIoTFleetWiseAPI) DeleteCampaignWithContext(arg0 context.Context, arg1 *iotfleetwise.DeleteCampaignInput, arg2 ...request.Option) (*iotfleetwise.DeleteCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.DeleteCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCampaignWithContext indicates an expected call of DeleteCampaignWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaignWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteCampaignWithContext), varargs...)
}

// DeleteDecoderManifest mocks base method
func (m *MockIoTFleetWiseAPI) DeleteDecoderManifest(arg0 *iotfleetwise.DeleteDecoderManifestInput) (*iotfleetwise.DeleteDecoderManifestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDecoderManifest", arg0)
	ret0, _ := ret[0].(*iotfleetwise.DeleteDecoderManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDecoderManifest indicates an expected call of DeleteDecoderManifest
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteDecoderManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDecoderManifest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteDecoderManifest), arg0)
}

// DeleteDecoderManifestRequest mocks base method
func (m *MockIoTFleetWiseAPI) DeleteDecoderManifestRequest(arg0 *iotfleetwise.DeleteDecoderManifestInput) (*request.Request, *iotfleetwise.DeleteDecoderManifestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDecoderManifestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.DeleteDecoderManifestOutput)
	return ret0, ret1
}

// DeleteDecoderManifestRequest indicates an expected call of DeleteDecoderManifestRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteDecoderManifestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDecoderManifestRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteDecoderManifestRequest), arg0)
}

// DeleteDecoderManifestWithContext mocks base method
func (m *MockIoTFleetWiseAPI) DeleteDecoderManifestWithContext(arg0 context.Context, arg1 *iotfleetwise.DeleteDecoderManifestInput, arg2 ...request.Option) (*iotfleetwise.DeleteDecoderManifestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDecoderManifestWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.DeleteDecoderManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDecoderManifestWithContext indicates an expected call of DeleteDecoderManifestWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteDecoderManifestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDecoderManifestWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteDecoderManifestWithContext), varargs...)
}

// DeleteFleet mocks base method
func (m *MockIoTFleetWiseAPI) DeleteFleet(arg0 *iotfleetwise.DeleteFleetInput) (*iotfleetwise.DeleteFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleet", arg0)
	ret0, _ := ret[0].(*iotfleetwise.DeleteFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFleet indicates an expected call of DeleteFleet
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleet", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteFleet), arg0)
}

// DeleteFleetRequest mocks base method
func (m *MockIoTFleetWiseAPI) DeleteFleetRequest(arg0 *iotfleetwise.DeleteFleetInput) (*request.Request, *iotfleetwise.DeleteFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.DeleteFleetOutput)
	return ret0, ret1
}

// DeleteFleetRequest indicates an expected call of DeleteFleetRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleetRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteFleetRequest), arg0)
}

// DeleteFleetWithContext mocks base method
func (m *MockIoTFleetWiseAPI) DeleteFleetWithContext(arg0 context.Context, arg1 *iotfleetwise.DeleteFleetInput, arg2 ...request.Option) (*iotfleetwise.DeleteFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.DeleteFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFleetWithContext indicates an expected call of DeleteFleetWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleetWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteFleetWithContext), varargs...)
}

// DeleteModelManifest mocks base method
func (m *MockIoTFleetWiseAPI) DeleteModelManifest(arg0 *iotfleetwise.DeleteModelManifestInput) (*iotfleetwise.DeleteModelManifestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelManifest", arg0)
	ret0, _ := ret[0].(*iotfleetwise.DeleteModelManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelManifest indicates an expected call of DeleteModelManifest
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteModelManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelManifest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteModelManifest), arg0)
}

// DeleteModelManifestRequest mocks base method
func (m *MockIoTFleetWiseAPI) DeleteModelManifestRequest(arg0 *iotfleetwise.DeleteModelManifestInput) (*request.Request, *iotfleetwise.DeleteModelManifestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelManifestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.DeleteModelManifestOutput)
	return ret0, ret1
}

// DeleteModelManifestRequest indicates an expected call of DeleteModelManifestRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteModelManifestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelManifestRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteModelManifestRequest), arg0)
}

// DeleteModelManifestWithContext mocks base method
func (m *MockIoTFleetWiseAPI) DeleteModelManifestWithContext(arg0 context.Context, arg1 *iotfleetwise.DeleteModelManifestInput, arg2 ...request.Option) (*iotfleetwise.DeleteModelManifestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelManifestWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.DeleteModelManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelManifestWithContext indicates an expected call of DeleteModelManifestWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteModelManifestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelManifestWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteModelManifestWithContext), varargs...)
}

// DeleteSignalCatalog mocks base method
func (m *MockIoTFleetWiseAPI) DeleteSignalCatalog(arg0 *iotfleetwise.DeleteSignalCatalogInput) (*iotfleetwise.DeleteSignalCatalogOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSignalCatalog", arg0)
	ret0, _ := ret[0].(*iotfleetwise.DeleteSignalCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSignalCatalog indicates an expected call of DeleteSignalCatalog
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteSignalCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSignalCatalog", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteSignalCatalog), arg0)
}

// DeleteSignalCatalogRequest mocks base method
func (m *MockIoTFleetWiseAPI) DeleteSignalCatalogRequest(arg0 *iotfleetwise.DeleteSignalCatalogInput) (*request.Request, *iotfleetwise.DeleteSignalCatalogOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSignalCatalogRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.DeleteSignalCatalogOutput)
	return ret0, ret1
}

// DeleteSignalCatalogRequest indicates an expected call of DeleteSignalCatalogRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteSignalCatalogRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSignalCatalogRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteSignalCatalogRequest), arg0)
}

// DeleteSignalCatalogWithContext mocks base method
func (m *MockIoTFleetWiseAPI) DeleteSignalCatalogWithContext(arg0 context.Context, arg1 *iotfleetwise.DeleteSignalCatalogInput, arg2 ...request.Option) (*iotfleetwise.DeleteSignalCatalogOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSignalCatalogWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.DeleteSignalCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSignalCatalogWithContext indicates an expected call of DeleteSignalCatalogWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteSignalCatalogWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSignalCatalogWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteSignalCatalogWithContext), varargs...)
}

// DeleteVehicle mocks base method
func (m *MockIoTFleetWiseAPI) DeleteVehicle(arg0 *iotfleetwise.DeleteVehicleInput) (*iotfleetwise.DeleteVehicleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVehicle", arg0)
	ret0, _ := ret[0].(*iotfleetwise.DeleteVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVehicle indicates an expected call of DeleteVehicle
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteVehicle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVehicle", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteVehicle), arg0)
}

// DeleteVehicleRequest mocks base method
func (m *MockIoTFleetWiseAPI) DeleteVehicleRequest(arg0 *iotfleetwise.DeleteVehicleInput) (*request.Request, *iotfleetwise.DeleteVehicleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVehicleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.DeleteVehicleOutput)
	return ret0, ret1
}

// DeleteVehicleRequest indicates an expected call of DeleteVehicleRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteVehicleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVehicleRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteVehicleRequest), arg0)
}

// DeleteVehicleWithContext mocks base method
func (m *MockIoTFleetWiseAPI) DeleteVehicleWithContext(arg0 context.Context, arg1 *iotfleetwise.DeleteVehicleInput, arg2 ...request.Option) (*iotfleetwise.DeleteVehicleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVehicleWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.DeleteVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVehicleWithContext indicates an expected call of DeleteVehicleWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) DeleteVehicleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVehicleWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DeleteVehicleWithContext), varargs...)
}

// DisassociateVehicleFleet mocks base method
func (m *MockIoTFleetWiseAPI) DisassociateVehicleFleet(arg0 *iotfleetwise.DisassociateVehicleFleetInput) (*iotfleetwise.DisassociateVehicleFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateVehicleFleet", arg0)
	ret0, _ := ret[0].(*iotfleetwise.DisassociateVehicleFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateVehicleFleet indicates an expected call of DisassociateVehicleFleet
func (mr *MockIoTFleetWiseAPIMockRecorder) DisassociateVehicleFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateVehicleFleet", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DisassociateVehicleFleet), arg0)
}

// DisassociateVehicleFleetRequest mocks base method
func (m *MockIoTFleetWiseAPI) DisassociateVehicleFleetRequest(arg0 *iotfleetwise.DisassociateVehicleFleetInput) (*request.Request, *iotfleetwise.DisassociateVehicleFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateVehicleFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.DisassociateVehicleFleetOutput)
	return ret0, ret1
}

// DisassociateVehicleFleetRequest indicates an expected call of DisassociateVehicleFleetRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) DisassociateVehicleFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateVehicleFleetRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DisassociateVehicleFleetRequest), arg0)
}

// DisassociateVehicleFleetWithContext mocks base method
func (m *MockIoTFleetWiseAPI) DisassociateVehicleFleetWithContext(arg0 context.Context, arg1 *iotfleetwise.DisassociateVehicleFleetInput, arg2 ...request.Option) (*iotfleetwise.DisassociateVehicleFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateVehicleFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.DisassociateVehicleFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateVehicleFleetWithContext indicates an expected call of DisassociateVehicleFleetWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) DisassociateVehicleFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateVehicleFleetWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).DisassociateVehicleFleetWithContext), varargs...)
}

// GetCampaign mocks base method
func (m *MockIoTFleetWiseAPI) GetCampaign(arg0 *iotfleetwise.GetCampaignInput) (*iotfleetwise.GetCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaign", arg0)
	ret0, _ := ret[0].(*iotfleetwise.GetCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaign indicates an expected call of GetCampaign
func (mr *MockIoTFleetWiseAPIMockRecorder) GetCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaign", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetCampaign), arg0)
}

// GetCampaignRequest mocks base method
func (m *MockIoTFleetWiseAPI) GetCampaignRequest(arg0 *iotfleetwise.GetCampaignInput) (*request.Request, *iotfleetwise.GetCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.GetCampaignOutput)
	return ret0, ret1
}

// GetCampaignRequest indicates an expected call of GetCampaignRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetCampaignRequest), arg0)
}

// GetCampaignWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetCampaignWithContext(arg0 context.Context, arg1 *iotfleetwise.GetCampaignInput, arg2 ...request.Option) (*iotfleetwise.GetCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.GetCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignWithContext indicates an expected call of GetCampaignWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetCampaignWithContext), varargs...)
}

// GetDecoderManifest mocks base method
func (m *MockIoTFleetWiseAPI) GetDecoderManifest(arg0 *iotfleetwise.GetDecoderManifestInput) (*iotfleetwise.GetDecoderManifestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecoderManifest", arg0)
	ret0, _ := ret[0].(*iotfleetwise.GetDecoderManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecoderManifest indicates an expected call of GetDecoderManifest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetDecoderManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecoderManifest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetDecoderManifest), arg0)
}

// GetDecoderManifestRequest mocks base method
func (m *MockIoTFleetWiseAPI) GetDecoderManifestRequest(arg0 *iotfleetwise.GetDecoderManifestInput) (*request.Request, *iotfleetwise.GetDecoderManifestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecoderManifestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.GetDecoderManifestOutput)
	return ret0, ret1
}

// GetDecoderManifestRequest indicates an expected call of GetDecoderManifestRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetDecoderManifestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecoderManifestRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetDecoderManifestRequest), arg0)
}

// GetDecoderManifestWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetDecoderManifestWithContext(arg0 context.Context, arg1 *iotfleetwise.GetDecoderManifestInput, arg2 ...request.Option) (*iotfleetwise.GetDecoderManifestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDecoderManifestWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.GetDecoderManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecoderManifestWithContext indicates an expected call of GetDecoderManifestWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetDecoderManifestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecoderManifestWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetDecoderManifestWithContext), varargs...)
}

// GetEncryptionConfiguration mocks base method
func (m *MockIoTFleetWiseAPI) GetEncryptionConfiguration(arg0 *iotfleetwise.GetEncryptionConfigurationInput) (*iotfleetwise.GetEncryptionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptionConfiguration", arg0)
	ret0, _ := ret[0].(*iotfleetwise.GetEncryptionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionConfiguration indicates an expected call of GetEncryptionConfiguration
func (mr *MockIoTFleetWiseAPIMockRecorder) GetEncryptionConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionConfiguration", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetEncryptionConfiguration), arg0)
}

// GetEncryptionConfigurationRequest mocks base method
func (m *MockIoTFleetWiseAPI) GetEncryptionConfigurationRequest(arg0 *iotfleetwise.GetEncryptionConfigurationInput) (*request.Request, *iotfleetwise.GetEncryptionConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.GetEncryptionConfigurationOutput)
	return ret0, ret1
}

// GetEncryptionConfigurationRequest indicates an expected call of GetEncryptionConfigurationRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetEncryptionConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionConfigurationRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetEncryptionConfigurationRequest), arg0)
}

// GetEncryptionConfigurationWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetEncryptionConfigurationWithContext(arg0 context.Context, arg1 *iotfleetwise.GetEncryptionConfigurationInput, arg2 ...request.Option) (*iotfleetwise.GetEncryptionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEncryptionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.GetEncryptionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionConfigurationWithContext indicates an expected call of GetEncryptionConfigurationWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetEncryptionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionConfigurationWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetEncryptionConfigurationWithContext), varargs...)
}

// GetFleet mocks base method
func (m *MockIoTFleetWiseAPI) GetFleet(arg0 *iotfleetwise.GetFleetInput) (*iotfleetwise.GetFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFleet", arg0)
	ret0, _ := ret[0].(*iotfleetwise.GetFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFleet indicates an expected call of GetFleet
func (mr *MockIoTFleetWiseAPIMockRecorder) GetFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleet", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetFleet), arg0)
}

// GetFleetRequest mocks base method
func (m *MockIoTFleetWiseAPI) GetFleetRequest(arg0 *iotfleetwise.GetFleetInput) (*request.Request, *iotfleetwise.GetFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.GetFleetOutput)
	return ret0, ret1
}

// GetFleetRequest indicates an expected call of GetFleetRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleetRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetFleetRequest), arg0)
}

// GetFleetWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetFleetWithContext(arg0 context.Context, arg1 *iotfleetwise.GetFleetInput, arg2 ...request.Option) (*iotfleetwise.GetFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.GetFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFleetWithContext indicates an expected call of GetFleetWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleetWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetFleetWithContext), varargs...)
}

// GetLoggingOptions mocks base method
func (m *MockIoTFleetWiseAPI) GetLoggingOptions(arg0 *iotfleetwise.GetLoggingOptionsInput) (*iotfleetwise.GetLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingOptions", arg0)
	ret0, _ := ret[0].(*iotfleetwise.GetLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingOptions indicates an expected call of GetLoggingOptions
func (mr *MockIoTFleetWiseAPIMockRecorder) GetLoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingOptions", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetLoggingOptions), arg0)
}

// GetLoggingOptionsRequest mocks base method
func (m *MockIoTFleetWiseAPI) GetLoggingOptionsRequest(arg0 *iotfleetwise.GetLoggingOptionsInput) (*request.Request, *iotfleetwise.GetLoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.GetLoggingOptionsOutput)
	return ret0, ret1
}

// GetLoggingOptionsRequest indicates an expected call of GetLoggingOptionsRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetLoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingOptionsRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetLoggingOptionsRequest), arg0)
}

// GetLoggingOptionsWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetLoggingOptionsWithContext(arg0 context.Context, arg1 *iotfleetwise.GetLoggingOptionsInput, arg2 ...request.Option) (*iotfleetwise.GetLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.GetLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingOptionsWithContext indicates an expected call of GetLoggingOptionsWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetLoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingOptionsWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetLoggingOptionsWithContext), varargs...)
}

// GetModelManifest mocks base method
func (m *MockIoTFleetWiseAPI) GetModelManifest(arg0 *iotfleetwise.GetModelManifestInput) (*iotfleetwise.GetModelManifestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelManifest", arg0)
	ret0, _ := ret[0].(*iotfleetwise.GetModelManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelManifest indicates an expected call of GetModelManifest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetModelManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelManifest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetModelManifest), arg0)
}

// GetModelManifestRequest mocks base method
func (m *MockIoTFleetWiseAPI) GetModelManifestRequest(arg0 *iotfleetwise.GetModelManifestInput) (*request.Request, *iotfleetwise.GetModelManifestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelManifestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.GetModelManifestOutput)
	return ret0, ret1
}

// GetModelManifestRequest indicates an expected call of GetModelManifestRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetModelManifestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelManifestRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetModelManifestRequest), arg0)
}

// GetModelManifestWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetModelManifestWithContext(arg0 context.Context, arg1 *iotfleetwise.GetModelManifestInput, arg2 ...request.Option) (*iotfleetwise.GetModelManifestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelManifestWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.GetModelManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelManifestWithContext indicates an expected call of GetModelManifestWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetModelManifestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelManifestWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetModelManifestWithContext), varargs...)
}

// GetRegisterAccountStatus mocks base method
func (m *MockIoTFleetWiseAPI) GetRegisterAccountStatus(arg0 *iotfleetwise.GetRegisterAccountStatusInput) (*iotfleetwise.GetRegisterAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterAccountStatus", arg0)
	ret0, _ := ret[0].(*iotfleetwise.GetRegisterAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterAccountStatus indicates an expected call of GetRegisterAccountStatus
func (mr *MockIoTFleetWiseAPIMockRecorder) GetRegisterAccountStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterAccountStatus", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetRegisterAccountStatus), arg0)
}

// GetRegisterAccountStatusRequest mocks base method
func (m *MockIoTFleetWiseAPI) GetRegisterAccountStatusRequest(arg0 *iotfleetwise.GetRegisterAccountStatusInput) (*request.Request, *iotfleetwise.GetRegisterAccountStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterAccountStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.GetRegisterAccountStatusOutput)
	return ret0, ret1
}

// GetRegisterAccountStatusRequest indicates an expected call of GetRegisterAccountStatusRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetRegisterAccountStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterAccountStatusRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetRegisterAccountStatusRequest), arg0)
}

// GetRegisterAccountStatusWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetRegisterAccountStatusWithContext(arg0 context.Context, arg1 *iotfleetwise.GetRegisterAccountStatusInput, arg2 ...request.Option) (*iotfleetwise.GetRegisterAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegisterAccountStatusWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.GetRegisterAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterAccountStatusWithContext indicates an expected call of GetRegisterAccountStatusWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetRegisterAccountStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterAccountStatusWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetRegisterAccountStatusWithContext), varargs...)
}

// GetSignalCatalog mocks base method
func (m *MockIoTFleetWiseAPI) GetSignalCatalog(arg0 *iotfleetwise.GetSignalCatalogInput) (*iotfleetwise.GetSignalCatalogOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignalCatalog", arg0)
	ret0, _ := ret[0].(*iotfleetwise.GetSignalCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignalCatalog indicates an expected call of GetSignalCatalog
func (mr *MockIoTFleetWiseAPIMockRecorder) GetSignalCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignalCatalog", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetSignalCatalog), arg0)
}

// GetSignalCatalogRequest mocks base method
func (m *MockIoTFleetWiseAPI) GetSignalCatalogRequest(arg0 *iotfleetwise.GetSignalCatalogInput) (*request.Request, *iotfleetwise.GetSignalCatalogOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignalCatalogRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.GetSignalCatalogOutput)
	return ret0, ret1
}

// GetSignalCatalogRequest indicates an expected call of GetSignalCatalogRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetSignalCatalogRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignalCatalogRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetSignalCatalogRequest), arg0)
}

// GetSignalCatalogWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetSignalCatalogWithContext(arg0 context.Context, arg1 *iotfleetwise.GetSignalCatalogInput, arg2 ...request.Option) (*iotfleetwise.GetSignalCatalogOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSignalCatalogWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.GetSignalCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignalCatalogWithContext indicates an expected call of GetSignalCatalogWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetSignalCatalogWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignalCatalogWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetSignalCatalogWithContext), varargs...)
}

// GetVehicle mocks base method
func (m *MockIoTFleetWiseAPI) GetVehicle(arg0 *iotfleetwise.GetVehicleInput) (*iotfleetwise.GetVehicleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicle", arg0)
	ret0, _ := ret[0].(*iotfleetwise.GetVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicle indicates an expected call of GetVehicle
func (mr *MockIoTFleetWiseAPIMockRecorder) GetVehicle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicle", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetVehicle), arg0)
}

// GetVehicleRequest mocks base method
func (m *MockIoTFleetWiseAPI) GetVehicleRequest(arg0 *iotfleetwise.GetVehicleInput) (*request.Request, *iotfleetwise.GetVehicleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.GetVehicleOutput)
	return ret0, ret1
}

// GetVehicleRequest indicates an expected call of GetVehicleRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetVehicleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetVehicleRequest), arg0)
}

// GetVehicleStatus mocks base method
func (m *MockIoTFleetWiseAPI) GetVehicleStatus(arg0 *iotfleetwise.GetVehicleStatusInput) (*iotfleetwise.GetVehicleStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleStatus", arg0)
	ret0, _ := ret[0].(*iotfleetwise.GetVehicleStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleStatus indicates an expected call of GetVehicleStatus
func (mr *MockIoTFleetWiseAPIMockRecorder) GetVehicleStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleStatus", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetVehicleStatus), arg0)
}

// GetVehicleStatusPages mocks base method
func (m *MockIoTFleetWiseAPI) GetVehicleStatusPages(arg0 *iotfleetwise.GetVehicleStatusInput, arg1 func(*iotfleetwise.GetVehicleStatusOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleStatusPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetVehicleStatusPages indicates an expected call of GetVehicleStatusPages
func (mr *MockIoTFleetWiseAPIMockRecorder) GetVehicleStatusPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleStatusPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetVehicleStatusPages), arg0, arg1)
}

// GetVehicleStatusPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetVehicleStatusPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.GetVehicleStatusInput, arg2 func(*iotfleetwise.GetVehicleStatusOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVehicleStatusPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetVehicleStatusPagesWithContext indicates an expected call of GetVehicleStatusPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetVehicleStatusPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleStatusPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetVehicleStatusPagesWithContext), varargs...)
}

// GetVehicleStatusRequest mocks base method
func (m *MockIoTFleetWiseAPI) GetVehicleStatusRequest(arg0 *iotfleetwise.GetVehicleStatusInput) (*request.Request, *iotfleetwise.GetVehicleStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.GetVehicleStatusOutput)
	return ret0, ret1
}

// GetVehicleStatusRequest indicates an expected call of GetVehicleStatusRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) GetVehicleStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleStatusRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetVehicleStatusRequest), arg0)
}

// GetVehicleStatusWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetVehicleStatusWithContext(arg0 context.Context, arg1 *iotfleetwise.GetVehicleStatusInput, arg2 ...request.Option) (*iotfleetwise.GetVehicleStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVehicleStatusWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.GetVehicleStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleStatusWithContext indicates an expected call of GetVehicleStatusWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetVehicleStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleStatusWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetVehicleStatusWithContext), varargs...)
}

// GetVehicleWithContext mocks base method
func (m *MockIoTFleetWiseAPI) GetVehicleWithContext(arg0 context.Context, arg1 *iotfleetwise.GetVehicleInput, arg2 ...request.Option) (*iotfleetwise.GetVehicleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVehicleWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.GetVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleWithContext indicates an expected call of GetVehicleWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) GetVehicleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).GetVehicleWithContext), varargs...)
}

// ImportDecoderManifest mocks base method
func (m *MockIoTFleetWiseAPI) ImportDecoderManifest(arg0 *iotfleetwise.ImportDecoderManifestInput) (*iotfleetwise.ImportDecoderManifestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDecoderManifest", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ImportDecoderManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDecoderManifest indicates an expected call of ImportDecoderManifest
func (mr *MockIoTFleetWiseAPIMockRecorder) ImportDecoderManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDecoderManifest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ImportDecoderManifest), arg0)
}

// ImportDecoderManifestRequest mocks base method
func (m *MockIoTFleetWiseAPI) ImportDecoderManifestRequest(arg0 *iotfleetwise.ImportDecoderManifestInput) (*request.Request, *iotfleetwise.ImportDecoderManifestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDecoderManifestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ImportDecoderManifestOutput)
	return ret0, ret1
}

// ImportDecoderManifestRequest indicates an expected call of ImportDecoderManifestRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ImportDecoderManifestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDecoderManifestRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ImportDecoderManifestRequest), arg0)
}

// ImportDecoderManifestWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ImportDecoderManifestWithContext(arg0 context.Context, arg1 *iotfleetwise.ImportDecoderManifestInput, arg2 ...request.Option) (*iotfleetwise.ImportDecoderManifestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportDecoderManifestWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ImportDecoderManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDecoderManifestWithContext indicates an expected call of ImportDecoderManifestWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ImportDecoderManifestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDecoderManifestWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ImportDecoderManifestWithContext), varargs...)
}

// ImportSignalCatalog mocks base method
func (m *MockIoTFleetWiseAPI) ImportSignalCatalog(arg0 *iotfleetwise.ImportSignalCatalogInput) (*iotfleetwise.ImportSignalCatalogOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSignalCatalog", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ImportSignalCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportSignalCatalog indicates an expected call of ImportSignalCatalog
func (mr *MockIoTFleetWiseAPIMockRecorder) ImportSignalCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSignalCatalog", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ImportSignalCatalog), arg0)
}

// ImportSignalCatalogRequest mocks base method
func (m *MockIoTFleetWiseAPI) ImportSignalCatalogRequest(arg0 *iotfleetwise.ImportSignalCatalogInput) (*request.Request, *iotfleetwise.ImportSignalCatalogOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSignalCatalogRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ImportSignalCatalogOutput)
	return ret0, ret1
}

// ImportSignalCatalogRequest indicates an expected call of ImportSignalCatalogRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ImportSignalCatalogRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSignalCatalogRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ImportSignalCatalogRequest), arg0)
}

// ImportSignalCatalogWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ImportSignalCatalogWithContext(arg0 context.Context, arg1 *iotfleetwise.ImportSignalCatalogInput, arg2 ...request.Option) (*iotfleetwise.ImportSignalCatalogOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportSignalCatalogWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ImportSignalCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportSignalCatalogWithContext indicates an expected call of ImportSignalCatalogWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ImportSignalCatalogWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSignalCatalogWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ImportSignalCatalogWithContext), varargs...)
}

// ListCampaigns mocks base method
func (m *MockIoTFleetWiseAPI) ListCampaigns(arg0 *iotfleetwise.ListCampaignsInput) (*iotfleetwise.ListCampaignsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCampaigns", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCampaigns indicates an expected call of ListCampaigns
func (mr *MockIoTFleetWiseAPIMockRecorder) ListCampaigns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaigns", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListCampaigns), arg0)
}

// ListCampaignsPages mocks base method
func (m *MockIoTFleetWiseAPI) ListCampaignsPages(arg0 *iotfleetwise.ListCampaignsInput, arg1 func(*iotfleetwise.ListCampaignsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCampaignsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCampaignsPages indicates an expected call of ListCampaignsPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListCampaignsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListCampaignsPages), arg0, arg1)
}

// ListCampaignsPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListCampaignsPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListCampaignsInput, arg2 func(*iotfleetwise.ListCampaignsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCampaignsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCampaignsPagesWithContext indicates an expected call of ListCampaignsPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListCampaignsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListCampaignsPagesWithContext), varargs...)
}

// ListCampaignsRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListCampaignsRequest(arg0 *iotfleetwise.ListCampaignsInput) (*request.Request, *iotfleetwise.ListCampaignsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCampaignsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListCampaignsOutput)
	return ret0, ret1
}

// ListCampaignsRequest indicates an expected call of ListCampaignsRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListCampaignsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListCampaignsRequest), arg0)
}

// ListCampaignsWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListCampaignsWithContext(arg0 context.Context, arg1 *iotfleetwise.ListCampaignsInput, arg2 ...request.Option) (*iotfleetwise.ListCampaignsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCampaignsWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCampaignsWithContext indicates an expected call of ListCampaignsWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListCampaignsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListCampaignsWithContext), varargs...)
}

// ListDecoderManifestNetworkInterfaces mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestNetworkInterfaces(arg0 *iotfleetwise.ListDecoderManifestNetworkInterfacesInput) (*iotfleetwise.ListDecoderManifestNetworkInterfacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDecoderManifestNetworkInterfaces", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListDecoderManifestNetworkInterfacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDecoderManifestNetworkInterfaces indicates an expected call of ListDecoderManifestNetworkInterfaces
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestNetworkInterfaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestNetworkInterfaces", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestNetworkInterfaces), arg0)
}

// ListDecoderManifestNetworkInterfacesPages mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestNetworkInterfacesPages(arg0 *iotfleetwise.ListDecoderManifestNetworkInterfacesInput, arg1 func(*iotfleetwise.ListDecoderManifestNetworkInterfacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDecoderManifestNetworkInterfacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDecoderManifestNetworkInterfacesPages indicates an expected call of ListDecoderManifestNetworkInterfacesPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestNetworkInterfacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestNetworkInterfacesPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestNetworkInterfacesPages), arg0, arg1)
}

// ListDecoderManifestNetworkInterfacesPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestNetworkInterfacesPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListDecoderManifestNetworkInterfacesInput, arg2 func(*iotfleetwise.ListDecoderManifestNetworkInterfacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDecoderManifestNetworkInterfacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDecoderManifestNetworkInterfacesPagesWithContext indicates an expected call of ListDecoderManifestNetworkInterfacesPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestNetworkInterfacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestNetworkInterfacesPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestNetworkInterfacesPagesWithContext), varargs...)
}

// ListDecoderManifestNetworkInterfacesRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestNetworkInterfacesRequest(arg0 *iotfleetwise.ListDecoderManifestNetworkInterfacesInput) (*request.Request, *iotfleetwise.ListDecoderManifestNetworkInterfacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDecoderManifestNetworkInterfacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListDecoderManifestNetworkInterfacesOutput)
	return ret0, ret1
}

// ListDecoderManifestNetworkInterfacesRequest indicates an expected call of ListDecoderManifestNetworkInterfacesRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestNetworkInterfacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestNetworkInterfacesRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestNetworkInterfacesRequest), arg0)
}

// ListDecoderManifestNetworkInterfacesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestNetworkInterfacesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListDecoderManifestNetworkInterfacesInput, arg2 ...request.Option) (*iotfleetwise.ListDecoderManifestNetworkInterfacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDecoderManifestNetworkInterfacesWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListDecoderManifestNetworkInterfacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDecoderManifestNetworkInterfacesWithContext indicates an expected call of ListDecoderManifestNetworkInterfacesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestNetworkInterfacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestNetworkInterfacesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestNetworkInterfacesWithContext), varargs...)
}

// ListDecoderManifestSignals mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestSignals(arg0 *iotfleetwise.ListDecoderManifestSignalsInput) (*iotfleetwise.ListDecoderManifestSignalsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDecoderManifestSignals", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListDecoderManifestSignalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDecoderManifestSignals indicates an expected call of ListDecoderManifestSignals
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestSignals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestSignals", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestSignals), arg0)
}

// ListDecoderManifestSignalsPages mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestSignalsPages(arg0 *iotfleetwise.ListDecoderManifestSignalsInput, arg1 func(*iotfleetwise.ListDecoderManifestSignalsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDecoderManifestSignalsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDecoderManifestSignalsPages indicates an expected call of ListDecoderManifestSignalsPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestSignalsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestSignalsPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestSignalsPages), arg0, arg1)
}

// ListDecoderManifestSignalsPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestSignalsPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListDecoderManifestSignalsInput, arg2 func(*iotfleetwise.ListDecoderManifestSignalsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDecoderManifestSignalsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDecoderManifestSignalsPagesWithContext indicates an expected call of ListDecoderManifestSignalsPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestSignalsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestSignalsPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestSignalsPagesWithContext), varargs...)
}

// ListDecoderManifestSignalsRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestSignalsRequest(arg0 *iotfleetwise.ListDecoderManifestSignalsInput) (*request.Request, *iotfleetwise.ListDecoderManifestSignalsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDecoderManifestSignalsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListDecoderManifestSignalsOutput)
	return ret0, ret1
}

// ListDecoderManifestSignalsRequest indicates an expected call of ListDecoderManifestSignalsRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestSignalsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestSignalsRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestSignalsRequest), arg0)
}

// ListDecoderManifestSignalsWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestSignalsWithContext(arg0 context.Context, arg1 *iotfleetwise.ListDecoderManifestSignalsInput, arg2 ...request.Option) (*iotfleetwise.ListDecoderManifestSignalsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDecoderManifestSignalsWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListDecoderManifestSignalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDecoderManifestSignalsWithContext indicates an expected call of ListDecoderManifestSignalsWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestSignalsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestSignalsWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestSignalsWithContext), varargs...)
}

// ListDecoderManifests mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifests(arg0 *iotfleetwise.ListDecoderManifestsInput) (*iotfleetwise.ListDecoderManifestsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDecoderManifests", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListDecoderManifestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDecoderManifests indicates an expected call of ListDecoderManifests
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifests", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifests), arg0)
}

// ListDecoderManifestsPages mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestsPages(arg0 *iotfleetwise.ListDecoderManifestsInput, arg1 func(*iotfleetwise.ListDecoderManifestsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDecoderManifestsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDecoderManifestsPages indicates an expected call of ListDecoderManifestsPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestsPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestsPages), arg0, arg1)
}

// ListDecoderManifestsPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestsPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListDecoderManifestsInput, arg2 func(*iotfleetwise.ListDecoderManifestsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDecoderManifestsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDecoderManifestsPagesWithContext indicates an expected call of ListDecoderManifestsPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestsPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestsPagesWithContext), varargs...)
}

// ListDecoderManifestsRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestsRequest(arg0 *iotfleetwise.ListDecoderManifestsInput) (*request.Request, *iotfleetwise.ListDecoderManifestsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDecoderManifestsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListDecoderManifestsOutput)
	return ret0, ret1
}

// ListDecoderManifestsRequest indicates an expected call of ListDecoderManifestsRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestsRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestsRequest), arg0)
}

// ListDecoderManifestsWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListDecoderManifestsWithContext(arg0 context.Context, arg1 *iotfleetwise.ListDecoderManifestsInput, arg2 ...request.Option) (*iotfleetwise.ListDecoderManifestsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDecoderManifestsWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListDecoderManifestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDecoderManifestsWithContext indicates an expected call of ListDecoderManifestsWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListDecoderManifestsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDecoderManifestsWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListDecoderManifestsWithContext), varargs...)
}

// ListFleets mocks base method
func (m *MockIoTFleetWiseAPI) ListFleets(arg0 *iotfleetwise.ListFleetsInput) (*iotfleetwise.ListFleetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleets", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleets indicates an expected call of ListFleets
func (mr *MockIoTFleetWiseAPIMockRecorder) ListFleets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleets", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListFleets), arg0)
}

// ListFleetsForVehicle mocks base method
func (m *MockIoTFleetWiseAPI) ListFleetsForVehicle(arg0 *iotfleetwise.ListFleetsForVehicleInput) (*iotfleetwise.ListFleetsForVehicleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetsForVehicle", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListFleetsForVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleetsForVehicle indicates an expected call of ListFleetsForVehicle
func (mr *MockIoTFleetWiseAPIMockRecorder) ListFleetsForVehicle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsForVehicle", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListFleetsForVehicle), arg0)
}

// ListFleetsForVehiclePages mocks base method
func (m *MockIoTFleetWiseAPI) ListFleetsForVehiclePages(arg0 *iotfleetwise.ListFleetsForVehicleInput, arg1 func(*iotfleetwise.ListFleetsForVehicleOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetsForVehiclePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFleetsForVehiclePages indicates an expected call of ListFleetsForVehiclePages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListFleetsForVehiclePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsForVehiclePages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListFleetsForVehiclePages), arg0, arg1)
}

// ListFleetsForVehiclePagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListFleetsForVehiclePagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListFleetsForVehicleInput, arg2 func(*iotfleetwise.ListFleetsForVehicleOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetsForVehiclePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFleetsForVehiclePagesWithContext indicates an expected call of ListFleetsForVehiclePagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListFleetsForVehiclePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsForVehiclePagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListFleetsForVehiclePagesWithContext), varargs...)
}

// ListFleetsForVehicleRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListFleetsForVehicleRequest(arg0 *iotfleetwise.ListFleetsForVehicleInput) (*request.Request, *iotfleetwise.ListFleetsForVehicleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetsForVehicleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListFleetsForVehicleOutput)
	return ret0, ret1
}

// ListFleetsForVehicleRequest indicates an expected call of ListFleetsForVehicleRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListFleetsForVehicleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsForVehicleRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListFleetsForVehicleRequest), arg0)
}

// ListFleetsForVehicleWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListFleetsForVehicleWithContext(arg0 context.Context, arg1 *iotfleetwise.ListFleetsForVehicleInput, arg2 ...request.Option) (*iotfleetwise.ListFleetsForVehicleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetsForVehicleWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListFleetsForVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleetsForVehicleWithContext indicates an expected call of ListFleetsForVehicleWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListFleetsForVehicleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsForVehicleWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListFleetsForVehicleWithContext), varargs...)
}

// ListFleetsPages mocks base method
func (m *MockIoTFleetWiseAPI) ListFleetsPages(arg0 *iotfleetwise.ListFleetsInput, arg1 func(*iotfleetwise.ListFleetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFleetsPages indicates an expected call of ListFleetsPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListFleetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListFleetsPages), arg0, arg1)
}

// ListFleetsPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListFleetsPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListFleetsInput, arg2 func(*iotfleetwise.ListFleetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFleetsPagesWithContext indicates an expected call of ListFleetsPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListFleetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListFleetsPagesWithContext), varargs...)
}

// ListFleetsRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListFleetsRequest(arg0 *iotfleetwise.ListFleetsInput) (*request.Request, *iotfleetwise.ListFleetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListFleetsOutput)
	return ret0, ret1
}

// ListFleetsRequest indicates an expected call of ListFleetsRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListFleetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListFleetsRequest), arg0)
}

// ListFleetsWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListFleetsWithContext(arg0 context.Context, arg1 *iotfleetwise.ListFleetsInput, arg2 ...request.Option) (*iotfleetwise.ListFleetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetsWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleetsWithContext indicates an expected call of ListFleetsWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListFleetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListFleetsWithContext), varargs...)
}

// ListModelManifestNodes mocks base method
func (m *MockIoTFleetWiseAPI) ListModelManifestNodes(arg0 *iotfleetwise.ListModelManifestNodesInput) (*iotfleetwise.ListModelManifestNodesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelManifestNodes", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListModelManifestNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelManifestNodes indicates an expected call of ListModelManifestNodes
func (mr *MockIoTFleetWiseAPIMockRecorder) ListModelManifestNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelManifestNodes", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListModelManifestNodes), arg0)
}

// ListModelManifestNodesPages mocks base method
func (m *MockIoTFleetWiseAPI) ListModelManifestNodesPages(arg0 *iotfleetwise.ListModelManifestNodesInput, arg1 func(*iotfleetwise.ListModelManifestNodesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelManifestNodesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListModelManifestNodesPages indicates an expected call of ListModelManifestNodesPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListModelManifestNodesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelManifestNodesPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListModelManifestNodesPages), arg0, arg1)
}

// ListModelManifestNodesPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListModelManifestNodesPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListModelManifestNodesInput, arg2 func(*iotfleetwise.ListModelManifestNodesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelManifestNodesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListModelManifestNodesPagesWithContext indicates an expected call of ListModelManifestNodesPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListModelManifestNodesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelManifestNodesPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListModelManifestNodesPagesWithContext), varargs...)
}

// ListModelManifestNodesRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListModelManifestNodesRequest(arg0 *iotfleetwise.ListModelManifestNodesInput) (*request.Request, *iotfleetwise.ListModelManifestNodesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelManifestNodesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListModelManifestNodesOutput)
	return ret0, ret1
}

// ListModelManifestNodesRequest indicates an expected call of ListModelManifestNodesRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListModelManifestNodesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelManifestNodesRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListModelManifestNodesRequest), arg0)
}

// ListModelManifestNodesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListModelManifestNodesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListModelManifestNodesInput, arg2 ...request.Option) (*iotfleetwise.ListModelManifestNodesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelManifestNodesWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListModelManifestNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelManifestNodesWithContext indicates an expected call of ListModelManifestNodesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListModelManifestNodesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelManifestNodesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListModelManifestNodesWithContext), varargs...)
}

// ListModelManifests mocks base method
func (m *MockIoTFleetWiseAPI) ListModelManifests(arg0 *iotfleetwise.ListModelManifestsInput) (*iotfleetwise.ListModelManifestsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelManifests", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListModelManifestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelManifests indicates an expected call of ListModelManifests
func (mr *MockIoTFleetWiseAPIMockRecorder) ListModelManifests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelManifests", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListModelManifests), arg0)
}

// ListModelManifestsPages mocks base method
func (m *MockIoTFleetWiseAPI) ListModelManifestsPages(arg0 *iotfleetwise.ListModelManifestsInput, arg1 func(*iotfleetwise.ListModelManifestsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelManifestsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListModelManifestsPages indicates an expected call of ListModelManifestsPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListModelManifestsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelManifestsPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListModelManifestsPages), arg0, arg1)
}

// ListModelManifestsPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListModelManifestsPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListModelManifestsInput, arg2 func(*iotfleetwise.ListModelManifestsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelManifestsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListModelManifestsPagesWithContext indicates an expected call of ListModelManifestsPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListModelManifestsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelManifestsPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListModelManifestsPagesWithContext), varargs...)
}

// ListModelManifestsRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListModelManifestsRequest(arg0 *iotfleetwise.ListModelManifestsInput) (*request.Request, *iotfleetwise.ListModelManifestsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelManifestsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListModelManifestsOutput)
	return ret0, ret1
}

// ListModelManifestsRequest indicates an expected call of ListModelManifestsRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListModelManifestsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelManifestsRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListModelManifestsRequest), arg0)
}

// ListModelManifestsWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListModelManifestsWithContext(arg0 context.Context, arg1 *iotfleetwise.ListModelManifestsInput, arg2 ...request.Option) (*iotfleetwise.ListModelManifestsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelManifestsWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListModelManifestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelManifestsWithContext indicates an expected call of ListModelManifestsWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListModelManifestsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelManifestsWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListModelManifestsWithContext), varargs...)
}

// ListSignalCatalogNodes mocks base method
func (m *MockIoTFleetWiseAPI) ListSignalCatalogNodes(arg0 *iotfleetwise.ListSignalCatalogNodesInput) (*iotfleetwise.ListSignalCatalogNodesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSignalCatalogNodes", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListSignalCatalogNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSignalCatalogNodes indicates an expected call of ListSignalCatalogNodes
func (mr *MockIoTFleetWiseAPIMockRecorder) ListSignalCatalogNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignalCatalogNodes", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListSignalCatalogNodes), arg0)
}

// ListSignalCatalogNodesPages mocks base method
func (m *MockIoTFleetWiseAPI) ListSignalCatalogNodesPages(arg0 *iotfleetwise.ListSignalCatalogNodesInput, arg1 func(*iotfleetwise.ListSignalCatalogNodesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSignalCatalogNodesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSignalCatalogNodesPages indicates an expected call of ListSignalCatalogNodesPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListSignalCatalogNodesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignalCatalogNodesPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListSignalCatalogNodesPages), arg0, arg1)
}

// ListSignalCatalogNodesPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListSignalCatalogNodesPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListSignalCatalogNodesInput, arg2 func(*iotfleetwise.ListSignalCatalogNodesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSignalCatalogNodesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSignalCatalogNodesPagesWithContext indicates an expected call of ListSignalCatalogNodesPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListSignalCatalogNodesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignalCatalogNodesPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListSignalCatalogNodesPagesWithContext), varargs...)
}

// ListSignalCatalogNodesRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListSignalCatalogNodesRequest(arg0 *iotfleetwise.ListSignalCatalogNodesInput) (*request.Request, *iotfleetwise.ListSignalCatalogNodesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSignalCatalogNodesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListSignalCatalogNodesOutput)
	return ret0, ret1
}

// ListSignalCatalogNodesRequest indicates an expected call of ListSignalCatalogNodesRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListSignalCatalogNodesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignalCatalogNodesRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListSignalCatalogNodesRequest), arg0)
}

// ListSignalCatalogNodesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListSignalCatalogNodesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListSignalCatalogNodesInput, arg2 ...request.Option) (*iotfleetwise.ListSignalCatalogNodesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSignalCatalogNodesWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListSignalCatalogNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSignalCatalogNodesWithContext indicates an expected call of ListSignalCatalogNodesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListSignalCatalogNodesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignalCatalogNodesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListSignalCatalogNodesWithContext), varargs...)
}

// ListSignalCatalogs mocks base method
func (m *MockIoTFleetWiseAPI) ListSignalCatalogs(arg0 *iotfleetwise.ListSignalCatalogsInput) (*iotfleetwise.ListSignalCatalogsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSignalCatalogs", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListSignalCatalogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSignalCatalogs indicates an expected call of ListSignalCatalogs
func (mr *MockIoTFleetWiseAPIMockRecorder) ListSignalCatalogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignalCatalogs", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListSignalCatalogs), arg0)
}

// ListSignalCatalogsPages mocks base method
func (m *MockIoTFleetWiseAPI) ListSignalCatalogsPages(arg0 *iotfleetwise.ListSignalCatalogsInput, arg1 func(*iotfleetwise.ListSignalCatalogsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSignalCatalogsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSignalCatalogsPages indicates an expected call of ListSignalCatalogsPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListSignalCatalogsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignalCatalogsPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListSignalCatalogsPages), arg0, arg1)
}

// ListSignalCatalogsPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListSignalCatalogsPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListSignalCatalogsInput, arg2 func(*iotfleetwise.ListSignalCatalogsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSignalCatalogsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSignalCatalogsPagesWithContext indicates an expected call of ListSignalCatalogsPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListSignalCatalogsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignalCatalogsPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListSignalCatalogsPagesWithContext), varargs...)
}

// ListSignalCatalogsRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListSignalCatalogsRequest(arg0 *iotfleetwise.ListSignalCatalogsInput) (*request.Request, *iotfleetwise.ListSignalCatalogsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSignalCatalogsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListSignalCatalogsOutput)
	return ret0, ret1
}

// ListSignalCatalogsRequest indicates an expected call of ListSignalCatalogsRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListSignalCatalogsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignalCatalogsRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListSignalCatalogsRequest), arg0)
}

// ListSignalCatalogsWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListSignalCatalogsWithContext(arg0 context.Context, arg1 *iotfleetwise.ListSignalCatalogsInput, arg2 ...request.Option) (*iotfleetwise.ListSignalCatalogsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSignalCatalogsWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListSignalCatalogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSignalCatalogsWithContext indicates an expected call of ListSignalCatalogsWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListSignalCatalogsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignalCatalogsWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListSignalCatalogsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockIoTFleetWiseAPI) ListTagsForResource(arg0 *iotfleetwise.ListTagsForResourceInput) (*iotfleetwise.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockIoTFleetWiseAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListTagsForResourceRequest(arg0 *iotfleetwise.ListTagsForResourceInput) (*request.Request, *iotfleetwise.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *iotfleetwise.ListTagsForResourceInput, arg2 ...request.Option) (*iotfleetwise.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListVehicles mocks base method
func (m *MockIoTFleetWiseAPI) ListVehicles(arg0 *iotfleetwise.ListVehiclesInput) (*iotfleetwise.ListVehiclesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVehicles", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListVehiclesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVehicles indicates an expected call of ListVehicles
func (mr *MockIoTFleetWiseAPIMockRecorder) ListVehicles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehicles", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListVehicles), arg0)
}

// ListVehiclesInFleet mocks base method
func (m *MockIoTFleetWiseAPI) ListVehiclesInFleet(arg0 *iotfleetwise.ListVehiclesInFleetInput) (*iotfleetwise.ListVehiclesInFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVehiclesInFleet", arg0)
	ret0, _ := ret[0].(*iotfleetwise.ListVehiclesInFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVehiclesInFleet indicates an expected call of ListVehiclesInFleet
func (mr *MockIoTFleetWiseAPIMockRecorder) ListVehiclesInFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehiclesInFleet", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListVehiclesInFleet), arg0)
}

// ListVehiclesInFleetPages mocks base method
func (m *MockIoTFleetWiseAPI) ListVehiclesInFleetPages(arg0 *iotfleetwise.ListVehiclesInFleetInput, arg1 func(*iotfleetwise.ListVehiclesInFleetOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVehiclesInFleetPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVehiclesInFleetPages indicates an expected call of ListVehiclesInFleetPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListVehiclesInFleetPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehiclesInFleetPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListVehiclesInFleetPages), arg0, arg1)
}

// ListVehiclesInFleetPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListVehiclesInFleetPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListVehiclesInFleetInput, arg2 func(*iotfleetwise.ListVehiclesInFleetOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVehiclesInFleetPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVehiclesInFleetPagesWithContext indicates an expected call of ListVehiclesInFleetPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListVehiclesInFleetPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehiclesInFleetPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListVehiclesInFleetPagesWithContext), varargs...)
}

// ListVehiclesInFleetRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListVehiclesInFleetRequest(arg0 *iotfleetwise.ListVehiclesInFleetInput) (*request.Request, *iotfleetwise.ListVehiclesInFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVehiclesInFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListVehiclesInFleetOutput)
	return ret0, ret1
}

// ListVehiclesInFleetRequest indicates an expected call of ListVehiclesInFleetRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListVehiclesInFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehiclesInFleetRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListVehiclesInFleetRequest), arg0)
}

// ListVehiclesInFleetWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListVehiclesInFleetWithContext(arg0 context.Context, arg1 *iotfleetwise.ListVehiclesInFleetInput, arg2 ...request.Option) (*iotfleetwise.ListVehiclesInFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVehiclesInFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListVehiclesInFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVehiclesInFleetWithContext indicates an expected call of ListVehiclesInFleetWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListVehiclesInFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehiclesInFleetWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListVehiclesInFleetWithContext), varargs...)
}

// ListVehiclesPages mocks base method
func (m *MockIoTFleetWiseAPI) ListVehiclesPages(arg0 *iotfleetwise.ListVehiclesInput, arg1 func(*iotfleetwise.ListVehiclesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVehiclesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVehiclesPages indicates an expected call of ListVehiclesPages
func (mr *MockIoTFleetWiseAPIMockRecorder) ListVehiclesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehiclesPages", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListVehiclesPages), arg0, arg1)
}

// ListVehiclesPagesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListVehiclesPagesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListVehiclesInput, arg2 func(*iotfleetwise.ListVehiclesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVehiclesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVehiclesPagesWithContext indicates an expected call of ListVehiclesPagesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListVehiclesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehiclesPagesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListVehiclesPagesWithContext), varargs...)
}

// ListVehiclesRequest mocks base method
func (m *MockIoTFleetWiseAPI) ListVehiclesRequest(arg0 *iotfleetwise.ListVehiclesInput) (*request.Request, *iotfleetwise.ListVehiclesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVehiclesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.ListVehiclesOutput)
	return ret0, ret1
}

// ListVehiclesRequest indicates an expected call of ListVehiclesRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) ListVehiclesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehiclesRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListVehiclesRequest), arg0)
}

// ListVehiclesWithContext mocks base method
func (m *MockIoTFleetWiseAPI) ListVehiclesWithContext(arg0 context.Context, arg1 *iotfleetwise.ListVehiclesInput, arg2 ...request.Option) (*iotfleetwise.ListVehiclesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVehiclesWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.ListVehiclesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVehiclesWithContext indicates an expected call of ListVehiclesWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) ListVehiclesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehiclesWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).ListVehiclesWithContext), varargs...)
}

// PutEncryptionConfiguration mocks base method
func (m *MockIoTFleetWiseAPI) PutEncryptionConfiguration(arg0 *iotfleetwise.PutEncryptionConfigurationInput) (*iotfleetwise.PutEncryptionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEncryptionConfiguration", arg0)
	ret0, _ := ret[0].(*iotfleetwise.PutEncryptionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEncryptionConfiguration indicates an expected call of PutEncryptionConfiguration
func (mr *MockIoTFleetWiseAPIMockRecorder) PutEncryptionConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEncryptionConfiguration", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).PutEncryptionConfiguration), arg0)
}

// PutEncryptionConfigurationRequest mocks base method
func (m *MockIoTFleetWiseAPI) PutEncryptionConfigurationRequest(arg0 *iotfleetwise.PutEncryptionConfigurationInput) (*request.Request, *iotfleetwise.PutEncryptionConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEncryptionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.PutEncryptionConfigurationOutput)
	return ret0, ret1
}

// PutEncryptionConfigurationRequest indicates an expected call of PutEncryptionConfigurationRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) PutEncryptionConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEncryptionConfigurationRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).PutEncryptionConfigurationRequest), arg0)
}

// PutEncryptionConfigurationWithContext mocks base method
func (m *MockIoTFleetWiseAPI) PutEncryptionConfigurationWithContext(arg0 context.Context, arg1 *iotfleetwise.PutEncryptionConfigurationInput, arg2 ...request.Option) (*iotfleetwise.PutEncryptionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEncryptionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.PutEncryptionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEncryptionConfigurationWithContext indicates an expected call of PutEncryptionConfigurationWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) PutEncryptionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEncryptionConfigurationWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).PutEncryptionConfigurationWithContext), varargs...)
}

// PutLoggingOptions mocks base method
func (m *MockIoTFleetWiseAPI) PutLoggingOptions(arg0 *iotfleetwise.PutLoggingOptionsInput) (*iotfleetwise.PutLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingOptions", arg0)
	ret0, _ := ret[0].(*iotfleetwise.PutLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingOptions indicates an expected call of PutLoggingOptions
func (mr *MockIoTFleetWiseAPIMockRecorder) PutLoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptions", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).PutLoggingOptions), arg0)
}

// PutLoggingOptionsRequest mocks base method
func (m *MockIoTFleetWiseAPI) PutLoggingOptionsRequest(arg0 *iotfleetwise.PutLoggingOptionsInput) (*request.Request, *iotfleetwise.PutLoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.PutLoggingOptionsOutput)
	return ret0, ret1
}

// PutLoggingOptionsRequest indicates an expected call of PutLoggingOptionsRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) PutLoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptionsRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).PutLoggingOptionsRequest), arg0)
}

// PutLoggingOptionsWithContext mocks base method
func (m *MockIoTFleetWiseAPI) PutLoggingOptionsWithContext(arg0 context.Context, arg1 *iotfleetwise.PutLoggingOptionsInput, arg2 ...request.Option) (*iotfleetwise.PutLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.PutLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingOptionsWithContext indicates an expected call of PutLoggingOptionsWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) PutLoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptionsWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).PutLoggingOptionsWithContext), varargs...)
}

// RegisterAccount mocks base method
func (m *MockIoTFleetWiseAPI) RegisterAccount(arg0 *iotfleetwise.RegisterAccountInput) (*iotfleetwise.RegisterAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAccount", arg0)
	ret0, _ := ret[0].(*iotfleetwise.RegisterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAccount indicates an expected call of RegisterAccount
func (mr *MockIoTFleetWiseAPIMockRecorder) RegisterAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccount", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).RegisterAccount), arg0)
}

// RegisterAccountRequest mocks base method
func (m *MockIoTFleetWiseAPI) RegisterAccountRequest(arg0 *iotfleetwise.RegisterAccountInput) (*request.Request, *iotfleetwise.RegisterAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.RegisterAccountOutput)
	return ret0, ret1
}

// RegisterAccountRequest indicates an expected call of RegisterAccountRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) RegisterAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccountRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).RegisterAccountRequest), arg0)
}

// RegisterAccountWithContext mocks base method
func (m *MockIoTFleetWiseAPI) RegisterAccountWithContext(arg0 context.Context, arg1 *iotfleetwise.RegisterAccountInput, arg2 ...request.Option) (*iotfleetwise.RegisterAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterAccountWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.RegisterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAccountWithContext indicates an expected call of RegisterAccountWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) RegisterAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccountWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).RegisterAccountWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockIoTFleetWiseAPI) TagResource(arg0 *iotfleetwise.TagResourceInput) (*iotfleetwise.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*iotfleetwise.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockIoTFleetWiseAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockIoTFleetWiseAPI) TagResourceRequest(arg0 *iotfleetwise.TagResourceInput) (*request.Request, *iotfleetwise.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockIoTFleetWiseAPI) TagResourceWithContext(arg0 context.Context, arg1 *iotfleetwise.TagResourceInput, arg2 ...request.Option) (*iotfleetwise.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockIoTFleetWiseAPI) UntagResource(arg0 *iotfleetwise.UntagResourceInput) (*iotfleetwise.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*iotfleetwise.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockIoTFleetWiseAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockIoTFleetWiseAPI) UntagResourceRequest(arg0 *iotfleetwise.UntagResourceInput) (*request.Request, *iotfleetwise.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockIoTFleetWiseAPI) UntagResourceWithContext(arg0 context.Context, arg1 *iotfleetwise.UntagResourceInput, arg2 ...request.Option) (*iotfleetwise.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCampaign mocks base method
func (m *MockIoTFleetWiseAPI) UpdateCampaign(arg0 *iotfleetwise.UpdateCampaignInput) (*iotfleetwise.UpdateCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaign", arg0)
	ret0, _ := ret[0].(*iotfleetwise.UpdateCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaign indicates an expected call of UpdateCampaign
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaign", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateCampaign), arg0)
}

// UpdateCampaignRequest mocks base method
func (m *MockIoTFleetWiseAPI) UpdateCampaignRequest(arg0 *iotfleetwise.UpdateCampaignInput) (*request.Request, *iotfleetwise.UpdateCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.UpdateCampaignOutput)
	return ret0, ret1
}

// UpdateCampaignRequest indicates an expected call of UpdateCampaignRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateCampaignRequest), arg0)
}

// UpdateCampaignWithContext mocks base method
func (m *MockIoTFleetWiseAPI) UpdateCampaignWithContext(arg0 context.Context, arg1 *iotfleetwise.UpdateCampaignInput, arg2 ...request.Option) (*iotfleetwise.UpdateCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.UpdateCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaignWithContext indicates an expected call of UpdateCampaignWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateCampaignWithContext), varargs...)
}

// UpdateDecoderManifest mocks base method
func (m *MockIoTFleetWiseAPI) UpdateDecoderManifest(arg0 *iotfleetwise.UpdateDecoderManifestInput) (*iotfleetwise.UpdateDecoderManifestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDecoderManifest", arg0)
	ret0, _ := ret[0].(*iotfleetwise.UpdateDecoderManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDecoderManifest indicates an expected call of UpdateDecoderManifest
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateDecoderManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDecoderManifest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateDecoderManifest), arg0)
}

// UpdateDecoderManifestRequest mocks base method
func (m *MockIoTFleetWiseAPI) UpdateDecoderManifestRequest(arg0 *iotfleetwise.UpdateDecoderManifestInput) (*request.Request, *iotfleetwise.UpdateDecoderManifestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDecoderManifestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.UpdateDecoderManifestOutput)
	return ret0, ret1
}

// UpdateDecoderManifestRequest indicates an expected call of UpdateDecoderManifestRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateDecoderManifestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDecoderManifestRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateDecoderManifestRequest), arg0)
}

// UpdateDecoderManifestWithContext mocks base method
func (m *MockIoTFleetWiseAPI) UpdateDecoderManifestWithContext(arg0 context.Context, arg1 *iotfleetwise.UpdateDecoderManifestInput, arg2 ...request.Option) (*iotfleetwise.UpdateDecoderManifestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDecoderManifestWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.UpdateDecoderManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDecoderManifestWithContext indicates an expected call of UpdateDecoderManifestWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateDecoderManifestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDecoderManifestWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateDecoderManifestWithContext), varargs...)
}

// UpdateFleet mocks base method
func (m *MockIoTFleetWiseAPI) UpdateFleet(arg0 *iotfleetwise.UpdateFleetInput) (*iotfleetwise.UpdateFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFleet", arg0)
	ret0, _ := ret[0].(*iotfleetwise.UpdateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFleet indicates an expected call of UpdateFleet
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleet", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateFleet), arg0)
}

// UpdateFleetRequest mocks base method
func (m *MockIoTFleetWiseAPI) UpdateFleetRequest(arg0 *iotfleetwise.UpdateFleetInput) (*request.Request, *iotfleetwise.UpdateFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.UpdateFleetOutput)
	return ret0, ret1
}

// UpdateFleetRequest indicates an expected call of UpdateFleetRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleetRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateFleetRequest), arg0)
}

// UpdateFleetWithContext mocks base method
func (m *MockIoTFleetWiseAPI) UpdateFleetWithContext(arg0 context.Context, arg1 *iotfleetwise.UpdateFleetInput, arg2 ...request.Option) (*iotfleetwise.UpdateFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.UpdateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFleetWithContext indicates an expected call of UpdateFleetWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleetWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateFleetWithContext), varargs...)
}

// UpdateModelManifest mocks base method
func (m *MockIoTFleetWiseAPI) UpdateModelManifest(arg0 *iotfleetwise.UpdateModelManifestInput) (*iotfleetwise.UpdateModelManifestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelManifest", arg0)
	ret0, _ := ret[0].(*iotfleetwise.UpdateModelManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelManifest indicates an expected call of UpdateModelManifest
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateModelManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelManifest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateModelManifest), arg0)
}

// UpdateModelManifestRequest mocks base method
func (m *MockIoTFleetWiseAPI) UpdateModelManifestRequest(arg0 *iotfleetwise.UpdateModelManifestInput) (*request.Request, *iotfleetwise.UpdateModelManifestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelManifestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.UpdateModelManifestOutput)
	return ret0, ret1
}

// UpdateModelManifestRequest indicates an expected call of UpdateModelManifestRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateModelManifestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelManifestRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateModelManifestRequest), arg0)
}

// UpdateModelManifestWithContext mocks base method
func (m *MockIoTFleetWiseAPI) UpdateModelManifestWithContext(arg0 context.Context, arg1 *iotfleetwise.UpdateModelManifestInput, arg2 ...request.Option) (*iotfleetwise.UpdateModelManifestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelManifestWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.UpdateModelManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelManifestWithContext indicates an expected call of UpdateModelManifestWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateModelManifestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelManifestWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateModelManifestWithContext), varargs...)
}

// UpdateSignalCatalog mocks base method
func (m *MockIoTFleetWiseAPI) UpdateSignalCatalog(arg0 *iotfleetwise.UpdateSignalCatalogInput) (*iotfleetwise.UpdateSignalCatalogOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSignalCatalog", arg0)
	ret0, _ := ret[0].(*iotfleetwise.UpdateSignalCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSignalCatalog indicates an expected call of UpdateSignalCatalog
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateSignalCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSignalCatalog", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateSignalCatalog), arg0)
}

// UpdateSignalCatalogRequest mocks base method
func (m *MockIoTFleetWiseAPI) UpdateSignalCatalogRequest(arg0 *iotfleetwise.UpdateSignalCatalogInput) (*request.Request, *iotfleetwise.UpdateSignalCatalogOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSignalCatalogRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.UpdateSignalCatalogOutput)
	return ret0, ret1
}

// UpdateSignalCatalogRequest indicates an expected call of UpdateSignalCatalogRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateSignalCatalogRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSignalCatalogRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateSignalCatalogRequest), arg0)
}

// UpdateSignalCatalogWithContext mocks base method
func (m *MockIoTFleetWiseAPI) UpdateSignalCatalogWithContext(arg0 context.Context, arg1 *iotfleetwise.UpdateSignalCatalogInput, arg2 ...request.Option) (*iotfleetwise.UpdateSignalCatalogOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSignalCatalogWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.UpdateSignalCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSignalCatalogWithContext indicates an expected call of UpdateSignalCatalogWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateSignalCatalogWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSignalCatalogWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateSignalCatalogWithContext), varargs...)
}

// UpdateVehicle mocks base method
func (m *MockIoTFleetWiseAPI) UpdateVehicle(arg0 *iotfleetwise.UpdateVehicleInput) (*iotfleetwise.UpdateVehicleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVehicle", arg0)
	ret0, _ := ret[0].(*iotfleetwise.UpdateVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVehicle indicates an expected call of UpdateVehicle
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateVehicle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVehicle", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateVehicle), arg0)
}

// UpdateVehicleRequest mocks base method
func (m *MockIoTFleetWiseAPI) UpdateVehicleRequest(arg0 *iotfleetwise.UpdateVehicleInput) (*request.Request, *iotfleetwise.UpdateVehicleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVehicleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotfleetwise.UpdateVehicleOutput)
	return ret0, ret1
}

// UpdateVehicleRequest indicates an expected call of UpdateVehicleRequest
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateVehicleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVehicleRequest", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateVehicleRequest), arg0)
}

// UpdateVehicleWithContext mocks base method
func (m *MockIoTFleetWiseAPI) UpdateVehicleWithContext(arg0 context.Context, arg1 *iotfleetwise.UpdateVehicleInput, arg2 ...request.Option) (*iotfleetwise.UpdateVehicleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVehicleWithContext", varargs...)
	ret0, _ := ret[0].(*iotfleetwise.UpdateVehicleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVehicleWithContext indicates an expected call of UpdateVehicleWithContext
func (mr *MockIoTFleetWiseAPIMockRecorder) UpdateVehicleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVehicleWithContext", reflect.TypeOf((*MockIoTFleetWiseAPI)(nil).UpdateVehicleWithContext), varargs...)
}
