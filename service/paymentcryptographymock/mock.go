// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/paymentcryptography/paymentcryptographyiface (interfaces: PaymentCryptographyAPI)

// Package paymentcryptographymock is a generated GoMock package.
package paymentcryptographymock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	paymentcryptography "github.com/aws/aws-sdk-go/service/paymentcryptography"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaymentCryptographyAPI is a mock of PaymentCryptographyAPI interface
type MockPaymentCryptographyAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentCryptographyAPIMockRecorder
}

// MockPaymentCryptographyAPIMockRecorder is the mock recorder for MockPaymentCryptographyAPI
type MockPaymentCryptographyAPIMockRecorder struct {
	mock *MockPaymentCryptographyAPI
}

// NewMockPaymentCryptographyAPI creates a new mock instance
func NewMockPaymentCryptographyAPI(ctrl *gomock.Controller) *MockPaymentCryptographyAPI {
	mock := &MockPaymentCryptographyAPI{ctrl: ctrl}
	mock.recorder = &MockPaymentCryptographyAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentCryptographyAPI) EXPECT() *MockPaymentCryptographyAPIMockRecorder {
	return m.recorder
}

// CreateAlias mocks base method
func (m *MockPaymentCryptographyAPI) CreateAlias(arg0 *paymentcryptography.CreateAliasInput) (*paymentcryptography.CreateAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlias", arg0)
	ret0, _ := ret[0].(*paymentcryptography.CreateAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlias indicates an expected call of CreateAlias
func (mr *MockPaymentCryptographyAPIMockRecorder) CreateAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlias", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).CreateAlias), arg0)
}

// CreateAliasRequest mocks base method
func (m *MockPaymentCryptographyAPI) CreateAliasRequest(arg0 *paymentcryptography.CreateAliasInput) (*request.Request, *paymentcryptography.CreateAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.CreateAliasOutput)
	return ret0, ret1
}

// CreateAliasRequest indicates an expected call of CreateAliasRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) CreateAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAliasRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).CreateAliasRequest), arg0)
}

// CreateAliasWithContext mocks base method
func (m *MockPaymentCryptographyAPI) CreateAliasWithContext(arg0 context.Context, arg1 *paymentcryptography.CreateAliasInput, arg2 ...request.Option) (*paymentcryptography.CreateAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAliasWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.CreateAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAliasWithContext indicates an expected call of CreateAliasWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) CreateAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAliasWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).CreateAliasWithContext), varargs...)
}

// CreateKey mocks base method
func (m *MockPaymentCryptographyAPI) CreateKey(arg0 *paymentcryptography.CreateKeyInput) (*paymentcryptography.CreateKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", arg0)
	ret0, _ := ret[0].(*paymentcryptography.CreateKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey
func (mr *MockPaymentCryptographyAPIMockRecorder) CreateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).CreateKey), arg0)
}

// CreateKeyRequest mocks base method
func (m *MockPaymentCryptographyAPI) CreateKeyRequest(arg0 *paymentcryptography.CreateKeyInput) (*request.Request, *paymentcryptography.CreateKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.CreateKeyOutput)
	return ret0, ret1
}

// CreateKeyRequest indicates an expected call of CreateKeyRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) CreateKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).CreateKeyRequest), arg0)
}

// CreateKeyWithContext mocks base method
func (m *MockPaymentCryptographyAPI) CreateKeyWithContext(arg0 context.Context, arg1 *paymentcryptography.CreateKeyInput, arg2 ...request.Option) (*paymentcryptography.CreateKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeyWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.CreateKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyWithContext indicates an expected call of CreateKeyWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) CreateKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).CreateKeyWithContext), varargs...)
}

// DeleteAlias mocks base method
func (m *MockPaymentCryptographyAPI) DeleteAlias(arg0 *paymentcryptography.DeleteAliasInput) (*paymentcryptography.DeleteAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlias", arg0)
	ret0, _ := ret[0].(*paymentcryptography.DeleteAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlias indicates an expected call of DeleteAlias
func (mr *MockPaymentCryptographyAPIMockRecorder) DeleteAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlias", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).DeleteAlias), arg0)
}

// DeleteAliasRequest mocks base method
func (m *MockPaymentCryptographyAPI) DeleteAliasRequest(arg0 *paymentcryptography.DeleteAliasInput) (*request.Request, *paymentcryptography.DeleteAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.DeleteAliasOutput)
	return ret0, ret1
}

// DeleteAliasRequest indicates an expected call of DeleteAliasRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) DeleteAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAliasRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).DeleteAliasRequest), arg0)
}

// DeleteAliasWithContext mocks base method
func (m *MockPaymentCryptographyAPI) DeleteAliasWithContext(arg0 context.Context, arg1 *paymentcryptography.DeleteAliasInput, arg2 ...request.Option) (*paymentcryptography.DeleteAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAliasWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.DeleteAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAliasWithContext indicates an expected call of DeleteAliasWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) DeleteAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAliasWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).DeleteAliasWithContext), varargs...)
}

// DeleteKey mocks base method
func (m *MockPaymentCryptographyAPI) DeleteKey(arg0 *paymentcryptography.DeleteKeyInput) (*paymentcryptography.DeleteKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", arg0)
	ret0, _ := ret[0].(*paymentcryptography.DeleteKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey
func (mr *MockPaymentCryptographyAPIMockRecorder) DeleteKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).DeleteKey), arg0)
}

// DeleteKeyRequest mocks base method
func (m *MockPaymentCryptographyAPI) DeleteKeyRequest(arg0 *paymentcryptography.DeleteKeyInput) (*request.Request, *paymentcryptography.DeleteKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.DeleteKeyOutput)
	return ret0, ret1
}

// DeleteKeyRequest indicates an expected call of DeleteKeyRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) DeleteKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).DeleteKeyRequest), arg0)
}

// DeleteKeyWithContext mocks base method
func (m *MockPaymentCryptographyAPI) DeleteKeyWithContext(arg0 context.Context, arg1 *paymentcryptography.DeleteKeyInput, arg2 ...request.Option) (*paymentcryptography.DeleteKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKeyWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.DeleteKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyWithContext indicates an expected call of DeleteKeyWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) DeleteKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).DeleteKeyWithContext), varargs...)
}

// ExportKey mocks base method
func (m *MockPaymentCryptographyAPI) ExportKey(arg0 *paymentcryptography.ExportKeyInput) (*paymentcryptography.ExportKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportKey", arg0)
	ret0, _ := ret[0].(*paymentcryptography.ExportKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportKey indicates an expected call of ExportKey
func (mr *MockPaymentCryptographyAPIMockRecorder) ExportKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportKey", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ExportKey), arg0)
}

// ExportKeyRequest mocks base method
func (m *MockPaymentCryptographyAPI) ExportKeyRequest(arg0 *paymentcryptography.ExportKeyInput) (*request.Request, *paymentcryptography.ExportKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.ExportKeyOutput)
	return ret0, ret1
}

// ExportKeyRequest indicates an expected call of ExportKeyRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) ExportKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportKeyRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ExportKeyRequest), arg0)
}

// ExportKeyWithContext mocks base method
func (m *MockPaymentCryptographyAPI) ExportKeyWithContext(arg0 context.Context, arg1 *paymentcryptography.ExportKeyInput, arg2 ...request.Option) (*paymentcryptography.ExportKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportKeyWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.ExportKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportKeyWithContext indicates an expected call of ExportKeyWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) ExportKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportKeyWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ExportKeyWithContext), varargs...)
}

// GetAlias mocks base method
func (m *MockPaymentCryptographyAPI) GetAlias(arg0 *paymentcryptography.GetAliasInput) (*paymentcryptography.GetAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlias", arg0)
	ret0, _ := ret[0].(*paymentcryptography.GetAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias
func (mr *MockPaymentCryptographyAPIMockRecorder) GetAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetAlias), arg0)
}

// GetAliasRequest mocks base method
func (m *MockPaymentCryptographyAPI) GetAliasRequest(arg0 *paymentcryptography.GetAliasInput) (*request.Request, *paymentcryptography.GetAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.GetAliasOutput)
	return ret0, ret1
}

// GetAliasRequest indicates an expected call of GetAliasRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) GetAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetAliasRequest), arg0)
}

// GetAliasWithContext mocks base method
func (m *MockPaymentCryptographyAPI) GetAliasWithContext(arg0 context.Context, arg1 *paymentcryptography.GetAliasInput, arg2 ...request.Option) (*paymentcryptography.GetAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAliasWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.GetAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasWithContext indicates an expected call of GetAliasWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) GetAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetAliasWithContext), varargs...)
}

// GetKey mocks base method
func (m *MockPaymentCryptographyAPI) GetKey(arg0 *paymentcryptography.GetKeyInput) (*paymentcryptography.GetKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0)
	ret0, _ := ret[0].(*paymentcryptography.GetKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey
func (mr *MockPaymentCryptographyAPIMockRecorder) GetKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetKey), arg0)
}

// GetKeyRequest mocks base method
func (m *MockPaymentCryptographyAPI) GetKeyRequest(arg0 *paymentcryptography.GetKeyInput) (*request.Request, *paymentcryptography.GetKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.GetKeyOutput)
	return ret0, ret1
}

// GetKeyRequest indicates an expected call of GetKeyRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) GetKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetKeyRequest), arg0)
}

// GetKeyWithContext mocks base method
func (m *MockPaymentCryptographyAPI) GetKeyWithContext(arg0 context.Context, arg1 *paymentcryptography.GetKeyInput, arg2 ...request.Option) (*paymentcryptography.GetKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.GetKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyWithContext indicates an expected call of GetKeyWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) GetKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetKeyWithContext), varargs...)
}

// GetParametersForExport mocks base method
func (m *MockPaymentCryptographyAPI) GetParametersForExport(arg0 *paymentcryptography.GetParametersForExportInput) (*paymentcryptography.GetParametersForExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParametersForExport", arg0)
	ret0, _ := ret[0].(*paymentcryptography.GetParametersForExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParametersForExport indicates an expected call of GetParametersForExport
func (mr *MockPaymentCryptographyAPIMockRecorder) GetParametersForExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParametersForExport", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetParametersForExport), arg0)
}

// GetParametersForExportRequest mocks base method
func (m *MockPaymentCryptographyAPI) GetParametersForExportRequest(arg0 *paymentcryptography.GetParametersForExportInput) (*request.Request, *paymentcryptography.GetParametersForExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParametersForExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.GetParametersForExportOutput)
	return ret0, ret1
}

// GetParametersForExportRequest indicates an expected call of GetParametersForExportRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) GetParametersForExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParametersForExportRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetParametersForExportRequest), arg0)
}

// GetParametersForExportWithContext mocks base method
func (m *MockPaymentCryptographyAPI) GetParametersForExportWithContext(arg0 context.Context, arg1 *paymentcryptography.GetParametersForExportInput, arg2 ...request.Option) (*paymentcryptography.GetParametersForExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParametersForExportWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.GetParametersForExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParametersForExportWithContext indicates an expected call of GetParametersForExportWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) GetParametersForExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParametersForExportWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetParametersForExportWithContext), varargs...)
}

// GetParametersForImport mocks base method
func (m *MockPaymentCryptographyAPI) GetParametersForImport(arg0 *paymentcryptography.GetParametersForImportInput) (*paymentcryptography.GetParametersForImportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParametersForImport", arg0)
	ret0, _ := ret[0].(*paymentcryptography.GetParametersForImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParametersForImport indicates an expected call of GetParametersForImport
func (mr *MockPaymentCryptographyAPIMockRecorder) GetParametersForImport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParametersForImport", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetParametersForImport), arg0)
}

// GetParametersForImportRequest mocks base method
func (m *MockPaymentCryptographyAPI) GetParametersForImportRequest(arg0 *paymentcryptography.GetParametersForImportInput) (*request.Request, *paymentcryptography.GetParametersForImportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParametersForImportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.GetParametersForImportOutput)
	return ret0, ret1
}

// GetParametersForImportRequest indicates an expected call of GetParametersForImportRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) GetParametersForImportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParametersForImportRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetParametersForImportRequest), arg0)
}

// GetParametersForImportWithContext mocks base method
func (m *MockPaymentCryptographyAPI) GetParametersForImportWithContext(arg0 context.Context, arg1 *paymentcryptography.GetParametersForImportInput, arg2 ...request.Option) (*paymentcryptography.GetParametersForImportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParametersForImportWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.GetParametersForImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParametersForImportWithContext indicates an expected call of GetParametersForImportWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) GetParametersForImportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParametersForImportWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetParametersForImportWithContext), varargs...)
}

// GetPublicKeyCertificate mocks base method
func (m *MockPaymentCryptographyAPI) GetPublicKeyCertificate(arg0 *paymentcryptography.GetPublicKeyCertificateInput) (*paymentcryptography.GetPublicKeyCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyCertificate", arg0)
	ret0, _ := ret[0].(*paymentcryptography.GetPublicKeyCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyCertificate indicates an expected call of GetPublicKeyCertificate
func (mr *MockPaymentCryptographyAPIMockRecorder) GetPublicKeyCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyCertificate", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetPublicKeyCertificate), arg0)
}

// GetPublicKeyCertificateRequest mocks base method
func (m *MockPaymentCryptographyAPI) GetPublicKeyCertificateRequest(arg0 *paymentcryptography.GetPublicKeyCertificateInput) (*request.Request, *paymentcryptography.GetPublicKeyCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.GetPublicKeyCertificateOutput)
	return ret0, ret1
}

// GetPublicKeyCertificateRequest indicates an expected call of GetPublicKeyCertificateRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) GetPublicKeyCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyCertificateRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetPublicKeyCertificateRequest), arg0)
}

// GetPublicKeyCertificateWithContext mocks base method
func (m *MockPaymentCryptographyAPI) GetPublicKeyCertificateWithContext(arg0 context.Context, arg1 *paymentcryptography.GetPublicKeyCertificateInput, arg2 ...request.Option) (*paymentcryptography.GetPublicKeyCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKeyCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.GetPublicKeyCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyCertificateWithContext indicates an expected call of GetPublicKeyCertificateWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) GetPublicKeyCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyCertificateWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).GetPublicKeyCertificateWithContext), varargs...)
}

// ImportKey mocks base method
func (m *MockPaymentCryptographyAPI) ImportKey(arg0 *paymentcryptography.ImportKeyInput) (*paymentcryptography.ImportKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportKey", arg0)
	ret0, _ := ret[0].(*paymentcryptography.ImportKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportKey indicates an expected call of ImportKey
func (mr *MockPaymentCryptographyAPIMockRecorder) ImportKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportKey", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ImportKey), arg0)
}

// ImportKeyRequest mocks base method
func (m *MockPaymentCryptographyAPI) ImportKeyRequest(arg0 *paymentcryptography.ImportKeyInput) (*request.Request, *paymentcryptography.ImportKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.ImportKeyOutput)
	return ret0, ret1
}

// ImportKeyRequest indicates an expected call of ImportKeyRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) ImportKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportKeyRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ImportKeyRequest), arg0)
}

// ImportKeyWithContext mocks base method
func (m *MockPaymentCryptographyAPI) ImportKeyWithContext(arg0 context.Context, arg1 *paymentcryptography.ImportKeyInput, arg2 ...request.Option) (*paymentcryptography.ImportKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportKeyWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.ImportKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportKeyWithContext indicates an expected call of ImportKeyWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) ImportKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportKeyWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ImportKeyWithContext), varargs...)
}

// ListAliases mocks base method
func (m *MockPaymentCryptographyAPI) ListAliases(arg0 *paymentcryptography.ListAliasesInput) (*paymentcryptography.ListAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliases", arg0)
	ret0, _ := ret[0].(*paymentcryptography.ListAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliases indicates an expected call of ListAliases
func (mr *MockPaymentCryptographyAPIMockRecorder) ListAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliases", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListAliases), arg0)
}

// ListAliasesPages mocks base method
func (m *MockPaymentCryptographyAPI) ListAliasesPages(arg0 *paymentcryptography.ListAliasesInput, arg1 func(*paymentcryptography.ListAliasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAliasesPages indicates an expected call of ListAliasesPages
func (mr *MockPaymentCryptographyAPIMockRecorder) ListAliasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliasesPages", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListAliasesPages), arg0, arg1)
}

// ListAliasesPagesWithContext mocks base method
func (m *MockPaymentCryptographyAPI) ListAliasesPagesWithContext(arg0 context.Context, arg1 *paymentcryptography.ListAliasesInput, arg2 func(*paymentcryptography.ListAliasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAliasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAliasesPagesWithContext indicates an expected call of ListAliasesPagesWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) ListAliasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliasesPagesWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListAliasesPagesWithContext), varargs...)
}

// ListAliasesRequest mocks base method
func (m *MockPaymentCryptographyAPI) ListAliasesRequest(arg0 *paymentcryptography.ListAliasesInput) (*request.Request, *paymentcryptography.ListAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.ListAliasesOutput)
	return ret0, ret1
}

// ListAliasesRequest indicates an expected call of ListAliasesRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) ListAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliasesRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListAliasesRequest), arg0)
}

// ListAliasesWithContext mocks base method
func (m *MockPaymentCryptographyAPI) ListAliasesWithContext(arg0 context.Context, arg1 *paymentcryptography.ListAliasesInput, arg2 ...request.Option) (*paymentcryptography.ListAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.ListAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliasesWithContext indicates an expected call of ListAliasesWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) ListAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliasesWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListAliasesWithContext), varargs...)
}

// ListKeys mocks base method
func (m *MockPaymentCryptographyAPI) ListKeys(arg0 *paymentcryptography.ListKeysInput) (*paymentcryptography.ListKeysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", arg0)
	ret0, _ := ret[0].(*paymentcryptography.ListKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys
func (mr *MockPaymentCryptographyAPIMockRecorder) ListKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListKeys), arg0)
}

// ListKeysPages mocks base method
func (m *MockPaymentCryptographyAPI) ListKeysPages(arg0 *paymentcryptography.ListKeysInput, arg1 func(*paymentcryptography.ListKeysOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeysPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKeysPages indicates an expected call of ListKeysPages
func (mr *MockPaymentCryptographyAPIMockRecorder) ListKeysPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeysPages", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListKeysPages), arg0, arg1)
}

// ListKeysPagesWithContext mocks base method
func (m *MockPaymentCryptographyAPI) ListKeysPagesWithContext(arg0 context.Context, arg1 *paymentcryptography.ListKeysInput, arg2 func(*paymentcryptography.ListKeysOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeysPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKeysPagesWithContext indicates an expected call of ListKeysPagesWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) ListKeysPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeysPagesWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListKeysPagesWithContext), varargs...)
}

// ListKeysRequest mocks base method
func (m *MockPaymentCryptographyAPI) ListKeysRequest(arg0 *paymentcryptography.ListKeysInput) (*request.Request, *paymentcryptography.ListKeysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.ListKeysOutput)
	return ret0, ret1
}

// ListKeysRequest indicates an expected call of ListKeysRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) ListKeysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeysRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListKeysRequest), arg0)
}

// ListKeysWithContext mocks base method
func (m *MockPaymentCryptographyAPI) ListKeysWithContext(arg0 context.Context, arg1 *paymentcryptography.ListKeysInput, arg2 ...request.Option) (*paymentcryptography.ListKeysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeysWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.ListKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeysWithContext indicates an expected call of ListKeysWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) ListKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeysWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListKeysWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockPaymentCryptographyAPI) ListTagsForResource(arg0 *paymentcryptography.ListTagsForResourceInput) (*paymentcryptography.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*paymentcryptography.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockPaymentCryptographyAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method
func (m *MockPaymentCryptographyAPI) ListTagsForResourcePages(arg0 *paymentcryptography.ListTagsForResourceInput, arg1 func(*paymentcryptography.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages
func (mr *MockPaymentCryptographyAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method
func (m *MockPaymentCryptographyAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *paymentcryptography.ListTagsForResourceInput, arg2 func(*paymentcryptography.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method
func (m *MockPaymentCryptographyAPI) ListTagsForResourceRequest(arg0 *paymentcryptography.ListTagsForResourceInput) (*request.Request, *paymentcryptography.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockPaymentCryptographyAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *paymentcryptography.ListTagsForResourceInput, arg2 ...request.Option) (*paymentcryptography.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RestoreKey mocks base method
func (m *MockPaymentCryptographyAPI) RestoreKey(arg0 *paymentcryptography.RestoreKeyInput) (*paymentcryptography.RestoreKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreKey", arg0)
	ret0, _ := ret[0].(*paymentcryptography.RestoreKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreKey indicates an expected call of RestoreKey
func (mr *MockPaymentCryptographyAPIMockRecorder) RestoreKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreKey", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).RestoreKey), arg0)
}

// RestoreKeyRequest mocks base method
func (m *MockPaymentCryptographyAPI) RestoreKeyRequest(arg0 *paymentcryptography.RestoreKeyInput) (*request.Request, *paymentcryptography.RestoreKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.RestoreKeyOutput)
	return ret0, ret1
}

// RestoreKeyRequest indicates an expected call of RestoreKeyRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) RestoreKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreKeyRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).RestoreKeyRequest), arg0)
}

// RestoreKeyWithContext mocks base method
func (m *MockPaymentCryptographyAPI) RestoreKeyWithContext(arg0 context.Context, arg1 *paymentcryptography.RestoreKeyInput, arg2 ...request.Option) (*paymentcryptography.RestoreKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreKeyWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.RestoreKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreKeyWithContext indicates an expected call of RestoreKeyWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) RestoreKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreKeyWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).RestoreKeyWithContext), varargs...)
}

// StartKeyUsage mocks base method
func (m *MockPaymentCryptographyAPI) StartKeyUsage(arg0 *paymentcryptography.StartKeyUsageInput) (*paymentcryptography.StartKeyUsageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartKeyUsage", arg0)
	ret0, _ := ret[0].(*paymentcryptography.StartKeyUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartKeyUsage indicates an expected call of StartKeyUsage
func (mr *MockPaymentCryptographyAPIMockRecorder) StartKeyUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKeyUsage", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).StartKeyUsage), arg0)
}

// StartKeyUsageRequest mocks base method
func (m *MockPaymentCryptographyAPI) StartKeyUsageRequest(arg0 *paymentcryptography.StartKeyUsageInput) (*request.Request, *paymentcryptography.StartKeyUsageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartKeyUsageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.StartKeyUsageOutput)
	return ret0, ret1
}

// StartKeyUsageRequest indicates an expected call of StartKeyUsageRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) StartKeyUsageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKeyUsageRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).StartKeyUsageRequest), arg0)
}

// StartKeyUsageWithContext mocks base method
func (m *MockPaymentCryptographyAPI) StartKeyUsageWithContext(arg0 context.Context, arg1 *paymentcryptography.StartKeyUsageInput, arg2 ...request.Option) (*paymentcryptography.StartKeyUsageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartKeyUsageWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.StartKeyUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartKeyUsageWithContext indicates an expected call of StartKeyUsageWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) StartKeyUsageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKeyUsageWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).StartKeyUsageWithContext), varargs...)
}

// StopKeyUsage mocks base method
func (m *MockPaymentCryptographyAPI) StopKeyUsage(arg0 *paymentcryptography.StopKeyUsageInput) (*paymentcryptography.StopKeyUsageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopKeyUsage", arg0)
	ret0, _ := ret[0].(*paymentcryptography.StopKeyUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopKeyUsage indicates an expected call of StopKeyUsage
func (mr *MockPaymentCryptographyAPIMockRecorder) StopKeyUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKeyUsage", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).StopKeyUsage), arg0)
}

// StopKeyUsageRequest mocks base method
func (m *MockPaymentCryptographyAPI) StopKeyUsageRequest(arg0 *paymentcryptography.StopKeyUsageInput) (*request.Request, *paymentcryptography.StopKeyUsageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopKeyUsageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.StopKeyUsageOutput)
	return ret0, ret1
}

// StopKeyUsageRequest indicates an expected call of StopKeyUsageRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) StopKeyUsageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKeyUsageRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).StopKeyUsageRequest), arg0)
}

// StopKeyUsageWithContext mocks base method
func (m *MockPaymentCryptographyAPI) StopKeyUsageWithContext(arg0 context.Context, arg1 *paymentcryptography.StopKeyUsageInput, arg2 ...request.Option) (*paymentcryptography.StopKeyUsageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopKeyUsageWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.StopKeyUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopKeyUsageWithContext indicates an expected call of StopKeyUsageWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) StopKeyUsageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKeyUsageWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).StopKeyUsageWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockPaymentCryptographyAPI) TagResource(arg0 *paymentcryptography.TagResourceInput) (*paymentcryptography.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*paymentcryptography.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockPaymentCryptographyAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockPaymentCryptographyAPI) TagResourceRequest(arg0 *paymentcryptography.TagResourceInput) (*request.Request, *paymentcryptography.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockPaymentCryptographyAPI) TagResourceWithContext(arg0 context.Context, arg1 *paymentcryptography.TagResourceInput, arg2 ...request.Option) (*paymentcryptography.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockPaymentCryptographyAPI) UntagResource(arg0 *paymentcryptography.UntagResourceInput) (*paymentcryptography.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*paymentcryptography.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockPaymentCryptographyAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockPaymentCryptographyAPI) UntagResourceRequest(arg0 *paymentcryptography.UntagResourceInput) (*request.Request, *paymentcryptography.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockPaymentCryptographyAPI) UntagResourceWithContext(arg0 context.Context, arg1 *paymentcryptography.UntagResourceInput, arg2 ...request.Option) (*paymentcryptography.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAlias mocks base method
func (m *MockPaymentCryptographyAPI) UpdateAlias(arg0 *paymentcryptography.UpdateAliasInput) (*paymentcryptography.UpdateAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlias", arg0)
	ret0, _ := ret[0].(*paymentcryptography.UpdateAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlias indicates an expected call of UpdateAlias
func (mr *MockPaymentCryptographyAPIMockRecorder) UpdateAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlias", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).UpdateAlias), arg0)
}

// UpdateAliasRequest mocks base method
func (m *MockPaymentCryptographyAPI) UpdateAliasRequest(arg0 *paymentcryptography.UpdateAliasInput) (*request.Request, *paymentcryptography.UpdateAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*paymentcryptography.UpdateAliasOutput)
	return ret0, ret1
}

// UpdateAliasRequest indicates an expected call of UpdateAliasRequest
func (mr *MockPaymentCryptographyAPIMockRecorder) UpdateAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAliasRequest", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).UpdateAliasRequest), arg0)
}

// UpdateAliasWithContext mocks base method
func (m *MockPaymentCryptographyAPI) UpdateAliasWithContext(arg0 context.Context, arg1 *paymentcryptography.UpdateAliasInput, arg2 ...request.Option) (*paymentcryptography.UpdateAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAliasWithContext", varargs...)
	ret0, _ := ret[0].(*paymentcryptography.UpdateAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAliasWithContext indicates an expected call of UpdateAliasWithContext
func (mr *MockPaymentCryptographyAPIMockRecorder) UpdateAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAliasWithContext", reflect.TypeOf((*MockPaymentCryptographyAPI)(nil).UpdateAliasWithContext), varargs...)
}
