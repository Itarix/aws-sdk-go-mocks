// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/launchwizard/launchwizardiface (interfaces: LaunchWizardAPI)

// Package launchwizardmock is a generated GoMock package.
package launchwizardmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	launchwizard "github.com/aws/aws-sdk-go/service/launchwizard"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLaunchWizardAPI is a mock of LaunchWizardAPI interface
type MockLaunchWizardAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLaunchWizardAPIMockRecorder
}

// MockLaunchWizardAPIMockRecorder is the mock recorder for MockLaunchWizardAPI
type MockLaunchWizardAPIMockRecorder struct {
	mock *MockLaunchWizardAPI
}

// NewMockLaunchWizardAPI creates a new mock instance
func NewMockLaunchWizardAPI(ctrl *gomock.Controller) *MockLaunchWizardAPI {
	mock := &MockLaunchWizardAPI{ctrl: ctrl}
	mock.recorder = &MockLaunchWizardAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLaunchWizardAPI) EXPECT() *MockLaunchWizardAPIMockRecorder {
	return m.recorder
}

// CreateDeployment mocks base method
func (m *MockLaunchWizardAPI) CreateDeployment(arg0 *launchwizard.CreateDeploymentInput) (*launchwizard.CreateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", arg0)
	ret0, _ := ret[0].(*launchwizard.CreateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockLaunchWizardAPIMockRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockLaunchWizardAPI)(nil).CreateDeployment), arg0)
}

// CreateDeploymentRequest mocks base method
func (m *MockLaunchWizardAPI) CreateDeploymentRequest(arg0 *launchwizard.CreateDeploymentInput) (*request.Request, *launchwizard.CreateDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.CreateDeploymentOutput)
	return ret0, ret1
}

// CreateDeploymentRequest indicates an expected call of CreateDeploymentRequest
func (mr *MockLaunchWizardAPIMockRecorder) CreateDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).CreateDeploymentRequest), arg0)
}

// CreateDeploymentWithContext mocks base method
func (m *MockLaunchWizardAPI) CreateDeploymentWithContext(arg0 context.Context, arg1 *launchwizard.CreateDeploymentInput, arg2 ...request.Option) (*launchwizard.CreateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.CreateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentWithContext indicates an expected call of CreateDeploymentWithContext
func (mr *MockLaunchWizardAPIMockRecorder) CreateDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).CreateDeploymentWithContext), varargs...)
}

// DeleteDeployment mocks base method
func (m *MockLaunchWizardAPI) DeleteDeployment(arg0 *launchwizard.DeleteDeploymentInput) (*launchwizard.DeleteDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0)
	ret0, _ := ret[0].(*launchwizard.DeleteDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment
func (mr *MockLaunchWizardAPIMockRecorder) DeleteDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockLaunchWizardAPI)(nil).DeleteDeployment), arg0)
}

// DeleteDeploymentRequest mocks base method
func (m *MockLaunchWizardAPI) DeleteDeploymentRequest(arg0 *launchwizard.DeleteDeploymentInput) (*request.Request, *launchwizard.DeleteDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.DeleteDeploymentOutput)
	return ret0, ret1
}

// DeleteDeploymentRequest indicates an expected call of DeleteDeploymentRequest
func (mr *MockLaunchWizardAPIMockRecorder) DeleteDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).DeleteDeploymentRequest), arg0)
}

// DeleteDeploymentWithContext mocks base method
func (m *MockLaunchWizardAPI) DeleteDeploymentWithContext(arg0 context.Context, arg1 *launchwizard.DeleteDeploymentInput, arg2 ...request.Option) (*launchwizard.DeleteDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.DeleteDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeploymentWithContext indicates an expected call of DeleteDeploymentWithContext
func (mr *MockLaunchWizardAPIMockRecorder) DeleteDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).DeleteDeploymentWithContext), varargs...)
}

// GetDeployment mocks base method
func (m *MockLaunchWizardAPI) GetDeployment(arg0 *launchwizard.GetDeploymentInput) (*launchwizard.GetDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", arg0)
	ret0, _ := ret[0].(*launchwizard.GetDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment
func (mr *MockLaunchWizardAPIMockRecorder) GetDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockLaunchWizardAPI)(nil).GetDeployment), arg0)
}

// GetDeploymentRequest mocks base method
func (m *MockLaunchWizardAPI) GetDeploymentRequest(arg0 *launchwizard.GetDeploymentInput) (*request.Request, *launchwizard.GetDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.GetDeploymentOutput)
	return ret0, ret1
}

// GetDeploymentRequest indicates an expected call of GetDeploymentRequest
func (mr *MockLaunchWizardAPIMockRecorder) GetDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).GetDeploymentRequest), arg0)
}

// GetDeploymentWithContext mocks base method
func (m *MockLaunchWizardAPI) GetDeploymentWithContext(arg0 context.Context, arg1 *launchwizard.GetDeploymentInput, arg2 ...request.Option) (*launchwizard.GetDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.GetDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentWithContext indicates an expected call of GetDeploymentWithContext
func (mr *MockLaunchWizardAPIMockRecorder) GetDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).GetDeploymentWithContext), varargs...)
}

// GetWorkload mocks base method
func (m *MockLaunchWizardAPI) GetWorkload(arg0 *launchwizard.GetWorkloadInput) (*launchwizard.GetWorkloadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkload", arg0)
	ret0, _ := ret[0].(*launchwizard.GetWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkload indicates an expected call of GetWorkload
func (mr *MockLaunchWizardAPIMockRecorder) GetWorkload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkload", reflect.TypeOf((*MockLaunchWizardAPI)(nil).GetWorkload), arg0)
}

// GetWorkloadDeploymentPattern mocks base method
func (m *MockLaunchWizardAPI) GetWorkloadDeploymentPattern(arg0 *launchwizard.GetWorkloadDeploymentPatternInput) (*launchwizard.GetWorkloadDeploymentPatternOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkloadDeploymentPattern", arg0)
	ret0, _ := ret[0].(*launchwizard.GetWorkloadDeploymentPatternOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkloadDeploymentPattern indicates an expected call of GetWorkloadDeploymentPattern
func (mr *MockLaunchWizardAPIMockRecorder) GetWorkloadDeploymentPattern(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadDeploymentPattern", reflect.TypeOf((*MockLaunchWizardAPI)(nil).GetWorkloadDeploymentPattern), arg0)
}

// GetWorkloadDeploymentPatternRequest mocks base method
func (m *MockLaunchWizardAPI) GetWorkloadDeploymentPatternRequest(arg0 *launchwizard.GetWorkloadDeploymentPatternInput) (*request.Request, *launchwizard.GetWorkloadDeploymentPatternOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkloadDeploymentPatternRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.GetWorkloadDeploymentPatternOutput)
	return ret0, ret1
}

// GetWorkloadDeploymentPatternRequest indicates an expected call of GetWorkloadDeploymentPatternRequest
func (mr *MockLaunchWizardAPIMockRecorder) GetWorkloadDeploymentPatternRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadDeploymentPatternRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).GetWorkloadDeploymentPatternRequest), arg0)
}

// GetWorkloadDeploymentPatternWithContext mocks base method
func (m *MockLaunchWizardAPI) GetWorkloadDeploymentPatternWithContext(arg0 context.Context, arg1 *launchwizard.GetWorkloadDeploymentPatternInput, arg2 ...request.Option) (*launchwizard.GetWorkloadDeploymentPatternOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkloadDeploymentPatternWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.GetWorkloadDeploymentPatternOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkloadDeploymentPatternWithContext indicates an expected call of GetWorkloadDeploymentPatternWithContext
func (mr *MockLaunchWizardAPIMockRecorder) GetWorkloadDeploymentPatternWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadDeploymentPatternWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).GetWorkloadDeploymentPatternWithContext), varargs...)
}

// GetWorkloadRequest mocks base method
func (m *MockLaunchWizardAPI) GetWorkloadRequest(arg0 *launchwizard.GetWorkloadInput) (*request.Request, *launchwizard.GetWorkloadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkloadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.GetWorkloadOutput)
	return ret0, ret1
}

// GetWorkloadRequest indicates an expected call of GetWorkloadRequest
func (mr *MockLaunchWizardAPIMockRecorder) GetWorkloadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).GetWorkloadRequest), arg0)
}

// GetWorkloadWithContext mocks base method
func (m *MockLaunchWizardAPI) GetWorkloadWithContext(arg0 context.Context, arg1 *launchwizard.GetWorkloadInput, arg2 ...request.Option) (*launchwizard.GetWorkloadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkloadWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.GetWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkloadWithContext indicates an expected call of GetWorkloadWithContext
func (mr *MockLaunchWizardAPIMockRecorder) GetWorkloadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).GetWorkloadWithContext), varargs...)
}

// ListDeploymentEvents mocks base method
func (m *MockLaunchWizardAPI) ListDeploymentEvents(arg0 *launchwizard.ListDeploymentEventsInput) (*launchwizard.ListDeploymentEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentEvents", arg0)
	ret0, _ := ret[0].(*launchwizard.ListDeploymentEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentEvents indicates an expected call of ListDeploymentEvents
func (mr *MockLaunchWizardAPIMockRecorder) ListDeploymentEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentEvents", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListDeploymentEvents), arg0)
}

// ListDeploymentEventsPages mocks base method
func (m *MockLaunchWizardAPI) ListDeploymentEventsPages(arg0 *launchwizard.ListDeploymentEventsInput, arg1 func(*launchwizard.ListDeploymentEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentEventsPages indicates an expected call of ListDeploymentEventsPages
func (mr *MockLaunchWizardAPIMockRecorder) ListDeploymentEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentEventsPages", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListDeploymentEventsPages), arg0, arg1)
}

// ListDeploymentEventsPagesWithContext mocks base method
func (m *MockLaunchWizardAPI) ListDeploymentEventsPagesWithContext(arg0 context.Context, arg1 *launchwizard.ListDeploymentEventsInput, arg2 func(*launchwizard.ListDeploymentEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentEventsPagesWithContext indicates an expected call of ListDeploymentEventsPagesWithContext
func (mr *MockLaunchWizardAPIMockRecorder) ListDeploymentEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentEventsPagesWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListDeploymentEventsPagesWithContext), varargs...)
}

// ListDeploymentEventsRequest mocks base method
func (m *MockLaunchWizardAPI) ListDeploymentEventsRequest(arg0 *launchwizard.ListDeploymentEventsInput) (*request.Request, *launchwizard.ListDeploymentEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.ListDeploymentEventsOutput)
	return ret0, ret1
}

// ListDeploymentEventsRequest indicates an expected call of ListDeploymentEventsRequest
func (mr *MockLaunchWizardAPIMockRecorder) ListDeploymentEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentEventsRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListDeploymentEventsRequest), arg0)
}

// ListDeploymentEventsWithContext mocks base method
func (m *MockLaunchWizardAPI) ListDeploymentEventsWithContext(arg0 context.Context, arg1 *launchwizard.ListDeploymentEventsInput, arg2 ...request.Option) (*launchwizard.ListDeploymentEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentEventsWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.ListDeploymentEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentEventsWithContext indicates an expected call of ListDeploymentEventsWithContext
func (mr *MockLaunchWizardAPIMockRecorder) ListDeploymentEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentEventsWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListDeploymentEventsWithContext), varargs...)
}

// ListDeployments mocks base method
func (m *MockLaunchWizardAPI) ListDeployments(arg0 *launchwizard.ListDeploymentsInput) (*launchwizard.ListDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", arg0)
	ret0, _ := ret[0].(*launchwizard.ListDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployments indicates an expected call of ListDeployments
func (mr *MockLaunchWizardAPIMockRecorder) ListDeployments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListDeployments), arg0)
}

// ListDeploymentsPages mocks base method
func (m *MockLaunchWizardAPI) ListDeploymentsPages(arg0 *launchwizard.ListDeploymentsInput, arg1 func(*launchwizard.ListDeploymentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentsPages indicates an expected call of ListDeploymentsPages
func (mr *MockLaunchWizardAPIMockRecorder) ListDeploymentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsPages", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListDeploymentsPages), arg0, arg1)
}

// ListDeploymentsPagesWithContext mocks base method
func (m *MockLaunchWizardAPI) ListDeploymentsPagesWithContext(arg0 context.Context, arg1 *launchwizard.ListDeploymentsInput, arg2 func(*launchwizard.ListDeploymentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentsPagesWithContext indicates an expected call of ListDeploymentsPagesWithContext
func (mr *MockLaunchWizardAPIMockRecorder) ListDeploymentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsPagesWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListDeploymentsPagesWithContext), varargs...)
}

// ListDeploymentsRequest mocks base method
func (m *MockLaunchWizardAPI) ListDeploymentsRequest(arg0 *launchwizard.ListDeploymentsInput) (*request.Request, *launchwizard.ListDeploymentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.ListDeploymentsOutput)
	return ret0, ret1
}

// ListDeploymentsRequest indicates an expected call of ListDeploymentsRequest
func (mr *MockLaunchWizardAPIMockRecorder) ListDeploymentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListDeploymentsRequest), arg0)
}

// ListDeploymentsWithContext mocks base method
func (m *MockLaunchWizardAPI) ListDeploymentsWithContext(arg0 context.Context, arg1 *launchwizard.ListDeploymentsInput, arg2 ...request.Option) (*launchwizard.ListDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentsWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.ListDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentsWithContext indicates an expected call of ListDeploymentsWithContext
func (mr *MockLaunchWizardAPIMockRecorder) ListDeploymentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListDeploymentsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockLaunchWizardAPI) ListTagsForResource(arg0 *launchwizard.ListTagsForResourceInput) (*launchwizard.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*launchwizard.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockLaunchWizardAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockLaunchWizardAPI) ListTagsForResourceRequest(arg0 *launchwizard.ListTagsForResourceInput) (*request.Request, *launchwizard.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockLaunchWizardAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockLaunchWizardAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *launchwizard.ListTagsForResourceInput, arg2 ...request.Option) (*launchwizard.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockLaunchWizardAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListWorkloadDeploymentPatterns mocks base method
func (m *MockLaunchWizardAPI) ListWorkloadDeploymentPatterns(arg0 *launchwizard.ListWorkloadDeploymentPatternsInput) (*launchwizard.ListWorkloadDeploymentPatternsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadDeploymentPatterns", arg0)
	ret0, _ := ret[0].(*launchwizard.ListWorkloadDeploymentPatternsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloadDeploymentPatterns indicates an expected call of ListWorkloadDeploymentPatterns
func (mr *MockLaunchWizardAPIMockRecorder) ListWorkloadDeploymentPatterns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadDeploymentPatterns", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListWorkloadDeploymentPatterns), arg0)
}

// ListWorkloadDeploymentPatternsPages mocks base method
func (m *MockLaunchWizardAPI) ListWorkloadDeploymentPatternsPages(arg0 *launchwizard.ListWorkloadDeploymentPatternsInput, arg1 func(*launchwizard.ListWorkloadDeploymentPatternsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadDeploymentPatternsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadDeploymentPatternsPages indicates an expected call of ListWorkloadDeploymentPatternsPages
func (mr *MockLaunchWizardAPIMockRecorder) ListWorkloadDeploymentPatternsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadDeploymentPatternsPages", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListWorkloadDeploymentPatternsPages), arg0, arg1)
}

// ListWorkloadDeploymentPatternsPagesWithContext mocks base method
func (m *MockLaunchWizardAPI) ListWorkloadDeploymentPatternsPagesWithContext(arg0 context.Context, arg1 *launchwizard.ListWorkloadDeploymentPatternsInput, arg2 func(*launchwizard.ListWorkloadDeploymentPatternsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadDeploymentPatternsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadDeploymentPatternsPagesWithContext indicates an expected call of ListWorkloadDeploymentPatternsPagesWithContext
func (mr *MockLaunchWizardAPIMockRecorder) ListWorkloadDeploymentPatternsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadDeploymentPatternsPagesWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListWorkloadDeploymentPatternsPagesWithContext), varargs...)
}

// ListWorkloadDeploymentPatternsRequest mocks base method
func (m *MockLaunchWizardAPI) ListWorkloadDeploymentPatternsRequest(arg0 *launchwizard.ListWorkloadDeploymentPatternsInput) (*request.Request, *launchwizard.ListWorkloadDeploymentPatternsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadDeploymentPatternsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.ListWorkloadDeploymentPatternsOutput)
	return ret0, ret1
}

// ListWorkloadDeploymentPatternsRequest indicates an expected call of ListWorkloadDeploymentPatternsRequest
func (mr *MockLaunchWizardAPIMockRecorder) ListWorkloadDeploymentPatternsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadDeploymentPatternsRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListWorkloadDeploymentPatternsRequest), arg0)
}

// ListWorkloadDeploymentPatternsWithContext mocks base method
func (m *MockLaunchWizardAPI) ListWorkloadDeploymentPatternsWithContext(arg0 context.Context, arg1 *launchwizard.ListWorkloadDeploymentPatternsInput, arg2 ...request.Option) (*launchwizard.ListWorkloadDeploymentPatternsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadDeploymentPatternsWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.ListWorkloadDeploymentPatternsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloadDeploymentPatternsWithContext indicates an expected call of ListWorkloadDeploymentPatternsWithContext
func (mr *MockLaunchWizardAPIMockRecorder) ListWorkloadDeploymentPatternsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadDeploymentPatternsWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListWorkloadDeploymentPatternsWithContext), varargs...)
}

// ListWorkloads mocks base method
func (m *MockLaunchWizardAPI) ListWorkloads(arg0 *launchwizard.ListWorkloadsInput) (*launchwizard.ListWorkloadsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloads", arg0)
	ret0, _ := ret[0].(*launchwizard.ListWorkloadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloads indicates an expected call of ListWorkloads
func (mr *MockLaunchWizardAPIMockRecorder) ListWorkloads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloads", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListWorkloads), arg0)
}

// ListWorkloadsPages mocks base method
func (m *MockLaunchWizardAPI) ListWorkloadsPages(arg0 *launchwizard.ListWorkloadsInput, arg1 func(*launchwizard.ListWorkloadsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadsPages indicates an expected call of ListWorkloadsPages
func (mr *MockLaunchWizardAPIMockRecorder) ListWorkloadsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsPages", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListWorkloadsPages), arg0, arg1)
}

// ListWorkloadsPagesWithContext mocks base method
func (m *MockLaunchWizardAPI) ListWorkloadsPagesWithContext(arg0 context.Context, arg1 *launchwizard.ListWorkloadsInput, arg2 func(*launchwizard.ListWorkloadsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadsPagesWithContext indicates an expected call of ListWorkloadsPagesWithContext
func (mr *MockLaunchWizardAPIMockRecorder) ListWorkloadsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsPagesWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListWorkloadsPagesWithContext), varargs...)
}

// ListWorkloadsRequest mocks base method
func (m *MockLaunchWizardAPI) ListWorkloadsRequest(arg0 *launchwizard.ListWorkloadsInput) (*request.Request, *launchwizard.ListWorkloadsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.ListWorkloadsOutput)
	return ret0, ret1
}

// ListWorkloadsRequest indicates an expected call of ListWorkloadsRequest
func (mr *MockLaunchWizardAPIMockRecorder) ListWorkloadsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListWorkloadsRequest), arg0)
}

// ListWorkloadsWithContext mocks base method
func (m *MockLaunchWizardAPI) ListWorkloadsWithContext(arg0 context.Context, arg1 *launchwizard.ListWorkloadsInput, arg2 ...request.Option) (*launchwizard.ListWorkloadsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadsWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.ListWorkloadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloadsWithContext indicates an expected call of ListWorkloadsWithContext
func (mr *MockLaunchWizardAPIMockRecorder) ListWorkloadsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).ListWorkloadsWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockLaunchWizardAPI) TagResource(arg0 *launchwizard.TagResourceInput) (*launchwizard.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*launchwizard.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockLaunchWizardAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockLaunchWizardAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockLaunchWizardAPI) TagResourceRequest(arg0 *launchwizard.TagResourceInput) (*request.Request, *launchwizard.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockLaunchWizardAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockLaunchWizardAPI) TagResourceWithContext(arg0 context.Context, arg1 *launchwizard.TagResourceInput, arg2 ...request.Option) (*launchwizard.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockLaunchWizardAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockLaunchWizardAPI) UntagResource(arg0 *launchwizard.UntagResourceInput) (*launchwizard.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*launchwizard.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockLaunchWizardAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockLaunchWizardAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockLaunchWizardAPI) UntagResourceRequest(arg0 *launchwizard.UntagResourceInput) (*request.Request, *launchwizard.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*launchwizard.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockLaunchWizardAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockLaunchWizardAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockLaunchWizardAPI) UntagResourceWithContext(arg0 context.Context, arg1 *launchwizard.UntagResourceInput, arg2 ...request.Option) (*launchwizard.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*launchwizard.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockLaunchWizardAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockLaunchWizardAPI)(nil).UntagResourceWithContext), varargs...)
}
