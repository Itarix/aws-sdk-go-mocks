// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/mgn/mgniface (interfaces: MgnAPI)

// Package mgnmock is a generated GoMock package.
package mgnmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	mgn "github.com/aws/aws-sdk-go/service/mgn"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMgnAPI is a mock of MgnAPI interface
type MockMgnAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMgnAPIMockRecorder
}

// MockMgnAPIMockRecorder is the mock recorder for MockMgnAPI
type MockMgnAPIMockRecorder struct {
	mock *MockMgnAPI
}

// NewMockMgnAPI creates a new mock instance
func NewMockMgnAPI(ctrl *gomock.Controller) *MockMgnAPI {
	mock := &MockMgnAPI{ctrl: ctrl}
	mock.recorder = &MockMgnAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMgnAPI) EXPECT() *MockMgnAPIMockRecorder {
	return m.recorder
}

// ArchiveApplication mocks base method
func (m *MockMgnAPI) ArchiveApplication(arg0 *mgn.ArchiveApplicationInput) (*mgn.ArchiveApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveApplication", arg0)
	ret0, _ := ret[0].(*mgn.ArchiveApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveApplication indicates an expected call of ArchiveApplication
func (mr *MockMgnAPIMockRecorder) ArchiveApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveApplication", reflect.TypeOf((*MockMgnAPI)(nil).ArchiveApplication), arg0)
}

// ArchiveApplicationRequest mocks base method
func (m *MockMgnAPI) ArchiveApplicationRequest(arg0 *mgn.ArchiveApplicationInput) (*request.Request, *mgn.ArchiveApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.ArchiveApplicationOutput)
	return ret0, ret1
}

// ArchiveApplicationRequest indicates an expected call of ArchiveApplicationRequest
func (mr *MockMgnAPIMockRecorder) ArchiveApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveApplicationRequest", reflect.TypeOf((*MockMgnAPI)(nil).ArchiveApplicationRequest), arg0)
}

// ArchiveApplicationWithContext mocks base method
func (m *MockMgnAPI) ArchiveApplicationWithContext(arg0 context.Context, arg1 *mgn.ArchiveApplicationInput, arg2 ...request.Option) (*mgn.ArchiveApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArchiveApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.ArchiveApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveApplicationWithContext indicates an expected call of ArchiveApplicationWithContext
func (mr *MockMgnAPIMockRecorder) ArchiveApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveApplicationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ArchiveApplicationWithContext), varargs...)
}

// ArchiveWave mocks base method
func (m *MockMgnAPI) ArchiveWave(arg0 *mgn.ArchiveWaveInput) (*mgn.ArchiveWaveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveWave", arg0)
	ret0, _ := ret[0].(*mgn.ArchiveWaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveWave indicates an expected call of ArchiveWave
func (mr *MockMgnAPIMockRecorder) ArchiveWave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveWave", reflect.TypeOf((*MockMgnAPI)(nil).ArchiveWave), arg0)
}

// ArchiveWaveRequest mocks base method
func (m *MockMgnAPI) ArchiveWaveRequest(arg0 *mgn.ArchiveWaveInput) (*request.Request, *mgn.ArchiveWaveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveWaveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.ArchiveWaveOutput)
	return ret0, ret1
}

// ArchiveWaveRequest indicates an expected call of ArchiveWaveRequest
func (mr *MockMgnAPIMockRecorder) ArchiveWaveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveWaveRequest", reflect.TypeOf((*MockMgnAPI)(nil).ArchiveWaveRequest), arg0)
}

// ArchiveWaveWithContext mocks base method
func (m *MockMgnAPI) ArchiveWaveWithContext(arg0 context.Context, arg1 *mgn.ArchiveWaveInput, arg2 ...request.Option) (*mgn.ArchiveWaveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArchiveWaveWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.ArchiveWaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveWaveWithContext indicates an expected call of ArchiveWaveWithContext
func (mr *MockMgnAPIMockRecorder) ArchiveWaveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveWaveWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ArchiveWaveWithContext), varargs...)
}

// AssociateApplications mocks base method
func (m *MockMgnAPI) AssociateApplications(arg0 *mgn.AssociateApplicationsInput) (*mgn.AssociateApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateApplications", arg0)
	ret0, _ := ret[0].(*mgn.AssociateApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateApplications indicates an expected call of AssociateApplications
func (mr *MockMgnAPIMockRecorder) AssociateApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateApplications", reflect.TypeOf((*MockMgnAPI)(nil).AssociateApplications), arg0)
}

// AssociateApplicationsRequest mocks base method
func (m *MockMgnAPI) AssociateApplicationsRequest(arg0 *mgn.AssociateApplicationsInput) (*request.Request, *mgn.AssociateApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.AssociateApplicationsOutput)
	return ret0, ret1
}

// AssociateApplicationsRequest indicates an expected call of AssociateApplicationsRequest
func (mr *MockMgnAPIMockRecorder) AssociateApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateApplicationsRequest", reflect.TypeOf((*MockMgnAPI)(nil).AssociateApplicationsRequest), arg0)
}

// AssociateApplicationsWithContext mocks base method
func (m *MockMgnAPI) AssociateApplicationsWithContext(arg0 context.Context, arg1 *mgn.AssociateApplicationsInput, arg2 ...request.Option) (*mgn.AssociateApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.AssociateApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateApplicationsWithContext indicates an expected call of AssociateApplicationsWithContext
func (mr *MockMgnAPIMockRecorder) AssociateApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateApplicationsWithContext", reflect.TypeOf((*MockMgnAPI)(nil).AssociateApplicationsWithContext), varargs...)
}

// AssociateSourceServers mocks base method
func (m *MockMgnAPI) AssociateSourceServers(arg0 *mgn.AssociateSourceServersInput) (*mgn.AssociateSourceServersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateSourceServers", arg0)
	ret0, _ := ret[0].(*mgn.AssociateSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateSourceServers indicates an expected call of AssociateSourceServers
func (mr *MockMgnAPIMockRecorder) AssociateSourceServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSourceServers", reflect.TypeOf((*MockMgnAPI)(nil).AssociateSourceServers), arg0)
}

// AssociateSourceServersRequest mocks base method
func (m *MockMgnAPI) AssociateSourceServersRequest(arg0 *mgn.AssociateSourceServersInput) (*request.Request, *mgn.AssociateSourceServersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateSourceServersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.AssociateSourceServersOutput)
	return ret0, ret1
}

// AssociateSourceServersRequest indicates an expected call of AssociateSourceServersRequest
func (mr *MockMgnAPIMockRecorder) AssociateSourceServersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSourceServersRequest", reflect.TypeOf((*MockMgnAPI)(nil).AssociateSourceServersRequest), arg0)
}

// AssociateSourceServersWithContext mocks base method
func (m *MockMgnAPI) AssociateSourceServersWithContext(arg0 context.Context, arg1 *mgn.AssociateSourceServersInput, arg2 ...request.Option) (*mgn.AssociateSourceServersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateSourceServersWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.AssociateSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateSourceServersWithContext indicates an expected call of AssociateSourceServersWithContext
func (mr *MockMgnAPIMockRecorder) AssociateSourceServersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSourceServersWithContext", reflect.TypeOf((*MockMgnAPI)(nil).AssociateSourceServersWithContext), varargs...)
}

// ChangeServerLifeCycleState mocks base method
func (m *MockMgnAPI) ChangeServerLifeCycleState(arg0 *mgn.ChangeServerLifeCycleStateInput) (*mgn.ChangeServerLifeCycleStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeServerLifeCycleState", arg0)
	ret0, _ := ret[0].(*mgn.ChangeServerLifeCycleStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeServerLifeCycleState indicates an expected call of ChangeServerLifeCycleState
func (mr *MockMgnAPIMockRecorder) ChangeServerLifeCycleState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeServerLifeCycleState", reflect.TypeOf((*MockMgnAPI)(nil).ChangeServerLifeCycleState), arg0)
}

// ChangeServerLifeCycleStateRequest mocks base method
func (m *MockMgnAPI) ChangeServerLifeCycleStateRequest(arg0 *mgn.ChangeServerLifeCycleStateInput) (*request.Request, *mgn.ChangeServerLifeCycleStateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeServerLifeCycleStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.ChangeServerLifeCycleStateOutput)
	return ret0, ret1
}

// ChangeServerLifeCycleStateRequest indicates an expected call of ChangeServerLifeCycleStateRequest
func (mr *MockMgnAPIMockRecorder) ChangeServerLifeCycleStateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeServerLifeCycleStateRequest", reflect.TypeOf((*MockMgnAPI)(nil).ChangeServerLifeCycleStateRequest), arg0)
}

// ChangeServerLifeCycleStateWithContext mocks base method
func (m *MockMgnAPI) ChangeServerLifeCycleStateWithContext(arg0 context.Context, arg1 *mgn.ChangeServerLifeCycleStateInput, arg2 ...request.Option) (*mgn.ChangeServerLifeCycleStateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeServerLifeCycleStateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.ChangeServerLifeCycleStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeServerLifeCycleStateWithContext indicates an expected call of ChangeServerLifeCycleStateWithContext
func (mr *MockMgnAPIMockRecorder) ChangeServerLifeCycleStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeServerLifeCycleStateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ChangeServerLifeCycleStateWithContext), varargs...)
}

// CreateApplication mocks base method
func (m *MockMgnAPI) CreateApplication(arg0 *mgn.CreateApplicationInput) (*mgn.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*mgn.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockMgnAPIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockMgnAPI)(nil).CreateApplication), arg0)
}

// CreateApplicationRequest mocks base method
func (m *MockMgnAPI) CreateApplicationRequest(arg0 *mgn.CreateApplicationInput) (*request.Request, *mgn.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest
func (mr *MockMgnAPIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockMgnAPI)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationWithContext mocks base method
func (m *MockMgnAPI) CreateApplicationWithContext(arg0 context.Context, arg1 *mgn.CreateApplicationInput, arg2 ...request.Option) (*mgn.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext
func (mr *MockMgnAPIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).CreateApplicationWithContext), varargs...)
}

// CreateLaunchConfigurationTemplate mocks base method
func (m *MockMgnAPI) CreateLaunchConfigurationTemplate(arg0 *mgn.CreateLaunchConfigurationTemplateInput) (*mgn.CreateLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLaunchConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*mgn.CreateLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLaunchConfigurationTemplate indicates an expected call of CreateLaunchConfigurationTemplate
func (mr *MockMgnAPIMockRecorder) CreateLaunchConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchConfigurationTemplate", reflect.TypeOf((*MockMgnAPI)(nil).CreateLaunchConfigurationTemplate), arg0)
}

// CreateLaunchConfigurationTemplateRequest mocks base method
func (m *MockMgnAPI) CreateLaunchConfigurationTemplateRequest(arg0 *mgn.CreateLaunchConfigurationTemplateInput) (*request.Request, *mgn.CreateLaunchConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLaunchConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.CreateLaunchConfigurationTemplateOutput)
	return ret0, ret1
}

// CreateLaunchConfigurationTemplateRequest indicates an expected call of CreateLaunchConfigurationTemplateRequest
func (mr *MockMgnAPIMockRecorder) CreateLaunchConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchConfigurationTemplateRequest", reflect.TypeOf((*MockMgnAPI)(nil).CreateLaunchConfigurationTemplateRequest), arg0)
}

// CreateLaunchConfigurationTemplateWithContext mocks base method
func (m *MockMgnAPI) CreateLaunchConfigurationTemplateWithContext(arg0 context.Context, arg1 *mgn.CreateLaunchConfigurationTemplateInput, arg2 ...request.Option) (*mgn.CreateLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLaunchConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.CreateLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLaunchConfigurationTemplateWithContext indicates an expected call of CreateLaunchConfigurationTemplateWithContext
func (mr *MockMgnAPIMockRecorder) CreateLaunchConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchConfigurationTemplateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).CreateLaunchConfigurationTemplateWithContext), varargs...)
}

// CreateReplicationConfigurationTemplate mocks base method
func (m *MockMgnAPI) CreateReplicationConfigurationTemplate(arg0 *mgn.CreateReplicationConfigurationTemplateInput) (*mgn.CreateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*mgn.CreateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplate indicates an expected call of CreateReplicationConfigurationTemplate
func (mr *MockMgnAPIMockRecorder) CreateReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplate", reflect.TypeOf((*MockMgnAPI)(nil).CreateReplicationConfigurationTemplate), arg0)
}

// CreateReplicationConfigurationTemplateRequest mocks base method
func (m *MockMgnAPI) CreateReplicationConfigurationTemplateRequest(arg0 *mgn.CreateReplicationConfigurationTemplateInput) (*request.Request, *mgn.CreateReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.CreateReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplateRequest indicates an expected call of CreateReplicationConfigurationTemplateRequest
func (mr *MockMgnAPIMockRecorder) CreateReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockMgnAPI)(nil).CreateReplicationConfigurationTemplateRequest), arg0)
}

// CreateReplicationConfigurationTemplateWithContext mocks base method
func (m *MockMgnAPI) CreateReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *mgn.CreateReplicationConfigurationTemplateInput, arg2 ...request.Option) (*mgn.CreateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.CreateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplateWithContext indicates an expected call of CreateReplicationConfigurationTemplateWithContext
func (mr *MockMgnAPIMockRecorder) CreateReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).CreateReplicationConfigurationTemplateWithContext), varargs...)
}

// CreateWave mocks base method
func (m *MockMgnAPI) CreateWave(arg0 *mgn.CreateWaveInput) (*mgn.CreateWaveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWave", arg0)
	ret0, _ := ret[0].(*mgn.CreateWaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWave indicates an expected call of CreateWave
func (mr *MockMgnAPIMockRecorder) CreateWave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWave", reflect.TypeOf((*MockMgnAPI)(nil).CreateWave), arg0)
}

// CreateWaveRequest mocks base method
func (m *MockMgnAPI) CreateWaveRequest(arg0 *mgn.CreateWaveInput) (*request.Request, *mgn.CreateWaveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWaveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.CreateWaveOutput)
	return ret0, ret1
}

// CreateWaveRequest indicates an expected call of CreateWaveRequest
func (mr *MockMgnAPIMockRecorder) CreateWaveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWaveRequest", reflect.TypeOf((*MockMgnAPI)(nil).CreateWaveRequest), arg0)
}

// CreateWaveWithContext mocks base method
func (m *MockMgnAPI) CreateWaveWithContext(arg0 context.Context, arg1 *mgn.CreateWaveInput, arg2 ...request.Option) (*mgn.CreateWaveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWaveWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.CreateWaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWaveWithContext indicates an expected call of CreateWaveWithContext
func (mr *MockMgnAPIMockRecorder) CreateWaveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWaveWithContext", reflect.TypeOf((*MockMgnAPI)(nil).CreateWaveWithContext), varargs...)
}

// DeleteApplication mocks base method
func (m *MockMgnAPI) DeleteApplication(arg0 *mgn.DeleteApplicationInput) (*mgn.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*mgn.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockMgnAPIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockMgnAPI)(nil).DeleteApplication), arg0)
}

// DeleteApplicationRequest mocks base method
func (m *MockMgnAPI) DeleteApplicationRequest(arg0 *mgn.DeleteApplicationInput) (*request.Request, *mgn.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest
func (mr *MockMgnAPIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockMgnAPI)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationWithContext mocks base method
func (m *MockMgnAPI) DeleteApplicationWithContext(arg0 context.Context, arg1 *mgn.DeleteApplicationInput, arg2 ...request.Option) (*mgn.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext
func (mr *MockMgnAPIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DeleteApplicationWithContext), varargs...)
}

// DeleteJob mocks base method
func (m *MockMgnAPI) DeleteJob(arg0 *mgn.DeleteJobInput) (*mgn.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(*mgn.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob
func (mr *MockMgnAPIMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockMgnAPI)(nil).DeleteJob), arg0)
}

// DeleteJobRequest mocks base method
func (m *MockMgnAPI) DeleteJobRequest(arg0 *mgn.DeleteJobInput) (*request.Request, *mgn.DeleteJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DeleteJobOutput)
	return ret0, ret1
}

// DeleteJobRequest indicates an expected call of DeleteJobRequest
func (mr *MockMgnAPIMockRecorder) DeleteJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRequest", reflect.TypeOf((*MockMgnAPI)(nil).DeleteJobRequest), arg0)
}

// DeleteJobWithContext mocks base method
func (m *MockMgnAPI) DeleteJobWithContext(arg0 context.Context, arg1 *mgn.DeleteJobInput, arg2 ...request.Option) (*mgn.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobWithContext indicates an expected call of DeleteJobWithContext
func (mr *MockMgnAPIMockRecorder) DeleteJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DeleteJobWithContext), varargs...)
}

// DeleteLaunchConfigurationTemplate mocks base method
func (m *MockMgnAPI) DeleteLaunchConfigurationTemplate(arg0 *mgn.DeleteLaunchConfigurationTemplateInput) (*mgn.DeleteLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*mgn.DeleteLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchConfigurationTemplate indicates an expected call of DeleteLaunchConfigurationTemplate
func (mr *MockMgnAPIMockRecorder) DeleteLaunchConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchConfigurationTemplate", reflect.TypeOf((*MockMgnAPI)(nil).DeleteLaunchConfigurationTemplate), arg0)
}

// DeleteLaunchConfigurationTemplateRequest mocks base method
func (m *MockMgnAPI) DeleteLaunchConfigurationTemplateRequest(arg0 *mgn.DeleteLaunchConfigurationTemplateInput) (*request.Request, *mgn.DeleteLaunchConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DeleteLaunchConfigurationTemplateOutput)
	return ret0, ret1
}

// DeleteLaunchConfigurationTemplateRequest indicates an expected call of DeleteLaunchConfigurationTemplateRequest
func (mr *MockMgnAPIMockRecorder) DeleteLaunchConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchConfigurationTemplateRequest", reflect.TypeOf((*MockMgnAPI)(nil).DeleteLaunchConfigurationTemplateRequest), arg0)
}

// DeleteLaunchConfigurationTemplateWithContext mocks base method
func (m *MockMgnAPI) DeleteLaunchConfigurationTemplateWithContext(arg0 context.Context, arg1 *mgn.DeleteLaunchConfigurationTemplateInput, arg2 ...request.Option) (*mgn.DeleteLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLaunchConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DeleteLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchConfigurationTemplateWithContext indicates an expected call of DeleteLaunchConfigurationTemplateWithContext
func (mr *MockMgnAPIMockRecorder) DeleteLaunchConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchConfigurationTemplateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DeleteLaunchConfigurationTemplateWithContext), varargs...)
}

// DeleteReplicationConfigurationTemplate mocks base method
func (m *MockMgnAPI) DeleteReplicationConfigurationTemplate(arg0 *mgn.DeleteReplicationConfigurationTemplateInput) (*mgn.DeleteReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*mgn.DeleteReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplate indicates an expected call of DeleteReplicationConfigurationTemplate
func (mr *MockMgnAPIMockRecorder) DeleteReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplate", reflect.TypeOf((*MockMgnAPI)(nil).DeleteReplicationConfigurationTemplate), arg0)
}

// DeleteReplicationConfigurationTemplateRequest mocks base method
func (m *MockMgnAPI) DeleteReplicationConfigurationTemplateRequest(arg0 *mgn.DeleteReplicationConfigurationTemplateInput) (*request.Request, *mgn.DeleteReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DeleteReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplateRequest indicates an expected call of DeleteReplicationConfigurationTemplateRequest
func (mr *MockMgnAPIMockRecorder) DeleteReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockMgnAPI)(nil).DeleteReplicationConfigurationTemplateRequest), arg0)
}

// DeleteReplicationConfigurationTemplateWithContext mocks base method
func (m *MockMgnAPI) DeleteReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *mgn.DeleteReplicationConfigurationTemplateInput, arg2 ...request.Option) (*mgn.DeleteReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DeleteReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplateWithContext indicates an expected call of DeleteReplicationConfigurationTemplateWithContext
func (mr *MockMgnAPIMockRecorder) DeleteReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DeleteReplicationConfigurationTemplateWithContext), varargs...)
}

// DeleteSourceServer mocks base method
func (m *MockMgnAPI) DeleteSourceServer(arg0 *mgn.DeleteSourceServerInput) (*mgn.DeleteSourceServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceServer", arg0)
	ret0, _ := ret[0].(*mgn.DeleteSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceServer indicates an expected call of DeleteSourceServer
func (mr *MockMgnAPIMockRecorder) DeleteSourceServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServer", reflect.TypeOf((*MockMgnAPI)(nil).DeleteSourceServer), arg0)
}

// DeleteSourceServerRequest mocks base method
func (m *MockMgnAPI) DeleteSourceServerRequest(arg0 *mgn.DeleteSourceServerInput) (*request.Request, *mgn.DeleteSourceServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DeleteSourceServerOutput)
	return ret0, ret1
}

// DeleteSourceServerRequest indicates an expected call of DeleteSourceServerRequest
func (mr *MockMgnAPIMockRecorder) DeleteSourceServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServerRequest", reflect.TypeOf((*MockMgnAPI)(nil).DeleteSourceServerRequest), arg0)
}

// DeleteSourceServerWithContext mocks base method
func (m *MockMgnAPI) DeleteSourceServerWithContext(arg0 context.Context, arg1 *mgn.DeleteSourceServerInput, arg2 ...request.Option) (*mgn.DeleteSourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSourceServerWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DeleteSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceServerWithContext indicates an expected call of DeleteSourceServerWithContext
func (mr *MockMgnAPIMockRecorder) DeleteSourceServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServerWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DeleteSourceServerWithContext), varargs...)
}

// DeleteVcenterClient mocks base method
func (m *MockMgnAPI) DeleteVcenterClient(arg0 *mgn.DeleteVcenterClientInput) (*mgn.DeleteVcenterClientOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVcenterClient", arg0)
	ret0, _ := ret[0].(*mgn.DeleteVcenterClientOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVcenterClient indicates an expected call of DeleteVcenterClient
func (mr *MockMgnAPIMockRecorder) DeleteVcenterClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVcenterClient", reflect.TypeOf((*MockMgnAPI)(nil).DeleteVcenterClient), arg0)
}

// DeleteVcenterClientRequest mocks base method
func (m *MockMgnAPI) DeleteVcenterClientRequest(arg0 *mgn.DeleteVcenterClientInput) (*request.Request, *mgn.DeleteVcenterClientOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVcenterClientRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DeleteVcenterClientOutput)
	return ret0, ret1
}

// DeleteVcenterClientRequest indicates an expected call of DeleteVcenterClientRequest
func (mr *MockMgnAPIMockRecorder) DeleteVcenterClientRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVcenterClientRequest", reflect.TypeOf((*MockMgnAPI)(nil).DeleteVcenterClientRequest), arg0)
}

// DeleteVcenterClientWithContext mocks base method
func (m *MockMgnAPI) DeleteVcenterClientWithContext(arg0 context.Context, arg1 *mgn.DeleteVcenterClientInput, arg2 ...request.Option) (*mgn.DeleteVcenterClientOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVcenterClientWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DeleteVcenterClientOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVcenterClientWithContext indicates an expected call of DeleteVcenterClientWithContext
func (mr *MockMgnAPIMockRecorder) DeleteVcenterClientWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVcenterClientWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DeleteVcenterClientWithContext), varargs...)
}

// DeleteWave mocks base method
func (m *MockMgnAPI) DeleteWave(arg0 *mgn.DeleteWaveInput) (*mgn.DeleteWaveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWave", arg0)
	ret0, _ := ret[0].(*mgn.DeleteWaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWave indicates an expected call of DeleteWave
func (mr *MockMgnAPIMockRecorder) DeleteWave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWave", reflect.TypeOf((*MockMgnAPI)(nil).DeleteWave), arg0)
}

// DeleteWaveRequest mocks base method
func (m *MockMgnAPI) DeleteWaveRequest(arg0 *mgn.DeleteWaveInput) (*request.Request, *mgn.DeleteWaveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWaveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DeleteWaveOutput)
	return ret0, ret1
}

// DeleteWaveRequest indicates an expected call of DeleteWaveRequest
func (mr *MockMgnAPIMockRecorder) DeleteWaveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWaveRequest", reflect.TypeOf((*MockMgnAPI)(nil).DeleteWaveRequest), arg0)
}

// DeleteWaveWithContext mocks base method
func (m *MockMgnAPI) DeleteWaveWithContext(arg0 context.Context, arg1 *mgn.DeleteWaveInput, arg2 ...request.Option) (*mgn.DeleteWaveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWaveWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DeleteWaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWaveWithContext indicates an expected call of DeleteWaveWithContext
func (mr *MockMgnAPIMockRecorder) DeleteWaveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWaveWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DeleteWaveWithContext), varargs...)
}

// DescribeJobLogItems mocks base method
func (m *MockMgnAPI) DescribeJobLogItems(arg0 *mgn.DescribeJobLogItemsInput) (*mgn.DescribeJobLogItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItems", arg0)
	ret0, _ := ret[0].(*mgn.DescribeJobLogItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobLogItems indicates an expected call of DescribeJobLogItems
func (mr *MockMgnAPIMockRecorder) DescribeJobLogItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItems", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobLogItems), arg0)
}

// DescribeJobLogItemsPages mocks base method
func (m *MockMgnAPI) DescribeJobLogItemsPages(arg0 *mgn.DescribeJobLogItemsInput, arg1 func(*mgn.DescribeJobLogItemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobLogItemsPages indicates an expected call of DescribeJobLogItemsPages
func (mr *MockMgnAPIMockRecorder) DescribeJobLogItemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsPages", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobLogItemsPages), arg0, arg1)
}

// DescribeJobLogItemsPagesWithContext mocks base method
func (m *MockMgnAPI) DescribeJobLogItemsPagesWithContext(arg0 context.Context, arg1 *mgn.DescribeJobLogItemsInput, arg2 func(*mgn.DescribeJobLogItemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobLogItemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobLogItemsPagesWithContext indicates an expected call of DescribeJobLogItemsPagesWithContext
func (mr *MockMgnAPIMockRecorder) DescribeJobLogItemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobLogItemsPagesWithContext), varargs...)
}

// DescribeJobLogItemsRequest mocks base method
func (m *MockMgnAPI) DescribeJobLogItemsRequest(arg0 *mgn.DescribeJobLogItemsInput) (*request.Request, *mgn.DescribeJobLogItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DescribeJobLogItemsOutput)
	return ret0, ret1
}

// DescribeJobLogItemsRequest indicates an expected call of DescribeJobLogItemsRequest
func (mr *MockMgnAPIMockRecorder) DescribeJobLogItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsRequest", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobLogItemsRequest), arg0)
}

// DescribeJobLogItemsWithContext mocks base method
func (m *MockMgnAPI) DescribeJobLogItemsWithContext(arg0 context.Context, arg1 *mgn.DescribeJobLogItemsInput, arg2 ...request.Option) (*mgn.DescribeJobLogItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobLogItemsWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DescribeJobLogItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobLogItemsWithContext indicates an expected call of DescribeJobLogItemsWithContext
func (mr *MockMgnAPIMockRecorder) DescribeJobLogItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobLogItemsWithContext), varargs...)
}

// DescribeJobs mocks base method
func (m *MockMgnAPI) DescribeJobs(arg0 *mgn.DescribeJobsInput) (*mgn.DescribeJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobs", arg0)
	ret0, _ := ret[0].(*mgn.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobs indicates an expected call of DescribeJobs
func (mr *MockMgnAPIMockRecorder) DescribeJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobs", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobs), arg0)
}

// DescribeJobsPages mocks base method
func (m *MockMgnAPI) DescribeJobsPages(arg0 *mgn.DescribeJobsInput, arg1 func(*mgn.DescribeJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobsPages indicates an expected call of DescribeJobsPages
func (mr *MockMgnAPIMockRecorder) DescribeJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsPages", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobsPages), arg0, arg1)
}

// DescribeJobsPagesWithContext mocks base method
func (m *MockMgnAPI) DescribeJobsPagesWithContext(arg0 context.Context, arg1 *mgn.DescribeJobsInput, arg2 func(*mgn.DescribeJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobsPagesWithContext indicates an expected call of DescribeJobsPagesWithContext
func (mr *MockMgnAPIMockRecorder) DescribeJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobsPagesWithContext), varargs...)
}

// DescribeJobsRequest mocks base method
func (m *MockMgnAPI) DescribeJobsRequest(arg0 *mgn.DescribeJobsInput) (*request.Request, *mgn.DescribeJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DescribeJobsOutput)
	return ret0, ret1
}

// DescribeJobsRequest indicates an expected call of DescribeJobsRequest
func (mr *MockMgnAPIMockRecorder) DescribeJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsRequest", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobsRequest), arg0)
}

// DescribeJobsWithContext mocks base method
func (m *MockMgnAPI) DescribeJobsWithContext(arg0 context.Context, arg1 *mgn.DescribeJobsInput, arg2 ...request.Option) (*mgn.DescribeJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobsWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobsWithContext indicates an expected call of DescribeJobsWithContext
func (mr *MockMgnAPIMockRecorder) DescribeJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobsWithContext), varargs...)
}

// DescribeLaunchConfigurationTemplates mocks base method
func (m *MockMgnAPI) DescribeLaunchConfigurationTemplates(arg0 *mgn.DescribeLaunchConfigurationTemplatesInput) (*mgn.DescribeLaunchConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLaunchConfigurationTemplates", arg0)
	ret0, _ := ret[0].(*mgn.DescribeLaunchConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLaunchConfigurationTemplates indicates an expected call of DescribeLaunchConfigurationTemplates
func (mr *MockMgnAPIMockRecorder) DescribeLaunchConfigurationTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchConfigurationTemplates", reflect.TypeOf((*MockMgnAPI)(nil).DescribeLaunchConfigurationTemplates), arg0)
}

// DescribeLaunchConfigurationTemplatesPages mocks base method
func (m *MockMgnAPI) DescribeLaunchConfigurationTemplatesPages(arg0 *mgn.DescribeLaunchConfigurationTemplatesInput, arg1 func(*mgn.DescribeLaunchConfigurationTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLaunchConfigurationTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeLaunchConfigurationTemplatesPages indicates an expected call of DescribeLaunchConfigurationTemplatesPages
func (mr *MockMgnAPIMockRecorder) DescribeLaunchConfigurationTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchConfigurationTemplatesPages", reflect.TypeOf((*MockMgnAPI)(nil).DescribeLaunchConfigurationTemplatesPages), arg0, arg1)
}

// DescribeLaunchConfigurationTemplatesPagesWithContext mocks base method
func (m *MockMgnAPI) DescribeLaunchConfigurationTemplatesPagesWithContext(arg0 context.Context, arg1 *mgn.DescribeLaunchConfigurationTemplatesInput, arg2 func(*mgn.DescribeLaunchConfigurationTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLaunchConfigurationTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeLaunchConfigurationTemplatesPagesWithContext indicates an expected call of DescribeLaunchConfigurationTemplatesPagesWithContext
func (mr *MockMgnAPIMockRecorder) DescribeLaunchConfigurationTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchConfigurationTemplatesPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeLaunchConfigurationTemplatesPagesWithContext), varargs...)
}

// DescribeLaunchConfigurationTemplatesRequest mocks base method
func (m *MockMgnAPI) DescribeLaunchConfigurationTemplatesRequest(arg0 *mgn.DescribeLaunchConfigurationTemplatesInput) (*request.Request, *mgn.DescribeLaunchConfigurationTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLaunchConfigurationTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DescribeLaunchConfigurationTemplatesOutput)
	return ret0, ret1
}

// DescribeLaunchConfigurationTemplatesRequest indicates an expected call of DescribeLaunchConfigurationTemplatesRequest
func (mr *MockMgnAPIMockRecorder) DescribeLaunchConfigurationTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchConfigurationTemplatesRequest", reflect.TypeOf((*MockMgnAPI)(nil).DescribeLaunchConfigurationTemplatesRequest), arg0)
}

// DescribeLaunchConfigurationTemplatesWithContext mocks base method
func (m *MockMgnAPI) DescribeLaunchConfigurationTemplatesWithContext(arg0 context.Context, arg1 *mgn.DescribeLaunchConfigurationTemplatesInput, arg2 ...request.Option) (*mgn.DescribeLaunchConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLaunchConfigurationTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DescribeLaunchConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLaunchConfigurationTemplatesWithContext indicates an expected call of DescribeLaunchConfigurationTemplatesWithContext
func (mr *MockMgnAPIMockRecorder) DescribeLaunchConfigurationTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchConfigurationTemplatesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeLaunchConfigurationTemplatesWithContext), varargs...)
}

// DescribeReplicationConfigurationTemplates mocks base method
func (m *MockMgnAPI) DescribeReplicationConfigurationTemplates(arg0 *mgn.DescribeReplicationConfigurationTemplatesInput) (*mgn.DescribeReplicationConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplates", arg0)
	ret0, _ := ret[0].(*mgn.DescribeReplicationConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplates indicates an expected call of DescribeReplicationConfigurationTemplates
func (mr *MockMgnAPIMockRecorder) DescribeReplicationConfigurationTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplates", reflect.TypeOf((*MockMgnAPI)(nil).DescribeReplicationConfigurationTemplates), arg0)
}

// DescribeReplicationConfigurationTemplatesPages mocks base method
func (m *MockMgnAPI) DescribeReplicationConfigurationTemplatesPages(arg0 *mgn.DescribeReplicationConfigurationTemplatesInput, arg1 func(*mgn.DescribeReplicationConfigurationTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationConfigurationTemplatesPages indicates an expected call of DescribeReplicationConfigurationTemplatesPages
func (mr *MockMgnAPIMockRecorder) DescribeReplicationConfigurationTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesPages", reflect.TypeOf((*MockMgnAPI)(nil).DescribeReplicationConfigurationTemplatesPages), arg0, arg1)
}

// DescribeReplicationConfigurationTemplatesPagesWithContext mocks base method
func (m *MockMgnAPI) DescribeReplicationConfigurationTemplatesPagesWithContext(arg0 context.Context, arg1 *mgn.DescribeReplicationConfigurationTemplatesInput, arg2 func(*mgn.DescribeReplicationConfigurationTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationConfigurationTemplatesPagesWithContext indicates an expected call of DescribeReplicationConfigurationTemplatesPagesWithContext
func (mr *MockMgnAPIMockRecorder) DescribeReplicationConfigurationTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeReplicationConfigurationTemplatesPagesWithContext), varargs...)
}

// DescribeReplicationConfigurationTemplatesRequest mocks base method
func (m *MockMgnAPI) DescribeReplicationConfigurationTemplatesRequest(arg0 *mgn.DescribeReplicationConfigurationTemplatesInput) (*request.Request, *mgn.DescribeReplicationConfigurationTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DescribeReplicationConfigurationTemplatesOutput)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplatesRequest indicates an expected call of DescribeReplicationConfigurationTemplatesRequest
func (mr *MockMgnAPIMockRecorder) DescribeReplicationConfigurationTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesRequest", reflect.TypeOf((*MockMgnAPI)(nil).DescribeReplicationConfigurationTemplatesRequest), arg0)
}

// DescribeReplicationConfigurationTemplatesWithContext mocks base method
func (m *MockMgnAPI) DescribeReplicationConfigurationTemplatesWithContext(arg0 context.Context, arg1 *mgn.DescribeReplicationConfigurationTemplatesInput, arg2 ...request.Option) (*mgn.DescribeReplicationConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DescribeReplicationConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplatesWithContext indicates an expected call of DescribeReplicationConfigurationTemplatesWithContext
func (mr *MockMgnAPIMockRecorder) DescribeReplicationConfigurationTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeReplicationConfigurationTemplatesWithContext), varargs...)
}

// DescribeSourceServers mocks base method
func (m *MockMgnAPI) DescribeSourceServers(arg0 *mgn.DescribeSourceServersInput) (*mgn.DescribeSourceServersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServers", arg0)
	ret0, _ := ret[0].(*mgn.DescribeSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceServers indicates an expected call of DescribeSourceServers
func (mr *MockMgnAPIMockRecorder) DescribeSourceServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServers", reflect.TypeOf((*MockMgnAPI)(nil).DescribeSourceServers), arg0)
}

// DescribeSourceServersPages mocks base method
func (m *MockMgnAPI) DescribeSourceServersPages(arg0 *mgn.DescribeSourceServersInput, arg1 func(*mgn.DescribeSourceServersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSourceServersPages indicates an expected call of DescribeSourceServersPages
func (mr *MockMgnAPIMockRecorder) DescribeSourceServersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersPages", reflect.TypeOf((*MockMgnAPI)(nil).DescribeSourceServersPages), arg0, arg1)
}

// DescribeSourceServersPagesWithContext mocks base method
func (m *MockMgnAPI) DescribeSourceServersPagesWithContext(arg0 context.Context, arg1 *mgn.DescribeSourceServersInput, arg2 func(*mgn.DescribeSourceServersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceServersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSourceServersPagesWithContext indicates an expected call of DescribeSourceServersPagesWithContext
func (mr *MockMgnAPIMockRecorder) DescribeSourceServersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeSourceServersPagesWithContext), varargs...)
}

// DescribeSourceServersRequest mocks base method
func (m *MockMgnAPI) DescribeSourceServersRequest(arg0 *mgn.DescribeSourceServersInput) (*request.Request, *mgn.DescribeSourceServersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DescribeSourceServersOutput)
	return ret0, ret1
}

// DescribeSourceServersRequest indicates an expected call of DescribeSourceServersRequest
func (mr *MockMgnAPIMockRecorder) DescribeSourceServersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersRequest", reflect.TypeOf((*MockMgnAPI)(nil).DescribeSourceServersRequest), arg0)
}

// DescribeSourceServersWithContext mocks base method
func (m *MockMgnAPI) DescribeSourceServersWithContext(arg0 context.Context, arg1 *mgn.DescribeSourceServersInput, arg2 ...request.Option) (*mgn.DescribeSourceServersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceServersWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DescribeSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceServersWithContext indicates an expected call of DescribeSourceServersWithContext
func (mr *MockMgnAPIMockRecorder) DescribeSourceServersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeSourceServersWithContext), varargs...)
}

// DescribeVcenterClients mocks base method
func (m *MockMgnAPI) DescribeVcenterClients(arg0 *mgn.DescribeVcenterClientsInput) (*mgn.DescribeVcenterClientsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVcenterClients", arg0)
	ret0, _ := ret[0].(*mgn.DescribeVcenterClientsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVcenterClients indicates an expected call of DescribeVcenterClients
func (mr *MockMgnAPIMockRecorder) DescribeVcenterClients(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVcenterClients", reflect.TypeOf((*MockMgnAPI)(nil).DescribeVcenterClients), arg0)
}

// DescribeVcenterClientsPages mocks base method
func (m *MockMgnAPI) DescribeVcenterClientsPages(arg0 *mgn.DescribeVcenterClientsInput, arg1 func(*mgn.DescribeVcenterClientsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVcenterClientsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeVcenterClientsPages indicates an expected call of DescribeVcenterClientsPages
func (mr *MockMgnAPIMockRecorder) DescribeVcenterClientsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVcenterClientsPages", reflect.TypeOf((*MockMgnAPI)(nil).DescribeVcenterClientsPages), arg0, arg1)
}

// DescribeVcenterClientsPagesWithContext mocks base method
func (m *MockMgnAPI) DescribeVcenterClientsPagesWithContext(arg0 context.Context, arg1 *mgn.DescribeVcenterClientsInput, arg2 func(*mgn.DescribeVcenterClientsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVcenterClientsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeVcenterClientsPagesWithContext indicates an expected call of DescribeVcenterClientsPagesWithContext
func (mr *MockMgnAPIMockRecorder) DescribeVcenterClientsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVcenterClientsPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeVcenterClientsPagesWithContext), varargs...)
}

// DescribeVcenterClientsRequest mocks base method
func (m *MockMgnAPI) DescribeVcenterClientsRequest(arg0 *mgn.DescribeVcenterClientsInput) (*request.Request, *mgn.DescribeVcenterClientsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVcenterClientsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DescribeVcenterClientsOutput)
	return ret0, ret1
}

// DescribeVcenterClientsRequest indicates an expected call of DescribeVcenterClientsRequest
func (mr *MockMgnAPIMockRecorder) DescribeVcenterClientsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVcenterClientsRequest", reflect.TypeOf((*MockMgnAPI)(nil).DescribeVcenterClientsRequest), arg0)
}

// DescribeVcenterClientsWithContext mocks base method
func (m *MockMgnAPI) DescribeVcenterClientsWithContext(arg0 context.Context, arg1 *mgn.DescribeVcenterClientsInput, arg2 ...request.Option) (*mgn.DescribeVcenterClientsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVcenterClientsWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DescribeVcenterClientsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVcenterClientsWithContext indicates an expected call of DescribeVcenterClientsWithContext
func (mr *MockMgnAPIMockRecorder) DescribeVcenterClientsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVcenterClientsWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeVcenterClientsWithContext), varargs...)
}

// DisassociateApplications mocks base method
func (m *MockMgnAPI) DisassociateApplications(arg0 *mgn.DisassociateApplicationsInput) (*mgn.DisassociateApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateApplications", arg0)
	ret0, _ := ret[0].(*mgn.DisassociateApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateApplications indicates an expected call of DisassociateApplications
func (mr *MockMgnAPIMockRecorder) DisassociateApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateApplications", reflect.TypeOf((*MockMgnAPI)(nil).DisassociateApplications), arg0)
}

// DisassociateApplicationsRequest mocks base method
func (m *MockMgnAPI) DisassociateApplicationsRequest(arg0 *mgn.DisassociateApplicationsInput) (*request.Request, *mgn.DisassociateApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DisassociateApplicationsOutput)
	return ret0, ret1
}

// DisassociateApplicationsRequest indicates an expected call of DisassociateApplicationsRequest
func (mr *MockMgnAPIMockRecorder) DisassociateApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateApplicationsRequest", reflect.TypeOf((*MockMgnAPI)(nil).DisassociateApplicationsRequest), arg0)
}

// DisassociateApplicationsWithContext mocks base method
func (m *MockMgnAPI) DisassociateApplicationsWithContext(arg0 context.Context, arg1 *mgn.DisassociateApplicationsInput, arg2 ...request.Option) (*mgn.DisassociateApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DisassociateApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateApplicationsWithContext indicates an expected call of DisassociateApplicationsWithContext
func (mr *MockMgnAPIMockRecorder) DisassociateApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateApplicationsWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DisassociateApplicationsWithContext), varargs...)
}

// DisassociateSourceServers mocks base method
func (m *MockMgnAPI) DisassociateSourceServers(arg0 *mgn.DisassociateSourceServersInput) (*mgn.DisassociateSourceServersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateSourceServers", arg0)
	ret0, _ := ret[0].(*mgn.DisassociateSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateSourceServers indicates an expected call of DisassociateSourceServers
func (mr *MockMgnAPIMockRecorder) DisassociateSourceServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateSourceServers", reflect.TypeOf((*MockMgnAPI)(nil).DisassociateSourceServers), arg0)
}

// DisassociateSourceServersRequest mocks base method
func (m *MockMgnAPI) DisassociateSourceServersRequest(arg0 *mgn.DisassociateSourceServersInput) (*request.Request, *mgn.DisassociateSourceServersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateSourceServersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DisassociateSourceServersOutput)
	return ret0, ret1
}

// DisassociateSourceServersRequest indicates an expected call of DisassociateSourceServersRequest
func (mr *MockMgnAPIMockRecorder) DisassociateSourceServersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateSourceServersRequest", reflect.TypeOf((*MockMgnAPI)(nil).DisassociateSourceServersRequest), arg0)
}

// DisassociateSourceServersWithContext mocks base method
func (m *MockMgnAPI) DisassociateSourceServersWithContext(arg0 context.Context, arg1 *mgn.DisassociateSourceServersInput, arg2 ...request.Option) (*mgn.DisassociateSourceServersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateSourceServersWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DisassociateSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateSourceServersWithContext indicates an expected call of DisassociateSourceServersWithContext
func (mr *MockMgnAPIMockRecorder) DisassociateSourceServersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateSourceServersWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DisassociateSourceServersWithContext), varargs...)
}

// DisconnectFromService mocks base method
func (m *MockMgnAPI) DisconnectFromService(arg0 *mgn.DisconnectFromServiceInput) (*mgn.DisconnectFromServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectFromService", arg0)
	ret0, _ := ret[0].(*mgn.DisconnectFromServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectFromService indicates an expected call of DisconnectFromService
func (mr *MockMgnAPIMockRecorder) DisconnectFromService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectFromService", reflect.TypeOf((*MockMgnAPI)(nil).DisconnectFromService), arg0)
}

// DisconnectFromServiceRequest mocks base method
func (m *MockMgnAPI) DisconnectFromServiceRequest(arg0 *mgn.DisconnectFromServiceInput) (*request.Request, *mgn.DisconnectFromServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectFromServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DisconnectFromServiceOutput)
	return ret0, ret1
}

// DisconnectFromServiceRequest indicates an expected call of DisconnectFromServiceRequest
func (mr *MockMgnAPIMockRecorder) DisconnectFromServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectFromServiceRequest", reflect.TypeOf((*MockMgnAPI)(nil).DisconnectFromServiceRequest), arg0)
}

// DisconnectFromServiceWithContext mocks base method
func (m *MockMgnAPI) DisconnectFromServiceWithContext(arg0 context.Context, arg1 *mgn.DisconnectFromServiceInput, arg2 ...request.Option) (*mgn.DisconnectFromServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectFromServiceWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DisconnectFromServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectFromServiceWithContext indicates an expected call of DisconnectFromServiceWithContext
func (mr *MockMgnAPIMockRecorder) DisconnectFromServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectFromServiceWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DisconnectFromServiceWithContext), varargs...)
}

// FinalizeCutover mocks base method
func (m *MockMgnAPI) FinalizeCutover(arg0 *mgn.FinalizeCutoverInput) (*mgn.FinalizeCutoverOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCutover", arg0)
	ret0, _ := ret[0].(*mgn.FinalizeCutoverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCutover indicates an expected call of FinalizeCutover
func (mr *MockMgnAPIMockRecorder) FinalizeCutover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCutover", reflect.TypeOf((*MockMgnAPI)(nil).FinalizeCutover), arg0)
}

// FinalizeCutoverRequest mocks base method
func (m *MockMgnAPI) FinalizeCutoverRequest(arg0 *mgn.FinalizeCutoverInput) (*request.Request, *mgn.FinalizeCutoverOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCutoverRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.FinalizeCutoverOutput)
	return ret0, ret1
}

// FinalizeCutoverRequest indicates an expected call of FinalizeCutoverRequest
func (mr *MockMgnAPIMockRecorder) FinalizeCutoverRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCutoverRequest", reflect.TypeOf((*MockMgnAPI)(nil).FinalizeCutoverRequest), arg0)
}

// FinalizeCutoverWithContext mocks base method
func (m *MockMgnAPI) FinalizeCutoverWithContext(arg0 context.Context, arg1 *mgn.FinalizeCutoverInput, arg2 ...request.Option) (*mgn.FinalizeCutoverOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FinalizeCutoverWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.FinalizeCutoverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCutoverWithContext indicates an expected call of FinalizeCutoverWithContext
func (mr *MockMgnAPIMockRecorder) FinalizeCutoverWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCutoverWithContext", reflect.TypeOf((*MockMgnAPI)(nil).FinalizeCutoverWithContext), varargs...)
}

// GetLaunchConfiguration mocks base method
func (m *MockMgnAPI) GetLaunchConfiguration(arg0 *mgn.GetLaunchConfigurationInput) (*mgn.GetLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*mgn.GetLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchConfiguration indicates an expected call of GetLaunchConfiguration
func (mr *MockMgnAPIMockRecorder) GetLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfiguration", reflect.TypeOf((*MockMgnAPI)(nil).GetLaunchConfiguration), arg0)
}

// GetLaunchConfigurationRequest mocks base method
func (m *MockMgnAPI) GetLaunchConfigurationRequest(arg0 *mgn.GetLaunchConfigurationInput) (*request.Request, *mgn.GetLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.GetLaunchConfigurationOutput)
	return ret0, ret1
}

// GetLaunchConfigurationRequest indicates an expected call of GetLaunchConfigurationRequest
func (mr *MockMgnAPIMockRecorder) GetLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfigurationRequest", reflect.TypeOf((*MockMgnAPI)(nil).GetLaunchConfigurationRequest), arg0)
}

// GetLaunchConfigurationWithContext mocks base method
func (m *MockMgnAPI) GetLaunchConfigurationWithContext(arg0 context.Context, arg1 *mgn.GetLaunchConfigurationInput, arg2 ...request.Option) (*mgn.GetLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.GetLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchConfigurationWithContext indicates an expected call of GetLaunchConfigurationWithContext
func (mr *MockMgnAPIMockRecorder) GetLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfigurationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).GetLaunchConfigurationWithContext), varargs...)
}

// GetReplicationConfiguration mocks base method
func (m *MockMgnAPI) GetReplicationConfiguration(arg0 *mgn.GetReplicationConfigurationInput) (*mgn.GetReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*mgn.GetReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationConfiguration indicates an expected call of GetReplicationConfiguration
func (mr *MockMgnAPIMockRecorder) GetReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfiguration", reflect.TypeOf((*MockMgnAPI)(nil).GetReplicationConfiguration), arg0)
}

// GetReplicationConfigurationRequest mocks base method
func (m *MockMgnAPI) GetReplicationConfigurationRequest(arg0 *mgn.GetReplicationConfigurationInput) (*request.Request, *mgn.GetReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.GetReplicationConfigurationOutput)
	return ret0, ret1
}

// GetReplicationConfigurationRequest indicates an expected call of GetReplicationConfigurationRequest
func (mr *MockMgnAPIMockRecorder) GetReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfigurationRequest", reflect.TypeOf((*MockMgnAPI)(nil).GetReplicationConfigurationRequest), arg0)
}

// GetReplicationConfigurationWithContext mocks base method
func (m *MockMgnAPI) GetReplicationConfigurationWithContext(arg0 context.Context, arg1 *mgn.GetReplicationConfigurationInput, arg2 ...request.Option) (*mgn.GetReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.GetReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationConfigurationWithContext indicates an expected call of GetReplicationConfigurationWithContext
func (mr *MockMgnAPIMockRecorder) GetReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfigurationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).GetReplicationConfigurationWithContext), varargs...)
}

// InitializeService mocks base method
func (m *MockMgnAPI) InitializeService(arg0 *mgn.InitializeServiceInput) (*mgn.InitializeServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeService", arg0)
	ret0, _ := ret[0].(*mgn.InitializeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeService indicates an expected call of InitializeService
func (mr *MockMgnAPIMockRecorder) InitializeService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeService", reflect.TypeOf((*MockMgnAPI)(nil).InitializeService), arg0)
}

// InitializeServiceRequest mocks base method
func (m *MockMgnAPI) InitializeServiceRequest(arg0 *mgn.InitializeServiceInput) (*request.Request, *mgn.InitializeServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.InitializeServiceOutput)
	return ret0, ret1
}

// InitializeServiceRequest indicates an expected call of InitializeServiceRequest
func (mr *MockMgnAPIMockRecorder) InitializeServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeServiceRequest", reflect.TypeOf((*MockMgnAPI)(nil).InitializeServiceRequest), arg0)
}

// InitializeServiceWithContext mocks base method
func (m *MockMgnAPI) InitializeServiceWithContext(arg0 context.Context, arg1 *mgn.InitializeServiceInput, arg2 ...request.Option) (*mgn.InitializeServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitializeServiceWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.InitializeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeServiceWithContext indicates an expected call of InitializeServiceWithContext
func (mr *MockMgnAPIMockRecorder) InitializeServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeServiceWithContext", reflect.TypeOf((*MockMgnAPI)(nil).InitializeServiceWithContext), varargs...)
}

// ListApplications mocks base method
func (m *MockMgnAPI) ListApplications(arg0 *mgn.ListApplicationsInput) (*mgn.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*mgn.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockMgnAPIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockMgnAPI)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method
func (m *MockMgnAPI) ListApplicationsPages(arg0 *mgn.ListApplicationsInput, arg1 func(*mgn.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages
func (mr *MockMgnAPIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockMgnAPI)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method
func (m *MockMgnAPI) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *mgn.ListApplicationsInput, arg2 func(*mgn.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext
func (mr *MockMgnAPIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method
func (m *MockMgnAPI) ListApplicationsRequest(arg0 *mgn.ListApplicationsInput) (*request.Request, *mgn.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest
func (mr *MockMgnAPIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockMgnAPI)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method
func (m *MockMgnAPI) ListApplicationsWithContext(arg0 context.Context, arg1 *mgn.ListApplicationsInput, arg2 ...request.Option) (*mgn.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext
func (mr *MockMgnAPIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ListApplicationsWithContext), varargs...)
}

// ListSourceServerActions mocks base method
func (m *MockMgnAPI) ListSourceServerActions(arg0 *mgn.ListSourceServerActionsInput) (*mgn.ListSourceServerActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSourceServerActions", arg0)
	ret0, _ := ret[0].(*mgn.ListSourceServerActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSourceServerActions indicates an expected call of ListSourceServerActions
func (mr *MockMgnAPIMockRecorder) ListSourceServerActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceServerActions", reflect.TypeOf((*MockMgnAPI)(nil).ListSourceServerActions), arg0)
}

// ListSourceServerActionsPages mocks base method
func (m *MockMgnAPI) ListSourceServerActionsPages(arg0 *mgn.ListSourceServerActionsInput, arg1 func(*mgn.ListSourceServerActionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSourceServerActionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSourceServerActionsPages indicates an expected call of ListSourceServerActionsPages
func (mr *MockMgnAPIMockRecorder) ListSourceServerActionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceServerActionsPages", reflect.TypeOf((*MockMgnAPI)(nil).ListSourceServerActionsPages), arg0, arg1)
}

// ListSourceServerActionsPagesWithContext mocks base method
func (m *MockMgnAPI) ListSourceServerActionsPagesWithContext(arg0 context.Context, arg1 *mgn.ListSourceServerActionsInput, arg2 func(*mgn.ListSourceServerActionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSourceServerActionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSourceServerActionsPagesWithContext indicates an expected call of ListSourceServerActionsPagesWithContext
func (mr *MockMgnAPIMockRecorder) ListSourceServerActionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceServerActionsPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ListSourceServerActionsPagesWithContext), varargs...)
}

// ListSourceServerActionsRequest mocks base method
func (m *MockMgnAPI) ListSourceServerActionsRequest(arg0 *mgn.ListSourceServerActionsInput) (*request.Request, *mgn.ListSourceServerActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSourceServerActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.ListSourceServerActionsOutput)
	return ret0, ret1
}

// ListSourceServerActionsRequest indicates an expected call of ListSourceServerActionsRequest
func (mr *MockMgnAPIMockRecorder) ListSourceServerActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceServerActionsRequest", reflect.TypeOf((*MockMgnAPI)(nil).ListSourceServerActionsRequest), arg0)
}

// ListSourceServerActionsWithContext mocks base method
func (m *MockMgnAPI) ListSourceServerActionsWithContext(arg0 context.Context, arg1 *mgn.ListSourceServerActionsInput, arg2 ...request.Option) (*mgn.ListSourceServerActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSourceServerActionsWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.ListSourceServerActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSourceServerActionsWithContext indicates an expected call of ListSourceServerActionsWithContext
func (mr *MockMgnAPIMockRecorder) ListSourceServerActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceServerActionsWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ListSourceServerActionsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockMgnAPI) ListTagsForResource(arg0 *mgn.ListTagsForResourceInput) (*mgn.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*mgn.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockMgnAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMgnAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockMgnAPI) ListTagsForResourceRequest(arg0 *mgn.ListTagsForResourceInput) (*request.Request, *mgn.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockMgnAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMgnAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockMgnAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *mgn.ListTagsForResourceInput, arg2 ...request.Option) (*mgn.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockMgnAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTemplateActions mocks base method
func (m *MockMgnAPI) ListTemplateActions(arg0 *mgn.ListTemplateActionsInput) (*mgn.ListTemplateActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateActions", arg0)
	ret0, _ := ret[0].(*mgn.ListTemplateActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateActions indicates an expected call of ListTemplateActions
func (mr *MockMgnAPIMockRecorder) ListTemplateActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateActions", reflect.TypeOf((*MockMgnAPI)(nil).ListTemplateActions), arg0)
}

// ListTemplateActionsPages mocks base method
func (m *MockMgnAPI) ListTemplateActionsPages(arg0 *mgn.ListTemplateActionsInput, arg1 func(*mgn.ListTemplateActionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateActionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplateActionsPages indicates an expected call of ListTemplateActionsPages
func (mr *MockMgnAPIMockRecorder) ListTemplateActionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateActionsPages", reflect.TypeOf((*MockMgnAPI)(nil).ListTemplateActionsPages), arg0, arg1)
}

// ListTemplateActionsPagesWithContext mocks base method
func (m *MockMgnAPI) ListTemplateActionsPagesWithContext(arg0 context.Context, arg1 *mgn.ListTemplateActionsInput, arg2 func(*mgn.ListTemplateActionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplateActionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplateActionsPagesWithContext indicates an expected call of ListTemplateActionsPagesWithContext
func (mr *MockMgnAPIMockRecorder) ListTemplateActionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateActionsPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ListTemplateActionsPagesWithContext), varargs...)
}

// ListTemplateActionsRequest mocks base method
func (m *MockMgnAPI) ListTemplateActionsRequest(arg0 *mgn.ListTemplateActionsInput) (*request.Request, *mgn.ListTemplateActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.ListTemplateActionsOutput)
	return ret0, ret1
}

// ListTemplateActionsRequest indicates an expected call of ListTemplateActionsRequest
func (mr *MockMgnAPIMockRecorder) ListTemplateActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateActionsRequest", reflect.TypeOf((*MockMgnAPI)(nil).ListTemplateActionsRequest), arg0)
}

// ListTemplateActionsWithContext mocks base method
func (m *MockMgnAPI) ListTemplateActionsWithContext(arg0 context.Context, arg1 *mgn.ListTemplateActionsInput, arg2 ...request.Option) (*mgn.ListTemplateActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplateActionsWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.ListTemplateActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateActionsWithContext indicates an expected call of ListTemplateActionsWithContext
func (mr *MockMgnAPIMockRecorder) ListTemplateActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateActionsWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ListTemplateActionsWithContext), varargs...)
}

// ListWaves mocks base method
func (m *MockMgnAPI) ListWaves(arg0 *mgn.ListWavesInput) (*mgn.ListWavesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWaves", arg0)
	ret0, _ := ret[0].(*mgn.ListWavesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWaves indicates an expected call of ListWaves
func (mr *MockMgnAPIMockRecorder) ListWaves(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWaves", reflect.TypeOf((*MockMgnAPI)(nil).ListWaves), arg0)
}

// ListWavesPages mocks base method
func (m *MockMgnAPI) ListWavesPages(arg0 *mgn.ListWavesInput, arg1 func(*mgn.ListWavesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWavesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWavesPages indicates an expected call of ListWavesPages
func (mr *MockMgnAPIMockRecorder) ListWavesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWavesPages", reflect.TypeOf((*MockMgnAPI)(nil).ListWavesPages), arg0, arg1)
}

// ListWavesPagesWithContext mocks base method
func (m *MockMgnAPI) ListWavesPagesWithContext(arg0 context.Context, arg1 *mgn.ListWavesInput, arg2 func(*mgn.ListWavesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWavesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWavesPagesWithContext indicates an expected call of ListWavesPagesWithContext
func (mr *MockMgnAPIMockRecorder) ListWavesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWavesPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ListWavesPagesWithContext), varargs...)
}

// ListWavesRequest mocks base method
func (m *MockMgnAPI) ListWavesRequest(arg0 *mgn.ListWavesInput) (*request.Request, *mgn.ListWavesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWavesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.ListWavesOutput)
	return ret0, ret1
}

// ListWavesRequest indicates an expected call of ListWavesRequest
func (mr *MockMgnAPIMockRecorder) ListWavesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWavesRequest", reflect.TypeOf((*MockMgnAPI)(nil).ListWavesRequest), arg0)
}

// ListWavesWithContext mocks base method
func (m *MockMgnAPI) ListWavesWithContext(arg0 context.Context, arg1 *mgn.ListWavesInput, arg2 ...request.Option) (*mgn.ListWavesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWavesWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.ListWavesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWavesWithContext indicates an expected call of ListWavesWithContext
func (mr *MockMgnAPIMockRecorder) ListWavesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWavesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ListWavesWithContext), varargs...)
}

// MarkAsArchived mocks base method
func (m *MockMgnAPI) MarkAsArchived(arg0 *mgn.MarkAsArchivedInput) (*mgn.MarkAsArchivedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsArchived", arg0)
	ret0, _ := ret[0].(*mgn.MarkAsArchivedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsArchived indicates an expected call of MarkAsArchived
func (mr *MockMgnAPIMockRecorder) MarkAsArchived(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsArchived", reflect.TypeOf((*MockMgnAPI)(nil).MarkAsArchived), arg0)
}

// MarkAsArchivedRequest mocks base method
func (m *MockMgnAPI) MarkAsArchivedRequest(arg0 *mgn.MarkAsArchivedInput) (*request.Request, *mgn.MarkAsArchivedOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsArchivedRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.MarkAsArchivedOutput)
	return ret0, ret1
}

// MarkAsArchivedRequest indicates an expected call of MarkAsArchivedRequest
func (mr *MockMgnAPIMockRecorder) MarkAsArchivedRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsArchivedRequest", reflect.TypeOf((*MockMgnAPI)(nil).MarkAsArchivedRequest), arg0)
}

// MarkAsArchivedWithContext mocks base method
func (m *MockMgnAPI) MarkAsArchivedWithContext(arg0 context.Context, arg1 *mgn.MarkAsArchivedInput, arg2 ...request.Option) (*mgn.MarkAsArchivedOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkAsArchivedWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.MarkAsArchivedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsArchivedWithContext indicates an expected call of MarkAsArchivedWithContext
func (mr *MockMgnAPIMockRecorder) MarkAsArchivedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsArchivedWithContext", reflect.TypeOf((*MockMgnAPI)(nil).MarkAsArchivedWithContext), varargs...)
}

// PutSourceServerAction mocks base method
func (m *MockMgnAPI) PutSourceServerAction(arg0 *mgn.PutSourceServerActionInput) (*mgn.PutSourceServerActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSourceServerAction", arg0)
	ret0, _ := ret[0].(*mgn.PutSourceServerActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSourceServerAction indicates an expected call of PutSourceServerAction
func (mr *MockMgnAPIMockRecorder) PutSourceServerAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSourceServerAction", reflect.TypeOf((*MockMgnAPI)(nil).PutSourceServerAction), arg0)
}

// PutSourceServerActionRequest mocks base method
func (m *MockMgnAPI) PutSourceServerActionRequest(arg0 *mgn.PutSourceServerActionInput) (*request.Request, *mgn.PutSourceServerActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSourceServerActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.PutSourceServerActionOutput)
	return ret0, ret1
}

// PutSourceServerActionRequest indicates an expected call of PutSourceServerActionRequest
func (mr *MockMgnAPIMockRecorder) PutSourceServerActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSourceServerActionRequest", reflect.TypeOf((*MockMgnAPI)(nil).PutSourceServerActionRequest), arg0)
}

// PutSourceServerActionWithContext mocks base method
func (m *MockMgnAPI) PutSourceServerActionWithContext(arg0 context.Context, arg1 *mgn.PutSourceServerActionInput, arg2 ...request.Option) (*mgn.PutSourceServerActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSourceServerActionWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.PutSourceServerActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSourceServerActionWithContext indicates an expected call of PutSourceServerActionWithContext
func (mr *MockMgnAPIMockRecorder) PutSourceServerActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSourceServerActionWithContext", reflect.TypeOf((*MockMgnAPI)(nil).PutSourceServerActionWithContext), varargs...)
}

// PutTemplateAction mocks base method
func (m *MockMgnAPI) PutTemplateAction(arg0 *mgn.PutTemplateActionInput) (*mgn.PutTemplateActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTemplateAction", arg0)
	ret0, _ := ret[0].(*mgn.PutTemplateActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTemplateAction indicates an expected call of PutTemplateAction
func (mr *MockMgnAPIMockRecorder) PutTemplateAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTemplateAction", reflect.TypeOf((*MockMgnAPI)(nil).PutTemplateAction), arg0)
}

// PutTemplateActionRequest mocks base method
func (m *MockMgnAPI) PutTemplateActionRequest(arg0 *mgn.PutTemplateActionInput) (*request.Request, *mgn.PutTemplateActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTemplateActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.PutTemplateActionOutput)
	return ret0, ret1
}

// PutTemplateActionRequest indicates an expected call of PutTemplateActionRequest
func (mr *MockMgnAPIMockRecorder) PutTemplateActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTemplateActionRequest", reflect.TypeOf((*MockMgnAPI)(nil).PutTemplateActionRequest), arg0)
}

// PutTemplateActionWithContext mocks base method
func (m *MockMgnAPI) PutTemplateActionWithContext(arg0 context.Context, arg1 *mgn.PutTemplateActionInput, arg2 ...request.Option) (*mgn.PutTemplateActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTemplateActionWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.PutTemplateActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTemplateActionWithContext indicates an expected call of PutTemplateActionWithContext
func (mr *MockMgnAPIMockRecorder) PutTemplateActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTemplateActionWithContext", reflect.TypeOf((*MockMgnAPI)(nil).PutTemplateActionWithContext), varargs...)
}

// RemoveSourceServerAction mocks base method
func (m *MockMgnAPI) RemoveSourceServerAction(arg0 *mgn.RemoveSourceServerActionInput) (*mgn.RemoveSourceServerActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSourceServerAction", arg0)
	ret0, _ := ret[0].(*mgn.RemoveSourceServerActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSourceServerAction indicates an expected call of RemoveSourceServerAction
func (mr *MockMgnAPIMockRecorder) RemoveSourceServerAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSourceServerAction", reflect.TypeOf((*MockMgnAPI)(nil).RemoveSourceServerAction), arg0)
}

// RemoveSourceServerActionRequest mocks base method
func (m *MockMgnAPI) RemoveSourceServerActionRequest(arg0 *mgn.RemoveSourceServerActionInput) (*request.Request, *mgn.RemoveSourceServerActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSourceServerActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.RemoveSourceServerActionOutput)
	return ret0, ret1
}

// RemoveSourceServerActionRequest indicates an expected call of RemoveSourceServerActionRequest
func (mr *MockMgnAPIMockRecorder) RemoveSourceServerActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSourceServerActionRequest", reflect.TypeOf((*MockMgnAPI)(nil).RemoveSourceServerActionRequest), arg0)
}

// RemoveSourceServerActionWithContext mocks base method
func (m *MockMgnAPI) RemoveSourceServerActionWithContext(arg0 context.Context, arg1 *mgn.RemoveSourceServerActionInput, arg2 ...request.Option) (*mgn.RemoveSourceServerActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSourceServerActionWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.RemoveSourceServerActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSourceServerActionWithContext indicates an expected call of RemoveSourceServerActionWithContext
func (mr *MockMgnAPIMockRecorder) RemoveSourceServerActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSourceServerActionWithContext", reflect.TypeOf((*MockMgnAPI)(nil).RemoveSourceServerActionWithContext), varargs...)
}

// RemoveTemplateAction mocks base method
func (m *MockMgnAPI) RemoveTemplateAction(arg0 *mgn.RemoveTemplateActionInput) (*mgn.RemoveTemplateActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTemplateAction", arg0)
	ret0, _ := ret[0].(*mgn.RemoveTemplateActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTemplateAction indicates an expected call of RemoveTemplateAction
func (mr *MockMgnAPIMockRecorder) RemoveTemplateAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTemplateAction", reflect.TypeOf((*MockMgnAPI)(nil).RemoveTemplateAction), arg0)
}

// RemoveTemplateActionRequest mocks base method
func (m *MockMgnAPI) RemoveTemplateActionRequest(arg0 *mgn.RemoveTemplateActionInput) (*request.Request, *mgn.RemoveTemplateActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTemplateActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.RemoveTemplateActionOutput)
	return ret0, ret1
}

// RemoveTemplateActionRequest indicates an expected call of RemoveTemplateActionRequest
func (mr *MockMgnAPIMockRecorder) RemoveTemplateActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTemplateActionRequest", reflect.TypeOf((*MockMgnAPI)(nil).RemoveTemplateActionRequest), arg0)
}

// RemoveTemplateActionWithContext mocks base method
func (m *MockMgnAPI) RemoveTemplateActionWithContext(arg0 context.Context, arg1 *mgn.RemoveTemplateActionInput, arg2 ...request.Option) (*mgn.RemoveTemplateActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTemplateActionWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.RemoveTemplateActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTemplateActionWithContext indicates an expected call of RemoveTemplateActionWithContext
func (mr *MockMgnAPIMockRecorder) RemoveTemplateActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTemplateActionWithContext", reflect.TypeOf((*MockMgnAPI)(nil).RemoveTemplateActionWithContext), varargs...)
}

// RetryDataReplication mocks base method
func (m *MockMgnAPI) RetryDataReplication(arg0 *mgn.RetryDataReplicationInput) (*mgn.RetryDataReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryDataReplication", arg0)
	ret0, _ := ret[0].(*mgn.RetryDataReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryDataReplication indicates an expected call of RetryDataReplication
func (mr *MockMgnAPIMockRecorder) RetryDataReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplication", reflect.TypeOf((*MockMgnAPI)(nil).RetryDataReplication), arg0)
}

// RetryDataReplicationRequest mocks base method
func (m *MockMgnAPI) RetryDataReplicationRequest(arg0 *mgn.RetryDataReplicationInput) (*request.Request, *mgn.RetryDataReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryDataReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.RetryDataReplicationOutput)
	return ret0, ret1
}

// RetryDataReplicationRequest indicates an expected call of RetryDataReplicationRequest
func (mr *MockMgnAPIMockRecorder) RetryDataReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplicationRequest", reflect.TypeOf((*MockMgnAPI)(nil).RetryDataReplicationRequest), arg0)
}

// RetryDataReplicationWithContext mocks base method
func (m *MockMgnAPI) RetryDataReplicationWithContext(arg0 context.Context, arg1 *mgn.RetryDataReplicationInput, arg2 ...request.Option) (*mgn.RetryDataReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryDataReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.RetryDataReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryDataReplicationWithContext indicates an expected call of RetryDataReplicationWithContext
func (mr *MockMgnAPIMockRecorder) RetryDataReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplicationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).RetryDataReplicationWithContext), varargs...)
}

// StartCutover mocks base method
func (m *MockMgnAPI) StartCutover(arg0 *mgn.StartCutoverInput) (*mgn.StartCutoverOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCutover", arg0)
	ret0, _ := ret[0].(*mgn.StartCutoverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCutover indicates an expected call of StartCutover
func (mr *MockMgnAPIMockRecorder) StartCutover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCutover", reflect.TypeOf((*MockMgnAPI)(nil).StartCutover), arg0)
}

// StartCutoverRequest mocks base method
func (m *MockMgnAPI) StartCutoverRequest(arg0 *mgn.StartCutoverInput) (*request.Request, *mgn.StartCutoverOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCutoverRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.StartCutoverOutput)
	return ret0, ret1
}

// StartCutoverRequest indicates an expected call of StartCutoverRequest
func (mr *MockMgnAPIMockRecorder) StartCutoverRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCutoverRequest", reflect.TypeOf((*MockMgnAPI)(nil).StartCutoverRequest), arg0)
}

// StartCutoverWithContext mocks base method
func (m *MockMgnAPI) StartCutoverWithContext(arg0 context.Context, arg1 *mgn.StartCutoverInput, arg2 ...request.Option) (*mgn.StartCutoverOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCutoverWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.StartCutoverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCutoverWithContext indicates an expected call of StartCutoverWithContext
func (mr *MockMgnAPIMockRecorder) StartCutoverWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCutoverWithContext", reflect.TypeOf((*MockMgnAPI)(nil).StartCutoverWithContext), varargs...)
}

// StartReplication mocks base method
func (m *MockMgnAPI) StartReplication(arg0 *mgn.StartReplicationInput) (*mgn.StartReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplication", arg0)
	ret0, _ := ret[0].(*mgn.StartReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplication indicates an expected call of StartReplication
func (mr *MockMgnAPIMockRecorder) StartReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplication", reflect.TypeOf((*MockMgnAPI)(nil).StartReplication), arg0)
}

// StartReplicationRequest mocks base method
func (m *MockMgnAPI) StartReplicationRequest(arg0 *mgn.StartReplicationInput) (*request.Request, *mgn.StartReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.StartReplicationOutput)
	return ret0, ret1
}

// StartReplicationRequest indicates an expected call of StartReplicationRequest
func (mr *MockMgnAPIMockRecorder) StartReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationRequest", reflect.TypeOf((*MockMgnAPI)(nil).StartReplicationRequest), arg0)
}

// StartReplicationWithContext mocks base method
func (m *MockMgnAPI) StartReplicationWithContext(arg0 context.Context, arg1 *mgn.StartReplicationInput, arg2 ...request.Option) (*mgn.StartReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.StartReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplicationWithContext indicates an expected call of StartReplicationWithContext
func (mr *MockMgnAPIMockRecorder) StartReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).StartReplicationWithContext), varargs...)
}

// StartTest mocks base method
func (m *MockMgnAPI) StartTest(arg0 *mgn.StartTestInput) (*mgn.StartTestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTest", arg0)
	ret0, _ := ret[0].(*mgn.StartTestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTest indicates an expected call of StartTest
func (mr *MockMgnAPIMockRecorder) StartTest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTest", reflect.TypeOf((*MockMgnAPI)(nil).StartTest), arg0)
}

// StartTestRequest mocks base method
func (m *MockMgnAPI) StartTestRequest(arg0 *mgn.StartTestInput) (*request.Request, *mgn.StartTestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.StartTestOutput)
	return ret0, ret1
}

// StartTestRequest indicates an expected call of StartTestRequest
func (mr *MockMgnAPIMockRecorder) StartTestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTestRequest", reflect.TypeOf((*MockMgnAPI)(nil).StartTestRequest), arg0)
}

// StartTestWithContext mocks base method
func (m *MockMgnAPI) StartTestWithContext(arg0 context.Context, arg1 *mgn.StartTestInput, arg2 ...request.Option) (*mgn.StartTestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTestWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.StartTestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTestWithContext indicates an expected call of StartTestWithContext
func (mr *MockMgnAPIMockRecorder) StartTestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTestWithContext", reflect.TypeOf((*MockMgnAPI)(nil).StartTestWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockMgnAPI) TagResource(arg0 *mgn.TagResourceInput) (*mgn.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*mgn.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockMgnAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMgnAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockMgnAPI) TagResourceRequest(arg0 *mgn.TagResourceInput) (*request.Request, *mgn.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockMgnAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMgnAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockMgnAPI) TagResourceWithContext(arg0 context.Context, arg1 *mgn.TagResourceInput, arg2 ...request.Option) (*mgn.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockMgnAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMgnAPI)(nil).TagResourceWithContext), varargs...)
}

// TerminateTargetInstances mocks base method
func (m *MockMgnAPI) TerminateTargetInstances(arg0 *mgn.TerminateTargetInstancesInput) (*mgn.TerminateTargetInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateTargetInstances", arg0)
	ret0, _ := ret[0].(*mgn.TerminateTargetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateTargetInstances indicates an expected call of TerminateTargetInstances
func (mr *MockMgnAPIMockRecorder) TerminateTargetInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateTargetInstances", reflect.TypeOf((*MockMgnAPI)(nil).TerminateTargetInstances), arg0)
}

// TerminateTargetInstancesRequest mocks base method
func (m *MockMgnAPI) TerminateTargetInstancesRequest(arg0 *mgn.TerminateTargetInstancesInput) (*request.Request, *mgn.TerminateTargetInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateTargetInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.TerminateTargetInstancesOutput)
	return ret0, ret1
}

// TerminateTargetInstancesRequest indicates an expected call of TerminateTargetInstancesRequest
func (mr *MockMgnAPIMockRecorder) TerminateTargetInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateTargetInstancesRequest", reflect.TypeOf((*MockMgnAPI)(nil).TerminateTargetInstancesRequest), arg0)
}

// TerminateTargetInstancesWithContext mocks base method
func (m *MockMgnAPI) TerminateTargetInstancesWithContext(arg0 context.Context, arg1 *mgn.TerminateTargetInstancesInput, arg2 ...request.Option) (*mgn.TerminateTargetInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateTargetInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.TerminateTargetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateTargetInstancesWithContext indicates an expected call of TerminateTargetInstancesWithContext
func (mr *MockMgnAPIMockRecorder) TerminateTargetInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateTargetInstancesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).TerminateTargetInstancesWithContext), varargs...)
}

// UnarchiveApplication mocks base method
func (m *MockMgnAPI) UnarchiveApplication(arg0 *mgn.UnarchiveApplicationInput) (*mgn.UnarchiveApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnarchiveApplication", arg0)
	ret0, _ := ret[0].(*mgn.UnarchiveApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnarchiveApplication indicates an expected call of UnarchiveApplication
func (mr *MockMgnAPIMockRecorder) UnarchiveApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveApplication", reflect.TypeOf((*MockMgnAPI)(nil).UnarchiveApplication), arg0)
}

// UnarchiveApplicationRequest mocks base method
func (m *MockMgnAPI) UnarchiveApplicationRequest(arg0 *mgn.UnarchiveApplicationInput) (*request.Request, *mgn.UnarchiveApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnarchiveApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UnarchiveApplicationOutput)
	return ret0, ret1
}

// UnarchiveApplicationRequest indicates an expected call of UnarchiveApplicationRequest
func (mr *MockMgnAPIMockRecorder) UnarchiveApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveApplicationRequest", reflect.TypeOf((*MockMgnAPI)(nil).UnarchiveApplicationRequest), arg0)
}

// UnarchiveApplicationWithContext mocks base method
func (m *MockMgnAPI) UnarchiveApplicationWithContext(arg0 context.Context, arg1 *mgn.UnarchiveApplicationInput, arg2 ...request.Option) (*mgn.UnarchiveApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnarchiveApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UnarchiveApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnarchiveApplicationWithContext indicates an expected call of UnarchiveApplicationWithContext
func (mr *MockMgnAPIMockRecorder) UnarchiveApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveApplicationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UnarchiveApplicationWithContext), varargs...)
}

// UnarchiveWave mocks base method
func (m *MockMgnAPI) UnarchiveWave(arg0 *mgn.UnarchiveWaveInput) (*mgn.UnarchiveWaveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnarchiveWave", arg0)
	ret0, _ := ret[0].(*mgn.UnarchiveWaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnarchiveWave indicates an expected call of UnarchiveWave
func (mr *MockMgnAPIMockRecorder) UnarchiveWave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveWave", reflect.TypeOf((*MockMgnAPI)(nil).UnarchiveWave), arg0)
}

// UnarchiveWaveRequest mocks base method
func (m *MockMgnAPI) UnarchiveWaveRequest(arg0 *mgn.UnarchiveWaveInput) (*request.Request, *mgn.UnarchiveWaveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnarchiveWaveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UnarchiveWaveOutput)
	return ret0, ret1
}

// UnarchiveWaveRequest indicates an expected call of UnarchiveWaveRequest
func (mr *MockMgnAPIMockRecorder) UnarchiveWaveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveWaveRequest", reflect.TypeOf((*MockMgnAPI)(nil).UnarchiveWaveRequest), arg0)
}

// UnarchiveWaveWithContext mocks base method
func (m *MockMgnAPI) UnarchiveWaveWithContext(arg0 context.Context, arg1 *mgn.UnarchiveWaveInput, arg2 ...request.Option) (*mgn.UnarchiveWaveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnarchiveWaveWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UnarchiveWaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnarchiveWaveWithContext indicates an expected call of UnarchiveWaveWithContext
func (mr *MockMgnAPIMockRecorder) UnarchiveWaveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveWaveWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UnarchiveWaveWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockMgnAPI) UntagResource(arg0 *mgn.UntagResourceInput) (*mgn.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*mgn.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockMgnAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMgnAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockMgnAPI) UntagResourceRequest(arg0 *mgn.UntagResourceInput) (*request.Request, *mgn.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockMgnAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMgnAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockMgnAPI) UntagResourceWithContext(arg0 context.Context, arg1 *mgn.UntagResourceInput, arg2 ...request.Option) (*mgn.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockMgnAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApplication mocks base method
func (m *MockMgnAPI) UpdateApplication(arg0 *mgn.UpdateApplicationInput) (*mgn.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0)
	ret0, _ := ret[0].(*mgn.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockMgnAPIMockRecorder) UpdateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockMgnAPI)(nil).UpdateApplication), arg0)
}

// UpdateApplicationRequest mocks base method
func (m *MockMgnAPI) UpdateApplicationRequest(arg0 *mgn.UpdateApplicationInput) (*request.Request, *mgn.UpdateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UpdateApplicationOutput)
	return ret0, ret1
}

// UpdateApplicationRequest indicates an expected call of UpdateApplicationRequest
func (mr *MockMgnAPIMockRecorder) UpdateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRequest", reflect.TypeOf((*MockMgnAPI)(nil).UpdateApplicationRequest), arg0)
}

// UpdateApplicationWithContext mocks base method
func (m *MockMgnAPI) UpdateApplicationWithContext(arg0 context.Context, arg1 *mgn.UpdateApplicationInput, arg2 ...request.Option) (*mgn.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithContext indicates an expected call of UpdateApplicationWithContext
func (mr *MockMgnAPIMockRecorder) UpdateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UpdateApplicationWithContext), varargs...)
}

// UpdateLaunchConfiguration mocks base method
func (m *MockMgnAPI) UpdateLaunchConfiguration(arg0 *mgn.UpdateLaunchConfigurationInput) (*mgn.UpdateLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*mgn.UpdateLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfiguration indicates an expected call of UpdateLaunchConfiguration
func (mr *MockMgnAPIMockRecorder) UpdateLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfiguration", reflect.TypeOf((*MockMgnAPI)(nil).UpdateLaunchConfiguration), arg0)
}

// UpdateLaunchConfigurationRequest mocks base method
func (m *MockMgnAPI) UpdateLaunchConfigurationRequest(arg0 *mgn.UpdateLaunchConfigurationInput) (*request.Request, *mgn.UpdateLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UpdateLaunchConfigurationOutput)
	return ret0, ret1
}

// UpdateLaunchConfigurationRequest indicates an expected call of UpdateLaunchConfigurationRequest
func (mr *MockMgnAPIMockRecorder) UpdateLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationRequest", reflect.TypeOf((*MockMgnAPI)(nil).UpdateLaunchConfigurationRequest), arg0)
}

// UpdateLaunchConfigurationTemplate mocks base method
func (m *MockMgnAPI) UpdateLaunchConfigurationTemplate(arg0 *mgn.UpdateLaunchConfigurationTemplateInput) (*mgn.UpdateLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*mgn.UpdateLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfigurationTemplate indicates an expected call of UpdateLaunchConfigurationTemplate
func (mr *MockMgnAPIMockRecorder) UpdateLaunchConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationTemplate", reflect.TypeOf((*MockMgnAPI)(nil).UpdateLaunchConfigurationTemplate), arg0)
}

// UpdateLaunchConfigurationTemplateRequest mocks base method
func (m *MockMgnAPI) UpdateLaunchConfigurationTemplateRequest(arg0 *mgn.UpdateLaunchConfigurationTemplateInput) (*request.Request, *mgn.UpdateLaunchConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UpdateLaunchConfigurationTemplateOutput)
	return ret0, ret1
}

// UpdateLaunchConfigurationTemplateRequest indicates an expected call of UpdateLaunchConfigurationTemplateRequest
func (mr *MockMgnAPIMockRecorder) UpdateLaunchConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationTemplateRequest", reflect.TypeOf((*MockMgnAPI)(nil).UpdateLaunchConfigurationTemplateRequest), arg0)
}

// UpdateLaunchConfigurationTemplateWithContext mocks base method
func (m *MockMgnAPI) UpdateLaunchConfigurationTemplateWithContext(arg0 context.Context, arg1 *mgn.UpdateLaunchConfigurationTemplateInput, arg2 ...request.Option) (*mgn.UpdateLaunchConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UpdateLaunchConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfigurationTemplateWithContext indicates an expected call of UpdateLaunchConfigurationTemplateWithContext
func (mr *MockMgnAPIMockRecorder) UpdateLaunchConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationTemplateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UpdateLaunchConfigurationTemplateWithContext), varargs...)
}

// UpdateLaunchConfigurationWithContext mocks base method
func (m *MockMgnAPI) UpdateLaunchConfigurationWithContext(arg0 context.Context, arg1 *mgn.UpdateLaunchConfigurationInput, arg2 ...request.Option) (*mgn.UpdateLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UpdateLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfigurationWithContext indicates an expected call of UpdateLaunchConfigurationWithContext
func (mr *MockMgnAPIMockRecorder) UpdateLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UpdateLaunchConfigurationWithContext), varargs...)
}

// UpdateReplicationConfiguration mocks base method
func (m *MockMgnAPI) UpdateReplicationConfiguration(arg0 *mgn.UpdateReplicationConfigurationInput) (*mgn.UpdateReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*mgn.UpdateReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfiguration indicates an expected call of UpdateReplicationConfiguration
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfiguration", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfiguration), arg0)
}

// UpdateReplicationConfigurationRequest mocks base method
func (m *MockMgnAPI) UpdateReplicationConfigurationRequest(arg0 *mgn.UpdateReplicationConfigurationInput) (*request.Request, *mgn.UpdateReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UpdateReplicationConfigurationOutput)
	return ret0, ret1
}

// UpdateReplicationConfigurationRequest indicates an expected call of UpdateReplicationConfigurationRequest
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationRequest", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfigurationRequest), arg0)
}

// UpdateReplicationConfigurationTemplate mocks base method
func (m *MockMgnAPI) UpdateReplicationConfigurationTemplate(arg0 *mgn.UpdateReplicationConfigurationTemplateInput) (*mgn.UpdateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*mgn.UpdateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplate indicates an expected call of UpdateReplicationConfigurationTemplate
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplate", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfigurationTemplate), arg0)
}

// UpdateReplicationConfigurationTemplateRequest mocks base method
func (m *MockMgnAPI) UpdateReplicationConfigurationTemplateRequest(arg0 *mgn.UpdateReplicationConfigurationTemplateInput) (*request.Request, *mgn.UpdateReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UpdateReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplateRequest indicates an expected call of UpdateReplicationConfigurationTemplateRequest
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfigurationTemplateRequest), arg0)
}

// UpdateReplicationConfigurationTemplateWithContext mocks base method
func (m *MockMgnAPI) UpdateReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *mgn.UpdateReplicationConfigurationTemplateInput, arg2 ...request.Option) (*mgn.UpdateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UpdateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplateWithContext indicates an expected call of UpdateReplicationConfigurationTemplateWithContext
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfigurationTemplateWithContext), varargs...)
}

// UpdateReplicationConfigurationWithContext mocks base method
func (m *MockMgnAPI) UpdateReplicationConfigurationWithContext(arg0 context.Context, arg1 *mgn.UpdateReplicationConfigurationInput, arg2 ...request.Option) (*mgn.UpdateReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UpdateReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationWithContext indicates an expected call of UpdateReplicationConfigurationWithContext
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfigurationWithContext), varargs...)
}

// UpdateSourceServerReplicationType mocks base method
func (m *MockMgnAPI) UpdateSourceServerReplicationType(arg0 *mgn.UpdateSourceServerReplicationTypeInput) (*mgn.UpdateSourceServerReplicationTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSourceServerReplicationType", arg0)
	ret0, _ := ret[0].(*mgn.UpdateSourceServerReplicationTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSourceServerReplicationType indicates an expected call of UpdateSourceServerReplicationType
func (mr *MockMgnAPIMockRecorder) UpdateSourceServerReplicationType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceServerReplicationType", reflect.TypeOf((*MockMgnAPI)(nil).UpdateSourceServerReplicationType), arg0)
}

// UpdateSourceServerReplicationTypeRequest mocks base method
func (m *MockMgnAPI) UpdateSourceServerReplicationTypeRequest(arg0 *mgn.UpdateSourceServerReplicationTypeInput) (*request.Request, *mgn.UpdateSourceServerReplicationTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSourceServerReplicationTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UpdateSourceServerReplicationTypeOutput)
	return ret0, ret1
}

// UpdateSourceServerReplicationTypeRequest indicates an expected call of UpdateSourceServerReplicationTypeRequest
func (mr *MockMgnAPIMockRecorder) UpdateSourceServerReplicationTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceServerReplicationTypeRequest", reflect.TypeOf((*MockMgnAPI)(nil).UpdateSourceServerReplicationTypeRequest), arg0)
}

// UpdateSourceServerReplicationTypeWithContext mocks base method
func (m *MockMgnAPI) UpdateSourceServerReplicationTypeWithContext(arg0 context.Context, arg1 *mgn.UpdateSourceServerReplicationTypeInput, arg2 ...request.Option) (*mgn.UpdateSourceServerReplicationTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSourceServerReplicationTypeWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UpdateSourceServerReplicationTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSourceServerReplicationTypeWithContext indicates an expected call of UpdateSourceServerReplicationTypeWithContext
func (mr *MockMgnAPIMockRecorder) UpdateSourceServerReplicationTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceServerReplicationTypeWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UpdateSourceServerReplicationTypeWithContext), varargs...)
}

// UpdateWave mocks base method
func (m *MockMgnAPI) UpdateWave(arg0 *mgn.UpdateWaveInput) (*mgn.UpdateWaveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWave", arg0)
	ret0, _ := ret[0].(*mgn.UpdateWaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWave indicates an expected call of UpdateWave
func (mr *MockMgnAPIMockRecorder) UpdateWave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWave", reflect.TypeOf((*MockMgnAPI)(nil).UpdateWave), arg0)
}

// UpdateWaveRequest mocks base method
func (m *MockMgnAPI) UpdateWaveRequest(arg0 *mgn.UpdateWaveInput) (*request.Request, *mgn.UpdateWaveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWaveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UpdateWaveOutput)
	return ret0, ret1
}

// UpdateWaveRequest indicates an expected call of UpdateWaveRequest
func (mr *MockMgnAPIMockRecorder) UpdateWaveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWaveRequest", reflect.TypeOf((*MockMgnAPI)(nil).UpdateWaveRequest), arg0)
}

// UpdateWaveWithContext mocks base method
func (m *MockMgnAPI) UpdateWaveWithContext(arg0 context.Context, arg1 *mgn.UpdateWaveInput, arg2 ...request.Option) (*mgn.UpdateWaveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWaveWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UpdateWaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWaveWithContext indicates an expected call of UpdateWaveWithContext
func (mr *MockMgnAPIMockRecorder) UpdateWaveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWaveWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UpdateWaveWithContext), varargs...)
}
