// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/marketplacedeployment/marketplacedeploymentiface (interfaces: MarketplaceDeploymentAPI)

// Package marketplacedeploymentmock is a generated GoMock package.
package marketplacedeploymentmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	marketplacedeployment "github.com/aws/aws-sdk-go/service/marketplacedeployment"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMarketplaceDeploymentAPI is a mock of MarketplaceDeploymentAPI interface
type MockMarketplaceDeploymentAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMarketplaceDeploymentAPIMockRecorder
}

// MockMarketplaceDeploymentAPIMockRecorder is the mock recorder for MockMarketplaceDeploymentAPI
type MockMarketplaceDeploymentAPIMockRecorder struct {
	mock *MockMarketplaceDeploymentAPI
}

// NewMockMarketplaceDeploymentAPI creates a new mock instance
func NewMockMarketplaceDeploymentAPI(ctrl *gomock.Controller) *MockMarketplaceDeploymentAPI {
	mock := &MockMarketplaceDeploymentAPI{ctrl: ctrl}
	mock.recorder = &MockMarketplaceDeploymentAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketplaceDeploymentAPI) EXPECT() *MockMarketplaceDeploymentAPIMockRecorder {
	return m.recorder
}

// ListTagsForResource mocks base method
func (m *MockMarketplaceDeploymentAPI) ListTagsForResource(arg0 *marketplacedeployment.ListTagsForResourceInput) (*marketplacedeployment.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*marketplacedeployment.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockMarketplaceDeploymentAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockMarketplaceDeploymentAPI) ListTagsForResourceRequest(arg0 *marketplacedeployment.ListTagsForResourceInput) (*request.Request, *marketplacedeployment.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*marketplacedeployment.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockMarketplaceDeploymentAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockMarketplaceDeploymentAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *marketplacedeployment.ListTagsForResourceInput, arg2 ...request.Option) (*marketplacedeployment.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*marketplacedeployment.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockMarketplaceDeploymentAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutDeploymentParameter mocks base method
func (m *MockMarketplaceDeploymentAPI) PutDeploymentParameter(arg0 *marketplacedeployment.PutDeploymentParameterInput) (*marketplacedeployment.PutDeploymentParameterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeploymentParameter", arg0)
	ret0, _ := ret[0].(*marketplacedeployment.PutDeploymentParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeploymentParameter indicates an expected call of PutDeploymentParameter
func (mr *MockMarketplaceDeploymentAPIMockRecorder) PutDeploymentParameter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeploymentParameter", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).PutDeploymentParameter), arg0)
}

// PutDeploymentParameterRequest mocks base method
func (m *MockMarketplaceDeploymentAPI) PutDeploymentParameterRequest(arg0 *marketplacedeployment.PutDeploymentParameterInput) (*request.Request, *marketplacedeployment.PutDeploymentParameterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeploymentParameterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*marketplacedeployment.PutDeploymentParameterOutput)
	return ret0, ret1
}

// PutDeploymentParameterRequest indicates an expected call of PutDeploymentParameterRequest
func (mr *MockMarketplaceDeploymentAPIMockRecorder) PutDeploymentParameterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeploymentParameterRequest", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).PutDeploymentParameterRequest), arg0)
}

// PutDeploymentParameterWithContext mocks base method
func (m *MockMarketplaceDeploymentAPI) PutDeploymentParameterWithContext(arg0 context.Context, arg1 *marketplacedeployment.PutDeploymentParameterInput, arg2 ...request.Option) (*marketplacedeployment.PutDeploymentParameterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDeploymentParameterWithContext", varargs...)
	ret0, _ := ret[0].(*marketplacedeployment.PutDeploymentParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeploymentParameterWithContext indicates an expected call of PutDeploymentParameterWithContext
func (mr *MockMarketplaceDeploymentAPIMockRecorder) PutDeploymentParameterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeploymentParameterWithContext", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).PutDeploymentParameterWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockMarketplaceDeploymentAPI) TagResource(arg0 *marketplacedeployment.TagResourceInput) (*marketplacedeployment.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*marketplacedeployment.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockMarketplaceDeploymentAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockMarketplaceDeploymentAPI) TagResourceRequest(arg0 *marketplacedeployment.TagResourceInput) (*request.Request, *marketplacedeployment.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*marketplacedeployment.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockMarketplaceDeploymentAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockMarketplaceDeploymentAPI) TagResourceWithContext(arg0 context.Context, arg1 *marketplacedeployment.TagResourceInput, arg2 ...request.Option) (*marketplacedeployment.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*marketplacedeployment.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockMarketplaceDeploymentAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockMarketplaceDeploymentAPI) UntagResource(arg0 *marketplacedeployment.UntagResourceInput) (*marketplacedeployment.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*marketplacedeployment.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockMarketplaceDeploymentAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockMarketplaceDeploymentAPI) UntagResourceRequest(arg0 *marketplacedeployment.UntagResourceInput) (*request.Request, *marketplacedeployment.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*marketplacedeployment.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockMarketplaceDeploymentAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockMarketplaceDeploymentAPI) UntagResourceWithContext(arg0 context.Context, arg1 *marketplacedeployment.UntagResourceInput, arg2 ...request.Option) (*marketplacedeployment.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*marketplacedeployment.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockMarketplaceDeploymentAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMarketplaceDeploymentAPI)(nil).UntagResourceWithContext), varargs...)
}
