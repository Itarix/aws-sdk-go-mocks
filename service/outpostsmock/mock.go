// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/outposts/outpostsiface (interfaces: OutpostsAPI)

// Package outpostsmock is a generated GoMock package.
package outpostsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	outposts "github.com/aws/aws-sdk-go/service/outposts"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOutpostsAPI is a mock of OutpostsAPI interface
type MockOutpostsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOutpostsAPIMockRecorder
}

// MockOutpostsAPIMockRecorder is the mock recorder for MockOutpostsAPI
type MockOutpostsAPIMockRecorder struct {
	mock *MockOutpostsAPI
}

// NewMockOutpostsAPI creates a new mock instance
func NewMockOutpostsAPI(ctrl *gomock.Controller) *MockOutpostsAPI {
	mock := &MockOutpostsAPI{ctrl: ctrl}
	mock.recorder = &MockOutpostsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOutpostsAPI) EXPECT() *MockOutpostsAPIMockRecorder {
	return m.recorder
}

// CreateOutpost mocks base method
func (m *MockOutpostsAPI) CreateOutpost(arg0 *outposts.CreateOutpostInput) (*outposts.CreateOutpostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutpost", arg0)
	ret0, _ := ret[0].(*outposts.CreateOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutpost indicates an expected call of CreateOutpost
func (mr *MockOutpostsAPIMockRecorder) CreateOutpost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutpost", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateOutpost), arg0)
}

// CreateOutpostRequest mocks base method
func (m *MockOutpostsAPI) CreateOutpostRequest(arg0 *outposts.CreateOutpostInput) (*request.Request, *outposts.CreateOutpostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutpostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.CreateOutpostOutput)
	return ret0, ret1
}

// CreateOutpostRequest indicates an expected call of CreateOutpostRequest
func (mr *MockOutpostsAPIMockRecorder) CreateOutpostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutpostRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateOutpostRequest), arg0)
}

// CreateOutpostWithContext mocks base method
func (m *MockOutpostsAPI) CreateOutpostWithContext(arg0 context.Context, arg1 *outposts.CreateOutpostInput, arg2 ...request.Option) (*outposts.CreateOutpostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOutpostWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.CreateOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutpostWithContext indicates an expected call of CreateOutpostWithContext
func (mr *MockOutpostsAPIMockRecorder) CreateOutpostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutpostWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateOutpostWithContext), varargs...)
}

// DeleteOutpost mocks base method
func (m *MockOutpostsAPI) DeleteOutpost(arg0 *outposts.DeleteOutpostInput) (*outposts.DeleteOutpostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutpost", arg0)
	ret0, _ := ret[0].(*outposts.DeleteOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutpost indicates an expected call of DeleteOutpost
func (mr *MockOutpostsAPIMockRecorder) DeleteOutpost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutpost", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteOutpost), arg0)
}

// DeleteOutpostRequest mocks base method
func (m *MockOutpostsAPI) DeleteOutpostRequest(arg0 *outposts.DeleteOutpostInput) (*request.Request, *outposts.DeleteOutpostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutpostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.DeleteOutpostOutput)
	return ret0, ret1
}

// DeleteOutpostRequest indicates an expected call of DeleteOutpostRequest
func (mr *MockOutpostsAPIMockRecorder) DeleteOutpostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutpostRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteOutpostRequest), arg0)
}

// DeleteOutpostWithContext mocks base method
func (m *MockOutpostsAPI) DeleteOutpostWithContext(arg0 context.Context, arg1 *outposts.DeleteOutpostInput, arg2 ...request.Option) (*outposts.DeleteOutpostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOutpostWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.DeleteOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutpostWithContext indicates an expected call of DeleteOutpostWithContext
func (mr *MockOutpostsAPIMockRecorder) DeleteOutpostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutpostWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteOutpostWithContext), varargs...)
}

// DeleteSite mocks base method
func (m *MockOutpostsAPI) DeleteSite(arg0 *outposts.DeleteSiteInput) (*outposts.DeleteSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSite", arg0)
	ret0, _ := ret[0].(*outposts.DeleteSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSite indicates an expected call of DeleteSite
func (mr *MockOutpostsAPIMockRecorder) DeleteSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSite", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteSite), arg0)
}

// DeleteSiteRequest mocks base method
func (m *MockOutpostsAPI) DeleteSiteRequest(arg0 *outposts.DeleteSiteInput) (*request.Request, *outposts.DeleteSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.DeleteSiteOutput)
	return ret0, ret1
}

// DeleteSiteRequest indicates an expected call of DeleteSiteRequest
func (mr *MockOutpostsAPIMockRecorder) DeleteSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSiteRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteSiteRequest), arg0)
}

// DeleteSiteWithContext mocks base method
func (m *MockOutpostsAPI) DeleteSiteWithContext(arg0 context.Context, arg1 *outposts.DeleteSiteInput, arg2 ...request.Option) (*outposts.DeleteSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSiteWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.DeleteSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSiteWithContext indicates an expected call of DeleteSiteWithContext
func (mr *MockOutpostsAPIMockRecorder) DeleteSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSiteWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteSiteWithContext), varargs...)
}

// GetOutpost mocks base method
func (m *MockOutpostsAPI) GetOutpost(arg0 *outposts.GetOutpostInput) (*outposts.GetOutpostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutpost", arg0)
	ret0, _ := ret[0].(*outposts.GetOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutpost indicates an expected call of GetOutpost
func (mr *MockOutpostsAPIMockRecorder) GetOutpost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpost", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpost), arg0)
}

// GetOutpostInstanceTypes mocks base method
func (m *MockOutpostsAPI) GetOutpostInstanceTypes(arg0 *outposts.GetOutpostInstanceTypesInput) (*outposts.GetOutpostInstanceTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutpostInstanceTypes", arg0)
	ret0, _ := ret[0].(*outposts.GetOutpostInstanceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutpostInstanceTypes indicates an expected call of GetOutpostInstanceTypes
func (mr *MockOutpostsAPIMockRecorder) GetOutpostInstanceTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostInstanceTypes", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpostInstanceTypes), arg0)
}

// GetOutpostInstanceTypesRequest mocks base method
func (m *MockOutpostsAPI) GetOutpostInstanceTypesRequest(arg0 *outposts.GetOutpostInstanceTypesInput) (*request.Request, *outposts.GetOutpostInstanceTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutpostInstanceTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.GetOutpostInstanceTypesOutput)
	return ret0, ret1
}

// GetOutpostInstanceTypesRequest indicates an expected call of GetOutpostInstanceTypesRequest
func (mr *MockOutpostsAPIMockRecorder) GetOutpostInstanceTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostInstanceTypesRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpostInstanceTypesRequest), arg0)
}

// GetOutpostInstanceTypesWithContext mocks base method
func (m *MockOutpostsAPI) GetOutpostInstanceTypesWithContext(arg0 context.Context, arg1 *outposts.GetOutpostInstanceTypesInput, arg2 ...request.Option) (*outposts.GetOutpostInstanceTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOutpostInstanceTypesWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.GetOutpostInstanceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutpostInstanceTypesWithContext indicates an expected call of GetOutpostInstanceTypesWithContext
func (mr *MockOutpostsAPIMockRecorder) GetOutpostInstanceTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostInstanceTypesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpostInstanceTypesWithContext), varargs...)
}

// GetOutpostRequest mocks base method
func (m *MockOutpostsAPI) GetOutpostRequest(arg0 *outposts.GetOutpostInput) (*request.Request, *outposts.GetOutpostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutpostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.GetOutpostOutput)
	return ret0, ret1
}

// GetOutpostRequest indicates an expected call of GetOutpostRequest
func (mr *MockOutpostsAPIMockRecorder) GetOutpostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpostRequest), arg0)
}

// GetOutpostWithContext mocks base method
func (m *MockOutpostsAPI) GetOutpostWithContext(arg0 context.Context, arg1 *outposts.GetOutpostInput, arg2 ...request.Option) (*outposts.GetOutpostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOutpostWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.GetOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutpostWithContext indicates an expected call of GetOutpostWithContext
func (mr *MockOutpostsAPIMockRecorder) GetOutpostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpostWithContext), varargs...)
}

// ListOutposts mocks base method
func (m *MockOutpostsAPI) ListOutposts(arg0 *outposts.ListOutpostsInput) (*outposts.ListOutpostsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutposts", arg0)
	ret0, _ := ret[0].(*outposts.ListOutpostsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutposts indicates an expected call of ListOutposts
func (mr *MockOutpostsAPIMockRecorder) ListOutposts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutposts", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOutposts), arg0)
}

// ListOutpostsPages mocks base method
func (m *MockOutpostsAPI) ListOutpostsPages(arg0 *outposts.ListOutpostsInput, arg1 func(*outposts.ListOutpostsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutpostsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOutpostsPages indicates an expected call of ListOutpostsPages
func (mr *MockOutpostsAPIMockRecorder) ListOutpostsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutpostsPages", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOutpostsPages), arg0, arg1)
}

// ListOutpostsPagesWithContext mocks base method
func (m *MockOutpostsAPI) ListOutpostsPagesWithContext(arg0 context.Context, arg1 *outposts.ListOutpostsInput, arg2 func(*outposts.ListOutpostsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutpostsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOutpostsPagesWithContext indicates an expected call of ListOutpostsPagesWithContext
func (mr *MockOutpostsAPIMockRecorder) ListOutpostsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutpostsPagesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOutpostsPagesWithContext), varargs...)
}

// ListOutpostsRequest mocks base method
func (m *MockOutpostsAPI) ListOutpostsRequest(arg0 *outposts.ListOutpostsInput) (*request.Request, *outposts.ListOutpostsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutpostsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.ListOutpostsOutput)
	return ret0, ret1
}

// ListOutpostsRequest indicates an expected call of ListOutpostsRequest
func (mr *MockOutpostsAPIMockRecorder) ListOutpostsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutpostsRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOutpostsRequest), arg0)
}

// ListOutpostsWithContext mocks base method
func (m *MockOutpostsAPI) ListOutpostsWithContext(arg0 context.Context, arg1 *outposts.ListOutpostsInput, arg2 ...request.Option) (*outposts.ListOutpostsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutpostsWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.ListOutpostsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutpostsWithContext indicates an expected call of ListOutpostsWithContext
func (mr *MockOutpostsAPIMockRecorder) ListOutpostsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutpostsWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOutpostsWithContext), varargs...)
}

// ListSites mocks base method
func (m *MockOutpostsAPI) ListSites(arg0 *outposts.ListSitesInput) (*outposts.ListSitesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSites", arg0)
	ret0, _ := ret[0].(*outposts.ListSitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSites indicates an expected call of ListSites
func (mr *MockOutpostsAPIMockRecorder) ListSites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSites", reflect.TypeOf((*MockOutpostsAPI)(nil).ListSites), arg0)
}

// ListSitesPages mocks base method
func (m *MockOutpostsAPI) ListSitesPages(arg0 *outposts.ListSitesInput, arg1 func(*outposts.ListSitesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSitesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSitesPages indicates an expected call of ListSitesPages
func (mr *MockOutpostsAPIMockRecorder) ListSitesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesPages", reflect.TypeOf((*MockOutpostsAPI)(nil).ListSitesPages), arg0, arg1)
}

// ListSitesPagesWithContext mocks base method
func (m *MockOutpostsAPI) ListSitesPagesWithContext(arg0 context.Context, arg1 *outposts.ListSitesInput, arg2 func(*outposts.ListSitesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSitesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSitesPagesWithContext indicates an expected call of ListSitesPagesWithContext
func (mr *MockOutpostsAPIMockRecorder) ListSitesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesPagesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListSitesPagesWithContext), varargs...)
}

// ListSitesRequest mocks base method
func (m *MockOutpostsAPI) ListSitesRequest(arg0 *outposts.ListSitesInput) (*request.Request, *outposts.ListSitesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSitesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.ListSitesOutput)
	return ret0, ret1
}

// ListSitesRequest indicates an expected call of ListSitesRequest
func (mr *MockOutpostsAPIMockRecorder) ListSitesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).ListSitesRequest), arg0)
}

// ListSitesWithContext mocks base method
func (m *MockOutpostsAPI) ListSitesWithContext(arg0 context.Context, arg1 *outposts.ListSitesInput, arg2 ...request.Option) (*outposts.ListSitesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSitesWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.ListSitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSitesWithContext indicates an expected call of ListSitesWithContext
func (mr *MockOutpostsAPIMockRecorder) ListSitesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListSitesWithContext), varargs...)
}
