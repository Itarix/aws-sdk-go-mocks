// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/finspace/finspaceiface (interfaces: FinspaceAPI)

// Package finspacemock is a generated GoMock package.
package finspacemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	finspace "github.com/aws/aws-sdk-go/service/finspace"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFinspaceAPI is a mock of FinspaceAPI interface
type MockFinspaceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFinspaceAPIMockRecorder
}

// MockFinspaceAPIMockRecorder is the mock recorder for MockFinspaceAPI
type MockFinspaceAPIMockRecorder struct {
	mock *MockFinspaceAPI
}

// NewMockFinspaceAPI creates a new mock instance
func NewMockFinspaceAPI(ctrl *gomock.Controller) *MockFinspaceAPI {
	mock := &MockFinspaceAPI{ctrl: ctrl}
	mock.recorder = &MockFinspaceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFinspaceAPI) EXPECT() *MockFinspaceAPIMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method
func (m *MockFinspaceAPI) CreateEnvironment(arg0 *finspace.CreateEnvironmentInput) (*finspace.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0)
	ret0, _ := ret[0].(*finspace.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockFinspaceAPIMockRecorder) CreateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateEnvironment), arg0)
}

// CreateEnvironmentRequest mocks base method
func (m *MockFinspaceAPI) CreateEnvironmentRequest(arg0 *finspace.CreateEnvironmentInput) (*request.Request, *finspace.CreateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.CreateEnvironmentOutput)
	return ret0, ret1
}

// CreateEnvironmentRequest indicates an expected call of CreateEnvironmentRequest
func (mr *MockFinspaceAPIMockRecorder) CreateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateEnvironmentRequest), arg0)
}

// CreateEnvironmentWithContext mocks base method
func (m *MockFinspaceAPI) CreateEnvironmentWithContext(arg0 context.Context, arg1 *finspace.CreateEnvironmentInput, arg2 ...request.Option) (*finspace.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentWithContext indicates an expected call of CreateEnvironmentWithContext
func (mr *MockFinspaceAPIMockRecorder) CreateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateEnvironmentWithContext), varargs...)
}

// CreateKxChangeset mocks base method
func (m *MockFinspaceAPI) CreateKxChangeset(arg0 *finspace.CreateKxChangesetInput) (*finspace.CreateKxChangesetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKxChangeset", arg0)
	ret0, _ := ret[0].(*finspace.CreateKxChangesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKxChangeset indicates an expected call of CreateKxChangeset
func (mr *MockFinspaceAPIMockRecorder) CreateKxChangeset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxChangeset", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxChangeset), arg0)
}

// CreateKxChangesetRequest mocks base method
func (m *MockFinspaceAPI) CreateKxChangesetRequest(arg0 *finspace.CreateKxChangesetInput) (*request.Request, *finspace.CreateKxChangesetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKxChangesetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.CreateKxChangesetOutput)
	return ret0, ret1
}

// CreateKxChangesetRequest indicates an expected call of CreateKxChangesetRequest
func (mr *MockFinspaceAPIMockRecorder) CreateKxChangesetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxChangesetRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxChangesetRequest), arg0)
}

// CreateKxChangesetWithContext mocks base method
func (m *MockFinspaceAPI) CreateKxChangesetWithContext(arg0 context.Context, arg1 *finspace.CreateKxChangesetInput, arg2 ...request.Option) (*finspace.CreateKxChangesetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKxChangesetWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.CreateKxChangesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKxChangesetWithContext indicates an expected call of CreateKxChangesetWithContext
func (mr *MockFinspaceAPIMockRecorder) CreateKxChangesetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxChangesetWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxChangesetWithContext), varargs...)
}

// CreateKxCluster mocks base method
func (m *MockFinspaceAPI) CreateKxCluster(arg0 *finspace.CreateKxClusterInput) (*finspace.CreateKxClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKxCluster", arg0)
	ret0, _ := ret[0].(*finspace.CreateKxClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKxCluster indicates an expected call of CreateKxCluster
func (mr *MockFinspaceAPIMockRecorder) CreateKxCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxCluster", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxCluster), arg0)
}

// CreateKxClusterRequest mocks base method
func (m *MockFinspaceAPI) CreateKxClusterRequest(arg0 *finspace.CreateKxClusterInput) (*request.Request, *finspace.CreateKxClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKxClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.CreateKxClusterOutput)
	return ret0, ret1
}

// CreateKxClusterRequest indicates an expected call of CreateKxClusterRequest
func (mr *MockFinspaceAPIMockRecorder) CreateKxClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxClusterRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxClusterRequest), arg0)
}

// CreateKxClusterWithContext mocks base method
func (m *MockFinspaceAPI) CreateKxClusterWithContext(arg0 context.Context, arg1 *finspace.CreateKxClusterInput, arg2 ...request.Option) (*finspace.CreateKxClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKxClusterWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.CreateKxClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKxClusterWithContext indicates an expected call of CreateKxClusterWithContext
func (mr *MockFinspaceAPIMockRecorder) CreateKxClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxClusterWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxClusterWithContext), varargs...)
}

// CreateKxDatabase mocks base method
func (m *MockFinspaceAPI) CreateKxDatabase(arg0 *finspace.CreateKxDatabaseInput) (*finspace.CreateKxDatabaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKxDatabase", arg0)
	ret0, _ := ret[0].(*finspace.CreateKxDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKxDatabase indicates an expected call of CreateKxDatabase
func (mr *MockFinspaceAPIMockRecorder) CreateKxDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxDatabase", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxDatabase), arg0)
}

// CreateKxDatabaseRequest mocks base method
func (m *MockFinspaceAPI) CreateKxDatabaseRequest(arg0 *finspace.CreateKxDatabaseInput) (*request.Request, *finspace.CreateKxDatabaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKxDatabaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.CreateKxDatabaseOutput)
	return ret0, ret1
}

// CreateKxDatabaseRequest indicates an expected call of CreateKxDatabaseRequest
func (mr *MockFinspaceAPIMockRecorder) CreateKxDatabaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxDatabaseRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxDatabaseRequest), arg0)
}

// CreateKxDatabaseWithContext mocks base method
func (m *MockFinspaceAPI) CreateKxDatabaseWithContext(arg0 context.Context, arg1 *finspace.CreateKxDatabaseInput, arg2 ...request.Option) (*finspace.CreateKxDatabaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKxDatabaseWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.CreateKxDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKxDatabaseWithContext indicates an expected call of CreateKxDatabaseWithContext
func (mr *MockFinspaceAPIMockRecorder) CreateKxDatabaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxDatabaseWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxDatabaseWithContext), varargs...)
}

// CreateKxEnvironment mocks base method
func (m *MockFinspaceAPI) CreateKxEnvironment(arg0 *finspace.CreateKxEnvironmentInput) (*finspace.CreateKxEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKxEnvironment", arg0)
	ret0, _ := ret[0].(*finspace.CreateKxEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKxEnvironment indicates an expected call of CreateKxEnvironment
func (mr *MockFinspaceAPIMockRecorder) CreateKxEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxEnvironment", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxEnvironment), arg0)
}

// CreateKxEnvironmentRequest mocks base method
func (m *MockFinspaceAPI) CreateKxEnvironmentRequest(arg0 *finspace.CreateKxEnvironmentInput) (*request.Request, *finspace.CreateKxEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKxEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.CreateKxEnvironmentOutput)
	return ret0, ret1
}

// CreateKxEnvironmentRequest indicates an expected call of CreateKxEnvironmentRequest
func (mr *MockFinspaceAPIMockRecorder) CreateKxEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxEnvironmentRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxEnvironmentRequest), arg0)
}

// CreateKxEnvironmentWithContext mocks base method
func (m *MockFinspaceAPI) CreateKxEnvironmentWithContext(arg0 context.Context, arg1 *finspace.CreateKxEnvironmentInput, arg2 ...request.Option) (*finspace.CreateKxEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKxEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.CreateKxEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKxEnvironmentWithContext indicates an expected call of CreateKxEnvironmentWithContext
func (mr *MockFinspaceAPIMockRecorder) CreateKxEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxEnvironmentWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxEnvironmentWithContext), varargs...)
}

// CreateKxUser mocks base method
func (m *MockFinspaceAPI) CreateKxUser(arg0 *finspace.CreateKxUserInput) (*finspace.CreateKxUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKxUser", arg0)
	ret0, _ := ret[0].(*finspace.CreateKxUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKxUser indicates an expected call of CreateKxUser
func (mr *MockFinspaceAPIMockRecorder) CreateKxUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxUser", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxUser), arg0)
}

// CreateKxUserRequest mocks base method
func (m *MockFinspaceAPI) CreateKxUserRequest(arg0 *finspace.CreateKxUserInput) (*request.Request, *finspace.CreateKxUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKxUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.CreateKxUserOutput)
	return ret0, ret1
}

// CreateKxUserRequest indicates an expected call of CreateKxUserRequest
func (mr *MockFinspaceAPIMockRecorder) CreateKxUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxUserRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxUserRequest), arg0)
}

// CreateKxUserWithContext mocks base method
func (m *MockFinspaceAPI) CreateKxUserWithContext(arg0 context.Context, arg1 *finspace.CreateKxUserInput, arg2 ...request.Option) (*finspace.CreateKxUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKxUserWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.CreateKxUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKxUserWithContext indicates an expected call of CreateKxUserWithContext
func (mr *MockFinspaceAPIMockRecorder) CreateKxUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKxUserWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).CreateKxUserWithContext), varargs...)
}

// DeleteEnvironment mocks base method
func (m *MockFinspaceAPI) DeleteEnvironment(arg0 *finspace.DeleteEnvironmentInput) (*finspace.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0)
	ret0, _ := ret[0].(*finspace.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockFinspaceAPIMockRecorder) DeleteEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteEnvironment), arg0)
}

// DeleteEnvironmentRequest mocks base method
func (m *MockFinspaceAPI) DeleteEnvironmentRequest(arg0 *finspace.DeleteEnvironmentInput) (*request.Request, *finspace.DeleteEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.DeleteEnvironmentOutput)
	return ret0, ret1
}

// DeleteEnvironmentRequest indicates an expected call of DeleteEnvironmentRequest
func (mr *MockFinspaceAPIMockRecorder) DeleteEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteEnvironmentRequest), arg0)
}

// DeleteEnvironmentWithContext mocks base method
func (m *MockFinspaceAPI) DeleteEnvironmentWithContext(arg0 context.Context, arg1 *finspace.DeleteEnvironmentInput, arg2 ...request.Option) (*finspace.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentWithContext indicates an expected call of DeleteEnvironmentWithContext
func (mr *MockFinspaceAPIMockRecorder) DeleteEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteEnvironmentWithContext), varargs...)
}

// DeleteKxCluster mocks base method
func (m *MockFinspaceAPI) DeleteKxCluster(arg0 *finspace.DeleteKxClusterInput) (*finspace.DeleteKxClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKxCluster", arg0)
	ret0, _ := ret[0].(*finspace.DeleteKxClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKxCluster indicates an expected call of DeleteKxCluster
func (mr *MockFinspaceAPIMockRecorder) DeleteKxCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxCluster", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxCluster), arg0)
}

// DeleteKxClusterRequest mocks base method
func (m *MockFinspaceAPI) DeleteKxClusterRequest(arg0 *finspace.DeleteKxClusterInput) (*request.Request, *finspace.DeleteKxClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKxClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.DeleteKxClusterOutput)
	return ret0, ret1
}

// DeleteKxClusterRequest indicates an expected call of DeleteKxClusterRequest
func (mr *MockFinspaceAPIMockRecorder) DeleteKxClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxClusterRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxClusterRequest), arg0)
}

// DeleteKxClusterWithContext mocks base method
func (m *MockFinspaceAPI) DeleteKxClusterWithContext(arg0 context.Context, arg1 *finspace.DeleteKxClusterInput, arg2 ...request.Option) (*finspace.DeleteKxClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKxClusterWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.DeleteKxClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKxClusterWithContext indicates an expected call of DeleteKxClusterWithContext
func (mr *MockFinspaceAPIMockRecorder) DeleteKxClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxClusterWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxClusterWithContext), varargs...)
}

// DeleteKxDatabase mocks base method
func (m *MockFinspaceAPI) DeleteKxDatabase(arg0 *finspace.DeleteKxDatabaseInput) (*finspace.DeleteKxDatabaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKxDatabase", arg0)
	ret0, _ := ret[0].(*finspace.DeleteKxDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKxDatabase indicates an expected call of DeleteKxDatabase
func (mr *MockFinspaceAPIMockRecorder) DeleteKxDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxDatabase", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxDatabase), arg0)
}

// DeleteKxDatabaseRequest mocks base method
func (m *MockFinspaceAPI) DeleteKxDatabaseRequest(arg0 *finspace.DeleteKxDatabaseInput) (*request.Request, *finspace.DeleteKxDatabaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKxDatabaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.DeleteKxDatabaseOutput)
	return ret0, ret1
}

// DeleteKxDatabaseRequest indicates an expected call of DeleteKxDatabaseRequest
func (mr *MockFinspaceAPIMockRecorder) DeleteKxDatabaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxDatabaseRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxDatabaseRequest), arg0)
}

// DeleteKxDatabaseWithContext mocks base method
func (m *MockFinspaceAPI) DeleteKxDatabaseWithContext(arg0 context.Context, arg1 *finspace.DeleteKxDatabaseInput, arg2 ...request.Option) (*finspace.DeleteKxDatabaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKxDatabaseWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.DeleteKxDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKxDatabaseWithContext indicates an expected call of DeleteKxDatabaseWithContext
func (mr *MockFinspaceAPIMockRecorder) DeleteKxDatabaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxDatabaseWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxDatabaseWithContext), varargs...)
}

// DeleteKxEnvironment mocks base method
func (m *MockFinspaceAPI) DeleteKxEnvironment(arg0 *finspace.DeleteKxEnvironmentInput) (*finspace.DeleteKxEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKxEnvironment", arg0)
	ret0, _ := ret[0].(*finspace.DeleteKxEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKxEnvironment indicates an expected call of DeleteKxEnvironment
func (mr *MockFinspaceAPIMockRecorder) DeleteKxEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxEnvironment", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxEnvironment), arg0)
}

// DeleteKxEnvironmentRequest mocks base method
func (m *MockFinspaceAPI) DeleteKxEnvironmentRequest(arg0 *finspace.DeleteKxEnvironmentInput) (*request.Request, *finspace.DeleteKxEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKxEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.DeleteKxEnvironmentOutput)
	return ret0, ret1
}

// DeleteKxEnvironmentRequest indicates an expected call of DeleteKxEnvironmentRequest
func (mr *MockFinspaceAPIMockRecorder) DeleteKxEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxEnvironmentRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxEnvironmentRequest), arg0)
}

// DeleteKxEnvironmentWithContext mocks base method
func (m *MockFinspaceAPI) DeleteKxEnvironmentWithContext(arg0 context.Context, arg1 *finspace.DeleteKxEnvironmentInput, arg2 ...request.Option) (*finspace.DeleteKxEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKxEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.DeleteKxEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKxEnvironmentWithContext indicates an expected call of DeleteKxEnvironmentWithContext
func (mr *MockFinspaceAPIMockRecorder) DeleteKxEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxEnvironmentWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxEnvironmentWithContext), varargs...)
}

// DeleteKxUser mocks base method
func (m *MockFinspaceAPI) DeleteKxUser(arg0 *finspace.DeleteKxUserInput) (*finspace.DeleteKxUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKxUser", arg0)
	ret0, _ := ret[0].(*finspace.DeleteKxUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKxUser indicates an expected call of DeleteKxUser
func (mr *MockFinspaceAPIMockRecorder) DeleteKxUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxUser", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxUser), arg0)
}

// DeleteKxUserRequest mocks base method
func (m *MockFinspaceAPI) DeleteKxUserRequest(arg0 *finspace.DeleteKxUserInput) (*request.Request, *finspace.DeleteKxUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKxUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.DeleteKxUserOutput)
	return ret0, ret1
}

// DeleteKxUserRequest indicates an expected call of DeleteKxUserRequest
func (mr *MockFinspaceAPIMockRecorder) DeleteKxUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxUserRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxUserRequest), arg0)
}

// DeleteKxUserWithContext mocks base method
func (m *MockFinspaceAPI) DeleteKxUserWithContext(arg0 context.Context, arg1 *finspace.DeleteKxUserInput, arg2 ...request.Option) (*finspace.DeleteKxUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKxUserWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.DeleteKxUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKxUserWithContext indicates an expected call of DeleteKxUserWithContext
func (mr *MockFinspaceAPIMockRecorder) DeleteKxUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKxUserWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).DeleteKxUserWithContext), varargs...)
}

// GetEnvironment mocks base method
func (m *MockFinspaceAPI) GetEnvironment(arg0 *finspace.GetEnvironmentInput) (*finspace.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0)
	ret0, _ := ret[0].(*finspace.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockFinspaceAPIMockRecorder) GetEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockFinspaceAPI)(nil).GetEnvironment), arg0)
}

// GetEnvironmentRequest mocks base method
func (m *MockFinspaceAPI) GetEnvironmentRequest(arg0 *finspace.GetEnvironmentInput) (*request.Request, *finspace.GetEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.GetEnvironmentOutput)
	return ret0, ret1
}

// GetEnvironmentRequest indicates an expected call of GetEnvironmentRequest
func (mr *MockFinspaceAPIMockRecorder) GetEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).GetEnvironmentRequest), arg0)
}

// GetEnvironmentWithContext mocks base method
func (m *MockFinspaceAPI) GetEnvironmentWithContext(arg0 context.Context, arg1 *finspace.GetEnvironmentInput, arg2 ...request.Option) (*finspace.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentWithContext indicates an expected call of GetEnvironmentWithContext
func (mr *MockFinspaceAPIMockRecorder) GetEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).GetEnvironmentWithContext), varargs...)
}

// GetKxChangeset mocks base method
func (m *MockFinspaceAPI) GetKxChangeset(arg0 *finspace.GetKxChangesetInput) (*finspace.GetKxChangesetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxChangeset", arg0)
	ret0, _ := ret[0].(*finspace.GetKxChangesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxChangeset indicates an expected call of GetKxChangeset
func (mr *MockFinspaceAPIMockRecorder) GetKxChangeset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxChangeset", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxChangeset), arg0)
}

// GetKxChangesetRequest mocks base method
func (m *MockFinspaceAPI) GetKxChangesetRequest(arg0 *finspace.GetKxChangesetInput) (*request.Request, *finspace.GetKxChangesetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxChangesetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.GetKxChangesetOutput)
	return ret0, ret1
}

// GetKxChangesetRequest indicates an expected call of GetKxChangesetRequest
func (mr *MockFinspaceAPIMockRecorder) GetKxChangesetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxChangesetRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxChangesetRequest), arg0)
}

// GetKxChangesetWithContext mocks base method
func (m *MockFinspaceAPI) GetKxChangesetWithContext(arg0 context.Context, arg1 *finspace.GetKxChangesetInput, arg2 ...request.Option) (*finspace.GetKxChangesetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKxChangesetWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.GetKxChangesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxChangesetWithContext indicates an expected call of GetKxChangesetWithContext
func (mr *MockFinspaceAPIMockRecorder) GetKxChangesetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxChangesetWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxChangesetWithContext), varargs...)
}

// GetKxCluster mocks base method
func (m *MockFinspaceAPI) GetKxCluster(arg0 *finspace.GetKxClusterInput) (*finspace.GetKxClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxCluster", arg0)
	ret0, _ := ret[0].(*finspace.GetKxClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxCluster indicates an expected call of GetKxCluster
func (mr *MockFinspaceAPIMockRecorder) GetKxCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxCluster", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxCluster), arg0)
}

// GetKxClusterRequest mocks base method
func (m *MockFinspaceAPI) GetKxClusterRequest(arg0 *finspace.GetKxClusterInput) (*request.Request, *finspace.GetKxClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.GetKxClusterOutput)
	return ret0, ret1
}

// GetKxClusterRequest indicates an expected call of GetKxClusterRequest
func (mr *MockFinspaceAPIMockRecorder) GetKxClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxClusterRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxClusterRequest), arg0)
}

// GetKxClusterWithContext mocks base method
func (m *MockFinspaceAPI) GetKxClusterWithContext(arg0 context.Context, arg1 *finspace.GetKxClusterInput, arg2 ...request.Option) (*finspace.GetKxClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKxClusterWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.GetKxClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxClusterWithContext indicates an expected call of GetKxClusterWithContext
func (mr *MockFinspaceAPIMockRecorder) GetKxClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxClusterWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxClusterWithContext), varargs...)
}

// GetKxConnectionString mocks base method
func (m *MockFinspaceAPI) GetKxConnectionString(arg0 *finspace.GetKxConnectionStringInput) (*finspace.GetKxConnectionStringOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxConnectionString", arg0)
	ret0, _ := ret[0].(*finspace.GetKxConnectionStringOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxConnectionString indicates an expected call of GetKxConnectionString
func (mr *MockFinspaceAPIMockRecorder) GetKxConnectionString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxConnectionString", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxConnectionString), arg0)
}

// GetKxConnectionStringRequest mocks base method
func (m *MockFinspaceAPI) GetKxConnectionStringRequest(arg0 *finspace.GetKxConnectionStringInput) (*request.Request, *finspace.GetKxConnectionStringOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxConnectionStringRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.GetKxConnectionStringOutput)
	return ret0, ret1
}

// GetKxConnectionStringRequest indicates an expected call of GetKxConnectionStringRequest
func (mr *MockFinspaceAPIMockRecorder) GetKxConnectionStringRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxConnectionStringRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxConnectionStringRequest), arg0)
}

// GetKxConnectionStringWithContext mocks base method
func (m *MockFinspaceAPI) GetKxConnectionStringWithContext(arg0 context.Context, arg1 *finspace.GetKxConnectionStringInput, arg2 ...request.Option) (*finspace.GetKxConnectionStringOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKxConnectionStringWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.GetKxConnectionStringOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxConnectionStringWithContext indicates an expected call of GetKxConnectionStringWithContext
func (mr *MockFinspaceAPIMockRecorder) GetKxConnectionStringWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxConnectionStringWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxConnectionStringWithContext), varargs...)
}

// GetKxDatabase mocks base method
func (m *MockFinspaceAPI) GetKxDatabase(arg0 *finspace.GetKxDatabaseInput) (*finspace.GetKxDatabaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxDatabase", arg0)
	ret0, _ := ret[0].(*finspace.GetKxDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxDatabase indicates an expected call of GetKxDatabase
func (mr *MockFinspaceAPIMockRecorder) GetKxDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxDatabase", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxDatabase), arg0)
}

// GetKxDatabaseRequest mocks base method
func (m *MockFinspaceAPI) GetKxDatabaseRequest(arg0 *finspace.GetKxDatabaseInput) (*request.Request, *finspace.GetKxDatabaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxDatabaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.GetKxDatabaseOutput)
	return ret0, ret1
}

// GetKxDatabaseRequest indicates an expected call of GetKxDatabaseRequest
func (mr *MockFinspaceAPIMockRecorder) GetKxDatabaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxDatabaseRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxDatabaseRequest), arg0)
}

// GetKxDatabaseWithContext mocks base method
func (m *MockFinspaceAPI) GetKxDatabaseWithContext(arg0 context.Context, arg1 *finspace.GetKxDatabaseInput, arg2 ...request.Option) (*finspace.GetKxDatabaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKxDatabaseWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.GetKxDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxDatabaseWithContext indicates an expected call of GetKxDatabaseWithContext
func (mr *MockFinspaceAPIMockRecorder) GetKxDatabaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxDatabaseWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxDatabaseWithContext), varargs...)
}

// GetKxEnvironment mocks base method
func (m *MockFinspaceAPI) GetKxEnvironment(arg0 *finspace.GetKxEnvironmentInput) (*finspace.GetKxEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxEnvironment", arg0)
	ret0, _ := ret[0].(*finspace.GetKxEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxEnvironment indicates an expected call of GetKxEnvironment
func (mr *MockFinspaceAPIMockRecorder) GetKxEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxEnvironment", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxEnvironment), arg0)
}

// GetKxEnvironmentRequest mocks base method
func (m *MockFinspaceAPI) GetKxEnvironmentRequest(arg0 *finspace.GetKxEnvironmentInput) (*request.Request, *finspace.GetKxEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.GetKxEnvironmentOutput)
	return ret0, ret1
}

// GetKxEnvironmentRequest indicates an expected call of GetKxEnvironmentRequest
func (mr *MockFinspaceAPIMockRecorder) GetKxEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxEnvironmentRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxEnvironmentRequest), arg0)
}

// GetKxEnvironmentWithContext mocks base method
func (m *MockFinspaceAPI) GetKxEnvironmentWithContext(arg0 context.Context, arg1 *finspace.GetKxEnvironmentInput, arg2 ...request.Option) (*finspace.GetKxEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKxEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.GetKxEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxEnvironmentWithContext indicates an expected call of GetKxEnvironmentWithContext
func (mr *MockFinspaceAPIMockRecorder) GetKxEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxEnvironmentWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxEnvironmentWithContext), varargs...)
}

// GetKxUser mocks base method
func (m *MockFinspaceAPI) GetKxUser(arg0 *finspace.GetKxUserInput) (*finspace.GetKxUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxUser", arg0)
	ret0, _ := ret[0].(*finspace.GetKxUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxUser indicates an expected call of GetKxUser
func (mr *MockFinspaceAPIMockRecorder) GetKxUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxUser", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxUser), arg0)
}

// GetKxUserRequest mocks base method
func (m *MockFinspaceAPI) GetKxUserRequest(arg0 *finspace.GetKxUserInput) (*request.Request, *finspace.GetKxUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKxUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.GetKxUserOutput)
	return ret0, ret1
}

// GetKxUserRequest indicates an expected call of GetKxUserRequest
func (mr *MockFinspaceAPIMockRecorder) GetKxUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxUserRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxUserRequest), arg0)
}

// GetKxUserWithContext mocks base method
func (m *MockFinspaceAPI) GetKxUserWithContext(arg0 context.Context, arg1 *finspace.GetKxUserInput, arg2 ...request.Option) (*finspace.GetKxUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKxUserWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.GetKxUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKxUserWithContext indicates an expected call of GetKxUserWithContext
func (mr *MockFinspaceAPIMockRecorder) GetKxUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKxUserWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).GetKxUserWithContext), varargs...)
}

// ListEnvironments mocks base method
func (m *MockFinspaceAPI) ListEnvironments(arg0 *finspace.ListEnvironmentsInput) (*finspace.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0)
	ret0, _ := ret[0].(*finspace.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockFinspaceAPIMockRecorder) ListEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockFinspaceAPI)(nil).ListEnvironments), arg0)
}

// ListEnvironmentsRequest mocks base method
func (m *MockFinspaceAPI) ListEnvironmentsRequest(arg0 *finspace.ListEnvironmentsInput) (*request.Request, *finspace.ListEnvironmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.ListEnvironmentsOutput)
	return ret0, ret1
}

// ListEnvironmentsRequest indicates an expected call of ListEnvironmentsRequest
func (mr *MockFinspaceAPIMockRecorder) ListEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).ListEnvironmentsRequest), arg0)
}

// ListEnvironmentsWithContext mocks base method
func (m *MockFinspaceAPI) ListEnvironmentsWithContext(arg0 context.Context, arg1 *finspace.ListEnvironmentsInput, arg2 ...request.Option) (*finspace.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsWithContext indicates an expected call of ListEnvironmentsWithContext
func (mr *MockFinspaceAPIMockRecorder) ListEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListEnvironmentsWithContext), varargs...)
}

// ListKxChangesets mocks base method
func (m *MockFinspaceAPI) ListKxChangesets(arg0 *finspace.ListKxChangesetsInput) (*finspace.ListKxChangesetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxChangesets", arg0)
	ret0, _ := ret[0].(*finspace.ListKxChangesetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxChangesets indicates an expected call of ListKxChangesets
func (mr *MockFinspaceAPIMockRecorder) ListKxChangesets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxChangesets", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxChangesets), arg0)
}

// ListKxChangesetsPages mocks base method
func (m *MockFinspaceAPI) ListKxChangesetsPages(arg0 *finspace.ListKxChangesetsInput, arg1 func(*finspace.ListKxChangesetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxChangesetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKxChangesetsPages indicates an expected call of ListKxChangesetsPages
func (mr *MockFinspaceAPIMockRecorder) ListKxChangesetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxChangesetsPages", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxChangesetsPages), arg0, arg1)
}

// ListKxChangesetsPagesWithContext mocks base method
func (m *MockFinspaceAPI) ListKxChangesetsPagesWithContext(arg0 context.Context, arg1 *finspace.ListKxChangesetsInput, arg2 func(*finspace.ListKxChangesetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKxChangesetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKxChangesetsPagesWithContext indicates an expected call of ListKxChangesetsPagesWithContext
func (mr *MockFinspaceAPIMockRecorder) ListKxChangesetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxChangesetsPagesWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxChangesetsPagesWithContext), varargs...)
}

// ListKxChangesetsRequest mocks base method
func (m *MockFinspaceAPI) ListKxChangesetsRequest(arg0 *finspace.ListKxChangesetsInput) (*request.Request, *finspace.ListKxChangesetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxChangesetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.ListKxChangesetsOutput)
	return ret0, ret1
}

// ListKxChangesetsRequest indicates an expected call of ListKxChangesetsRequest
func (mr *MockFinspaceAPIMockRecorder) ListKxChangesetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxChangesetsRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxChangesetsRequest), arg0)
}

// ListKxChangesetsWithContext mocks base method
func (m *MockFinspaceAPI) ListKxChangesetsWithContext(arg0 context.Context, arg1 *finspace.ListKxChangesetsInput, arg2 ...request.Option) (*finspace.ListKxChangesetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKxChangesetsWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.ListKxChangesetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxChangesetsWithContext indicates an expected call of ListKxChangesetsWithContext
func (mr *MockFinspaceAPIMockRecorder) ListKxChangesetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxChangesetsWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxChangesetsWithContext), varargs...)
}

// ListKxClusterNodes mocks base method
func (m *MockFinspaceAPI) ListKxClusterNodes(arg0 *finspace.ListKxClusterNodesInput) (*finspace.ListKxClusterNodesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxClusterNodes", arg0)
	ret0, _ := ret[0].(*finspace.ListKxClusterNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxClusterNodes indicates an expected call of ListKxClusterNodes
func (mr *MockFinspaceAPIMockRecorder) ListKxClusterNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxClusterNodes", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxClusterNodes), arg0)
}

// ListKxClusterNodesPages mocks base method
func (m *MockFinspaceAPI) ListKxClusterNodesPages(arg0 *finspace.ListKxClusterNodesInput, arg1 func(*finspace.ListKxClusterNodesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxClusterNodesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKxClusterNodesPages indicates an expected call of ListKxClusterNodesPages
func (mr *MockFinspaceAPIMockRecorder) ListKxClusterNodesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxClusterNodesPages", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxClusterNodesPages), arg0, arg1)
}

// ListKxClusterNodesPagesWithContext mocks base method
func (m *MockFinspaceAPI) ListKxClusterNodesPagesWithContext(arg0 context.Context, arg1 *finspace.ListKxClusterNodesInput, arg2 func(*finspace.ListKxClusterNodesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKxClusterNodesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKxClusterNodesPagesWithContext indicates an expected call of ListKxClusterNodesPagesWithContext
func (mr *MockFinspaceAPIMockRecorder) ListKxClusterNodesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxClusterNodesPagesWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxClusterNodesPagesWithContext), varargs...)
}

// ListKxClusterNodesRequest mocks base method
func (m *MockFinspaceAPI) ListKxClusterNodesRequest(arg0 *finspace.ListKxClusterNodesInput) (*request.Request, *finspace.ListKxClusterNodesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxClusterNodesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.ListKxClusterNodesOutput)
	return ret0, ret1
}

// ListKxClusterNodesRequest indicates an expected call of ListKxClusterNodesRequest
func (mr *MockFinspaceAPIMockRecorder) ListKxClusterNodesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxClusterNodesRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxClusterNodesRequest), arg0)
}

// ListKxClusterNodesWithContext mocks base method
func (m *MockFinspaceAPI) ListKxClusterNodesWithContext(arg0 context.Context, arg1 *finspace.ListKxClusterNodesInput, arg2 ...request.Option) (*finspace.ListKxClusterNodesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKxClusterNodesWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.ListKxClusterNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxClusterNodesWithContext indicates an expected call of ListKxClusterNodesWithContext
func (mr *MockFinspaceAPIMockRecorder) ListKxClusterNodesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxClusterNodesWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxClusterNodesWithContext), varargs...)
}

// ListKxClusters mocks base method
func (m *MockFinspaceAPI) ListKxClusters(arg0 *finspace.ListKxClustersInput) (*finspace.ListKxClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxClusters", arg0)
	ret0, _ := ret[0].(*finspace.ListKxClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxClusters indicates an expected call of ListKxClusters
func (mr *MockFinspaceAPIMockRecorder) ListKxClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxClusters", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxClusters), arg0)
}

// ListKxClustersRequest mocks base method
func (m *MockFinspaceAPI) ListKxClustersRequest(arg0 *finspace.ListKxClustersInput) (*request.Request, *finspace.ListKxClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.ListKxClustersOutput)
	return ret0, ret1
}

// ListKxClustersRequest indicates an expected call of ListKxClustersRequest
func (mr *MockFinspaceAPIMockRecorder) ListKxClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxClustersRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxClustersRequest), arg0)
}

// ListKxClustersWithContext mocks base method
func (m *MockFinspaceAPI) ListKxClustersWithContext(arg0 context.Context, arg1 *finspace.ListKxClustersInput, arg2 ...request.Option) (*finspace.ListKxClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKxClustersWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.ListKxClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxClustersWithContext indicates an expected call of ListKxClustersWithContext
func (mr *MockFinspaceAPIMockRecorder) ListKxClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxClustersWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxClustersWithContext), varargs...)
}

// ListKxDatabases mocks base method
func (m *MockFinspaceAPI) ListKxDatabases(arg0 *finspace.ListKxDatabasesInput) (*finspace.ListKxDatabasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxDatabases", arg0)
	ret0, _ := ret[0].(*finspace.ListKxDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxDatabases indicates an expected call of ListKxDatabases
func (mr *MockFinspaceAPIMockRecorder) ListKxDatabases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxDatabases", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxDatabases), arg0)
}

// ListKxDatabasesPages mocks base method
func (m *MockFinspaceAPI) ListKxDatabasesPages(arg0 *finspace.ListKxDatabasesInput, arg1 func(*finspace.ListKxDatabasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxDatabasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKxDatabasesPages indicates an expected call of ListKxDatabasesPages
func (mr *MockFinspaceAPIMockRecorder) ListKxDatabasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxDatabasesPages", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxDatabasesPages), arg0, arg1)
}

// ListKxDatabasesPagesWithContext mocks base method
func (m *MockFinspaceAPI) ListKxDatabasesPagesWithContext(arg0 context.Context, arg1 *finspace.ListKxDatabasesInput, arg2 func(*finspace.ListKxDatabasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKxDatabasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKxDatabasesPagesWithContext indicates an expected call of ListKxDatabasesPagesWithContext
func (mr *MockFinspaceAPIMockRecorder) ListKxDatabasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxDatabasesPagesWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxDatabasesPagesWithContext), varargs...)
}

// ListKxDatabasesRequest mocks base method
func (m *MockFinspaceAPI) ListKxDatabasesRequest(arg0 *finspace.ListKxDatabasesInput) (*request.Request, *finspace.ListKxDatabasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxDatabasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.ListKxDatabasesOutput)
	return ret0, ret1
}

// ListKxDatabasesRequest indicates an expected call of ListKxDatabasesRequest
func (mr *MockFinspaceAPIMockRecorder) ListKxDatabasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxDatabasesRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxDatabasesRequest), arg0)
}

// ListKxDatabasesWithContext mocks base method
func (m *MockFinspaceAPI) ListKxDatabasesWithContext(arg0 context.Context, arg1 *finspace.ListKxDatabasesInput, arg2 ...request.Option) (*finspace.ListKxDatabasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKxDatabasesWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.ListKxDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxDatabasesWithContext indicates an expected call of ListKxDatabasesWithContext
func (mr *MockFinspaceAPIMockRecorder) ListKxDatabasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxDatabasesWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxDatabasesWithContext), varargs...)
}

// ListKxEnvironments mocks base method
func (m *MockFinspaceAPI) ListKxEnvironments(arg0 *finspace.ListKxEnvironmentsInput) (*finspace.ListKxEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxEnvironments", arg0)
	ret0, _ := ret[0].(*finspace.ListKxEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxEnvironments indicates an expected call of ListKxEnvironments
func (mr *MockFinspaceAPIMockRecorder) ListKxEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxEnvironments", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxEnvironments), arg0)
}

// ListKxEnvironmentsPages mocks base method
func (m *MockFinspaceAPI) ListKxEnvironmentsPages(arg0 *finspace.ListKxEnvironmentsInput, arg1 func(*finspace.ListKxEnvironmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxEnvironmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKxEnvironmentsPages indicates an expected call of ListKxEnvironmentsPages
func (mr *MockFinspaceAPIMockRecorder) ListKxEnvironmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxEnvironmentsPages", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxEnvironmentsPages), arg0, arg1)
}

// ListKxEnvironmentsPagesWithContext mocks base method
func (m *MockFinspaceAPI) ListKxEnvironmentsPagesWithContext(arg0 context.Context, arg1 *finspace.ListKxEnvironmentsInput, arg2 func(*finspace.ListKxEnvironmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKxEnvironmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKxEnvironmentsPagesWithContext indicates an expected call of ListKxEnvironmentsPagesWithContext
func (mr *MockFinspaceAPIMockRecorder) ListKxEnvironmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxEnvironmentsPagesWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxEnvironmentsPagesWithContext), varargs...)
}

// ListKxEnvironmentsRequest mocks base method
func (m *MockFinspaceAPI) ListKxEnvironmentsRequest(arg0 *finspace.ListKxEnvironmentsInput) (*request.Request, *finspace.ListKxEnvironmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.ListKxEnvironmentsOutput)
	return ret0, ret1
}

// ListKxEnvironmentsRequest indicates an expected call of ListKxEnvironmentsRequest
func (mr *MockFinspaceAPIMockRecorder) ListKxEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxEnvironmentsRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxEnvironmentsRequest), arg0)
}

// ListKxEnvironmentsWithContext mocks base method
func (m *MockFinspaceAPI) ListKxEnvironmentsWithContext(arg0 context.Context, arg1 *finspace.ListKxEnvironmentsInput, arg2 ...request.Option) (*finspace.ListKxEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKxEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.ListKxEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxEnvironmentsWithContext indicates an expected call of ListKxEnvironmentsWithContext
func (mr *MockFinspaceAPIMockRecorder) ListKxEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxEnvironmentsWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxEnvironmentsWithContext), varargs...)
}

// ListKxUsers mocks base method
func (m *MockFinspaceAPI) ListKxUsers(arg0 *finspace.ListKxUsersInput) (*finspace.ListKxUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxUsers", arg0)
	ret0, _ := ret[0].(*finspace.ListKxUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxUsers indicates an expected call of ListKxUsers
func (mr *MockFinspaceAPIMockRecorder) ListKxUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxUsers", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxUsers), arg0)
}

// ListKxUsersRequest mocks base method
func (m *MockFinspaceAPI) ListKxUsersRequest(arg0 *finspace.ListKxUsersInput) (*request.Request, *finspace.ListKxUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKxUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.ListKxUsersOutput)
	return ret0, ret1
}

// ListKxUsersRequest indicates an expected call of ListKxUsersRequest
func (mr *MockFinspaceAPIMockRecorder) ListKxUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxUsersRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxUsersRequest), arg0)
}

// ListKxUsersWithContext mocks base method
func (m *MockFinspaceAPI) ListKxUsersWithContext(arg0 context.Context, arg1 *finspace.ListKxUsersInput, arg2 ...request.Option) (*finspace.ListKxUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKxUsersWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.ListKxUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKxUsersWithContext indicates an expected call of ListKxUsersWithContext
func (mr *MockFinspaceAPIMockRecorder) ListKxUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKxUsersWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListKxUsersWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockFinspaceAPI) ListTagsForResource(arg0 *finspace.ListTagsForResourceInput) (*finspace.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*finspace.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockFinspaceAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockFinspaceAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockFinspaceAPI) ListTagsForResourceRequest(arg0 *finspace.ListTagsForResourceInput) (*request.Request, *finspace.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockFinspaceAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockFinspaceAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *finspace.ListTagsForResourceInput, arg2 ...request.Option) (*finspace.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockFinspaceAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockFinspaceAPI) TagResource(arg0 *finspace.TagResourceInput) (*finspace.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*finspace.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockFinspaceAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockFinspaceAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockFinspaceAPI) TagResourceRequest(arg0 *finspace.TagResourceInput) (*request.Request, *finspace.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockFinspaceAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockFinspaceAPI) TagResourceWithContext(arg0 context.Context, arg1 *finspace.TagResourceInput, arg2 ...request.Option) (*finspace.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockFinspaceAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockFinspaceAPI) UntagResource(arg0 *finspace.UntagResourceInput) (*finspace.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*finspace.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockFinspaceAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockFinspaceAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockFinspaceAPI) UntagResourceRequest(arg0 *finspace.UntagResourceInput) (*request.Request, *finspace.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockFinspaceAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockFinspaceAPI) UntagResourceWithContext(arg0 context.Context, arg1 *finspace.UntagResourceInput, arg2 ...request.Option) (*finspace.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockFinspaceAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateEnvironment mocks base method
func (m *MockFinspaceAPI) UpdateEnvironment(arg0 *finspace.UpdateEnvironmentInput) (*finspace.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0)
	ret0, _ := ret[0].(*finspace.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockFinspaceAPIMockRecorder) UpdateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateEnvironment), arg0)
}

// UpdateEnvironmentRequest mocks base method
func (m *MockFinspaceAPI) UpdateEnvironmentRequest(arg0 *finspace.UpdateEnvironmentInput) (*request.Request, *finspace.UpdateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.UpdateEnvironmentOutput)
	return ret0, ret1
}

// UpdateEnvironmentRequest indicates an expected call of UpdateEnvironmentRequest
func (mr *MockFinspaceAPIMockRecorder) UpdateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateEnvironmentRequest), arg0)
}

// UpdateEnvironmentWithContext mocks base method
func (m *MockFinspaceAPI) UpdateEnvironmentWithContext(arg0 context.Context, arg1 *finspace.UpdateEnvironmentInput, arg2 ...request.Option) (*finspace.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentWithContext indicates an expected call of UpdateEnvironmentWithContext
func (mr *MockFinspaceAPIMockRecorder) UpdateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateEnvironmentWithContext), varargs...)
}

// UpdateKxClusterDatabases mocks base method
func (m *MockFinspaceAPI) UpdateKxClusterDatabases(arg0 *finspace.UpdateKxClusterDatabasesInput) (*finspace.UpdateKxClusterDatabasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKxClusterDatabases", arg0)
	ret0, _ := ret[0].(*finspace.UpdateKxClusterDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKxClusterDatabases indicates an expected call of UpdateKxClusterDatabases
func (mr *MockFinspaceAPIMockRecorder) UpdateKxClusterDatabases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxClusterDatabases", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxClusterDatabases), arg0)
}

// UpdateKxClusterDatabasesRequest mocks base method
func (m *MockFinspaceAPI) UpdateKxClusterDatabasesRequest(arg0 *finspace.UpdateKxClusterDatabasesInput) (*request.Request, *finspace.UpdateKxClusterDatabasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKxClusterDatabasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.UpdateKxClusterDatabasesOutput)
	return ret0, ret1
}

// UpdateKxClusterDatabasesRequest indicates an expected call of UpdateKxClusterDatabasesRequest
func (mr *MockFinspaceAPIMockRecorder) UpdateKxClusterDatabasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxClusterDatabasesRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxClusterDatabasesRequest), arg0)
}

// UpdateKxClusterDatabasesWithContext mocks base method
func (m *MockFinspaceAPI) UpdateKxClusterDatabasesWithContext(arg0 context.Context, arg1 *finspace.UpdateKxClusterDatabasesInput, arg2 ...request.Option) (*finspace.UpdateKxClusterDatabasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKxClusterDatabasesWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.UpdateKxClusterDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKxClusterDatabasesWithContext indicates an expected call of UpdateKxClusterDatabasesWithContext
func (mr *MockFinspaceAPIMockRecorder) UpdateKxClusterDatabasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxClusterDatabasesWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxClusterDatabasesWithContext), varargs...)
}

// UpdateKxDatabase mocks base method
func (m *MockFinspaceAPI) UpdateKxDatabase(arg0 *finspace.UpdateKxDatabaseInput) (*finspace.UpdateKxDatabaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKxDatabase", arg0)
	ret0, _ := ret[0].(*finspace.UpdateKxDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKxDatabase indicates an expected call of UpdateKxDatabase
func (mr *MockFinspaceAPIMockRecorder) UpdateKxDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxDatabase", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxDatabase), arg0)
}

// UpdateKxDatabaseRequest mocks base method
func (m *MockFinspaceAPI) UpdateKxDatabaseRequest(arg0 *finspace.UpdateKxDatabaseInput) (*request.Request, *finspace.UpdateKxDatabaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKxDatabaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.UpdateKxDatabaseOutput)
	return ret0, ret1
}

// UpdateKxDatabaseRequest indicates an expected call of UpdateKxDatabaseRequest
func (mr *MockFinspaceAPIMockRecorder) UpdateKxDatabaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxDatabaseRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxDatabaseRequest), arg0)
}

// UpdateKxDatabaseWithContext mocks base method
func (m *MockFinspaceAPI) UpdateKxDatabaseWithContext(arg0 context.Context, arg1 *finspace.UpdateKxDatabaseInput, arg2 ...request.Option) (*finspace.UpdateKxDatabaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKxDatabaseWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.UpdateKxDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKxDatabaseWithContext indicates an expected call of UpdateKxDatabaseWithContext
func (mr *MockFinspaceAPIMockRecorder) UpdateKxDatabaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxDatabaseWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxDatabaseWithContext), varargs...)
}

// UpdateKxEnvironment mocks base method
func (m *MockFinspaceAPI) UpdateKxEnvironment(arg0 *finspace.UpdateKxEnvironmentInput) (*finspace.UpdateKxEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKxEnvironment", arg0)
	ret0, _ := ret[0].(*finspace.UpdateKxEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKxEnvironment indicates an expected call of UpdateKxEnvironment
func (mr *MockFinspaceAPIMockRecorder) UpdateKxEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxEnvironment", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxEnvironment), arg0)
}

// UpdateKxEnvironmentNetwork mocks base method
func (m *MockFinspaceAPI) UpdateKxEnvironmentNetwork(arg0 *finspace.UpdateKxEnvironmentNetworkInput) (*finspace.UpdateKxEnvironmentNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKxEnvironmentNetwork", arg0)
	ret0, _ := ret[0].(*finspace.UpdateKxEnvironmentNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKxEnvironmentNetwork indicates an expected call of UpdateKxEnvironmentNetwork
func (mr *MockFinspaceAPIMockRecorder) UpdateKxEnvironmentNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxEnvironmentNetwork", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxEnvironmentNetwork), arg0)
}

// UpdateKxEnvironmentNetworkRequest mocks base method
func (m *MockFinspaceAPI) UpdateKxEnvironmentNetworkRequest(arg0 *finspace.UpdateKxEnvironmentNetworkInput) (*request.Request, *finspace.UpdateKxEnvironmentNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKxEnvironmentNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.UpdateKxEnvironmentNetworkOutput)
	return ret0, ret1
}

// UpdateKxEnvironmentNetworkRequest indicates an expected call of UpdateKxEnvironmentNetworkRequest
func (mr *MockFinspaceAPIMockRecorder) UpdateKxEnvironmentNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxEnvironmentNetworkRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxEnvironmentNetworkRequest), arg0)
}

// UpdateKxEnvironmentNetworkWithContext mocks base method
func (m *MockFinspaceAPI) UpdateKxEnvironmentNetworkWithContext(arg0 context.Context, arg1 *finspace.UpdateKxEnvironmentNetworkInput, arg2 ...request.Option) (*finspace.UpdateKxEnvironmentNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKxEnvironmentNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.UpdateKxEnvironmentNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKxEnvironmentNetworkWithContext indicates an expected call of UpdateKxEnvironmentNetworkWithContext
func (mr *MockFinspaceAPIMockRecorder) UpdateKxEnvironmentNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxEnvironmentNetworkWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxEnvironmentNetworkWithContext), varargs...)
}

// UpdateKxEnvironmentRequest mocks base method
func (m *MockFinspaceAPI) UpdateKxEnvironmentRequest(arg0 *finspace.UpdateKxEnvironmentInput) (*request.Request, *finspace.UpdateKxEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKxEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.UpdateKxEnvironmentOutput)
	return ret0, ret1
}

// UpdateKxEnvironmentRequest indicates an expected call of UpdateKxEnvironmentRequest
func (mr *MockFinspaceAPIMockRecorder) UpdateKxEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxEnvironmentRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxEnvironmentRequest), arg0)
}

// UpdateKxEnvironmentWithContext mocks base method
func (m *MockFinspaceAPI) UpdateKxEnvironmentWithContext(arg0 context.Context, arg1 *finspace.UpdateKxEnvironmentInput, arg2 ...request.Option) (*finspace.UpdateKxEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKxEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.UpdateKxEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKxEnvironmentWithContext indicates an expected call of UpdateKxEnvironmentWithContext
func (mr *MockFinspaceAPIMockRecorder) UpdateKxEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxEnvironmentWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxEnvironmentWithContext), varargs...)
}

// UpdateKxUser mocks base method
func (m *MockFinspaceAPI) UpdateKxUser(arg0 *finspace.UpdateKxUserInput) (*finspace.UpdateKxUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKxUser", arg0)
	ret0, _ := ret[0].(*finspace.UpdateKxUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKxUser indicates an expected call of UpdateKxUser
func (mr *MockFinspaceAPIMockRecorder) UpdateKxUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxUser", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxUser), arg0)
}

// UpdateKxUserRequest mocks base method
func (m *MockFinspaceAPI) UpdateKxUserRequest(arg0 *finspace.UpdateKxUserInput) (*request.Request, *finspace.UpdateKxUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKxUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspace.UpdateKxUserOutput)
	return ret0, ret1
}

// UpdateKxUserRequest indicates an expected call of UpdateKxUserRequest
func (mr *MockFinspaceAPIMockRecorder) UpdateKxUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxUserRequest", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxUserRequest), arg0)
}

// UpdateKxUserWithContext mocks base method
func (m *MockFinspaceAPI) UpdateKxUserWithContext(arg0 context.Context, arg1 *finspace.UpdateKxUserInput, arg2 ...request.Option) (*finspace.UpdateKxUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKxUserWithContext", varargs...)
	ret0, _ := ret[0].(*finspace.UpdateKxUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKxUserWithContext indicates an expected call of UpdateKxUserWithContext
func (mr *MockFinspaceAPIMockRecorder) UpdateKxUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKxUserWithContext", reflect.TypeOf((*MockFinspaceAPI)(nil).UpdateKxUserWithContext), varargs...)
}
