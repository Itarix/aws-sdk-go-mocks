// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/connectcases/connectcasesiface (interfaces: ConnectCasesAPI)

// Package connectcasesmock is a generated GoMock package.
package connectcasesmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	connectcases "github.com/aws/aws-sdk-go/service/connectcases"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConnectCasesAPI is a mock of ConnectCasesAPI interface
type MockConnectCasesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConnectCasesAPIMockRecorder
}

// MockConnectCasesAPIMockRecorder is the mock recorder for MockConnectCasesAPI
type MockConnectCasesAPIMockRecorder struct {
	mock *MockConnectCasesAPI
}

// NewMockConnectCasesAPI creates a new mock instance
func NewMockConnectCasesAPI(ctrl *gomock.Controller) *MockConnectCasesAPI {
	mock := &MockConnectCasesAPI{ctrl: ctrl}
	mock.recorder = &MockConnectCasesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectCasesAPI) EXPECT() *MockConnectCasesAPIMockRecorder {
	return m.recorder
}

// BatchGetField mocks base method
func (m *MockConnectCasesAPI) BatchGetField(arg0 *connectcases.BatchGetFieldInput) (*connectcases.BatchGetFieldOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetField", arg0)
	ret0, _ := ret[0].(*connectcases.BatchGetFieldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetField indicates an expected call of BatchGetField
func (mr *MockConnectCasesAPIMockRecorder) BatchGetField(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetField", reflect.TypeOf((*MockConnectCasesAPI)(nil).BatchGetField), arg0)
}

// BatchGetFieldRequest mocks base method
func (m *MockConnectCasesAPI) BatchGetFieldRequest(arg0 *connectcases.BatchGetFieldInput) (*request.Request, *connectcases.BatchGetFieldOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFieldRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.BatchGetFieldOutput)
	return ret0, ret1
}

// BatchGetFieldRequest indicates an expected call of BatchGetFieldRequest
func (mr *MockConnectCasesAPIMockRecorder) BatchGetFieldRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFieldRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).BatchGetFieldRequest), arg0)
}

// BatchGetFieldWithContext mocks base method
func (m *MockConnectCasesAPI) BatchGetFieldWithContext(arg0 context.Context, arg1 *connectcases.BatchGetFieldInput, arg2 ...request.Option) (*connectcases.BatchGetFieldOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetFieldWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.BatchGetFieldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFieldWithContext indicates an expected call of BatchGetFieldWithContext
func (mr *MockConnectCasesAPIMockRecorder) BatchGetFieldWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFieldWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).BatchGetFieldWithContext), varargs...)
}

// BatchPutFieldOptions mocks base method
func (m *MockConnectCasesAPI) BatchPutFieldOptions(arg0 *connectcases.BatchPutFieldOptionsInput) (*connectcases.BatchPutFieldOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutFieldOptions", arg0)
	ret0, _ := ret[0].(*connectcases.BatchPutFieldOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutFieldOptions indicates an expected call of BatchPutFieldOptions
func (mr *MockConnectCasesAPIMockRecorder) BatchPutFieldOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutFieldOptions", reflect.TypeOf((*MockConnectCasesAPI)(nil).BatchPutFieldOptions), arg0)
}

// BatchPutFieldOptionsRequest mocks base method
func (m *MockConnectCasesAPI) BatchPutFieldOptionsRequest(arg0 *connectcases.BatchPutFieldOptionsInput) (*request.Request, *connectcases.BatchPutFieldOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutFieldOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.BatchPutFieldOptionsOutput)
	return ret0, ret1
}

// BatchPutFieldOptionsRequest indicates an expected call of BatchPutFieldOptionsRequest
func (mr *MockConnectCasesAPIMockRecorder) BatchPutFieldOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutFieldOptionsRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).BatchPutFieldOptionsRequest), arg0)
}

// BatchPutFieldOptionsWithContext mocks base method
func (m *MockConnectCasesAPI) BatchPutFieldOptionsWithContext(arg0 context.Context, arg1 *connectcases.BatchPutFieldOptionsInput, arg2 ...request.Option) (*connectcases.BatchPutFieldOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchPutFieldOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.BatchPutFieldOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutFieldOptionsWithContext indicates an expected call of BatchPutFieldOptionsWithContext
func (mr *MockConnectCasesAPIMockRecorder) BatchPutFieldOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutFieldOptionsWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).BatchPutFieldOptionsWithContext), varargs...)
}

// CreateCase mocks base method
func (m *MockConnectCasesAPI) CreateCase(arg0 *connectcases.CreateCaseInput) (*connectcases.CreateCaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCase", arg0)
	ret0, _ := ret[0].(*connectcases.CreateCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCase indicates an expected call of CreateCase
func (mr *MockConnectCasesAPIMockRecorder) CreateCase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCase", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateCase), arg0)
}

// CreateCaseRequest mocks base method
func (m *MockConnectCasesAPI) CreateCaseRequest(arg0 *connectcases.CreateCaseInput) (*request.Request, *connectcases.CreateCaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.CreateCaseOutput)
	return ret0, ret1
}

// CreateCaseRequest indicates an expected call of CreateCaseRequest
func (mr *MockConnectCasesAPIMockRecorder) CreateCaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCaseRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateCaseRequest), arg0)
}

// CreateCaseWithContext mocks base method
func (m *MockConnectCasesAPI) CreateCaseWithContext(arg0 context.Context, arg1 *connectcases.CreateCaseInput, arg2 ...request.Option) (*connectcases.CreateCaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCaseWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.CreateCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCaseWithContext indicates an expected call of CreateCaseWithContext
func (mr *MockConnectCasesAPIMockRecorder) CreateCaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCaseWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateCaseWithContext), varargs...)
}

// CreateDomain mocks base method
func (m *MockConnectCasesAPI) CreateDomain(arg0 *connectcases.CreateDomainInput) (*connectcases.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0)
	ret0, _ := ret[0].(*connectcases.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain
func (mr *MockConnectCasesAPIMockRecorder) CreateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateDomain), arg0)
}

// CreateDomainRequest mocks base method
func (m *MockConnectCasesAPI) CreateDomainRequest(arg0 *connectcases.CreateDomainInput) (*request.Request, *connectcases.CreateDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.CreateDomainOutput)
	return ret0, ret1
}

// CreateDomainRequest indicates an expected call of CreateDomainRequest
func (mr *MockConnectCasesAPIMockRecorder) CreateDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateDomainRequest), arg0)
}

// CreateDomainWithContext mocks base method
func (m *MockConnectCasesAPI) CreateDomainWithContext(arg0 context.Context, arg1 *connectcases.CreateDomainInput, arg2 ...request.Option) (*connectcases.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWithContext indicates an expected call of CreateDomainWithContext
func (mr *MockConnectCasesAPIMockRecorder) CreateDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateDomainWithContext), varargs...)
}

// CreateField mocks base method
func (m *MockConnectCasesAPI) CreateField(arg0 *connectcases.CreateFieldInput) (*connectcases.CreateFieldOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateField", arg0)
	ret0, _ := ret[0].(*connectcases.CreateFieldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateField indicates an expected call of CreateField
func (mr *MockConnectCasesAPIMockRecorder) CreateField(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateField", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateField), arg0)
}

// CreateFieldRequest mocks base method
func (m *MockConnectCasesAPI) CreateFieldRequest(arg0 *connectcases.CreateFieldInput) (*request.Request, *connectcases.CreateFieldOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFieldRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.CreateFieldOutput)
	return ret0, ret1
}

// CreateFieldRequest indicates an expected call of CreateFieldRequest
func (mr *MockConnectCasesAPIMockRecorder) CreateFieldRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateFieldRequest), arg0)
}

// CreateFieldWithContext mocks base method
func (m *MockConnectCasesAPI) CreateFieldWithContext(arg0 context.Context, arg1 *connectcases.CreateFieldInput, arg2 ...request.Option) (*connectcases.CreateFieldOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFieldWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.CreateFieldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFieldWithContext indicates an expected call of CreateFieldWithContext
func (mr *MockConnectCasesAPIMockRecorder) CreateFieldWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateFieldWithContext), varargs...)
}

// CreateLayout mocks base method
func (m *MockConnectCasesAPI) CreateLayout(arg0 *connectcases.CreateLayoutInput) (*connectcases.CreateLayoutOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLayout", arg0)
	ret0, _ := ret[0].(*connectcases.CreateLayoutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLayout indicates an expected call of CreateLayout
func (mr *MockConnectCasesAPIMockRecorder) CreateLayout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLayout", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateLayout), arg0)
}

// CreateLayoutRequest mocks base method
func (m *MockConnectCasesAPI) CreateLayoutRequest(arg0 *connectcases.CreateLayoutInput) (*request.Request, *connectcases.CreateLayoutOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLayoutRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.CreateLayoutOutput)
	return ret0, ret1
}

// CreateLayoutRequest indicates an expected call of CreateLayoutRequest
func (mr *MockConnectCasesAPIMockRecorder) CreateLayoutRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLayoutRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateLayoutRequest), arg0)
}

// CreateLayoutWithContext mocks base method
func (m *MockConnectCasesAPI) CreateLayoutWithContext(arg0 context.Context, arg1 *connectcases.CreateLayoutInput, arg2 ...request.Option) (*connectcases.CreateLayoutOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLayoutWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.CreateLayoutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLayoutWithContext indicates an expected call of CreateLayoutWithContext
func (mr *MockConnectCasesAPIMockRecorder) CreateLayoutWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLayoutWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateLayoutWithContext), varargs...)
}

// CreateRelatedItem mocks base method
func (m *MockConnectCasesAPI) CreateRelatedItem(arg0 *connectcases.CreateRelatedItemInput) (*connectcases.CreateRelatedItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelatedItem", arg0)
	ret0, _ := ret[0].(*connectcases.CreateRelatedItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRelatedItem indicates an expected call of CreateRelatedItem
func (mr *MockConnectCasesAPIMockRecorder) CreateRelatedItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelatedItem", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateRelatedItem), arg0)
}

// CreateRelatedItemRequest mocks base method
func (m *MockConnectCasesAPI) CreateRelatedItemRequest(arg0 *connectcases.CreateRelatedItemInput) (*request.Request, *connectcases.CreateRelatedItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelatedItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.CreateRelatedItemOutput)
	return ret0, ret1
}

// CreateRelatedItemRequest indicates an expected call of CreateRelatedItemRequest
func (mr *MockConnectCasesAPIMockRecorder) CreateRelatedItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelatedItemRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateRelatedItemRequest), arg0)
}

// CreateRelatedItemWithContext mocks base method
func (m *MockConnectCasesAPI) CreateRelatedItemWithContext(arg0 context.Context, arg1 *connectcases.CreateRelatedItemInput, arg2 ...request.Option) (*connectcases.CreateRelatedItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRelatedItemWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.CreateRelatedItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRelatedItemWithContext indicates an expected call of CreateRelatedItemWithContext
func (mr *MockConnectCasesAPIMockRecorder) CreateRelatedItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelatedItemWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateRelatedItemWithContext), varargs...)
}

// CreateTemplate mocks base method
func (m *MockConnectCasesAPI) CreateTemplate(arg0 *connectcases.CreateTemplateInput) (*connectcases.CreateTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", arg0)
	ret0, _ := ret[0].(*connectcases.CreateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate
func (mr *MockConnectCasesAPIMockRecorder) CreateTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateTemplate), arg0)
}

// CreateTemplateRequest mocks base method
func (m *MockConnectCasesAPI) CreateTemplateRequest(arg0 *connectcases.CreateTemplateInput) (*request.Request, *connectcases.CreateTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.CreateTemplateOutput)
	return ret0, ret1
}

// CreateTemplateRequest indicates an expected call of CreateTemplateRequest
func (mr *MockConnectCasesAPIMockRecorder) CreateTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateTemplateRequest), arg0)
}

// CreateTemplateWithContext mocks base method
func (m *MockConnectCasesAPI) CreateTemplateWithContext(arg0 context.Context, arg1 *connectcases.CreateTemplateInput, arg2 ...request.Option) (*connectcases.CreateTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.CreateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplateWithContext indicates an expected call of CreateTemplateWithContext
func (mr *MockConnectCasesAPIMockRecorder) CreateTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).CreateTemplateWithContext), varargs...)
}

// GetCase mocks base method
func (m *MockConnectCasesAPI) GetCase(arg0 *connectcases.GetCaseInput) (*connectcases.GetCaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCase", arg0)
	ret0, _ := ret[0].(*connectcases.GetCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCase indicates an expected call of GetCase
func (mr *MockConnectCasesAPIMockRecorder) GetCase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCase", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetCase), arg0)
}

// GetCaseEventConfiguration mocks base method
func (m *MockConnectCasesAPI) GetCaseEventConfiguration(arg0 *connectcases.GetCaseEventConfigurationInput) (*connectcases.GetCaseEventConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCaseEventConfiguration", arg0)
	ret0, _ := ret[0].(*connectcases.GetCaseEventConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCaseEventConfiguration indicates an expected call of GetCaseEventConfiguration
func (mr *MockConnectCasesAPIMockRecorder) GetCaseEventConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaseEventConfiguration", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetCaseEventConfiguration), arg0)
}

// GetCaseEventConfigurationRequest mocks base method
func (m *MockConnectCasesAPI) GetCaseEventConfigurationRequest(arg0 *connectcases.GetCaseEventConfigurationInput) (*request.Request, *connectcases.GetCaseEventConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCaseEventConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.GetCaseEventConfigurationOutput)
	return ret0, ret1
}

// GetCaseEventConfigurationRequest indicates an expected call of GetCaseEventConfigurationRequest
func (mr *MockConnectCasesAPIMockRecorder) GetCaseEventConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaseEventConfigurationRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetCaseEventConfigurationRequest), arg0)
}

// GetCaseEventConfigurationWithContext mocks base method
func (m *MockConnectCasesAPI) GetCaseEventConfigurationWithContext(arg0 context.Context, arg1 *connectcases.GetCaseEventConfigurationInput, arg2 ...request.Option) (*connectcases.GetCaseEventConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCaseEventConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.GetCaseEventConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCaseEventConfigurationWithContext indicates an expected call of GetCaseEventConfigurationWithContext
func (mr *MockConnectCasesAPIMockRecorder) GetCaseEventConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaseEventConfigurationWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetCaseEventConfigurationWithContext), varargs...)
}

// GetCasePages mocks base method
func (m *MockConnectCasesAPI) GetCasePages(arg0 *connectcases.GetCaseInput, arg1 func(*connectcases.GetCaseOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCasePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCasePages indicates an expected call of GetCasePages
func (mr *MockConnectCasesAPIMockRecorder) GetCasePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCasePages", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetCasePages), arg0, arg1)
}

// GetCasePagesWithContext mocks base method
func (m *MockConnectCasesAPI) GetCasePagesWithContext(arg0 context.Context, arg1 *connectcases.GetCaseInput, arg2 func(*connectcases.GetCaseOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCasePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCasePagesWithContext indicates an expected call of GetCasePagesWithContext
func (mr *MockConnectCasesAPIMockRecorder) GetCasePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCasePagesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetCasePagesWithContext), varargs...)
}

// GetCaseRequest mocks base method
func (m *MockConnectCasesAPI) GetCaseRequest(arg0 *connectcases.GetCaseInput) (*request.Request, *connectcases.GetCaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.GetCaseOutput)
	return ret0, ret1
}

// GetCaseRequest indicates an expected call of GetCaseRequest
func (mr *MockConnectCasesAPIMockRecorder) GetCaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaseRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetCaseRequest), arg0)
}

// GetCaseWithContext mocks base method
func (m *MockConnectCasesAPI) GetCaseWithContext(arg0 context.Context, arg1 *connectcases.GetCaseInput, arg2 ...request.Option) (*connectcases.GetCaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCaseWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.GetCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCaseWithContext indicates an expected call of GetCaseWithContext
func (mr *MockConnectCasesAPIMockRecorder) GetCaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaseWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetCaseWithContext), varargs...)
}

// GetDomain mocks base method
func (m *MockConnectCasesAPI) GetDomain(arg0 *connectcases.GetDomainInput) (*connectcases.GetDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", arg0)
	ret0, _ := ret[0].(*connectcases.GetDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain
func (mr *MockConnectCasesAPIMockRecorder) GetDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetDomain), arg0)
}

// GetDomainRequest mocks base method
func (m *MockConnectCasesAPI) GetDomainRequest(arg0 *connectcases.GetDomainInput) (*request.Request, *connectcases.GetDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.GetDomainOutput)
	return ret0, ret1
}

// GetDomainRequest indicates an expected call of GetDomainRequest
func (mr *MockConnectCasesAPIMockRecorder) GetDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetDomainRequest), arg0)
}

// GetDomainWithContext mocks base method
func (m *MockConnectCasesAPI) GetDomainWithContext(arg0 context.Context, arg1 *connectcases.GetDomainInput, arg2 ...request.Option) (*connectcases.GetDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.GetDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWithContext indicates an expected call of GetDomainWithContext
func (mr *MockConnectCasesAPIMockRecorder) GetDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetDomainWithContext), varargs...)
}

// GetLayout mocks base method
func (m *MockConnectCasesAPI) GetLayout(arg0 *connectcases.GetLayoutInput) (*connectcases.GetLayoutOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayout", arg0)
	ret0, _ := ret[0].(*connectcases.GetLayoutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayout indicates an expected call of GetLayout
func (mr *MockConnectCasesAPIMockRecorder) GetLayout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayout", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetLayout), arg0)
}

// GetLayoutRequest mocks base method
func (m *MockConnectCasesAPI) GetLayoutRequest(arg0 *connectcases.GetLayoutInput) (*request.Request, *connectcases.GetLayoutOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayoutRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.GetLayoutOutput)
	return ret0, ret1
}

// GetLayoutRequest indicates an expected call of GetLayoutRequest
func (mr *MockConnectCasesAPIMockRecorder) GetLayoutRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayoutRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetLayoutRequest), arg0)
}

// GetLayoutWithContext mocks base method
func (m *MockConnectCasesAPI) GetLayoutWithContext(arg0 context.Context, arg1 *connectcases.GetLayoutInput, arg2 ...request.Option) (*connectcases.GetLayoutOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLayoutWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.GetLayoutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayoutWithContext indicates an expected call of GetLayoutWithContext
func (mr *MockConnectCasesAPIMockRecorder) GetLayoutWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayoutWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetLayoutWithContext), varargs...)
}

// GetTemplate mocks base method
func (m *MockConnectCasesAPI) GetTemplate(arg0 *connectcases.GetTemplateInput) (*connectcases.GetTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", arg0)
	ret0, _ := ret[0].(*connectcases.GetTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate
func (mr *MockConnectCasesAPIMockRecorder) GetTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetTemplate), arg0)
}

// GetTemplateRequest mocks base method
func (m *MockConnectCasesAPI) GetTemplateRequest(arg0 *connectcases.GetTemplateInput) (*request.Request, *connectcases.GetTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.GetTemplateOutput)
	return ret0, ret1
}

// GetTemplateRequest indicates an expected call of GetTemplateRequest
func (mr *MockConnectCasesAPIMockRecorder) GetTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetTemplateRequest), arg0)
}

// GetTemplateWithContext mocks base method
func (m *MockConnectCasesAPI) GetTemplateWithContext(arg0 context.Context, arg1 *connectcases.GetTemplateInput, arg2 ...request.Option) (*connectcases.GetTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.GetTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateWithContext indicates an expected call of GetTemplateWithContext
func (mr *MockConnectCasesAPIMockRecorder) GetTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).GetTemplateWithContext), varargs...)
}

// ListCasesForContact mocks base method
func (m *MockConnectCasesAPI) ListCasesForContact(arg0 *connectcases.ListCasesForContactInput) (*connectcases.ListCasesForContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCasesForContact", arg0)
	ret0, _ := ret[0].(*connectcases.ListCasesForContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCasesForContact indicates an expected call of ListCasesForContact
func (mr *MockConnectCasesAPIMockRecorder) ListCasesForContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCasesForContact", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListCasesForContact), arg0)
}

// ListCasesForContactPages mocks base method
func (m *MockConnectCasesAPI) ListCasesForContactPages(arg0 *connectcases.ListCasesForContactInput, arg1 func(*connectcases.ListCasesForContactOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCasesForContactPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCasesForContactPages indicates an expected call of ListCasesForContactPages
func (mr *MockConnectCasesAPIMockRecorder) ListCasesForContactPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCasesForContactPages", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListCasesForContactPages), arg0, arg1)
}

// ListCasesForContactPagesWithContext mocks base method
func (m *MockConnectCasesAPI) ListCasesForContactPagesWithContext(arg0 context.Context, arg1 *connectcases.ListCasesForContactInput, arg2 func(*connectcases.ListCasesForContactOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCasesForContactPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCasesForContactPagesWithContext indicates an expected call of ListCasesForContactPagesWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListCasesForContactPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCasesForContactPagesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListCasesForContactPagesWithContext), varargs...)
}

// ListCasesForContactRequest mocks base method
func (m *MockConnectCasesAPI) ListCasesForContactRequest(arg0 *connectcases.ListCasesForContactInput) (*request.Request, *connectcases.ListCasesForContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCasesForContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.ListCasesForContactOutput)
	return ret0, ret1
}

// ListCasesForContactRequest indicates an expected call of ListCasesForContactRequest
func (mr *MockConnectCasesAPIMockRecorder) ListCasesForContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCasesForContactRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListCasesForContactRequest), arg0)
}

// ListCasesForContactWithContext mocks base method
func (m *MockConnectCasesAPI) ListCasesForContactWithContext(arg0 context.Context, arg1 *connectcases.ListCasesForContactInput, arg2 ...request.Option) (*connectcases.ListCasesForContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCasesForContactWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.ListCasesForContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCasesForContactWithContext indicates an expected call of ListCasesForContactWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListCasesForContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCasesForContactWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListCasesForContactWithContext), varargs...)
}

// ListDomains mocks base method
func (m *MockConnectCasesAPI) ListDomains(arg0 *connectcases.ListDomainsInput) (*connectcases.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", arg0)
	ret0, _ := ret[0].(*connectcases.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains
func (mr *MockConnectCasesAPIMockRecorder) ListDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListDomains), arg0)
}

// ListDomainsPages mocks base method
func (m *MockConnectCasesAPI) ListDomainsPages(arg0 *connectcases.ListDomainsInput, arg1 func(*connectcases.ListDomainsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsPages indicates an expected call of ListDomainsPages
func (mr *MockConnectCasesAPIMockRecorder) ListDomainsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsPages", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListDomainsPages), arg0, arg1)
}

// ListDomainsPagesWithContext mocks base method
func (m *MockConnectCasesAPI) ListDomainsPagesWithContext(arg0 context.Context, arg1 *connectcases.ListDomainsInput, arg2 func(*connectcases.ListDomainsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsPagesWithContext indicates an expected call of ListDomainsPagesWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListDomainsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsPagesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListDomainsPagesWithContext), varargs...)
}

// ListDomainsRequest mocks base method
func (m *MockConnectCasesAPI) ListDomainsRequest(arg0 *connectcases.ListDomainsInput) (*request.Request, *connectcases.ListDomainsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.ListDomainsOutput)
	return ret0, ret1
}

// ListDomainsRequest indicates an expected call of ListDomainsRequest
func (mr *MockConnectCasesAPIMockRecorder) ListDomainsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListDomainsRequest), arg0)
}

// ListDomainsWithContext mocks base method
func (m *MockConnectCasesAPI) ListDomainsWithContext(arg0 context.Context, arg1 *connectcases.ListDomainsInput, arg2 ...request.Option) (*connectcases.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainsWithContext indicates an expected call of ListDomainsWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListDomainsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListDomainsWithContext), varargs...)
}

// ListFieldOptions mocks base method
func (m *MockConnectCasesAPI) ListFieldOptions(arg0 *connectcases.ListFieldOptionsInput) (*connectcases.ListFieldOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldOptions", arg0)
	ret0, _ := ret[0].(*connectcases.ListFieldOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldOptions indicates an expected call of ListFieldOptions
func (mr *MockConnectCasesAPIMockRecorder) ListFieldOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldOptions", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListFieldOptions), arg0)
}

// ListFieldOptionsPages mocks base method
func (m *MockConnectCasesAPI) ListFieldOptionsPages(arg0 *connectcases.ListFieldOptionsInput, arg1 func(*connectcases.ListFieldOptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldOptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFieldOptionsPages indicates an expected call of ListFieldOptionsPages
func (mr *MockConnectCasesAPIMockRecorder) ListFieldOptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldOptionsPages", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListFieldOptionsPages), arg0, arg1)
}

// ListFieldOptionsPagesWithContext mocks base method
func (m *MockConnectCasesAPI) ListFieldOptionsPagesWithContext(arg0 context.Context, arg1 *connectcases.ListFieldOptionsInput, arg2 func(*connectcases.ListFieldOptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFieldOptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFieldOptionsPagesWithContext indicates an expected call of ListFieldOptionsPagesWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListFieldOptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldOptionsPagesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListFieldOptionsPagesWithContext), varargs...)
}

// ListFieldOptionsRequest mocks base method
func (m *MockConnectCasesAPI) ListFieldOptionsRequest(arg0 *connectcases.ListFieldOptionsInput) (*request.Request, *connectcases.ListFieldOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.ListFieldOptionsOutput)
	return ret0, ret1
}

// ListFieldOptionsRequest indicates an expected call of ListFieldOptionsRequest
func (mr *MockConnectCasesAPIMockRecorder) ListFieldOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldOptionsRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListFieldOptionsRequest), arg0)
}

// ListFieldOptionsWithContext mocks base method
func (m *MockConnectCasesAPI) ListFieldOptionsWithContext(arg0 context.Context, arg1 *connectcases.ListFieldOptionsInput, arg2 ...request.Option) (*connectcases.ListFieldOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFieldOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.ListFieldOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldOptionsWithContext indicates an expected call of ListFieldOptionsWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListFieldOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldOptionsWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListFieldOptionsWithContext), varargs...)
}

// ListFields mocks base method
func (m *MockConnectCasesAPI) ListFields(arg0 *connectcases.ListFieldsInput) (*connectcases.ListFieldsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFields", arg0)
	ret0, _ := ret[0].(*connectcases.ListFieldsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFields indicates an expected call of ListFields
func (mr *MockConnectCasesAPIMockRecorder) ListFields(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFields", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListFields), arg0)
}

// ListFieldsPages mocks base method
func (m *MockConnectCasesAPI) ListFieldsPages(arg0 *connectcases.ListFieldsInput, arg1 func(*connectcases.ListFieldsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFieldsPages indicates an expected call of ListFieldsPages
func (mr *MockConnectCasesAPIMockRecorder) ListFieldsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldsPages", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListFieldsPages), arg0, arg1)
}

// ListFieldsPagesWithContext mocks base method
func (m *MockConnectCasesAPI) ListFieldsPagesWithContext(arg0 context.Context, arg1 *connectcases.ListFieldsInput, arg2 func(*connectcases.ListFieldsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFieldsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFieldsPagesWithContext indicates an expected call of ListFieldsPagesWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListFieldsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldsPagesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListFieldsPagesWithContext), varargs...)
}

// ListFieldsRequest mocks base method
func (m *MockConnectCasesAPI) ListFieldsRequest(arg0 *connectcases.ListFieldsInput) (*request.Request, *connectcases.ListFieldsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.ListFieldsOutput)
	return ret0, ret1
}

// ListFieldsRequest indicates an expected call of ListFieldsRequest
func (mr *MockConnectCasesAPIMockRecorder) ListFieldsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldsRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListFieldsRequest), arg0)
}

// ListFieldsWithContext mocks base method
func (m *MockConnectCasesAPI) ListFieldsWithContext(arg0 context.Context, arg1 *connectcases.ListFieldsInput, arg2 ...request.Option) (*connectcases.ListFieldsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFieldsWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.ListFieldsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldsWithContext indicates an expected call of ListFieldsWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListFieldsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldsWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListFieldsWithContext), varargs...)
}

// ListLayouts mocks base method
func (m *MockConnectCasesAPI) ListLayouts(arg0 *connectcases.ListLayoutsInput) (*connectcases.ListLayoutsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLayouts", arg0)
	ret0, _ := ret[0].(*connectcases.ListLayoutsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLayouts indicates an expected call of ListLayouts
func (mr *MockConnectCasesAPIMockRecorder) ListLayouts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLayouts", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListLayouts), arg0)
}

// ListLayoutsPages mocks base method
func (m *MockConnectCasesAPI) ListLayoutsPages(arg0 *connectcases.ListLayoutsInput, arg1 func(*connectcases.ListLayoutsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLayoutsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLayoutsPages indicates an expected call of ListLayoutsPages
func (mr *MockConnectCasesAPIMockRecorder) ListLayoutsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLayoutsPages", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListLayoutsPages), arg0, arg1)
}

// ListLayoutsPagesWithContext mocks base method
func (m *MockConnectCasesAPI) ListLayoutsPagesWithContext(arg0 context.Context, arg1 *connectcases.ListLayoutsInput, arg2 func(*connectcases.ListLayoutsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLayoutsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLayoutsPagesWithContext indicates an expected call of ListLayoutsPagesWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListLayoutsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLayoutsPagesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListLayoutsPagesWithContext), varargs...)
}

// ListLayoutsRequest mocks base method
func (m *MockConnectCasesAPI) ListLayoutsRequest(arg0 *connectcases.ListLayoutsInput) (*request.Request, *connectcases.ListLayoutsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLayoutsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.ListLayoutsOutput)
	return ret0, ret1
}

// ListLayoutsRequest indicates an expected call of ListLayoutsRequest
func (mr *MockConnectCasesAPIMockRecorder) ListLayoutsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLayoutsRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListLayoutsRequest), arg0)
}

// ListLayoutsWithContext mocks base method
func (m *MockConnectCasesAPI) ListLayoutsWithContext(arg0 context.Context, arg1 *connectcases.ListLayoutsInput, arg2 ...request.Option) (*connectcases.ListLayoutsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLayoutsWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.ListLayoutsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLayoutsWithContext indicates an expected call of ListLayoutsWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListLayoutsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLayoutsWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListLayoutsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockConnectCasesAPI) ListTagsForResource(arg0 *connectcases.ListTagsForResourceInput) (*connectcases.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*connectcases.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockConnectCasesAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockConnectCasesAPI) ListTagsForResourceRequest(arg0 *connectcases.ListTagsForResourceInput) (*request.Request, *connectcases.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockConnectCasesAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockConnectCasesAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *connectcases.ListTagsForResourceInput, arg2 ...request.Option) (*connectcases.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTemplates mocks base method
func (m *MockConnectCasesAPI) ListTemplates(arg0 *connectcases.ListTemplatesInput) (*connectcases.ListTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplates", arg0)
	ret0, _ := ret[0].(*connectcases.ListTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplates indicates an expected call of ListTemplates
func (mr *MockConnectCasesAPIMockRecorder) ListTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListTemplates), arg0)
}

// ListTemplatesPages mocks base method
func (m *MockConnectCasesAPI) ListTemplatesPages(arg0 *connectcases.ListTemplatesInput, arg1 func(*connectcases.ListTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplatesPages indicates an expected call of ListTemplatesPages
func (mr *MockConnectCasesAPIMockRecorder) ListTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesPages", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListTemplatesPages), arg0, arg1)
}

// ListTemplatesPagesWithContext mocks base method
func (m *MockConnectCasesAPI) ListTemplatesPagesWithContext(arg0 context.Context, arg1 *connectcases.ListTemplatesInput, arg2 func(*connectcases.ListTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplatesPagesWithContext indicates an expected call of ListTemplatesPagesWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesPagesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListTemplatesPagesWithContext), varargs...)
}

// ListTemplatesRequest mocks base method
func (m *MockConnectCasesAPI) ListTemplatesRequest(arg0 *connectcases.ListTemplatesInput) (*request.Request, *connectcases.ListTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.ListTemplatesOutput)
	return ret0, ret1
}

// ListTemplatesRequest indicates an expected call of ListTemplatesRequest
func (mr *MockConnectCasesAPIMockRecorder) ListTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListTemplatesRequest), arg0)
}

// ListTemplatesWithContext mocks base method
func (m *MockConnectCasesAPI) ListTemplatesWithContext(arg0 context.Context, arg1 *connectcases.ListTemplatesInput, arg2 ...request.Option) (*connectcases.ListTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.ListTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplatesWithContext indicates an expected call of ListTemplatesWithContext
func (mr *MockConnectCasesAPIMockRecorder) ListTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplatesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).ListTemplatesWithContext), varargs...)
}

// PutCaseEventConfiguration mocks base method
func (m *MockConnectCasesAPI) PutCaseEventConfiguration(arg0 *connectcases.PutCaseEventConfigurationInput) (*connectcases.PutCaseEventConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCaseEventConfiguration", arg0)
	ret0, _ := ret[0].(*connectcases.PutCaseEventConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCaseEventConfiguration indicates an expected call of PutCaseEventConfiguration
func (mr *MockConnectCasesAPIMockRecorder) PutCaseEventConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCaseEventConfiguration", reflect.TypeOf((*MockConnectCasesAPI)(nil).PutCaseEventConfiguration), arg0)
}

// PutCaseEventConfigurationRequest mocks base method
func (m *MockConnectCasesAPI) PutCaseEventConfigurationRequest(arg0 *connectcases.PutCaseEventConfigurationInput) (*request.Request, *connectcases.PutCaseEventConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCaseEventConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.PutCaseEventConfigurationOutput)
	return ret0, ret1
}

// PutCaseEventConfigurationRequest indicates an expected call of PutCaseEventConfigurationRequest
func (mr *MockConnectCasesAPIMockRecorder) PutCaseEventConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCaseEventConfigurationRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).PutCaseEventConfigurationRequest), arg0)
}

// PutCaseEventConfigurationWithContext mocks base method
func (m *MockConnectCasesAPI) PutCaseEventConfigurationWithContext(arg0 context.Context, arg1 *connectcases.PutCaseEventConfigurationInput, arg2 ...request.Option) (*connectcases.PutCaseEventConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutCaseEventConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.PutCaseEventConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCaseEventConfigurationWithContext indicates an expected call of PutCaseEventConfigurationWithContext
func (mr *MockConnectCasesAPIMockRecorder) PutCaseEventConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCaseEventConfigurationWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).PutCaseEventConfigurationWithContext), varargs...)
}

// SearchCases mocks base method
func (m *MockConnectCasesAPI) SearchCases(arg0 *connectcases.SearchCasesInput) (*connectcases.SearchCasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCases", arg0)
	ret0, _ := ret[0].(*connectcases.SearchCasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCases indicates an expected call of SearchCases
func (mr *MockConnectCasesAPIMockRecorder) SearchCases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCases", reflect.TypeOf((*MockConnectCasesAPI)(nil).SearchCases), arg0)
}

// SearchCasesPages mocks base method
func (m *MockConnectCasesAPI) SearchCasesPages(arg0 *connectcases.SearchCasesInput, arg1 func(*connectcases.SearchCasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchCasesPages indicates an expected call of SearchCasesPages
func (mr *MockConnectCasesAPIMockRecorder) SearchCasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCasesPages", reflect.TypeOf((*MockConnectCasesAPI)(nil).SearchCasesPages), arg0, arg1)
}

// SearchCasesPagesWithContext mocks base method
func (m *MockConnectCasesAPI) SearchCasesPagesWithContext(arg0 context.Context, arg1 *connectcases.SearchCasesInput, arg2 func(*connectcases.SearchCasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchCasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchCasesPagesWithContext indicates an expected call of SearchCasesPagesWithContext
func (mr *MockConnectCasesAPIMockRecorder) SearchCasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCasesPagesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).SearchCasesPagesWithContext), varargs...)
}

// SearchCasesRequest mocks base method
func (m *MockConnectCasesAPI) SearchCasesRequest(arg0 *connectcases.SearchCasesInput) (*request.Request, *connectcases.SearchCasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.SearchCasesOutput)
	return ret0, ret1
}

// SearchCasesRequest indicates an expected call of SearchCasesRequest
func (mr *MockConnectCasesAPIMockRecorder) SearchCasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCasesRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).SearchCasesRequest), arg0)
}

// SearchCasesWithContext mocks base method
func (m *MockConnectCasesAPI) SearchCasesWithContext(arg0 context.Context, arg1 *connectcases.SearchCasesInput, arg2 ...request.Option) (*connectcases.SearchCasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchCasesWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.SearchCasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCasesWithContext indicates an expected call of SearchCasesWithContext
func (mr *MockConnectCasesAPIMockRecorder) SearchCasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCasesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).SearchCasesWithContext), varargs...)
}

// SearchRelatedItems mocks base method
func (m *MockConnectCasesAPI) SearchRelatedItems(arg0 *connectcases.SearchRelatedItemsInput) (*connectcases.SearchRelatedItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRelatedItems", arg0)
	ret0, _ := ret[0].(*connectcases.SearchRelatedItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRelatedItems indicates an expected call of SearchRelatedItems
func (mr *MockConnectCasesAPIMockRecorder) SearchRelatedItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRelatedItems", reflect.TypeOf((*MockConnectCasesAPI)(nil).SearchRelatedItems), arg0)
}

// SearchRelatedItemsPages mocks base method
func (m *MockConnectCasesAPI) SearchRelatedItemsPages(arg0 *connectcases.SearchRelatedItemsInput, arg1 func(*connectcases.SearchRelatedItemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRelatedItemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchRelatedItemsPages indicates an expected call of SearchRelatedItemsPages
func (mr *MockConnectCasesAPIMockRecorder) SearchRelatedItemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRelatedItemsPages", reflect.TypeOf((*MockConnectCasesAPI)(nil).SearchRelatedItemsPages), arg0, arg1)
}

// SearchRelatedItemsPagesWithContext mocks base method
func (m *MockConnectCasesAPI) SearchRelatedItemsPagesWithContext(arg0 context.Context, arg1 *connectcases.SearchRelatedItemsInput, arg2 func(*connectcases.SearchRelatedItemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchRelatedItemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchRelatedItemsPagesWithContext indicates an expected call of SearchRelatedItemsPagesWithContext
func (mr *MockConnectCasesAPIMockRecorder) SearchRelatedItemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRelatedItemsPagesWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).SearchRelatedItemsPagesWithContext), varargs...)
}

// SearchRelatedItemsRequest mocks base method
func (m *MockConnectCasesAPI) SearchRelatedItemsRequest(arg0 *connectcases.SearchRelatedItemsInput) (*request.Request, *connectcases.SearchRelatedItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRelatedItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.SearchRelatedItemsOutput)
	return ret0, ret1
}

// SearchRelatedItemsRequest indicates an expected call of SearchRelatedItemsRequest
func (mr *MockConnectCasesAPIMockRecorder) SearchRelatedItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRelatedItemsRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).SearchRelatedItemsRequest), arg0)
}

// SearchRelatedItemsWithContext mocks base method
func (m *MockConnectCasesAPI) SearchRelatedItemsWithContext(arg0 context.Context, arg1 *connectcases.SearchRelatedItemsInput, arg2 ...request.Option) (*connectcases.SearchRelatedItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchRelatedItemsWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.SearchRelatedItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRelatedItemsWithContext indicates an expected call of SearchRelatedItemsWithContext
func (mr *MockConnectCasesAPIMockRecorder) SearchRelatedItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRelatedItemsWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).SearchRelatedItemsWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockConnectCasesAPI) TagResource(arg0 *connectcases.TagResourceInput) (*connectcases.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*connectcases.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockConnectCasesAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockConnectCasesAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockConnectCasesAPI) TagResourceRequest(arg0 *connectcases.TagResourceInput) (*request.Request, *connectcases.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockConnectCasesAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockConnectCasesAPI) TagResourceWithContext(arg0 context.Context, arg1 *connectcases.TagResourceInput, arg2 ...request.Option) (*connectcases.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockConnectCasesAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockConnectCasesAPI) UntagResource(arg0 *connectcases.UntagResourceInput) (*connectcases.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*connectcases.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockConnectCasesAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockConnectCasesAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockConnectCasesAPI) UntagResourceRequest(arg0 *connectcases.UntagResourceInput) (*request.Request, *connectcases.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockConnectCasesAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockConnectCasesAPI) UntagResourceWithContext(arg0 context.Context, arg1 *connectcases.UntagResourceInput, arg2 ...request.Option) (*connectcases.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockConnectCasesAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCase mocks base method
func (m *MockConnectCasesAPI) UpdateCase(arg0 *connectcases.UpdateCaseInput) (*connectcases.UpdateCaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCase", arg0)
	ret0, _ := ret[0].(*connectcases.UpdateCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCase indicates an expected call of UpdateCase
func (mr *MockConnectCasesAPIMockRecorder) UpdateCase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCase", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateCase), arg0)
}

// UpdateCaseRequest mocks base method
func (m *MockConnectCasesAPI) UpdateCaseRequest(arg0 *connectcases.UpdateCaseInput) (*request.Request, *connectcases.UpdateCaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.UpdateCaseOutput)
	return ret0, ret1
}

// UpdateCaseRequest indicates an expected call of UpdateCaseRequest
func (mr *MockConnectCasesAPIMockRecorder) UpdateCaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCaseRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateCaseRequest), arg0)
}

// UpdateCaseWithContext mocks base method
func (m *MockConnectCasesAPI) UpdateCaseWithContext(arg0 context.Context, arg1 *connectcases.UpdateCaseInput, arg2 ...request.Option) (*connectcases.UpdateCaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCaseWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.UpdateCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCaseWithContext indicates an expected call of UpdateCaseWithContext
func (mr *MockConnectCasesAPIMockRecorder) UpdateCaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCaseWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateCaseWithContext), varargs...)
}

// UpdateField mocks base method
func (m *MockConnectCasesAPI) UpdateField(arg0 *connectcases.UpdateFieldInput) (*connectcases.UpdateFieldOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateField", arg0)
	ret0, _ := ret[0].(*connectcases.UpdateFieldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateField indicates an expected call of UpdateField
func (mr *MockConnectCasesAPIMockRecorder) UpdateField(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateField", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateField), arg0)
}

// UpdateFieldRequest mocks base method
func (m *MockConnectCasesAPI) UpdateFieldRequest(arg0 *connectcases.UpdateFieldInput) (*request.Request, *connectcases.UpdateFieldOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFieldRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.UpdateFieldOutput)
	return ret0, ret1
}

// UpdateFieldRequest indicates an expected call of UpdateFieldRequest
func (mr *MockConnectCasesAPIMockRecorder) UpdateFieldRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateFieldRequest), arg0)
}

// UpdateFieldWithContext mocks base method
func (m *MockConnectCasesAPI) UpdateFieldWithContext(arg0 context.Context, arg1 *connectcases.UpdateFieldInput, arg2 ...request.Option) (*connectcases.UpdateFieldOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFieldWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.UpdateFieldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFieldWithContext indicates an expected call of UpdateFieldWithContext
func (mr *MockConnectCasesAPIMockRecorder) UpdateFieldWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateFieldWithContext), varargs...)
}

// UpdateLayout mocks base method
func (m *MockConnectCasesAPI) UpdateLayout(arg0 *connectcases.UpdateLayoutInput) (*connectcases.UpdateLayoutOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLayout", arg0)
	ret0, _ := ret[0].(*connectcases.UpdateLayoutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLayout indicates an expected call of UpdateLayout
func (mr *MockConnectCasesAPIMockRecorder) UpdateLayout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLayout", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateLayout), arg0)
}

// UpdateLayoutRequest mocks base method
func (m *MockConnectCasesAPI) UpdateLayoutRequest(arg0 *connectcases.UpdateLayoutInput) (*request.Request, *connectcases.UpdateLayoutOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLayoutRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.UpdateLayoutOutput)
	return ret0, ret1
}

// UpdateLayoutRequest indicates an expected call of UpdateLayoutRequest
func (mr *MockConnectCasesAPIMockRecorder) UpdateLayoutRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLayoutRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateLayoutRequest), arg0)
}

// UpdateLayoutWithContext mocks base method
func (m *MockConnectCasesAPI) UpdateLayoutWithContext(arg0 context.Context, arg1 *connectcases.UpdateLayoutInput, arg2 ...request.Option) (*connectcases.UpdateLayoutOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLayoutWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.UpdateLayoutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLayoutWithContext indicates an expected call of UpdateLayoutWithContext
func (mr *MockConnectCasesAPIMockRecorder) UpdateLayoutWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLayoutWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateLayoutWithContext), varargs...)
}

// UpdateTemplate mocks base method
func (m *MockConnectCasesAPI) UpdateTemplate(arg0 *connectcases.UpdateTemplateInput) (*connectcases.UpdateTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplate", arg0)
	ret0, _ := ret[0].(*connectcases.UpdateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplate indicates an expected call of UpdateTemplate
func (mr *MockConnectCasesAPIMockRecorder) UpdateTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateTemplate), arg0)
}

// UpdateTemplateRequest mocks base method
func (m *MockConnectCasesAPI) UpdateTemplateRequest(arg0 *connectcases.UpdateTemplateInput) (*request.Request, *connectcases.UpdateTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcases.UpdateTemplateOutput)
	return ret0, ret1
}

// UpdateTemplateRequest indicates an expected call of UpdateTemplateRequest
func (mr *MockConnectCasesAPIMockRecorder) UpdateTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateRequest", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateTemplateRequest), arg0)
}

// UpdateTemplateWithContext mocks base method
func (m *MockConnectCasesAPI) UpdateTemplateWithContext(arg0 context.Context, arg1 *connectcases.UpdateTemplateInput, arg2 ...request.Option) (*connectcases.UpdateTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*connectcases.UpdateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplateWithContext indicates an expected call of UpdateTemplateWithContext
func (mr *MockConnectCasesAPIMockRecorder) UpdateTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplateWithContext", reflect.TypeOf((*MockConnectCasesAPI)(nil).UpdateTemplateWithContext), varargs...)
}
