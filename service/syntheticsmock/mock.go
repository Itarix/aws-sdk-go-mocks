// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/synthetics/syntheticsiface (interfaces: SyntheticsAPI)

// Package syntheticsmock is a generated GoMock package.
package syntheticsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	synthetics "github.com/aws/aws-sdk-go/service/synthetics"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSyntheticsAPI is a mock of SyntheticsAPI interface
type MockSyntheticsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSyntheticsAPIMockRecorder
}

// MockSyntheticsAPIMockRecorder is the mock recorder for MockSyntheticsAPI
type MockSyntheticsAPIMockRecorder struct {
	mock *MockSyntheticsAPI
}

// NewMockSyntheticsAPI creates a new mock instance
func NewMockSyntheticsAPI(ctrl *gomock.Controller) *MockSyntheticsAPI {
	mock := &MockSyntheticsAPI{ctrl: ctrl}
	mock.recorder = &MockSyntheticsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyntheticsAPI) EXPECT() *MockSyntheticsAPIMockRecorder {
	return m.recorder
}

// AssociateResource mocks base method
func (m *MockSyntheticsAPI) AssociateResource(arg0 *synthetics.AssociateResourceInput) (*synthetics.AssociateResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResource", arg0)
	ret0, _ := ret[0].(*synthetics.AssociateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResource indicates an expected call of AssociateResource
func (mr *MockSyntheticsAPIMockRecorder) AssociateResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResource", reflect.TypeOf((*MockSyntheticsAPI)(nil).AssociateResource), arg0)
}

// AssociateResourceRequest mocks base method
func (m *MockSyntheticsAPI) AssociateResourceRequest(arg0 *synthetics.AssociateResourceInput) (*request.Request, *synthetics.AssociateResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.AssociateResourceOutput)
	return ret0, ret1
}

// AssociateResourceRequest indicates an expected call of AssociateResourceRequest
func (mr *MockSyntheticsAPIMockRecorder) AssociateResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResourceRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).AssociateResourceRequest), arg0)
}

// AssociateResourceWithContext mocks base method
func (m *MockSyntheticsAPI) AssociateResourceWithContext(arg0 context.Context, arg1 *synthetics.AssociateResourceInput, arg2 ...request.Option) (*synthetics.AssociateResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateResourceWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.AssociateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResourceWithContext indicates an expected call of AssociateResourceWithContext
func (mr *MockSyntheticsAPIMockRecorder) AssociateResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResourceWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).AssociateResourceWithContext), varargs...)
}

// CreateCanary mocks base method
func (m *MockSyntheticsAPI) CreateCanary(arg0 *synthetics.CreateCanaryInput) (*synthetics.CreateCanaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCanary", arg0)
	ret0, _ := ret[0].(*synthetics.CreateCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCanary indicates an expected call of CreateCanary
func (mr *MockSyntheticsAPIMockRecorder) CreateCanary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCanary", reflect.TypeOf((*MockSyntheticsAPI)(nil).CreateCanary), arg0)
}

// CreateCanaryRequest mocks base method
func (m *MockSyntheticsAPI) CreateCanaryRequest(arg0 *synthetics.CreateCanaryInput) (*request.Request, *synthetics.CreateCanaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCanaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.CreateCanaryOutput)
	return ret0, ret1
}

// CreateCanaryRequest indicates an expected call of CreateCanaryRequest
func (mr *MockSyntheticsAPIMockRecorder) CreateCanaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCanaryRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).CreateCanaryRequest), arg0)
}

// CreateCanaryWithContext mocks base method
func (m *MockSyntheticsAPI) CreateCanaryWithContext(arg0 context.Context, arg1 *synthetics.CreateCanaryInput, arg2 ...request.Option) (*synthetics.CreateCanaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCanaryWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.CreateCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCanaryWithContext indicates an expected call of CreateCanaryWithContext
func (mr *MockSyntheticsAPIMockRecorder) CreateCanaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCanaryWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).CreateCanaryWithContext), varargs...)
}

// CreateGroup mocks base method
func (m *MockSyntheticsAPI) CreateGroup(arg0 *synthetics.CreateGroupInput) (*synthetics.CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(*synthetics.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockSyntheticsAPIMockRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockSyntheticsAPI)(nil).CreateGroup), arg0)
}

// CreateGroupRequest mocks base method
func (m *MockSyntheticsAPI) CreateGroupRequest(arg0 *synthetics.CreateGroupInput) (*request.Request, *synthetics.CreateGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.CreateGroupOutput)
	return ret0, ret1
}

// CreateGroupRequest indicates an expected call of CreateGroupRequest
func (mr *MockSyntheticsAPIMockRecorder) CreateGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).CreateGroupRequest), arg0)
}

// CreateGroupWithContext mocks base method
func (m *MockSyntheticsAPI) CreateGroupWithContext(arg0 context.Context, arg1 *synthetics.CreateGroupInput, arg2 ...request.Option) (*synthetics.CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupWithContext indicates an expected call of CreateGroupWithContext
func (mr *MockSyntheticsAPIMockRecorder) CreateGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).CreateGroupWithContext), varargs...)
}

// DeleteCanary mocks base method
func (m *MockSyntheticsAPI) DeleteCanary(arg0 *synthetics.DeleteCanaryInput) (*synthetics.DeleteCanaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCanary", arg0)
	ret0, _ := ret[0].(*synthetics.DeleteCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCanary indicates an expected call of DeleteCanary
func (mr *MockSyntheticsAPIMockRecorder) DeleteCanary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCanary", reflect.TypeOf((*MockSyntheticsAPI)(nil).DeleteCanary), arg0)
}

// DeleteCanaryRequest mocks base method
func (m *MockSyntheticsAPI) DeleteCanaryRequest(arg0 *synthetics.DeleteCanaryInput) (*request.Request, *synthetics.DeleteCanaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCanaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.DeleteCanaryOutput)
	return ret0, ret1
}

// DeleteCanaryRequest indicates an expected call of DeleteCanaryRequest
func (mr *MockSyntheticsAPIMockRecorder) DeleteCanaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCanaryRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).DeleteCanaryRequest), arg0)
}

// DeleteCanaryWithContext mocks base method
func (m *MockSyntheticsAPI) DeleteCanaryWithContext(arg0 context.Context, arg1 *synthetics.DeleteCanaryInput, arg2 ...request.Option) (*synthetics.DeleteCanaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCanaryWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.DeleteCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCanaryWithContext indicates an expected call of DeleteCanaryWithContext
func (mr *MockSyntheticsAPIMockRecorder) DeleteCanaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCanaryWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).DeleteCanaryWithContext), varargs...)
}

// DeleteGroup mocks base method
func (m *MockSyntheticsAPI) DeleteGroup(arg0 *synthetics.DeleteGroupInput) (*synthetics.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0)
	ret0, _ := ret[0].(*synthetics.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockSyntheticsAPIMockRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockSyntheticsAPI)(nil).DeleteGroup), arg0)
}

// DeleteGroupRequest mocks base method
func (m *MockSyntheticsAPI) DeleteGroupRequest(arg0 *synthetics.DeleteGroupInput) (*request.Request, *synthetics.DeleteGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.DeleteGroupOutput)
	return ret0, ret1
}

// DeleteGroupRequest indicates an expected call of DeleteGroupRequest
func (mr *MockSyntheticsAPIMockRecorder) DeleteGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).DeleteGroupRequest), arg0)
}

// DeleteGroupWithContext mocks base method
func (m *MockSyntheticsAPI) DeleteGroupWithContext(arg0 context.Context, arg1 *synthetics.DeleteGroupInput, arg2 ...request.Option) (*synthetics.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupWithContext indicates an expected call of DeleteGroupWithContext
func (mr *MockSyntheticsAPIMockRecorder) DeleteGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).DeleteGroupWithContext), varargs...)
}

// DescribeCanaries mocks base method
func (m *MockSyntheticsAPI) DescribeCanaries(arg0 *synthetics.DescribeCanariesInput) (*synthetics.DescribeCanariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCanaries", arg0)
	ret0, _ := ret[0].(*synthetics.DescribeCanariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCanaries indicates an expected call of DescribeCanaries
func (mr *MockSyntheticsAPIMockRecorder) DescribeCanaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCanaries", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeCanaries), arg0)
}

// DescribeCanariesLastRun mocks base method
func (m *MockSyntheticsAPI) DescribeCanariesLastRun(arg0 *synthetics.DescribeCanariesLastRunInput) (*synthetics.DescribeCanariesLastRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCanariesLastRun", arg0)
	ret0, _ := ret[0].(*synthetics.DescribeCanariesLastRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCanariesLastRun indicates an expected call of DescribeCanariesLastRun
func (mr *MockSyntheticsAPIMockRecorder) DescribeCanariesLastRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCanariesLastRun", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeCanariesLastRun), arg0)
}

// DescribeCanariesLastRunPages mocks base method
func (m *MockSyntheticsAPI) DescribeCanariesLastRunPages(arg0 *synthetics.DescribeCanariesLastRunInput, arg1 func(*synthetics.DescribeCanariesLastRunOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCanariesLastRunPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeCanariesLastRunPages indicates an expected call of DescribeCanariesLastRunPages
func (mr *MockSyntheticsAPIMockRecorder) DescribeCanariesLastRunPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCanariesLastRunPages", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeCanariesLastRunPages), arg0, arg1)
}

// DescribeCanariesLastRunPagesWithContext mocks base method
func (m *MockSyntheticsAPI) DescribeCanariesLastRunPagesWithContext(arg0 context.Context, arg1 *synthetics.DescribeCanariesLastRunInput, arg2 func(*synthetics.DescribeCanariesLastRunOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCanariesLastRunPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeCanariesLastRunPagesWithContext indicates an expected call of DescribeCanariesLastRunPagesWithContext
func (mr *MockSyntheticsAPIMockRecorder) DescribeCanariesLastRunPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCanariesLastRunPagesWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeCanariesLastRunPagesWithContext), varargs...)
}

// DescribeCanariesLastRunRequest mocks base method
func (m *MockSyntheticsAPI) DescribeCanariesLastRunRequest(arg0 *synthetics.DescribeCanariesLastRunInput) (*request.Request, *synthetics.DescribeCanariesLastRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCanariesLastRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.DescribeCanariesLastRunOutput)
	return ret0, ret1
}

// DescribeCanariesLastRunRequest indicates an expected call of DescribeCanariesLastRunRequest
func (mr *MockSyntheticsAPIMockRecorder) DescribeCanariesLastRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCanariesLastRunRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeCanariesLastRunRequest), arg0)
}

// DescribeCanariesLastRunWithContext mocks base method
func (m *MockSyntheticsAPI) DescribeCanariesLastRunWithContext(arg0 context.Context, arg1 *synthetics.DescribeCanariesLastRunInput, arg2 ...request.Option) (*synthetics.DescribeCanariesLastRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCanariesLastRunWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.DescribeCanariesLastRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCanariesLastRunWithContext indicates an expected call of DescribeCanariesLastRunWithContext
func (mr *MockSyntheticsAPIMockRecorder) DescribeCanariesLastRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCanariesLastRunWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeCanariesLastRunWithContext), varargs...)
}

// DescribeCanariesPages mocks base method
func (m *MockSyntheticsAPI) DescribeCanariesPages(arg0 *synthetics.DescribeCanariesInput, arg1 func(*synthetics.DescribeCanariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCanariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeCanariesPages indicates an expected call of DescribeCanariesPages
func (mr *MockSyntheticsAPIMockRecorder) DescribeCanariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCanariesPages", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeCanariesPages), arg0, arg1)
}

// DescribeCanariesPagesWithContext mocks base method
func (m *MockSyntheticsAPI) DescribeCanariesPagesWithContext(arg0 context.Context, arg1 *synthetics.DescribeCanariesInput, arg2 func(*synthetics.DescribeCanariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCanariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeCanariesPagesWithContext indicates an expected call of DescribeCanariesPagesWithContext
func (mr *MockSyntheticsAPIMockRecorder) DescribeCanariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCanariesPagesWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeCanariesPagesWithContext), varargs...)
}

// DescribeCanariesRequest mocks base method
func (m *MockSyntheticsAPI) DescribeCanariesRequest(arg0 *synthetics.DescribeCanariesInput) (*request.Request, *synthetics.DescribeCanariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCanariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.DescribeCanariesOutput)
	return ret0, ret1
}

// DescribeCanariesRequest indicates an expected call of DescribeCanariesRequest
func (mr *MockSyntheticsAPIMockRecorder) DescribeCanariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCanariesRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeCanariesRequest), arg0)
}

// DescribeCanariesWithContext mocks base method
func (m *MockSyntheticsAPI) DescribeCanariesWithContext(arg0 context.Context, arg1 *synthetics.DescribeCanariesInput, arg2 ...request.Option) (*synthetics.DescribeCanariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCanariesWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.DescribeCanariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCanariesWithContext indicates an expected call of DescribeCanariesWithContext
func (mr *MockSyntheticsAPIMockRecorder) DescribeCanariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCanariesWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeCanariesWithContext), varargs...)
}

// DescribeRuntimeVersions mocks base method
func (m *MockSyntheticsAPI) DescribeRuntimeVersions(arg0 *synthetics.DescribeRuntimeVersionsInput) (*synthetics.DescribeRuntimeVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRuntimeVersions", arg0)
	ret0, _ := ret[0].(*synthetics.DescribeRuntimeVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRuntimeVersions indicates an expected call of DescribeRuntimeVersions
func (mr *MockSyntheticsAPIMockRecorder) DescribeRuntimeVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuntimeVersions", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeRuntimeVersions), arg0)
}

// DescribeRuntimeVersionsPages mocks base method
func (m *MockSyntheticsAPI) DescribeRuntimeVersionsPages(arg0 *synthetics.DescribeRuntimeVersionsInput, arg1 func(*synthetics.DescribeRuntimeVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRuntimeVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRuntimeVersionsPages indicates an expected call of DescribeRuntimeVersionsPages
func (mr *MockSyntheticsAPIMockRecorder) DescribeRuntimeVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuntimeVersionsPages", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeRuntimeVersionsPages), arg0, arg1)
}

// DescribeRuntimeVersionsPagesWithContext mocks base method
func (m *MockSyntheticsAPI) DescribeRuntimeVersionsPagesWithContext(arg0 context.Context, arg1 *synthetics.DescribeRuntimeVersionsInput, arg2 func(*synthetics.DescribeRuntimeVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRuntimeVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRuntimeVersionsPagesWithContext indicates an expected call of DescribeRuntimeVersionsPagesWithContext
func (mr *MockSyntheticsAPIMockRecorder) DescribeRuntimeVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuntimeVersionsPagesWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeRuntimeVersionsPagesWithContext), varargs...)
}

// DescribeRuntimeVersionsRequest mocks base method
func (m *MockSyntheticsAPI) DescribeRuntimeVersionsRequest(arg0 *synthetics.DescribeRuntimeVersionsInput) (*request.Request, *synthetics.DescribeRuntimeVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRuntimeVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.DescribeRuntimeVersionsOutput)
	return ret0, ret1
}

// DescribeRuntimeVersionsRequest indicates an expected call of DescribeRuntimeVersionsRequest
func (mr *MockSyntheticsAPIMockRecorder) DescribeRuntimeVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuntimeVersionsRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeRuntimeVersionsRequest), arg0)
}

// DescribeRuntimeVersionsWithContext mocks base method
func (m *MockSyntheticsAPI) DescribeRuntimeVersionsWithContext(arg0 context.Context, arg1 *synthetics.DescribeRuntimeVersionsInput, arg2 ...request.Option) (*synthetics.DescribeRuntimeVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRuntimeVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.DescribeRuntimeVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRuntimeVersionsWithContext indicates an expected call of DescribeRuntimeVersionsWithContext
func (mr *MockSyntheticsAPIMockRecorder) DescribeRuntimeVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuntimeVersionsWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).DescribeRuntimeVersionsWithContext), varargs...)
}

// DisassociateResource mocks base method
func (m *MockSyntheticsAPI) DisassociateResource(arg0 *synthetics.DisassociateResourceInput) (*synthetics.DisassociateResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResource", arg0)
	ret0, _ := ret[0].(*synthetics.DisassociateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResource indicates an expected call of DisassociateResource
func (mr *MockSyntheticsAPIMockRecorder) DisassociateResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResource", reflect.TypeOf((*MockSyntheticsAPI)(nil).DisassociateResource), arg0)
}

// DisassociateResourceRequest mocks base method
func (m *MockSyntheticsAPI) DisassociateResourceRequest(arg0 *synthetics.DisassociateResourceInput) (*request.Request, *synthetics.DisassociateResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.DisassociateResourceOutput)
	return ret0, ret1
}

// DisassociateResourceRequest indicates an expected call of DisassociateResourceRequest
func (mr *MockSyntheticsAPIMockRecorder) DisassociateResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResourceRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).DisassociateResourceRequest), arg0)
}

// DisassociateResourceWithContext mocks base method
func (m *MockSyntheticsAPI) DisassociateResourceWithContext(arg0 context.Context, arg1 *synthetics.DisassociateResourceInput, arg2 ...request.Option) (*synthetics.DisassociateResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateResourceWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.DisassociateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResourceWithContext indicates an expected call of DisassociateResourceWithContext
func (mr *MockSyntheticsAPIMockRecorder) DisassociateResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResourceWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).DisassociateResourceWithContext), varargs...)
}

// GetCanary mocks base method
func (m *MockSyntheticsAPI) GetCanary(arg0 *synthetics.GetCanaryInput) (*synthetics.GetCanaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanary", arg0)
	ret0, _ := ret[0].(*synthetics.GetCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCanary indicates an expected call of GetCanary
func (mr *MockSyntheticsAPIMockRecorder) GetCanary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanary", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetCanary), arg0)
}

// GetCanaryRequest mocks base method
func (m *MockSyntheticsAPI) GetCanaryRequest(arg0 *synthetics.GetCanaryInput) (*request.Request, *synthetics.GetCanaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.GetCanaryOutput)
	return ret0, ret1
}

// GetCanaryRequest indicates an expected call of GetCanaryRequest
func (mr *MockSyntheticsAPIMockRecorder) GetCanaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanaryRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetCanaryRequest), arg0)
}

// GetCanaryRuns mocks base method
func (m *MockSyntheticsAPI) GetCanaryRuns(arg0 *synthetics.GetCanaryRunsInput) (*synthetics.GetCanaryRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanaryRuns", arg0)
	ret0, _ := ret[0].(*synthetics.GetCanaryRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCanaryRuns indicates an expected call of GetCanaryRuns
func (mr *MockSyntheticsAPIMockRecorder) GetCanaryRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanaryRuns", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetCanaryRuns), arg0)
}

// GetCanaryRunsPages mocks base method
func (m *MockSyntheticsAPI) GetCanaryRunsPages(arg0 *synthetics.GetCanaryRunsInput, arg1 func(*synthetics.GetCanaryRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanaryRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCanaryRunsPages indicates an expected call of GetCanaryRunsPages
func (mr *MockSyntheticsAPIMockRecorder) GetCanaryRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanaryRunsPages", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetCanaryRunsPages), arg0, arg1)
}

// GetCanaryRunsPagesWithContext mocks base method
func (m *MockSyntheticsAPI) GetCanaryRunsPagesWithContext(arg0 context.Context, arg1 *synthetics.GetCanaryRunsInput, arg2 func(*synthetics.GetCanaryRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCanaryRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCanaryRunsPagesWithContext indicates an expected call of GetCanaryRunsPagesWithContext
func (mr *MockSyntheticsAPIMockRecorder) GetCanaryRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanaryRunsPagesWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetCanaryRunsPagesWithContext), varargs...)
}

// GetCanaryRunsRequest mocks base method
func (m *MockSyntheticsAPI) GetCanaryRunsRequest(arg0 *synthetics.GetCanaryRunsInput) (*request.Request, *synthetics.GetCanaryRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanaryRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.GetCanaryRunsOutput)
	return ret0, ret1
}

// GetCanaryRunsRequest indicates an expected call of GetCanaryRunsRequest
func (mr *MockSyntheticsAPIMockRecorder) GetCanaryRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanaryRunsRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetCanaryRunsRequest), arg0)
}

// GetCanaryRunsWithContext mocks base method
func (m *MockSyntheticsAPI) GetCanaryRunsWithContext(arg0 context.Context, arg1 *synthetics.GetCanaryRunsInput, arg2 ...request.Option) (*synthetics.GetCanaryRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCanaryRunsWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.GetCanaryRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCanaryRunsWithContext indicates an expected call of GetCanaryRunsWithContext
func (mr *MockSyntheticsAPIMockRecorder) GetCanaryRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanaryRunsWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetCanaryRunsWithContext), varargs...)
}

// GetCanaryWithContext mocks base method
func (m *MockSyntheticsAPI) GetCanaryWithContext(arg0 context.Context, arg1 *synthetics.GetCanaryInput, arg2 ...request.Option) (*synthetics.GetCanaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCanaryWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.GetCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCanaryWithContext indicates an expected call of GetCanaryWithContext
func (mr *MockSyntheticsAPIMockRecorder) GetCanaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanaryWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetCanaryWithContext), varargs...)
}

// GetGroup mocks base method
func (m *MockSyntheticsAPI) GetGroup(arg0 *synthetics.GetGroupInput) (*synthetics.GetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0)
	ret0, _ := ret[0].(*synthetics.GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockSyntheticsAPIMockRecorder) GetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetGroup), arg0)
}

// GetGroupRequest mocks base method
func (m *MockSyntheticsAPI) GetGroupRequest(arg0 *synthetics.GetGroupInput) (*request.Request, *synthetics.GetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.GetGroupOutput)
	return ret0, ret1
}

// GetGroupRequest indicates an expected call of GetGroupRequest
func (mr *MockSyntheticsAPIMockRecorder) GetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetGroupRequest), arg0)
}

// GetGroupWithContext mocks base method
func (m *MockSyntheticsAPI) GetGroupWithContext(arg0 context.Context, arg1 *synthetics.GetGroupInput, arg2 ...request.Option) (*synthetics.GetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupWithContext indicates an expected call of GetGroupWithContext
func (mr *MockSyntheticsAPIMockRecorder) GetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).GetGroupWithContext), varargs...)
}

// ListAssociatedGroups mocks base method
func (m *MockSyntheticsAPI) ListAssociatedGroups(arg0 *synthetics.ListAssociatedGroupsInput) (*synthetics.ListAssociatedGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedGroups", arg0)
	ret0, _ := ret[0].(*synthetics.ListAssociatedGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedGroups indicates an expected call of ListAssociatedGroups
func (mr *MockSyntheticsAPIMockRecorder) ListAssociatedGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedGroups", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListAssociatedGroups), arg0)
}

// ListAssociatedGroupsPages mocks base method
func (m *MockSyntheticsAPI) ListAssociatedGroupsPages(arg0 *synthetics.ListAssociatedGroupsInput, arg1 func(*synthetics.ListAssociatedGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssociatedGroupsPages indicates an expected call of ListAssociatedGroupsPages
func (mr *MockSyntheticsAPIMockRecorder) ListAssociatedGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedGroupsPages", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListAssociatedGroupsPages), arg0, arg1)
}

// ListAssociatedGroupsPagesWithContext mocks base method
func (m *MockSyntheticsAPI) ListAssociatedGroupsPagesWithContext(arg0 context.Context, arg1 *synthetics.ListAssociatedGroupsInput, arg2 func(*synthetics.ListAssociatedGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssociatedGroupsPagesWithContext indicates an expected call of ListAssociatedGroupsPagesWithContext
func (mr *MockSyntheticsAPIMockRecorder) ListAssociatedGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedGroupsPagesWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListAssociatedGroupsPagesWithContext), varargs...)
}

// ListAssociatedGroupsRequest mocks base method
func (m *MockSyntheticsAPI) ListAssociatedGroupsRequest(arg0 *synthetics.ListAssociatedGroupsInput) (*request.Request, *synthetics.ListAssociatedGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.ListAssociatedGroupsOutput)
	return ret0, ret1
}

// ListAssociatedGroupsRequest indicates an expected call of ListAssociatedGroupsRequest
func (mr *MockSyntheticsAPIMockRecorder) ListAssociatedGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedGroupsRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListAssociatedGroupsRequest), arg0)
}

// ListAssociatedGroupsWithContext mocks base method
func (m *MockSyntheticsAPI) ListAssociatedGroupsWithContext(arg0 context.Context, arg1 *synthetics.ListAssociatedGroupsInput, arg2 ...request.Option) (*synthetics.ListAssociatedGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.ListAssociatedGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedGroupsWithContext indicates an expected call of ListAssociatedGroupsWithContext
func (mr *MockSyntheticsAPIMockRecorder) ListAssociatedGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedGroupsWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListAssociatedGroupsWithContext), varargs...)
}

// ListGroupResources mocks base method
func (m *MockSyntheticsAPI) ListGroupResources(arg0 *synthetics.ListGroupResourcesInput) (*synthetics.ListGroupResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupResources", arg0)
	ret0, _ := ret[0].(*synthetics.ListGroupResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupResources indicates an expected call of ListGroupResources
func (mr *MockSyntheticsAPIMockRecorder) ListGroupResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupResources", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListGroupResources), arg0)
}

// ListGroupResourcesPages mocks base method
func (m *MockSyntheticsAPI) ListGroupResourcesPages(arg0 *synthetics.ListGroupResourcesInput, arg1 func(*synthetics.ListGroupResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupResourcesPages indicates an expected call of ListGroupResourcesPages
func (mr *MockSyntheticsAPIMockRecorder) ListGroupResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupResourcesPages", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListGroupResourcesPages), arg0, arg1)
}

// ListGroupResourcesPagesWithContext mocks base method
func (m *MockSyntheticsAPI) ListGroupResourcesPagesWithContext(arg0 context.Context, arg1 *synthetics.ListGroupResourcesInput, arg2 func(*synthetics.ListGroupResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupResourcesPagesWithContext indicates an expected call of ListGroupResourcesPagesWithContext
func (mr *MockSyntheticsAPIMockRecorder) ListGroupResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupResourcesPagesWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListGroupResourcesPagesWithContext), varargs...)
}

// ListGroupResourcesRequest mocks base method
func (m *MockSyntheticsAPI) ListGroupResourcesRequest(arg0 *synthetics.ListGroupResourcesInput) (*request.Request, *synthetics.ListGroupResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.ListGroupResourcesOutput)
	return ret0, ret1
}

// ListGroupResourcesRequest indicates an expected call of ListGroupResourcesRequest
func (mr *MockSyntheticsAPIMockRecorder) ListGroupResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupResourcesRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListGroupResourcesRequest), arg0)
}

// ListGroupResourcesWithContext mocks base method
func (m *MockSyntheticsAPI) ListGroupResourcesWithContext(arg0 context.Context, arg1 *synthetics.ListGroupResourcesInput, arg2 ...request.Option) (*synthetics.ListGroupResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.ListGroupResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupResourcesWithContext indicates an expected call of ListGroupResourcesWithContext
func (mr *MockSyntheticsAPIMockRecorder) ListGroupResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupResourcesWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListGroupResourcesWithContext), varargs...)
}

// ListGroups mocks base method
func (m *MockSyntheticsAPI) ListGroups(arg0 *synthetics.ListGroupsInput) (*synthetics.ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", arg0)
	ret0, _ := ret[0].(*synthetics.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups
func (mr *MockSyntheticsAPIMockRecorder) ListGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListGroups), arg0)
}

// ListGroupsPages mocks base method
func (m *MockSyntheticsAPI) ListGroupsPages(arg0 *synthetics.ListGroupsInput, arg1 func(*synthetics.ListGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupsPages indicates an expected call of ListGroupsPages
func (mr *MockSyntheticsAPIMockRecorder) ListGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsPages", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListGroupsPages), arg0, arg1)
}

// ListGroupsPagesWithContext mocks base method
func (m *MockSyntheticsAPI) ListGroupsPagesWithContext(arg0 context.Context, arg1 *synthetics.ListGroupsInput, arg2 func(*synthetics.ListGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupsPagesWithContext indicates an expected call of ListGroupsPagesWithContext
func (mr *MockSyntheticsAPIMockRecorder) ListGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsPagesWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListGroupsPagesWithContext), varargs...)
}

// ListGroupsRequest mocks base method
func (m *MockSyntheticsAPI) ListGroupsRequest(arg0 *synthetics.ListGroupsInput) (*request.Request, *synthetics.ListGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.ListGroupsOutput)
	return ret0, ret1
}

// ListGroupsRequest indicates an expected call of ListGroupsRequest
func (mr *MockSyntheticsAPIMockRecorder) ListGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListGroupsRequest), arg0)
}

// ListGroupsWithContext mocks base method
func (m *MockSyntheticsAPI) ListGroupsWithContext(arg0 context.Context, arg1 *synthetics.ListGroupsInput, arg2 ...request.Option) (*synthetics.ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupsWithContext indicates an expected call of ListGroupsWithContext
func (mr *MockSyntheticsAPIMockRecorder) ListGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListGroupsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockSyntheticsAPI) ListTagsForResource(arg0 *synthetics.ListTagsForResourceInput) (*synthetics.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*synthetics.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockSyntheticsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockSyntheticsAPI) ListTagsForResourceRequest(arg0 *synthetics.ListTagsForResourceInput) (*request.Request, *synthetics.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockSyntheticsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockSyntheticsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *synthetics.ListTagsForResourceInput, arg2 ...request.Option) (*synthetics.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockSyntheticsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartCanary mocks base method
func (m *MockSyntheticsAPI) StartCanary(arg0 *synthetics.StartCanaryInput) (*synthetics.StartCanaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCanary", arg0)
	ret0, _ := ret[0].(*synthetics.StartCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCanary indicates an expected call of StartCanary
func (mr *MockSyntheticsAPIMockRecorder) StartCanary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCanary", reflect.TypeOf((*MockSyntheticsAPI)(nil).StartCanary), arg0)
}

// StartCanaryRequest mocks base method
func (m *MockSyntheticsAPI) StartCanaryRequest(arg0 *synthetics.StartCanaryInput) (*request.Request, *synthetics.StartCanaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCanaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.StartCanaryOutput)
	return ret0, ret1
}

// StartCanaryRequest indicates an expected call of StartCanaryRequest
func (mr *MockSyntheticsAPIMockRecorder) StartCanaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCanaryRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).StartCanaryRequest), arg0)
}

// StartCanaryWithContext mocks base method
func (m *MockSyntheticsAPI) StartCanaryWithContext(arg0 context.Context, arg1 *synthetics.StartCanaryInput, arg2 ...request.Option) (*synthetics.StartCanaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCanaryWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.StartCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCanaryWithContext indicates an expected call of StartCanaryWithContext
func (mr *MockSyntheticsAPIMockRecorder) StartCanaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCanaryWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).StartCanaryWithContext), varargs...)
}

// StopCanary mocks base method
func (m *MockSyntheticsAPI) StopCanary(arg0 *synthetics.StopCanaryInput) (*synthetics.StopCanaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCanary", arg0)
	ret0, _ := ret[0].(*synthetics.StopCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCanary indicates an expected call of StopCanary
func (mr *MockSyntheticsAPIMockRecorder) StopCanary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCanary", reflect.TypeOf((*MockSyntheticsAPI)(nil).StopCanary), arg0)
}

// StopCanaryRequest mocks base method
func (m *MockSyntheticsAPI) StopCanaryRequest(arg0 *synthetics.StopCanaryInput) (*request.Request, *synthetics.StopCanaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCanaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.StopCanaryOutput)
	return ret0, ret1
}

// StopCanaryRequest indicates an expected call of StopCanaryRequest
func (mr *MockSyntheticsAPIMockRecorder) StopCanaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCanaryRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).StopCanaryRequest), arg0)
}

// StopCanaryWithContext mocks base method
func (m *MockSyntheticsAPI) StopCanaryWithContext(arg0 context.Context, arg1 *synthetics.StopCanaryInput, arg2 ...request.Option) (*synthetics.StopCanaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopCanaryWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.StopCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCanaryWithContext indicates an expected call of StopCanaryWithContext
func (mr *MockSyntheticsAPIMockRecorder) StopCanaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCanaryWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).StopCanaryWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockSyntheticsAPI) TagResource(arg0 *synthetics.TagResourceInput) (*synthetics.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*synthetics.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockSyntheticsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSyntheticsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockSyntheticsAPI) TagResourceRequest(arg0 *synthetics.TagResourceInput) (*request.Request, *synthetics.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockSyntheticsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockSyntheticsAPI) TagResourceWithContext(arg0 context.Context, arg1 *synthetics.TagResourceInput, arg2 ...request.Option) (*synthetics.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockSyntheticsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockSyntheticsAPI) UntagResource(arg0 *synthetics.UntagResourceInput) (*synthetics.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*synthetics.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockSyntheticsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSyntheticsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockSyntheticsAPI) UntagResourceRequest(arg0 *synthetics.UntagResourceInput) (*request.Request, *synthetics.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockSyntheticsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockSyntheticsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *synthetics.UntagResourceInput, arg2 ...request.Option) (*synthetics.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockSyntheticsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCanary mocks base method
func (m *MockSyntheticsAPI) UpdateCanary(arg0 *synthetics.UpdateCanaryInput) (*synthetics.UpdateCanaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCanary", arg0)
	ret0, _ := ret[0].(*synthetics.UpdateCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCanary indicates an expected call of UpdateCanary
func (mr *MockSyntheticsAPIMockRecorder) UpdateCanary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCanary", reflect.TypeOf((*MockSyntheticsAPI)(nil).UpdateCanary), arg0)
}

// UpdateCanaryRequest mocks base method
func (m *MockSyntheticsAPI) UpdateCanaryRequest(arg0 *synthetics.UpdateCanaryInput) (*request.Request, *synthetics.UpdateCanaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCanaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*synthetics.UpdateCanaryOutput)
	return ret0, ret1
}

// UpdateCanaryRequest indicates an expected call of UpdateCanaryRequest
func (mr *MockSyntheticsAPIMockRecorder) UpdateCanaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCanaryRequest", reflect.TypeOf((*MockSyntheticsAPI)(nil).UpdateCanaryRequest), arg0)
}

// UpdateCanaryWithContext mocks base method
func (m *MockSyntheticsAPI) UpdateCanaryWithContext(arg0 context.Context, arg1 *synthetics.UpdateCanaryInput, arg2 ...request.Option) (*synthetics.UpdateCanaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCanaryWithContext", varargs...)
	ret0, _ := ret[0].(*synthetics.UpdateCanaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCanaryWithContext indicates an expected call of UpdateCanaryWithContext
func (mr *MockSyntheticsAPIMockRecorder) UpdateCanaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCanaryWithContext", reflect.TypeOf((*MockSyntheticsAPI)(nil).UpdateCanaryWithContext), varargs...)
}
