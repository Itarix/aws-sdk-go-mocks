// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/databasemigrationservice/databasemigrationserviceiface (interfaces: DatabaseMigrationServiceAPI)

// Package databasemigrationservicemock is a generated GoMock package.
package databasemigrationservicemock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	databasemigrationservice "github.com/aws/aws-sdk-go/service/databasemigrationservice"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabaseMigrationServiceAPI is a mock of DatabaseMigrationServiceAPI interface
type MockDatabaseMigrationServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMigrationServiceAPIMockRecorder
}

// MockDatabaseMigrationServiceAPIMockRecorder is the mock recorder for MockDatabaseMigrationServiceAPI
type MockDatabaseMigrationServiceAPIMockRecorder struct {
	mock *MockDatabaseMigrationServiceAPI
}

// NewMockDatabaseMigrationServiceAPI creates a new mock instance
func NewMockDatabaseMigrationServiceAPI(ctrl *gomock.Controller) *MockDatabaseMigrationServiceAPI {
	mock := &MockDatabaseMigrationServiceAPI{ctrl: ctrl}
	mock.recorder = &MockDatabaseMigrationServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseMigrationServiceAPI) EXPECT() *MockDatabaseMigrationServiceAPIMockRecorder {
	return m.recorder
}

// AddTagsToResource mocks base method
func (m *MockDatabaseMigrationServiceAPI) AddTagsToResource(arg0 *databasemigrationservice.AddTagsToResourceInput) (*databasemigrationservice.AddTagsToResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToResource", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.AddTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToResource indicates an expected call of AddTagsToResource
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) AddTagsToResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResource", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).AddTagsToResource), arg0)
}

// AddTagsToResourceRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) AddTagsToResourceRequest(arg0 *databasemigrationservice.AddTagsToResourceInput) (*request.Request, *databasemigrationservice.AddTagsToResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.AddTagsToResourceOutput)
	return ret0, ret1
}

// AddTagsToResourceRequest indicates an expected call of AddTagsToResourceRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) AddTagsToResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResourceRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).AddTagsToResourceRequest), arg0)
}

// AddTagsToResourceWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) AddTagsToResourceWithContext(arg0 aws.Context, arg1 *databasemigrationservice.AddTagsToResourceInput, arg2 ...request.Option) (*databasemigrationservice.AddTagsToResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTagsToResourceWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.AddTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToResourceWithContext indicates an expected call of AddTagsToResourceWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) AddTagsToResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResourceWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).AddTagsToResourceWithContext), varargs...)
}

// CreateEndpoint mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateEndpoint(arg0 *databasemigrationservice.CreateEndpointInput) (*databasemigrationservice.CreateEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpoint", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.CreateEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpoint indicates an expected call of CreateEndpoint
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpoint", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateEndpoint), arg0)
}

// CreateEndpointRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateEndpointRequest(arg0 *databasemigrationservice.CreateEndpointInput) (*request.Request, *databasemigrationservice.CreateEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.CreateEndpointOutput)
	return ret0, ret1
}

// CreateEndpointRequest indicates an expected call of CreateEndpointRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateEndpointRequest), arg0)
}

// CreateEndpointWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateEndpointWithContext(arg0 aws.Context, arg1 *databasemigrationservice.CreateEndpointInput, arg2 ...request.Option) (*databasemigrationservice.CreateEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.CreateEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpointWithContext indicates an expected call of CreateEndpointWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateEndpointWithContext), varargs...)
}

// CreateEventSubscription mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateEventSubscription(arg0 *databasemigrationservice.CreateEventSubscriptionInput) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventSubscription", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.CreateEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventSubscription indicates an expected call of CreateEventSubscription
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateEventSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSubscription", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateEventSubscription), arg0)
}

// CreateEventSubscriptionRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateEventSubscriptionRequest(arg0 *databasemigrationservice.CreateEventSubscriptionInput) (*request.Request, *databasemigrationservice.CreateEventSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.CreateEventSubscriptionOutput)
	return ret0, ret1
}

// CreateEventSubscriptionRequest indicates an expected call of CreateEventSubscriptionRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateEventSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSubscriptionRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateEventSubscriptionRequest), arg0)
}

// CreateEventSubscriptionWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateEventSubscriptionWithContext(arg0 aws.Context, arg1 *databasemigrationservice.CreateEventSubscriptionInput, arg2 ...request.Option) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEventSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.CreateEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventSubscriptionWithContext indicates an expected call of CreateEventSubscriptionWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateEventSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSubscriptionWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateEventSubscriptionWithContext), varargs...)
}

// CreateReplicationInstance mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateReplicationInstance(arg0 *databasemigrationservice.CreateReplicationInstanceInput) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationInstance", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.CreateReplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationInstance indicates an expected call of CreateReplicationInstance
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateReplicationInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationInstance", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateReplicationInstance), arg0)
}

// CreateReplicationInstanceRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateReplicationInstanceRequest(arg0 *databasemigrationservice.CreateReplicationInstanceInput) (*request.Request, *databasemigrationservice.CreateReplicationInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.CreateReplicationInstanceOutput)
	return ret0, ret1
}

// CreateReplicationInstanceRequest indicates an expected call of CreateReplicationInstanceRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateReplicationInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationInstanceRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateReplicationInstanceRequest), arg0)
}

// CreateReplicationInstanceWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateReplicationInstanceWithContext(arg0 aws.Context, arg1 *databasemigrationservice.CreateReplicationInstanceInput, arg2 ...request.Option) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReplicationInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.CreateReplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationInstanceWithContext indicates an expected call of CreateReplicationInstanceWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateReplicationInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationInstanceWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateReplicationInstanceWithContext), varargs...)
}

// CreateReplicationSubnetGroup mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateReplicationSubnetGroup(arg0 *databasemigrationservice.CreateReplicationSubnetGroupInput) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationSubnetGroup", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.CreateReplicationSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationSubnetGroup indicates an expected call of CreateReplicationSubnetGroup
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateReplicationSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationSubnetGroup", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateReplicationSubnetGroup), arg0)
}

// CreateReplicationSubnetGroupRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateReplicationSubnetGroupRequest(arg0 *databasemigrationservice.CreateReplicationSubnetGroupInput) (*request.Request, *databasemigrationservice.CreateReplicationSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.CreateReplicationSubnetGroupOutput)
	return ret0, ret1
}

// CreateReplicationSubnetGroupRequest indicates an expected call of CreateReplicationSubnetGroupRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateReplicationSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationSubnetGroupRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateReplicationSubnetGroupRequest), arg0)
}

// CreateReplicationSubnetGroupWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateReplicationSubnetGroupWithContext(arg0 aws.Context, arg1 *databasemigrationservice.CreateReplicationSubnetGroupInput, arg2 ...request.Option) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReplicationSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.CreateReplicationSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationSubnetGroupWithContext indicates an expected call of CreateReplicationSubnetGroupWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateReplicationSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationSubnetGroupWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateReplicationSubnetGroupWithContext), varargs...)
}

// CreateReplicationTask mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateReplicationTask(arg0 *databasemigrationservice.CreateReplicationTaskInput) (*databasemigrationservice.CreateReplicationTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationTask", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.CreateReplicationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationTask indicates an expected call of CreateReplicationTask
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateReplicationTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationTask", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateReplicationTask), arg0)
}

// CreateReplicationTaskRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateReplicationTaskRequest(arg0 *databasemigrationservice.CreateReplicationTaskInput) (*request.Request, *databasemigrationservice.CreateReplicationTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.CreateReplicationTaskOutput)
	return ret0, ret1
}

// CreateReplicationTaskRequest indicates an expected call of CreateReplicationTaskRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateReplicationTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationTaskRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateReplicationTaskRequest), arg0)
}

// CreateReplicationTaskWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) CreateReplicationTaskWithContext(arg0 aws.Context, arg1 *databasemigrationservice.CreateReplicationTaskInput, arg2 ...request.Option) (*databasemigrationservice.CreateReplicationTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReplicationTaskWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.CreateReplicationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationTaskWithContext indicates an expected call of CreateReplicationTaskWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) CreateReplicationTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationTaskWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).CreateReplicationTaskWithContext), varargs...)
}

// DeleteCertificate mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteCertificate(arg0 *databasemigrationservice.DeleteCertificateInput) (*databasemigrationservice.DeleteCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCertificate indicates an expected call of DeleteCertificate
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteCertificate), arg0)
}

// DeleteCertificateRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteCertificateRequest(arg0 *databasemigrationservice.DeleteCertificateInput) (*request.Request, *databasemigrationservice.DeleteCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DeleteCertificateOutput)
	return ret0, ret1
}

// DeleteCertificateRequest indicates an expected call of DeleteCertificateRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteCertificateRequest), arg0)
}

// DeleteCertificateWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteCertificateWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DeleteCertificateInput, arg2 ...request.Option) (*databasemigrationservice.DeleteCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCertificateWithContext indicates an expected call of DeleteCertificateWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteCertificateWithContext), varargs...)
}

// DeleteEndpoint mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteEndpoint(arg0 *databasemigrationservice.DeleteEndpointInput) (*databasemigrationservice.DeleteEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoint", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpoint indicates an expected call of DeleteEndpoint
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoint", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteEndpoint), arg0)
}

// DeleteEndpointRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteEndpointRequest(arg0 *databasemigrationservice.DeleteEndpointInput) (*request.Request, *databasemigrationservice.DeleteEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DeleteEndpointOutput)
	return ret0, ret1
}

// DeleteEndpointRequest indicates an expected call of DeleteEndpointRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteEndpointRequest), arg0)
}

// DeleteEndpointWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteEndpointWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DeleteEndpointInput, arg2 ...request.Option) (*databasemigrationservice.DeleteEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointWithContext indicates an expected call of DeleteEndpointWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteEndpointWithContext), varargs...)
}

// DeleteEventSubscription mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteEventSubscription(arg0 *databasemigrationservice.DeleteEventSubscriptionInput) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventSubscription", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventSubscription indicates an expected call of DeleteEventSubscription
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteEventSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSubscription", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteEventSubscription), arg0)
}

// DeleteEventSubscriptionRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteEventSubscriptionRequest(arg0 *databasemigrationservice.DeleteEventSubscriptionInput) (*request.Request, *databasemigrationservice.DeleteEventSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DeleteEventSubscriptionOutput)
	return ret0, ret1
}

// DeleteEventSubscriptionRequest indicates an expected call of DeleteEventSubscriptionRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteEventSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSubscriptionRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteEventSubscriptionRequest), arg0)
}

// DeleteEventSubscriptionWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteEventSubscriptionWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DeleteEventSubscriptionInput, arg2 ...request.Option) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEventSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventSubscriptionWithContext indicates an expected call of DeleteEventSubscriptionWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteEventSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSubscriptionWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteEventSubscriptionWithContext), varargs...)
}

// DeleteReplicationInstance mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteReplicationInstance(arg0 *databasemigrationservice.DeleteReplicationInstanceInput) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationInstance", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteReplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationInstance indicates an expected call of DeleteReplicationInstance
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteReplicationInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationInstance", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteReplicationInstance), arg0)
}

// DeleteReplicationInstanceRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteReplicationInstanceRequest(arg0 *databasemigrationservice.DeleteReplicationInstanceInput) (*request.Request, *databasemigrationservice.DeleteReplicationInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DeleteReplicationInstanceOutput)
	return ret0, ret1
}

// DeleteReplicationInstanceRequest indicates an expected call of DeleteReplicationInstanceRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteReplicationInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationInstanceRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteReplicationInstanceRequest), arg0)
}

// DeleteReplicationInstanceWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteReplicationInstanceWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DeleteReplicationInstanceInput, arg2 ...request.Option) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReplicationInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteReplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationInstanceWithContext indicates an expected call of DeleteReplicationInstanceWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteReplicationInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationInstanceWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteReplicationInstanceWithContext), varargs...)
}

// DeleteReplicationSubnetGroup mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteReplicationSubnetGroup(arg0 *databasemigrationservice.DeleteReplicationSubnetGroupInput) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationSubnetGroup", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteReplicationSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationSubnetGroup indicates an expected call of DeleteReplicationSubnetGroup
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteReplicationSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationSubnetGroup", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteReplicationSubnetGroup), arg0)
}

// DeleteReplicationSubnetGroupRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteReplicationSubnetGroupRequest(arg0 *databasemigrationservice.DeleteReplicationSubnetGroupInput) (*request.Request, *databasemigrationservice.DeleteReplicationSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DeleteReplicationSubnetGroupOutput)
	return ret0, ret1
}

// DeleteReplicationSubnetGroupRequest indicates an expected call of DeleteReplicationSubnetGroupRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteReplicationSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationSubnetGroupRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteReplicationSubnetGroupRequest), arg0)
}

// DeleteReplicationSubnetGroupWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteReplicationSubnetGroupWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DeleteReplicationSubnetGroupInput, arg2 ...request.Option) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReplicationSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteReplicationSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationSubnetGroupWithContext indicates an expected call of DeleteReplicationSubnetGroupWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteReplicationSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationSubnetGroupWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteReplicationSubnetGroupWithContext), varargs...)
}

// DeleteReplicationTask mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteReplicationTask(arg0 *databasemigrationservice.DeleteReplicationTaskInput) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationTask", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteReplicationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationTask indicates an expected call of DeleteReplicationTask
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteReplicationTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationTask", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteReplicationTask), arg0)
}

// DeleteReplicationTaskRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteReplicationTaskRequest(arg0 *databasemigrationservice.DeleteReplicationTaskInput) (*request.Request, *databasemigrationservice.DeleteReplicationTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DeleteReplicationTaskOutput)
	return ret0, ret1
}

// DeleteReplicationTaskRequest indicates an expected call of DeleteReplicationTaskRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteReplicationTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationTaskRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteReplicationTaskRequest), arg0)
}

// DeleteReplicationTaskWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DeleteReplicationTaskWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DeleteReplicationTaskInput, arg2 ...request.Option) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReplicationTaskWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DeleteReplicationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationTaskWithContext indicates an expected call of DeleteReplicationTaskWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DeleteReplicationTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationTaskWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DeleteReplicationTaskWithContext), varargs...)
}

// DescribeAccountAttributes mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeAccountAttributes(arg0 *databasemigrationservice.DescribeAccountAttributesInput) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountAttributes", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeAccountAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAttributes indicates an expected call of DescribeAccountAttributes
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeAccountAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributes", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeAccountAttributes), arg0)
}

// DescribeAccountAttributesRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeAccountAttributesRequest(arg0 *databasemigrationservice.DescribeAccountAttributesInput) (*request.Request, *databasemigrationservice.DescribeAccountAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeAccountAttributesOutput)
	return ret0, ret1
}

// DescribeAccountAttributesRequest indicates an expected call of DescribeAccountAttributesRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeAccountAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributesRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeAccountAttributesRequest), arg0)
}

// DescribeAccountAttributesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeAccountAttributesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeAccountAttributesInput, arg2 ...request.Option) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeAccountAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAttributesWithContext indicates an expected call of DescribeAccountAttributesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeAccountAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeAccountAttributesWithContext), varargs...)
}

// DescribeCertificates mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeCertificates(arg0 *databasemigrationservice.DescribeCertificatesInput) (*databasemigrationservice.DescribeCertificatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificates", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificates indicates an expected call of DescribeCertificates
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeCertificates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificates", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeCertificates), arg0)
}

// DescribeCertificatesPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeCertificatesPages(arg0 *databasemigrationservice.DescribeCertificatesInput, arg1 func(*databasemigrationservice.DescribeCertificatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeCertificatesPages indicates an expected call of DescribeCertificatesPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeCertificatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificatesPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeCertificatesPages), arg0, arg1)
}

// DescribeCertificatesPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeCertificatesPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeCertificatesInput, arg2 func(*databasemigrationservice.DescribeCertificatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeCertificatesPagesWithContext indicates an expected call of DescribeCertificatesPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeCertificatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificatesPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeCertificatesPagesWithContext), varargs...)
}

// DescribeCertificatesRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeCertificatesRequest(arg0 *databasemigrationservice.DescribeCertificatesInput) (*request.Request, *databasemigrationservice.DescribeCertificatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeCertificatesOutput)
	return ret0, ret1
}

// DescribeCertificatesRequest indicates an expected call of DescribeCertificatesRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeCertificatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificatesRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeCertificatesRequest), arg0)
}

// DescribeCertificatesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeCertificatesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeCertificatesInput, arg2 ...request.Option) (*databasemigrationservice.DescribeCertificatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificatesWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificatesWithContext indicates an expected call of DescribeCertificatesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeCertificatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificatesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeCertificatesWithContext), varargs...)
}

// DescribeConnections mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeConnections(arg0 *databasemigrationservice.DescribeConnectionsInput) (*databasemigrationservice.DescribeConnectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnections", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnections indicates an expected call of DescribeConnections
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnections", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeConnections), arg0)
}

// DescribeConnectionsPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeConnectionsPages(arg0 *databasemigrationservice.DescribeConnectionsInput, arg1 func(*databasemigrationservice.DescribeConnectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeConnectionsPages indicates an expected call of DescribeConnectionsPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeConnectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectionsPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeConnectionsPages), arg0, arg1)
}

// DescribeConnectionsPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeConnectionsPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeConnectionsInput, arg2 func(*databasemigrationservice.DescribeConnectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConnectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeConnectionsPagesWithContext indicates an expected call of DescribeConnectionsPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeConnectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectionsPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeConnectionsPagesWithContext), varargs...)
}

// DescribeConnectionsRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeConnectionsRequest(arg0 *databasemigrationservice.DescribeConnectionsInput) (*request.Request, *databasemigrationservice.DescribeConnectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeConnectionsOutput)
	return ret0, ret1
}

// DescribeConnectionsRequest indicates an expected call of DescribeConnectionsRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeConnectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectionsRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeConnectionsRequest), arg0)
}

// DescribeConnectionsWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeConnectionsWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeConnectionsInput, arg2 ...request.Option) (*databasemigrationservice.DescribeConnectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConnectionsWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnectionsWithContext indicates an expected call of DescribeConnectionsWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeConnectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectionsWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeConnectionsWithContext), varargs...)
}

// DescribeEndpointTypes mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEndpointTypes(arg0 *databasemigrationservice.DescribeEndpointTypesInput) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointTypes", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEndpointTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointTypes indicates an expected call of DescribeEndpointTypes
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEndpointTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointTypes", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEndpointTypes), arg0)
}

// DescribeEndpointTypesPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEndpointTypesPages(arg0 *databasemigrationservice.DescribeEndpointTypesInput, arg1 func(*databasemigrationservice.DescribeEndpointTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEndpointTypesPages indicates an expected call of DescribeEndpointTypesPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEndpointTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointTypesPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEndpointTypesPages), arg0, arg1)
}

// DescribeEndpointTypesPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEndpointTypesPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeEndpointTypesInput, arg2 func(*databasemigrationservice.DescribeEndpointTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEndpointTypesPagesWithContext indicates an expected call of DescribeEndpointTypesPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEndpointTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointTypesPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEndpointTypesPagesWithContext), varargs...)
}

// DescribeEndpointTypesRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEndpointTypesRequest(arg0 *databasemigrationservice.DescribeEndpointTypesInput) (*request.Request, *databasemigrationservice.DescribeEndpointTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeEndpointTypesOutput)
	return ret0, ret1
}

// DescribeEndpointTypesRequest indicates an expected call of DescribeEndpointTypesRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEndpointTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointTypesRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEndpointTypesRequest), arg0)
}

// DescribeEndpointTypesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEndpointTypesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeEndpointTypesInput, arg2 ...request.Option) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointTypesWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEndpointTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointTypesWithContext indicates an expected call of DescribeEndpointTypesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEndpointTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointTypesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEndpointTypesWithContext), varargs...)
}

// DescribeEndpoints mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEndpoints(arg0 *databasemigrationservice.DescribeEndpointsInput) (*databasemigrationservice.DescribeEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpoints", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpoints indicates an expected call of DescribeEndpoints
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpoints", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEndpoints), arg0)
}

// DescribeEndpointsPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEndpointsPages(arg0 *databasemigrationservice.DescribeEndpointsInput, arg1 func(*databasemigrationservice.DescribeEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEndpointsPages indicates an expected call of DescribeEndpointsPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointsPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEndpointsPages), arg0, arg1)
}

// DescribeEndpointsPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEndpointsPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeEndpointsInput, arg2 func(*databasemigrationservice.DescribeEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEndpointsPagesWithContext indicates an expected call of DescribeEndpointsPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointsPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEndpointsPagesWithContext), varargs...)
}

// DescribeEndpointsRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEndpointsRequest(arg0 *databasemigrationservice.DescribeEndpointsInput) (*request.Request, *databasemigrationservice.DescribeEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeEndpointsOutput)
	return ret0, ret1
}

// DescribeEndpointsRequest indicates an expected call of DescribeEndpointsRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointsRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEndpointsRequest), arg0)
}

// DescribeEndpointsWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEndpointsWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeEndpointsInput, arg2 ...request.Option) (*databasemigrationservice.DescribeEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointsWithContext indicates an expected call of DescribeEndpointsWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointsWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEndpointsWithContext), varargs...)
}

// DescribeEventCategories mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventCategories(arg0 *databasemigrationservice.DescribeEventCategoriesInput) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventCategories", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategories indicates an expected call of DescribeEventCategories
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategories", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventCategories), arg0)
}

// DescribeEventCategoriesRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventCategoriesRequest(arg0 *databasemigrationservice.DescribeEventCategoriesInput) (*request.Request, *databasemigrationservice.DescribeEventCategoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventCategoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeEventCategoriesOutput)
	return ret0, ret1
}

// DescribeEventCategoriesRequest indicates an expected call of DescribeEventCategoriesRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventCategoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategoriesRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventCategoriesRequest), arg0)
}

// DescribeEventCategoriesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventCategoriesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeEventCategoriesInput, arg2 ...request.Option) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventCategoriesWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategoriesWithContext indicates an expected call of DescribeEventCategoriesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventCategoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategoriesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventCategoriesWithContext), varargs...)
}

// DescribeEventSubscriptions mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventSubscriptions(arg0 *databasemigrationservice.DescribeEventSubscriptionsInput) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventSubscriptions", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSubscriptions indicates an expected call of DescribeEventSubscriptions
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptions", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventSubscriptions), arg0)
}

// DescribeEventSubscriptionsPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventSubscriptionsPages(arg0 *databasemigrationservice.DescribeEventSubscriptionsInput, arg1 func(*databasemigrationservice.DescribeEventSubscriptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventSubscriptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventSubscriptionsPages indicates an expected call of DescribeEventSubscriptionsPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventSubscriptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptionsPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventSubscriptionsPages), arg0, arg1)
}

// DescribeEventSubscriptionsPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventSubscriptionsPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeEventSubscriptionsInput, arg2 func(*databasemigrationservice.DescribeEventSubscriptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSubscriptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventSubscriptionsPagesWithContext indicates an expected call of DescribeEventSubscriptionsPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventSubscriptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptionsPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventSubscriptionsPagesWithContext), varargs...)
}

// DescribeEventSubscriptionsRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventSubscriptionsRequest(arg0 *databasemigrationservice.DescribeEventSubscriptionsInput) (*request.Request, *databasemigrationservice.DescribeEventSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeEventSubscriptionsOutput)
	return ret0, ret1
}

// DescribeEventSubscriptionsRequest indicates an expected call of DescribeEventSubscriptionsRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptionsRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventSubscriptionsRequest), arg0)
}

// DescribeEventSubscriptionsWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventSubscriptionsWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeEventSubscriptionsInput, arg2 ...request.Option) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSubscriptionsWithContext indicates an expected call of DescribeEventSubscriptionsWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptionsWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventSubscriptionsWithContext), varargs...)
}

// DescribeEvents mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEvents(arg0 *databasemigrationservice.DescribeEventsInput) (*databasemigrationservice.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEvents", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEvents), arg0)
}

// DescribeEventsPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventsPages(arg0 *databasemigrationservice.DescribeEventsInput, arg1 func(*databasemigrationservice.DescribeEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventsPages indicates an expected call of DescribeEventsPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventsPages), arg0, arg1)
}

// DescribeEventsPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventsPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeEventsInput, arg2 func(*databasemigrationservice.DescribeEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventsPagesWithContext indicates an expected call of DescribeEventsPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventsPagesWithContext), varargs...)
}

// DescribeEventsRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventsRequest(arg0 *databasemigrationservice.DescribeEventsInput) (*request.Request, *databasemigrationservice.DescribeEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeEventsOutput)
	return ret0, ret1
}

// DescribeEventsRequest indicates an expected call of DescribeEventsRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventsRequest), arg0)
}

// DescribeEventsWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeEventsWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeEventsInput, arg2 ...request.Option) (*databasemigrationservice.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventsWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventsWithContext indicates an expected call of DescribeEventsWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeEventsWithContext), varargs...)
}

// DescribeOrderableReplicationInstances mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeOrderableReplicationInstances(arg0 *databasemigrationservice.DescribeOrderableReplicationInstancesInput) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrderableReplicationInstances", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableReplicationInstances indicates an expected call of DescribeOrderableReplicationInstances
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeOrderableReplicationInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableReplicationInstances", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeOrderableReplicationInstances), arg0)
}

// DescribeOrderableReplicationInstancesPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeOrderableReplicationInstancesPages(arg0 *databasemigrationservice.DescribeOrderableReplicationInstancesInput, arg1 func(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrderableReplicationInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOrderableReplicationInstancesPages indicates an expected call of DescribeOrderableReplicationInstancesPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeOrderableReplicationInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableReplicationInstancesPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeOrderableReplicationInstancesPages), arg0, arg1)
}

// DescribeOrderableReplicationInstancesPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeOrderableReplicationInstancesPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeOrderableReplicationInstancesInput, arg2 func(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableReplicationInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOrderableReplicationInstancesPagesWithContext indicates an expected call of DescribeOrderableReplicationInstancesPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeOrderableReplicationInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableReplicationInstancesPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeOrderableReplicationInstancesPagesWithContext), varargs...)
}

// DescribeOrderableReplicationInstancesRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeOrderableReplicationInstancesRequest(arg0 *databasemigrationservice.DescribeOrderableReplicationInstancesInput) (*request.Request, *databasemigrationservice.DescribeOrderableReplicationInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrderableReplicationInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput)
	return ret0, ret1
}

// DescribeOrderableReplicationInstancesRequest indicates an expected call of DescribeOrderableReplicationInstancesRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeOrderableReplicationInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableReplicationInstancesRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeOrderableReplicationInstancesRequest), arg0)
}

// DescribeOrderableReplicationInstancesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeOrderableReplicationInstancesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeOrderableReplicationInstancesInput, arg2 ...request.Option) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableReplicationInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableReplicationInstancesWithContext indicates an expected call of DescribeOrderableReplicationInstancesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeOrderableReplicationInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableReplicationInstancesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeOrderableReplicationInstancesWithContext), varargs...)
}

// DescribeRefreshSchemasStatus mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeRefreshSchemasStatus(arg0 *databasemigrationservice.DescribeRefreshSchemasStatusInput) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRefreshSchemasStatus", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeRefreshSchemasStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRefreshSchemasStatus indicates an expected call of DescribeRefreshSchemasStatus
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeRefreshSchemasStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRefreshSchemasStatus", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeRefreshSchemasStatus), arg0)
}

// DescribeRefreshSchemasStatusRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeRefreshSchemasStatusRequest(arg0 *databasemigrationservice.DescribeRefreshSchemasStatusInput) (*request.Request, *databasemigrationservice.DescribeRefreshSchemasStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRefreshSchemasStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeRefreshSchemasStatusOutput)
	return ret0, ret1
}

// DescribeRefreshSchemasStatusRequest indicates an expected call of DescribeRefreshSchemasStatusRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeRefreshSchemasStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRefreshSchemasStatusRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeRefreshSchemasStatusRequest), arg0)
}

// DescribeRefreshSchemasStatusWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeRefreshSchemasStatusWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeRefreshSchemasStatusInput, arg2 ...request.Option) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRefreshSchemasStatusWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeRefreshSchemasStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRefreshSchemasStatusWithContext indicates an expected call of DescribeRefreshSchemasStatusWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeRefreshSchemasStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRefreshSchemasStatusWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeRefreshSchemasStatusWithContext), varargs...)
}

// DescribeReplicationInstanceTaskLogs mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationInstanceTaskLogs(arg0 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationInstanceTaskLogs", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationInstanceTaskLogs indicates an expected call of DescribeReplicationInstanceTaskLogs
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationInstanceTaskLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstanceTaskLogs", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationInstanceTaskLogs), arg0)
}

// DescribeReplicationInstanceTaskLogsPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationInstanceTaskLogsPages(arg0 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, arg1 func(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationInstanceTaskLogsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationInstanceTaskLogsPages indicates an expected call of DescribeReplicationInstanceTaskLogsPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationInstanceTaskLogsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstanceTaskLogsPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationInstanceTaskLogsPages), arg0, arg1)
}

// DescribeReplicationInstanceTaskLogsPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationInstanceTaskLogsPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, arg2 func(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationInstanceTaskLogsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationInstanceTaskLogsPagesWithContext indicates an expected call of DescribeReplicationInstanceTaskLogsPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationInstanceTaskLogsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstanceTaskLogsPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationInstanceTaskLogsPagesWithContext), varargs...)
}

// DescribeReplicationInstanceTaskLogsRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationInstanceTaskLogsRequest(arg0 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) (*request.Request, *databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationInstanceTaskLogsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput)
	return ret0, ret1
}

// DescribeReplicationInstanceTaskLogsRequest indicates an expected call of DescribeReplicationInstanceTaskLogsRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationInstanceTaskLogsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstanceTaskLogsRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationInstanceTaskLogsRequest), arg0)
}

// DescribeReplicationInstanceTaskLogsWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationInstanceTaskLogsWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, arg2 ...request.Option) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationInstanceTaskLogsWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationInstanceTaskLogsWithContext indicates an expected call of DescribeReplicationInstanceTaskLogsWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationInstanceTaskLogsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstanceTaskLogsWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationInstanceTaskLogsWithContext), varargs...)
}

// DescribeReplicationInstances mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationInstances(arg0 *databasemigrationservice.DescribeReplicationInstancesInput) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationInstances", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationInstances indicates an expected call of DescribeReplicationInstances
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstances", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationInstances), arg0)
}

// DescribeReplicationInstancesPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationInstancesPages(arg0 *databasemigrationservice.DescribeReplicationInstancesInput, arg1 func(*databasemigrationservice.DescribeReplicationInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationInstancesPages indicates an expected call of DescribeReplicationInstancesPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstancesPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationInstancesPages), arg0, arg1)
}

// DescribeReplicationInstancesPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationInstancesPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationInstancesInput, arg2 func(*databasemigrationservice.DescribeReplicationInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationInstancesPagesWithContext indicates an expected call of DescribeReplicationInstancesPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstancesPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationInstancesPagesWithContext), varargs...)
}

// DescribeReplicationInstancesRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationInstancesRequest(arg0 *databasemigrationservice.DescribeReplicationInstancesInput) (*request.Request, *databasemigrationservice.DescribeReplicationInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeReplicationInstancesOutput)
	return ret0, ret1
}

// DescribeReplicationInstancesRequest indicates an expected call of DescribeReplicationInstancesRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstancesRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationInstancesRequest), arg0)
}

// DescribeReplicationInstancesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationInstancesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationInstancesInput, arg2 ...request.Option) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationInstancesWithContext indicates an expected call of DescribeReplicationInstancesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstancesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationInstancesWithContext), varargs...)
}

// DescribeReplicationSubnetGroups mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationSubnetGroups(arg0 *databasemigrationservice.DescribeReplicationSubnetGroupsInput) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationSubnetGroups", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationSubnetGroups indicates an expected call of DescribeReplicationSubnetGroups
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationSubnetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationSubnetGroups", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationSubnetGroups), arg0)
}

// DescribeReplicationSubnetGroupsPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationSubnetGroupsPages(arg0 *databasemigrationservice.DescribeReplicationSubnetGroupsInput, arg1 func(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationSubnetGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationSubnetGroupsPages indicates an expected call of DescribeReplicationSubnetGroupsPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationSubnetGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationSubnetGroupsPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationSubnetGroupsPages), arg0, arg1)
}

// DescribeReplicationSubnetGroupsPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationSubnetGroupsPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationSubnetGroupsInput, arg2 func(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationSubnetGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationSubnetGroupsPagesWithContext indicates an expected call of DescribeReplicationSubnetGroupsPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationSubnetGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationSubnetGroupsPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationSubnetGroupsPagesWithContext), varargs...)
}

// DescribeReplicationSubnetGroupsRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationSubnetGroupsRequest(arg0 *databasemigrationservice.DescribeReplicationSubnetGroupsInput) (*request.Request, *databasemigrationservice.DescribeReplicationSubnetGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationSubnetGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput)
	return ret0, ret1
}

// DescribeReplicationSubnetGroupsRequest indicates an expected call of DescribeReplicationSubnetGroupsRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationSubnetGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationSubnetGroupsRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationSubnetGroupsRequest), arg0)
}

// DescribeReplicationSubnetGroupsWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationSubnetGroupsWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationSubnetGroupsInput, arg2 ...request.Option) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationSubnetGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationSubnetGroupsWithContext indicates an expected call of DescribeReplicationSubnetGroupsWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationSubnetGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationSubnetGroupsWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationSubnetGroupsWithContext), varargs...)
}

// DescribeReplicationTaskAssessmentResults mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationTaskAssessmentResults(arg0 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationTaskAssessmentResults", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationTaskAssessmentResults indicates an expected call of DescribeReplicationTaskAssessmentResults
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationTaskAssessmentResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTaskAssessmentResults", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationTaskAssessmentResults), arg0)
}

// DescribeReplicationTaskAssessmentResultsPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationTaskAssessmentResultsPages(arg0 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, arg1 func(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationTaskAssessmentResultsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationTaskAssessmentResultsPages indicates an expected call of DescribeReplicationTaskAssessmentResultsPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationTaskAssessmentResultsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTaskAssessmentResultsPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationTaskAssessmentResultsPages), arg0, arg1)
}

// DescribeReplicationTaskAssessmentResultsPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationTaskAssessmentResultsPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, arg2 func(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationTaskAssessmentResultsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationTaskAssessmentResultsPagesWithContext indicates an expected call of DescribeReplicationTaskAssessmentResultsPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationTaskAssessmentResultsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTaskAssessmentResultsPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationTaskAssessmentResultsPagesWithContext), varargs...)
}

// DescribeReplicationTaskAssessmentResultsRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationTaskAssessmentResultsRequest(arg0 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) (*request.Request, *databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationTaskAssessmentResultsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput)
	return ret0, ret1
}

// DescribeReplicationTaskAssessmentResultsRequest indicates an expected call of DescribeReplicationTaskAssessmentResultsRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationTaskAssessmentResultsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTaskAssessmentResultsRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationTaskAssessmentResultsRequest), arg0)
}

// DescribeReplicationTaskAssessmentResultsWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationTaskAssessmentResultsWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, arg2 ...request.Option) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationTaskAssessmentResultsWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationTaskAssessmentResultsWithContext indicates an expected call of DescribeReplicationTaskAssessmentResultsWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationTaskAssessmentResultsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTaskAssessmentResultsWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationTaskAssessmentResultsWithContext), varargs...)
}

// DescribeReplicationTasks mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationTasks(arg0 *databasemigrationservice.DescribeReplicationTasksInput) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationTasks", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationTasks indicates an expected call of DescribeReplicationTasks
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTasks", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationTasks), arg0)
}

// DescribeReplicationTasksPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationTasksPages(arg0 *databasemigrationservice.DescribeReplicationTasksInput, arg1 func(*databasemigrationservice.DescribeReplicationTasksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationTasksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationTasksPages indicates an expected call of DescribeReplicationTasksPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationTasksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTasksPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationTasksPages), arg0, arg1)
}

// DescribeReplicationTasksPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationTasksPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationTasksInput, arg2 func(*databasemigrationservice.DescribeReplicationTasksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationTasksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationTasksPagesWithContext indicates an expected call of DescribeReplicationTasksPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationTasksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTasksPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationTasksPagesWithContext), varargs...)
}

// DescribeReplicationTasksRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationTasksRequest(arg0 *databasemigrationservice.DescribeReplicationTasksInput) (*request.Request, *databasemigrationservice.DescribeReplicationTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeReplicationTasksOutput)
	return ret0, ret1
}

// DescribeReplicationTasksRequest indicates an expected call of DescribeReplicationTasksRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTasksRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationTasksRequest), arg0)
}

// DescribeReplicationTasksWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeReplicationTasksWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationTasksInput, arg2 ...request.Option) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationTasksWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationTasksWithContext indicates an expected call of DescribeReplicationTasksWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeReplicationTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTasksWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeReplicationTasksWithContext), varargs...)
}

// DescribeSchemas mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeSchemas(arg0 *databasemigrationservice.DescribeSchemasInput) (*databasemigrationservice.DescribeSchemasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSchemas", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSchemas indicates an expected call of DescribeSchemas
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeSchemas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemas", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeSchemas), arg0)
}

// DescribeSchemasPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeSchemasPages(arg0 *databasemigrationservice.DescribeSchemasInput, arg1 func(*databasemigrationservice.DescribeSchemasOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSchemasPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSchemasPages indicates an expected call of DescribeSchemasPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeSchemasPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemasPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeSchemasPages), arg0, arg1)
}

// DescribeSchemasPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeSchemasPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeSchemasInput, arg2 func(*databasemigrationservice.DescribeSchemasOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSchemasPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSchemasPagesWithContext indicates an expected call of DescribeSchemasPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeSchemasPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemasPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeSchemasPagesWithContext), varargs...)
}

// DescribeSchemasRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeSchemasRequest(arg0 *databasemigrationservice.DescribeSchemasInput) (*request.Request, *databasemigrationservice.DescribeSchemasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSchemasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeSchemasOutput)
	return ret0, ret1
}

// DescribeSchemasRequest indicates an expected call of DescribeSchemasRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeSchemasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemasRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeSchemasRequest), arg0)
}

// DescribeSchemasWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeSchemasWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeSchemasInput, arg2 ...request.Option) (*databasemigrationservice.DescribeSchemasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSchemasWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSchemasWithContext indicates an expected call of DescribeSchemasWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeSchemasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemasWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeSchemasWithContext), varargs...)
}

// DescribeTableStatistics mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeTableStatistics(arg0 *databasemigrationservice.DescribeTableStatisticsInput) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTableStatistics", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeTableStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTableStatistics indicates an expected call of DescribeTableStatistics
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeTableStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableStatistics", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeTableStatistics), arg0)
}

// DescribeTableStatisticsPages mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeTableStatisticsPages(arg0 *databasemigrationservice.DescribeTableStatisticsInput, arg1 func(*databasemigrationservice.DescribeTableStatisticsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTableStatisticsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeTableStatisticsPages indicates an expected call of DescribeTableStatisticsPages
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeTableStatisticsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableStatisticsPages", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeTableStatisticsPages), arg0, arg1)
}

// DescribeTableStatisticsPagesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeTableStatisticsPagesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeTableStatisticsInput, arg2 func(*databasemigrationservice.DescribeTableStatisticsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTableStatisticsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeTableStatisticsPagesWithContext indicates an expected call of DescribeTableStatisticsPagesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeTableStatisticsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableStatisticsPagesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeTableStatisticsPagesWithContext), varargs...)
}

// DescribeTableStatisticsRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeTableStatisticsRequest(arg0 *databasemigrationservice.DescribeTableStatisticsInput) (*request.Request, *databasemigrationservice.DescribeTableStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTableStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.DescribeTableStatisticsOutput)
	return ret0, ret1
}

// DescribeTableStatisticsRequest indicates an expected call of DescribeTableStatisticsRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeTableStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableStatisticsRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeTableStatisticsRequest), arg0)
}

// DescribeTableStatisticsWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) DescribeTableStatisticsWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeTableStatisticsInput, arg2 ...request.Option) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTableStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeTableStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTableStatisticsWithContext indicates an expected call of DescribeTableStatisticsWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) DescribeTableStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableStatisticsWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).DescribeTableStatisticsWithContext), varargs...)
}

// ImportCertificate mocks base method
func (m *MockDatabaseMigrationServiceAPI) ImportCertificate(arg0 *databasemigrationservice.ImportCertificateInput) (*databasemigrationservice.ImportCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCertificate", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.ImportCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCertificate indicates an expected call of ImportCertificate
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ImportCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCertificate", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ImportCertificate), arg0)
}

// ImportCertificateRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) ImportCertificateRequest(arg0 *databasemigrationservice.ImportCertificateInput) (*request.Request, *databasemigrationservice.ImportCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.ImportCertificateOutput)
	return ret0, ret1
}

// ImportCertificateRequest indicates an expected call of ImportCertificateRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ImportCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCertificateRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ImportCertificateRequest), arg0)
}

// ImportCertificateWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) ImportCertificateWithContext(arg0 aws.Context, arg1 *databasemigrationservice.ImportCertificateInput, arg2 ...request.Option) (*databasemigrationservice.ImportCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.ImportCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCertificateWithContext indicates an expected call of ImportCertificateWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ImportCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCertificateWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ImportCertificateWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockDatabaseMigrationServiceAPI) ListTagsForResource(arg0 *databasemigrationservice.ListTagsForResourceInput) (*databasemigrationservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) ListTagsForResourceRequest(arg0 *databasemigrationservice.ListTagsForResourceInput) (*request.Request, *databasemigrationservice.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) ListTagsForResourceWithContext(arg0 aws.Context, arg1 *databasemigrationservice.ListTagsForResourceInput, arg2 ...request.Option) (*databasemigrationservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ModifyEndpoint mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyEndpoint(arg0 *databasemigrationservice.ModifyEndpointInput) (*databasemigrationservice.ModifyEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyEndpoint", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.ModifyEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyEndpoint indicates an expected call of ModifyEndpoint
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEndpoint", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyEndpoint), arg0)
}

// ModifyEndpointRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyEndpointRequest(arg0 *databasemigrationservice.ModifyEndpointInput) (*request.Request, *databasemigrationservice.ModifyEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.ModifyEndpointOutput)
	return ret0, ret1
}

// ModifyEndpointRequest indicates an expected call of ModifyEndpointRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEndpointRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyEndpointRequest), arg0)
}

// ModifyEndpointWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyEndpointWithContext(arg0 aws.Context, arg1 *databasemigrationservice.ModifyEndpointInput, arg2 ...request.Option) (*databasemigrationservice.ModifyEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.ModifyEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyEndpointWithContext indicates an expected call of ModifyEndpointWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEndpointWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyEndpointWithContext), varargs...)
}

// ModifyEventSubscription mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyEventSubscription(arg0 *databasemigrationservice.ModifyEventSubscriptionInput) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyEventSubscription", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.ModifyEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyEventSubscription indicates an expected call of ModifyEventSubscription
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyEventSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEventSubscription", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyEventSubscription), arg0)
}

// ModifyEventSubscriptionRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyEventSubscriptionRequest(arg0 *databasemigrationservice.ModifyEventSubscriptionInput) (*request.Request, *databasemigrationservice.ModifyEventSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyEventSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.ModifyEventSubscriptionOutput)
	return ret0, ret1
}

// ModifyEventSubscriptionRequest indicates an expected call of ModifyEventSubscriptionRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyEventSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEventSubscriptionRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyEventSubscriptionRequest), arg0)
}

// ModifyEventSubscriptionWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyEventSubscriptionWithContext(arg0 aws.Context, arg1 *databasemigrationservice.ModifyEventSubscriptionInput, arg2 ...request.Option) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyEventSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.ModifyEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyEventSubscriptionWithContext indicates an expected call of ModifyEventSubscriptionWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyEventSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEventSubscriptionWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyEventSubscriptionWithContext), varargs...)
}

// ModifyReplicationInstance mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyReplicationInstance(arg0 *databasemigrationservice.ModifyReplicationInstanceInput) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyReplicationInstance", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.ModifyReplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyReplicationInstance indicates an expected call of ModifyReplicationInstance
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyReplicationInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyReplicationInstance", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyReplicationInstance), arg0)
}

// ModifyReplicationInstanceRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyReplicationInstanceRequest(arg0 *databasemigrationservice.ModifyReplicationInstanceInput) (*request.Request, *databasemigrationservice.ModifyReplicationInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyReplicationInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.ModifyReplicationInstanceOutput)
	return ret0, ret1
}

// ModifyReplicationInstanceRequest indicates an expected call of ModifyReplicationInstanceRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyReplicationInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyReplicationInstanceRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyReplicationInstanceRequest), arg0)
}

// ModifyReplicationInstanceWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyReplicationInstanceWithContext(arg0 aws.Context, arg1 *databasemigrationservice.ModifyReplicationInstanceInput, arg2 ...request.Option) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyReplicationInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.ModifyReplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyReplicationInstanceWithContext indicates an expected call of ModifyReplicationInstanceWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyReplicationInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyReplicationInstanceWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyReplicationInstanceWithContext), varargs...)
}

// ModifyReplicationSubnetGroup mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyReplicationSubnetGroup(arg0 *databasemigrationservice.ModifyReplicationSubnetGroupInput) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyReplicationSubnetGroup", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.ModifyReplicationSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyReplicationSubnetGroup indicates an expected call of ModifyReplicationSubnetGroup
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyReplicationSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyReplicationSubnetGroup", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyReplicationSubnetGroup), arg0)
}

// ModifyReplicationSubnetGroupRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyReplicationSubnetGroupRequest(arg0 *databasemigrationservice.ModifyReplicationSubnetGroupInput) (*request.Request, *databasemigrationservice.ModifyReplicationSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyReplicationSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.ModifyReplicationSubnetGroupOutput)
	return ret0, ret1
}

// ModifyReplicationSubnetGroupRequest indicates an expected call of ModifyReplicationSubnetGroupRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyReplicationSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyReplicationSubnetGroupRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyReplicationSubnetGroupRequest), arg0)
}

// ModifyReplicationSubnetGroupWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyReplicationSubnetGroupWithContext(arg0 aws.Context, arg1 *databasemigrationservice.ModifyReplicationSubnetGroupInput, arg2 ...request.Option) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyReplicationSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.ModifyReplicationSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyReplicationSubnetGroupWithContext indicates an expected call of ModifyReplicationSubnetGroupWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyReplicationSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyReplicationSubnetGroupWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyReplicationSubnetGroupWithContext), varargs...)
}

// ModifyReplicationTask mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyReplicationTask(arg0 *databasemigrationservice.ModifyReplicationTaskInput) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyReplicationTask", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.ModifyReplicationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyReplicationTask indicates an expected call of ModifyReplicationTask
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyReplicationTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyReplicationTask", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyReplicationTask), arg0)
}

// ModifyReplicationTaskRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyReplicationTaskRequest(arg0 *databasemigrationservice.ModifyReplicationTaskInput) (*request.Request, *databasemigrationservice.ModifyReplicationTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyReplicationTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.ModifyReplicationTaskOutput)
	return ret0, ret1
}

// ModifyReplicationTaskRequest indicates an expected call of ModifyReplicationTaskRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyReplicationTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyReplicationTaskRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyReplicationTaskRequest), arg0)
}

// ModifyReplicationTaskWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) ModifyReplicationTaskWithContext(arg0 aws.Context, arg1 *databasemigrationservice.ModifyReplicationTaskInput, arg2 ...request.Option) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyReplicationTaskWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.ModifyReplicationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyReplicationTaskWithContext indicates an expected call of ModifyReplicationTaskWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ModifyReplicationTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyReplicationTaskWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ModifyReplicationTaskWithContext), varargs...)
}

// RebootReplicationInstance mocks base method
func (m *MockDatabaseMigrationServiceAPI) RebootReplicationInstance(arg0 *databasemigrationservice.RebootReplicationInstanceInput) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootReplicationInstance", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.RebootReplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootReplicationInstance indicates an expected call of RebootReplicationInstance
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) RebootReplicationInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootReplicationInstance", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).RebootReplicationInstance), arg0)
}

// RebootReplicationInstanceRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) RebootReplicationInstanceRequest(arg0 *databasemigrationservice.RebootReplicationInstanceInput) (*request.Request, *databasemigrationservice.RebootReplicationInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootReplicationInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.RebootReplicationInstanceOutput)
	return ret0, ret1
}

// RebootReplicationInstanceRequest indicates an expected call of RebootReplicationInstanceRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) RebootReplicationInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootReplicationInstanceRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).RebootReplicationInstanceRequest), arg0)
}

// RebootReplicationInstanceWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) RebootReplicationInstanceWithContext(arg0 aws.Context, arg1 *databasemigrationservice.RebootReplicationInstanceInput, arg2 ...request.Option) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebootReplicationInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.RebootReplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootReplicationInstanceWithContext indicates an expected call of RebootReplicationInstanceWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) RebootReplicationInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootReplicationInstanceWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).RebootReplicationInstanceWithContext), varargs...)
}

// RefreshSchemas mocks base method
func (m *MockDatabaseMigrationServiceAPI) RefreshSchemas(arg0 *databasemigrationservice.RefreshSchemasInput) (*databasemigrationservice.RefreshSchemasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSchemas", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.RefreshSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshSchemas indicates an expected call of RefreshSchemas
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) RefreshSchemas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSchemas", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).RefreshSchemas), arg0)
}

// RefreshSchemasRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) RefreshSchemasRequest(arg0 *databasemigrationservice.RefreshSchemasInput) (*request.Request, *databasemigrationservice.RefreshSchemasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSchemasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.RefreshSchemasOutput)
	return ret0, ret1
}

// RefreshSchemasRequest indicates an expected call of RefreshSchemasRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) RefreshSchemasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSchemasRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).RefreshSchemasRequest), arg0)
}

// RefreshSchemasWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) RefreshSchemasWithContext(arg0 aws.Context, arg1 *databasemigrationservice.RefreshSchemasInput, arg2 ...request.Option) (*databasemigrationservice.RefreshSchemasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RefreshSchemasWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.RefreshSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshSchemasWithContext indicates an expected call of RefreshSchemasWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) RefreshSchemasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSchemasWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).RefreshSchemasWithContext), varargs...)
}

// ReloadTables mocks base method
func (m *MockDatabaseMigrationServiceAPI) ReloadTables(arg0 *databasemigrationservice.ReloadTablesInput) (*databasemigrationservice.ReloadTablesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadTables", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.ReloadTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReloadTables indicates an expected call of ReloadTables
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ReloadTables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadTables", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ReloadTables), arg0)
}

// ReloadTablesRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) ReloadTablesRequest(arg0 *databasemigrationservice.ReloadTablesInput) (*request.Request, *databasemigrationservice.ReloadTablesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadTablesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.ReloadTablesOutput)
	return ret0, ret1
}

// ReloadTablesRequest indicates an expected call of ReloadTablesRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ReloadTablesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadTablesRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ReloadTablesRequest), arg0)
}

// ReloadTablesWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) ReloadTablesWithContext(arg0 aws.Context, arg1 *databasemigrationservice.ReloadTablesInput, arg2 ...request.Option) (*databasemigrationservice.ReloadTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReloadTablesWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.ReloadTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReloadTablesWithContext indicates an expected call of ReloadTablesWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) ReloadTablesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadTablesWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).ReloadTablesWithContext), varargs...)
}

// RemoveTagsFromResource mocks base method
func (m *MockDatabaseMigrationServiceAPI) RemoveTagsFromResource(arg0 *databasemigrationservice.RemoveTagsFromResourceInput) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromResource", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.RemoveTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromResource indicates an expected call of RemoveTagsFromResource
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) RemoveTagsFromResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResource", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).RemoveTagsFromResource), arg0)
}

// RemoveTagsFromResourceRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) RemoveTagsFromResourceRequest(arg0 *databasemigrationservice.RemoveTagsFromResourceInput) (*request.Request, *databasemigrationservice.RemoveTagsFromResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.RemoveTagsFromResourceOutput)
	return ret0, ret1
}

// RemoveTagsFromResourceRequest indicates an expected call of RemoveTagsFromResourceRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) RemoveTagsFromResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResourceRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).RemoveTagsFromResourceRequest), arg0)
}

// RemoveTagsFromResourceWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) RemoveTagsFromResourceWithContext(arg0 aws.Context, arg1 *databasemigrationservice.RemoveTagsFromResourceInput, arg2 ...request.Option) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTagsFromResourceWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.RemoveTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromResourceWithContext indicates an expected call of RemoveTagsFromResourceWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) RemoveTagsFromResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResourceWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).RemoveTagsFromResourceWithContext), varargs...)
}

// StartReplicationTask mocks base method
func (m *MockDatabaseMigrationServiceAPI) StartReplicationTask(arg0 *databasemigrationservice.StartReplicationTaskInput) (*databasemigrationservice.StartReplicationTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplicationTask", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.StartReplicationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplicationTask indicates an expected call of StartReplicationTask
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) StartReplicationTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationTask", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).StartReplicationTask), arg0)
}

// StartReplicationTaskAssessment mocks base method
func (m *MockDatabaseMigrationServiceAPI) StartReplicationTaskAssessment(arg0 *databasemigrationservice.StartReplicationTaskAssessmentInput) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplicationTaskAssessment", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.StartReplicationTaskAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplicationTaskAssessment indicates an expected call of StartReplicationTaskAssessment
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) StartReplicationTaskAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationTaskAssessment", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).StartReplicationTaskAssessment), arg0)
}

// StartReplicationTaskAssessmentRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) StartReplicationTaskAssessmentRequest(arg0 *databasemigrationservice.StartReplicationTaskAssessmentInput) (*request.Request, *databasemigrationservice.StartReplicationTaskAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplicationTaskAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.StartReplicationTaskAssessmentOutput)
	return ret0, ret1
}

// StartReplicationTaskAssessmentRequest indicates an expected call of StartReplicationTaskAssessmentRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) StartReplicationTaskAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationTaskAssessmentRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).StartReplicationTaskAssessmentRequest), arg0)
}

// StartReplicationTaskAssessmentWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) StartReplicationTaskAssessmentWithContext(arg0 aws.Context, arg1 *databasemigrationservice.StartReplicationTaskAssessmentInput, arg2 ...request.Option) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReplicationTaskAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.StartReplicationTaskAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplicationTaskAssessmentWithContext indicates an expected call of StartReplicationTaskAssessmentWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) StartReplicationTaskAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationTaskAssessmentWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).StartReplicationTaskAssessmentWithContext), varargs...)
}

// StartReplicationTaskRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) StartReplicationTaskRequest(arg0 *databasemigrationservice.StartReplicationTaskInput) (*request.Request, *databasemigrationservice.StartReplicationTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplicationTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.StartReplicationTaskOutput)
	return ret0, ret1
}

// StartReplicationTaskRequest indicates an expected call of StartReplicationTaskRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) StartReplicationTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationTaskRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).StartReplicationTaskRequest), arg0)
}

// StartReplicationTaskWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) StartReplicationTaskWithContext(arg0 aws.Context, arg1 *databasemigrationservice.StartReplicationTaskInput, arg2 ...request.Option) (*databasemigrationservice.StartReplicationTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReplicationTaskWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.StartReplicationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplicationTaskWithContext indicates an expected call of StartReplicationTaskWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) StartReplicationTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplicationTaskWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).StartReplicationTaskWithContext), varargs...)
}

// StopReplicationTask mocks base method
func (m *MockDatabaseMigrationServiceAPI) StopReplicationTask(arg0 *databasemigrationservice.StopReplicationTaskInput) (*databasemigrationservice.StopReplicationTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopReplicationTask", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.StopReplicationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopReplicationTask indicates an expected call of StopReplicationTask
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) StopReplicationTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReplicationTask", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).StopReplicationTask), arg0)
}

// StopReplicationTaskRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) StopReplicationTaskRequest(arg0 *databasemigrationservice.StopReplicationTaskInput) (*request.Request, *databasemigrationservice.StopReplicationTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopReplicationTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.StopReplicationTaskOutput)
	return ret0, ret1
}

// StopReplicationTaskRequest indicates an expected call of StopReplicationTaskRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) StopReplicationTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReplicationTaskRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).StopReplicationTaskRequest), arg0)
}

// StopReplicationTaskWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) StopReplicationTaskWithContext(arg0 aws.Context, arg1 *databasemigrationservice.StopReplicationTaskInput, arg2 ...request.Option) (*databasemigrationservice.StopReplicationTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopReplicationTaskWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.StopReplicationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopReplicationTaskWithContext indicates an expected call of StopReplicationTaskWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) StopReplicationTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReplicationTaskWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).StopReplicationTaskWithContext), varargs...)
}

// TestConnection mocks base method
func (m *MockDatabaseMigrationServiceAPI) TestConnection(arg0 *databasemigrationservice.TestConnectionInput) (*databasemigrationservice.TestConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestConnection", arg0)
	ret0, _ := ret[0].(*databasemigrationservice.TestConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestConnection indicates an expected call of TestConnection
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) TestConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnection", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).TestConnection), arg0)
}

// TestConnectionRequest mocks base method
func (m *MockDatabaseMigrationServiceAPI) TestConnectionRequest(arg0 *databasemigrationservice.TestConnectionInput) (*request.Request, *databasemigrationservice.TestConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*databasemigrationservice.TestConnectionOutput)
	return ret0, ret1
}

// TestConnectionRequest indicates an expected call of TestConnectionRequest
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) TestConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnectionRequest", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).TestConnectionRequest), arg0)
}

// TestConnectionWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) TestConnectionWithContext(arg0 aws.Context, arg1 *databasemigrationservice.TestConnectionInput, arg2 ...request.Option) (*databasemigrationservice.TestConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.TestConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestConnectionWithContext indicates an expected call of TestConnectionWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) TestConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnectionWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).TestConnectionWithContext), varargs...)
}

// WaitUntilEndpointDeleted mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilEndpointDeleted(arg0 *databasemigrationservice.DescribeEndpointsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilEndpointDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEndpointDeleted indicates an expected call of WaitUntilEndpointDeleted
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilEndpointDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEndpointDeleted", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilEndpointDeleted), arg0)
}

// WaitUntilEndpointDeletedWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilEndpointDeletedWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeEndpointsInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilEndpointDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEndpointDeletedWithContext indicates an expected call of WaitUntilEndpointDeletedWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilEndpointDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEndpointDeletedWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilEndpointDeletedWithContext), varargs...)
}

// WaitUntilReplicationInstanceAvailable mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationInstanceAvailable(arg0 *databasemigrationservice.DescribeReplicationInstancesInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReplicationInstanceAvailable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationInstanceAvailable indicates an expected call of WaitUntilReplicationInstanceAvailable
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationInstanceAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationInstanceAvailable", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationInstanceAvailable), arg0)
}

// WaitUntilReplicationInstanceAvailableWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationInstanceAvailableWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationInstancesInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilReplicationInstanceAvailableWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationInstanceAvailableWithContext indicates an expected call of WaitUntilReplicationInstanceAvailableWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationInstanceAvailableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationInstanceAvailableWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationInstanceAvailableWithContext), varargs...)
}

// WaitUntilReplicationInstanceDeleted mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationInstanceDeleted(arg0 *databasemigrationservice.DescribeReplicationInstancesInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReplicationInstanceDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationInstanceDeleted indicates an expected call of WaitUntilReplicationInstanceDeleted
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationInstanceDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationInstanceDeleted", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationInstanceDeleted), arg0)
}

// WaitUntilReplicationInstanceDeletedWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationInstanceDeletedWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationInstancesInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilReplicationInstanceDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationInstanceDeletedWithContext indicates an expected call of WaitUntilReplicationInstanceDeletedWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationInstanceDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationInstanceDeletedWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationInstanceDeletedWithContext), varargs...)
}

// WaitUntilReplicationTaskDeleted mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationTaskDeleted(arg0 *databasemigrationservice.DescribeReplicationTasksInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReplicationTaskDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationTaskDeleted indicates an expected call of WaitUntilReplicationTaskDeleted
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationTaskDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationTaskDeleted", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationTaskDeleted), arg0)
}

// WaitUntilReplicationTaskDeletedWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationTaskDeletedWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationTasksInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilReplicationTaskDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationTaskDeletedWithContext indicates an expected call of WaitUntilReplicationTaskDeletedWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationTaskDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationTaskDeletedWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationTaskDeletedWithContext), varargs...)
}

// WaitUntilReplicationTaskReady mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationTaskReady(arg0 *databasemigrationservice.DescribeReplicationTasksInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReplicationTaskReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationTaskReady indicates an expected call of WaitUntilReplicationTaskReady
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationTaskReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationTaskReady", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationTaskReady), arg0)
}

// WaitUntilReplicationTaskReadyWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationTaskReadyWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationTasksInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilReplicationTaskReadyWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationTaskReadyWithContext indicates an expected call of WaitUntilReplicationTaskReadyWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationTaskReadyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationTaskReadyWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationTaskReadyWithContext), varargs...)
}

// WaitUntilReplicationTaskRunning mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationTaskRunning(arg0 *databasemigrationservice.DescribeReplicationTasksInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReplicationTaskRunning", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationTaskRunning indicates an expected call of WaitUntilReplicationTaskRunning
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationTaskRunning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationTaskRunning", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationTaskRunning), arg0)
}

// WaitUntilReplicationTaskRunningWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationTaskRunningWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationTasksInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilReplicationTaskRunningWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationTaskRunningWithContext indicates an expected call of WaitUntilReplicationTaskRunningWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationTaskRunningWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationTaskRunningWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationTaskRunningWithContext), varargs...)
}

// WaitUntilReplicationTaskStopped mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationTaskStopped(arg0 *databasemigrationservice.DescribeReplicationTasksInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReplicationTaskStopped", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationTaskStopped indicates an expected call of WaitUntilReplicationTaskStopped
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationTaskStopped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationTaskStopped", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationTaskStopped), arg0)
}

// WaitUntilReplicationTaskStoppedWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilReplicationTaskStoppedWithContext(arg0 aws.Context, arg1 *databasemigrationservice.DescribeReplicationTasksInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilReplicationTaskStoppedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReplicationTaskStoppedWithContext indicates an expected call of WaitUntilReplicationTaskStoppedWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilReplicationTaskStoppedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReplicationTaskStoppedWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilReplicationTaskStoppedWithContext), varargs...)
}

// WaitUntilTestConnectionSucceeds mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilTestConnectionSucceeds(arg0 *databasemigrationservice.TestConnectionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilTestConnectionSucceeds", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTestConnectionSucceeds indicates an expected call of WaitUntilTestConnectionSucceeds
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilTestConnectionSucceeds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTestConnectionSucceeds", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilTestConnectionSucceeds), arg0)
}

// WaitUntilTestConnectionSucceedsWithContext mocks base method
func (m *MockDatabaseMigrationServiceAPI) WaitUntilTestConnectionSucceedsWithContext(arg0 aws.Context, arg1 *databasemigrationservice.TestConnectionInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilTestConnectionSucceedsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTestConnectionSucceedsWithContext indicates an expected call of WaitUntilTestConnectionSucceedsWithContext
func (mr *MockDatabaseMigrationServiceAPIMockRecorder) WaitUntilTestConnectionSucceedsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTestConnectionSucceedsWithContext", reflect.TypeOf((*MockDatabaseMigrationServiceAPI)(nil).WaitUntilTestConnectionSucceedsWithContext), varargs...)
}
