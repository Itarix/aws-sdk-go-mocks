// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/translate/translateiface (interfaces: TranslateAPI)

// Package translatemock is a generated GoMock package.
package translatemock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	translate "github.com/aws/aws-sdk-go/service/translate"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTranslateAPI is a mock of TranslateAPI interface
type MockTranslateAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTranslateAPIMockRecorder
}

// MockTranslateAPIMockRecorder is the mock recorder for MockTranslateAPI
type MockTranslateAPIMockRecorder struct {
	mock *MockTranslateAPI
}

// NewMockTranslateAPI creates a new mock instance
func NewMockTranslateAPI(ctrl *gomock.Controller) *MockTranslateAPI {
	mock := &MockTranslateAPI{ctrl: ctrl}
	mock.recorder = &MockTranslateAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTranslateAPI) EXPECT() *MockTranslateAPIMockRecorder {
	return m.recorder
}

// Text mocks base method
func (m *MockTranslateAPI) Text(arg0 *translate.TextInput) (*translate.TextOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text", arg0)
	ret0, _ := ret[0].(*translate.TextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Text indicates an expected call of Text
func (mr *MockTranslateAPIMockRecorder) Text(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockTranslateAPI)(nil).Text), arg0)
}

// TextRequest mocks base method
func (m *MockTranslateAPI) TextRequest(arg0 *translate.TextInput) (*request.Request, *translate.TextOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.TextOutput)
	return ret0, ret1
}

// TextRequest indicates an expected call of TextRequest
func (mr *MockTranslateAPIMockRecorder) TextRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextRequest", reflect.TypeOf((*MockTranslateAPI)(nil).TextRequest), arg0)
}

// TextWithContext mocks base method
func (m *MockTranslateAPI) TextWithContext(arg0 aws.Context, arg1 *translate.TextInput, arg2 ...request.Option) (*translate.TextOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TextWithContext", varargs...)
	ret0, _ := ret[0].(*translate.TextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TextWithContext indicates an expected call of TextWithContext
func (mr *MockTranslateAPIMockRecorder) TextWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).TextWithContext), varargs...)
}
