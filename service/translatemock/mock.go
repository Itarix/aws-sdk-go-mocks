// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/translate/translateiface (interfaces: TranslateAPI)

// Package translatemock is a generated GoMock package.
package translatemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	translate "github.com/aws/aws-sdk-go/service/translate"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTranslateAPI is a mock of TranslateAPI interface
type MockTranslateAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTranslateAPIMockRecorder
}

// MockTranslateAPIMockRecorder is the mock recorder for MockTranslateAPI
type MockTranslateAPIMockRecorder struct {
	mock *MockTranslateAPI
}

// NewMockTranslateAPI creates a new mock instance
func NewMockTranslateAPI(ctrl *gomock.Controller) *MockTranslateAPI {
	mock := &MockTranslateAPI{ctrl: ctrl}
	mock.recorder = &MockTranslateAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTranslateAPI) EXPECT() *MockTranslateAPIMockRecorder {
	return m.recorder
}

// CreateParallelData mocks base method
func (m *MockTranslateAPI) CreateParallelData(arg0 *translate.CreateParallelDataInput) (*translate.CreateParallelDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParallelData", arg0)
	ret0, _ := ret[0].(*translate.CreateParallelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParallelData indicates an expected call of CreateParallelData
func (mr *MockTranslateAPIMockRecorder) CreateParallelData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParallelData", reflect.TypeOf((*MockTranslateAPI)(nil).CreateParallelData), arg0)
}

// CreateParallelDataRequest mocks base method
func (m *MockTranslateAPI) CreateParallelDataRequest(arg0 *translate.CreateParallelDataInput) (*request.Request, *translate.CreateParallelDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParallelDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.CreateParallelDataOutput)
	return ret0, ret1
}

// CreateParallelDataRequest indicates an expected call of CreateParallelDataRequest
func (mr *MockTranslateAPIMockRecorder) CreateParallelDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParallelDataRequest", reflect.TypeOf((*MockTranslateAPI)(nil).CreateParallelDataRequest), arg0)
}

// CreateParallelDataWithContext mocks base method
func (m *MockTranslateAPI) CreateParallelDataWithContext(arg0 context.Context, arg1 *translate.CreateParallelDataInput, arg2 ...request.Option) (*translate.CreateParallelDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateParallelDataWithContext", varargs...)
	ret0, _ := ret[0].(*translate.CreateParallelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParallelDataWithContext indicates an expected call of CreateParallelDataWithContext
func (mr *MockTranslateAPIMockRecorder) CreateParallelDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParallelDataWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).CreateParallelDataWithContext), varargs...)
}

// DeleteParallelData mocks base method
func (m *MockTranslateAPI) DeleteParallelData(arg0 *translate.DeleteParallelDataInput) (*translate.DeleteParallelDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParallelData", arg0)
	ret0, _ := ret[0].(*translate.DeleteParallelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteParallelData indicates an expected call of DeleteParallelData
func (mr *MockTranslateAPIMockRecorder) DeleteParallelData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParallelData", reflect.TypeOf((*MockTranslateAPI)(nil).DeleteParallelData), arg0)
}

// DeleteParallelDataRequest mocks base method
func (m *MockTranslateAPI) DeleteParallelDataRequest(arg0 *translate.DeleteParallelDataInput) (*request.Request, *translate.DeleteParallelDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParallelDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.DeleteParallelDataOutput)
	return ret0, ret1
}

// DeleteParallelDataRequest indicates an expected call of DeleteParallelDataRequest
func (mr *MockTranslateAPIMockRecorder) DeleteParallelDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParallelDataRequest", reflect.TypeOf((*MockTranslateAPI)(nil).DeleteParallelDataRequest), arg0)
}

// DeleteParallelDataWithContext mocks base method
func (m *MockTranslateAPI) DeleteParallelDataWithContext(arg0 context.Context, arg1 *translate.DeleteParallelDataInput, arg2 ...request.Option) (*translate.DeleteParallelDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteParallelDataWithContext", varargs...)
	ret0, _ := ret[0].(*translate.DeleteParallelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteParallelDataWithContext indicates an expected call of DeleteParallelDataWithContext
func (mr *MockTranslateAPIMockRecorder) DeleteParallelDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParallelDataWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).DeleteParallelDataWithContext), varargs...)
}

// DeleteTerminology mocks base method
func (m *MockTranslateAPI) DeleteTerminology(arg0 *translate.DeleteTerminologyInput) (*translate.DeleteTerminologyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTerminology", arg0)
	ret0, _ := ret[0].(*translate.DeleteTerminologyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTerminology indicates an expected call of DeleteTerminology
func (mr *MockTranslateAPIMockRecorder) DeleteTerminology(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTerminology", reflect.TypeOf((*MockTranslateAPI)(nil).DeleteTerminology), arg0)
}

// DeleteTerminologyRequest mocks base method
func (m *MockTranslateAPI) DeleteTerminologyRequest(arg0 *translate.DeleteTerminologyInput) (*request.Request, *translate.DeleteTerminologyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTerminologyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.DeleteTerminologyOutput)
	return ret0, ret1
}

// DeleteTerminologyRequest indicates an expected call of DeleteTerminologyRequest
func (mr *MockTranslateAPIMockRecorder) DeleteTerminologyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTerminologyRequest", reflect.TypeOf((*MockTranslateAPI)(nil).DeleteTerminologyRequest), arg0)
}

// DeleteTerminologyWithContext mocks base method
func (m *MockTranslateAPI) DeleteTerminologyWithContext(arg0 context.Context, arg1 *translate.DeleteTerminologyInput, arg2 ...request.Option) (*translate.DeleteTerminologyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTerminologyWithContext", varargs...)
	ret0, _ := ret[0].(*translate.DeleteTerminologyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTerminologyWithContext indicates an expected call of DeleteTerminologyWithContext
func (mr *MockTranslateAPIMockRecorder) DeleteTerminologyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTerminologyWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).DeleteTerminologyWithContext), varargs...)
}

// DescribeTextTranslationJob mocks base method
func (m *MockTranslateAPI) DescribeTextTranslationJob(arg0 *translate.DescribeTextTranslationJobInput) (*translate.DescribeTextTranslationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTextTranslationJob", arg0)
	ret0, _ := ret[0].(*translate.DescribeTextTranslationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTextTranslationJob indicates an expected call of DescribeTextTranslationJob
func (mr *MockTranslateAPIMockRecorder) DescribeTextTranslationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTextTranslationJob", reflect.TypeOf((*MockTranslateAPI)(nil).DescribeTextTranslationJob), arg0)
}

// DescribeTextTranslationJobRequest mocks base method
func (m *MockTranslateAPI) DescribeTextTranslationJobRequest(arg0 *translate.DescribeTextTranslationJobInput) (*request.Request, *translate.DescribeTextTranslationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTextTranslationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.DescribeTextTranslationJobOutput)
	return ret0, ret1
}

// DescribeTextTranslationJobRequest indicates an expected call of DescribeTextTranslationJobRequest
func (mr *MockTranslateAPIMockRecorder) DescribeTextTranslationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTextTranslationJobRequest", reflect.TypeOf((*MockTranslateAPI)(nil).DescribeTextTranslationJobRequest), arg0)
}

// DescribeTextTranslationJobWithContext mocks base method
func (m *MockTranslateAPI) DescribeTextTranslationJobWithContext(arg0 context.Context, arg1 *translate.DescribeTextTranslationJobInput, arg2 ...request.Option) (*translate.DescribeTextTranslationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTextTranslationJobWithContext", varargs...)
	ret0, _ := ret[0].(*translate.DescribeTextTranslationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTextTranslationJobWithContext indicates an expected call of DescribeTextTranslationJobWithContext
func (mr *MockTranslateAPIMockRecorder) DescribeTextTranslationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTextTranslationJobWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).DescribeTextTranslationJobWithContext), varargs...)
}

// GetParallelData mocks base method
func (m *MockTranslateAPI) GetParallelData(arg0 *translate.GetParallelDataInput) (*translate.GetParallelDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParallelData", arg0)
	ret0, _ := ret[0].(*translate.GetParallelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParallelData indicates an expected call of GetParallelData
func (mr *MockTranslateAPIMockRecorder) GetParallelData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParallelData", reflect.TypeOf((*MockTranslateAPI)(nil).GetParallelData), arg0)
}

// GetParallelDataRequest mocks base method
func (m *MockTranslateAPI) GetParallelDataRequest(arg0 *translate.GetParallelDataInput) (*request.Request, *translate.GetParallelDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParallelDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.GetParallelDataOutput)
	return ret0, ret1
}

// GetParallelDataRequest indicates an expected call of GetParallelDataRequest
func (mr *MockTranslateAPIMockRecorder) GetParallelDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParallelDataRequest", reflect.TypeOf((*MockTranslateAPI)(nil).GetParallelDataRequest), arg0)
}

// GetParallelDataWithContext mocks base method
func (m *MockTranslateAPI) GetParallelDataWithContext(arg0 context.Context, arg1 *translate.GetParallelDataInput, arg2 ...request.Option) (*translate.GetParallelDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParallelDataWithContext", varargs...)
	ret0, _ := ret[0].(*translate.GetParallelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParallelDataWithContext indicates an expected call of GetParallelDataWithContext
func (mr *MockTranslateAPIMockRecorder) GetParallelDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParallelDataWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).GetParallelDataWithContext), varargs...)
}

// GetTerminology mocks base method
func (m *MockTranslateAPI) GetTerminology(arg0 *translate.GetTerminologyInput) (*translate.GetTerminologyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTerminology", arg0)
	ret0, _ := ret[0].(*translate.GetTerminologyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTerminology indicates an expected call of GetTerminology
func (mr *MockTranslateAPIMockRecorder) GetTerminology(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerminology", reflect.TypeOf((*MockTranslateAPI)(nil).GetTerminology), arg0)
}

// GetTerminologyRequest mocks base method
func (m *MockTranslateAPI) GetTerminologyRequest(arg0 *translate.GetTerminologyInput) (*request.Request, *translate.GetTerminologyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTerminologyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.GetTerminologyOutput)
	return ret0, ret1
}

// GetTerminologyRequest indicates an expected call of GetTerminologyRequest
func (mr *MockTranslateAPIMockRecorder) GetTerminologyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerminologyRequest", reflect.TypeOf((*MockTranslateAPI)(nil).GetTerminologyRequest), arg0)
}

// GetTerminologyWithContext mocks base method
func (m *MockTranslateAPI) GetTerminologyWithContext(arg0 context.Context, arg1 *translate.GetTerminologyInput, arg2 ...request.Option) (*translate.GetTerminologyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTerminologyWithContext", varargs...)
	ret0, _ := ret[0].(*translate.GetTerminologyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTerminologyWithContext indicates an expected call of GetTerminologyWithContext
func (mr *MockTranslateAPIMockRecorder) GetTerminologyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerminologyWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).GetTerminologyWithContext), varargs...)
}

// ImportTerminology mocks base method
func (m *MockTranslateAPI) ImportTerminology(arg0 *translate.ImportTerminologyInput) (*translate.ImportTerminologyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportTerminology", arg0)
	ret0, _ := ret[0].(*translate.ImportTerminologyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportTerminology indicates an expected call of ImportTerminology
func (mr *MockTranslateAPIMockRecorder) ImportTerminology(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportTerminology", reflect.TypeOf((*MockTranslateAPI)(nil).ImportTerminology), arg0)
}

// ImportTerminologyRequest mocks base method
func (m *MockTranslateAPI) ImportTerminologyRequest(arg0 *translate.ImportTerminologyInput) (*request.Request, *translate.ImportTerminologyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportTerminologyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.ImportTerminologyOutput)
	return ret0, ret1
}

// ImportTerminologyRequest indicates an expected call of ImportTerminologyRequest
func (mr *MockTranslateAPIMockRecorder) ImportTerminologyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportTerminologyRequest", reflect.TypeOf((*MockTranslateAPI)(nil).ImportTerminologyRequest), arg0)
}

// ImportTerminologyWithContext mocks base method
func (m *MockTranslateAPI) ImportTerminologyWithContext(arg0 context.Context, arg1 *translate.ImportTerminologyInput, arg2 ...request.Option) (*translate.ImportTerminologyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportTerminologyWithContext", varargs...)
	ret0, _ := ret[0].(*translate.ImportTerminologyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportTerminologyWithContext indicates an expected call of ImportTerminologyWithContext
func (mr *MockTranslateAPIMockRecorder) ImportTerminologyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportTerminologyWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).ImportTerminologyWithContext), varargs...)
}

// ListLanguages mocks base method
func (m *MockTranslateAPI) ListLanguages(arg0 *translate.ListLanguagesInput) (*translate.ListLanguagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLanguages", arg0)
	ret0, _ := ret[0].(*translate.ListLanguagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLanguages indicates an expected call of ListLanguages
func (mr *MockTranslateAPIMockRecorder) ListLanguages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguages", reflect.TypeOf((*MockTranslateAPI)(nil).ListLanguages), arg0)
}

// ListLanguagesPages mocks base method
func (m *MockTranslateAPI) ListLanguagesPages(arg0 *translate.ListLanguagesInput, arg1 func(*translate.ListLanguagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLanguagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLanguagesPages indicates an expected call of ListLanguagesPages
func (mr *MockTranslateAPIMockRecorder) ListLanguagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguagesPages", reflect.TypeOf((*MockTranslateAPI)(nil).ListLanguagesPages), arg0, arg1)
}

// ListLanguagesPagesWithContext mocks base method
func (m *MockTranslateAPI) ListLanguagesPagesWithContext(arg0 context.Context, arg1 *translate.ListLanguagesInput, arg2 func(*translate.ListLanguagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLanguagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLanguagesPagesWithContext indicates an expected call of ListLanguagesPagesWithContext
func (mr *MockTranslateAPIMockRecorder) ListLanguagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguagesPagesWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).ListLanguagesPagesWithContext), varargs...)
}

// ListLanguagesRequest mocks base method
func (m *MockTranslateAPI) ListLanguagesRequest(arg0 *translate.ListLanguagesInput) (*request.Request, *translate.ListLanguagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLanguagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.ListLanguagesOutput)
	return ret0, ret1
}

// ListLanguagesRequest indicates an expected call of ListLanguagesRequest
func (mr *MockTranslateAPIMockRecorder) ListLanguagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguagesRequest", reflect.TypeOf((*MockTranslateAPI)(nil).ListLanguagesRequest), arg0)
}

// ListLanguagesWithContext mocks base method
func (m *MockTranslateAPI) ListLanguagesWithContext(arg0 context.Context, arg1 *translate.ListLanguagesInput, arg2 ...request.Option) (*translate.ListLanguagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLanguagesWithContext", varargs...)
	ret0, _ := ret[0].(*translate.ListLanguagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLanguagesWithContext indicates an expected call of ListLanguagesWithContext
func (mr *MockTranslateAPIMockRecorder) ListLanguagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguagesWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).ListLanguagesWithContext), varargs...)
}

// ListParallelData mocks base method
func (m *MockTranslateAPI) ListParallelData(arg0 *translate.ListParallelDataInput) (*translate.ListParallelDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParallelData", arg0)
	ret0, _ := ret[0].(*translate.ListParallelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParallelData indicates an expected call of ListParallelData
func (mr *MockTranslateAPIMockRecorder) ListParallelData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParallelData", reflect.TypeOf((*MockTranslateAPI)(nil).ListParallelData), arg0)
}

// ListParallelDataPages mocks base method
func (m *MockTranslateAPI) ListParallelDataPages(arg0 *translate.ListParallelDataInput, arg1 func(*translate.ListParallelDataOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParallelDataPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListParallelDataPages indicates an expected call of ListParallelDataPages
func (mr *MockTranslateAPIMockRecorder) ListParallelDataPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParallelDataPages", reflect.TypeOf((*MockTranslateAPI)(nil).ListParallelDataPages), arg0, arg1)
}

// ListParallelDataPagesWithContext mocks base method
func (m *MockTranslateAPI) ListParallelDataPagesWithContext(arg0 context.Context, arg1 *translate.ListParallelDataInput, arg2 func(*translate.ListParallelDataOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParallelDataPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListParallelDataPagesWithContext indicates an expected call of ListParallelDataPagesWithContext
func (mr *MockTranslateAPIMockRecorder) ListParallelDataPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParallelDataPagesWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).ListParallelDataPagesWithContext), varargs...)
}

// ListParallelDataRequest mocks base method
func (m *MockTranslateAPI) ListParallelDataRequest(arg0 *translate.ListParallelDataInput) (*request.Request, *translate.ListParallelDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParallelDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.ListParallelDataOutput)
	return ret0, ret1
}

// ListParallelDataRequest indicates an expected call of ListParallelDataRequest
func (mr *MockTranslateAPIMockRecorder) ListParallelDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParallelDataRequest", reflect.TypeOf((*MockTranslateAPI)(nil).ListParallelDataRequest), arg0)
}

// ListParallelDataWithContext mocks base method
func (m *MockTranslateAPI) ListParallelDataWithContext(arg0 context.Context, arg1 *translate.ListParallelDataInput, arg2 ...request.Option) (*translate.ListParallelDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParallelDataWithContext", varargs...)
	ret0, _ := ret[0].(*translate.ListParallelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParallelDataWithContext indicates an expected call of ListParallelDataWithContext
func (mr *MockTranslateAPIMockRecorder) ListParallelDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParallelDataWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).ListParallelDataWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockTranslateAPI) ListTagsForResource(arg0 *translate.ListTagsForResourceInput) (*translate.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*translate.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockTranslateAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockTranslateAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockTranslateAPI) ListTagsForResourceRequest(arg0 *translate.ListTagsForResourceInput) (*request.Request, *translate.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockTranslateAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockTranslateAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockTranslateAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *translate.ListTagsForResourceInput, arg2 ...request.Option) (*translate.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*translate.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockTranslateAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTerminologies mocks base method
func (m *MockTranslateAPI) ListTerminologies(arg0 *translate.ListTerminologiesInput) (*translate.ListTerminologiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTerminologies", arg0)
	ret0, _ := ret[0].(*translate.ListTerminologiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTerminologies indicates an expected call of ListTerminologies
func (mr *MockTranslateAPIMockRecorder) ListTerminologies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTerminologies", reflect.TypeOf((*MockTranslateAPI)(nil).ListTerminologies), arg0)
}

// ListTerminologiesPages mocks base method
func (m *MockTranslateAPI) ListTerminologiesPages(arg0 *translate.ListTerminologiesInput, arg1 func(*translate.ListTerminologiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTerminologiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTerminologiesPages indicates an expected call of ListTerminologiesPages
func (mr *MockTranslateAPIMockRecorder) ListTerminologiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTerminologiesPages", reflect.TypeOf((*MockTranslateAPI)(nil).ListTerminologiesPages), arg0, arg1)
}

// ListTerminologiesPagesWithContext mocks base method
func (m *MockTranslateAPI) ListTerminologiesPagesWithContext(arg0 context.Context, arg1 *translate.ListTerminologiesInput, arg2 func(*translate.ListTerminologiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTerminologiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTerminologiesPagesWithContext indicates an expected call of ListTerminologiesPagesWithContext
func (mr *MockTranslateAPIMockRecorder) ListTerminologiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTerminologiesPagesWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).ListTerminologiesPagesWithContext), varargs...)
}

// ListTerminologiesRequest mocks base method
func (m *MockTranslateAPI) ListTerminologiesRequest(arg0 *translate.ListTerminologiesInput) (*request.Request, *translate.ListTerminologiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTerminologiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.ListTerminologiesOutput)
	return ret0, ret1
}

// ListTerminologiesRequest indicates an expected call of ListTerminologiesRequest
func (mr *MockTranslateAPIMockRecorder) ListTerminologiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTerminologiesRequest", reflect.TypeOf((*MockTranslateAPI)(nil).ListTerminologiesRequest), arg0)
}

// ListTerminologiesWithContext mocks base method
func (m *MockTranslateAPI) ListTerminologiesWithContext(arg0 context.Context, arg1 *translate.ListTerminologiesInput, arg2 ...request.Option) (*translate.ListTerminologiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTerminologiesWithContext", varargs...)
	ret0, _ := ret[0].(*translate.ListTerminologiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTerminologiesWithContext indicates an expected call of ListTerminologiesWithContext
func (mr *MockTranslateAPIMockRecorder) ListTerminologiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTerminologiesWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).ListTerminologiesWithContext), varargs...)
}

// ListTextTranslationJobs mocks base method
func (m *MockTranslateAPI) ListTextTranslationJobs(arg0 *translate.ListTextTranslationJobsInput) (*translate.ListTextTranslationJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTextTranslationJobs", arg0)
	ret0, _ := ret[0].(*translate.ListTextTranslationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTextTranslationJobs indicates an expected call of ListTextTranslationJobs
func (mr *MockTranslateAPIMockRecorder) ListTextTranslationJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTextTranslationJobs", reflect.TypeOf((*MockTranslateAPI)(nil).ListTextTranslationJobs), arg0)
}

// ListTextTranslationJobsPages mocks base method
func (m *MockTranslateAPI) ListTextTranslationJobsPages(arg0 *translate.ListTextTranslationJobsInput, arg1 func(*translate.ListTextTranslationJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTextTranslationJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTextTranslationJobsPages indicates an expected call of ListTextTranslationJobsPages
func (mr *MockTranslateAPIMockRecorder) ListTextTranslationJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTextTranslationJobsPages", reflect.TypeOf((*MockTranslateAPI)(nil).ListTextTranslationJobsPages), arg0, arg1)
}

// ListTextTranslationJobsPagesWithContext mocks base method
func (m *MockTranslateAPI) ListTextTranslationJobsPagesWithContext(arg0 context.Context, arg1 *translate.ListTextTranslationJobsInput, arg2 func(*translate.ListTextTranslationJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTextTranslationJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTextTranslationJobsPagesWithContext indicates an expected call of ListTextTranslationJobsPagesWithContext
func (mr *MockTranslateAPIMockRecorder) ListTextTranslationJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTextTranslationJobsPagesWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).ListTextTranslationJobsPagesWithContext), varargs...)
}

// ListTextTranslationJobsRequest mocks base method
func (m *MockTranslateAPI) ListTextTranslationJobsRequest(arg0 *translate.ListTextTranslationJobsInput) (*request.Request, *translate.ListTextTranslationJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTextTranslationJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.ListTextTranslationJobsOutput)
	return ret0, ret1
}

// ListTextTranslationJobsRequest indicates an expected call of ListTextTranslationJobsRequest
func (mr *MockTranslateAPIMockRecorder) ListTextTranslationJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTextTranslationJobsRequest", reflect.TypeOf((*MockTranslateAPI)(nil).ListTextTranslationJobsRequest), arg0)
}

// ListTextTranslationJobsWithContext mocks base method
func (m *MockTranslateAPI) ListTextTranslationJobsWithContext(arg0 context.Context, arg1 *translate.ListTextTranslationJobsInput, arg2 ...request.Option) (*translate.ListTextTranslationJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTextTranslationJobsWithContext", varargs...)
	ret0, _ := ret[0].(*translate.ListTextTranslationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTextTranslationJobsWithContext indicates an expected call of ListTextTranslationJobsWithContext
func (mr *MockTranslateAPIMockRecorder) ListTextTranslationJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTextTranslationJobsWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).ListTextTranslationJobsWithContext), varargs...)
}

// StartTextTranslationJob mocks base method
func (m *MockTranslateAPI) StartTextTranslationJob(arg0 *translate.StartTextTranslationJobInput) (*translate.StartTextTranslationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTextTranslationJob", arg0)
	ret0, _ := ret[0].(*translate.StartTextTranslationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTextTranslationJob indicates an expected call of StartTextTranslationJob
func (mr *MockTranslateAPIMockRecorder) StartTextTranslationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTextTranslationJob", reflect.TypeOf((*MockTranslateAPI)(nil).StartTextTranslationJob), arg0)
}

// StartTextTranslationJobRequest mocks base method
func (m *MockTranslateAPI) StartTextTranslationJobRequest(arg0 *translate.StartTextTranslationJobInput) (*request.Request, *translate.StartTextTranslationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTextTranslationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.StartTextTranslationJobOutput)
	return ret0, ret1
}

// StartTextTranslationJobRequest indicates an expected call of StartTextTranslationJobRequest
func (mr *MockTranslateAPIMockRecorder) StartTextTranslationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTextTranslationJobRequest", reflect.TypeOf((*MockTranslateAPI)(nil).StartTextTranslationJobRequest), arg0)
}

// StartTextTranslationJobWithContext mocks base method
func (m *MockTranslateAPI) StartTextTranslationJobWithContext(arg0 context.Context, arg1 *translate.StartTextTranslationJobInput, arg2 ...request.Option) (*translate.StartTextTranslationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTextTranslationJobWithContext", varargs...)
	ret0, _ := ret[0].(*translate.StartTextTranslationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTextTranslationJobWithContext indicates an expected call of StartTextTranslationJobWithContext
func (mr *MockTranslateAPIMockRecorder) StartTextTranslationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTextTranslationJobWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).StartTextTranslationJobWithContext), varargs...)
}

// StopTextTranslationJob mocks base method
func (m *MockTranslateAPI) StopTextTranslationJob(arg0 *translate.StopTextTranslationJobInput) (*translate.StopTextTranslationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTextTranslationJob", arg0)
	ret0, _ := ret[0].(*translate.StopTextTranslationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTextTranslationJob indicates an expected call of StopTextTranslationJob
func (mr *MockTranslateAPIMockRecorder) StopTextTranslationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTextTranslationJob", reflect.TypeOf((*MockTranslateAPI)(nil).StopTextTranslationJob), arg0)
}

// StopTextTranslationJobRequest mocks base method
func (m *MockTranslateAPI) StopTextTranslationJobRequest(arg0 *translate.StopTextTranslationJobInput) (*request.Request, *translate.StopTextTranslationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTextTranslationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.StopTextTranslationJobOutput)
	return ret0, ret1
}

// StopTextTranslationJobRequest indicates an expected call of StopTextTranslationJobRequest
func (mr *MockTranslateAPIMockRecorder) StopTextTranslationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTextTranslationJobRequest", reflect.TypeOf((*MockTranslateAPI)(nil).StopTextTranslationJobRequest), arg0)
}

// StopTextTranslationJobWithContext mocks base method
func (m *MockTranslateAPI) StopTextTranslationJobWithContext(arg0 context.Context, arg1 *translate.StopTextTranslationJobInput, arg2 ...request.Option) (*translate.StopTextTranslationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopTextTranslationJobWithContext", varargs...)
	ret0, _ := ret[0].(*translate.StopTextTranslationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTextTranslationJobWithContext indicates an expected call of StopTextTranslationJobWithContext
func (mr *MockTranslateAPIMockRecorder) StopTextTranslationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTextTranslationJobWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).StopTextTranslationJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockTranslateAPI) TagResource(arg0 *translate.TagResourceInput) (*translate.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*translate.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockTranslateAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockTranslateAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockTranslateAPI) TagResourceRequest(arg0 *translate.TagResourceInput) (*request.Request, *translate.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockTranslateAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockTranslateAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockTranslateAPI) TagResourceWithContext(arg0 context.Context, arg1 *translate.TagResourceInput, arg2 ...request.Option) (*translate.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*translate.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockTranslateAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).TagResourceWithContext), varargs...)
}

// Text mocks base method
func (m *MockTranslateAPI) Text(arg0 *translate.TextInput) (*translate.TextOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text", arg0)
	ret0, _ := ret[0].(*translate.TextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Text indicates an expected call of Text
func (mr *MockTranslateAPIMockRecorder) Text(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockTranslateAPI)(nil).Text), arg0)
}

// TextRequest mocks base method
func (m *MockTranslateAPI) TextRequest(arg0 *translate.TextInput) (*request.Request, *translate.TextOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.TextOutput)
	return ret0, ret1
}

// TextRequest indicates an expected call of TextRequest
func (mr *MockTranslateAPIMockRecorder) TextRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextRequest", reflect.TypeOf((*MockTranslateAPI)(nil).TextRequest), arg0)
}

// TextWithContext mocks base method
func (m *MockTranslateAPI) TextWithContext(arg0 context.Context, arg1 *translate.TextInput, arg2 ...request.Option) (*translate.TextOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TextWithContext", varargs...)
	ret0, _ := ret[0].(*translate.TextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TextWithContext indicates an expected call of TextWithContext
func (mr *MockTranslateAPIMockRecorder) TextWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).TextWithContext), varargs...)
}

// TranslateDocument mocks base method
func (m *MockTranslateAPI) TranslateDocument(arg0 *translate.TranslateDocumentInput) (*translate.TranslateDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateDocument", arg0)
	ret0, _ := ret[0].(*translate.TranslateDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateDocument indicates an expected call of TranslateDocument
func (mr *MockTranslateAPIMockRecorder) TranslateDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateDocument", reflect.TypeOf((*MockTranslateAPI)(nil).TranslateDocument), arg0)
}

// TranslateDocumentRequest mocks base method
func (m *MockTranslateAPI) TranslateDocumentRequest(arg0 *translate.TranslateDocumentInput) (*request.Request, *translate.TranslateDocumentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateDocumentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.TranslateDocumentOutput)
	return ret0, ret1
}

// TranslateDocumentRequest indicates an expected call of TranslateDocumentRequest
func (mr *MockTranslateAPIMockRecorder) TranslateDocumentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateDocumentRequest", reflect.TypeOf((*MockTranslateAPI)(nil).TranslateDocumentRequest), arg0)
}

// TranslateDocumentWithContext mocks base method
func (m *MockTranslateAPI) TranslateDocumentWithContext(arg0 context.Context, arg1 *translate.TranslateDocumentInput, arg2 ...request.Option) (*translate.TranslateDocumentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TranslateDocumentWithContext", varargs...)
	ret0, _ := ret[0].(*translate.TranslateDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateDocumentWithContext indicates an expected call of TranslateDocumentWithContext
func (mr *MockTranslateAPIMockRecorder) TranslateDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateDocumentWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).TranslateDocumentWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockTranslateAPI) UntagResource(arg0 *translate.UntagResourceInput) (*translate.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*translate.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockTranslateAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockTranslateAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockTranslateAPI) UntagResourceRequest(arg0 *translate.UntagResourceInput) (*request.Request, *translate.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockTranslateAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockTranslateAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockTranslateAPI) UntagResourceWithContext(arg0 context.Context, arg1 *translate.UntagResourceInput, arg2 ...request.Option) (*translate.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*translate.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockTranslateAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateParallelData mocks base method
func (m *MockTranslateAPI) UpdateParallelData(arg0 *translate.UpdateParallelDataInput) (*translate.UpdateParallelDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParallelData", arg0)
	ret0, _ := ret[0].(*translate.UpdateParallelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParallelData indicates an expected call of UpdateParallelData
func (mr *MockTranslateAPIMockRecorder) UpdateParallelData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParallelData", reflect.TypeOf((*MockTranslateAPI)(nil).UpdateParallelData), arg0)
}

// UpdateParallelDataRequest mocks base method
func (m *MockTranslateAPI) UpdateParallelDataRequest(arg0 *translate.UpdateParallelDataInput) (*request.Request, *translate.UpdateParallelDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParallelDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*translate.UpdateParallelDataOutput)
	return ret0, ret1
}

// UpdateParallelDataRequest indicates an expected call of UpdateParallelDataRequest
func (mr *MockTranslateAPIMockRecorder) UpdateParallelDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParallelDataRequest", reflect.TypeOf((*MockTranslateAPI)(nil).UpdateParallelDataRequest), arg0)
}

// UpdateParallelDataWithContext mocks base method
func (m *MockTranslateAPI) UpdateParallelDataWithContext(arg0 context.Context, arg1 *translate.UpdateParallelDataInput, arg2 ...request.Option) (*translate.UpdateParallelDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateParallelDataWithContext", varargs...)
	ret0, _ := ret[0].(*translate.UpdateParallelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParallelDataWithContext indicates an expected call of UpdateParallelDataWithContext
func (mr *MockTranslateAPIMockRecorder) UpdateParallelDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParallelDataWithContext", reflect.TypeOf((*MockTranslateAPI)(nil).UpdateParallelDataWithContext), varargs...)
}
