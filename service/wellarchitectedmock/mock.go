// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/wellarchitected/wellarchitectediface (interfaces: WellArchitectedAPI)

// Package wellarchitectedmock is a generated GoMock package.
package wellarchitectedmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	wellarchitected "github.com/aws/aws-sdk-go/service/wellarchitected"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWellArchitectedAPI is a mock of WellArchitectedAPI interface
type MockWellArchitectedAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWellArchitectedAPIMockRecorder
}

// MockWellArchitectedAPIMockRecorder is the mock recorder for MockWellArchitectedAPI
type MockWellArchitectedAPIMockRecorder struct {
	mock *MockWellArchitectedAPI
}

// NewMockWellArchitectedAPI creates a new mock instance
func NewMockWellArchitectedAPI(ctrl *gomock.Controller) *MockWellArchitectedAPI {
	mock := &MockWellArchitectedAPI{ctrl: ctrl}
	mock.recorder = &MockWellArchitectedAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWellArchitectedAPI) EXPECT() *MockWellArchitectedAPIMockRecorder {
	return m.recorder
}

// AssociateLenses mocks base method
func (m *MockWellArchitectedAPI) AssociateLenses(arg0 *wellarchitected.AssociateLensesInput) (*wellarchitected.AssociateLensesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLenses", arg0)
	ret0, _ := ret[0].(*wellarchitected.AssociateLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLenses indicates an expected call of AssociateLenses
func (mr *MockWellArchitectedAPIMockRecorder) AssociateLenses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLenses", reflect.TypeOf((*MockWellArchitectedAPI)(nil).AssociateLenses), arg0)
}

// AssociateLensesRequest mocks base method
func (m *MockWellArchitectedAPI) AssociateLensesRequest(arg0 *wellarchitected.AssociateLensesInput) (*request.Request, *wellarchitected.AssociateLensesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLensesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.AssociateLensesOutput)
	return ret0, ret1
}

// AssociateLensesRequest indicates an expected call of AssociateLensesRequest
func (mr *MockWellArchitectedAPIMockRecorder) AssociateLensesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLensesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).AssociateLensesRequest), arg0)
}

// AssociateLensesWithContext mocks base method
func (m *MockWellArchitectedAPI) AssociateLensesWithContext(arg0 context.Context, arg1 *wellarchitected.AssociateLensesInput, arg2 ...request.Option) (*wellarchitected.AssociateLensesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateLensesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.AssociateLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLensesWithContext indicates an expected call of AssociateLensesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) AssociateLensesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLensesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).AssociateLensesWithContext), varargs...)
}

// AssociateProfiles mocks base method
func (m *MockWellArchitectedAPI) AssociateProfiles(arg0 *wellarchitected.AssociateProfilesInput) (*wellarchitected.AssociateProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateProfiles", arg0)
	ret0, _ := ret[0].(*wellarchitected.AssociateProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateProfiles indicates an expected call of AssociateProfiles
func (mr *MockWellArchitectedAPIMockRecorder) AssociateProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateProfiles", reflect.TypeOf((*MockWellArchitectedAPI)(nil).AssociateProfiles), arg0)
}

// AssociateProfilesRequest mocks base method
func (m *MockWellArchitectedAPI) AssociateProfilesRequest(arg0 *wellarchitected.AssociateProfilesInput) (*request.Request, *wellarchitected.AssociateProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.AssociateProfilesOutput)
	return ret0, ret1
}

// AssociateProfilesRequest indicates an expected call of AssociateProfilesRequest
func (mr *MockWellArchitectedAPIMockRecorder) AssociateProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateProfilesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).AssociateProfilesRequest), arg0)
}

// AssociateProfilesWithContext mocks base method
func (m *MockWellArchitectedAPI) AssociateProfilesWithContext(arg0 context.Context, arg1 *wellarchitected.AssociateProfilesInput, arg2 ...request.Option) (*wellarchitected.AssociateProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.AssociateProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateProfilesWithContext indicates an expected call of AssociateProfilesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) AssociateProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateProfilesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).AssociateProfilesWithContext), varargs...)
}

// CreateLensShare mocks base method
func (m *MockWellArchitectedAPI) CreateLensShare(arg0 *wellarchitected.CreateLensShareInput) (*wellarchitected.CreateLensShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLensShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateLensShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLensShare indicates an expected call of CreateLensShare
func (mr *MockWellArchitectedAPIMockRecorder) CreateLensShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLensShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateLensShare), arg0)
}

// CreateLensShareRequest mocks base method
func (m *MockWellArchitectedAPI) CreateLensShareRequest(arg0 *wellarchitected.CreateLensShareInput) (*request.Request, *wellarchitected.CreateLensShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLensShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateLensShareOutput)
	return ret0, ret1
}

// CreateLensShareRequest indicates an expected call of CreateLensShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateLensShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLensShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateLensShareRequest), arg0)
}

// CreateLensShareWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateLensShareWithContext(arg0 context.Context, arg1 *wellarchitected.CreateLensShareInput, arg2 ...request.Option) (*wellarchitected.CreateLensShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLensShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateLensShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLensShareWithContext indicates an expected call of CreateLensShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateLensShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLensShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateLensShareWithContext), varargs...)
}

// CreateLensVersion mocks base method
func (m *MockWellArchitectedAPI) CreateLensVersion(arg0 *wellarchitected.CreateLensVersionInput) (*wellarchitected.CreateLensVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLensVersion", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateLensVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLensVersion indicates an expected call of CreateLensVersion
func (mr *MockWellArchitectedAPIMockRecorder) CreateLensVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLensVersion", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateLensVersion), arg0)
}

// CreateLensVersionRequest mocks base method
func (m *MockWellArchitectedAPI) CreateLensVersionRequest(arg0 *wellarchitected.CreateLensVersionInput) (*request.Request, *wellarchitected.CreateLensVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLensVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateLensVersionOutput)
	return ret0, ret1
}

// CreateLensVersionRequest indicates an expected call of CreateLensVersionRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateLensVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLensVersionRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateLensVersionRequest), arg0)
}

// CreateLensVersionWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateLensVersionWithContext(arg0 context.Context, arg1 *wellarchitected.CreateLensVersionInput, arg2 ...request.Option) (*wellarchitected.CreateLensVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLensVersionWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateLensVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLensVersionWithContext indicates an expected call of CreateLensVersionWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateLensVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLensVersionWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateLensVersionWithContext), varargs...)
}

// CreateMilestone mocks base method
func (m *MockWellArchitectedAPI) CreateMilestone(arg0 *wellarchitected.CreateMilestoneInput) (*wellarchitected.CreateMilestoneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMilestone", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateMilestoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMilestone indicates an expected call of CreateMilestone
func (mr *MockWellArchitectedAPIMockRecorder) CreateMilestone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMilestone", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateMilestone), arg0)
}

// CreateMilestoneRequest mocks base method
func (m *MockWellArchitectedAPI) CreateMilestoneRequest(arg0 *wellarchitected.CreateMilestoneInput) (*request.Request, *wellarchitected.CreateMilestoneOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMilestoneRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateMilestoneOutput)
	return ret0, ret1
}

// CreateMilestoneRequest indicates an expected call of CreateMilestoneRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateMilestoneRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMilestoneRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateMilestoneRequest), arg0)
}

// CreateMilestoneWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateMilestoneWithContext(arg0 context.Context, arg1 *wellarchitected.CreateMilestoneInput, arg2 ...request.Option) (*wellarchitected.CreateMilestoneOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMilestoneWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateMilestoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMilestoneWithContext indicates an expected call of CreateMilestoneWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateMilestoneWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMilestoneWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateMilestoneWithContext), varargs...)
}

// CreateProfile mocks base method
func (m *MockWellArchitectedAPI) CreateProfile(arg0 *wellarchitected.CreateProfileInput) (*wellarchitected.CreateProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockWellArchitectedAPIMockRecorder) CreateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateProfile), arg0)
}

// CreateProfileRequest mocks base method
func (m *MockWellArchitectedAPI) CreateProfileRequest(arg0 *wellarchitected.CreateProfileInput) (*request.Request, *wellarchitected.CreateProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateProfileOutput)
	return ret0, ret1
}

// CreateProfileRequest indicates an expected call of CreateProfileRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateProfileRequest), arg0)
}

// CreateProfileShare mocks base method
func (m *MockWellArchitectedAPI) CreateProfileShare(arg0 *wellarchitected.CreateProfileShareInput) (*wellarchitected.CreateProfileShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateProfileShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfileShare indicates an expected call of CreateProfileShare
func (mr *MockWellArchitectedAPIMockRecorder) CreateProfileShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateProfileShare), arg0)
}

// CreateProfileShareRequest mocks base method
func (m *MockWellArchitectedAPI) CreateProfileShareRequest(arg0 *wellarchitected.CreateProfileShareInput) (*request.Request, *wellarchitected.CreateProfileShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateProfileShareOutput)
	return ret0, ret1
}

// CreateProfileShareRequest indicates an expected call of CreateProfileShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateProfileShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateProfileShareRequest), arg0)
}

// CreateProfileShareWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateProfileShareWithContext(arg0 context.Context, arg1 *wellarchitected.CreateProfileShareInput, arg2 ...request.Option) (*wellarchitected.CreateProfileShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfileShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateProfileShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfileShareWithContext indicates an expected call of CreateProfileShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateProfileShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateProfileShareWithContext), varargs...)
}

// CreateProfileWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateProfileWithContext(arg0 context.Context, arg1 *wellarchitected.CreateProfileInput, arg2 ...request.Option) (*wellarchitected.CreateProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfileWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfileWithContext indicates an expected call of CreateProfileWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateProfileWithContext), varargs...)
}

// CreateReviewTemplate mocks base method
func (m *MockWellArchitectedAPI) CreateReviewTemplate(arg0 *wellarchitected.CreateReviewTemplateInput) (*wellarchitected.CreateReviewTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReviewTemplate", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateReviewTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReviewTemplate indicates an expected call of CreateReviewTemplate
func (mr *MockWellArchitectedAPIMockRecorder) CreateReviewTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReviewTemplate", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateReviewTemplate), arg0)
}

// CreateReviewTemplateRequest mocks base method
func (m *MockWellArchitectedAPI) CreateReviewTemplateRequest(arg0 *wellarchitected.CreateReviewTemplateInput) (*request.Request, *wellarchitected.CreateReviewTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReviewTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateReviewTemplateOutput)
	return ret0, ret1
}

// CreateReviewTemplateRequest indicates an expected call of CreateReviewTemplateRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateReviewTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReviewTemplateRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateReviewTemplateRequest), arg0)
}

// CreateReviewTemplateWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateReviewTemplateWithContext(arg0 context.Context, arg1 *wellarchitected.CreateReviewTemplateInput, arg2 ...request.Option) (*wellarchitected.CreateReviewTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReviewTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateReviewTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReviewTemplateWithContext indicates an expected call of CreateReviewTemplateWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateReviewTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReviewTemplateWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateReviewTemplateWithContext), varargs...)
}

// CreateTemplateShare mocks base method
func (m *MockWellArchitectedAPI) CreateTemplateShare(arg0 *wellarchitected.CreateTemplateShareInput) (*wellarchitected.CreateTemplateShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateTemplateShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplateShare indicates an expected call of CreateTemplateShare
func (mr *MockWellArchitectedAPIMockRecorder) CreateTemplateShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateTemplateShare), arg0)
}

// CreateTemplateShareRequest mocks base method
func (m *MockWellArchitectedAPI) CreateTemplateShareRequest(arg0 *wellarchitected.CreateTemplateShareInput) (*request.Request, *wellarchitected.CreateTemplateShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateTemplateShareOutput)
	return ret0, ret1
}

// CreateTemplateShareRequest indicates an expected call of CreateTemplateShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateTemplateShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateTemplateShareRequest), arg0)
}

// CreateTemplateShareWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateTemplateShareWithContext(arg0 context.Context, arg1 *wellarchitected.CreateTemplateShareInput, arg2 ...request.Option) (*wellarchitected.CreateTemplateShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTemplateShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateTemplateShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplateShareWithContext indicates an expected call of CreateTemplateShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateTemplateShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateTemplateShareWithContext), varargs...)
}

// CreateWorkload mocks base method
func (m *MockWellArchitectedAPI) CreateWorkload(arg0 *wellarchitected.CreateWorkloadInput) (*wellarchitected.CreateWorkloadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkload", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkload indicates an expected call of CreateWorkload
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkload", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkload), arg0)
}

// CreateWorkloadRequest mocks base method
func (m *MockWellArchitectedAPI) CreateWorkloadRequest(arg0 *wellarchitected.CreateWorkloadInput) (*request.Request, *wellarchitected.CreateWorkloadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkloadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateWorkloadOutput)
	return ret0, ret1
}

// CreateWorkloadRequest indicates an expected call of CreateWorkloadRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkloadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkloadRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkloadRequest), arg0)
}

// CreateWorkloadShare mocks base method
func (m *MockWellArchitectedAPI) CreateWorkloadShare(arg0 *wellarchitected.CreateWorkloadShareInput) (*wellarchitected.CreateWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkloadShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkloadShare indicates an expected call of CreateWorkloadShare
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkloadShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkloadShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkloadShare), arg0)
}

// CreateWorkloadShareRequest mocks base method
func (m *MockWellArchitectedAPI) CreateWorkloadShareRequest(arg0 *wellarchitected.CreateWorkloadShareInput) (*request.Request, *wellarchitected.CreateWorkloadShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkloadShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateWorkloadShareOutput)
	return ret0, ret1
}

// CreateWorkloadShareRequest indicates an expected call of CreateWorkloadShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkloadShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkloadShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkloadShareRequest), arg0)
}

// CreateWorkloadShareWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateWorkloadShareWithContext(arg0 context.Context, arg1 *wellarchitected.CreateWorkloadShareInput, arg2 ...request.Option) (*wellarchitected.CreateWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkloadShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkloadShareWithContext indicates an expected call of CreateWorkloadShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkloadShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkloadShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkloadShareWithContext), varargs...)
}

// CreateWorkloadWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateWorkloadWithContext(arg0 context.Context, arg1 *wellarchitected.CreateWorkloadInput, arg2 ...request.Option) (*wellarchitected.CreateWorkloadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkloadWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkloadWithContext indicates an expected call of CreateWorkloadWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkloadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkloadWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkloadWithContext), varargs...)
}

// DeleteLens mocks base method
func (m *MockWellArchitectedAPI) DeleteLens(arg0 *wellarchitected.DeleteLensInput) (*wellarchitected.DeleteLensOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLens", arg0)
	ret0, _ := ret[0].(*wellarchitected.DeleteLensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLens indicates an expected call of DeleteLens
func (mr *MockWellArchitectedAPIMockRecorder) DeleteLens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLens", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteLens), arg0)
}

// DeleteLensRequest mocks base method
func (m *MockWellArchitectedAPI) DeleteLensRequest(arg0 *wellarchitected.DeleteLensInput) (*request.Request, *wellarchitected.DeleteLensOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLensRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DeleteLensOutput)
	return ret0, ret1
}

// DeleteLensRequest indicates an expected call of DeleteLensRequest
func (mr *MockWellArchitectedAPIMockRecorder) DeleteLensRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLensRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteLensRequest), arg0)
}

// DeleteLensShare mocks base method
func (m *MockWellArchitectedAPI) DeleteLensShare(arg0 *wellarchitected.DeleteLensShareInput) (*wellarchitected.DeleteLensShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLensShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.DeleteLensShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLensShare indicates an expected call of DeleteLensShare
func (mr *MockWellArchitectedAPIMockRecorder) DeleteLensShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLensShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteLensShare), arg0)
}

// DeleteLensShareRequest mocks base method
func (m *MockWellArchitectedAPI) DeleteLensShareRequest(arg0 *wellarchitected.DeleteLensShareInput) (*request.Request, *wellarchitected.DeleteLensShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLensShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DeleteLensShareOutput)
	return ret0, ret1
}

// DeleteLensShareRequest indicates an expected call of DeleteLensShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) DeleteLensShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLensShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteLensShareRequest), arg0)
}

// DeleteLensShareWithContext mocks base method
func (m *MockWellArchitectedAPI) DeleteLensShareWithContext(arg0 context.Context, arg1 *wellarchitected.DeleteLensShareInput, arg2 ...request.Option) (*wellarchitected.DeleteLensShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLensShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DeleteLensShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLensShareWithContext indicates an expected call of DeleteLensShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DeleteLensShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLensShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteLensShareWithContext), varargs...)
}

// DeleteLensWithContext mocks base method
func (m *MockWellArchitectedAPI) DeleteLensWithContext(arg0 context.Context, arg1 *wellarchitected.DeleteLensInput, arg2 ...request.Option) (*wellarchitected.DeleteLensOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLensWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DeleteLensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLensWithContext indicates an expected call of DeleteLensWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DeleteLensWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLensWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteLensWithContext), varargs...)
}

// DeleteProfile mocks base method
func (m *MockWellArchitectedAPI) DeleteProfile(arg0 *wellarchitected.DeleteProfileInput) (*wellarchitected.DeleteProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", arg0)
	ret0, _ := ret[0].(*wellarchitected.DeleteProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfile indicates an expected call of DeleteProfile
func (mr *MockWellArchitectedAPIMockRecorder) DeleteProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteProfile), arg0)
}

// DeleteProfileRequest mocks base method
func (m *MockWellArchitectedAPI) DeleteProfileRequest(arg0 *wellarchitected.DeleteProfileInput) (*request.Request, *wellarchitected.DeleteProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DeleteProfileOutput)
	return ret0, ret1
}

// DeleteProfileRequest indicates an expected call of DeleteProfileRequest
func (mr *MockWellArchitectedAPIMockRecorder) DeleteProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteProfileRequest), arg0)
}

// DeleteProfileShare mocks base method
func (m *MockWellArchitectedAPI) DeleteProfileShare(arg0 *wellarchitected.DeleteProfileShareInput) (*wellarchitected.DeleteProfileShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.DeleteProfileShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileShare indicates an expected call of DeleteProfileShare
func (mr *MockWellArchitectedAPIMockRecorder) DeleteProfileShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteProfileShare), arg0)
}

// DeleteProfileShareRequest mocks base method
func (m *MockWellArchitectedAPI) DeleteProfileShareRequest(arg0 *wellarchitected.DeleteProfileShareInput) (*request.Request, *wellarchitected.DeleteProfileShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DeleteProfileShareOutput)
	return ret0, ret1
}

// DeleteProfileShareRequest indicates an expected call of DeleteProfileShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) DeleteProfileShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteProfileShareRequest), arg0)
}

// DeleteProfileShareWithContext mocks base method
func (m *MockWellArchitectedAPI) DeleteProfileShareWithContext(arg0 context.Context, arg1 *wellarchitected.DeleteProfileShareInput, arg2 ...request.Option) (*wellarchitected.DeleteProfileShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfileShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DeleteProfileShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileShareWithContext indicates an expected call of DeleteProfileShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DeleteProfileShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteProfileShareWithContext), varargs...)
}

// DeleteProfileWithContext mocks base method
func (m *MockWellArchitectedAPI) DeleteProfileWithContext(arg0 context.Context, arg1 *wellarchitected.DeleteProfileInput, arg2 ...request.Option) (*wellarchitected.DeleteProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfileWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DeleteProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfileWithContext indicates an expected call of DeleteProfileWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DeleteProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteProfileWithContext), varargs...)
}

// DeleteReviewTemplate mocks base method
func (m *MockWellArchitectedAPI) DeleteReviewTemplate(arg0 *wellarchitected.DeleteReviewTemplateInput) (*wellarchitected.DeleteReviewTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReviewTemplate", arg0)
	ret0, _ := ret[0].(*wellarchitected.DeleteReviewTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReviewTemplate indicates an expected call of DeleteReviewTemplate
func (mr *MockWellArchitectedAPIMockRecorder) DeleteReviewTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReviewTemplate", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteReviewTemplate), arg0)
}

// DeleteReviewTemplateRequest mocks base method
func (m *MockWellArchitectedAPI) DeleteReviewTemplateRequest(arg0 *wellarchitected.DeleteReviewTemplateInput) (*request.Request, *wellarchitected.DeleteReviewTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReviewTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DeleteReviewTemplateOutput)
	return ret0, ret1
}

// DeleteReviewTemplateRequest indicates an expected call of DeleteReviewTemplateRequest
func (mr *MockWellArchitectedAPIMockRecorder) DeleteReviewTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReviewTemplateRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteReviewTemplateRequest), arg0)
}

// DeleteReviewTemplateWithContext mocks base method
func (m *MockWellArchitectedAPI) DeleteReviewTemplateWithContext(arg0 context.Context, arg1 *wellarchitected.DeleteReviewTemplateInput, arg2 ...request.Option) (*wellarchitected.DeleteReviewTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReviewTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DeleteReviewTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReviewTemplateWithContext indicates an expected call of DeleteReviewTemplateWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DeleteReviewTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReviewTemplateWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteReviewTemplateWithContext), varargs...)
}

// DeleteTemplateShare mocks base method
func (m *MockWellArchitectedAPI) DeleteTemplateShare(arg0 *wellarchitected.DeleteTemplateShareInput) (*wellarchitected.DeleteTemplateShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplateShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.DeleteTemplateShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplateShare indicates an expected call of DeleteTemplateShare
func (mr *MockWellArchitectedAPIMockRecorder) DeleteTemplateShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteTemplateShare), arg0)
}

// DeleteTemplateShareRequest mocks base method
func (m *MockWellArchitectedAPI) DeleteTemplateShareRequest(arg0 *wellarchitected.DeleteTemplateShareInput) (*request.Request, *wellarchitected.DeleteTemplateShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplateShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DeleteTemplateShareOutput)
	return ret0, ret1
}

// DeleteTemplateShareRequest indicates an expected call of DeleteTemplateShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) DeleteTemplateShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteTemplateShareRequest), arg0)
}

// DeleteTemplateShareWithContext mocks base method
func (m *MockWellArchitectedAPI) DeleteTemplateShareWithContext(arg0 context.Context, arg1 *wellarchitected.DeleteTemplateShareInput, arg2 ...request.Option) (*wellarchitected.DeleteTemplateShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTemplateShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DeleteTemplateShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplateShareWithContext indicates an expected call of DeleteTemplateShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DeleteTemplateShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteTemplateShareWithContext), varargs...)
}

// DeleteWorkload mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkload(arg0 *wellarchitected.DeleteWorkloadInput) (*wellarchitected.DeleteWorkloadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkload", arg0)
	ret0, _ := ret[0].(*wellarchitected.DeleteWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkload indicates an expected call of DeleteWorkload
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkload", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkload), arg0)
}

// DeleteWorkloadRequest mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkloadRequest(arg0 *wellarchitected.DeleteWorkloadInput) (*request.Request, *wellarchitected.DeleteWorkloadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkloadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DeleteWorkloadOutput)
	return ret0, ret1
}

// DeleteWorkloadRequest indicates an expected call of DeleteWorkloadRequest
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkloadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkloadRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkloadRequest), arg0)
}

// DeleteWorkloadShare mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkloadShare(arg0 *wellarchitected.DeleteWorkloadShareInput) (*wellarchitected.DeleteWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkloadShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.DeleteWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkloadShare indicates an expected call of DeleteWorkloadShare
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkloadShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkloadShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkloadShare), arg0)
}

// DeleteWorkloadShareRequest mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkloadShareRequest(arg0 *wellarchitected.DeleteWorkloadShareInput) (*request.Request, *wellarchitected.DeleteWorkloadShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkloadShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DeleteWorkloadShareOutput)
	return ret0, ret1
}

// DeleteWorkloadShareRequest indicates an expected call of DeleteWorkloadShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkloadShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkloadShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkloadShareRequest), arg0)
}

// DeleteWorkloadShareWithContext mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkloadShareWithContext(arg0 context.Context, arg1 *wellarchitected.DeleteWorkloadShareInput, arg2 ...request.Option) (*wellarchitected.DeleteWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkloadShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DeleteWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkloadShareWithContext indicates an expected call of DeleteWorkloadShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkloadShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkloadShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkloadShareWithContext), varargs...)
}

// DeleteWorkloadWithContext mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkloadWithContext(arg0 context.Context, arg1 *wellarchitected.DeleteWorkloadInput, arg2 ...request.Option) (*wellarchitected.DeleteWorkloadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkloadWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DeleteWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkloadWithContext indicates an expected call of DeleteWorkloadWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkloadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkloadWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkloadWithContext), varargs...)
}

// DisassociateLenses mocks base method
func (m *MockWellArchitectedAPI) DisassociateLenses(arg0 *wellarchitected.DisassociateLensesInput) (*wellarchitected.DisassociateLensesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLenses", arg0)
	ret0, _ := ret[0].(*wellarchitected.DisassociateLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLenses indicates an expected call of DisassociateLenses
func (mr *MockWellArchitectedAPIMockRecorder) DisassociateLenses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLenses", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DisassociateLenses), arg0)
}

// DisassociateLensesRequest mocks base method
func (m *MockWellArchitectedAPI) DisassociateLensesRequest(arg0 *wellarchitected.DisassociateLensesInput) (*request.Request, *wellarchitected.DisassociateLensesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLensesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DisassociateLensesOutput)
	return ret0, ret1
}

// DisassociateLensesRequest indicates an expected call of DisassociateLensesRequest
func (mr *MockWellArchitectedAPIMockRecorder) DisassociateLensesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLensesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DisassociateLensesRequest), arg0)
}

// DisassociateLensesWithContext mocks base method
func (m *MockWellArchitectedAPI) DisassociateLensesWithContext(arg0 context.Context, arg1 *wellarchitected.DisassociateLensesInput, arg2 ...request.Option) (*wellarchitected.DisassociateLensesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateLensesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DisassociateLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLensesWithContext indicates an expected call of DisassociateLensesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DisassociateLensesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLensesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DisassociateLensesWithContext), varargs...)
}

// DisassociateProfiles mocks base method
func (m *MockWellArchitectedAPI) DisassociateProfiles(arg0 *wellarchitected.DisassociateProfilesInput) (*wellarchitected.DisassociateProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateProfiles", arg0)
	ret0, _ := ret[0].(*wellarchitected.DisassociateProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateProfiles indicates an expected call of DisassociateProfiles
func (mr *MockWellArchitectedAPIMockRecorder) DisassociateProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateProfiles", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DisassociateProfiles), arg0)
}

// DisassociateProfilesRequest mocks base method
func (m *MockWellArchitectedAPI) DisassociateProfilesRequest(arg0 *wellarchitected.DisassociateProfilesInput) (*request.Request, *wellarchitected.DisassociateProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DisassociateProfilesOutput)
	return ret0, ret1
}

// DisassociateProfilesRequest indicates an expected call of DisassociateProfilesRequest
func (mr *MockWellArchitectedAPIMockRecorder) DisassociateProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateProfilesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DisassociateProfilesRequest), arg0)
}

// DisassociateProfilesWithContext mocks base method
func (m *MockWellArchitectedAPI) DisassociateProfilesWithContext(arg0 context.Context, arg1 *wellarchitected.DisassociateProfilesInput, arg2 ...request.Option) (*wellarchitected.DisassociateProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DisassociateProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateProfilesWithContext indicates an expected call of DisassociateProfilesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DisassociateProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateProfilesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DisassociateProfilesWithContext), varargs...)
}

// ExportLens mocks base method
func (m *MockWellArchitectedAPI) ExportLens(arg0 *wellarchitected.ExportLensInput) (*wellarchitected.ExportLensOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportLens", arg0)
	ret0, _ := ret[0].(*wellarchitected.ExportLensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportLens indicates an expected call of ExportLens
func (mr *MockWellArchitectedAPIMockRecorder) ExportLens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportLens", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ExportLens), arg0)
}

// ExportLensRequest mocks base method
func (m *MockWellArchitectedAPI) ExportLensRequest(arg0 *wellarchitected.ExportLensInput) (*request.Request, *wellarchitected.ExportLensOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportLensRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ExportLensOutput)
	return ret0, ret1
}

// ExportLensRequest indicates an expected call of ExportLensRequest
func (mr *MockWellArchitectedAPIMockRecorder) ExportLensRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportLensRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ExportLensRequest), arg0)
}

// ExportLensWithContext mocks base method
func (m *MockWellArchitectedAPI) ExportLensWithContext(arg0 context.Context, arg1 *wellarchitected.ExportLensInput, arg2 ...request.Option) (*wellarchitected.ExportLensOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportLensWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ExportLensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportLensWithContext indicates an expected call of ExportLensWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ExportLensWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportLensWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ExportLensWithContext), varargs...)
}

// GetAnswer mocks base method
func (m *MockWellArchitectedAPI) GetAnswer(arg0 *wellarchitected.GetAnswerInput) (*wellarchitected.GetAnswerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswer", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswer indicates an expected call of GetAnswer
func (mr *MockWellArchitectedAPIMockRecorder) GetAnswer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswer", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetAnswer), arg0)
}

// GetAnswerRequest mocks base method
func (m *MockWellArchitectedAPI) GetAnswerRequest(arg0 *wellarchitected.GetAnswerInput) (*request.Request, *wellarchitected.GetAnswerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetAnswerOutput)
	return ret0, ret1
}

// GetAnswerRequest indicates an expected call of GetAnswerRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetAnswerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetAnswerRequest), arg0)
}

// GetAnswerWithContext mocks base method
func (m *MockWellArchitectedAPI) GetAnswerWithContext(arg0 context.Context, arg1 *wellarchitected.GetAnswerInput, arg2 ...request.Option) (*wellarchitected.GetAnswerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAnswerWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswerWithContext indicates an expected call of GetAnswerWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetAnswerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetAnswerWithContext), varargs...)
}

// GetConsolidatedReport mocks base method
func (m *MockWellArchitectedAPI) GetConsolidatedReport(arg0 *wellarchitected.GetConsolidatedReportInput) (*wellarchitected.GetConsolidatedReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsolidatedReport", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetConsolidatedReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsolidatedReport indicates an expected call of GetConsolidatedReport
func (mr *MockWellArchitectedAPIMockRecorder) GetConsolidatedReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsolidatedReport", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetConsolidatedReport), arg0)
}

// GetConsolidatedReportPages mocks base method
func (m *MockWellArchitectedAPI) GetConsolidatedReportPages(arg0 *wellarchitected.GetConsolidatedReportInput, arg1 func(*wellarchitected.GetConsolidatedReportOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsolidatedReportPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConsolidatedReportPages indicates an expected call of GetConsolidatedReportPages
func (mr *MockWellArchitectedAPIMockRecorder) GetConsolidatedReportPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsolidatedReportPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetConsolidatedReportPages), arg0, arg1)
}

// GetConsolidatedReportPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) GetConsolidatedReportPagesWithContext(arg0 context.Context, arg1 *wellarchitected.GetConsolidatedReportInput, arg2 func(*wellarchitected.GetConsolidatedReportOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConsolidatedReportPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConsolidatedReportPagesWithContext indicates an expected call of GetConsolidatedReportPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetConsolidatedReportPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsolidatedReportPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetConsolidatedReportPagesWithContext), varargs...)
}

// GetConsolidatedReportRequest mocks base method
func (m *MockWellArchitectedAPI) GetConsolidatedReportRequest(arg0 *wellarchitected.GetConsolidatedReportInput) (*request.Request, *wellarchitected.GetConsolidatedReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsolidatedReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetConsolidatedReportOutput)
	return ret0, ret1
}

// GetConsolidatedReportRequest indicates an expected call of GetConsolidatedReportRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetConsolidatedReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsolidatedReportRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetConsolidatedReportRequest), arg0)
}

// GetConsolidatedReportWithContext mocks base method
func (m *MockWellArchitectedAPI) GetConsolidatedReportWithContext(arg0 context.Context, arg1 *wellarchitected.GetConsolidatedReportInput, arg2 ...request.Option) (*wellarchitected.GetConsolidatedReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConsolidatedReportWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetConsolidatedReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsolidatedReportWithContext indicates an expected call of GetConsolidatedReportWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetConsolidatedReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsolidatedReportWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetConsolidatedReportWithContext), varargs...)
}

// GetLens mocks base method
func (m *MockWellArchitectedAPI) GetLens(arg0 *wellarchitected.GetLensInput) (*wellarchitected.GetLensOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLens", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetLensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLens indicates an expected call of GetLens
func (mr *MockWellArchitectedAPIMockRecorder) GetLens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLens", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLens), arg0)
}

// GetLensRequest mocks base method
func (m *MockWellArchitectedAPI) GetLensRequest(arg0 *wellarchitected.GetLensInput) (*request.Request, *wellarchitected.GetLensOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetLensOutput)
	return ret0, ret1
}

// GetLensRequest indicates an expected call of GetLensRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetLensRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensRequest), arg0)
}

// GetLensReview mocks base method
func (m *MockWellArchitectedAPI) GetLensReview(arg0 *wellarchitected.GetLensReviewInput) (*wellarchitected.GetLensReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensReview", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensReview indicates an expected call of GetLensReview
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReview", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReview), arg0)
}

// GetLensReviewReport mocks base method
func (m *MockWellArchitectedAPI) GetLensReviewReport(arg0 *wellarchitected.GetLensReviewReportInput) (*wellarchitected.GetLensReviewReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensReviewReport", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetLensReviewReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensReviewReport indicates an expected call of GetLensReviewReport
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReviewReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewReport", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReviewReport), arg0)
}

// GetLensReviewReportRequest mocks base method
func (m *MockWellArchitectedAPI) GetLensReviewReportRequest(arg0 *wellarchitected.GetLensReviewReportInput) (*request.Request, *wellarchitected.GetLensReviewReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensReviewReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetLensReviewReportOutput)
	return ret0, ret1
}

// GetLensReviewReportRequest indicates an expected call of GetLensReviewReportRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReviewReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewReportRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReviewReportRequest), arg0)
}

// GetLensReviewReportWithContext mocks base method
func (m *MockWellArchitectedAPI) GetLensReviewReportWithContext(arg0 context.Context, arg1 *wellarchitected.GetLensReviewReportInput, arg2 ...request.Option) (*wellarchitected.GetLensReviewReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLensReviewReportWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensReviewReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensReviewReportWithContext indicates an expected call of GetLensReviewReportWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReviewReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewReportWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReviewReportWithContext), varargs...)
}

// GetLensReviewRequest mocks base method
func (m *MockWellArchitectedAPI) GetLensReviewRequest(arg0 *wellarchitected.GetLensReviewInput) (*request.Request, *wellarchitected.GetLensReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetLensReviewOutput)
	return ret0, ret1
}

// GetLensReviewRequest indicates an expected call of GetLensReviewRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReviewRequest), arg0)
}

// GetLensReviewWithContext mocks base method
func (m *MockWellArchitectedAPI) GetLensReviewWithContext(arg0 context.Context, arg1 *wellarchitected.GetLensReviewInput, arg2 ...request.Option) (*wellarchitected.GetLensReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLensReviewWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensReviewWithContext indicates an expected call of GetLensReviewWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReviewWithContext), varargs...)
}

// GetLensVersionDifference mocks base method
func (m *MockWellArchitectedAPI) GetLensVersionDifference(arg0 *wellarchitected.GetLensVersionDifferenceInput) (*wellarchitected.GetLensVersionDifferenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensVersionDifference", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetLensVersionDifferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensVersionDifference indicates an expected call of GetLensVersionDifference
func (mr *MockWellArchitectedAPIMockRecorder) GetLensVersionDifference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensVersionDifference", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensVersionDifference), arg0)
}

// GetLensVersionDifferenceRequest mocks base method
func (m *MockWellArchitectedAPI) GetLensVersionDifferenceRequest(arg0 *wellarchitected.GetLensVersionDifferenceInput) (*request.Request, *wellarchitected.GetLensVersionDifferenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensVersionDifferenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetLensVersionDifferenceOutput)
	return ret0, ret1
}

// GetLensVersionDifferenceRequest indicates an expected call of GetLensVersionDifferenceRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetLensVersionDifferenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensVersionDifferenceRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensVersionDifferenceRequest), arg0)
}

// GetLensVersionDifferenceWithContext mocks base method
func (m *MockWellArchitectedAPI) GetLensVersionDifferenceWithContext(arg0 context.Context, arg1 *wellarchitected.GetLensVersionDifferenceInput, arg2 ...request.Option) (*wellarchitected.GetLensVersionDifferenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLensVersionDifferenceWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensVersionDifferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensVersionDifferenceWithContext indicates an expected call of GetLensVersionDifferenceWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetLensVersionDifferenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensVersionDifferenceWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensVersionDifferenceWithContext), varargs...)
}

// GetLensWithContext mocks base method
func (m *MockWellArchitectedAPI) GetLensWithContext(arg0 context.Context, arg1 *wellarchitected.GetLensInput, arg2 ...request.Option) (*wellarchitected.GetLensOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLensWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensWithContext indicates an expected call of GetLensWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetLensWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensWithContext), varargs...)
}

// GetMilestone mocks base method
func (m *MockWellArchitectedAPI) GetMilestone(arg0 *wellarchitected.GetMilestoneInput) (*wellarchitected.GetMilestoneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestone", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetMilestoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestone indicates an expected call of GetMilestone
func (mr *MockWellArchitectedAPIMockRecorder) GetMilestone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetMilestone), arg0)
}

// GetMilestoneRequest mocks base method
func (m *MockWellArchitectedAPI) GetMilestoneRequest(arg0 *wellarchitected.GetMilestoneInput) (*request.Request, *wellarchitected.GetMilestoneOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestoneRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetMilestoneOutput)
	return ret0, ret1
}

// GetMilestoneRequest indicates an expected call of GetMilestoneRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetMilestoneRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestoneRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetMilestoneRequest), arg0)
}

// GetMilestoneWithContext mocks base method
func (m *MockWellArchitectedAPI) GetMilestoneWithContext(arg0 context.Context, arg1 *wellarchitected.GetMilestoneInput, arg2 ...request.Option) (*wellarchitected.GetMilestoneOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMilestoneWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetMilestoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestoneWithContext indicates an expected call of GetMilestoneWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetMilestoneWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestoneWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetMilestoneWithContext), varargs...)
}

// GetProfile mocks base method
func (m *MockWellArchitectedAPI) GetProfile(arg0 *wellarchitected.GetProfileInput) (*wellarchitected.GetProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockWellArchitectedAPIMockRecorder) GetProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetProfile), arg0)
}

// GetProfileRequest mocks base method
func (m *MockWellArchitectedAPI) GetProfileRequest(arg0 *wellarchitected.GetProfileInput) (*request.Request, *wellarchitected.GetProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetProfileOutput)
	return ret0, ret1
}

// GetProfileRequest indicates an expected call of GetProfileRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetProfileRequest), arg0)
}

// GetProfileTemplate mocks base method
func (m *MockWellArchitectedAPI) GetProfileTemplate(arg0 *wellarchitected.GetProfileTemplateInput) (*wellarchitected.GetProfileTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileTemplate", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetProfileTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileTemplate indicates an expected call of GetProfileTemplate
func (mr *MockWellArchitectedAPIMockRecorder) GetProfileTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileTemplate", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetProfileTemplate), arg0)
}

// GetProfileTemplateRequest mocks base method
func (m *MockWellArchitectedAPI) GetProfileTemplateRequest(arg0 *wellarchitected.GetProfileTemplateInput) (*request.Request, *wellarchitected.GetProfileTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetProfileTemplateOutput)
	return ret0, ret1
}

// GetProfileTemplateRequest indicates an expected call of GetProfileTemplateRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetProfileTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileTemplateRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetProfileTemplateRequest), arg0)
}

// GetProfileTemplateWithContext mocks base method
func (m *MockWellArchitectedAPI) GetProfileTemplateWithContext(arg0 context.Context, arg1 *wellarchitected.GetProfileTemplateInput, arg2 ...request.Option) (*wellarchitected.GetProfileTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfileTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetProfileTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileTemplateWithContext indicates an expected call of GetProfileTemplateWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetProfileTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileTemplateWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetProfileTemplateWithContext), varargs...)
}

// GetProfileWithContext mocks base method
func (m *MockWellArchitectedAPI) GetProfileWithContext(arg0 context.Context, arg1 *wellarchitected.GetProfileInput, arg2 ...request.Option) (*wellarchitected.GetProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfileWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileWithContext indicates an expected call of GetProfileWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetProfileWithContext), varargs...)
}

// GetReviewTemplate mocks base method
func (m *MockWellArchitectedAPI) GetReviewTemplate(arg0 *wellarchitected.GetReviewTemplateInput) (*wellarchitected.GetReviewTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewTemplate", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetReviewTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewTemplate indicates an expected call of GetReviewTemplate
func (mr *MockWellArchitectedAPIMockRecorder) GetReviewTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewTemplate", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetReviewTemplate), arg0)
}

// GetReviewTemplateAnswer mocks base method
func (m *MockWellArchitectedAPI) GetReviewTemplateAnswer(arg0 *wellarchitected.GetReviewTemplateAnswerInput) (*wellarchitected.GetReviewTemplateAnswerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewTemplateAnswer", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetReviewTemplateAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewTemplateAnswer indicates an expected call of GetReviewTemplateAnswer
func (mr *MockWellArchitectedAPIMockRecorder) GetReviewTemplateAnswer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewTemplateAnswer", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetReviewTemplateAnswer), arg0)
}

// GetReviewTemplateAnswerRequest mocks base method
func (m *MockWellArchitectedAPI) GetReviewTemplateAnswerRequest(arg0 *wellarchitected.GetReviewTemplateAnswerInput) (*request.Request, *wellarchitected.GetReviewTemplateAnswerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewTemplateAnswerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetReviewTemplateAnswerOutput)
	return ret0, ret1
}

// GetReviewTemplateAnswerRequest indicates an expected call of GetReviewTemplateAnswerRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetReviewTemplateAnswerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewTemplateAnswerRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetReviewTemplateAnswerRequest), arg0)
}

// GetReviewTemplateAnswerWithContext mocks base method
func (m *MockWellArchitectedAPI) GetReviewTemplateAnswerWithContext(arg0 context.Context, arg1 *wellarchitected.GetReviewTemplateAnswerInput, arg2 ...request.Option) (*wellarchitected.GetReviewTemplateAnswerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReviewTemplateAnswerWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetReviewTemplateAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewTemplateAnswerWithContext indicates an expected call of GetReviewTemplateAnswerWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetReviewTemplateAnswerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewTemplateAnswerWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetReviewTemplateAnswerWithContext), varargs...)
}

// GetReviewTemplateLensReview mocks base method
func (m *MockWellArchitectedAPI) GetReviewTemplateLensReview(arg0 *wellarchitected.GetReviewTemplateLensReviewInput) (*wellarchitected.GetReviewTemplateLensReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewTemplateLensReview", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetReviewTemplateLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewTemplateLensReview indicates an expected call of GetReviewTemplateLensReview
func (mr *MockWellArchitectedAPIMockRecorder) GetReviewTemplateLensReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewTemplateLensReview", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetReviewTemplateLensReview), arg0)
}

// GetReviewTemplateLensReviewRequest mocks base method
func (m *MockWellArchitectedAPI) GetReviewTemplateLensReviewRequest(arg0 *wellarchitected.GetReviewTemplateLensReviewInput) (*request.Request, *wellarchitected.GetReviewTemplateLensReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewTemplateLensReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetReviewTemplateLensReviewOutput)
	return ret0, ret1
}

// GetReviewTemplateLensReviewRequest indicates an expected call of GetReviewTemplateLensReviewRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetReviewTemplateLensReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewTemplateLensReviewRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetReviewTemplateLensReviewRequest), arg0)
}

// GetReviewTemplateLensReviewWithContext mocks base method
func (m *MockWellArchitectedAPI) GetReviewTemplateLensReviewWithContext(arg0 context.Context, arg1 *wellarchitected.GetReviewTemplateLensReviewInput, arg2 ...request.Option) (*wellarchitected.GetReviewTemplateLensReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReviewTemplateLensReviewWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetReviewTemplateLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewTemplateLensReviewWithContext indicates an expected call of GetReviewTemplateLensReviewWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetReviewTemplateLensReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewTemplateLensReviewWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetReviewTemplateLensReviewWithContext), varargs...)
}

// GetReviewTemplateRequest mocks base method
func (m *MockWellArchitectedAPI) GetReviewTemplateRequest(arg0 *wellarchitected.GetReviewTemplateInput) (*request.Request, *wellarchitected.GetReviewTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetReviewTemplateOutput)
	return ret0, ret1
}

// GetReviewTemplateRequest indicates an expected call of GetReviewTemplateRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetReviewTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewTemplateRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetReviewTemplateRequest), arg0)
}

// GetReviewTemplateWithContext mocks base method
func (m *MockWellArchitectedAPI) GetReviewTemplateWithContext(arg0 context.Context, arg1 *wellarchitected.GetReviewTemplateInput, arg2 ...request.Option) (*wellarchitected.GetReviewTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReviewTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetReviewTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewTemplateWithContext indicates an expected call of GetReviewTemplateWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetReviewTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewTemplateWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetReviewTemplateWithContext), varargs...)
}

// GetWorkload mocks base method
func (m *MockWellArchitectedAPI) GetWorkload(arg0 *wellarchitected.GetWorkloadInput) (*wellarchitected.GetWorkloadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkload", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkload indicates an expected call of GetWorkload
func (mr *MockWellArchitectedAPIMockRecorder) GetWorkload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkload", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetWorkload), arg0)
}

// GetWorkloadRequest mocks base method
func (m *MockWellArchitectedAPI) GetWorkloadRequest(arg0 *wellarchitected.GetWorkloadInput) (*request.Request, *wellarchitected.GetWorkloadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkloadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetWorkloadOutput)
	return ret0, ret1
}

// GetWorkloadRequest indicates an expected call of GetWorkloadRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetWorkloadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetWorkloadRequest), arg0)
}

// GetWorkloadWithContext mocks base method
func (m *MockWellArchitectedAPI) GetWorkloadWithContext(arg0 context.Context, arg1 *wellarchitected.GetWorkloadInput, arg2 ...request.Option) (*wellarchitected.GetWorkloadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkloadWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkloadWithContext indicates an expected call of GetWorkloadWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetWorkloadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetWorkloadWithContext), varargs...)
}

// ImportLens mocks base method
func (m *MockWellArchitectedAPI) ImportLens(arg0 *wellarchitected.ImportLensInput) (*wellarchitected.ImportLensOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportLens", arg0)
	ret0, _ := ret[0].(*wellarchitected.ImportLensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportLens indicates an expected call of ImportLens
func (mr *MockWellArchitectedAPIMockRecorder) ImportLens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportLens", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ImportLens), arg0)
}

// ImportLensRequest mocks base method
func (m *MockWellArchitectedAPI) ImportLensRequest(arg0 *wellarchitected.ImportLensInput) (*request.Request, *wellarchitected.ImportLensOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportLensRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ImportLensOutput)
	return ret0, ret1
}

// ImportLensRequest indicates an expected call of ImportLensRequest
func (mr *MockWellArchitectedAPIMockRecorder) ImportLensRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportLensRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ImportLensRequest), arg0)
}

// ImportLensWithContext mocks base method
func (m *MockWellArchitectedAPI) ImportLensWithContext(arg0 context.Context, arg1 *wellarchitected.ImportLensInput, arg2 ...request.Option) (*wellarchitected.ImportLensOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportLensWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ImportLensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportLensWithContext indicates an expected call of ImportLensWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ImportLensWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportLensWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ImportLensWithContext), varargs...)
}

// ListAnswers mocks base method
func (m *MockWellArchitectedAPI) ListAnswers(arg0 *wellarchitected.ListAnswersInput) (*wellarchitected.ListAnswersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnswers", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListAnswersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnswers indicates an expected call of ListAnswers
func (mr *MockWellArchitectedAPIMockRecorder) ListAnswers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswers", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListAnswers), arg0)
}

// ListAnswersPages mocks base method
func (m *MockWellArchitectedAPI) ListAnswersPages(arg0 *wellarchitected.ListAnswersInput, arg1 func(*wellarchitected.ListAnswersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnswersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnswersPages indicates an expected call of ListAnswersPages
func (mr *MockWellArchitectedAPIMockRecorder) ListAnswersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswersPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListAnswersPages), arg0, arg1)
}

// ListAnswersPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListAnswersPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListAnswersInput, arg2 func(*wellarchitected.ListAnswersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnswersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnswersPagesWithContext indicates an expected call of ListAnswersPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListAnswersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswersPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListAnswersPagesWithContext), varargs...)
}

// ListAnswersRequest mocks base method
func (m *MockWellArchitectedAPI) ListAnswersRequest(arg0 *wellarchitected.ListAnswersInput) (*request.Request, *wellarchitected.ListAnswersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnswersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListAnswersOutput)
	return ret0, ret1
}

// ListAnswersRequest indicates an expected call of ListAnswersRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListAnswersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswersRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListAnswersRequest), arg0)
}

// ListAnswersWithContext mocks base method
func (m *MockWellArchitectedAPI) ListAnswersWithContext(arg0 context.Context, arg1 *wellarchitected.ListAnswersInput, arg2 ...request.Option) (*wellarchitected.ListAnswersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnswersWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListAnswersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnswersWithContext indicates an expected call of ListAnswersWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListAnswersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswersWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListAnswersWithContext), varargs...)
}

// ListCheckDetails mocks base method
func (m *MockWellArchitectedAPI) ListCheckDetails(arg0 *wellarchitected.ListCheckDetailsInput) (*wellarchitected.ListCheckDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckDetails", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListCheckDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckDetails indicates an expected call of ListCheckDetails
func (mr *MockWellArchitectedAPIMockRecorder) ListCheckDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckDetails", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListCheckDetails), arg0)
}

// ListCheckDetailsPages mocks base method
func (m *MockWellArchitectedAPI) ListCheckDetailsPages(arg0 *wellarchitected.ListCheckDetailsInput, arg1 func(*wellarchitected.ListCheckDetailsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckDetailsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCheckDetailsPages indicates an expected call of ListCheckDetailsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListCheckDetailsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckDetailsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListCheckDetailsPages), arg0, arg1)
}

// ListCheckDetailsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListCheckDetailsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListCheckDetailsInput, arg2 func(*wellarchitected.ListCheckDetailsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCheckDetailsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCheckDetailsPagesWithContext indicates an expected call of ListCheckDetailsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListCheckDetailsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckDetailsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListCheckDetailsPagesWithContext), varargs...)
}

// ListCheckDetailsRequest mocks base method
func (m *MockWellArchitectedAPI) ListCheckDetailsRequest(arg0 *wellarchitected.ListCheckDetailsInput) (*request.Request, *wellarchitected.ListCheckDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListCheckDetailsOutput)
	return ret0, ret1
}

// ListCheckDetailsRequest indicates an expected call of ListCheckDetailsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListCheckDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckDetailsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListCheckDetailsRequest), arg0)
}

// ListCheckDetailsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListCheckDetailsWithContext(arg0 context.Context, arg1 *wellarchitected.ListCheckDetailsInput, arg2 ...request.Option) (*wellarchitected.ListCheckDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCheckDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListCheckDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckDetailsWithContext indicates an expected call of ListCheckDetailsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListCheckDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckDetailsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListCheckDetailsWithContext), varargs...)
}

// ListCheckSummaries mocks base method
func (m *MockWellArchitectedAPI) ListCheckSummaries(arg0 *wellarchitected.ListCheckSummariesInput) (*wellarchitected.ListCheckSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckSummaries", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListCheckSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckSummaries indicates an expected call of ListCheckSummaries
func (mr *MockWellArchitectedAPIMockRecorder) ListCheckSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckSummaries", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListCheckSummaries), arg0)
}

// ListCheckSummariesPages mocks base method
func (m *MockWellArchitectedAPI) ListCheckSummariesPages(arg0 *wellarchitected.ListCheckSummariesInput, arg1 func(*wellarchitected.ListCheckSummariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckSummariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCheckSummariesPages indicates an expected call of ListCheckSummariesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListCheckSummariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckSummariesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListCheckSummariesPages), arg0, arg1)
}

// ListCheckSummariesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListCheckSummariesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListCheckSummariesInput, arg2 func(*wellarchitected.ListCheckSummariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCheckSummariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCheckSummariesPagesWithContext indicates an expected call of ListCheckSummariesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListCheckSummariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckSummariesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListCheckSummariesPagesWithContext), varargs...)
}

// ListCheckSummariesRequest mocks base method
func (m *MockWellArchitectedAPI) ListCheckSummariesRequest(arg0 *wellarchitected.ListCheckSummariesInput) (*request.Request, *wellarchitected.ListCheckSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListCheckSummariesOutput)
	return ret0, ret1
}

// ListCheckSummariesRequest indicates an expected call of ListCheckSummariesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListCheckSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckSummariesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListCheckSummariesRequest), arg0)
}

// ListCheckSummariesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListCheckSummariesWithContext(arg0 context.Context, arg1 *wellarchitected.ListCheckSummariesInput, arg2 ...request.Option) (*wellarchitected.ListCheckSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCheckSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListCheckSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckSummariesWithContext indicates an expected call of ListCheckSummariesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListCheckSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckSummariesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListCheckSummariesWithContext), varargs...)
}

// ListLensReviewImprovements mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewImprovements(arg0 *wellarchitected.ListLensReviewImprovementsInput) (*wellarchitected.ListLensReviewImprovementsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviewImprovements", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListLensReviewImprovementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensReviewImprovements indicates an expected call of ListLensReviewImprovements
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewImprovements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovements", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewImprovements), arg0)
}

// ListLensReviewImprovementsPages mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewImprovementsPages(arg0 *wellarchitected.ListLensReviewImprovementsInput, arg1 func(*wellarchitected.ListLensReviewImprovementsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviewImprovementsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensReviewImprovementsPages indicates an expected call of ListLensReviewImprovementsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewImprovementsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovementsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewImprovementsPages), arg0, arg1)
}

// ListLensReviewImprovementsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewImprovementsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensReviewImprovementsInput, arg2 func(*wellarchitected.ListLensReviewImprovementsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensReviewImprovementsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensReviewImprovementsPagesWithContext indicates an expected call of ListLensReviewImprovementsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewImprovementsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovementsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewImprovementsPagesWithContext), varargs...)
}

// ListLensReviewImprovementsRequest mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewImprovementsRequest(arg0 *wellarchitected.ListLensReviewImprovementsInput) (*request.Request, *wellarchitected.ListLensReviewImprovementsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviewImprovementsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListLensReviewImprovementsOutput)
	return ret0, ret1
}

// ListLensReviewImprovementsRequest indicates an expected call of ListLensReviewImprovementsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewImprovementsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovementsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewImprovementsRequest), arg0)
}

// ListLensReviewImprovementsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewImprovementsWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensReviewImprovementsInput, arg2 ...request.Option) (*wellarchitected.ListLensReviewImprovementsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensReviewImprovementsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensReviewImprovementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensReviewImprovementsWithContext indicates an expected call of ListLensReviewImprovementsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewImprovementsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovementsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewImprovementsWithContext), varargs...)
}

// ListLensReviews mocks base method
func (m *MockWellArchitectedAPI) ListLensReviews(arg0 *wellarchitected.ListLensReviewsInput) (*wellarchitected.ListLensReviewsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviews", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListLensReviewsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensReviews indicates an expected call of ListLensReviews
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviews", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviews), arg0)
}

// ListLensReviewsPages mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewsPages(arg0 *wellarchitected.ListLensReviewsInput, arg1 func(*wellarchitected.ListLensReviewsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviewsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensReviewsPages indicates an expected call of ListLensReviewsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewsPages), arg0, arg1)
}

// ListLensReviewsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensReviewsInput, arg2 func(*wellarchitected.ListLensReviewsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensReviewsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensReviewsPagesWithContext indicates an expected call of ListLensReviewsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewsPagesWithContext), varargs...)
}

// ListLensReviewsRequest mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewsRequest(arg0 *wellarchitected.ListLensReviewsInput) (*request.Request, *wellarchitected.ListLensReviewsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviewsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListLensReviewsOutput)
	return ret0, ret1
}

// ListLensReviewsRequest indicates an expected call of ListLensReviewsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewsRequest), arg0)
}

// ListLensReviewsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewsWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensReviewsInput, arg2 ...request.Option) (*wellarchitected.ListLensReviewsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensReviewsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensReviewsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensReviewsWithContext indicates an expected call of ListLensReviewsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewsWithContext), varargs...)
}

// ListLensShares mocks base method
func (m *MockWellArchitectedAPI) ListLensShares(arg0 *wellarchitected.ListLensSharesInput) (*wellarchitected.ListLensSharesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensShares", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListLensSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensShares indicates an expected call of ListLensShares
func (mr *MockWellArchitectedAPIMockRecorder) ListLensShares(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensShares", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensShares), arg0)
}

// ListLensSharesPages mocks base method
func (m *MockWellArchitectedAPI) ListLensSharesPages(arg0 *wellarchitected.ListLensSharesInput, arg1 func(*wellarchitected.ListLensSharesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensSharesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensSharesPages indicates an expected call of ListLensSharesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListLensSharesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensSharesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensSharesPages), arg0, arg1)
}

// ListLensSharesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensSharesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensSharesInput, arg2 func(*wellarchitected.ListLensSharesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensSharesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensSharesPagesWithContext indicates an expected call of ListLensSharesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensSharesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensSharesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensSharesPagesWithContext), varargs...)
}

// ListLensSharesRequest mocks base method
func (m *MockWellArchitectedAPI) ListLensSharesRequest(arg0 *wellarchitected.ListLensSharesInput) (*request.Request, *wellarchitected.ListLensSharesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensSharesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListLensSharesOutput)
	return ret0, ret1
}

// ListLensSharesRequest indicates an expected call of ListLensSharesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListLensSharesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensSharesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensSharesRequest), arg0)
}

// ListLensSharesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensSharesWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensSharesInput, arg2 ...request.Option) (*wellarchitected.ListLensSharesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensSharesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensSharesWithContext indicates an expected call of ListLensSharesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensSharesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensSharesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensSharesWithContext), varargs...)
}

// ListLenses mocks base method
func (m *MockWellArchitectedAPI) ListLenses(arg0 *wellarchitected.ListLensesInput) (*wellarchitected.ListLensesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLenses", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLenses indicates an expected call of ListLenses
func (mr *MockWellArchitectedAPIMockRecorder) ListLenses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLenses", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLenses), arg0)
}

// ListLensesPages mocks base method
func (m *MockWellArchitectedAPI) ListLensesPages(arg0 *wellarchitected.ListLensesInput, arg1 func(*wellarchitected.ListLensesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensesPages indicates an expected call of ListLensesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListLensesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensesPages), arg0, arg1)
}

// ListLensesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensesInput, arg2 func(*wellarchitected.ListLensesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensesPagesWithContext indicates an expected call of ListLensesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensesPagesWithContext), varargs...)
}

// ListLensesRequest mocks base method
func (m *MockWellArchitectedAPI) ListLensesRequest(arg0 *wellarchitected.ListLensesInput) (*request.Request, *wellarchitected.ListLensesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListLensesOutput)
	return ret0, ret1
}

// ListLensesRequest indicates an expected call of ListLensesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListLensesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensesRequest), arg0)
}

// ListLensesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensesWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensesInput, arg2 ...request.Option) (*wellarchitected.ListLensesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensesWithContext indicates an expected call of ListLensesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensesWithContext), varargs...)
}

// ListMilestones mocks base method
func (m *MockWellArchitectedAPI) ListMilestones(arg0 *wellarchitected.ListMilestonesInput) (*wellarchitected.ListMilestonesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMilestones", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListMilestonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMilestones indicates an expected call of ListMilestones
func (mr *MockWellArchitectedAPIMockRecorder) ListMilestones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestones", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListMilestones), arg0)
}

// ListMilestonesPages mocks base method
func (m *MockWellArchitectedAPI) ListMilestonesPages(arg0 *wellarchitected.ListMilestonesInput, arg1 func(*wellarchitected.ListMilestonesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMilestonesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMilestonesPages indicates an expected call of ListMilestonesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListMilestonesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestonesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListMilestonesPages), arg0, arg1)
}

// ListMilestonesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListMilestonesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListMilestonesInput, arg2 func(*wellarchitected.ListMilestonesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMilestonesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMilestonesPagesWithContext indicates an expected call of ListMilestonesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListMilestonesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestonesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListMilestonesPagesWithContext), varargs...)
}

// ListMilestonesRequest mocks base method
func (m *MockWellArchitectedAPI) ListMilestonesRequest(arg0 *wellarchitected.ListMilestonesInput) (*request.Request, *wellarchitected.ListMilestonesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMilestonesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListMilestonesOutput)
	return ret0, ret1
}

// ListMilestonesRequest indicates an expected call of ListMilestonesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListMilestonesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestonesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListMilestonesRequest), arg0)
}

// ListMilestonesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListMilestonesWithContext(arg0 context.Context, arg1 *wellarchitected.ListMilestonesInput, arg2 ...request.Option) (*wellarchitected.ListMilestonesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMilestonesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListMilestonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMilestonesWithContext indicates an expected call of ListMilestonesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListMilestonesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestonesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListMilestonesWithContext), varargs...)
}

// ListNotifications mocks base method
func (m *MockWellArchitectedAPI) ListNotifications(arg0 *wellarchitected.ListNotificationsInput) (*wellarchitected.ListNotificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications
func (mr *MockWellArchitectedAPIMockRecorder) ListNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListNotifications), arg0)
}

// ListNotificationsPages mocks base method
func (m *MockWellArchitectedAPI) ListNotificationsPages(arg0 *wellarchitected.ListNotificationsInput, arg1 func(*wellarchitected.ListNotificationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotificationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotificationsPages indicates an expected call of ListNotificationsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListNotificationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListNotificationsPages), arg0, arg1)
}

// ListNotificationsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListNotificationsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListNotificationsInput, arg2 func(*wellarchitected.ListNotificationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotificationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotificationsPagesWithContext indicates an expected call of ListNotificationsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListNotificationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListNotificationsPagesWithContext), varargs...)
}

// ListNotificationsRequest mocks base method
func (m *MockWellArchitectedAPI) ListNotificationsRequest(arg0 *wellarchitected.ListNotificationsInput) (*request.Request, *wellarchitected.ListNotificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListNotificationsOutput)
	return ret0, ret1
}

// ListNotificationsRequest indicates an expected call of ListNotificationsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListNotificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListNotificationsRequest), arg0)
}

// ListNotificationsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListNotificationsWithContext(arg0 context.Context, arg1 *wellarchitected.ListNotificationsInput, arg2 ...request.Option) (*wellarchitected.ListNotificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotificationsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotificationsWithContext indicates an expected call of ListNotificationsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListNotificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListNotificationsWithContext), varargs...)
}

// ListProfileNotifications mocks base method
func (m *MockWellArchitectedAPI) ListProfileNotifications(arg0 *wellarchitected.ListProfileNotificationsInput) (*wellarchitected.ListProfileNotificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileNotifications", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListProfileNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileNotifications indicates an expected call of ListProfileNotifications
func (mr *MockWellArchitectedAPIMockRecorder) ListProfileNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileNotifications", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfileNotifications), arg0)
}

// ListProfileNotificationsPages mocks base method
func (m *MockWellArchitectedAPI) ListProfileNotificationsPages(arg0 *wellarchitected.ListProfileNotificationsInput, arg1 func(*wellarchitected.ListProfileNotificationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileNotificationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfileNotificationsPages indicates an expected call of ListProfileNotificationsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListProfileNotificationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileNotificationsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfileNotificationsPages), arg0, arg1)
}

// ListProfileNotificationsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListProfileNotificationsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListProfileNotificationsInput, arg2 func(*wellarchitected.ListProfileNotificationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileNotificationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfileNotificationsPagesWithContext indicates an expected call of ListProfileNotificationsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListProfileNotificationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileNotificationsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfileNotificationsPagesWithContext), varargs...)
}

// ListProfileNotificationsRequest mocks base method
func (m *MockWellArchitectedAPI) ListProfileNotificationsRequest(arg0 *wellarchitected.ListProfileNotificationsInput) (*request.Request, *wellarchitected.ListProfileNotificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileNotificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListProfileNotificationsOutput)
	return ret0, ret1
}

// ListProfileNotificationsRequest indicates an expected call of ListProfileNotificationsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListProfileNotificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileNotificationsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfileNotificationsRequest), arg0)
}

// ListProfileNotificationsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListProfileNotificationsWithContext(arg0 context.Context, arg1 *wellarchitected.ListProfileNotificationsInput, arg2 ...request.Option) (*wellarchitected.ListProfileNotificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileNotificationsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListProfileNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileNotificationsWithContext indicates an expected call of ListProfileNotificationsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListProfileNotificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileNotificationsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfileNotificationsWithContext), varargs...)
}

// ListProfileShares mocks base method
func (m *MockWellArchitectedAPI) ListProfileShares(arg0 *wellarchitected.ListProfileSharesInput) (*wellarchitected.ListProfileSharesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileShares", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListProfileSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileShares indicates an expected call of ListProfileShares
func (mr *MockWellArchitectedAPIMockRecorder) ListProfileShares(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileShares", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfileShares), arg0)
}

// ListProfileSharesPages mocks base method
func (m *MockWellArchitectedAPI) ListProfileSharesPages(arg0 *wellarchitected.ListProfileSharesInput, arg1 func(*wellarchitected.ListProfileSharesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileSharesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfileSharesPages indicates an expected call of ListProfileSharesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListProfileSharesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileSharesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfileSharesPages), arg0, arg1)
}

// ListProfileSharesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListProfileSharesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListProfileSharesInput, arg2 func(*wellarchitected.ListProfileSharesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileSharesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfileSharesPagesWithContext indicates an expected call of ListProfileSharesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListProfileSharesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileSharesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfileSharesPagesWithContext), varargs...)
}

// ListProfileSharesRequest mocks base method
func (m *MockWellArchitectedAPI) ListProfileSharesRequest(arg0 *wellarchitected.ListProfileSharesInput) (*request.Request, *wellarchitected.ListProfileSharesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileSharesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListProfileSharesOutput)
	return ret0, ret1
}

// ListProfileSharesRequest indicates an expected call of ListProfileSharesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListProfileSharesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileSharesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfileSharesRequest), arg0)
}

// ListProfileSharesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListProfileSharesWithContext(arg0 context.Context, arg1 *wellarchitected.ListProfileSharesInput, arg2 ...request.Option) (*wellarchitected.ListProfileSharesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileSharesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListProfileSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileSharesWithContext indicates an expected call of ListProfileSharesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListProfileSharesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileSharesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfileSharesWithContext), varargs...)
}

// ListProfiles mocks base method
func (m *MockWellArchitectedAPI) ListProfiles(arg0 *wellarchitected.ListProfilesInput) (*wellarchitected.ListProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfiles", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfiles indicates an expected call of ListProfiles
func (mr *MockWellArchitectedAPIMockRecorder) ListProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfiles", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfiles), arg0)
}

// ListProfilesPages mocks base method
func (m *MockWellArchitectedAPI) ListProfilesPages(arg0 *wellarchitected.ListProfilesInput, arg1 func(*wellarchitected.ListProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfilesPages indicates an expected call of ListProfilesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfilesPages), arg0, arg1)
}

// ListProfilesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListProfilesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListProfilesInput, arg2 func(*wellarchitected.ListProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfilesPagesWithContext indicates an expected call of ListProfilesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfilesPagesWithContext), varargs...)
}

// ListProfilesRequest mocks base method
func (m *MockWellArchitectedAPI) ListProfilesRequest(arg0 *wellarchitected.ListProfilesInput) (*request.Request, *wellarchitected.ListProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListProfilesOutput)
	return ret0, ret1
}

// ListProfilesRequest indicates an expected call of ListProfilesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfilesRequest), arg0)
}

// ListProfilesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListProfilesWithContext(arg0 context.Context, arg1 *wellarchitected.ListProfilesInput, arg2 ...request.Option) (*wellarchitected.ListProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfilesWithContext indicates an expected call of ListProfilesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListProfilesWithContext), varargs...)
}

// ListReviewTemplateAnswers mocks base method
func (m *MockWellArchitectedAPI) ListReviewTemplateAnswers(arg0 *wellarchitected.ListReviewTemplateAnswersInput) (*wellarchitected.ListReviewTemplateAnswersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewTemplateAnswers", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListReviewTemplateAnswersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviewTemplateAnswers indicates an expected call of ListReviewTemplateAnswers
func (mr *MockWellArchitectedAPIMockRecorder) ListReviewTemplateAnswers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewTemplateAnswers", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListReviewTemplateAnswers), arg0)
}

// ListReviewTemplateAnswersPages mocks base method
func (m *MockWellArchitectedAPI) ListReviewTemplateAnswersPages(arg0 *wellarchitected.ListReviewTemplateAnswersInput, arg1 func(*wellarchitected.ListReviewTemplateAnswersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewTemplateAnswersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReviewTemplateAnswersPages indicates an expected call of ListReviewTemplateAnswersPages
func (mr *MockWellArchitectedAPIMockRecorder) ListReviewTemplateAnswersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewTemplateAnswersPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListReviewTemplateAnswersPages), arg0, arg1)
}

// ListReviewTemplateAnswersPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListReviewTemplateAnswersPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListReviewTemplateAnswersInput, arg2 func(*wellarchitected.ListReviewTemplateAnswersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReviewTemplateAnswersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReviewTemplateAnswersPagesWithContext indicates an expected call of ListReviewTemplateAnswersPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListReviewTemplateAnswersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewTemplateAnswersPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListReviewTemplateAnswersPagesWithContext), varargs...)
}

// ListReviewTemplateAnswersRequest mocks base method
func (m *MockWellArchitectedAPI) ListReviewTemplateAnswersRequest(arg0 *wellarchitected.ListReviewTemplateAnswersInput) (*request.Request, *wellarchitected.ListReviewTemplateAnswersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewTemplateAnswersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListReviewTemplateAnswersOutput)
	return ret0, ret1
}

// ListReviewTemplateAnswersRequest indicates an expected call of ListReviewTemplateAnswersRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListReviewTemplateAnswersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewTemplateAnswersRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListReviewTemplateAnswersRequest), arg0)
}

// ListReviewTemplateAnswersWithContext mocks base method
func (m *MockWellArchitectedAPI) ListReviewTemplateAnswersWithContext(arg0 context.Context, arg1 *wellarchitected.ListReviewTemplateAnswersInput, arg2 ...request.Option) (*wellarchitected.ListReviewTemplateAnswersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReviewTemplateAnswersWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListReviewTemplateAnswersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviewTemplateAnswersWithContext indicates an expected call of ListReviewTemplateAnswersWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListReviewTemplateAnswersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewTemplateAnswersWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListReviewTemplateAnswersWithContext), varargs...)
}

// ListReviewTemplates mocks base method
func (m *MockWellArchitectedAPI) ListReviewTemplates(arg0 *wellarchitected.ListReviewTemplatesInput) (*wellarchitected.ListReviewTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewTemplates", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListReviewTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviewTemplates indicates an expected call of ListReviewTemplates
func (mr *MockWellArchitectedAPIMockRecorder) ListReviewTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewTemplates", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListReviewTemplates), arg0)
}

// ListReviewTemplatesPages mocks base method
func (m *MockWellArchitectedAPI) ListReviewTemplatesPages(arg0 *wellarchitected.ListReviewTemplatesInput, arg1 func(*wellarchitected.ListReviewTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReviewTemplatesPages indicates an expected call of ListReviewTemplatesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListReviewTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewTemplatesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListReviewTemplatesPages), arg0, arg1)
}

// ListReviewTemplatesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListReviewTemplatesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListReviewTemplatesInput, arg2 func(*wellarchitected.ListReviewTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReviewTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReviewTemplatesPagesWithContext indicates an expected call of ListReviewTemplatesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListReviewTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewTemplatesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListReviewTemplatesPagesWithContext), varargs...)
}

// ListReviewTemplatesRequest mocks base method
func (m *MockWellArchitectedAPI) ListReviewTemplatesRequest(arg0 *wellarchitected.ListReviewTemplatesInput) (*request.Request, *wellarchitected.ListReviewTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListReviewTemplatesOutput)
	return ret0, ret1
}

// ListReviewTemplatesRequest indicates an expected call of ListReviewTemplatesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListReviewTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewTemplatesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListReviewTemplatesRequest), arg0)
}

// ListReviewTemplatesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListReviewTemplatesWithContext(arg0 context.Context, arg1 *wellarchitected.ListReviewTemplatesInput, arg2 ...request.Option) (*wellarchitected.ListReviewTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReviewTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListReviewTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviewTemplatesWithContext indicates an expected call of ListReviewTemplatesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListReviewTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewTemplatesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListReviewTemplatesWithContext), varargs...)
}

// ListShareInvitations mocks base method
func (m *MockWellArchitectedAPI) ListShareInvitations(arg0 *wellarchitected.ListShareInvitationsInput) (*wellarchitected.ListShareInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShareInvitations", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListShareInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShareInvitations indicates an expected call of ListShareInvitations
func (mr *MockWellArchitectedAPIMockRecorder) ListShareInvitations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitations", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListShareInvitations), arg0)
}

// ListShareInvitationsPages mocks base method
func (m *MockWellArchitectedAPI) ListShareInvitationsPages(arg0 *wellarchitected.ListShareInvitationsInput, arg1 func(*wellarchitected.ListShareInvitationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShareInvitationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListShareInvitationsPages indicates an expected call of ListShareInvitationsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListShareInvitationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitationsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListShareInvitationsPages), arg0, arg1)
}

// ListShareInvitationsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListShareInvitationsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListShareInvitationsInput, arg2 func(*wellarchitected.ListShareInvitationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListShareInvitationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListShareInvitationsPagesWithContext indicates an expected call of ListShareInvitationsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListShareInvitationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitationsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListShareInvitationsPagesWithContext), varargs...)
}

// ListShareInvitationsRequest mocks base method
func (m *MockWellArchitectedAPI) ListShareInvitationsRequest(arg0 *wellarchitected.ListShareInvitationsInput) (*request.Request, *wellarchitected.ListShareInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShareInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListShareInvitationsOutput)
	return ret0, ret1
}

// ListShareInvitationsRequest indicates an expected call of ListShareInvitationsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListShareInvitationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitationsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListShareInvitationsRequest), arg0)
}

// ListShareInvitationsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListShareInvitationsWithContext(arg0 context.Context, arg1 *wellarchitected.ListShareInvitationsInput, arg2 ...request.Option) (*wellarchitected.ListShareInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListShareInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListShareInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShareInvitationsWithContext indicates an expected call of ListShareInvitationsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListShareInvitationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitationsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListShareInvitationsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockWellArchitectedAPI) ListTagsForResource(arg0 *wellarchitected.ListTagsForResourceInput) (*wellarchitected.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockWellArchitectedAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockWellArchitectedAPI) ListTagsForResourceRequest(arg0 *wellarchitected.ListTagsForResourceInput) (*request.Request, *wellarchitected.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockWellArchitectedAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *wellarchitected.ListTagsForResourceInput, arg2 ...request.Option) (*wellarchitected.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTemplateShares mocks base method
func (m *MockWellArchitectedAPI) ListTemplateShares(arg0 *wellarchitected.ListTemplateSharesInput) (*wellarchitected.ListTemplateSharesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateShares", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListTemplateSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateShares indicates an expected call of ListTemplateShares
func (mr *MockWellArchitectedAPIMockRecorder) ListTemplateShares(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateShares", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListTemplateShares), arg0)
}

// ListTemplateSharesPages mocks base method
func (m *MockWellArchitectedAPI) ListTemplateSharesPages(arg0 *wellarchitected.ListTemplateSharesInput, arg1 func(*wellarchitected.ListTemplateSharesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateSharesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplateSharesPages indicates an expected call of ListTemplateSharesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListTemplateSharesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateSharesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListTemplateSharesPages), arg0, arg1)
}

// ListTemplateSharesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListTemplateSharesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListTemplateSharesInput, arg2 func(*wellarchitected.ListTemplateSharesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplateSharesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTemplateSharesPagesWithContext indicates an expected call of ListTemplateSharesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListTemplateSharesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateSharesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListTemplateSharesPagesWithContext), varargs...)
}

// ListTemplateSharesRequest mocks base method
func (m *MockWellArchitectedAPI) ListTemplateSharesRequest(arg0 *wellarchitected.ListTemplateSharesInput) (*request.Request, *wellarchitected.ListTemplateSharesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateSharesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListTemplateSharesOutput)
	return ret0, ret1
}

// ListTemplateSharesRequest indicates an expected call of ListTemplateSharesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListTemplateSharesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateSharesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListTemplateSharesRequest), arg0)
}

// ListTemplateSharesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListTemplateSharesWithContext(arg0 context.Context, arg1 *wellarchitected.ListTemplateSharesInput, arg2 ...request.Option) (*wellarchitected.ListTemplateSharesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplateSharesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListTemplateSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateSharesWithContext indicates an expected call of ListTemplateSharesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListTemplateSharesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateSharesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListTemplateSharesWithContext), varargs...)
}

// ListWorkloadShares mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadShares(arg0 *wellarchitected.ListWorkloadSharesInput) (*wellarchitected.ListWorkloadSharesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadShares", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListWorkloadSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloadShares indicates an expected call of ListWorkloadShares
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadShares(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadShares", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadShares), arg0)
}

// ListWorkloadSharesPages mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadSharesPages(arg0 *wellarchitected.ListWorkloadSharesInput, arg1 func(*wellarchitected.ListWorkloadSharesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadSharesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadSharesPages indicates an expected call of ListWorkloadSharesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadSharesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadSharesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadSharesPages), arg0, arg1)
}

// ListWorkloadSharesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadSharesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListWorkloadSharesInput, arg2 func(*wellarchitected.ListWorkloadSharesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadSharesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadSharesPagesWithContext indicates an expected call of ListWorkloadSharesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadSharesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadSharesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadSharesPagesWithContext), varargs...)
}

// ListWorkloadSharesRequest mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadSharesRequest(arg0 *wellarchitected.ListWorkloadSharesInput) (*request.Request, *wellarchitected.ListWorkloadSharesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadSharesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListWorkloadSharesOutput)
	return ret0, ret1
}

// ListWorkloadSharesRequest indicates an expected call of ListWorkloadSharesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadSharesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadSharesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadSharesRequest), arg0)
}

// ListWorkloadSharesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadSharesWithContext(arg0 context.Context, arg1 *wellarchitected.ListWorkloadSharesInput, arg2 ...request.Option) (*wellarchitected.ListWorkloadSharesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadSharesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListWorkloadSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloadSharesWithContext indicates an expected call of ListWorkloadSharesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadSharesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadSharesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadSharesWithContext), varargs...)
}

// ListWorkloads mocks base method
func (m *MockWellArchitectedAPI) ListWorkloads(arg0 *wellarchitected.ListWorkloadsInput) (*wellarchitected.ListWorkloadsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloads", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListWorkloadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloads indicates an expected call of ListWorkloads
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloads", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloads), arg0)
}

// ListWorkloadsPages mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadsPages(arg0 *wellarchitected.ListWorkloadsInput, arg1 func(*wellarchitected.ListWorkloadsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadsPages indicates an expected call of ListWorkloadsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadsPages), arg0, arg1)
}

// ListWorkloadsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListWorkloadsInput, arg2 func(*wellarchitected.ListWorkloadsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadsPagesWithContext indicates an expected call of ListWorkloadsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadsPagesWithContext), varargs...)
}

// ListWorkloadsRequest mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadsRequest(arg0 *wellarchitected.ListWorkloadsInput) (*request.Request, *wellarchitected.ListWorkloadsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListWorkloadsOutput)
	return ret0, ret1
}

// ListWorkloadsRequest indicates an expected call of ListWorkloadsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadsRequest), arg0)
}

// ListWorkloadsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadsWithContext(arg0 context.Context, arg1 *wellarchitected.ListWorkloadsInput, arg2 ...request.Option) (*wellarchitected.ListWorkloadsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListWorkloadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloadsWithContext indicates an expected call of ListWorkloadsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadsWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockWellArchitectedAPI) TagResource(arg0 *wellarchitected.TagResourceInput) (*wellarchitected.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*wellarchitected.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockWellArchitectedAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockWellArchitectedAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockWellArchitectedAPI) TagResourceRequest(arg0 *wellarchitected.TagResourceInput) (*request.Request, *wellarchitected.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockWellArchitectedAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockWellArchitectedAPI) TagResourceWithContext(arg0 context.Context, arg1 *wellarchitected.TagResourceInput, arg2 ...request.Option) (*wellarchitected.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockWellArchitectedAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockWellArchitectedAPI) UntagResource(arg0 *wellarchitected.UntagResourceInput) (*wellarchitected.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*wellarchitected.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockWellArchitectedAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockWellArchitectedAPI) UntagResourceRequest(arg0 *wellarchitected.UntagResourceInput) (*request.Request, *wellarchitected.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockWellArchitectedAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockWellArchitectedAPI) UntagResourceWithContext(arg0 context.Context, arg1 *wellarchitected.UntagResourceInput, arg2 ...request.Option) (*wellarchitected.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAnswer mocks base method
func (m *MockWellArchitectedAPI) UpdateAnswer(arg0 *wellarchitected.UpdateAnswerInput) (*wellarchitected.UpdateAnswerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnswer", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnswer indicates an expected call of UpdateAnswer
func (mr *MockWellArchitectedAPIMockRecorder) UpdateAnswer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswer", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateAnswer), arg0)
}

// UpdateAnswerRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateAnswerRequest(arg0 *wellarchitected.UpdateAnswerInput) (*request.Request, *wellarchitected.UpdateAnswerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnswerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateAnswerOutput)
	return ret0, ret1
}

// UpdateAnswerRequest indicates an expected call of UpdateAnswerRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateAnswerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswerRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateAnswerRequest), arg0)
}

// UpdateAnswerWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateAnswerWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateAnswerInput, arg2 ...request.Option) (*wellarchitected.UpdateAnswerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAnswerWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnswerWithContext indicates an expected call of UpdateAnswerWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateAnswerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswerWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateAnswerWithContext), varargs...)
}

// UpdateGlobalSettings mocks base method
func (m *MockWellArchitectedAPI) UpdateGlobalSettings(arg0 *wellarchitected.UpdateGlobalSettingsInput) (*wellarchitected.UpdateGlobalSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalSettings", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateGlobalSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalSettings indicates an expected call of UpdateGlobalSettings
func (mr *MockWellArchitectedAPIMockRecorder) UpdateGlobalSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSettings", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateGlobalSettings), arg0)
}

// UpdateGlobalSettingsRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateGlobalSettingsRequest(arg0 *wellarchitected.UpdateGlobalSettingsInput) (*request.Request, *wellarchitected.UpdateGlobalSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateGlobalSettingsOutput)
	return ret0, ret1
}

// UpdateGlobalSettingsRequest indicates an expected call of UpdateGlobalSettingsRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateGlobalSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSettingsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateGlobalSettingsRequest), arg0)
}

// UpdateGlobalSettingsWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateGlobalSettingsWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateGlobalSettingsInput, arg2 ...request.Option) (*wellarchitected.UpdateGlobalSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateGlobalSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalSettingsWithContext indicates an expected call of UpdateGlobalSettingsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateGlobalSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSettingsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateGlobalSettingsWithContext), varargs...)
}

// UpdateLensReview mocks base method
func (m *MockWellArchitectedAPI) UpdateLensReview(arg0 *wellarchitected.UpdateLensReviewInput) (*wellarchitected.UpdateLensReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLensReview", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLensReview indicates an expected call of UpdateLensReview
func (mr *MockWellArchitectedAPIMockRecorder) UpdateLensReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLensReview", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateLensReview), arg0)
}

// UpdateLensReviewRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateLensReviewRequest(arg0 *wellarchitected.UpdateLensReviewInput) (*request.Request, *wellarchitected.UpdateLensReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLensReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateLensReviewOutput)
	return ret0, ret1
}

// UpdateLensReviewRequest indicates an expected call of UpdateLensReviewRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateLensReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLensReviewRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateLensReviewRequest), arg0)
}

// UpdateLensReviewWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateLensReviewWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateLensReviewInput, arg2 ...request.Option) (*wellarchitected.UpdateLensReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLensReviewWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLensReviewWithContext indicates an expected call of UpdateLensReviewWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateLensReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLensReviewWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateLensReviewWithContext), varargs...)
}

// UpdateProfile mocks base method
func (m *MockWellArchitectedAPI) UpdateProfile(arg0 *wellarchitected.UpdateProfileInput) (*wellarchitected.UpdateProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockWellArchitectedAPIMockRecorder) UpdateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateProfile), arg0)
}

// UpdateProfileRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateProfileRequest(arg0 *wellarchitected.UpdateProfileInput) (*request.Request, *wellarchitected.UpdateProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateProfileOutput)
	return ret0, ret1
}

// UpdateProfileRequest indicates an expected call of UpdateProfileRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateProfileRequest), arg0)
}

// UpdateProfileWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateProfileWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateProfileInput, arg2 ...request.Option) (*wellarchitected.UpdateProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfileWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfileWithContext indicates an expected call of UpdateProfileWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateProfileWithContext), varargs...)
}

// UpdateReviewTemplate mocks base method
func (m *MockWellArchitectedAPI) UpdateReviewTemplate(arg0 *wellarchitected.UpdateReviewTemplateInput) (*wellarchitected.UpdateReviewTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewTemplate", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateReviewTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReviewTemplate indicates an expected call of UpdateReviewTemplate
func (mr *MockWellArchitectedAPIMockRecorder) UpdateReviewTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewTemplate", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateReviewTemplate), arg0)
}

// UpdateReviewTemplateAnswer mocks base method
func (m *MockWellArchitectedAPI) UpdateReviewTemplateAnswer(arg0 *wellarchitected.UpdateReviewTemplateAnswerInput) (*wellarchitected.UpdateReviewTemplateAnswerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewTemplateAnswer", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateReviewTemplateAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReviewTemplateAnswer indicates an expected call of UpdateReviewTemplateAnswer
func (mr *MockWellArchitectedAPIMockRecorder) UpdateReviewTemplateAnswer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewTemplateAnswer", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateReviewTemplateAnswer), arg0)
}

// UpdateReviewTemplateAnswerRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateReviewTemplateAnswerRequest(arg0 *wellarchitected.UpdateReviewTemplateAnswerInput) (*request.Request, *wellarchitected.UpdateReviewTemplateAnswerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewTemplateAnswerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateReviewTemplateAnswerOutput)
	return ret0, ret1
}

// UpdateReviewTemplateAnswerRequest indicates an expected call of UpdateReviewTemplateAnswerRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateReviewTemplateAnswerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewTemplateAnswerRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateReviewTemplateAnswerRequest), arg0)
}

// UpdateReviewTemplateAnswerWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateReviewTemplateAnswerWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateReviewTemplateAnswerInput, arg2 ...request.Option) (*wellarchitected.UpdateReviewTemplateAnswerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReviewTemplateAnswerWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateReviewTemplateAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReviewTemplateAnswerWithContext indicates an expected call of UpdateReviewTemplateAnswerWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateReviewTemplateAnswerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewTemplateAnswerWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateReviewTemplateAnswerWithContext), varargs...)
}

// UpdateReviewTemplateLensReview mocks base method
func (m *MockWellArchitectedAPI) UpdateReviewTemplateLensReview(arg0 *wellarchitected.UpdateReviewTemplateLensReviewInput) (*wellarchitected.UpdateReviewTemplateLensReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewTemplateLensReview", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateReviewTemplateLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReviewTemplateLensReview indicates an expected call of UpdateReviewTemplateLensReview
func (mr *MockWellArchitectedAPIMockRecorder) UpdateReviewTemplateLensReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewTemplateLensReview", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateReviewTemplateLensReview), arg0)
}

// UpdateReviewTemplateLensReviewRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateReviewTemplateLensReviewRequest(arg0 *wellarchitected.UpdateReviewTemplateLensReviewInput) (*request.Request, *wellarchitected.UpdateReviewTemplateLensReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewTemplateLensReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateReviewTemplateLensReviewOutput)
	return ret0, ret1
}

// UpdateReviewTemplateLensReviewRequest indicates an expected call of UpdateReviewTemplateLensReviewRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateReviewTemplateLensReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewTemplateLensReviewRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateReviewTemplateLensReviewRequest), arg0)
}

// UpdateReviewTemplateLensReviewWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateReviewTemplateLensReviewWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateReviewTemplateLensReviewInput, arg2 ...request.Option) (*wellarchitected.UpdateReviewTemplateLensReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReviewTemplateLensReviewWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateReviewTemplateLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReviewTemplateLensReviewWithContext indicates an expected call of UpdateReviewTemplateLensReviewWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateReviewTemplateLensReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewTemplateLensReviewWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateReviewTemplateLensReviewWithContext), varargs...)
}

// UpdateReviewTemplateRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateReviewTemplateRequest(arg0 *wellarchitected.UpdateReviewTemplateInput) (*request.Request, *wellarchitected.UpdateReviewTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateReviewTemplateOutput)
	return ret0, ret1
}

// UpdateReviewTemplateRequest indicates an expected call of UpdateReviewTemplateRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateReviewTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewTemplateRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateReviewTemplateRequest), arg0)
}

// UpdateReviewTemplateWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateReviewTemplateWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateReviewTemplateInput, arg2 ...request.Option) (*wellarchitected.UpdateReviewTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReviewTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateReviewTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReviewTemplateWithContext indicates an expected call of UpdateReviewTemplateWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateReviewTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewTemplateWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateReviewTemplateWithContext), varargs...)
}

// UpdateShareInvitation mocks base method
func (m *MockWellArchitectedAPI) UpdateShareInvitation(arg0 *wellarchitected.UpdateShareInvitationInput) (*wellarchitected.UpdateShareInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShareInvitation", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateShareInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShareInvitation indicates an expected call of UpdateShareInvitation
func (mr *MockWellArchitectedAPIMockRecorder) UpdateShareInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShareInvitation", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateShareInvitation), arg0)
}

// UpdateShareInvitationRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateShareInvitationRequest(arg0 *wellarchitected.UpdateShareInvitationInput) (*request.Request, *wellarchitected.UpdateShareInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShareInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateShareInvitationOutput)
	return ret0, ret1
}

// UpdateShareInvitationRequest indicates an expected call of UpdateShareInvitationRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateShareInvitationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShareInvitationRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateShareInvitationRequest), arg0)
}

// UpdateShareInvitationWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateShareInvitationWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateShareInvitationInput, arg2 ...request.Option) (*wellarchitected.UpdateShareInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateShareInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateShareInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShareInvitationWithContext indicates an expected call of UpdateShareInvitationWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateShareInvitationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShareInvitationWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateShareInvitationWithContext), varargs...)
}

// UpdateWorkload mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkload(arg0 *wellarchitected.UpdateWorkloadInput) (*wellarchitected.UpdateWorkloadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkload", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkload indicates an expected call of UpdateWorkload
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkload", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkload), arg0)
}

// UpdateWorkloadRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkloadRequest(arg0 *wellarchitected.UpdateWorkloadInput) (*request.Request, *wellarchitected.UpdateWorkloadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkloadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateWorkloadOutput)
	return ret0, ret1
}

// UpdateWorkloadRequest indicates an expected call of UpdateWorkloadRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkloadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkloadRequest), arg0)
}

// UpdateWorkloadShare mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkloadShare(arg0 *wellarchitected.UpdateWorkloadShareInput) (*wellarchitected.UpdateWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkloadShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkloadShare indicates an expected call of UpdateWorkloadShare
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkloadShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkloadShare), arg0)
}

// UpdateWorkloadShareRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkloadShareRequest(arg0 *wellarchitected.UpdateWorkloadShareInput) (*request.Request, *wellarchitected.UpdateWorkloadShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkloadShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateWorkloadShareOutput)
	return ret0, ret1
}

// UpdateWorkloadShareRequest indicates an expected call of UpdateWorkloadShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkloadShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkloadShareRequest), arg0)
}

// UpdateWorkloadShareWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkloadShareWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateWorkloadShareInput, arg2 ...request.Option) (*wellarchitected.UpdateWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkloadShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkloadShareWithContext indicates an expected call of UpdateWorkloadShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkloadShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkloadShareWithContext), varargs...)
}

// UpdateWorkloadWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkloadWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateWorkloadInput, arg2 ...request.Option) (*wellarchitected.UpdateWorkloadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkloadWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkloadWithContext indicates an expected call of UpdateWorkloadWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkloadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkloadWithContext), varargs...)
}

// UpgradeLensReview mocks base method
func (m *MockWellArchitectedAPI) UpgradeLensReview(arg0 *wellarchitected.UpgradeLensReviewInput) (*wellarchitected.UpgradeLensReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeLensReview", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpgradeLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeLensReview indicates an expected call of UpgradeLensReview
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeLensReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeLensReview", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeLensReview), arg0)
}

// UpgradeLensReviewRequest mocks base method
func (m *MockWellArchitectedAPI) UpgradeLensReviewRequest(arg0 *wellarchitected.UpgradeLensReviewInput) (*request.Request, *wellarchitected.UpgradeLensReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeLensReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpgradeLensReviewOutput)
	return ret0, ret1
}

// UpgradeLensReviewRequest indicates an expected call of UpgradeLensReviewRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeLensReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeLensReviewRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeLensReviewRequest), arg0)
}

// UpgradeLensReviewWithContext mocks base method
func (m *MockWellArchitectedAPI) UpgradeLensReviewWithContext(arg0 context.Context, arg1 *wellarchitected.UpgradeLensReviewInput, arg2 ...request.Option) (*wellarchitected.UpgradeLensReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeLensReviewWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpgradeLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeLensReviewWithContext indicates an expected call of UpgradeLensReviewWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeLensReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeLensReviewWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeLensReviewWithContext), varargs...)
}

// UpgradeProfileVersion mocks base method
func (m *MockWellArchitectedAPI) UpgradeProfileVersion(arg0 *wellarchitected.UpgradeProfileVersionInput) (*wellarchitected.UpgradeProfileVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeProfileVersion", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpgradeProfileVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeProfileVersion indicates an expected call of UpgradeProfileVersion
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeProfileVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeProfileVersion", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeProfileVersion), arg0)
}

// UpgradeProfileVersionRequest mocks base method
func (m *MockWellArchitectedAPI) UpgradeProfileVersionRequest(arg0 *wellarchitected.UpgradeProfileVersionInput) (*request.Request, *wellarchitected.UpgradeProfileVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeProfileVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpgradeProfileVersionOutput)
	return ret0, ret1
}

// UpgradeProfileVersionRequest indicates an expected call of UpgradeProfileVersionRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeProfileVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeProfileVersionRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeProfileVersionRequest), arg0)
}

// UpgradeProfileVersionWithContext mocks base method
func (m *MockWellArchitectedAPI) UpgradeProfileVersionWithContext(arg0 context.Context, arg1 *wellarchitected.UpgradeProfileVersionInput, arg2 ...request.Option) (*wellarchitected.UpgradeProfileVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeProfileVersionWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpgradeProfileVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeProfileVersionWithContext indicates an expected call of UpgradeProfileVersionWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeProfileVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeProfileVersionWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeProfileVersionWithContext), varargs...)
}

// UpgradeReviewTemplateLensReview mocks base method
func (m *MockWellArchitectedAPI) UpgradeReviewTemplateLensReview(arg0 *wellarchitected.UpgradeReviewTemplateLensReviewInput) (*wellarchitected.UpgradeReviewTemplateLensReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeReviewTemplateLensReview", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpgradeReviewTemplateLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeReviewTemplateLensReview indicates an expected call of UpgradeReviewTemplateLensReview
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeReviewTemplateLensReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeReviewTemplateLensReview", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeReviewTemplateLensReview), arg0)
}

// UpgradeReviewTemplateLensReviewRequest mocks base method
func (m *MockWellArchitectedAPI) UpgradeReviewTemplateLensReviewRequest(arg0 *wellarchitected.UpgradeReviewTemplateLensReviewInput) (*request.Request, *wellarchitected.UpgradeReviewTemplateLensReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeReviewTemplateLensReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpgradeReviewTemplateLensReviewOutput)
	return ret0, ret1
}

// UpgradeReviewTemplateLensReviewRequest indicates an expected call of UpgradeReviewTemplateLensReviewRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeReviewTemplateLensReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeReviewTemplateLensReviewRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeReviewTemplateLensReviewRequest), arg0)
}

// UpgradeReviewTemplateLensReviewWithContext mocks base method
func (m *MockWellArchitectedAPI) UpgradeReviewTemplateLensReviewWithContext(arg0 context.Context, arg1 *wellarchitected.UpgradeReviewTemplateLensReviewInput, arg2 ...request.Option) (*wellarchitected.UpgradeReviewTemplateLensReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeReviewTemplateLensReviewWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpgradeReviewTemplateLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeReviewTemplateLensReviewWithContext indicates an expected call of UpgradeReviewTemplateLensReviewWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeReviewTemplateLensReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeReviewTemplateLensReviewWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeReviewTemplateLensReviewWithContext), varargs...)
}
