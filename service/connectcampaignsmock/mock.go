// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/connectcampaigns/connectcampaignsiface (interfaces: ConnectCampaignsAPI)

// Package connectcampaignsmock is a generated GoMock package.
package connectcampaignsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	connectcampaigns "github.com/aws/aws-sdk-go/service/connectcampaigns"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConnectCampaignsAPI is a mock of ConnectCampaignsAPI interface
type MockConnectCampaignsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConnectCampaignsAPIMockRecorder
}

// MockConnectCampaignsAPIMockRecorder is the mock recorder for MockConnectCampaignsAPI
type MockConnectCampaignsAPIMockRecorder struct {
	mock *MockConnectCampaignsAPI
}

// NewMockConnectCampaignsAPI creates a new mock instance
func NewMockConnectCampaignsAPI(ctrl *gomock.Controller) *MockConnectCampaignsAPI {
	mock := &MockConnectCampaignsAPI{ctrl: ctrl}
	mock.recorder = &MockConnectCampaignsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectCampaignsAPI) EXPECT() *MockConnectCampaignsAPIMockRecorder {
	return m.recorder
}

// CreateCampaign mocks base method
func (m *MockConnectCampaignsAPI) CreateCampaign(arg0 *connectcampaigns.CreateCampaignInput) (*connectcampaigns.CreateCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", arg0)
	ret0, _ := ret[0].(*connectcampaigns.CreateCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaign indicates an expected call of CreateCampaign
func (mr *MockConnectCampaignsAPIMockRecorder) CreateCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).CreateCampaign), arg0)
}

// CreateCampaignRequest mocks base method
func (m *MockConnectCampaignsAPI) CreateCampaignRequest(arg0 *connectcampaigns.CreateCampaignInput) (*request.Request, *connectcampaigns.CreateCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.CreateCampaignOutput)
	return ret0, ret1
}

// CreateCampaignRequest indicates an expected call of CreateCampaignRequest
func (mr *MockConnectCampaignsAPIMockRecorder) CreateCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaignRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).CreateCampaignRequest), arg0)
}

// CreateCampaignWithContext mocks base method
func (m *MockConnectCampaignsAPI) CreateCampaignWithContext(arg0 context.Context, arg1 *connectcampaigns.CreateCampaignInput, arg2 ...request.Option) (*connectcampaigns.CreateCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.CreateCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaignWithContext indicates an expected call of CreateCampaignWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) CreateCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaignWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).CreateCampaignWithContext), varargs...)
}

// DeleteCampaign mocks base method
func (m *MockConnectCampaignsAPI) DeleteCampaign(arg0 *connectcampaigns.DeleteCampaignInput) (*connectcampaigns.DeleteCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCampaign", arg0)
	ret0, _ := ret[0].(*connectcampaigns.DeleteCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCampaign indicates an expected call of DeleteCampaign
func (mr *MockConnectCampaignsAPIMockRecorder) DeleteCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaign", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DeleteCampaign), arg0)
}

// DeleteCampaignRequest mocks base method
func (m *MockConnectCampaignsAPI) DeleteCampaignRequest(arg0 *connectcampaigns.DeleteCampaignInput) (*request.Request, *connectcampaigns.DeleteCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.DeleteCampaignOutput)
	return ret0, ret1
}

// DeleteCampaignRequest indicates an expected call of DeleteCampaignRequest
func (mr *MockConnectCampaignsAPIMockRecorder) DeleteCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaignRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DeleteCampaignRequest), arg0)
}

// DeleteCampaignWithContext mocks base method
func (m *MockConnectCampaignsAPI) DeleteCampaignWithContext(arg0 context.Context, arg1 *connectcampaigns.DeleteCampaignInput, arg2 ...request.Option) (*connectcampaigns.DeleteCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.DeleteCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCampaignWithContext indicates an expected call of DeleteCampaignWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) DeleteCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaignWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DeleteCampaignWithContext), varargs...)
}

// DeleteConnectInstanceConfig mocks base method
func (m *MockConnectCampaignsAPI) DeleteConnectInstanceConfig(arg0 *connectcampaigns.DeleteConnectInstanceConfigInput) (*connectcampaigns.DeleteConnectInstanceConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectInstanceConfig", arg0)
	ret0, _ := ret[0].(*connectcampaigns.DeleteConnectInstanceConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectInstanceConfig indicates an expected call of DeleteConnectInstanceConfig
func (mr *MockConnectCampaignsAPIMockRecorder) DeleteConnectInstanceConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectInstanceConfig", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DeleteConnectInstanceConfig), arg0)
}

// DeleteConnectInstanceConfigRequest mocks base method
func (m *MockConnectCampaignsAPI) DeleteConnectInstanceConfigRequest(arg0 *connectcampaigns.DeleteConnectInstanceConfigInput) (*request.Request, *connectcampaigns.DeleteConnectInstanceConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectInstanceConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.DeleteConnectInstanceConfigOutput)
	return ret0, ret1
}

// DeleteConnectInstanceConfigRequest indicates an expected call of DeleteConnectInstanceConfigRequest
func (mr *MockConnectCampaignsAPIMockRecorder) DeleteConnectInstanceConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectInstanceConfigRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DeleteConnectInstanceConfigRequest), arg0)
}

// DeleteConnectInstanceConfigWithContext mocks base method
func (m *MockConnectCampaignsAPI) DeleteConnectInstanceConfigWithContext(arg0 context.Context, arg1 *connectcampaigns.DeleteConnectInstanceConfigInput, arg2 ...request.Option) (*connectcampaigns.DeleteConnectInstanceConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectInstanceConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.DeleteConnectInstanceConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectInstanceConfigWithContext indicates an expected call of DeleteConnectInstanceConfigWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) DeleteConnectInstanceConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectInstanceConfigWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DeleteConnectInstanceConfigWithContext), varargs...)
}

// DeleteInstanceOnboardingJob mocks base method
func (m *MockConnectCampaignsAPI) DeleteInstanceOnboardingJob(arg0 *connectcampaigns.DeleteInstanceOnboardingJobInput) (*connectcampaigns.DeleteInstanceOnboardingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceOnboardingJob", arg0)
	ret0, _ := ret[0].(*connectcampaigns.DeleteInstanceOnboardingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceOnboardingJob indicates an expected call of DeleteInstanceOnboardingJob
func (mr *MockConnectCampaignsAPIMockRecorder) DeleteInstanceOnboardingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceOnboardingJob", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DeleteInstanceOnboardingJob), arg0)
}

// DeleteInstanceOnboardingJobRequest mocks base method
func (m *MockConnectCampaignsAPI) DeleteInstanceOnboardingJobRequest(arg0 *connectcampaigns.DeleteInstanceOnboardingJobInput) (*request.Request, *connectcampaigns.DeleteInstanceOnboardingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceOnboardingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.DeleteInstanceOnboardingJobOutput)
	return ret0, ret1
}

// DeleteInstanceOnboardingJobRequest indicates an expected call of DeleteInstanceOnboardingJobRequest
func (mr *MockConnectCampaignsAPIMockRecorder) DeleteInstanceOnboardingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceOnboardingJobRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DeleteInstanceOnboardingJobRequest), arg0)
}

// DeleteInstanceOnboardingJobWithContext mocks base method
func (m *MockConnectCampaignsAPI) DeleteInstanceOnboardingJobWithContext(arg0 context.Context, arg1 *connectcampaigns.DeleteInstanceOnboardingJobInput, arg2 ...request.Option) (*connectcampaigns.DeleteInstanceOnboardingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstanceOnboardingJobWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.DeleteInstanceOnboardingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceOnboardingJobWithContext indicates an expected call of DeleteInstanceOnboardingJobWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) DeleteInstanceOnboardingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceOnboardingJobWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DeleteInstanceOnboardingJobWithContext), varargs...)
}

// DescribeCampaign mocks base method
func (m *MockConnectCampaignsAPI) DescribeCampaign(arg0 *connectcampaigns.DescribeCampaignInput) (*connectcampaigns.DescribeCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCampaign", arg0)
	ret0, _ := ret[0].(*connectcampaigns.DescribeCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCampaign indicates an expected call of DescribeCampaign
func (mr *MockConnectCampaignsAPIMockRecorder) DescribeCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCampaign", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DescribeCampaign), arg0)
}

// DescribeCampaignRequest mocks base method
func (m *MockConnectCampaignsAPI) DescribeCampaignRequest(arg0 *connectcampaigns.DescribeCampaignInput) (*request.Request, *connectcampaigns.DescribeCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.DescribeCampaignOutput)
	return ret0, ret1
}

// DescribeCampaignRequest indicates an expected call of DescribeCampaignRequest
func (mr *MockConnectCampaignsAPIMockRecorder) DescribeCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCampaignRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DescribeCampaignRequest), arg0)
}

// DescribeCampaignWithContext mocks base method
func (m *MockConnectCampaignsAPI) DescribeCampaignWithContext(arg0 context.Context, arg1 *connectcampaigns.DescribeCampaignInput, arg2 ...request.Option) (*connectcampaigns.DescribeCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.DescribeCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCampaignWithContext indicates an expected call of DescribeCampaignWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) DescribeCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCampaignWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).DescribeCampaignWithContext), varargs...)
}

// GetCampaignState mocks base method
func (m *MockConnectCampaignsAPI) GetCampaignState(arg0 *connectcampaigns.GetCampaignStateInput) (*connectcampaigns.GetCampaignStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignState", arg0)
	ret0, _ := ret[0].(*connectcampaigns.GetCampaignStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignState indicates an expected call of GetCampaignState
func (mr *MockConnectCampaignsAPIMockRecorder) GetCampaignState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignState", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetCampaignState), arg0)
}

// GetCampaignStateBatch mocks base method
func (m *MockConnectCampaignsAPI) GetCampaignStateBatch(arg0 *connectcampaigns.GetCampaignStateBatchInput) (*connectcampaigns.GetCampaignStateBatchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignStateBatch", arg0)
	ret0, _ := ret[0].(*connectcampaigns.GetCampaignStateBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignStateBatch indicates an expected call of GetCampaignStateBatch
func (mr *MockConnectCampaignsAPIMockRecorder) GetCampaignStateBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignStateBatch", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetCampaignStateBatch), arg0)
}

// GetCampaignStateBatchRequest mocks base method
func (m *MockConnectCampaignsAPI) GetCampaignStateBatchRequest(arg0 *connectcampaigns.GetCampaignStateBatchInput) (*request.Request, *connectcampaigns.GetCampaignStateBatchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignStateBatchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.GetCampaignStateBatchOutput)
	return ret0, ret1
}

// GetCampaignStateBatchRequest indicates an expected call of GetCampaignStateBatchRequest
func (mr *MockConnectCampaignsAPIMockRecorder) GetCampaignStateBatchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignStateBatchRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetCampaignStateBatchRequest), arg0)
}

// GetCampaignStateBatchWithContext mocks base method
func (m *MockConnectCampaignsAPI) GetCampaignStateBatchWithContext(arg0 context.Context, arg1 *connectcampaigns.GetCampaignStateBatchInput, arg2 ...request.Option) (*connectcampaigns.GetCampaignStateBatchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCampaignStateBatchWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.GetCampaignStateBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignStateBatchWithContext indicates an expected call of GetCampaignStateBatchWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) GetCampaignStateBatchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignStateBatchWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetCampaignStateBatchWithContext), varargs...)
}

// GetCampaignStateRequest mocks base method
func (m *MockConnectCampaignsAPI) GetCampaignStateRequest(arg0 *connectcampaigns.GetCampaignStateInput) (*request.Request, *connectcampaigns.GetCampaignStateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.GetCampaignStateOutput)
	return ret0, ret1
}

// GetCampaignStateRequest indicates an expected call of GetCampaignStateRequest
func (mr *MockConnectCampaignsAPIMockRecorder) GetCampaignStateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignStateRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetCampaignStateRequest), arg0)
}

// GetCampaignStateWithContext mocks base method
func (m *MockConnectCampaignsAPI) GetCampaignStateWithContext(arg0 context.Context, arg1 *connectcampaigns.GetCampaignStateInput, arg2 ...request.Option) (*connectcampaigns.GetCampaignStateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCampaignStateWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.GetCampaignStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignStateWithContext indicates an expected call of GetCampaignStateWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) GetCampaignStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignStateWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetCampaignStateWithContext), varargs...)
}

// GetConnectInstanceConfig mocks base method
func (m *MockConnectCampaignsAPI) GetConnectInstanceConfig(arg0 *connectcampaigns.GetConnectInstanceConfigInput) (*connectcampaigns.GetConnectInstanceConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectInstanceConfig", arg0)
	ret0, _ := ret[0].(*connectcampaigns.GetConnectInstanceConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectInstanceConfig indicates an expected call of GetConnectInstanceConfig
func (mr *MockConnectCampaignsAPIMockRecorder) GetConnectInstanceConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectInstanceConfig", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetConnectInstanceConfig), arg0)
}

// GetConnectInstanceConfigRequest mocks base method
func (m *MockConnectCampaignsAPI) GetConnectInstanceConfigRequest(arg0 *connectcampaigns.GetConnectInstanceConfigInput) (*request.Request, *connectcampaigns.GetConnectInstanceConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectInstanceConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.GetConnectInstanceConfigOutput)
	return ret0, ret1
}

// GetConnectInstanceConfigRequest indicates an expected call of GetConnectInstanceConfigRequest
func (mr *MockConnectCampaignsAPIMockRecorder) GetConnectInstanceConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectInstanceConfigRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetConnectInstanceConfigRequest), arg0)
}

// GetConnectInstanceConfigWithContext mocks base method
func (m *MockConnectCampaignsAPI) GetConnectInstanceConfigWithContext(arg0 context.Context, arg1 *connectcampaigns.GetConnectInstanceConfigInput, arg2 ...request.Option) (*connectcampaigns.GetConnectInstanceConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectInstanceConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.GetConnectInstanceConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectInstanceConfigWithContext indicates an expected call of GetConnectInstanceConfigWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) GetConnectInstanceConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectInstanceConfigWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetConnectInstanceConfigWithContext), varargs...)
}

// GetInstanceOnboardingJobStatus mocks base method
func (m *MockConnectCampaignsAPI) GetInstanceOnboardingJobStatus(arg0 *connectcampaigns.GetInstanceOnboardingJobStatusInput) (*connectcampaigns.GetInstanceOnboardingJobStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceOnboardingJobStatus", arg0)
	ret0, _ := ret[0].(*connectcampaigns.GetInstanceOnboardingJobStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceOnboardingJobStatus indicates an expected call of GetInstanceOnboardingJobStatus
func (mr *MockConnectCampaignsAPIMockRecorder) GetInstanceOnboardingJobStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceOnboardingJobStatus", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetInstanceOnboardingJobStatus), arg0)
}

// GetInstanceOnboardingJobStatusRequest mocks base method
func (m *MockConnectCampaignsAPI) GetInstanceOnboardingJobStatusRequest(arg0 *connectcampaigns.GetInstanceOnboardingJobStatusInput) (*request.Request, *connectcampaigns.GetInstanceOnboardingJobStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceOnboardingJobStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.GetInstanceOnboardingJobStatusOutput)
	return ret0, ret1
}

// GetInstanceOnboardingJobStatusRequest indicates an expected call of GetInstanceOnboardingJobStatusRequest
func (mr *MockConnectCampaignsAPIMockRecorder) GetInstanceOnboardingJobStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceOnboardingJobStatusRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetInstanceOnboardingJobStatusRequest), arg0)
}

// GetInstanceOnboardingJobStatusWithContext mocks base method
func (m *MockConnectCampaignsAPI) GetInstanceOnboardingJobStatusWithContext(arg0 context.Context, arg1 *connectcampaigns.GetInstanceOnboardingJobStatusInput, arg2 ...request.Option) (*connectcampaigns.GetInstanceOnboardingJobStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceOnboardingJobStatusWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.GetInstanceOnboardingJobStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceOnboardingJobStatusWithContext indicates an expected call of GetInstanceOnboardingJobStatusWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) GetInstanceOnboardingJobStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceOnboardingJobStatusWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).GetInstanceOnboardingJobStatusWithContext), varargs...)
}

// ListCampaigns mocks base method
func (m *MockConnectCampaignsAPI) ListCampaigns(arg0 *connectcampaigns.ListCampaignsInput) (*connectcampaigns.ListCampaignsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCampaigns", arg0)
	ret0, _ := ret[0].(*connectcampaigns.ListCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCampaigns indicates an expected call of ListCampaigns
func (mr *MockConnectCampaignsAPIMockRecorder) ListCampaigns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaigns", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ListCampaigns), arg0)
}

// ListCampaignsPages mocks base method
func (m *MockConnectCampaignsAPI) ListCampaignsPages(arg0 *connectcampaigns.ListCampaignsInput, arg1 func(*connectcampaigns.ListCampaignsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCampaignsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCampaignsPages indicates an expected call of ListCampaignsPages
func (mr *MockConnectCampaignsAPIMockRecorder) ListCampaignsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsPages", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ListCampaignsPages), arg0, arg1)
}

// ListCampaignsPagesWithContext mocks base method
func (m *MockConnectCampaignsAPI) ListCampaignsPagesWithContext(arg0 context.Context, arg1 *connectcampaigns.ListCampaignsInput, arg2 func(*connectcampaigns.ListCampaignsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCampaignsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCampaignsPagesWithContext indicates an expected call of ListCampaignsPagesWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) ListCampaignsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsPagesWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ListCampaignsPagesWithContext), varargs...)
}

// ListCampaignsRequest mocks base method
func (m *MockConnectCampaignsAPI) ListCampaignsRequest(arg0 *connectcampaigns.ListCampaignsInput) (*request.Request, *connectcampaigns.ListCampaignsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCampaignsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.ListCampaignsOutput)
	return ret0, ret1
}

// ListCampaignsRequest indicates an expected call of ListCampaignsRequest
func (mr *MockConnectCampaignsAPIMockRecorder) ListCampaignsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ListCampaignsRequest), arg0)
}

// ListCampaignsWithContext mocks base method
func (m *MockConnectCampaignsAPI) ListCampaignsWithContext(arg0 context.Context, arg1 *connectcampaigns.ListCampaignsInput, arg2 ...request.Option) (*connectcampaigns.ListCampaignsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCampaignsWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.ListCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCampaignsWithContext indicates an expected call of ListCampaignsWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) ListCampaignsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ListCampaignsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockConnectCampaignsAPI) ListTagsForResource(arg0 *connectcampaigns.ListTagsForResourceInput) (*connectcampaigns.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*connectcampaigns.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockConnectCampaignsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockConnectCampaignsAPI) ListTagsForResourceRequest(arg0 *connectcampaigns.ListTagsForResourceInput) (*request.Request, *connectcampaigns.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockConnectCampaignsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockConnectCampaignsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *connectcampaigns.ListTagsForResourceInput, arg2 ...request.Option) (*connectcampaigns.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PauseCampaign mocks base method
func (m *MockConnectCampaignsAPI) PauseCampaign(arg0 *connectcampaigns.PauseCampaignInput) (*connectcampaigns.PauseCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseCampaign", arg0)
	ret0, _ := ret[0].(*connectcampaigns.PauseCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseCampaign indicates an expected call of PauseCampaign
func (mr *MockConnectCampaignsAPIMockRecorder) PauseCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseCampaign", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).PauseCampaign), arg0)
}

// PauseCampaignRequest mocks base method
func (m *MockConnectCampaignsAPI) PauseCampaignRequest(arg0 *connectcampaigns.PauseCampaignInput) (*request.Request, *connectcampaigns.PauseCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.PauseCampaignOutput)
	return ret0, ret1
}

// PauseCampaignRequest indicates an expected call of PauseCampaignRequest
func (mr *MockConnectCampaignsAPIMockRecorder) PauseCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseCampaignRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).PauseCampaignRequest), arg0)
}

// PauseCampaignWithContext mocks base method
func (m *MockConnectCampaignsAPI) PauseCampaignWithContext(arg0 context.Context, arg1 *connectcampaigns.PauseCampaignInput, arg2 ...request.Option) (*connectcampaigns.PauseCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PauseCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.PauseCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseCampaignWithContext indicates an expected call of PauseCampaignWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) PauseCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseCampaignWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).PauseCampaignWithContext), varargs...)
}

// PutDialRequestBatch mocks base method
func (m *MockConnectCampaignsAPI) PutDialRequestBatch(arg0 *connectcampaigns.PutDialRequestBatchInput) (*connectcampaigns.PutDialRequestBatchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDialRequestBatch", arg0)
	ret0, _ := ret[0].(*connectcampaigns.PutDialRequestBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDialRequestBatch indicates an expected call of PutDialRequestBatch
func (mr *MockConnectCampaignsAPIMockRecorder) PutDialRequestBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDialRequestBatch", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).PutDialRequestBatch), arg0)
}

// PutDialRequestBatchRequest mocks base method
func (m *MockConnectCampaignsAPI) PutDialRequestBatchRequest(arg0 *connectcampaigns.PutDialRequestBatchInput) (*request.Request, *connectcampaigns.PutDialRequestBatchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDialRequestBatchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.PutDialRequestBatchOutput)
	return ret0, ret1
}

// PutDialRequestBatchRequest indicates an expected call of PutDialRequestBatchRequest
func (mr *MockConnectCampaignsAPIMockRecorder) PutDialRequestBatchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDialRequestBatchRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).PutDialRequestBatchRequest), arg0)
}

// PutDialRequestBatchWithContext mocks base method
func (m *MockConnectCampaignsAPI) PutDialRequestBatchWithContext(arg0 context.Context, arg1 *connectcampaigns.PutDialRequestBatchInput, arg2 ...request.Option) (*connectcampaigns.PutDialRequestBatchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDialRequestBatchWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.PutDialRequestBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDialRequestBatchWithContext indicates an expected call of PutDialRequestBatchWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) PutDialRequestBatchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDialRequestBatchWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).PutDialRequestBatchWithContext), varargs...)
}

// ResumeCampaign mocks base method
func (m *MockConnectCampaignsAPI) ResumeCampaign(arg0 *connectcampaigns.ResumeCampaignInput) (*connectcampaigns.ResumeCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeCampaign", arg0)
	ret0, _ := ret[0].(*connectcampaigns.ResumeCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeCampaign indicates an expected call of ResumeCampaign
func (mr *MockConnectCampaignsAPIMockRecorder) ResumeCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeCampaign", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ResumeCampaign), arg0)
}

// ResumeCampaignRequest mocks base method
func (m *MockConnectCampaignsAPI) ResumeCampaignRequest(arg0 *connectcampaigns.ResumeCampaignInput) (*request.Request, *connectcampaigns.ResumeCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.ResumeCampaignOutput)
	return ret0, ret1
}

// ResumeCampaignRequest indicates an expected call of ResumeCampaignRequest
func (mr *MockConnectCampaignsAPIMockRecorder) ResumeCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeCampaignRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ResumeCampaignRequest), arg0)
}

// ResumeCampaignWithContext mocks base method
func (m *MockConnectCampaignsAPI) ResumeCampaignWithContext(arg0 context.Context, arg1 *connectcampaigns.ResumeCampaignInput, arg2 ...request.Option) (*connectcampaigns.ResumeCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.ResumeCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeCampaignWithContext indicates an expected call of ResumeCampaignWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) ResumeCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeCampaignWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).ResumeCampaignWithContext), varargs...)
}

// StartCampaign mocks base method
func (m *MockConnectCampaignsAPI) StartCampaign(arg0 *connectcampaigns.StartCampaignInput) (*connectcampaigns.StartCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCampaign", arg0)
	ret0, _ := ret[0].(*connectcampaigns.StartCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCampaign indicates an expected call of StartCampaign
func (mr *MockConnectCampaignsAPIMockRecorder) StartCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCampaign", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).StartCampaign), arg0)
}

// StartCampaignRequest mocks base method
func (m *MockConnectCampaignsAPI) StartCampaignRequest(arg0 *connectcampaigns.StartCampaignInput) (*request.Request, *connectcampaigns.StartCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.StartCampaignOutput)
	return ret0, ret1
}

// StartCampaignRequest indicates an expected call of StartCampaignRequest
func (mr *MockConnectCampaignsAPIMockRecorder) StartCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCampaignRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).StartCampaignRequest), arg0)
}

// StartCampaignWithContext mocks base method
func (m *MockConnectCampaignsAPI) StartCampaignWithContext(arg0 context.Context, arg1 *connectcampaigns.StartCampaignInput, arg2 ...request.Option) (*connectcampaigns.StartCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.StartCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCampaignWithContext indicates an expected call of StartCampaignWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) StartCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCampaignWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).StartCampaignWithContext), varargs...)
}

// StartInstanceOnboardingJob mocks base method
func (m *MockConnectCampaignsAPI) StartInstanceOnboardingJob(arg0 *connectcampaigns.StartInstanceOnboardingJobInput) (*connectcampaigns.StartInstanceOnboardingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstanceOnboardingJob", arg0)
	ret0, _ := ret[0].(*connectcampaigns.StartInstanceOnboardingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstanceOnboardingJob indicates an expected call of StartInstanceOnboardingJob
func (mr *MockConnectCampaignsAPIMockRecorder) StartInstanceOnboardingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstanceOnboardingJob", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).StartInstanceOnboardingJob), arg0)
}

// StartInstanceOnboardingJobRequest mocks base method
func (m *MockConnectCampaignsAPI) StartInstanceOnboardingJobRequest(arg0 *connectcampaigns.StartInstanceOnboardingJobInput) (*request.Request, *connectcampaigns.StartInstanceOnboardingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstanceOnboardingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.StartInstanceOnboardingJobOutput)
	return ret0, ret1
}

// StartInstanceOnboardingJobRequest indicates an expected call of StartInstanceOnboardingJobRequest
func (mr *MockConnectCampaignsAPIMockRecorder) StartInstanceOnboardingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstanceOnboardingJobRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).StartInstanceOnboardingJobRequest), arg0)
}

// StartInstanceOnboardingJobWithContext mocks base method
func (m *MockConnectCampaignsAPI) StartInstanceOnboardingJobWithContext(arg0 context.Context, arg1 *connectcampaigns.StartInstanceOnboardingJobInput, arg2 ...request.Option) (*connectcampaigns.StartInstanceOnboardingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartInstanceOnboardingJobWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.StartInstanceOnboardingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstanceOnboardingJobWithContext indicates an expected call of StartInstanceOnboardingJobWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) StartInstanceOnboardingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstanceOnboardingJobWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).StartInstanceOnboardingJobWithContext), varargs...)
}

// StopCampaign mocks base method
func (m *MockConnectCampaignsAPI) StopCampaign(arg0 *connectcampaigns.StopCampaignInput) (*connectcampaigns.StopCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCampaign", arg0)
	ret0, _ := ret[0].(*connectcampaigns.StopCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCampaign indicates an expected call of StopCampaign
func (mr *MockConnectCampaignsAPIMockRecorder) StopCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCampaign", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).StopCampaign), arg0)
}

// StopCampaignRequest mocks base method
func (m *MockConnectCampaignsAPI) StopCampaignRequest(arg0 *connectcampaigns.StopCampaignInput) (*request.Request, *connectcampaigns.StopCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.StopCampaignOutput)
	return ret0, ret1
}

// StopCampaignRequest indicates an expected call of StopCampaignRequest
func (mr *MockConnectCampaignsAPIMockRecorder) StopCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCampaignRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).StopCampaignRequest), arg0)
}

// StopCampaignWithContext mocks base method
func (m *MockConnectCampaignsAPI) StopCampaignWithContext(arg0 context.Context, arg1 *connectcampaigns.StopCampaignInput, arg2 ...request.Option) (*connectcampaigns.StopCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.StopCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCampaignWithContext indicates an expected call of StopCampaignWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) StopCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCampaignWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).StopCampaignWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockConnectCampaignsAPI) TagResource(arg0 *connectcampaigns.TagResourceInput) (*connectcampaigns.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*connectcampaigns.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockConnectCampaignsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockConnectCampaignsAPI) TagResourceRequest(arg0 *connectcampaigns.TagResourceInput) (*request.Request, *connectcampaigns.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockConnectCampaignsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockConnectCampaignsAPI) TagResourceWithContext(arg0 context.Context, arg1 *connectcampaigns.TagResourceInput, arg2 ...request.Option) (*connectcampaigns.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockConnectCampaignsAPI) UntagResource(arg0 *connectcampaigns.UntagResourceInput) (*connectcampaigns.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*connectcampaigns.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockConnectCampaignsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockConnectCampaignsAPI) UntagResourceRequest(arg0 *connectcampaigns.UntagResourceInput) (*request.Request, *connectcampaigns.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockConnectCampaignsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockConnectCampaignsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *connectcampaigns.UntagResourceInput, arg2 ...request.Option) (*connectcampaigns.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCampaignDialerConfig mocks base method
func (m *MockConnectCampaignsAPI) UpdateCampaignDialerConfig(arg0 *connectcampaigns.UpdateCampaignDialerConfigInput) (*connectcampaigns.UpdateCampaignDialerConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaignDialerConfig", arg0)
	ret0, _ := ret[0].(*connectcampaigns.UpdateCampaignDialerConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaignDialerConfig indicates an expected call of UpdateCampaignDialerConfig
func (mr *MockConnectCampaignsAPIMockRecorder) UpdateCampaignDialerConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignDialerConfig", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UpdateCampaignDialerConfig), arg0)
}

// UpdateCampaignDialerConfigRequest mocks base method
func (m *MockConnectCampaignsAPI) UpdateCampaignDialerConfigRequest(arg0 *connectcampaigns.UpdateCampaignDialerConfigInput) (*request.Request, *connectcampaigns.UpdateCampaignDialerConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaignDialerConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.UpdateCampaignDialerConfigOutput)
	return ret0, ret1
}

// UpdateCampaignDialerConfigRequest indicates an expected call of UpdateCampaignDialerConfigRequest
func (mr *MockConnectCampaignsAPIMockRecorder) UpdateCampaignDialerConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignDialerConfigRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UpdateCampaignDialerConfigRequest), arg0)
}

// UpdateCampaignDialerConfigWithContext mocks base method
func (m *MockConnectCampaignsAPI) UpdateCampaignDialerConfigWithContext(arg0 context.Context, arg1 *connectcampaigns.UpdateCampaignDialerConfigInput, arg2 ...request.Option) (*connectcampaigns.UpdateCampaignDialerConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCampaignDialerConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.UpdateCampaignDialerConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaignDialerConfigWithContext indicates an expected call of UpdateCampaignDialerConfigWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) UpdateCampaignDialerConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignDialerConfigWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UpdateCampaignDialerConfigWithContext), varargs...)
}

// UpdateCampaignName mocks base method
func (m *MockConnectCampaignsAPI) UpdateCampaignName(arg0 *connectcampaigns.UpdateCampaignNameInput) (*connectcampaigns.UpdateCampaignNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaignName", arg0)
	ret0, _ := ret[0].(*connectcampaigns.UpdateCampaignNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaignName indicates an expected call of UpdateCampaignName
func (mr *MockConnectCampaignsAPIMockRecorder) UpdateCampaignName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignName", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UpdateCampaignName), arg0)
}

// UpdateCampaignNameRequest mocks base method
func (m *MockConnectCampaignsAPI) UpdateCampaignNameRequest(arg0 *connectcampaigns.UpdateCampaignNameInput) (*request.Request, *connectcampaigns.UpdateCampaignNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaignNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.UpdateCampaignNameOutput)
	return ret0, ret1
}

// UpdateCampaignNameRequest indicates an expected call of UpdateCampaignNameRequest
func (mr *MockConnectCampaignsAPIMockRecorder) UpdateCampaignNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignNameRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UpdateCampaignNameRequest), arg0)
}

// UpdateCampaignNameWithContext mocks base method
func (m *MockConnectCampaignsAPI) UpdateCampaignNameWithContext(arg0 context.Context, arg1 *connectcampaigns.UpdateCampaignNameInput, arg2 ...request.Option) (*connectcampaigns.UpdateCampaignNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCampaignNameWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.UpdateCampaignNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaignNameWithContext indicates an expected call of UpdateCampaignNameWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) UpdateCampaignNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignNameWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UpdateCampaignNameWithContext), varargs...)
}

// UpdateCampaignOutboundCallConfig mocks base method
func (m *MockConnectCampaignsAPI) UpdateCampaignOutboundCallConfig(arg0 *connectcampaigns.UpdateCampaignOutboundCallConfigInput) (*connectcampaigns.UpdateCampaignOutboundCallConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaignOutboundCallConfig", arg0)
	ret0, _ := ret[0].(*connectcampaigns.UpdateCampaignOutboundCallConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaignOutboundCallConfig indicates an expected call of UpdateCampaignOutboundCallConfig
func (mr *MockConnectCampaignsAPIMockRecorder) UpdateCampaignOutboundCallConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignOutboundCallConfig", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UpdateCampaignOutboundCallConfig), arg0)
}

// UpdateCampaignOutboundCallConfigRequest mocks base method
func (m *MockConnectCampaignsAPI) UpdateCampaignOutboundCallConfigRequest(arg0 *connectcampaigns.UpdateCampaignOutboundCallConfigInput) (*request.Request, *connectcampaigns.UpdateCampaignOutboundCallConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaignOutboundCallConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectcampaigns.UpdateCampaignOutboundCallConfigOutput)
	return ret0, ret1
}

// UpdateCampaignOutboundCallConfigRequest indicates an expected call of UpdateCampaignOutboundCallConfigRequest
func (mr *MockConnectCampaignsAPIMockRecorder) UpdateCampaignOutboundCallConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignOutboundCallConfigRequest", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UpdateCampaignOutboundCallConfigRequest), arg0)
}

// UpdateCampaignOutboundCallConfigWithContext mocks base method
func (m *MockConnectCampaignsAPI) UpdateCampaignOutboundCallConfigWithContext(arg0 context.Context, arg1 *connectcampaigns.UpdateCampaignOutboundCallConfigInput, arg2 ...request.Option) (*connectcampaigns.UpdateCampaignOutboundCallConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCampaignOutboundCallConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connectcampaigns.UpdateCampaignOutboundCallConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaignOutboundCallConfigWithContext indicates an expected call of UpdateCampaignOutboundCallConfigWithContext
func (mr *MockConnectCampaignsAPIMockRecorder) UpdateCampaignOutboundCallConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignOutboundCallConfigWithContext", reflect.TypeOf((*MockConnectCampaignsAPI)(nil).UpdateCampaignOutboundCallConfigWithContext), varargs...)
}
