// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/securitylake/securitylakeiface (interfaces: SecurityLakeAPI)

// Package securitylakemock is a generated GoMock package.
package securitylakemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	securitylake "github.com/aws/aws-sdk-go/service/securitylake"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSecurityLakeAPI is a mock of SecurityLakeAPI interface
type MockSecurityLakeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityLakeAPIMockRecorder
}

// MockSecurityLakeAPIMockRecorder is the mock recorder for MockSecurityLakeAPI
type MockSecurityLakeAPIMockRecorder struct {
	mock *MockSecurityLakeAPI
}

// NewMockSecurityLakeAPI creates a new mock instance
func NewMockSecurityLakeAPI(ctrl *gomock.Controller) *MockSecurityLakeAPI {
	mock := &MockSecurityLakeAPI{ctrl: ctrl}
	mock.recorder = &MockSecurityLakeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecurityLakeAPI) EXPECT() *MockSecurityLakeAPIMockRecorder {
	return m.recorder
}

// CreateAwsLogSource mocks base method
func (m *MockSecurityLakeAPI) CreateAwsLogSource(arg0 *securitylake.CreateAwsLogSourceInput) (*securitylake.CreateAwsLogSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAwsLogSource", arg0)
	ret0, _ := ret[0].(*securitylake.CreateAwsLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAwsLogSource indicates an expected call of CreateAwsLogSource
func (mr *MockSecurityLakeAPIMockRecorder) CreateAwsLogSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAwsLogSource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateAwsLogSource), arg0)
}

// CreateAwsLogSourceRequest mocks base method
func (m *MockSecurityLakeAPI) CreateAwsLogSourceRequest(arg0 *securitylake.CreateAwsLogSourceInput) (*request.Request, *securitylake.CreateAwsLogSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAwsLogSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateAwsLogSourceOutput)
	return ret0, ret1
}

// CreateAwsLogSourceRequest indicates an expected call of CreateAwsLogSourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateAwsLogSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAwsLogSourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateAwsLogSourceRequest), arg0)
}

// CreateAwsLogSourceWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateAwsLogSourceWithContext(arg0 context.Context, arg1 *securitylake.CreateAwsLogSourceInput, arg2 ...request.Option) (*securitylake.CreateAwsLogSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAwsLogSourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateAwsLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAwsLogSourceWithContext indicates an expected call of CreateAwsLogSourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateAwsLogSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAwsLogSourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateAwsLogSourceWithContext), varargs...)
}

// CreateCustomLogSource mocks base method
func (m *MockSecurityLakeAPI) CreateCustomLogSource(arg0 *securitylake.CreateCustomLogSourceInput) (*securitylake.CreateCustomLogSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomLogSource", arg0)
	ret0, _ := ret[0].(*securitylake.CreateCustomLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomLogSource indicates an expected call of CreateCustomLogSource
func (mr *MockSecurityLakeAPIMockRecorder) CreateCustomLogSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomLogSource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateCustomLogSource), arg0)
}

// CreateCustomLogSourceRequest mocks base method
func (m *MockSecurityLakeAPI) CreateCustomLogSourceRequest(arg0 *securitylake.CreateCustomLogSourceInput) (*request.Request, *securitylake.CreateCustomLogSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomLogSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateCustomLogSourceOutput)
	return ret0, ret1
}

// CreateCustomLogSourceRequest indicates an expected call of CreateCustomLogSourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateCustomLogSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomLogSourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateCustomLogSourceRequest), arg0)
}

// CreateCustomLogSourceWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateCustomLogSourceWithContext(arg0 context.Context, arg1 *securitylake.CreateCustomLogSourceInput, arg2 ...request.Option) (*securitylake.CreateCustomLogSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomLogSourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateCustomLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomLogSourceWithContext indicates an expected call of CreateCustomLogSourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateCustomLogSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomLogSourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateCustomLogSourceWithContext), varargs...)
}

// CreateDataLake mocks base method
func (m *MockSecurityLakeAPI) CreateDataLake(arg0 *securitylake.CreateDataLakeInput) (*securitylake.CreateDataLakeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataLake", arg0)
	ret0, _ := ret[0].(*securitylake.CreateDataLakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataLake indicates an expected call of CreateDataLake
func (mr *MockSecurityLakeAPIMockRecorder) CreateDataLake(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataLake", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDataLake), arg0)
}

// CreateDataLakeExceptionSubscription mocks base method
func (m *MockSecurityLakeAPI) CreateDataLakeExceptionSubscription(arg0 *securitylake.CreateDataLakeExceptionSubscriptionInput) (*securitylake.CreateDataLakeExceptionSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataLakeExceptionSubscription", arg0)
	ret0, _ := ret[0].(*securitylake.CreateDataLakeExceptionSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataLakeExceptionSubscription indicates an expected call of CreateDataLakeExceptionSubscription
func (mr *MockSecurityLakeAPIMockRecorder) CreateDataLakeExceptionSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataLakeExceptionSubscription", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDataLakeExceptionSubscription), arg0)
}

// CreateDataLakeExceptionSubscriptionRequest mocks base method
func (m *MockSecurityLakeAPI) CreateDataLakeExceptionSubscriptionRequest(arg0 *securitylake.CreateDataLakeExceptionSubscriptionInput) (*request.Request, *securitylake.CreateDataLakeExceptionSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataLakeExceptionSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateDataLakeExceptionSubscriptionOutput)
	return ret0, ret1
}

// CreateDataLakeExceptionSubscriptionRequest indicates an expected call of CreateDataLakeExceptionSubscriptionRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateDataLakeExceptionSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataLakeExceptionSubscriptionRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDataLakeExceptionSubscriptionRequest), arg0)
}

// CreateDataLakeExceptionSubscriptionWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateDataLakeExceptionSubscriptionWithContext(arg0 context.Context, arg1 *securitylake.CreateDataLakeExceptionSubscriptionInput, arg2 ...request.Option) (*securitylake.CreateDataLakeExceptionSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataLakeExceptionSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateDataLakeExceptionSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataLakeExceptionSubscriptionWithContext indicates an expected call of CreateDataLakeExceptionSubscriptionWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateDataLakeExceptionSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataLakeExceptionSubscriptionWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDataLakeExceptionSubscriptionWithContext), varargs...)
}

// CreateDataLakeOrganizationConfiguration mocks base method
func (m *MockSecurityLakeAPI) CreateDataLakeOrganizationConfiguration(arg0 *securitylake.CreateDataLakeOrganizationConfigurationInput) (*securitylake.CreateDataLakeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataLakeOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*securitylake.CreateDataLakeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataLakeOrganizationConfiguration indicates an expected call of CreateDataLakeOrganizationConfiguration
func (mr *MockSecurityLakeAPIMockRecorder) CreateDataLakeOrganizationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataLakeOrganizationConfiguration", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDataLakeOrganizationConfiguration), arg0)
}

// CreateDataLakeOrganizationConfigurationRequest mocks base method
func (m *MockSecurityLakeAPI) CreateDataLakeOrganizationConfigurationRequest(arg0 *securitylake.CreateDataLakeOrganizationConfigurationInput) (*request.Request, *securitylake.CreateDataLakeOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataLakeOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateDataLakeOrganizationConfigurationOutput)
	return ret0, ret1
}

// CreateDataLakeOrganizationConfigurationRequest indicates an expected call of CreateDataLakeOrganizationConfigurationRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateDataLakeOrganizationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataLakeOrganizationConfigurationRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDataLakeOrganizationConfigurationRequest), arg0)
}

// CreateDataLakeOrganizationConfigurationWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateDataLakeOrganizationConfigurationWithContext(arg0 context.Context, arg1 *securitylake.CreateDataLakeOrganizationConfigurationInput, arg2 ...request.Option) (*securitylake.CreateDataLakeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataLakeOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateDataLakeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataLakeOrganizationConfigurationWithContext indicates an expected call of CreateDataLakeOrganizationConfigurationWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateDataLakeOrganizationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataLakeOrganizationConfigurationWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDataLakeOrganizationConfigurationWithContext), varargs...)
}

// CreateDataLakeRequest mocks base method
func (m *MockSecurityLakeAPI) CreateDataLakeRequest(arg0 *securitylake.CreateDataLakeInput) (*request.Request, *securitylake.CreateDataLakeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataLakeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateDataLakeOutput)
	return ret0, ret1
}

// CreateDataLakeRequest indicates an expected call of CreateDataLakeRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateDataLakeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataLakeRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDataLakeRequest), arg0)
}

// CreateDataLakeWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateDataLakeWithContext(arg0 context.Context, arg1 *securitylake.CreateDataLakeInput, arg2 ...request.Option) (*securitylake.CreateDataLakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataLakeWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateDataLakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataLakeWithContext indicates an expected call of CreateDataLakeWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateDataLakeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataLakeWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDataLakeWithContext), varargs...)
}

// CreateSubscriber mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriber(arg0 *securitylake.CreateSubscriberInput) (*securitylake.CreateSubscriberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriber", arg0)
	ret0, _ := ret[0].(*securitylake.CreateSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriber indicates an expected call of CreateSubscriber
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriber", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriber), arg0)
}

// CreateSubscriberNotification mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriberNotification(arg0 *securitylake.CreateSubscriberNotificationInput) (*securitylake.CreateSubscriberNotificationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriberNotification", arg0)
	ret0, _ := ret[0].(*securitylake.CreateSubscriberNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriberNotification indicates an expected call of CreateSubscriberNotification
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriberNotification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriberNotification", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriberNotification), arg0)
}

// CreateSubscriberNotificationRequest mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriberNotificationRequest(arg0 *securitylake.CreateSubscriberNotificationInput) (*request.Request, *securitylake.CreateSubscriberNotificationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriberNotificationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateSubscriberNotificationOutput)
	return ret0, ret1
}

// CreateSubscriberNotificationRequest indicates an expected call of CreateSubscriberNotificationRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriberNotificationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriberNotificationRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriberNotificationRequest), arg0)
}

// CreateSubscriberNotificationWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriberNotificationWithContext(arg0 context.Context, arg1 *securitylake.CreateSubscriberNotificationInput, arg2 ...request.Option) (*securitylake.CreateSubscriberNotificationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubscriberNotificationWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateSubscriberNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriberNotificationWithContext indicates an expected call of CreateSubscriberNotificationWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriberNotificationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriberNotificationWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriberNotificationWithContext), varargs...)
}

// CreateSubscriberRequest mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriberRequest(arg0 *securitylake.CreateSubscriberInput) (*request.Request, *securitylake.CreateSubscriberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateSubscriberOutput)
	return ret0, ret1
}

// CreateSubscriberRequest indicates an expected call of CreateSubscriberRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriberRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriberRequest), arg0)
}

// CreateSubscriberWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriberWithContext(arg0 context.Context, arg1 *securitylake.CreateSubscriberInput, arg2 ...request.Option) (*securitylake.CreateSubscriberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubscriberWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriberWithContext indicates an expected call of CreateSubscriberWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriberWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriberWithContext), varargs...)
}

// DeleteAwsLogSource mocks base method
func (m *MockSecurityLakeAPI) DeleteAwsLogSource(arg0 *securitylake.DeleteAwsLogSourceInput) (*securitylake.DeleteAwsLogSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAwsLogSource", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteAwsLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAwsLogSource indicates an expected call of DeleteAwsLogSource
func (mr *MockSecurityLakeAPIMockRecorder) DeleteAwsLogSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAwsLogSource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteAwsLogSource), arg0)
}

// DeleteAwsLogSourceRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteAwsLogSourceRequest(arg0 *securitylake.DeleteAwsLogSourceInput) (*request.Request, *securitylake.DeleteAwsLogSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAwsLogSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteAwsLogSourceOutput)
	return ret0, ret1
}

// DeleteAwsLogSourceRequest indicates an expected call of DeleteAwsLogSourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteAwsLogSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAwsLogSourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteAwsLogSourceRequest), arg0)
}

// DeleteAwsLogSourceWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteAwsLogSourceWithContext(arg0 context.Context, arg1 *securitylake.DeleteAwsLogSourceInput, arg2 ...request.Option) (*securitylake.DeleteAwsLogSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAwsLogSourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteAwsLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAwsLogSourceWithContext indicates an expected call of DeleteAwsLogSourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteAwsLogSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAwsLogSourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteAwsLogSourceWithContext), varargs...)
}

// DeleteCustomLogSource mocks base method
func (m *MockSecurityLakeAPI) DeleteCustomLogSource(arg0 *securitylake.DeleteCustomLogSourceInput) (*securitylake.DeleteCustomLogSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomLogSource", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteCustomLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomLogSource indicates an expected call of DeleteCustomLogSource
func (mr *MockSecurityLakeAPIMockRecorder) DeleteCustomLogSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomLogSource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteCustomLogSource), arg0)
}

// DeleteCustomLogSourceRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteCustomLogSourceRequest(arg0 *securitylake.DeleteCustomLogSourceInput) (*request.Request, *securitylake.DeleteCustomLogSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomLogSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteCustomLogSourceOutput)
	return ret0, ret1
}

// DeleteCustomLogSourceRequest indicates an expected call of DeleteCustomLogSourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteCustomLogSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomLogSourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteCustomLogSourceRequest), arg0)
}

// DeleteCustomLogSourceWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteCustomLogSourceWithContext(arg0 context.Context, arg1 *securitylake.DeleteCustomLogSourceInput, arg2 ...request.Option) (*securitylake.DeleteCustomLogSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomLogSourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteCustomLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomLogSourceWithContext indicates an expected call of DeleteCustomLogSourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteCustomLogSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomLogSourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteCustomLogSourceWithContext), varargs...)
}

// DeleteDataLake mocks base method
func (m *MockSecurityLakeAPI) DeleteDataLake(arg0 *securitylake.DeleteDataLakeInput) (*securitylake.DeleteDataLakeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataLake", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteDataLakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataLake indicates an expected call of DeleteDataLake
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDataLake(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataLake", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDataLake), arg0)
}

// DeleteDataLakeExceptionSubscription mocks base method
func (m *MockSecurityLakeAPI) DeleteDataLakeExceptionSubscription(arg0 *securitylake.DeleteDataLakeExceptionSubscriptionInput) (*securitylake.DeleteDataLakeExceptionSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataLakeExceptionSubscription", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteDataLakeExceptionSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataLakeExceptionSubscription indicates an expected call of DeleteDataLakeExceptionSubscription
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDataLakeExceptionSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataLakeExceptionSubscription", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDataLakeExceptionSubscription), arg0)
}

// DeleteDataLakeExceptionSubscriptionRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteDataLakeExceptionSubscriptionRequest(arg0 *securitylake.DeleteDataLakeExceptionSubscriptionInput) (*request.Request, *securitylake.DeleteDataLakeExceptionSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataLakeExceptionSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteDataLakeExceptionSubscriptionOutput)
	return ret0, ret1
}

// DeleteDataLakeExceptionSubscriptionRequest indicates an expected call of DeleteDataLakeExceptionSubscriptionRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDataLakeExceptionSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataLakeExceptionSubscriptionRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDataLakeExceptionSubscriptionRequest), arg0)
}

// DeleteDataLakeExceptionSubscriptionWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteDataLakeExceptionSubscriptionWithContext(arg0 context.Context, arg1 *securitylake.DeleteDataLakeExceptionSubscriptionInput, arg2 ...request.Option) (*securitylake.DeleteDataLakeExceptionSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataLakeExceptionSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteDataLakeExceptionSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataLakeExceptionSubscriptionWithContext indicates an expected call of DeleteDataLakeExceptionSubscriptionWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDataLakeExceptionSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataLakeExceptionSubscriptionWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDataLakeExceptionSubscriptionWithContext), varargs...)
}

// DeleteDataLakeOrganizationConfiguration mocks base method
func (m *MockSecurityLakeAPI) DeleteDataLakeOrganizationConfiguration(arg0 *securitylake.DeleteDataLakeOrganizationConfigurationInput) (*securitylake.DeleteDataLakeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataLakeOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteDataLakeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataLakeOrganizationConfiguration indicates an expected call of DeleteDataLakeOrganizationConfiguration
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDataLakeOrganizationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataLakeOrganizationConfiguration", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDataLakeOrganizationConfiguration), arg0)
}

// DeleteDataLakeOrganizationConfigurationRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteDataLakeOrganizationConfigurationRequest(arg0 *securitylake.DeleteDataLakeOrganizationConfigurationInput) (*request.Request, *securitylake.DeleteDataLakeOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataLakeOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteDataLakeOrganizationConfigurationOutput)
	return ret0, ret1
}

// DeleteDataLakeOrganizationConfigurationRequest indicates an expected call of DeleteDataLakeOrganizationConfigurationRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDataLakeOrganizationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataLakeOrganizationConfigurationRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDataLakeOrganizationConfigurationRequest), arg0)
}

// DeleteDataLakeOrganizationConfigurationWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteDataLakeOrganizationConfigurationWithContext(arg0 context.Context, arg1 *securitylake.DeleteDataLakeOrganizationConfigurationInput, arg2 ...request.Option) (*securitylake.DeleteDataLakeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataLakeOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteDataLakeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataLakeOrganizationConfigurationWithContext indicates an expected call of DeleteDataLakeOrganizationConfigurationWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDataLakeOrganizationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataLakeOrganizationConfigurationWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDataLakeOrganizationConfigurationWithContext), varargs...)
}

// DeleteDataLakeRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteDataLakeRequest(arg0 *securitylake.DeleteDataLakeInput) (*request.Request, *securitylake.DeleteDataLakeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataLakeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteDataLakeOutput)
	return ret0, ret1
}

// DeleteDataLakeRequest indicates an expected call of DeleteDataLakeRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDataLakeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataLakeRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDataLakeRequest), arg0)
}

// DeleteDataLakeWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteDataLakeWithContext(arg0 context.Context, arg1 *securitylake.DeleteDataLakeInput, arg2 ...request.Option) (*securitylake.DeleteDataLakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataLakeWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteDataLakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataLakeWithContext indicates an expected call of DeleteDataLakeWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDataLakeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataLakeWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDataLakeWithContext), varargs...)
}

// DeleteSubscriber mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriber(arg0 *securitylake.DeleteSubscriberInput) (*securitylake.DeleteSubscriberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriber", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriber indicates an expected call of DeleteSubscriber
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriber", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriber), arg0)
}

// DeleteSubscriberNotification mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriberNotification(arg0 *securitylake.DeleteSubscriberNotificationInput) (*securitylake.DeleteSubscriberNotificationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriberNotification", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteSubscriberNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriberNotification indicates an expected call of DeleteSubscriberNotification
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriberNotification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriberNotification", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriberNotification), arg0)
}

// DeleteSubscriberNotificationRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriberNotificationRequest(arg0 *securitylake.DeleteSubscriberNotificationInput) (*request.Request, *securitylake.DeleteSubscriberNotificationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriberNotificationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteSubscriberNotificationOutput)
	return ret0, ret1
}

// DeleteSubscriberNotificationRequest indicates an expected call of DeleteSubscriberNotificationRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriberNotificationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriberNotificationRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriberNotificationRequest), arg0)
}

// DeleteSubscriberNotificationWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriberNotificationWithContext(arg0 context.Context, arg1 *securitylake.DeleteSubscriberNotificationInput, arg2 ...request.Option) (*securitylake.DeleteSubscriberNotificationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscriberNotificationWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteSubscriberNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriberNotificationWithContext indicates an expected call of DeleteSubscriberNotificationWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriberNotificationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriberNotificationWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriberNotificationWithContext), varargs...)
}

// DeleteSubscriberRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriberRequest(arg0 *securitylake.DeleteSubscriberInput) (*request.Request, *securitylake.DeleteSubscriberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteSubscriberOutput)
	return ret0, ret1
}

// DeleteSubscriberRequest indicates an expected call of DeleteSubscriberRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriberRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriberRequest), arg0)
}

// DeleteSubscriberWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriberWithContext(arg0 context.Context, arg1 *securitylake.DeleteSubscriberInput, arg2 ...request.Option) (*securitylake.DeleteSubscriberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscriberWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriberWithContext indicates an expected call of DeleteSubscriberWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriberWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriberWithContext), varargs...)
}

// DeregisterDataLakeDelegatedAdministrator mocks base method
func (m *MockSecurityLakeAPI) DeregisterDataLakeDelegatedAdministrator(arg0 *securitylake.DeregisterDataLakeDelegatedAdministratorInput) (*securitylake.DeregisterDataLakeDelegatedAdministratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterDataLakeDelegatedAdministrator", arg0)
	ret0, _ := ret[0].(*securitylake.DeregisterDataLakeDelegatedAdministratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterDataLakeDelegatedAdministrator indicates an expected call of DeregisterDataLakeDelegatedAdministrator
func (mr *MockSecurityLakeAPIMockRecorder) DeregisterDataLakeDelegatedAdministrator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterDataLakeDelegatedAdministrator", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeregisterDataLakeDelegatedAdministrator), arg0)
}

// DeregisterDataLakeDelegatedAdministratorRequest mocks base method
func (m *MockSecurityLakeAPI) DeregisterDataLakeDelegatedAdministratorRequest(arg0 *securitylake.DeregisterDataLakeDelegatedAdministratorInput) (*request.Request, *securitylake.DeregisterDataLakeDelegatedAdministratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterDataLakeDelegatedAdministratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeregisterDataLakeDelegatedAdministratorOutput)
	return ret0, ret1
}

// DeregisterDataLakeDelegatedAdministratorRequest indicates an expected call of DeregisterDataLakeDelegatedAdministratorRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeregisterDataLakeDelegatedAdministratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterDataLakeDelegatedAdministratorRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeregisterDataLakeDelegatedAdministratorRequest), arg0)
}

// DeregisterDataLakeDelegatedAdministratorWithContext mocks base method
func (m *MockSecurityLakeAPI) DeregisterDataLakeDelegatedAdministratorWithContext(arg0 context.Context, arg1 *securitylake.DeregisterDataLakeDelegatedAdministratorInput, arg2 ...request.Option) (*securitylake.DeregisterDataLakeDelegatedAdministratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterDataLakeDelegatedAdministratorWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeregisterDataLakeDelegatedAdministratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterDataLakeDelegatedAdministratorWithContext indicates an expected call of DeregisterDataLakeDelegatedAdministratorWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeregisterDataLakeDelegatedAdministratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterDataLakeDelegatedAdministratorWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeregisterDataLakeDelegatedAdministratorWithContext), varargs...)
}

// GetDataLakeExceptionSubscription mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeExceptionSubscription(arg0 *securitylake.GetDataLakeExceptionSubscriptionInput) (*securitylake.GetDataLakeExceptionSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataLakeExceptionSubscription", arg0)
	ret0, _ := ret[0].(*securitylake.GetDataLakeExceptionSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataLakeExceptionSubscription indicates an expected call of GetDataLakeExceptionSubscription
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeExceptionSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeExceptionSubscription", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeExceptionSubscription), arg0)
}

// GetDataLakeExceptionSubscriptionRequest mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeExceptionSubscriptionRequest(arg0 *securitylake.GetDataLakeExceptionSubscriptionInput) (*request.Request, *securitylake.GetDataLakeExceptionSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataLakeExceptionSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.GetDataLakeExceptionSubscriptionOutput)
	return ret0, ret1
}

// GetDataLakeExceptionSubscriptionRequest indicates an expected call of GetDataLakeExceptionSubscriptionRequest
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeExceptionSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeExceptionSubscriptionRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeExceptionSubscriptionRequest), arg0)
}

// GetDataLakeExceptionSubscriptionWithContext mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeExceptionSubscriptionWithContext(arg0 context.Context, arg1 *securitylake.GetDataLakeExceptionSubscriptionInput, arg2 ...request.Option) (*securitylake.GetDataLakeExceptionSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataLakeExceptionSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.GetDataLakeExceptionSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataLakeExceptionSubscriptionWithContext indicates an expected call of GetDataLakeExceptionSubscriptionWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeExceptionSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeExceptionSubscriptionWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeExceptionSubscriptionWithContext), varargs...)
}

// GetDataLakeOrganizationConfiguration mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeOrganizationConfiguration(arg0 *securitylake.GetDataLakeOrganizationConfigurationInput) (*securitylake.GetDataLakeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataLakeOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*securitylake.GetDataLakeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataLakeOrganizationConfiguration indicates an expected call of GetDataLakeOrganizationConfiguration
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeOrganizationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeOrganizationConfiguration", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeOrganizationConfiguration), arg0)
}

// GetDataLakeOrganizationConfigurationRequest mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeOrganizationConfigurationRequest(arg0 *securitylake.GetDataLakeOrganizationConfigurationInput) (*request.Request, *securitylake.GetDataLakeOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataLakeOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.GetDataLakeOrganizationConfigurationOutput)
	return ret0, ret1
}

// GetDataLakeOrganizationConfigurationRequest indicates an expected call of GetDataLakeOrganizationConfigurationRequest
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeOrganizationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeOrganizationConfigurationRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeOrganizationConfigurationRequest), arg0)
}

// GetDataLakeOrganizationConfigurationWithContext mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeOrganizationConfigurationWithContext(arg0 context.Context, arg1 *securitylake.GetDataLakeOrganizationConfigurationInput, arg2 ...request.Option) (*securitylake.GetDataLakeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataLakeOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.GetDataLakeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataLakeOrganizationConfigurationWithContext indicates an expected call of GetDataLakeOrganizationConfigurationWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeOrganizationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeOrganizationConfigurationWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeOrganizationConfigurationWithContext), varargs...)
}

// GetDataLakeSources mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeSources(arg0 *securitylake.GetDataLakeSourcesInput) (*securitylake.GetDataLakeSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataLakeSources", arg0)
	ret0, _ := ret[0].(*securitylake.GetDataLakeSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataLakeSources indicates an expected call of GetDataLakeSources
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeSources", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeSources), arg0)
}

// GetDataLakeSourcesPages mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeSourcesPages(arg0 *securitylake.GetDataLakeSourcesInput, arg1 func(*securitylake.GetDataLakeSourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataLakeSourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDataLakeSourcesPages indicates an expected call of GetDataLakeSourcesPages
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeSourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeSourcesPages", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeSourcesPages), arg0, arg1)
}

// GetDataLakeSourcesPagesWithContext mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeSourcesPagesWithContext(arg0 context.Context, arg1 *securitylake.GetDataLakeSourcesInput, arg2 func(*securitylake.GetDataLakeSourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataLakeSourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDataLakeSourcesPagesWithContext indicates an expected call of GetDataLakeSourcesPagesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeSourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeSourcesPagesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeSourcesPagesWithContext), varargs...)
}

// GetDataLakeSourcesRequest mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeSourcesRequest(arg0 *securitylake.GetDataLakeSourcesInput) (*request.Request, *securitylake.GetDataLakeSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataLakeSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.GetDataLakeSourcesOutput)
	return ret0, ret1
}

// GetDataLakeSourcesRequest indicates an expected call of GetDataLakeSourcesRequest
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeSourcesRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeSourcesRequest), arg0)
}

// GetDataLakeSourcesWithContext mocks base method
func (m *MockSecurityLakeAPI) GetDataLakeSourcesWithContext(arg0 context.Context, arg1 *securitylake.GetDataLakeSourcesInput, arg2 ...request.Option) (*securitylake.GetDataLakeSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataLakeSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.GetDataLakeSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataLakeSourcesWithContext indicates an expected call of GetDataLakeSourcesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetDataLakeSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeSourcesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDataLakeSourcesWithContext), varargs...)
}

// GetSubscriber mocks base method
func (m *MockSecurityLakeAPI) GetSubscriber(arg0 *securitylake.GetSubscriberInput) (*securitylake.GetSubscriberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriber", arg0)
	ret0, _ := ret[0].(*securitylake.GetSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriber indicates an expected call of GetSubscriber
func (mr *MockSecurityLakeAPIMockRecorder) GetSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriber", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetSubscriber), arg0)
}

// GetSubscriberRequest mocks base method
func (m *MockSecurityLakeAPI) GetSubscriberRequest(arg0 *securitylake.GetSubscriberInput) (*request.Request, *securitylake.GetSubscriberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.GetSubscriberOutput)
	return ret0, ret1
}

// GetSubscriberRequest indicates an expected call of GetSubscriberRequest
func (mr *MockSecurityLakeAPIMockRecorder) GetSubscriberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriberRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetSubscriberRequest), arg0)
}

// GetSubscriberWithContext mocks base method
func (m *MockSecurityLakeAPI) GetSubscriberWithContext(arg0 context.Context, arg1 *securitylake.GetSubscriberInput, arg2 ...request.Option) (*securitylake.GetSubscriberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriberWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.GetSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriberWithContext indicates an expected call of GetSubscriberWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetSubscriberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriberWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetSubscriberWithContext), varargs...)
}

// ListDataLakeExceptions mocks base method
func (m *MockSecurityLakeAPI) ListDataLakeExceptions(arg0 *securitylake.ListDataLakeExceptionsInput) (*securitylake.ListDataLakeExceptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataLakeExceptions", arg0)
	ret0, _ := ret[0].(*securitylake.ListDataLakeExceptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataLakeExceptions indicates an expected call of ListDataLakeExceptions
func (mr *MockSecurityLakeAPIMockRecorder) ListDataLakeExceptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataLakeExceptions", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDataLakeExceptions), arg0)
}

// ListDataLakeExceptionsPages mocks base method
func (m *MockSecurityLakeAPI) ListDataLakeExceptionsPages(arg0 *securitylake.ListDataLakeExceptionsInput, arg1 func(*securitylake.ListDataLakeExceptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataLakeExceptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataLakeExceptionsPages indicates an expected call of ListDataLakeExceptionsPages
func (mr *MockSecurityLakeAPIMockRecorder) ListDataLakeExceptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataLakeExceptionsPages", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDataLakeExceptionsPages), arg0, arg1)
}

// ListDataLakeExceptionsPagesWithContext mocks base method
func (m *MockSecurityLakeAPI) ListDataLakeExceptionsPagesWithContext(arg0 context.Context, arg1 *securitylake.ListDataLakeExceptionsInput, arg2 func(*securitylake.ListDataLakeExceptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataLakeExceptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataLakeExceptionsPagesWithContext indicates an expected call of ListDataLakeExceptionsPagesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListDataLakeExceptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataLakeExceptionsPagesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDataLakeExceptionsPagesWithContext), varargs...)
}

// ListDataLakeExceptionsRequest mocks base method
func (m *MockSecurityLakeAPI) ListDataLakeExceptionsRequest(arg0 *securitylake.ListDataLakeExceptionsInput) (*request.Request, *securitylake.ListDataLakeExceptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataLakeExceptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.ListDataLakeExceptionsOutput)
	return ret0, ret1
}

// ListDataLakeExceptionsRequest indicates an expected call of ListDataLakeExceptionsRequest
func (mr *MockSecurityLakeAPIMockRecorder) ListDataLakeExceptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataLakeExceptionsRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDataLakeExceptionsRequest), arg0)
}

// ListDataLakeExceptionsWithContext mocks base method
func (m *MockSecurityLakeAPI) ListDataLakeExceptionsWithContext(arg0 context.Context, arg1 *securitylake.ListDataLakeExceptionsInput, arg2 ...request.Option) (*securitylake.ListDataLakeExceptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataLakeExceptionsWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.ListDataLakeExceptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataLakeExceptionsWithContext indicates an expected call of ListDataLakeExceptionsWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListDataLakeExceptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataLakeExceptionsWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDataLakeExceptionsWithContext), varargs...)
}

// ListDataLakes mocks base method
func (m *MockSecurityLakeAPI) ListDataLakes(arg0 *securitylake.ListDataLakesInput) (*securitylake.ListDataLakesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataLakes", arg0)
	ret0, _ := ret[0].(*securitylake.ListDataLakesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataLakes indicates an expected call of ListDataLakes
func (mr *MockSecurityLakeAPIMockRecorder) ListDataLakes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataLakes", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDataLakes), arg0)
}

// ListDataLakesRequest mocks base method
func (m *MockSecurityLakeAPI) ListDataLakesRequest(arg0 *securitylake.ListDataLakesInput) (*request.Request, *securitylake.ListDataLakesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataLakesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.ListDataLakesOutput)
	return ret0, ret1
}

// ListDataLakesRequest indicates an expected call of ListDataLakesRequest
func (mr *MockSecurityLakeAPIMockRecorder) ListDataLakesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataLakesRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDataLakesRequest), arg0)
}

// ListDataLakesWithContext mocks base method
func (m *MockSecurityLakeAPI) ListDataLakesWithContext(arg0 context.Context, arg1 *securitylake.ListDataLakesInput, arg2 ...request.Option) (*securitylake.ListDataLakesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataLakesWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.ListDataLakesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataLakesWithContext indicates an expected call of ListDataLakesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListDataLakesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataLakesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDataLakesWithContext), varargs...)
}

// ListLogSources mocks base method
func (m *MockSecurityLakeAPI) ListLogSources(arg0 *securitylake.ListLogSourcesInput) (*securitylake.ListLogSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogSources", arg0)
	ret0, _ := ret[0].(*securitylake.ListLogSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogSources indicates an expected call of ListLogSources
func (mr *MockSecurityLakeAPIMockRecorder) ListLogSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSources", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListLogSources), arg0)
}

// ListLogSourcesPages mocks base method
func (m *MockSecurityLakeAPI) ListLogSourcesPages(arg0 *securitylake.ListLogSourcesInput, arg1 func(*securitylake.ListLogSourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogSourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLogSourcesPages indicates an expected call of ListLogSourcesPages
func (mr *MockSecurityLakeAPIMockRecorder) ListLogSourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSourcesPages", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListLogSourcesPages), arg0, arg1)
}

// ListLogSourcesPagesWithContext mocks base method
func (m *MockSecurityLakeAPI) ListLogSourcesPagesWithContext(arg0 context.Context, arg1 *securitylake.ListLogSourcesInput, arg2 func(*securitylake.ListLogSourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLogSourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLogSourcesPagesWithContext indicates an expected call of ListLogSourcesPagesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListLogSourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSourcesPagesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListLogSourcesPagesWithContext), varargs...)
}

// ListLogSourcesRequest mocks base method
func (m *MockSecurityLakeAPI) ListLogSourcesRequest(arg0 *securitylake.ListLogSourcesInput) (*request.Request, *securitylake.ListLogSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.ListLogSourcesOutput)
	return ret0, ret1
}

// ListLogSourcesRequest indicates an expected call of ListLogSourcesRequest
func (mr *MockSecurityLakeAPIMockRecorder) ListLogSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSourcesRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListLogSourcesRequest), arg0)
}

// ListLogSourcesWithContext mocks base method
func (m *MockSecurityLakeAPI) ListLogSourcesWithContext(arg0 context.Context, arg1 *securitylake.ListLogSourcesInput, arg2 ...request.Option) (*securitylake.ListLogSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLogSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.ListLogSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogSourcesWithContext indicates an expected call of ListLogSourcesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListLogSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSourcesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListLogSourcesWithContext), varargs...)
}

// ListSubscribers mocks base method
func (m *MockSecurityLakeAPI) ListSubscribers(arg0 *securitylake.ListSubscribersInput) (*securitylake.ListSubscribersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribers", arg0)
	ret0, _ := ret[0].(*securitylake.ListSubscribersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribers indicates an expected call of ListSubscribers
func (mr *MockSecurityLakeAPIMockRecorder) ListSubscribers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribers", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListSubscribers), arg0)
}

// ListSubscribersPages mocks base method
func (m *MockSecurityLakeAPI) ListSubscribersPages(arg0 *securitylake.ListSubscribersInput, arg1 func(*securitylake.ListSubscribersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscribersPages indicates an expected call of ListSubscribersPages
func (mr *MockSecurityLakeAPIMockRecorder) ListSubscribersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribersPages", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListSubscribersPages), arg0, arg1)
}

// ListSubscribersPagesWithContext mocks base method
func (m *MockSecurityLakeAPI) ListSubscribersPagesWithContext(arg0 context.Context, arg1 *securitylake.ListSubscribersInput, arg2 func(*securitylake.ListSubscribersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscribersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscribersPagesWithContext indicates an expected call of ListSubscribersPagesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListSubscribersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribersPagesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListSubscribersPagesWithContext), varargs...)
}

// ListSubscribersRequest mocks base method
func (m *MockSecurityLakeAPI) ListSubscribersRequest(arg0 *securitylake.ListSubscribersInput) (*request.Request, *securitylake.ListSubscribersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.ListSubscribersOutput)
	return ret0, ret1
}

// ListSubscribersRequest indicates an expected call of ListSubscribersRequest
func (mr *MockSecurityLakeAPIMockRecorder) ListSubscribersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribersRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListSubscribersRequest), arg0)
}

// ListSubscribersWithContext mocks base method
func (m *MockSecurityLakeAPI) ListSubscribersWithContext(arg0 context.Context, arg1 *securitylake.ListSubscribersInput, arg2 ...request.Option) (*securitylake.ListSubscribersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscribersWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.ListSubscribersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribersWithContext indicates an expected call of ListSubscribersWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListSubscribersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribersWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListSubscribersWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockSecurityLakeAPI) ListTagsForResource(arg0 *securitylake.ListTagsForResourceInput) (*securitylake.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*securitylake.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockSecurityLakeAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockSecurityLakeAPI) ListTagsForResourceRequest(arg0 *securitylake.ListTagsForResourceInput) (*request.Request, *securitylake.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockSecurityLakeAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *securitylake.ListTagsForResourceInput, arg2 ...request.Option) (*securitylake.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RegisterDataLakeDelegatedAdministrator mocks base method
func (m *MockSecurityLakeAPI) RegisterDataLakeDelegatedAdministrator(arg0 *securitylake.RegisterDataLakeDelegatedAdministratorInput) (*securitylake.RegisterDataLakeDelegatedAdministratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDataLakeDelegatedAdministrator", arg0)
	ret0, _ := ret[0].(*securitylake.RegisterDataLakeDelegatedAdministratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDataLakeDelegatedAdministrator indicates an expected call of RegisterDataLakeDelegatedAdministrator
func (mr *MockSecurityLakeAPIMockRecorder) RegisterDataLakeDelegatedAdministrator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDataLakeDelegatedAdministrator", reflect.TypeOf((*MockSecurityLakeAPI)(nil).RegisterDataLakeDelegatedAdministrator), arg0)
}

// RegisterDataLakeDelegatedAdministratorRequest mocks base method
func (m *MockSecurityLakeAPI) RegisterDataLakeDelegatedAdministratorRequest(arg0 *securitylake.RegisterDataLakeDelegatedAdministratorInput) (*request.Request, *securitylake.RegisterDataLakeDelegatedAdministratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDataLakeDelegatedAdministratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.RegisterDataLakeDelegatedAdministratorOutput)
	return ret0, ret1
}

// RegisterDataLakeDelegatedAdministratorRequest indicates an expected call of RegisterDataLakeDelegatedAdministratorRequest
func (mr *MockSecurityLakeAPIMockRecorder) RegisterDataLakeDelegatedAdministratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDataLakeDelegatedAdministratorRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).RegisterDataLakeDelegatedAdministratorRequest), arg0)
}

// RegisterDataLakeDelegatedAdministratorWithContext mocks base method
func (m *MockSecurityLakeAPI) RegisterDataLakeDelegatedAdministratorWithContext(arg0 context.Context, arg1 *securitylake.RegisterDataLakeDelegatedAdministratorInput, arg2 ...request.Option) (*securitylake.RegisterDataLakeDelegatedAdministratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterDataLakeDelegatedAdministratorWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.RegisterDataLakeDelegatedAdministratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDataLakeDelegatedAdministratorWithContext indicates an expected call of RegisterDataLakeDelegatedAdministratorWithContext
func (mr *MockSecurityLakeAPIMockRecorder) RegisterDataLakeDelegatedAdministratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDataLakeDelegatedAdministratorWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).RegisterDataLakeDelegatedAdministratorWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockSecurityLakeAPI) TagResource(arg0 *securitylake.TagResourceInput) (*securitylake.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*securitylake.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockSecurityLakeAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockSecurityLakeAPI) TagResourceRequest(arg0 *securitylake.TagResourceInput) (*request.Request, *securitylake.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockSecurityLakeAPI) TagResourceWithContext(arg0 context.Context, arg1 *securitylake.TagResourceInput, arg2 ...request.Option) (*securitylake.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockSecurityLakeAPI) UntagResource(arg0 *securitylake.UntagResourceInput) (*securitylake.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*securitylake.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockSecurityLakeAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockSecurityLakeAPI) UntagResourceRequest(arg0 *securitylake.UntagResourceInput) (*request.Request, *securitylake.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockSecurityLakeAPI) UntagResourceWithContext(arg0 context.Context, arg1 *securitylake.UntagResourceInput, arg2 ...request.Option) (*securitylake.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDataLake mocks base method
func (m *MockSecurityLakeAPI) UpdateDataLake(arg0 *securitylake.UpdateDataLakeInput) (*securitylake.UpdateDataLakeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataLake", arg0)
	ret0, _ := ret[0].(*securitylake.UpdateDataLakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataLake indicates an expected call of UpdateDataLake
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDataLake(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataLake", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDataLake), arg0)
}

// UpdateDataLakeExceptionSubscription mocks base method
func (m *MockSecurityLakeAPI) UpdateDataLakeExceptionSubscription(arg0 *securitylake.UpdateDataLakeExceptionSubscriptionInput) (*securitylake.UpdateDataLakeExceptionSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataLakeExceptionSubscription", arg0)
	ret0, _ := ret[0].(*securitylake.UpdateDataLakeExceptionSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataLakeExceptionSubscription indicates an expected call of UpdateDataLakeExceptionSubscription
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDataLakeExceptionSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataLakeExceptionSubscription", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDataLakeExceptionSubscription), arg0)
}

// UpdateDataLakeExceptionSubscriptionRequest mocks base method
func (m *MockSecurityLakeAPI) UpdateDataLakeExceptionSubscriptionRequest(arg0 *securitylake.UpdateDataLakeExceptionSubscriptionInput) (*request.Request, *securitylake.UpdateDataLakeExceptionSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataLakeExceptionSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.UpdateDataLakeExceptionSubscriptionOutput)
	return ret0, ret1
}

// UpdateDataLakeExceptionSubscriptionRequest indicates an expected call of UpdateDataLakeExceptionSubscriptionRequest
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDataLakeExceptionSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataLakeExceptionSubscriptionRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDataLakeExceptionSubscriptionRequest), arg0)
}

// UpdateDataLakeExceptionSubscriptionWithContext mocks base method
func (m *MockSecurityLakeAPI) UpdateDataLakeExceptionSubscriptionWithContext(arg0 context.Context, arg1 *securitylake.UpdateDataLakeExceptionSubscriptionInput, arg2 ...request.Option) (*securitylake.UpdateDataLakeExceptionSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataLakeExceptionSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.UpdateDataLakeExceptionSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataLakeExceptionSubscriptionWithContext indicates an expected call of UpdateDataLakeExceptionSubscriptionWithContext
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDataLakeExceptionSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataLakeExceptionSubscriptionWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDataLakeExceptionSubscriptionWithContext), varargs...)
}

// UpdateDataLakeRequest mocks base method
func (m *MockSecurityLakeAPI) UpdateDataLakeRequest(arg0 *securitylake.UpdateDataLakeInput) (*request.Request, *securitylake.UpdateDataLakeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataLakeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.UpdateDataLakeOutput)
	return ret0, ret1
}

// UpdateDataLakeRequest indicates an expected call of UpdateDataLakeRequest
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDataLakeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataLakeRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDataLakeRequest), arg0)
}

// UpdateDataLakeWithContext mocks base method
func (m *MockSecurityLakeAPI) UpdateDataLakeWithContext(arg0 context.Context, arg1 *securitylake.UpdateDataLakeInput, arg2 ...request.Option) (*securitylake.UpdateDataLakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataLakeWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.UpdateDataLakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataLakeWithContext indicates an expected call of UpdateDataLakeWithContext
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDataLakeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataLakeWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDataLakeWithContext), varargs...)
}

// UpdateSubscriber mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriber(arg0 *securitylake.UpdateSubscriberInput) (*securitylake.UpdateSubscriberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriber", arg0)
	ret0, _ := ret[0].(*securitylake.UpdateSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriber indicates an expected call of UpdateSubscriber
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriber", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriber), arg0)
}

// UpdateSubscriberNotification mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriberNotification(arg0 *securitylake.UpdateSubscriberNotificationInput) (*securitylake.UpdateSubscriberNotificationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriberNotification", arg0)
	ret0, _ := ret[0].(*securitylake.UpdateSubscriberNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriberNotification indicates an expected call of UpdateSubscriberNotification
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriberNotification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriberNotification", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriberNotification), arg0)
}

// UpdateSubscriberNotificationRequest mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriberNotificationRequest(arg0 *securitylake.UpdateSubscriberNotificationInput) (*request.Request, *securitylake.UpdateSubscriberNotificationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriberNotificationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.UpdateSubscriberNotificationOutput)
	return ret0, ret1
}

// UpdateSubscriberNotificationRequest indicates an expected call of UpdateSubscriberNotificationRequest
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriberNotificationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriberNotificationRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriberNotificationRequest), arg0)
}

// UpdateSubscriberNotificationWithContext mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriberNotificationWithContext(arg0 context.Context, arg1 *securitylake.UpdateSubscriberNotificationInput, arg2 ...request.Option) (*securitylake.UpdateSubscriberNotificationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscriberNotificationWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.UpdateSubscriberNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriberNotificationWithContext indicates an expected call of UpdateSubscriberNotificationWithContext
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriberNotificationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriberNotificationWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriberNotificationWithContext), varargs...)
}

// UpdateSubscriberRequest mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriberRequest(arg0 *securitylake.UpdateSubscriberInput) (*request.Request, *securitylake.UpdateSubscriberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.UpdateSubscriberOutput)
	return ret0, ret1
}

// UpdateSubscriberRequest indicates an expected call of UpdateSubscriberRequest
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriberRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriberRequest), arg0)
}

// UpdateSubscriberWithContext mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriberWithContext(arg0 context.Context, arg1 *securitylake.UpdateSubscriberInput, arg2 ...request.Option) (*securitylake.UpdateSubscriberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscriberWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.UpdateSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriberWithContext indicates an expected call of UpdateSubscriberWithContext
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriberWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriberWithContext), varargs...)
}
