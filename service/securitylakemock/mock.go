// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/securitylake/securitylakeiface (interfaces: SecurityLakeAPI)

// Package securitylakemock is a generated GoMock package.
package securitylakemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	securitylake "github.com/aws/aws-sdk-go/service/securitylake"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSecurityLakeAPI is a mock of SecurityLakeAPI interface
type MockSecurityLakeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityLakeAPIMockRecorder
}

// MockSecurityLakeAPIMockRecorder is the mock recorder for MockSecurityLakeAPI
type MockSecurityLakeAPIMockRecorder struct {
	mock *MockSecurityLakeAPI
}

// NewMockSecurityLakeAPI creates a new mock instance
func NewMockSecurityLakeAPI(ctrl *gomock.Controller) *MockSecurityLakeAPI {
	mock := &MockSecurityLakeAPI{ctrl: ctrl}
	mock.recorder = &MockSecurityLakeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecurityLakeAPI) EXPECT() *MockSecurityLakeAPIMockRecorder {
	return m.recorder
}

// CreateAwsLogSource mocks base method
func (m *MockSecurityLakeAPI) CreateAwsLogSource(arg0 *securitylake.CreateAwsLogSourceInput) (*securitylake.CreateAwsLogSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAwsLogSource", arg0)
	ret0, _ := ret[0].(*securitylake.CreateAwsLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAwsLogSource indicates an expected call of CreateAwsLogSource
func (mr *MockSecurityLakeAPIMockRecorder) CreateAwsLogSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAwsLogSource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateAwsLogSource), arg0)
}

// CreateAwsLogSourceRequest mocks base method
func (m *MockSecurityLakeAPI) CreateAwsLogSourceRequest(arg0 *securitylake.CreateAwsLogSourceInput) (*request.Request, *securitylake.CreateAwsLogSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAwsLogSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateAwsLogSourceOutput)
	return ret0, ret1
}

// CreateAwsLogSourceRequest indicates an expected call of CreateAwsLogSourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateAwsLogSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAwsLogSourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateAwsLogSourceRequest), arg0)
}

// CreateAwsLogSourceWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateAwsLogSourceWithContext(arg0 context.Context, arg1 *securitylake.CreateAwsLogSourceInput, arg2 ...request.Option) (*securitylake.CreateAwsLogSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAwsLogSourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateAwsLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAwsLogSourceWithContext indicates an expected call of CreateAwsLogSourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateAwsLogSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAwsLogSourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateAwsLogSourceWithContext), varargs...)
}

// CreateCustomLogSource mocks base method
func (m *MockSecurityLakeAPI) CreateCustomLogSource(arg0 *securitylake.CreateCustomLogSourceInput) (*securitylake.CreateCustomLogSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomLogSource", arg0)
	ret0, _ := ret[0].(*securitylake.CreateCustomLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomLogSource indicates an expected call of CreateCustomLogSource
func (mr *MockSecurityLakeAPIMockRecorder) CreateCustomLogSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomLogSource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateCustomLogSource), arg0)
}

// CreateCustomLogSourceRequest mocks base method
func (m *MockSecurityLakeAPI) CreateCustomLogSourceRequest(arg0 *securitylake.CreateCustomLogSourceInput) (*request.Request, *securitylake.CreateCustomLogSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomLogSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateCustomLogSourceOutput)
	return ret0, ret1
}

// CreateCustomLogSourceRequest indicates an expected call of CreateCustomLogSourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateCustomLogSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomLogSourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateCustomLogSourceRequest), arg0)
}

// CreateCustomLogSourceWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateCustomLogSourceWithContext(arg0 context.Context, arg1 *securitylake.CreateCustomLogSourceInput, arg2 ...request.Option) (*securitylake.CreateCustomLogSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomLogSourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateCustomLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomLogSourceWithContext indicates an expected call of CreateCustomLogSourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateCustomLogSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomLogSourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateCustomLogSourceWithContext), varargs...)
}

// CreateDatalake mocks base method
func (m *MockSecurityLakeAPI) CreateDatalake(arg0 *securitylake.CreateDatalakeInput) (*securitylake.CreateDatalakeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatalake", arg0)
	ret0, _ := ret[0].(*securitylake.CreateDatalakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatalake indicates an expected call of CreateDatalake
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalake(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalake", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalake), arg0)
}

// CreateDatalakeAutoEnable mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeAutoEnable(arg0 *securitylake.CreateDatalakeAutoEnableInput) (*securitylake.CreateDatalakeAutoEnableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatalakeAutoEnable", arg0)
	ret0, _ := ret[0].(*securitylake.CreateDatalakeAutoEnableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatalakeAutoEnable indicates an expected call of CreateDatalakeAutoEnable
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeAutoEnable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeAutoEnable", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeAutoEnable), arg0)
}

// CreateDatalakeAutoEnableRequest mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeAutoEnableRequest(arg0 *securitylake.CreateDatalakeAutoEnableInput) (*request.Request, *securitylake.CreateDatalakeAutoEnableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatalakeAutoEnableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateDatalakeAutoEnableOutput)
	return ret0, ret1
}

// CreateDatalakeAutoEnableRequest indicates an expected call of CreateDatalakeAutoEnableRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeAutoEnableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeAutoEnableRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeAutoEnableRequest), arg0)
}

// CreateDatalakeAutoEnableWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeAutoEnableWithContext(arg0 context.Context, arg1 *securitylake.CreateDatalakeAutoEnableInput, arg2 ...request.Option) (*securitylake.CreateDatalakeAutoEnableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatalakeAutoEnableWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateDatalakeAutoEnableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatalakeAutoEnableWithContext indicates an expected call of CreateDatalakeAutoEnableWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeAutoEnableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeAutoEnableWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeAutoEnableWithContext), varargs...)
}

// CreateDatalakeDelegatedAdmin mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeDelegatedAdmin(arg0 *securitylake.CreateDatalakeDelegatedAdminInput) (*securitylake.CreateDatalakeDelegatedAdminOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatalakeDelegatedAdmin", arg0)
	ret0, _ := ret[0].(*securitylake.CreateDatalakeDelegatedAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatalakeDelegatedAdmin indicates an expected call of CreateDatalakeDelegatedAdmin
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeDelegatedAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeDelegatedAdmin", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeDelegatedAdmin), arg0)
}

// CreateDatalakeDelegatedAdminRequest mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeDelegatedAdminRequest(arg0 *securitylake.CreateDatalakeDelegatedAdminInput) (*request.Request, *securitylake.CreateDatalakeDelegatedAdminOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatalakeDelegatedAdminRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateDatalakeDelegatedAdminOutput)
	return ret0, ret1
}

// CreateDatalakeDelegatedAdminRequest indicates an expected call of CreateDatalakeDelegatedAdminRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeDelegatedAdminRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeDelegatedAdminRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeDelegatedAdminRequest), arg0)
}

// CreateDatalakeDelegatedAdminWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeDelegatedAdminWithContext(arg0 context.Context, arg1 *securitylake.CreateDatalakeDelegatedAdminInput, arg2 ...request.Option) (*securitylake.CreateDatalakeDelegatedAdminOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatalakeDelegatedAdminWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateDatalakeDelegatedAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatalakeDelegatedAdminWithContext indicates an expected call of CreateDatalakeDelegatedAdminWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeDelegatedAdminWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeDelegatedAdminWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeDelegatedAdminWithContext), varargs...)
}

// CreateDatalakeExceptionsSubscription mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeExceptionsSubscription(arg0 *securitylake.CreateDatalakeExceptionsSubscriptionInput) (*securitylake.CreateDatalakeExceptionsSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatalakeExceptionsSubscription", arg0)
	ret0, _ := ret[0].(*securitylake.CreateDatalakeExceptionsSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatalakeExceptionsSubscription indicates an expected call of CreateDatalakeExceptionsSubscription
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeExceptionsSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeExceptionsSubscription", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeExceptionsSubscription), arg0)
}

// CreateDatalakeExceptionsSubscriptionRequest mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeExceptionsSubscriptionRequest(arg0 *securitylake.CreateDatalakeExceptionsSubscriptionInput) (*request.Request, *securitylake.CreateDatalakeExceptionsSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatalakeExceptionsSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateDatalakeExceptionsSubscriptionOutput)
	return ret0, ret1
}

// CreateDatalakeExceptionsSubscriptionRequest indicates an expected call of CreateDatalakeExceptionsSubscriptionRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeExceptionsSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeExceptionsSubscriptionRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeExceptionsSubscriptionRequest), arg0)
}

// CreateDatalakeExceptionsSubscriptionWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeExceptionsSubscriptionWithContext(arg0 context.Context, arg1 *securitylake.CreateDatalakeExceptionsSubscriptionInput, arg2 ...request.Option) (*securitylake.CreateDatalakeExceptionsSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatalakeExceptionsSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateDatalakeExceptionsSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatalakeExceptionsSubscriptionWithContext indicates an expected call of CreateDatalakeExceptionsSubscriptionWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeExceptionsSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeExceptionsSubscriptionWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeExceptionsSubscriptionWithContext), varargs...)
}

// CreateDatalakeRequest mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeRequest(arg0 *securitylake.CreateDatalakeInput) (*request.Request, *securitylake.CreateDatalakeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatalakeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateDatalakeOutput)
	return ret0, ret1
}

// CreateDatalakeRequest indicates an expected call of CreateDatalakeRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeRequest), arg0)
}

// CreateDatalakeWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateDatalakeWithContext(arg0 context.Context, arg1 *securitylake.CreateDatalakeInput, arg2 ...request.Option) (*securitylake.CreateDatalakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatalakeWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateDatalakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatalakeWithContext indicates an expected call of CreateDatalakeWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateDatalakeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatalakeWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateDatalakeWithContext), varargs...)
}

// CreateSubscriber mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriber(arg0 *securitylake.CreateSubscriberInput) (*securitylake.CreateSubscriberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriber", arg0)
	ret0, _ := ret[0].(*securitylake.CreateSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriber indicates an expected call of CreateSubscriber
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriber", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriber), arg0)
}

// CreateSubscriberRequest mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriberRequest(arg0 *securitylake.CreateSubscriberInput) (*request.Request, *securitylake.CreateSubscriberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateSubscriberOutput)
	return ret0, ret1
}

// CreateSubscriberRequest indicates an expected call of CreateSubscriberRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriberRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriberRequest), arg0)
}

// CreateSubscriberWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriberWithContext(arg0 context.Context, arg1 *securitylake.CreateSubscriberInput, arg2 ...request.Option) (*securitylake.CreateSubscriberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubscriberWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriberWithContext indicates an expected call of CreateSubscriberWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriberWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriberWithContext), varargs...)
}

// CreateSubscriptionNotificationConfiguration mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriptionNotificationConfiguration(arg0 *securitylake.CreateSubscriptionNotificationConfigurationInput) (*securitylake.CreateSubscriptionNotificationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionNotificationConfiguration", arg0)
	ret0, _ := ret[0].(*securitylake.CreateSubscriptionNotificationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionNotificationConfiguration indicates an expected call of CreateSubscriptionNotificationConfiguration
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriptionNotificationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionNotificationConfiguration", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriptionNotificationConfiguration), arg0)
}

// CreateSubscriptionNotificationConfigurationRequest mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriptionNotificationConfigurationRequest(arg0 *securitylake.CreateSubscriptionNotificationConfigurationInput) (*request.Request, *securitylake.CreateSubscriptionNotificationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionNotificationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.CreateSubscriptionNotificationConfigurationOutput)
	return ret0, ret1
}

// CreateSubscriptionNotificationConfigurationRequest indicates an expected call of CreateSubscriptionNotificationConfigurationRequest
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriptionNotificationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionNotificationConfigurationRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriptionNotificationConfigurationRequest), arg0)
}

// CreateSubscriptionNotificationConfigurationWithContext mocks base method
func (m *MockSecurityLakeAPI) CreateSubscriptionNotificationConfigurationWithContext(arg0 context.Context, arg1 *securitylake.CreateSubscriptionNotificationConfigurationInput, arg2 ...request.Option) (*securitylake.CreateSubscriptionNotificationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubscriptionNotificationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.CreateSubscriptionNotificationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionNotificationConfigurationWithContext indicates an expected call of CreateSubscriptionNotificationConfigurationWithContext
func (mr *MockSecurityLakeAPIMockRecorder) CreateSubscriptionNotificationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionNotificationConfigurationWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).CreateSubscriptionNotificationConfigurationWithContext), varargs...)
}

// DeleteAwsLogSource mocks base method
func (m *MockSecurityLakeAPI) DeleteAwsLogSource(arg0 *securitylake.DeleteAwsLogSourceInput) (*securitylake.DeleteAwsLogSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAwsLogSource", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteAwsLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAwsLogSource indicates an expected call of DeleteAwsLogSource
func (mr *MockSecurityLakeAPIMockRecorder) DeleteAwsLogSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAwsLogSource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteAwsLogSource), arg0)
}

// DeleteAwsLogSourceRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteAwsLogSourceRequest(arg0 *securitylake.DeleteAwsLogSourceInput) (*request.Request, *securitylake.DeleteAwsLogSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAwsLogSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteAwsLogSourceOutput)
	return ret0, ret1
}

// DeleteAwsLogSourceRequest indicates an expected call of DeleteAwsLogSourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteAwsLogSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAwsLogSourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteAwsLogSourceRequest), arg0)
}

// DeleteAwsLogSourceWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteAwsLogSourceWithContext(arg0 context.Context, arg1 *securitylake.DeleteAwsLogSourceInput, arg2 ...request.Option) (*securitylake.DeleteAwsLogSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAwsLogSourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteAwsLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAwsLogSourceWithContext indicates an expected call of DeleteAwsLogSourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteAwsLogSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAwsLogSourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteAwsLogSourceWithContext), varargs...)
}

// DeleteCustomLogSource mocks base method
func (m *MockSecurityLakeAPI) DeleteCustomLogSource(arg0 *securitylake.DeleteCustomLogSourceInput) (*securitylake.DeleteCustomLogSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomLogSource", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteCustomLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomLogSource indicates an expected call of DeleteCustomLogSource
func (mr *MockSecurityLakeAPIMockRecorder) DeleteCustomLogSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomLogSource", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteCustomLogSource), arg0)
}

// DeleteCustomLogSourceRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteCustomLogSourceRequest(arg0 *securitylake.DeleteCustomLogSourceInput) (*request.Request, *securitylake.DeleteCustomLogSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomLogSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteCustomLogSourceOutput)
	return ret0, ret1
}

// DeleteCustomLogSourceRequest indicates an expected call of DeleteCustomLogSourceRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteCustomLogSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomLogSourceRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteCustomLogSourceRequest), arg0)
}

// DeleteCustomLogSourceWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteCustomLogSourceWithContext(arg0 context.Context, arg1 *securitylake.DeleteCustomLogSourceInput, arg2 ...request.Option) (*securitylake.DeleteCustomLogSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomLogSourceWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteCustomLogSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomLogSourceWithContext indicates an expected call of DeleteCustomLogSourceWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteCustomLogSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomLogSourceWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteCustomLogSourceWithContext), varargs...)
}

// DeleteDatalake mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalake(arg0 *securitylake.DeleteDatalakeInput) (*securitylake.DeleteDatalakeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatalake", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteDatalakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatalake indicates an expected call of DeleteDatalake
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalake(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalake", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalake), arg0)
}

// DeleteDatalakeAutoEnable mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeAutoEnable(arg0 *securitylake.DeleteDatalakeAutoEnableInput) (*securitylake.DeleteDatalakeAutoEnableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatalakeAutoEnable", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteDatalakeAutoEnableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatalakeAutoEnable indicates an expected call of DeleteDatalakeAutoEnable
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeAutoEnable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeAutoEnable", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeAutoEnable), arg0)
}

// DeleteDatalakeAutoEnableRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeAutoEnableRequest(arg0 *securitylake.DeleteDatalakeAutoEnableInput) (*request.Request, *securitylake.DeleteDatalakeAutoEnableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatalakeAutoEnableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteDatalakeAutoEnableOutput)
	return ret0, ret1
}

// DeleteDatalakeAutoEnableRequest indicates an expected call of DeleteDatalakeAutoEnableRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeAutoEnableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeAutoEnableRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeAutoEnableRequest), arg0)
}

// DeleteDatalakeAutoEnableWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeAutoEnableWithContext(arg0 context.Context, arg1 *securitylake.DeleteDatalakeAutoEnableInput, arg2 ...request.Option) (*securitylake.DeleteDatalakeAutoEnableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatalakeAutoEnableWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteDatalakeAutoEnableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatalakeAutoEnableWithContext indicates an expected call of DeleteDatalakeAutoEnableWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeAutoEnableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeAutoEnableWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeAutoEnableWithContext), varargs...)
}

// DeleteDatalakeDelegatedAdmin mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeDelegatedAdmin(arg0 *securitylake.DeleteDatalakeDelegatedAdminInput) (*securitylake.DeleteDatalakeDelegatedAdminOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatalakeDelegatedAdmin", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteDatalakeDelegatedAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatalakeDelegatedAdmin indicates an expected call of DeleteDatalakeDelegatedAdmin
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeDelegatedAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeDelegatedAdmin", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeDelegatedAdmin), arg0)
}

// DeleteDatalakeDelegatedAdminRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeDelegatedAdminRequest(arg0 *securitylake.DeleteDatalakeDelegatedAdminInput) (*request.Request, *securitylake.DeleteDatalakeDelegatedAdminOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatalakeDelegatedAdminRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteDatalakeDelegatedAdminOutput)
	return ret0, ret1
}

// DeleteDatalakeDelegatedAdminRequest indicates an expected call of DeleteDatalakeDelegatedAdminRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeDelegatedAdminRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeDelegatedAdminRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeDelegatedAdminRequest), arg0)
}

// DeleteDatalakeDelegatedAdminWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeDelegatedAdminWithContext(arg0 context.Context, arg1 *securitylake.DeleteDatalakeDelegatedAdminInput, arg2 ...request.Option) (*securitylake.DeleteDatalakeDelegatedAdminOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatalakeDelegatedAdminWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteDatalakeDelegatedAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatalakeDelegatedAdminWithContext indicates an expected call of DeleteDatalakeDelegatedAdminWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeDelegatedAdminWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeDelegatedAdminWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeDelegatedAdminWithContext), varargs...)
}

// DeleteDatalakeExceptionsSubscription mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeExceptionsSubscription(arg0 *securitylake.DeleteDatalakeExceptionsSubscriptionInput) (*securitylake.DeleteDatalakeExceptionsSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatalakeExceptionsSubscription", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteDatalakeExceptionsSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatalakeExceptionsSubscription indicates an expected call of DeleteDatalakeExceptionsSubscription
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeExceptionsSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeExceptionsSubscription", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeExceptionsSubscription), arg0)
}

// DeleteDatalakeExceptionsSubscriptionRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeExceptionsSubscriptionRequest(arg0 *securitylake.DeleteDatalakeExceptionsSubscriptionInput) (*request.Request, *securitylake.DeleteDatalakeExceptionsSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatalakeExceptionsSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteDatalakeExceptionsSubscriptionOutput)
	return ret0, ret1
}

// DeleteDatalakeExceptionsSubscriptionRequest indicates an expected call of DeleteDatalakeExceptionsSubscriptionRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeExceptionsSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeExceptionsSubscriptionRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeExceptionsSubscriptionRequest), arg0)
}

// DeleteDatalakeExceptionsSubscriptionWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeExceptionsSubscriptionWithContext(arg0 context.Context, arg1 *securitylake.DeleteDatalakeExceptionsSubscriptionInput, arg2 ...request.Option) (*securitylake.DeleteDatalakeExceptionsSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatalakeExceptionsSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteDatalakeExceptionsSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatalakeExceptionsSubscriptionWithContext indicates an expected call of DeleteDatalakeExceptionsSubscriptionWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeExceptionsSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeExceptionsSubscriptionWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeExceptionsSubscriptionWithContext), varargs...)
}

// DeleteDatalakeRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeRequest(arg0 *securitylake.DeleteDatalakeInput) (*request.Request, *securitylake.DeleteDatalakeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatalakeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteDatalakeOutput)
	return ret0, ret1
}

// DeleteDatalakeRequest indicates an expected call of DeleteDatalakeRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeRequest), arg0)
}

// DeleteDatalakeWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteDatalakeWithContext(arg0 context.Context, arg1 *securitylake.DeleteDatalakeInput, arg2 ...request.Option) (*securitylake.DeleteDatalakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatalakeWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteDatalakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatalakeWithContext indicates an expected call of DeleteDatalakeWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteDatalakeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatalakeWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteDatalakeWithContext), varargs...)
}

// DeleteSubscriber mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriber(arg0 *securitylake.DeleteSubscriberInput) (*securitylake.DeleteSubscriberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriber", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriber indicates an expected call of DeleteSubscriber
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriber", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriber), arg0)
}

// DeleteSubscriberRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriberRequest(arg0 *securitylake.DeleteSubscriberInput) (*request.Request, *securitylake.DeleteSubscriberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteSubscriberOutput)
	return ret0, ret1
}

// DeleteSubscriberRequest indicates an expected call of DeleteSubscriberRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriberRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriberRequest), arg0)
}

// DeleteSubscriberWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriberWithContext(arg0 context.Context, arg1 *securitylake.DeleteSubscriberInput, arg2 ...request.Option) (*securitylake.DeleteSubscriberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscriberWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriberWithContext indicates an expected call of DeleteSubscriberWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriberWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriberWithContext), varargs...)
}

// DeleteSubscriptionNotificationConfiguration mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriptionNotificationConfiguration(arg0 *securitylake.DeleteSubscriptionNotificationConfigurationInput) (*securitylake.DeleteSubscriptionNotificationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionNotificationConfiguration", arg0)
	ret0, _ := ret[0].(*securitylake.DeleteSubscriptionNotificationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriptionNotificationConfiguration indicates an expected call of DeleteSubscriptionNotificationConfiguration
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriptionNotificationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionNotificationConfiguration", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriptionNotificationConfiguration), arg0)
}

// DeleteSubscriptionNotificationConfigurationRequest mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriptionNotificationConfigurationRequest(arg0 *securitylake.DeleteSubscriptionNotificationConfigurationInput) (*request.Request, *securitylake.DeleteSubscriptionNotificationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionNotificationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.DeleteSubscriptionNotificationConfigurationOutput)
	return ret0, ret1
}

// DeleteSubscriptionNotificationConfigurationRequest indicates an expected call of DeleteSubscriptionNotificationConfigurationRequest
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriptionNotificationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionNotificationConfigurationRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriptionNotificationConfigurationRequest), arg0)
}

// DeleteSubscriptionNotificationConfigurationWithContext mocks base method
func (m *MockSecurityLakeAPI) DeleteSubscriptionNotificationConfigurationWithContext(arg0 context.Context, arg1 *securitylake.DeleteSubscriptionNotificationConfigurationInput, arg2 ...request.Option) (*securitylake.DeleteSubscriptionNotificationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscriptionNotificationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.DeleteSubscriptionNotificationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriptionNotificationConfigurationWithContext indicates an expected call of DeleteSubscriptionNotificationConfigurationWithContext
func (mr *MockSecurityLakeAPIMockRecorder) DeleteSubscriptionNotificationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionNotificationConfigurationWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).DeleteSubscriptionNotificationConfigurationWithContext), varargs...)
}

// GetDatalake mocks base method
func (m *MockSecurityLakeAPI) GetDatalake(arg0 *securitylake.GetDatalakeInput) (*securitylake.GetDatalakeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalake", arg0)
	ret0, _ := ret[0].(*securitylake.GetDatalakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatalake indicates an expected call of GetDatalake
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalake(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalake", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalake), arg0)
}

// GetDatalakeAutoEnable mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeAutoEnable(arg0 *securitylake.GetDatalakeAutoEnableInput) (*securitylake.GetDatalakeAutoEnableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalakeAutoEnable", arg0)
	ret0, _ := ret[0].(*securitylake.GetDatalakeAutoEnableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatalakeAutoEnable indicates an expected call of GetDatalakeAutoEnable
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeAutoEnable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeAutoEnable", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeAutoEnable), arg0)
}

// GetDatalakeAutoEnableRequest mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeAutoEnableRequest(arg0 *securitylake.GetDatalakeAutoEnableInput) (*request.Request, *securitylake.GetDatalakeAutoEnableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalakeAutoEnableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.GetDatalakeAutoEnableOutput)
	return ret0, ret1
}

// GetDatalakeAutoEnableRequest indicates an expected call of GetDatalakeAutoEnableRequest
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeAutoEnableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeAutoEnableRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeAutoEnableRequest), arg0)
}

// GetDatalakeAutoEnableWithContext mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeAutoEnableWithContext(arg0 context.Context, arg1 *securitylake.GetDatalakeAutoEnableInput, arg2 ...request.Option) (*securitylake.GetDatalakeAutoEnableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatalakeAutoEnableWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.GetDatalakeAutoEnableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatalakeAutoEnableWithContext indicates an expected call of GetDatalakeAutoEnableWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeAutoEnableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeAutoEnableWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeAutoEnableWithContext), varargs...)
}

// GetDatalakeExceptionsExpiry mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeExceptionsExpiry(arg0 *securitylake.GetDatalakeExceptionsExpiryInput) (*securitylake.GetDatalakeExceptionsExpiryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalakeExceptionsExpiry", arg0)
	ret0, _ := ret[0].(*securitylake.GetDatalakeExceptionsExpiryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatalakeExceptionsExpiry indicates an expected call of GetDatalakeExceptionsExpiry
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeExceptionsExpiry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeExceptionsExpiry", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeExceptionsExpiry), arg0)
}

// GetDatalakeExceptionsExpiryRequest mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeExceptionsExpiryRequest(arg0 *securitylake.GetDatalakeExceptionsExpiryInput) (*request.Request, *securitylake.GetDatalakeExceptionsExpiryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalakeExceptionsExpiryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.GetDatalakeExceptionsExpiryOutput)
	return ret0, ret1
}

// GetDatalakeExceptionsExpiryRequest indicates an expected call of GetDatalakeExceptionsExpiryRequest
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeExceptionsExpiryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeExceptionsExpiryRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeExceptionsExpiryRequest), arg0)
}

// GetDatalakeExceptionsExpiryWithContext mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeExceptionsExpiryWithContext(arg0 context.Context, arg1 *securitylake.GetDatalakeExceptionsExpiryInput, arg2 ...request.Option) (*securitylake.GetDatalakeExceptionsExpiryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatalakeExceptionsExpiryWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.GetDatalakeExceptionsExpiryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatalakeExceptionsExpiryWithContext indicates an expected call of GetDatalakeExceptionsExpiryWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeExceptionsExpiryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeExceptionsExpiryWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeExceptionsExpiryWithContext), varargs...)
}

// GetDatalakeExceptionsSubscription mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeExceptionsSubscription(arg0 *securitylake.GetDatalakeExceptionsSubscriptionInput) (*securitylake.GetDatalakeExceptionsSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalakeExceptionsSubscription", arg0)
	ret0, _ := ret[0].(*securitylake.GetDatalakeExceptionsSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatalakeExceptionsSubscription indicates an expected call of GetDatalakeExceptionsSubscription
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeExceptionsSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeExceptionsSubscription", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeExceptionsSubscription), arg0)
}

// GetDatalakeExceptionsSubscriptionRequest mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeExceptionsSubscriptionRequest(arg0 *securitylake.GetDatalakeExceptionsSubscriptionInput) (*request.Request, *securitylake.GetDatalakeExceptionsSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalakeExceptionsSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.GetDatalakeExceptionsSubscriptionOutput)
	return ret0, ret1
}

// GetDatalakeExceptionsSubscriptionRequest indicates an expected call of GetDatalakeExceptionsSubscriptionRequest
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeExceptionsSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeExceptionsSubscriptionRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeExceptionsSubscriptionRequest), arg0)
}

// GetDatalakeExceptionsSubscriptionWithContext mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeExceptionsSubscriptionWithContext(arg0 context.Context, arg1 *securitylake.GetDatalakeExceptionsSubscriptionInput, arg2 ...request.Option) (*securitylake.GetDatalakeExceptionsSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatalakeExceptionsSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.GetDatalakeExceptionsSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatalakeExceptionsSubscriptionWithContext indicates an expected call of GetDatalakeExceptionsSubscriptionWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeExceptionsSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeExceptionsSubscriptionWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeExceptionsSubscriptionWithContext), varargs...)
}

// GetDatalakeRequest mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeRequest(arg0 *securitylake.GetDatalakeInput) (*request.Request, *securitylake.GetDatalakeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalakeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.GetDatalakeOutput)
	return ret0, ret1
}

// GetDatalakeRequest indicates an expected call of GetDatalakeRequest
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeRequest), arg0)
}

// GetDatalakeStatus mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeStatus(arg0 *securitylake.GetDatalakeStatusInput) (*securitylake.GetDatalakeStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalakeStatus", arg0)
	ret0, _ := ret[0].(*securitylake.GetDatalakeStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatalakeStatus indicates an expected call of GetDatalakeStatus
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeStatus", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeStatus), arg0)
}

// GetDatalakeStatusPages mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeStatusPages(arg0 *securitylake.GetDatalakeStatusInput, arg1 func(*securitylake.GetDatalakeStatusOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalakeStatusPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDatalakeStatusPages indicates an expected call of GetDatalakeStatusPages
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeStatusPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeStatusPages", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeStatusPages), arg0, arg1)
}

// GetDatalakeStatusPagesWithContext mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeStatusPagesWithContext(arg0 context.Context, arg1 *securitylake.GetDatalakeStatusInput, arg2 func(*securitylake.GetDatalakeStatusOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatalakeStatusPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDatalakeStatusPagesWithContext indicates an expected call of GetDatalakeStatusPagesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeStatusPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeStatusPagesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeStatusPagesWithContext), varargs...)
}

// GetDatalakeStatusRequest mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeStatusRequest(arg0 *securitylake.GetDatalakeStatusInput) (*request.Request, *securitylake.GetDatalakeStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatalakeStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.GetDatalakeStatusOutput)
	return ret0, ret1
}

// GetDatalakeStatusRequest indicates an expected call of GetDatalakeStatusRequest
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeStatusRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeStatusRequest), arg0)
}

// GetDatalakeStatusWithContext mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeStatusWithContext(arg0 context.Context, arg1 *securitylake.GetDatalakeStatusInput, arg2 ...request.Option) (*securitylake.GetDatalakeStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatalakeStatusWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.GetDatalakeStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatalakeStatusWithContext indicates an expected call of GetDatalakeStatusWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeStatusWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeStatusWithContext), varargs...)
}

// GetDatalakeWithContext mocks base method
func (m *MockSecurityLakeAPI) GetDatalakeWithContext(arg0 context.Context, arg1 *securitylake.GetDatalakeInput, arg2 ...request.Option) (*securitylake.GetDatalakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatalakeWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.GetDatalakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatalakeWithContext indicates an expected call of GetDatalakeWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetDatalakeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatalakeWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetDatalakeWithContext), varargs...)
}

// GetSubscriber mocks base method
func (m *MockSecurityLakeAPI) GetSubscriber(arg0 *securitylake.GetSubscriberInput) (*securitylake.GetSubscriberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriber", arg0)
	ret0, _ := ret[0].(*securitylake.GetSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriber indicates an expected call of GetSubscriber
func (mr *MockSecurityLakeAPIMockRecorder) GetSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriber", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetSubscriber), arg0)
}

// GetSubscriberRequest mocks base method
func (m *MockSecurityLakeAPI) GetSubscriberRequest(arg0 *securitylake.GetSubscriberInput) (*request.Request, *securitylake.GetSubscriberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.GetSubscriberOutput)
	return ret0, ret1
}

// GetSubscriberRequest indicates an expected call of GetSubscriberRequest
func (mr *MockSecurityLakeAPIMockRecorder) GetSubscriberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriberRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetSubscriberRequest), arg0)
}

// GetSubscriberWithContext mocks base method
func (m *MockSecurityLakeAPI) GetSubscriberWithContext(arg0 context.Context, arg1 *securitylake.GetSubscriberInput, arg2 ...request.Option) (*securitylake.GetSubscriberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriberWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.GetSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriberWithContext indicates an expected call of GetSubscriberWithContext
func (mr *MockSecurityLakeAPIMockRecorder) GetSubscriberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriberWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).GetSubscriberWithContext), varargs...)
}

// ListDatalakeExceptions mocks base method
func (m *MockSecurityLakeAPI) ListDatalakeExceptions(arg0 *securitylake.ListDatalakeExceptionsInput) (*securitylake.ListDatalakeExceptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatalakeExceptions", arg0)
	ret0, _ := ret[0].(*securitylake.ListDatalakeExceptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatalakeExceptions indicates an expected call of ListDatalakeExceptions
func (mr *MockSecurityLakeAPIMockRecorder) ListDatalakeExceptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatalakeExceptions", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDatalakeExceptions), arg0)
}

// ListDatalakeExceptionsPages mocks base method
func (m *MockSecurityLakeAPI) ListDatalakeExceptionsPages(arg0 *securitylake.ListDatalakeExceptionsInput, arg1 func(*securitylake.ListDatalakeExceptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatalakeExceptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatalakeExceptionsPages indicates an expected call of ListDatalakeExceptionsPages
func (mr *MockSecurityLakeAPIMockRecorder) ListDatalakeExceptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatalakeExceptionsPages", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDatalakeExceptionsPages), arg0, arg1)
}

// ListDatalakeExceptionsPagesWithContext mocks base method
func (m *MockSecurityLakeAPI) ListDatalakeExceptionsPagesWithContext(arg0 context.Context, arg1 *securitylake.ListDatalakeExceptionsInput, arg2 func(*securitylake.ListDatalakeExceptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatalakeExceptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatalakeExceptionsPagesWithContext indicates an expected call of ListDatalakeExceptionsPagesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListDatalakeExceptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatalakeExceptionsPagesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDatalakeExceptionsPagesWithContext), varargs...)
}

// ListDatalakeExceptionsRequest mocks base method
func (m *MockSecurityLakeAPI) ListDatalakeExceptionsRequest(arg0 *securitylake.ListDatalakeExceptionsInput) (*request.Request, *securitylake.ListDatalakeExceptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatalakeExceptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.ListDatalakeExceptionsOutput)
	return ret0, ret1
}

// ListDatalakeExceptionsRequest indicates an expected call of ListDatalakeExceptionsRequest
func (mr *MockSecurityLakeAPIMockRecorder) ListDatalakeExceptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatalakeExceptionsRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDatalakeExceptionsRequest), arg0)
}

// ListDatalakeExceptionsWithContext mocks base method
func (m *MockSecurityLakeAPI) ListDatalakeExceptionsWithContext(arg0 context.Context, arg1 *securitylake.ListDatalakeExceptionsInput, arg2 ...request.Option) (*securitylake.ListDatalakeExceptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatalakeExceptionsWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.ListDatalakeExceptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatalakeExceptionsWithContext indicates an expected call of ListDatalakeExceptionsWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListDatalakeExceptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatalakeExceptionsWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListDatalakeExceptionsWithContext), varargs...)
}

// ListLogSources mocks base method
func (m *MockSecurityLakeAPI) ListLogSources(arg0 *securitylake.ListLogSourcesInput) (*securitylake.ListLogSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogSources", arg0)
	ret0, _ := ret[0].(*securitylake.ListLogSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogSources indicates an expected call of ListLogSources
func (mr *MockSecurityLakeAPIMockRecorder) ListLogSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSources", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListLogSources), arg0)
}

// ListLogSourcesPages mocks base method
func (m *MockSecurityLakeAPI) ListLogSourcesPages(arg0 *securitylake.ListLogSourcesInput, arg1 func(*securitylake.ListLogSourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogSourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLogSourcesPages indicates an expected call of ListLogSourcesPages
func (mr *MockSecurityLakeAPIMockRecorder) ListLogSourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSourcesPages", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListLogSourcesPages), arg0, arg1)
}

// ListLogSourcesPagesWithContext mocks base method
func (m *MockSecurityLakeAPI) ListLogSourcesPagesWithContext(arg0 context.Context, arg1 *securitylake.ListLogSourcesInput, arg2 func(*securitylake.ListLogSourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLogSourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLogSourcesPagesWithContext indicates an expected call of ListLogSourcesPagesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListLogSourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSourcesPagesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListLogSourcesPagesWithContext), varargs...)
}

// ListLogSourcesRequest mocks base method
func (m *MockSecurityLakeAPI) ListLogSourcesRequest(arg0 *securitylake.ListLogSourcesInput) (*request.Request, *securitylake.ListLogSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.ListLogSourcesOutput)
	return ret0, ret1
}

// ListLogSourcesRequest indicates an expected call of ListLogSourcesRequest
func (mr *MockSecurityLakeAPIMockRecorder) ListLogSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSourcesRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListLogSourcesRequest), arg0)
}

// ListLogSourcesWithContext mocks base method
func (m *MockSecurityLakeAPI) ListLogSourcesWithContext(arg0 context.Context, arg1 *securitylake.ListLogSourcesInput, arg2 ...request.Option) (*securitylake.ListLogSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLogSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.ListLogSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogSourcesWithContext indicates an expected call of ListLogSourcesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListLogSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSourcesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListLogSourcesWithContext), varargs...)
}

// ListSubscribers mocks base method
func (m *MockSecurityLakeAPI) ListSubscribers(arg0 *securitylake.ListSubscribersInput) (*securitylake.ListSubscribersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribers", arg0)
	ret0, _ := ret[0].(*securitylake.ListSubscribersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribers indicates an expected call of ListSubscribers
func (mr *MockSecurityLakeAPIMockRecorder) ListSubscribers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribers", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListSubscribers), arg0)
}

// ListSubscribersPages mocks base method
func (m *MockSecurityLakeAPI) ListSubscribersPages(arg0 *securitylake.ListSubscribersInput, arg1 func(*securitylake.ListSubscribersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscribersPages indicates an expected call of ListSubscribersPages
func (mr *MockSecurityLakeAPIMockRecorder) ListSubscribersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribersPages", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListSubscribersPages), arg0, arg1)
}

// ListSubscribersPagesWithContext mocks base method
func (m *MockSecurityLakeAPI) ListSubscribersPagesWithContext(arg0 context.Context, arg1 *securitylake.ListSubscribersInput, arg2 func(*securitylake.ListSubscribersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscribersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscribersPagesWithContext indicates an expected call of ListSubscribersPagesWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListSubscribersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribersPagesWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListSubscribersPagesWithContext), varargs...)
}

// ListSubscribersRequest mocks base method
func (m *MockSecurityLakeAPI) ListSubscribersRequest(arg0 *securitylake.ListSubscribersInput) (*request.Request, *securitylake.ListSubscribersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.ListSubscribersOutput)
	return ret0, ret1
}

// ListSubscribersRequest indicates an expected call of ListSubscribersRequest
func (mr *MockSecurityLakeAPIMockRecorder) ListSubscribersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribersRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListSubscribersRequest), arg0)
}

// ListSubscribersWithContext mocks base method
func (m *MockSecurityLakeAPI) ListSubscribersWithContext(arg0 context.Context, arg1 *securitylake.ListSubscribersInput, arg2 ...request.Option) (*securitylake.ListSubscribersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscribersWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.ListSubscribersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribersWithContext indicates an expected call of ListSubscribersWithContext
func (mr *MockSecurityLakeAPIMockRecorder) ListSubscribersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribersWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).ListSubscribersWithContext), varargs...)
}

// UpdateDatalake mocks base method
func (m *MockSecurityLakeAPI) UpdateDatalake(arg0 *securitylake.UpdateDatalakeInput) (*securitylake.UpdateDatalakeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatalake", arg0)
	ret0, _ := ret[0].(*securitylake.UpdateDatalakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatalake indicates an expected call of UpdateDatalake
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDatalake(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatalake", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDatalake), arg0)
}

// UpdateDatalakeExceptionsExpiry mocks base method
func (m *MockSecurityLakeAPI) UpdateDatalakeExceptionsExpiry(arg0 *securitylake.UpdateDatalakeExceptionsExpiryInput) (*securitylake.UpdateDatalakeExceptionsExpiryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatalakeExceptionsExpiry", arg0)
	ret0, _ := ret[0].(*securitylake.UpdateDatalakeExceptionsExpiryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatalakeExceptionsExpiry indicates an expected call of UpdateDatalakeExceptionsExpiry
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDatalakeExceptionsExpiry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatalakeExceptionsExpiry", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDatalakeExceptionsExpiry), arg0)
}

// UpdateDatalakeExceptionsExpiryRequest mocks base method
func (m *MockSecurityLakeAPI) UpdateDatalakeExceptionsExpiryRequest(arg0 *securitylake.UpdateDatalakeExceptionsExpiryInput) (*request.Request, *securitylake.UpdateDatalakeExceptionsExpiryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatalakeExceptionsExpiryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.UpdateDatalakeExceptionsExpiryOutput)
	return ret0, ret1
}

// UpdateDatalakeExceptionsExpiryRequest indicates an expected call of UpdateDatalakeExceptionsExpiryRequest
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDatalakeExceptionsExpiryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatalakeExceptionsExpiryRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDatalakeExceptionsExpiryRequest), arg0)
}

// UpdateDatalakeExceptionsExpiryWithContext mocks base method
func (m *MockSecurityLakeAPI) UpdateDatalakeExceptionsExpiryWithContext(arg0 context.Context, arg1 *securitylake.UpdateDatalakeExceptionsExpiryInput, arg2 ...request.Option) (*securitylake.UpdateDatalakeExceptionsExpiryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatalakeExceptionsExpiryWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.UpdateDatalakeExceptionsExpiryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatalakeExceptionsExpiryWithContext indicates an expected call of UpdateDatalakeExceptionsExpiryWithContext
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDatalakeExceptionsExpiryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatalakeExceptionsExpiryWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDatalakeExceptionsExpiryWithContext), varargs...)
}

// UpdateDatalakeExceptionsSubscription mocks base method
func (m *MockSecurityLakeAPI) UpdateDatalakeExceptionsSubscription(arg0 *securitylake.UpdateDatalakeExceptionsSubscriptionInput) (*securitylake.UpdateDatalakeExceptionsSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatalakeExceptionsSubscription", arg0)
	ret0, _ := ret[0].(*securitylake.UpdateDatalakeExceptionsSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatalakeExceptionsSubscription indicates an expected call of UpdateDatalakeExceptionsSubscription
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDatalakeExceptionsSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatalakeExceptionsSubscription", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDatalakeExceptionsSubscription), arg0)
}

// UpdateDatalakeExceptionsSubscriptionRequest mocks base method
func (m *MockSecurityLakeAPI) UpdateDatalakeExceptionsSubscriptionRequest(arg0 *securitylake.UpdateDatalakeExceptionsSubscriptionInput) (*request.Request, *securitylake.UpdateDatalakeExceptionsSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatalakeExceptionsSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.UpdateDatalakeExceptionsSubscriptionOutput)
	return ret0, ret1
}

// UpdateDatalakeExceptionsSubscriptionRequest indicates an expected call of UpdateDatalakeExceptionsSubscriptionRequest
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDatalakeExceptionsSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatalakeExceptionsSubscriptionRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDatalakeExceptionsSubscriptionRequest), arg0)
}

// UpdateDatalakeExceptionsSubscriptionWithContext mocks base method
func (m *MockSecurityLakeAPI) UpdateDatalakeExceptionsSubscriptionWithContext(arg0 context.Context, arg1 *securitylake.UpdateDatalakeExceptionsSubscriptionInput, arg2 ...request.Option) (*securitylake.UpdateDatalakeExceptionsSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatalakeExceptionsSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.UpdateDatalakeExceptionsSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatalakeExceptionsSubscriptionWithContext indicates an expected call of UpdateDatalakeExceptionsSubscriptionWithContext
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDatalakeExceptionsSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatalakeExceptionsSubscriptionWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDatalakeExceptionsSubscriptionWithContext), varargs...)
}

// UpdateDatalakeRequest mocks base method
func (m *MockSecurityLakeAPI) UpdateDatalakeRequest(arg0 *securitylake.UpdateDatalakeInput) (*request.Request, *securitylake.UpdateDatalakeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatalakeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.UpdateDatalakeOutput)
	return ret0, ret1
}

// UpdateDatalakeRequest indicates an expected call of UpdateDatalakeRequest
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDatalakeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatalakeRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDatalakeRequest), arg0)
}

// UpdateDatalakeWithContext mocks base method
func (m *MockSecurityLakeAPI) UpdateDatalakeWithContext(arg0 context.Context, arg1 *securitylake.UpdateDatalakeInput, arg2 ...request.Option) (*securitylake.UpdateDatalakeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatalakeWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.UpdateDatalakeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatalakeWithContext indicates an expected call of UpdateDatalakeWithContext
func (mr *MockSecurityLakeAPIMockRecorder) UpdateDatalakeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatalakeWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateDatalakeWithContext), varargs...)
}

// UpdateSubscriber mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriber(arg0 *securitylake.UpdateSubscriberInput) (*securitylake.UpdateSubscriberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriber", arg0)
	ret0, _ := ret[0].(*securitylake.UpdateSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriber indicates an expected call of UpdateSubscriber
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriber", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriber), arg0)
}

// UpdateSubscriberRequest mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriberRequest(arg0 *securitylake.UpdateSubscriberInput) (*request.Request, *securitylake.UpdateSubscriberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.UpdateSubscriberOutput)
	return ret0, ret1
}

// UpdateSubscriberRequest indicates an expected call of UpdateSubscriberRequest
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriberRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriberRequest), arg0)
}

// UpdateSubscriberWithContext mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriberWithContext(arg0 context.Context, arg1 *securitylake.UpdateSubscriberInput, arg2 ...request.Option) (*securitylake.UpdateSubscriberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscriberWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.UpdateSubscriberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriberWithContext indicates an expected call of UpdateSubscriberWithContext
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriberWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriberWithContext), varargs...)
}

// UpdateSubscriptionNotificationConfiguration mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriptionNotificationConfiguration(arg0 *securitylake.UpdateSubscriptionNotificationConfigurationInput) (*securitylake.UpdateSubscriptionNotificationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionNotificationConfiguration", arg0)
	ret0, _ := ret[0].(*securitylake.UpdateSubscriptionNotificationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionNotificationConfiguration indicates an expected call of UpdateSubscriptionNotificationConfiguration
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriptionNotificationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionNotificationConfiguration", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriptionNotificationConfiguration), arg0)
}

// UpdateSubscriptionNotificationConfigurationRequest mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriptionNotificationConfigurationRequest(arg0 *securitylake.UpdateSubscriptionNotificationConfigurationInput) (*request.Request, *securitylake.UpdateSubscriptionNotificationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionNotificationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securitylake.UpdateSubscriptionNotificationConfigurationOutput)
	return ret0, ret1
}

// UpdateSubscriptionNotificationConfigurationRequest indicates an expected call of UpdateSubscriptionNotificationConfigurationRequest
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriptionNotificationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionNotificationConfigurationRequest", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriptionNotificationConfigurationRequest), arg0)
}

// UpdateSubscriptionNotificationConfigurationWithContext mocks base method
func (m *MockSecurityLakeAPI) UpdateSubscriptionNotificationConfigurationWithContext(arg0 context.Context, arg1 *securitylake.UpdateSubscriptionNotificationConfigurationInput, arg2 ...request.Option) (*securitylake.UpdateSubscriptionNotificationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscriptionNotificationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*securitylake.UpdateSubscriptionNotificationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionNotificationConfigurationWithContext indicates an expected call of UpdateSubscriptionNotificationConfigurationWithContext
func (mr *MockSecurityLakeAPIMockRecorder) UpdateSubscriptionNotificationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionNotificationConfigurationWithContext", reflect.TypeOf((*MockSecurityLakeAPI)(nil).UpdateSubscriptionNotificationConfigurationWithContext), varargs...)
}
