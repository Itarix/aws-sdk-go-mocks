// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/comprehend/comprehendiface (interfaces: ComprehendAPI)

// Package comprehendmock is a generated GoMock package.
package comprehendmock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	comprehend "github.com/aws/aws-sdk-go/service/comprehend"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockComprehendAPI is a mock of ComprehendAPI interface
type MockComprehendAPI struct {
	ctrl     *gomock.Controller
	recorder *MockComprehendAPIMockRecorder
}

// MockComprehendAPIMockRecorder is the mock recorder for MockComprehendAPI
type MockComprehendAPIMockRecorder struct {
	mock *MockComprehendAPI
}

// NewMockComprehendAPI creates a new mock instance
func NewMockComprehendAPI(ctrl *gomock.Controller) *MockComprehendAPI {
	mock := &MockComprehendAPI{ctrl: ctrl}
	mock.recorder = &MockComprehendAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComprehendAPI) EXPECT() *MockComprehendAPIMockRecorder {
	return m.recorder
}

// BatchDetectDominantLanguage mocks base method
func (m *MockComprehendAPI) BatchDetectDominantLanguage(arg0 *comprehend.BatchDetectDominantLanguageInput) (*comprehend.BatchDetectDominantLanguageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDetectDominantLanguage", arg0)
	ret0, _ := ret[0].(*comprehend.BatchDetectDominantLanguageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDetectDominantLanguage indicates an expected call of BatchDetectDominantLanguage
func (mr *MockComprehendAPIMockRecorder) BatchDetectDominantLanguage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectDominantLanguage", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectDominantLanguage), arg0)
}

// BatchDetectDominantLanguageRequest mocks base method
func (m *MockComprehendAPI) BatchDetectDominantLanguageRequest(arg0 *comprehend.BatchDetectDominantLanguageInput) (*request.Request, *comprehend.BatchDetectDominantLanguageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDetectDominantLanguageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.BatchDetectDominantLanguageOutput)
	return ret0, ret1
}

// BatchDetectDominantLanguageRequest indicates an expected call of BatchDetectDominantLanguageRequest
func (mr *MockComprehendAPIMockRecorder) BatchDetectDominantLanguageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectDominantLanguageRequest", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectDominantLanguageRequest), arg0)
}

// BatchDetectDominantLanguageWithContext mocks base method
func (m *MockComprehendAPI) BatchDetectDominantLanguageWithContext(arg0 aws.Context, arg1 *comprehend.BatchDetectDominantLanguageInput, arg2 ...request.Option) (*comprehend.BatchDetectDominantLanguageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDetectDominantLanguageWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.BatchDetectDominantLanguageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDetectDominantLanguageWithContext indicates an expected call of BatchDetectDominantLanguageWithContext
func (mr *MockComprehendAPIMockRecorder) BatchDetectDominantLanguageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectDominantLanguageWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectDominantLanguageWithContext), varargs...)
}

// BatchDetectEntities mocks base method
func (m *MockComprehendAPI) BatchDetectEntities(arg0 *comprehend.BatchDetectEntitiesInput) (*comprehend.BatchDetectEntitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDetectEntities", arg0)
	ret0, _ := ret[0].(*comprehend.BatchDetectEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDetectEntities indicates an expected call of BatchDetectEntities
func (mr *MockComprehendAPIMockRecorder) BatchDetectEntities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectEntities", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectEntities), arg0)
}

// BatchDetectEntitiesRequest mocks base method
func (m *MockComprehendAPI) BatchDetectEntitiesRequest(arg0 *comprehend.BatchDetectEntitiesInput) (*request.Request, *comprehend.BatchDetectEntitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDetectEntitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.BatchDetectEntitiesOutput)
	return ret0, ret1
}

// BatchDetectEntitiesRequest indicates an expected call of BatchDetectEntitiesRequest
func (mr *MockComprehendAPIMockRecorder) BatchDetectEntitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectEntitiesRequest", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectEntitiesRequest), arg0)
}

// BatchDetectEntitiesWithContext mocks base method
func (m *MockComprehendAPI) BatchDetectEntitiesWithContext(arg0 aws.Context, arg1 *comprehend.BatchDetectEntitiesInput, arg2 ...request.Option) (*comprehend.BatchDetectEntitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDetectEntitiesWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.BatchDetectEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDetectEntitiesWithContext indicates an expected call of BatchDetectEntitiesWithContext
func (mr *MockComprehendAPIMockRecorder) BatchDetectEntitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectEntitiesWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectEntitiesWithContext), varargs...)
}

// BatchDetectKeyPhrases mocks base method
func (m *MockComprehendAPI) BatchDetectKeyPhrases(arg0 *comprehend.BatchDetectKeyPhrasesInput) (*comprehend.BatchDetectKeyPhrasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDetectKeyPhrases", arg0)
	ret0, _ := ret[0].(*comprehend.BatchDetectKeyPhrasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDetectKeyPhrases indicates an expected call of BatchDetectKeyPhrases
func (mr *MockComprehendAPIMockRecorder) BatchDetectKeyPhrases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectKeyPhrases", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectKeyPhrases), arg0)
}

// BatchDetectKeyPhrasesRequest mocks base method
func (m *MockComprehendAPI) BatchDetectKeyPhrasesRequest(arg0 *comprehend.BatchDetectKeyPhrasesInput) (*request.Request, *comprehend.BatchDetectKeyPhrasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDetectKeyPhrasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.BatchDetectKeyPhrasesOutput)
	return ret0, ret1
}

// BatchDetectKeyPhrasesRequest indicates an expected call of BatchDetectKeyPhrasesRequest
func (mr *MockComprehendAPIMockRecorder) BatchDetectKeyPhrasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectKeyPhrasesRequest", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectKeyPhrasesRequest), arg0)
}

// BatchDetectKeyPhrasesWithContext mocks base method
func (m *MockComprehendAPI) BatchDetectKeyPhrasesWithContext(arg0 aws.Context, arg1 *comprehend.BatchDetectKeyPhrasesInput, arg2 ...request.Option) (*comprehend.BatchDetectKeyPhrasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDetectKeyPhrasesWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.BatchDetectKeyPhrasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDetectKeyPhrasesWithContext indicates an expected call of BatchDetectKeyPhrasesWithContext
func (mr *MockComprehendAPIMockRecorder) BatchDetectKeyPhrasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectKeyPhrasesWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectKeyPhrasesWithContext), varargs...)
}

// BatchDetectSentiment mocks base method
func (m *MockComprehendAPI) BatchDetectSentiment(arg0 *comprehend.BatchDetectSentimentInput) (*comprehend.BatchDetectSentimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDetectSentiment", arg0)
	ret0, _ := ret[0].(*comprehend.BatchDetectSentimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDetectSentiment indicates an expected call of BatchDetectSentiment
func (mr *MockComprehendAPIMockRecorder) BatchDetectSentiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectSentiment", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectSentiment), arg0)
}

// BatchDetectSentimentRequest mocks base method
func (m *MockComprehendAPI) BatchDetectSentimentRequest(arg0 *comprehend.BatchDetectSentimentInput) (*request.Request, *comprehend.BatchDetectSentimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDetectSentimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.BatchDetectSentimentOutput)
	return ret0, ret1
}

// BatchDetectSentimentRequest indicates an expected call of BatchDetectSentimentRequest
func (mr *MockComprehendAPIMockRecorder) BatchDetectSentimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectSentimentRequest", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectSentimentRequest), arg0)
}

// BatchDetectSentimentWithContext mocks base method
func (m *MockComprehendAPI) BatchDetectSentimentWithContext(arg0 aws.Context, arg1 *comprehend.BatchDetectSentimentInput, arg2 ...request.Option) (*comprehend.BatchDetectSentimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDetectSentimentWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.BatchDetectSentimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDetectSentimentWithContext indicates an expected call of BatchDetectSentimentWithContext
func (mr *MockComprehendAPIMockRecorder) BatchDetectSentimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectSentimentWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectSentimentWithContext), varargs...)
}

// BatchDetectSyntax mocks base method
func (m *MockComprehendAPI) BatchDetectSyntax(arg0 *comprehend.BatchDetectSyntaxInput) (*comprehend.BatchDetectSyntaxOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDetectSyntax", arg0)
	ret0, _ := ret[0].(*comprehend.BatchDetectSyntaxOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDetectSyntax indicates an expected call of BatchDetectSyntax
func (mr *MockComprehendAPIMockRecorder) BatchDetectSyntax(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectSyntax", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectSyntax), arg0)
}

// BatchDetectSyntaxRequest mocks base method
func (m *MockComprehendAPI) BatchDetectSyntaxRequest(arg0 *comprehend.BatchDetectSyntaxInput) (*request.Request, *comprehend.BatchDetectSyntaxOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDetectSyntaxRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.BatchDetectSyntaxOutput)
	return ret0, ret1
}

// BatchDetectSyntaxRequest indicates an expected call of BatchDetectSyntaxRequest
func (mr *MockComprehendAPIMockRecorder) BatchDetectSyntaxRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectSyntaxRequest", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectSyntaxRequest), arg0)
}

// BatchDetectSyntaxWithContext mocks base method
func (m *MockComprehendAPI) BatchDetectSyntaxWithContext(arg0 aws.Context, arg1 *comprehend.BatchDetectSyntaxInput, arg2 ...request.Option) (*comprehend.BatchDetectSyntaxOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDetectSyntaxWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.BatchDetectSyntaxOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDetectSyntaxWithContext indicates an expected call of BatchDetectSyntaxWithContext
func (mr *MockComprehendAPIMockRecorder) BatchDetectSyntaxWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDetectSyntaxWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).BatchDetectSyntaxWithContext), varargs...)
}

// DescribeDominantLanguageDetectionJob mocks base method
func (m *MockComprehendAPI) DescribeDominantLanguageDetectionJob(arg0 *comprehend.DescribeDominantLanguageDetectionJobInput) (*comprehend.DescribeDominantLanguageDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDominantLanguageDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.DescribeDominantLanguageDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDominantLanguageDetectionJob indicates an expected call of DescribeDominantLanguageDetectionJob
func (mr *MockComprehendAPIMockRecorder) DescribeDominantLanguageDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDominantLanguageDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeDominantLanguageDetectionJob), arg0)
}

// DescribeDominantLanguageDetectionJobRequest mocks base method
func (m *MockComprehendAPI) DescribeDominantLanguageDetectionJobRequest(arg0 *comprehend.DescribeDominantLanguageDetectionJobInput) (*request.Request, *comprehend.DescribeDominantLanguageDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDominantLanguageDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.DescribeDominantLanguageDetectionJobOutput)
	return ret0, ret1
}

// DescribeDominantLanguageDetectionJobRequest indicates an expected call of DescribeDominantLanguageDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) DescribeDominantLanguageDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDominantLanguageDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeDominantLanguageDetectionJobRequest), arg0)
}

// DescribeDominantLanguageDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) DescribeDominantLanguageDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.DescribeDominantLanguageDetectionJobInput, arg2 ...request.Option) (*comprehend.DescribeDominantLanguageDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDominantLanguageDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.DescribeDominantLanguageDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDominantLanguageDetectionJobWithContext indicates an expected call of DescribeDominantLanguageDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) DescribeDominantLanguageDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDominantLanguageDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeDominantLanguageDetectionJobWithContext), varargs...)
}

// DescribeEntitiesDetectionJob mocks base method
func (m *MockComprehendAPI) DescribeEntitiesDetectionJob(arg0 *comprehend.DescribeEntitiesDetectionJobInput) (*comprehend.DescribeEntitiesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEntitiesDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.DescribeEntitiesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEntitiesDetectionJob indicates an expected call of DescribeEntitiesDetectionJob
func (mr *MockComprehendAPIMockRecorder) DescribeEntitiesDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEntitiesDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeEntitiesDetectionJob), arg0)
}

// DescribeEntitiesDetectionJobRequest mocks base method
func (m *MockComprehendAPI) DescribeEntitiesDetectionJobRequest(arg0 *comprehend.DescribeEntitiesDetectionJobInput) (*request.Request, *comprehend.DescribeEntitiesDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEntitiesDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.DescribeEntitiesDetectionJobOutput)
	return ret0, ret1
}

// DescribeEntitiesDetectionJobRequest indicates an expected call of DescribeEntitiesDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) DescribeEntitiesDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEntitiesDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeEntitiesDetectionJobRequest), arg0)
}

// DescribeEntitiesDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) DescribeEntitiesDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.DescribeEntitiesDetectionJobInput, arg2 ...request.Option) (*comprehend.DescribeEntitiesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEntitiesDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.DescribeEntitiesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEntitiesDetectionJobWithContext indicates an expected call of DescribeEntitiesDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) DescribeEntitiesDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEntitiesDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeEntitiesDetectionJobWithContext), varargs...)
}

// DescribeKeyPhrasesDetectionJob mocks base method
func (m *MockComprehendAPI) DescribeKeyPhrasesDetectionJob(arg0 *comprehend.DescribeKeyPhrasesDetectionJobInput) (*comprehend.DescribeKeyPhrasesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeKeyPhrasesDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.DescribeKeyPhrasesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKeyPhrasesDetectionJob indicates an expected call of DescribeKeyPhrasesDetectionJob
func (mr *MockComprehendAPIMockRecorder) DescribeKeyPhrasesDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeyPhrasesDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeKeyPhrasesDetectionJob), arg0)
}

// DescribeKeyPhrasesDetectionJobRequest mocks base method
func (m *MockComprehendAPI) DescribeKeyPhrasesDetectionJobRequest(arg0 *comprehend.DescribeKeyPhrasesDetectionJobInput) (*request.Request, *comprehend.DescribeKeyPhrasesDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeKeyPhrasesDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.DescribeKeyPhrasesDetectionJobOutput)
	return ret0, ret1
}

// DescribeKeyPhrasesDetectionJobRequest indicates an expected call of DescribeKeyPhrasesDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) DescribeKeyPhrasesDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeyPhrasesDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeKeyPhrasesDetectionJobRequest), arg0)
}

// DescribeKeyPhrasesDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) DescribeKeyPhrasesDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.DescribeKeyPhrasesDetectionJobInput, arg2 ...request.Option) (*comprehend.DescribeKeyPhrasesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeKeyPhrasesDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.DescribeKeyPhrasesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKeyPhrasesDetectionJobWithContext indicates an expected call of DescribeKeyPhrasesDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) DescribeKeyPhrasesDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeyPhrasesDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeKeyPhrasesDetectionJobWithContext), varargs...)
}

// DescribeSentimentDetectionJob mocks base method
func (m *MockComprehendAPI) DescribeSentimentDetectionJob(arg0 *comprehend.DescribeSentimentDetectionJobInput) (*comprehend.DescribeSentimentDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSentimentDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.DescribeSentimentDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSentimentDetectionJob indicates an expected call of DescribeSentimentDetectionJob
func (mr *MockComprehendAPIMockRecorder) DescribeSentimentDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSentimentDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeSentimentDetectionJob), arg0)
}

// DescribeSentimentDetectionJobRequest mocks base method
func (m *MockComprehendAPI) DescribeSentimentDetectionJobRequest(arg0 *comprehend.DescribeSentimentDetectionJobInput) (*request.Request, *comprehend.DescribeSentimentDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSentimentDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.DescribeSentimentDetectionJobOutput)
	return ret0, ret1
}

// DescribeSentimentDetectionJobRequest indicates an expected call of DescribeSentimentDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) DescribeSentimentDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSentimentDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeSentimentDetectionJobRequest), arg0)
}

// DescribeSentimentDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) DescribeSentimentDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.DescribeSentimentDetectionJobInput, arg2 ...request.Option) (*comprehend.DescribeSentimentDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSentimentDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.DescribeSentimentDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSentimentDetectionJobWithContext indicates an expected call of DescribeSentimentDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) DescribeSentimentDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSentimentDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeSentimentDetectionJobWithContext), varargs...)
}

// DescribeTopicsDetectionJob mocks base method
func (m *MockComprehendAPI) DescribeTopicsDetectionJob(arg0 *comprehend.DescribeTopicsDetectionJobInput) (*comprehend.DescribeTopicsDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTopicsDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.DescribeTopicsDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTopicsDetectionJob indicates an expected call of DescribeTopicsDetectionJob
func (mr *MockComprehendAPIMockRecorder) DescribeTopicsDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTopicsDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeTopicsDetectionJob), arg0)
}

// DescribeTopicsDetectionJobRequest mocks base method
func (m *MockComprehendAPI) DescribeTopicsDetectionJobRequest(arg0 *comprehend.DescribeTopicsDetectionJobInput) (*request.Request, *comprehend.DescribeTopicsDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTopicsDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.DescribeTopicsDetectionJobOutput)
	return ret0, ret1
}

// DescribeTopicsDetectionJobRequest indicates an expected call of DescribeTopicsDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) DescribeTopicsDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTopicsDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeTopicsDetectionJobRequest), arg0)
}

// DescribeTopicsDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) DescribeTopicsDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.DescribeTopicsDetectionJobInput, arg2 ...request.Option) (*comprehend.DescribeTopicsDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTopicsDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.DescribeTopicsDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTopicsDetectionJobWithContext indicates an expected call of DescribeTopicsDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) DescribeTopicsDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTopicsDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).DescribeTopicsDetectionJobWithContext), varargs...)
}

// DetectDominantLanguage mocks base method
func (m *MockComprehendAPI) DetectDominantLanguage(arg0 *comprehend.DetectDominantLanguageInput) (*comprehend.DetectDominantLanguageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectDominantLanguage", arg0)
	ret0, _ := ret[0].(*comprehend.DetectDominantLanguageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectDominantLanguage indicates an expected call of DetectDominantLanguage
func (mr *MockComprehendAPIMockRecorder) DetectDominantLanguage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDominantLanguage", reflect.TypeOf((*MockComprehendAPI)(nil).DetectDominantLanguage), arg0)
}

// DetectDominantLanguageRequest mocks base method
func (m *MockComprehendAPI) DetectDominantLanguageRequest(arg0 *comprehend.DetectDominantLanguageInput) (*request.Request, *comprehend.DetectDominantLanguageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectDominantLanguageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.DetectDominantLanguageOutput)
	return ret0, ret1
}

// DetectDominantLanguageRequest indicates an expected call of DetectDominantLanguageRequest
func (mr *MockComprehendAPIMockRecorder) DetectDominantLanguageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDominantLanguageRequest", reflect.TypeOf((*MockComprehendAPI)(nil).DetectDominantLanguageRequest), arg0)
}

// DetectDominantLanguageWithContext mocks base method
func (m *MockComprehendAPI) DetectDominantLanguageWithContext(arg0 aws.Context, arg1 *comprehend.DetectDominantLanguageInput, arg2 ...request.Option) (*comprehend.DetectDominantLanguageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectDominantLanguageWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.DetectDominantLanguageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectDominantLanguageWithContext indicates an expected call of DetectDominantLanguageWithContext
func (mr *MockComprehendAPIMockRecorder) DetectDominantLanguageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDominantLanguageWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).DetectDominantLanguageWithContext), varargs...)
}

// DetectEntities mocks base method
func (m *MockComprehendAPI) DetectEntities(arg0 *comprehend.DetectEntitiesInput) (*comprehend.DetectEntitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectEntities", arg0)
	ret0, _ := ret[0].(*comprehend.DetectEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectEntities indicates an expected call of DetectEntities
func (mr *MockComprehendAPIMockRecorder) DetectEntities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectEntities", reflect.TypeOf((*MockComprehendAPI)(nil).DetectEntities), arg0)
}

// DetectEntitiesRequest mocks base method
func (m *MockComprehendAPI) DetectEntitiesRequest(arg0 *comprehend.DetectEntitiesInput) (*request.Request, *comprehend.DetectEntitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectEntitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.DetectEntitiesOutput)
	return ret0, ret1
}

// DetectEntitiesRequest indicates an expected call of DetectEntitiesRequest
func (mr *MockComprehendAPIMockRecorder) DetectEntitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectEntitiesRequest", reflect.TypeOf((*MockComprehendAPI)(nil).DetectEntitiesRequest), arg0)
}

// DetectEntitiesWithContext mocks base method
func (m *MockComprehendAPI) DetectEntitiesWithContext(arg0 aws.Context, arg1 *comprehend.DetectEntitiesInput, arg2 ...request.Option) (*comprehend.DetectEntitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectEntitiesWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.DetectEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectEntitiesWithContext indicates an expected call of DetectEntitiesWithContext
func (mr *MockComprehendAPIMockRecorder) DetectEntitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectEntitiesWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).DetectEntitiesWithContext), varargs...)
}

// DetectKeyPhrases mocks base method
func (m *MockComprehendAPI) DetectKeyPhrases(arg0 *comprehend.DetectKeyPhrasesInput) (*comprehend.DetectKeyPhrasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectKeyPhrases", arg0)
	ret0, _ := ret[0].(*comprehend.DetectKeyPhrasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectKeyPhrases indicates an expected call of DetectKeyPhrases
func (mr *MockComprehendAPIMockRecorder) DetectKeyPhrases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectKeyPhrases", reflect.TypeOf((*MockComprehendAPI)(nil).DetectKeyPhrases), arg0)
}

// DetectKeyPhrasesRequest mocks base method
func (m *MockComprehendAPI) DetectKeyPhrasesRequest(arg0 *comprehend.DetectKeyPhrasesInput) (*request.Request, *comprehend.DetectKeyPhrasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectKeyPhrasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.DetectKeyPhrasesOutput)
	return ret0, ret1
}

// DetectKeyPhrasesRequest indicates an expected call of DetectKeyPhrasesRequest
func (mr *MockComprehendAPIMockRecorder) DetectKeyPhrasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectKeyPhrasesRequest", reflect.TypeOf((*MockComprehendAPI)(nil).DetectKeyPhrasesRequest), arg0)
}

// DetectKeyPhrasesWithContext mocks base method
func (m *MockComprehendAPI) DetectKeyPhrasesWithContext(arg0 aws.Context, arg1 *comprehend.DetectKeyPhrasesInput, arg2 ...request.Option) (*comprehend.DetectKeyPhrasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectKeyPhrasesWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.DetectKeyPhrasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectKeyPhrasesWithContext indicates an expected call of DetectKeyPhrasesWithContext
func (mr *MockComprehendAPIMockRecorder) DetectKeyPhrasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectKeyPhrasesWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).DetectKeyPhrasesWithContext), varargs...)
}

// DetectSentiment mocks base method
func (m *MockComprehendAPI) DetectSentiment(arg0 *comprehend.DetectSentimentInput) (*comprehend.DetectSentimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectSentiment", arg0)
	ret0, _ := ret[0].(*comprehend.DetectSentimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectSentiment indicates an expected call of DetectSentiment
func (mr *MockComprehendAPIMockRecorder) DetectSentiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectSentiment", reflect.TypeOf((*MockComprehendAPI)(nil).DetectSentiment), arg0)
}

// DetectSentimentRequest mocks base method
func (m *MockComprehendAPI) DetectSentimentRequest(arg0 *comprehend.DetectSentimentInput) (*request.Request, *comprehend.DetectSentimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectSentimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.DetectSentimentOutput)
	return ret0, ret1
}

// DetectSentimentRequest indicates an expected call of DetectSentimentRequest
func (mr *MockComprehendAPIMockRecorder) DetectSentimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectSentimentRequest", reflect.TypeOf((*MockComprehendAPI)(nil).DetectSentimentRequest), arg0)
}

// DetectSentimentWithContext mocks base method
func (m *MockComprehendAPI) DetectSentimentWithContext(arg0 aws.Context, arg1 *comprehend.DetectSentimentInput, arg2 ...request.Option) (*comprehend.DetectSentimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectSentimentWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.DetectSentimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectSentimentWithContext indicates an expected call of DetectSentimentWithContext
func (mr *MockComprehendAPIMockRecorder) DetectSentimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectSentimentWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).DetectSentimentWithContext), varargs...)
}

// DetectSyntax mocks base method
func (m *MockComprehendAPI) DetectSyntax(arg0 *comprehend.DetectSyntaxInput) (*comprehend.DetectSyntaxOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectSyntax", arg0)
	ret0, _ := ret[0].(*comprehend.DetectSyntaxOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectSyntax indicates an expected call of DetectSyntax
func (mr *MockComprehendAPIMockRecorder) DetectSyntax(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectSyntax", reflect.TypeOf((*MockComprehendAPI)(nil).DetectSyntax), arg0)
}

// DetectSyntaxRequest mocks base method
func (m *MockComprehendAPI) DetectSyntaxRequest(arg0 *comprehend.DetectSyntaxInput) (*request.Request, *comprehend.DetectSyntaxOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectSyntaxRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.DetectSyntaxOutput)
	return ret0, ret1
}

// DetectSyntaxRequest indicates an expected call of DetectSyntaxRequest
func (mr *MockComprehendAPIMockRecorder) DetectSyntaxRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectSyntaxRequest", reflect.TypeOf((*MockComprehendAPI)(nil).DetectSyntaxRequest), arg0)
}

// DetectSyntaxWithContext mocks base method
func (m *MockComprehendAPI) DetectSyntaxWithContext(arg0 aws.Context, arg1 *comprehend.DetectSyntaxInput, arg2 ...request.Option) (*comprehend.DetectSyntaxOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectSyntaxWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.DetectSyntaxOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectSyntaxWithContext indicates an expected call of DetectSyntaxWithContext
func (mr *MockComprehendAPIMockRecorder) DetectSyntaxWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectSyntaxWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).DetectSyntaxWithContext), varargs...)
}

// ListDominantLanguageDetectionJobs mocks base method
func (m *MockComprehendAPI) ListDominantLanguageDetectionJobs(arg0 *comprehend.ListDominantLanguageDetectionJobsInput) (*comprehend.ListDominantLanguageDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDominantLanguageDetectionJobs", arg0)
	ret0, _ := ret[0].(*comprehend.ListDominantLanguageDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDominantLanguageDetectionJobs indicates an expected call of ListDominantLanguageDetectionJobs
func (mr *MockComprehendAPIMockRecorder) ListDominantLanguageDetectionJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDominantLanguageDetectionJobs", reflect.TypeOf((*MockComprehendAPI)(nil).ListDominantLanguageDetectionJobs), arg0)
}

// ListDominantLanguageDetectionJobsPages mocks base method
func (m *MockComprehendAPI) ListDominantLanguageDetectionJobsPages(arg0 *comprehend.ListDominantLanguageDetectionJobsInput, arg1 func(*comprehend.ListDominantLanguageDetectionJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDominantLanguageDetectionJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDominantLanguageDetectionJobsPages indicates an expected call of ListDominantLanguageDetectionJobsPages
func (mr *MockComprehendAPIMockRecorder) ListDominantLanguageDetectionJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDominantLanguageDetectionJobsPages", reflect.TypeOf((*MockComprehendAPI)(nil).ListDominantLanguageDetectionJobsPages), arg0, arg1)
}

// ListDominantLanguageDetectionJobsPagesWithContext mocks base method
func (m *MockComprehendAPI) ListDominantLanguageDetectionJobsPagesWithContext(arg0 aws.Context, arg1 *comprehend.ListDominantLanguageDetectionJobsInput, arg2 func(*comprehend.ListDominantLanguageDetectionJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDominantLanguageDetectionJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDominantLanguageDetectionJobsPagesWithContext indicates an expected call of ListDominantLanguageDetectionJobsPagesWithContext
func (mr *MockComprehendAPIMockRecorder) ListDominantLanguageDetectionJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDominantLanguageDetectionJobsPagesWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).ListDominantLanguageDetectionJobsPagesWithContext), varargs...)
}

// ListDominantLanguageDetectionJobsRequest mocks base method
func (m *MockComprehendAPI) ListDominantLanguageDetectionJobsRequest(arg0 *comprehend.ListDominantLanguageDetectionJobsInput) (*request.Request, *comprehend.ListDominantLanguageDetectionJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDominantLanguageDetectionJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.ListDominantLanguageDetectionJobsOutput)
	return ret0, ret1
}

// ListDominantLanguageDetectionJobsRequest indicates an expected call of ListDominantLanguageDetectionJobsRequest
func (mr *MockComprehendAPIMockRecorder) ListDominantLanguageDetectionJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDominantLanguageDetectionJobsRequest", reflect.TypeOf((*MockComprehendAPI)(nil).ListDominantLanguageDetectionJobsRequest), arg0)
}

// ListDominantLanguageDetectionJobsWithContext mocks base method
func (m *MockComprehendAPI) ListDominantLanguageDetectionJobsWithContext(arg0 aws.Context, arg1 *comprehend.ListDominantLanguageDetectionJobsInput, arg2 ...request.Option) (*comprehend.ListDominantLanguageDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDominantLanguageDetectionJobsWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.ListDominantLanguageDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDominantLanguageDetectionJobsWithContext indicates an expected call of ListDominantLanguageDetectionJobsWithContext
func (mr *MockComprehendAPIMockRecorder) ListDominantLanguageDetectionJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDominantLanguageDetectionJobsWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).ListDominantLanguageDetectionJobsWithContext), varargs...)
}

// ListEntitiesDetectionJobs mocks base method
func (m *MockComprehendAPI) ListEntitiesDetectionJobs(arg0 *comprehend.ListEntitiesDetectionJobsInput) (*comprehend.ListEntitiesDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitiesDetectionJobs", arg0)
	ret0, _ := ret[0].(*comprehend.ListEntitiesDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntitiesDetectionJobs indicates an expected call of ListEntitiesDetectionJobs
func (mr *MockComprehendAPIMockRecorder) ListEntitiesDetectionJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesDetectionJobs", reflect.TypeOf((*MockComprehendAPI)(nil).ListEntitiesDetectionJobs), arg0)
}

// ListEntitiesDetectionJobsPages mocks base method
func (m *MockComprehendAPI) ListEntitiesDetectionJobsPages(arg0 *comprehend.ListEntitiesDetectionJobsInput, arg1 func(*comprehend.ListEntitiesDetectionJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitiesDetectionJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEntitiesDetectionJobsPages indicates an expected call of ListEntitiesDetectionJobsPages
func (mr *MockComprehendAPIMockRecorder) ListEntitiesDetectionJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesDetectionJobsPages", reflect.TypeOf((*MockComprehendAPI)(nil).ListEntitiesDetectionJobsPages), arg0, arg1)
}

// ListEntitiesDetectionJobsPagesWithContext mocks base method
func (m *MockComprehendAPI) ListEntitiesDetectionJobsPagesWithContext(arg0 aws.Context, arg1 *comprehend.ListEntitiesDetectionJobsInput, arg2 func(*comprehend.ListEntitiesDetectionJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntitiesDetectionJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEntitiesDetectionJobsPagesWithContext indicates an expected call of ListEntitiesDetectionJobsPagesWithContext
func (mr *MockComprehendAPIMockRecorder) ListEntitiesDetectionJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesDetectionJobsPagesWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).ListEntitiesDetectionJobsPagesWithContext), varargs...)
}

// ListEntitiesDetectionJobsRequest mocks base method
func (m *MockComprehendAPI) ListEntitiesDetectionJobsRequest(arg0 *comprehend.ListEntitiesDetectionJobsInput) (*request.Request, *comprehend.ListEntitiesDetectionJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitiesDetectionJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.ListEntitiesDetectionJobsOutput)
	return ret0, ret1
}

// ListEntitiesDetectionJobsRequest indicates an expected call of ListEntitiesDetectionJobsRequest
func (mr *MockComprehendAPIMockRecorder) ListEntitiesDetectionJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesDetectionJobsRequest", reflect.TypeOf((*MockComprehendAPI)(nil).ListEntitiesDetectionJobsRequest), arg0)
}

// ListEntitiesDetectionJobsWithContext mocks base method
func (m *MockComprehendAPI) ListEntitiesDetectionJobsWithContext(arg0 aws.Context, arg1 *comprehend.ListEntitiesDetectionJobsInput, arg2 ...request.Option) (*comprehend.ListEntitiesDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntitiesDetectionJobsWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.ListEntitiesDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntitiesDetectionJobsWithContext indicates an expected call of ListEntitiesDetectionJobsWithContext
func (mr *MockComprehendAPIMockRecorder) ListEntitiesDetectionJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesDetectionJobsWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).ListEntitiesDetectionJobsWithContext), varargs...)
}

// ListKeyPhrasesDetectionJobs mocks base method
func (m *MockComprehendAPI) ListKeyPhrasesDetectionJobs(arg0 *comprehend.ListKeyPhrasesDetectionJobsInput) (*comprehend.ListKeyPhrasesDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyPhrasesDetectionJobs", arg0)
	ret0, _ := ret[0].(*comprehend.ListKeyPhrasesDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyPhrasesDetectionJobs indicates an expected call of ListKeyPhrasesDetectionJobs
func (mr *MockComprehendAPIMockRecorder) ListKeyPhrasesDetectionJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyPhrasesDetectionJobs", reflect.TypeOf((*MockComprehendAPI)(nil).ListKeyPhrasesDetectionJobs), arg0)
}

// ListKeyPhrasesDetectionJobsPages mocks base method
func (m *MockComprehendAPI) ListKeyPhrasesDetectionJobsPages(arg0 *comprehend.ListKeyPhrasesDetectionJobsInput, arg1 func(*comprehend.ListKeyPhrasesDetectionJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyPhrasesDetectionJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKeyPhrasesDetectionJobsPages indicates an expected call of ListKeyPhrasesDetectionJobsPages
func (mr *MockComprehendAPIMockRecorder) ListKeyPhrasesDetectionJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyPhrasesDetectionJobsPages", reflect.TypeOf((*MockComprehendAPI)(nil).ListKeyPhrasesDetectionJobsPages), arg0, arg1)
}

// ListKeyPhrasesDetectionJobsPagesWithContext mocks base method
func (m *MockComprehendAPI) ListKeyPhrasesDetectionJobsPagesWithContext(arg0 aws.Context, arg1 *comprehend.ListKeyPhrasesDetectionJobsInput, arg2 func(*comprehend.ListKeyPhrasesDetectionJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeyPhrasesDetectionJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKeyPhrasesDetectionJobsPagesWithContext indicates an expected call of ListKeyPhrasesDetectionJobsPagesWithContext
func (mr *MockComprehendAPIMockRecorder) ListKeyPhrasesDetectionJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyPhrasesDetectionJobsPagesWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).ListKeyPhrasesDetectionJobsPagesWithContext), varargs...)
}

// ListKeyPhrasesDetectionJobsRequest mocks base method
func (m *MockComprehendAPI) ListKeyPhrasesDetectionJobsRequest(arg0 *comprehend.ListKeyPhrasesDetectionJobsInput) (*request.Request, *comprehend.ListKeyPhrasesDetectionJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyPhrasesDetectionJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.ListKeyPhrasesDetectionJobsOutput)
	return ret0, ret1
}

// ListKeyPhrasesDetectionJobsRequest indicates an expected call of ListKeyPhrasesDetectionJobsRequest
func (mr *MockComprehendAPIMockRecorder) ListKeyPhrasesDetectionJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyPhrasesDetectionJobsRequest", reflect.TypeOf((*MockComprehendAPI)(nil).ListKeyPhrasesDetectionJobsRequest), arg0)
}

// ListKeyPhrasesDetectionJobsWithContext mocks base method
func (m *MockComprehendAPI) ListKeyPhrasesDetectionJobsWithContext(arg0 aws.Context, arg1 *comprehend.ListKeyPhrasesDetectionJobsInput, arg2 ...request.Option) (*comprehend.ListKeyPhrasesDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeyPhrasesDetectionJobsWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.ListKeyPhrasesDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyPhrasesDetectionJobsWithContext indicates an expected call of ListKeyPhrasesDetectionJobsWithContext
func (mr *MockComprehendAPIMockRecorder) ListKeyPhrasesDetectionJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyPhrasesDetectionJobsWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).ListKeyPhrasesDetectionJobsWithContext), varargs...)
}

// ListSentimentDetectionJobs mocks base method
func (m *MockComprehendAPI) ListSentimentDetectionJobs(arg0 *comprehend.ListSentimentDetectionJobsInput) (*comprehend.ListSentimentDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSentimentDetectionJobs", arg0)
	ret0, _ := ret[0].(*comprehend.ListSentimentDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSentimentDetectionJobs indicates an expected call of ListSentimentDetectionJobs
func (mr *MockComprehendAPIMockRecorder) ListSentimentDetectionJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSentimentDetectionJobs", reflect.TypeOf((*MockComprehendAPI)(nil).ListSentimentDetectionJobs), arg0)
}

// ListSentimentDetectionJobsPages mocks base method
func (m *MockComprehendAPI) ListSentimentDetectionJobsPages(arg0 *comprehend.ListSentimentDetectionJobsInput, arg1 func(*comprehend.ListSentimentDetectionJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSentimentDetectionJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSentimentDetectionJobsPages indicates an expected call of ListSentimentDetectionJobsPages
func (mr *MockComprehendAPIMockRecorder) ListSentimentDetectionJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSentimentDetectionJobsPages", reflect.TypeOf((*MockComprehendAPI)(nil).ListSentimentDetectionJobsPages), arg0, arg1)
}

// ListSentimentDetectionJobsPagesWithContext mocks base method
func (m *MockComprehendAPI) ListSentimentDetectionJobsPagesWithContext(arg0 aws.Context, arg1 *comprehend.ListSentimentDetectionJobsInput, arg2 func(*comprehend.ListSentimentDetectionJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSentimentDetectionJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSentimentDetectionJobsPagesWithContext indicates an expected call of ListSentimentDetectionJobsPagesWithContext
func (mr *MockComprehendAPIMockRecorder) ListSentimentDetectionJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSentimentDetectionJobsPagesWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).ListSentimentDetectionJobsPagesWithContext), varargs...)
}

// ListSentimentDetectionJobsRequest mocks base method
func (m *MockComprehendAPI) ListSentimentDetectionJobsRequest(arg0 *comprehend.ListSentimentDetectionJobsInput) (*request.Request, *comprehend.ListSentimentDetectionJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSentimentDetectionJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.ListSentimentDetectionJobsOutput)
	return ret0, ret1
}

// ListSentimentDetectionJobsRequest indicates an expected call of ListSentimentDetectionJobsRequest
func (mr *MockComprehendAPIMockRecorder) ListSentimentDetectionJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSentimentDetectionJobsRequest", reflect.TypeOf((*MockComprehendAPI)(nil).ListSentimentDetectionJobsRequest), arg0)
}

// ListSentimentDetectionJobsWithContext mocks base method
func (m *MockComprehendAPI) ListSentimentDetectionJobsWithContext(arg0 aws.Context, arg1 *comprehend.ListSentimentDetectionJobsInput, arg2 ...request.Option) (*comprehend.ListSentimentDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSentimentDetectionJobsWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.ListSentimentDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSentimentDetectionJobsWithContext indicates an expected call of ListSentimentDetectionJobsWithContext
func (mr *MockComprehendAPIMockRecorder) ListSentimentDetectionJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSentimentDetectionJobsWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).ListSentimentDetectionJobsWithContext), varargs...)
}

// ListTopicsDetectionJobs mocks base method
func (m *MockComprehendAPI) ListTopicsDetectionJobs(arg0 *comprehend.ListTopicsDetectionJobsInput) (*comprehend.ListTopicsDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopicsDetectionJobs", arg0)
	ret0, _ := ret[0].(*comprehend.ListTopicsDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopicsDetectionJobs indicates an expected call of ListTopicsDetectionJobs
func (mr *MockComprehendAPIMockRecorder) ListTopicsDetectionJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicsDetectionJobs", reflect.TypeOf((*MockComprehendAPI)(nil).ListTopicsDetectionJobs), arg0)
}

// ListTopicsDetectionJobsPages mocks base method
func (m *MockComprehendAPI) ListTopicsDetectionJobsPages(arg0 *comprehend.ListTopicsDetectionJobsInput, arg1 func(*comprehend.ListTopicsDetectionJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopicsDetectionJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTopicsDetectionJobsPages indicates an expected call of ListTopicsDetectionJobsPages
func (mr *MockComprehendAPIMockRecorder) ListTopicsDetectionJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicsDetectionJobsPages", reflect.TypeOf((*MockComprehendAPI)(nil).ListTopicsDetectionJobsPages), arg0, arg1)
}

// ListTopicsDetectionJobsPagesWithContext mocks base method
func (m *MockComprehendAPI) ListTopicsDetectionJobsPagesWithContext(arg0 aws.Context, arg1 *comprehend.ListTopicsDetectionJobsInput, arg2 func(*comprehend.ListTopicsDetectionJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopicsDetectionJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTopicsDetectionJobsPagesWithContext indicates an expected call of ListTopicsDetectionJobsPagesWithContext
func (mr *MockComprehendAPIMockRecorder) ListTopicsDetectionJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicsDetectionJobsPagesWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).ListTopicsDetectionJobsPagesWithContext), varargs...)
}

// ListTopicsDetectionJobsRequest mocks base method
func (m *MockComprehendAPI) ListTopicsDetectionJobsRequest(arg0 *comprehend.ListTopicsDetectionJobsInput) (*request.Request, *comprehend.ListTopicsDetectionJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopicsDetectionJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.ListTopicsDetectionJobsOutput)
	return ret0, ret1
}

// ListTopicsDetectionJobsRequest indicates an expected call of ListTopicsDetectionJobsRequest
func (mr *MockComprehendAPIMockRecorder) ListTopicsDetectionJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicsDetectionJobsRequest", reflect.TypeOf((*MockComprehendAPI)(nil).ListTopicsDetectionJobsRequest), arg0)
}

// ListTopicsDetectionJobsWithContext mocks base method
func (m *MockComprehendAPI) ListTopicsDetectionJobsWithContext(arg0 aws.Context, arg1 *comprehend.ListTopicsDetectionJobsInput, arg2 ...request.Option) (*comprehend.ListTopicsDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopicsDetectionJobsWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.ListTopicsDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopicsDetectionJobsWithContext indicates an expected call of ListTopicsDetectionJobsWithContext
func (mr *MockComprehendAPIMockRecorder) ListTopicsDetectionJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicsDetectionJobsWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).ListTopicsDetectionJobsWithContext), varargs...)
}

// StartDominantLanguageDetectionJob mocks base method
func (m *MockComprehendAPI) StartDominantLanguageDetectionJob(arg0 *comprehend.StartDominantLanguageDetectionJobInput) (*comprehend.StartDominantLanguageDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDominantLanguageDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.StartDominantLanguageDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDominantLanguageDetectionJob indicates an expected call of StartDominantLanguageDetectionJob
func (mr *MockComprehendAPIMockRecorder) StartDominantLanguageDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDominantLanguageDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).StartDominantLanguageDetectionJob), arg0)
}

// StartDominantLanguageDetectionJobRequest mocks base method
func (m *MockComprehendAPI) StartDominantLanguageDetectionJobRequest(arg0 *comprehend.StartDominantLanguageDetectionJobInput) (*request.Request, *comprehend.StartDominantLanguageDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDominantLanguageDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.StartDominantLanguageDetectionJobOutput)
	return ret0, ret1
}

// StartDominantLanguageDetectionJobRequest indicates an expected call of StartDominantLanguageDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) StartDominantLanguageDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDominantLanguageDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).StartDominantLanguageDetectionJobRequest), arg0)
}

// StartDominantLanguageDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) StartDominantLanguageDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.StartDominantLanguageDetectionJobInput, arg2 ...request.Option) (*comprehend.StartDominantLanguageDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDominantLanguageDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.StartDominantLanguageDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDominantLanguageDetectionJobWithContext indicates an expected call of StartDominantLanguageDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) StartDominantLanguageDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDominantLanguageDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).StartDominantLanguageDetectionJobWithContext), varargs...)
}

// StartEntitiesDetectionJob mocks base method
func (m *MockComprehendAPI) StartEntitiesDetectionJob(arg0 *comprehend.StartEntitiesDetectionJobInput) (*comprehend.StartEntitiesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEntitiesDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.StartEntitiesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEntitiesDetectionJob indicates an expected call of StartEntitiesDetectionJob
func (mr *MockComprehendAPIMockRecorder) StartEntitiesDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEntitiesDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).StartEntitiesDetectionJob), arg0)
}

// StartEntitiesDetectionJobRequest mocks base method
func (m *MockComprehendAPI) StartEntitiesDetectionJobRequest(arg0 *comprehend.StartEntitiesDetectionJobInput) (*request.Request, *comprehend.StartEntitiesDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEntitiesDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.StartEntitiesDetectionJobOutput)
	return ret0, ret1
}

// StartEntitiesDetectionJobRequest indicates an expected call of StartEntitiesDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) StartEntitiesDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEntitiesDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).StartEntitiesDetectionJobRequest), arg0)
}

// StartEntitiesDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) StartEntitiesDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.StartEntitiesDetectionJobInput, arg2 ...request.Option) (*comprehend.StartEntitiesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartEntitiesDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.StartEntitiesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEntitiesDetectionJobWithContext indicates an expected call of StartEntitiesDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) StartEntitiesDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEntitiesDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).StartEntitiesDetectionJobWithContext), varargs...)
}

// StartKeyPhrasesDetectionJob mocks base method
func (m *MockComprehendAPI) StartKeyPhrasesDetectionJob(arg0 *comprehend.StartKeyPhrasesDetectionJobInput) (*comprehend.StartKeyPhrasesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartKeyPhrasesDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.StartKeyPhrasesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartKeyPhrasesDetectionJob indicates an expected call of StartKeyPhrasesDetectionJob
func (mr *MockComprehendAPIMockRecorder) StartKeyPhrasesDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKeyPhrasesDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).StartKeyPhrasesDetectionJob), arg0)
}

// StartKeyPhrasesDetectionJobRequest mocks base method
func (m *MockComprehendAPI) StartKeyPhrasesDetectionJobRequest(arg0 *comprehend.StartKeyPhrasesDetectionJobInput) (*request.Request, *comprehend.StartKeyPhrasesDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartKeyPhrasesDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.StartKeyPhrasesDetectionJobOutput)
	return ret0, ret1
}

// StartKeyPhrasesDetectionJobRequest indicates an expected call of StartKeyPhrasesDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) StartKeyPhrasesDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKeyPhrasesDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).StartKeyPhrasesDetectionJobRequest), arg0)
}

// StartKeyPhrasesDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) StartKeyPhrasesDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.StartKeyPhrasesDetectionJobInput, arg2 ...request.Option) (*comprehend.StartKeyPhrasesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartKeyPhrasesDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.StartKeyPhrasesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartKeyPhrasesDetectionJobWithContext indicates an expected call of StartKeyPhrasesDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) StartKeyPhrasesDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKeyPhrasesDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).StartKeyPhrasesDetectionJobWithContext), varargs...)
}

// StartSentimentDetectionJob mocks base method
func (m *MockComprehendAPI) StartSentimentDetectionJob(arg0 *comprehend.StartSentimentDetectionJobInput) (*comprehend.StartSentimentDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSentimentDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.StartSentimentDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSentimentDetectionJob indicates an expected call of StartSentimentDetectionJob
func (mr *MockComprehendAPIMockRecorder) StartSentimentDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSentimentDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).StartSentimentDetectionJob), arg0)
}

// StartSentimentDetectionJobRequest mocks base method
func (m *MockComprehendAPI) StartSentimentDetectionJobRequest(arg0 *comprehend.StartSentimentDetectionJobInput) (*request.Request, *comprehend.StartSentimentDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSentimentDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.StartSentimentDetectionJobOutput)
	return ret0, ret1
}

// StartSentimentDetectionJobRequest indicates an expected call of StartSentimentDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) StartSentimentDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSentimentDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).StartSentimentDetectionJobRequest), arg0)
}

// StartSentimentDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) StartSentimentDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.StartSentimentDetectionJobInput, arg2 ...request.Option) (*comprehend.StartSentimentDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSentimentDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.StartSentimentDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSentimentDetectionJobWithContext indicates an expected call of StartSentimentDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) StartSentimentDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSentimentDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).StartSentimentDetectionJobWithContext), varargs...)
}

// StartTopicsDetectionJob mocks base method
func (m *MockComprehendAPI) StartTopicsDetectionJob(arg0 *comprehend.StartTopicsDetectionJobInput) (*comprehend.StartTopicsDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTopicsDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.StartTopicsDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTopicsDetectionJob indicates an expected call of StartTopicsDetectionJob
func (mr *MockComprehendAPIMockRecorder) StartTopicsDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTopicsDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).StartTopicsDetectionJob), arg0)
}

// StartTopicsDetectionJobRequest mocks base method
func (m *MockComprehendAPI) StartTopicsDetectionJobRequest(arg0 *comprehend.StartTopicsDetectionJobInput) (*request.Request, *comprehend.StartTopicsDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTopicsDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.StartTopicsDetectionJobOutput)
	return ret0, ret1
}

// StartTopicsDetectionJobRequest indicates an expected call of StartTopicsDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) StartTopicsDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTopicsDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).StartTopicsDetectionJobRequest), arg0)
}

// StartTopicsDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) StartTopicsDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.StartTopicsDetectionJobInput, arg2 ...request.Option) (*comprehend.StartTopicsDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTopicsDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.StartTopicsDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTopicsDetectionJobWithContext indicates an expected call of StartTopicsDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) StartTopicsDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTopicsDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).StartTopicsDetectionJobWithContext), varargs...)
}

// StopDominantLanguageDetectionJob mocks base method
func (m *MockComprehendAPI) StopDominantLanguageDetectionJob(arg0 *comprehend.StopDominantLanguageDetectionJobInput) (*comprehend.StopDominantLanguageDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDominantLanguageDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.StopDominantLanguageDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDominantLanguageDetectionJob indicates an expected call of StopDominantLanguageDetectionJob
func (mr *MockComprehendAPIMockRecorder) StopDominantLanguageDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDominantLanguageDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).StopDominantLanguageDetectionJob), arg0)
}

// StopDominantLanguageDetectionJobRequest mocks base method
func (m *MockComprehendAPI) StopDominantLanguageDetectionJobRequest(arg0 *comprehend.StopDominantLanguageDetectionJobInput) (*request.Request, *comprehend.StopDominantLanguageDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDominantLanguageDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.StopDominantLanguageDetectionJobOutput)
	return ret0, ret1
}

// StopDominantLanguageDetectionJobRequest indicates an expected call of StopDominantLanguageDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) StopDominantLanguageDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDominantLanguageDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).StopDominantLanguageDetectionJobRequest), arg0)
}

// StopDominantLanguageDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) StopDominantLanguageDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.StopDominantLanguageDetectionJobInput, arg2 ...request.Option) (*comprehend.StopDominantLanguageDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopDominantLanguageDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.StopDominantLanguageDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDominantLanguageDetectionJobWithContext indicates an expected call of StopDominantLanguageDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) StopDominantLanguageDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDominantLanguageDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).StopDominantLanguageDetectionJobWithContext), varargs...)
}

// StopEntitiesDetectionJob mocks base method
func (m *MockComprehendAPI) StopEntitiesDetectionJob(arg0 *comprehend.StopEntitiesDetectionJobInput) (*comprehend.StopEntitiesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEntitiesDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.StopEntitiesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEntitiesDetectionJob indicates an expected call of StopEntitiesDetectionJob
func (mr *MockComprehendAPIMockRecorder) StopEntitiesDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEntitiesDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).StopEntitiesDetectionJob), arg0)
}

// StopEntitiesDetectionJobRequest mocks base method
func (m *MockComprehendAPI) StopEntitiesDetectionJobRequest(arg0 *comprehend.StopEntitiesDetectionJobInput) (*request.Request, *comprehend.StopEntitiesDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEntitiesDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.StopEntitiesDetectionJobOutput)
	return ret0, ret1
}

// StopEntitiesDetectionJobRequest indicates an expected call of StopEntitiesDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) StopEntitiesDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEntitiesDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).StopEntitiesDetectionJobRequest), arg0)
}

// StopEntitiesDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) StopEntitiesDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.StopEntitiesDetectionJobInput, arg2 ...request.Option) (*comprehend.StopEntitiesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopEntitiesDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.StopEntitiesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEntitiesDetectionJobWithContext indicates an expected call of StopEntitiesDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) StopEntitiesDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEntitiesDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).StopEntitiesDetectionJobWithContext), varargs...)
}

// StopKeyPhrasesDetectionJob mocks base method
func (m *MockComprehendAPI) StopKeyPhrasesDetectionJob(arg0 *comprehend.StopKeyPhrasesDetectionJobInput) (*comprehend.StopKeyPhrasesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopKeyPhrasesDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.StopKeyPhrasesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopKeyPhrasesDetectionJob indicates an expected call of StopKeyPhrasesDetectionJob
func (mr *MockComprehendAPIMockRecorder) StopKeyPhrasesDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKeyPhrasesDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).StopKeyPhrasesDetectionJob), arg0)
}

// StopKeyPhrasesDetectionJobRequest mocks base method
func (m *MockComprehendAPI) StopKeyPhrasesDetectionJobRequest(arg0 *comprehend.StopKeyPhrasesDetectionJobInput) (*request.Request, *comprehend.StopKeyPhrasesDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopKeyPhrasesDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.StopKeyPhrasesDetectionJobOutput)
	return ret0, ret1
}

// StopKeyPhrasesDetectionJobRequest indicates an expected call of StopKeyPhrasesDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) StopKeyPhrasesDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKeyPhrasesDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).StopKeyPhrasesDetectionJobRequest), arg0)
}

// StopKeyPhrasesDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) StopKeyPhrasesDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.StopKeyPhrasesDetectionJobInput, arg2 ...request.Option) (*comprehend.StopKeyPhrasesDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopKeyPhrasesDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.StopKeyPhrasesDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopKeyPhrasesDetectionJobWithContext indicates an expected call of StopKeyPhrasesDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) StopKeyPhrasesDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKeyPhrasesDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).StopKeyPhrasesDetectionJobWithContext), varargs...)
}

// StopSentimentDetectionJob mocks base method
func (m *MockComprehendAPI) StopSentimentDetectionJob(arg0 *comprehend.StopSentimentDetectionJobInput) (*comprehend.StopSentimentDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSentimentDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehend.StopSentimentDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSentimentDetectionJob indicates an expected call of StopSentimentDetectionJob
func (mr *MockComprehendAPIMockRecorder) StopSentimentDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSentimentDetectionJob", reflect.TypeOf((*MockComprehendAPI)(nil).StopSentimentDetectionJob), arg0)
}

// StopSentimentDetectionJobRequest mocks base method
func (m *MockComprehendAPI) StopSentimentDetectionJobRequest(arg0 *comprehend.StopSentimentDetectionJobInput) (*request.Request, *comprehend.StopSentimentDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSentimentDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehend.StopSentimentDetectionJobOutput)
	return ret0, ret1
}

// StopSentimentDetectionJobRequest indicates an expected call of StopSentimentDetectionJobRequest
func (mr *MockComprehendAPIMockRecorder) StopSentimentDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSentimentDetectionJobRequest", reflect.TypeOf((*MockComprehendAPI)(nil).StopSentimentDetectionJobRequest), arg0)
}

// StopSentimentDetectionJobWithContext mocks base method
func (m *MockComprehendAPI) StopSentimentDetectionJobWithContext(arg0 aws.Context, arg1 *comprehend.StopSentimentDetectionJobInput, arg2 ...request.Option) (*comprehend.StopSentimentDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopSentimentDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehend.StopSentimentDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSentimentDetectionJobWithContext indicates an expected call of StopSentimentDetectionJobWithContext
func (mr *MockComprehendAPIMockRecorder) StopSentimentDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSentimentDetectionJobWithContext", reflect.TypeOf((*MockComprehendAPI)(nil).StopSentimentDetectionJobWithContext), varargs...)
}
