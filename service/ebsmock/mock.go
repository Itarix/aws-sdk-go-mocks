// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ebs/ebsiface (interfaces: EBSAPI)

// Package ebsmock is a generated GoMock package.
package ebsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	ebs "github.com/aws/aws-sdk-go/service/ebs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEBSAPI is a mock of EBSAPI interface
type MockEBSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEBSAPIMockRecorder
}

// MockEBSAPIMockRecorder is the mock recorder for MockEBSAPI
type MockEBSAPIMockRecorder struct {
	mock *MockEBSAPI
}

// NewMockEBSAPI creates a new mock instance
func NewMockEBSAPI(ctrl *gomock.Controller) *MockEBSAPI {
	mock := &MockEBSAPI{ctrl: ctrl}
	mock.recorder = &MockEBSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEBSAPI) EXPECT() *MockEBSAPIMockRecorder {
	return m.recorder
}

// GetSnapshotBlock mocks base method
func (m *MockEBSAPI) GetSnapshotBlock(arg0 *ebs.GetSnapshotBlockInput) (*ebs.GetSnapshotBlockOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotBlock", arg0)
	ret0, _ := ret[0].(*ebs.GetSnapshotBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotBlock indicates an expected call of GetSnapshotBlock
func (mr *MockEBSAPIMockRecorder) GetSnapshotBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotBlock", reflect.TypeOf((*MockEBSAPI)(nil).GetSnapshotBlock), arg0)
}

// GetSnapshotBlockRequest mocks base method
func (m *MockEBSAPI) GetSnapshotBlockRequest(arg0 *ebs.GetSnapshotBlockInput) (*request.Request, *ebs.GetSnapshotBlockOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotBlockRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ebs.GetSnapshotBlockOutput)
	return ret0, ret1
}

// GetSnapshotBlockRequest indicates an expected call of GetSnapshotBlockRequest
func (mr *MockEBSAPIMockRecorder) GetSnapshotBlockRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotBlockRequest", reflect.TypeOf((*MockEBSAPI)(nil).GetSnapshotBlockRequest), arg0)
}

// GetSnapshotBlockWithContext mocks base method
func (m *MockEBSAPI) GetSnapshotBlockWithContext(arg0 context.Context, arg1 *ebs.GetSnapshotBlockInput, arg2 ...request.Option) (*ebs.GetSnapshotBlockOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnapshotBlockWithContext", varargs...)
	ret0, _ := ret[0].(*ebs.GetSnapshotBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotBlockWithContext indicates an expected call of GetSnapshotBlockWithContext
func (mr *MockEBSAPIMockRecorder) GetSnapshotBlockWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotBlockWithContext", reflect.TypeOf((*MockEBSAPI)(nil).GetSnapshotBlockWithContext), varargs...)
}

// ListChangedBlocks mocks base method
func (m *MockEBSAPI) ListChangedBlocks(arg0 *ebs.ListChangedBlocksInput) (*ebs.ListChangedBlocksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChangedBlocks", arg0)
	ret0, _ := ret[0].(*ebs.ListChangedBlocksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChangedBlocks indicates an expected call of ListChangedBlocks
func (mr *MockEBSAPIMockRecorder) ListChangedBlocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangedBlocks", reflect.TypeOf((*MockEBSAPI)(nil).ListChangedBlocks), arg0)
}

// ListChangedBlocksPages mocks base method
func (m *MockEBSAPI) ListChangedBlocksPages(arg0 *ebs.ListChangedBlocksInput, arg1 func(*ebs.ListChangedBlocksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChangedBlocksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChangedBlocksPages indicates an expected call of ListChangedBlocksPages
func (mr *MockEBSAPIMockRecorder) ListChangedBlocksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangedBlocksPages", reflect.TypeOf((*MockEBSAPI)(nil).ListChangedBlocksPages), arg0, arg1)
}

// ListChangedBlocksPagesWithContext mocks base method
func (m *MockEBSAPI) ListChangedBlocksPagesWithContext(arg0 context.Context, arg1 *ebs.ListChangedBlocksInput, arg2 func(*ebs.ListChangedBlocksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChangedBlocksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChangedBlocksPagesWithContext indicates an expected call of ListChangedBlocksPagesWithContext
func (mr *MockEBSAPIMockRecorder) ListChangedBlocksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangedBlocksPagesWithContext", reflect.TypeOf((*MockEBSAPI)(nil).ListChangedBlocksPagesWithContext), varargs...)
}

// ListChangedBlocksRequest mocks base method
func (m *MockEBSAPI) ListChangedBlocksRequest(arg0 *ebs.ListChangedBlocksInput) (*request.Request, *ebs.ListChangedBlocksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChangedBlocksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ebs.ListChangedBlocksOutput)
	return ret0, ret1
}

// ListChangedBlocksRequest indicates an expected call of ListChangedBlocksRequest
func (mr *MockEBSAPIMockRecorder) ListChangedBlocksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangedBlocksRequest", reflect.TypeOf((*MockEBSAPI)(nil).ListChangedBlocksRequest), arg0)
}

// ListChangedBlocksWithContext mocks base method
func (m *MockEBSAPI) ListChangedBlocksWithContext(arg0 context.Context, arg1 *ebs.ListChangedBlocksInput, arg2 ...request.Option) (*ebs.ListChangedBlocksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChangedBlocksWithContext", varargs...)
	ret0, _ := ret[0].(*ebs.ListChangedBlocksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChangedBlocksWithContext indicates an expected call of ListChangedBlocksWithContext
func (mr *MockEBSAPIMockRecorder) ListChangedBlocksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangedBlocksWithContext", reflect.TypeOf((*MockEBSAPI)(nil).ListChangedBlocksWithContext), varargs...)
}

// ListSnapshotBlocks mocks base method
func (m *MockEBSAPI) ListSnapshotBlocks(arg0 *ebs.ListSnapshotBlocksInput) (*ebs.ListSnapshotBlocksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotBlocks", arg0)
	ret0, _ := ret[0].(*ebs.ListSnapshotBlocksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshotBlocks indicates an expected call of ListSnapshotBlocks
func (mr *MockEBSAPIMockRecorder) ListSnapshotBlocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotBlocks", reflect.TypeOf((*MockEBSAPI)(nil).ListSnapshotBlocks), arg0)
}

// ListSnapshotBlocksPages mocks base method
func (m *MockEBSAPI) ListSnapshotBlocksPages(arg0 *ebs.ListSnapshotBlocksInput, arg1 func(*ebs.ListSnapshotBlocksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotBlocksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSnapshotBlocksPages indicates an expected call of ListSnapshotBlocksPages
func (mr *MockEBSAPIMockRecorder) ListSnapshotBlocksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotBlocksPages", reflect.TypeOf((*MockEBSAPI)(nil).ListSnapshotBlocksPages), arg0, arg1)
}

// ListSnapshotBlocksPagesWithContext mocks base method
func (m *MockEBSAPI) ListSnapshotBlocksPagesWithContext(arg0 context.Context, arg1 *ebs.ListSnapshotBlocksInput, arg2 func(*ebs.ListSnapshotBlocksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshotBlocksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSnapshotBlocksPagesWithContext indicates an expected call of ListSnapshotBlocksPagesWithContext
func (mr *MockEBSAPIMockRecorder) ListSnapshotBlocksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotBlocksPagesWithContext", reflect.TypeOf((*MockEBSAPI)(nil).ListSnapshotBlocksPagesWithContext), varargs...)
}

// ListSnapshotBlocksRequest mocks base method
func (m *MockEBSAPI) ListSnapshotBlocksRequest(arg0 *ebs.ListSnapshotBlocksInput) (*request.Request, *ebs.ListSnapshotBlocksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotBlocksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ebs.ListSnapshotBlocksOutput)
	return ret0, ret1
}

// ListSnapshotBlocksRequest indicates an expected call of ListSnapshotBlocksRequest
func (mr *MockEBSAPIMockRecorder) ListSnapshotBlocksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotBlocksRequest", reflect.TypeOf((*MockEBSAPI)(nil).ListSnapshotBlocksRequest), arg0)
}

// ListSnapshotBlocksWithContext mocks base method
func (m *MockEBSAPI) ListSnapshotBlocksWithContext(arg0 context.Context, arg1 *ebs.ListSnapshotBlocksInput, arg2 ...request.Option) (*ebs.ListSnapshotBlocksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshotBlocksWithContext", varargs...)
	ret0, _ := ret[0].(*ebs.ListSnapshotBlocksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshotBlocksWithContext indicates an expected call of ListSnapshotBlocksWithContext
func (mr *MockEBSAPIMockRecorder) ListSnapshotBlocksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotBlocksWithContext", reflect.TypeOf((*MockEBSAPI)(nil).ListSnapshotBlocksWithContext), varargs...)
}
