// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/managedgrafana/managedgrafanaiface (interfaces: ManagedGrafanaAPI)

// Package managedgrafanamock is a generated GoMock package.
package managedgrafanamock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	managedgrafana "github.com/aws/aws-sdk-go/service/managedgrafana"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManagedGrafanaAPI is a mock of ManagedGrafanaAPI interface
type MockManagedGrafanaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockManagedGrafanaAPIMockRecorder
}

// MockManagedGrafanaAPIMockRecorder is the mock recorder for MockManagedGrafanaAPI
type MockManagedGrafanaAPIMockRecorder struct {
	mock *MockManagedGrafanaAPI
}

// NewMockManagedGrafanaAPI creates a new mock instance
func NewMockManagedGrafanaAPI(ctrl *gomock.Controller) *MockManagedGrafanaAPI {
	mock := &MockManagedGrafanaAPI{ctrl: ctrl}
	mock.recorder = &MockManagedGrafanaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagedGrafanaAPI) EXPECT() *MockManagedGrafanaAPIMockRecorder {
	return m.recorder
}

// AssociateLicense mocks base method
func (m *MockManagedGrafanaAPI) AssociateLicense(arg0 *managedgrafana.AssociateLicenseInput) (*managedgrafana.AssociateLicenseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLicense", arg0)
	ret0, _ := ret[0].(*managedgrafana.AssociateLicenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLicense indicates an expected call of AssociateLicense
func (mr *MockManagedGrafanaAPIMockRecorder) AssociateLicense(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLicense", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).AssociateLicense), arg0)
}

// AssociateLicenseRequest mocks base method
func (m *MockManagedGrafanaAPI) AssociateLicenseRequest(arg0 *managedgrafana.AssociateLicenseInput) (*request.Request, *managedgrafana.AssociateLicenseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLicenseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.AssociateLicenseOutput)
	return ret0, ret1
}

// AssociateLicenseRequest indicates an expected call of AssociateLicenseRequest
func (mr *MockManagedGrafanaAPIMockRecorder) AssociateLicenseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLicenseRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).AssociateLicenseRequest), arg0)
}

// AssociateLicenseWithContext mocks base method
func (m *MockManagedGrafanaAPI) AssociateLicenseWithContext(arg0 context.Context, arg1 *managedgrafana.AssociateLicenseInput, arg2 ...request.Option) (*managedgrafana.AssociateLicenseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateLicenseWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.AssociateLicenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLicenseWithContext indicates an expected call of AssociateLicenseWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) AssociateLicenseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLicenseWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).AssociateLicenseWithContext), varargs...)
}

// CreateWorkspace mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspace(arg0 *managedgrafana.CreateWorkspaceInput) (*managedgrafana.CreateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", arg0)
	ret0, _ := ret[0].(*managedgrafana.CreateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspace indicates an expected call of CreateWorkspace
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspace), arg0)
}

// CreateWorkspaceApiKey mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceApiKey(arg0 *managedgrafana.CreateWorkspaceApiKeyInput) (*managedgrafana.CreateWorkspaceApiKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceApiKey", arg0)
	ret0, _ := ret[0].(*managedgrafana.CreateWorkspaceApiKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceApiKey indicates an expected call of CreateWorkspaceApiKey
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceApiKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceApiKey", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceApiKey), arg0)
}

// CreateWorkspaceApiKeyRequest mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceApiKeyRequest(arg0 *managedgrafana.CreateWorkspaceApiKeyInput) (*request.Request, *managedgrafana.CreateWorkspaceApiKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceApiKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.CreateWorkspaceApiKeyOutput)
	return ret0, ret1
}

// CreateWorkspaceApiKeyRequest indicates an expected call of CreateWorkspaceApiKeyRequest
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceApiKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceApiKeyRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceApiKeyRequest), arg0)
}

// CreateWorkspaceApiKeyWithContext mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceApiKeyWithContext(arg0 context.Context, arg1 *managedgrafana.CreateWorkspaceApiKeyInput, arg2 ...request.Option) (*managedgrafana.CreateWorkspaceApiKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspaceApiKeyWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.CreateWorkspaceApiKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceApiKeyWithContext indicates an expected call of CreateWorkspaceApiKeyWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceApiKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceApiKeyWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceApiKeyWithContext), varargs...)
}

// CreateWorkspaceRequest mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceRequest(arg0 *managedgrafana.CreateWorkspaceInput) (*request.Request, *managedgrafana.CreateWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.CreateWorkspaceOutput)
	return ret0, ret1
}

// CreateWorkspaceRequest indicates an expected call of CreateWorkspaceRequest
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceRequest), arg0)
}

// CreateWorkspaceServiceAccount mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceServiceAccount(arg0 *managedgrafana.CreateWorkspaceServiceAccountInput) (*managedgrafana.CreateWorkspaceServiceAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceServiceAccount", arg0)
	ret0, _ := ret[0].(*managedgrafana.CreateWorkspaceServiceAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceServiceAccount indicates an expected call of CreateWorkspaceServiceAccount
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceServiceAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceServiceAccount", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceServiceAccount), arg0)
}

// CreateWorkspaceServiceAccountRequest mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceServiceAccountRequest(arg0 *managedgrafana.CreateWorkspaceServiceAccountInput) (*request.Request, *managedgrafana.CreateWorkspaceServiceAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceServiceAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.CreateWorkspaceServiceAccountOutput)
	return ret0, ret1
}

// CreateWorkspaceServiceAccountRequest indicates an expected call of CreateWorkspaceServiceAccountRequest
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceServiceAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceServiceAccountRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceServiceAccountRequest), arg0)
}

// CreateWorkspaceServiceAccountToken mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceServiceAccountToken(arg0 *managedgrafana.CreateWorkspaceServiceAccountTokenInput) (*managedgrafana.CreateWorkspaceServiceAccountTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceServiceAccountToken", arg0)
	ret0, _ := ret[0].(*managedgrafana.CreateWorkspaceServiceAccountTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceServiceAccountToken indicates an expected call of CreateWorkspaceServiceAccountToken
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceServiceAccountToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceServiceAccountToken", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceServiceAccountToken), arg0)
}

// CreateWorkspaceServiceAccountTokenRequest mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceServiceAccountTokenRequest(arg0 *managedgrafana.CreateWorkspaceServiceAccountTokenInput) (*request.Request, *managedgrafana.CreateWorkspaceServiceAccountTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceServiceAccountTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.CreateWorkspaceServiceAccountTokenOutput)
	return ret0, ret1
}

// CreateWorkspaceServiceAccountTokenRequest indicates an expected call of CreateWorkspaceServiceAccountTokenRequest
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceServiceAccountTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceServiceAccountTokenRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceServiceAccountTokenRequest), arg0)
}

// CreateWorkspaceServiceAccountTokenWithContext mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceServiceAccountTokenWithContext(arg0 context.Context, arg1 *managedgrafana.CreateWorkspaceServiceAccountTokenInput, arg2 ...request.Option) (*managedgrafana.CreateWorkspaceServiceAccountTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspaceServiceAccountTokenWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.CreateWorkspaceServiceAccountTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceServiceAccountTokenWithContext indicates an expected call of CreateWorkspaceServiceAccountTokenWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceServiceAccountTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceServiceAccountTokenWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceServiceAccountTokenWithContext), varargs...)
}

// CreateWorkspaceServiceAccountWithContext mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceServiceAccountWithContext(arg0 context.Context, arg1 *managedgrafana.CreateWorkspaceServiceAccountInput, arg2 ...request.Option) (*managedgrafana.CreateWorkspaceServiceAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspaceServiceAccountWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.CreateWorkspaceServiceAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceServiceAccountWithContext indicates an expected call of CreateWorkspaceServiceAccountWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceServiceAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceServiceAccountWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceServiceAccountWithContext), varargs...)
}

// CreateWorkspaceWithContext mocks base method
func (m *MockManagedGrafanaAPI) CreateWorkspaceWithContext(arg0 context.Context, arg1 *managedgrafana.CreateWorkspaceInput, arg2 ...request.Option) (*managedgrafana.CreateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.CreateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceWithContext indicates an expected call of CreateWorkspaceWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceWithContext), varargs...)
}

// DeleteWorkspace mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspace(arg0 *managedgrafana.DeleteWorkspaceInput) (*managedgrafana.DeleteWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", arg0)
	ret0, _ := ret[0].(*managedgrafana.DeleteWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspace), arg0)
}

// DeleteWorkspaceApiKey mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceApiKey(arg0 *managedgrafana.DeleteWorkspaceApiKeyInput) (*managedgrafana.DeleteWorkspaceApiKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceApiKey", arg0)
	ret0, _ := ret[0].(*managedgrafana.DeleteWorkspaceApiKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceApiKey indicates an expected call of DeleteWorkspaceApiKey
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceApiKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceApiKey", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceApiKey), arg0)
}

// DeleteWorkspaceApiKeyRequest mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceApiKeyRequest(arg0 *managedgrafana.DeleteWorkspaceApiKeyInput) (*request.Request, *managedgrafana.DeleteWorkspaceApiKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceApiKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DeleteWorkspaceApiKeyOutput)
	return ret0, ret1
}

// DeleteWorkspaceApiKeyRequest indicates an expected call of DeleteWorkspaceApiKeyRequest
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceApiKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceApiKeyRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceApiKeyRequest), arg0)
}

// DeleteWorkspaceApiKeyWithContext mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceApiKeyWithContext(arg0 context.Context, arg1 *managedgrafana.DeleteWorkspaceApiKeyInput, arg2 ...request.Option) (*managedgrafana.DeleteWorkspaceApiKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkspaceApiKeyWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DeleteWorkspaceApiKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceApiKeyWithContext indicates an expected call of DeleteWorkspaceApiKeyWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceApiKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceApiKeyWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceApiKeyWithContext), varargs...)
}

// DeleteWorkspaceRequest mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceRequest(arg0 *managedgrafana.DeleteWorkspaceInput) (*request.Request, *managedgrafana.DeleteWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DeleteWorkspaceOutput)
	return ret0, ret1
}

// DeleteWorkspaceRequest indicates an expected call of DeleteWorkspaceRequest
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceRequest), arg0)
}

// DeleteWorkspaceServiceAccount mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceServiceAccount(arg0 *managedgrafana.DeleteWorkspaceServiceAccountInput) (*managedgrafana.DeleteWorkspaceServiceAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceServiceAccount", arg0)
	ret0, _ := ret[0].(*managedgrafana.DeleteWorkspaceServiceAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceServiceAccount indicates an expected call of DeleteWorkspaceServiceAccount
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceServiceAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceServiceAccount", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceServiceAccount), arg0)
}

// DeleteWorkspaceServiceAccountRequest mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceServiceAccountRequest(arg0 *managedgrafana.DeleteWorkspaceServiceAccountInput) (*request.Request, *managedgrafana.DeleteWorkspaceServiceAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceServiceAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DeleteWorkspaceServiceAccountOutput)
	return ret0, ret1
}

// DeleteWorkspaceServiceAccountRequest indicates an expected call of DeleteWorkspaceServiceAccountRequest
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceServiceAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceServiceAccountRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceServiceAccountRequest), arg0)
}

// DeleteWorkspaceServiceAccountToken mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceServiceAccountToken(arg0 *managedgrafana.DeleteWorkspaceServiceAccountTokenInput) (*managedgrafana.DeleteWorkspaceServiceAccountTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceServiceAccountToken", arg0)
	ret0, _ := ret[0].(*managedgrafana.DeleteWorkspaceServiceAccountTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceServiceAccountToken indicates an expected call of DeleteWorkspaceServiceAccountToken
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceServiceAccountToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceServiceAccountToken", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceServiceAccountToken), arg0)
}

// DeleteWorkspaceServiceAccountTokenRequest mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceServiceAccountTokenRequest(arg0 *managedgrafana.DeleteWorkspaceServiceAccountTokenInput) (*request.Request, *managedgrafana.DeleteWorkspaceServiceAccountTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceServiceAccountTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DeleteWorkspaceServiceAccountTokenOutput)
	return ret0, ret1
}

// DeleteWorkspaceServiceAccountTokenRequest indicates an expected call of DeleteWorkspaceServiceAccountTokenRequest
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceServiceAccountTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceServiceAccountTokenRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceServiceAccountTokenRequest), arg0)
}

// DeleteWorkspaceServiceAccountTokenWithContext mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceServiceAccountTokenWithContext(arg0 context.Context, arg1 *managedgrafana.DeleteWorkspaceServiceAccountTokenInput, arg2 ...request.Option) (*managedgrafana.DeleteWorkspaceServiceAccountTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkspaceServiceAccountTokenWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DeleteWorkspaceServiceAccountTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceServiceAccountTokenWithContext indicates an expected call of DeleteWorkspaceServiceAccountTokenWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceServiceAccountTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceServiceAccountTokenWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceServiceAccountTokenWithContext), varargs...)
}

// DeleteWorkspaceServiceAccountWithContext mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceServiceAccountWithContext(arg0 context.Context, arg1 *managedgrafana.DeleteWorkspaceServiceAccountInput, arg2 ...request.Option) (*managedgrafana.DeleteWorkspaceServiceAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkspaceServiceAccountWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DeleteWorkspaceServiceAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceServiceAccountWithContext indicates an expected call of DeleteWorkspaceServiceAccountWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceServiceAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceServiceAccountWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceServiceAccountWithContext), varargs...)
}

// DeleteWorkspaceWithContext mocks base method
func (m *MockManagedGrafanaAPI) DeleteWorkspaceWithContext(arg0 context.Context, arg1 *managedgrafana.DeleteWorkspaceInput, arg2 ...request.Option) (*managedgrafana.DeleteWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DeleteWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceWithContext indicates an expected call of DeleteWorkspaceWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceWithContext), varargs...)
}

// DescribeWorkspace mocks base method
func (m *MockManagedGrafanaAPI) DescribeWorkspace(arg0 *managedgrafana.DescribeWorkspaceInput) (*managedgrafana.DescribeWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspace", arg0)
	ret0, _ := ret[0].(*managedgrafana.DescribeWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspace indicates an expected call of DescribeWorkspace
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspace", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspace), arg0)
}

// DescribeWorkspaceAuthentication mocks base method
func (m *MockManagedGrafanaAPI) DescribeWorkspaceAuthentication(arg0 *managedgrafana.DescribeWorkspaceAuthenticationInput) (*managedgrafana.DescribeWorkspaceAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceAuthentication", arg0)
	ret0, _ := ret[0].(*managedgrafana.DescribeWorkspaceAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceAuthentication indicates an expected call of DescribeWorkspaceAuthentication
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceAuthentication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceAuthentication", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceAuthentication), arg0)
}

// DescribeWorkspaceAuthenticationRequest mocks base method
func (m *MockManagedGrafanaAPI) DescribeWorkspaceAuthenticationRequest(arg0 *managedgrafana.DescribeWorkspaceAuthenticationInput) (*request.Request, *managedgrafana.DescribeWorkspaceAuthenticationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceAuthenticationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DescribeWorkspaceAuthenticationOutput)
	return ret0, ret1
}

// DescribeWorkspaceAuthenticationRequest indicates an expected call of DescribeWorkspaceAuthenticationRequest
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceAuthenticationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceAuthenticationRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceAuthenticationRequest), arg0)
}

// DescribeWorkspaceAuthenticationWithContext mocks base method
func (m *MockManagedGrafanaAPI) DescribeWorkspaceAuthenticationWithContext(arg0 context.Context, arg1 *managedgrafana.DescribeWorkspaceAuthenticationInput, arg2 ...request.Option) (*managedgrafana.DescribeWorkspaceAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceAuthenticationWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DescribeWorkspaceAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceAuthenticationWithContext indicates an expected call of DescribeWorkspaceAuthenticationWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceAuthenticationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceAuthenticationWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceAuthenticationWithContext), varargs...)
}

// DescribeWorkspaceConfiguration mocks base method
func (m *MockManagedGrafanaAPI) DescribeWorkspaceConfiguration(arg0 *managedgrafana.DescribeWorkspaceConfigurationInput) (*managedgrafana.DescribeWorkspaceConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceConfiguration", arg0)
	ret0, _ := ret[0].(*managedgrafana.DescribeWorkspaceConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceConfiguration indicates an expected call of DescribeWorkspaceConfiguration
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceConfiguration", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceConfiguration), arg0)
}

// DescribeWorkspaceConfigurationRequest mocks base method
func (m *MockManagedGrafanaAPI) DescribeWorkspaceConfigurationRequest(arg0 *managedgrafana.DescribeWorkspaceConfigurationInput) (*request.Request, *managedgrafana.DescribeWorkspaceConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DescribeWorkspaceConfigurationOutput)
	return ret0, ret1
}

// DescribeWorkspaceConfigurationRequest indicates an expected call of DescribeWorkspaceConfigurationRequest
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceConfigurationRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceConfigurationRequest), arg0)
}

// DescribeWorkspaceConfigurationWithContext mocks base method
func (m *MockManagedGrafanaAPI) DescribeWorkspaceConfigurationWithContext(arg0 context.Context, arg1 *managedgrafana.DescribeWorkspaceConfigurationInput, arg2 ...request.Option) (*managedgrafana.DescribeWorkspaceConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DescribeWorkspaceConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceConfigurationWithContext indicates an expected call of DescribeWorkspaceConfigurationWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceConfigurationWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceConfigurationWithContext), varargs...)
}

// DescribeWorkspaceRequest mocks base method
func (m *MockManagedGrafanaAPI) DescribeWorkspaceRequest(arg0 *managedgrafana.DescribeWorkspaceInput) (*request.Request, *managedgrafana.DescribeWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DescribeWorkspaceOutput)
	return ret0, ret1
}

// DescribeWorkspaceRequest indicates an expected call of DescribeWorkspaceRequest
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceRequest), arg0)
}

// DescribeWorkspaceWithContext mocks base method
func (m *MockManagedGrafanaAPI) DescribeWorkspaceWithContext(arg0 context.Context, arg1 *managedgrafana.DescribeWorkspaceInput, arg2 ...request.Option) (*managedgrafana.DescribeWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DescribeWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceWithContext indicates an expected call of DescribeWorkspaceWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceWithContext), varargs...)
}

// DisassociateLicense mocks base method
func (m *MockManagedGrafanaAPI) DisassociateLicense(arg0 *managedgrafana.DisassociateLicenseInput) (*managedgrafana.DisassociateLicenseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLicense", arg0)
	ret0, _ := ret[0].(*managedgrafana.DisassociateLicenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLicense indicates an expected call of DisassociateLicense
func (mr *MockManagedGrafanaAPIMockRecorder) DisassociateLicense(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLicense", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DisassociateLicense), arg0)
}

// DisassociateLicenseRequest mocks base method
func (m *MockManagedGrafanaAPI) DisassociateLicenseRequest(arg0 *managedgrafana.DisassociateLicenseInput) (*request.Request, *managedgrafana.DisassociateLicenseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLicenseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DisassociateLicenseOutput)
	return ret0, ret1
}

// DisassociateLicenseRequest indicates an expected call of DisassociateLicenseRequest
func (mr *MockManagedGrafanaAPIMockRecorder) DisassociateLicenseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLicenseRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DisassociateLicenseRequest), arg0)
}

// DisassociateLicenseWithContext mocks base method
func (m *MockManagedGrafanaAPI) DisassociateLicenseWithContext(arg0 context.Context, arg1 *managedgrafana.DisassociateLicenseInput, arg2 ...request.Option) (*managedgrafana.DisassociateLicenseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateLicenseWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DisassociateLicenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLicenseWithContext indicates an expected call of DisassociateLicenseWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) DisassociateLicenseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLicenseWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DisassociateLicenseWithContext), varargs...)
}

// ListPermissions mocks base method
func (m *MockManagedGrafanaAPI) ListPermissions(arg0 *managedgrafana.ListPermissionsInput) (*managedgrafana.ListPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", arg0)
	ret0, _ := ret[0].(*managedgrafana.ListPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions
func (mr *MockManagedGrafanaAPIMockRecorder) ListPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListPermissions), arg0)
}

// ListPermissionsPages mocks base method
func (m *MockManagedGrafanaAPI) ListPermissionsPages(arg0 *managedgrafana.ListPermissionsInput, arg1 func(*managedgrafana.ListPermissionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionsPages indicates an expected call of ListPermissionsPages
func (mr *MockManagedGrafanaAPIMockRecorder) ListPermissionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsPages", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListPermissionsPages), arg0, arg1)
}

// ListPermissionsPagesWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListPermissionsPagesWithContext(arg0 context.Context, arg1 *managedgrafana.ListPermissionsInput, arg2 func(*managedgrafana.ListPermissionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionsPagesWithContext indicates an expected call of ListPermissionsPagesWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListPermissionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsPagesWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListPermissionsPagesWithContext), varargs...)
}

// ListPermissionsRequest mocks base method
func (m *MockManagedGrafanaAPI) ListPermissionsRequest(arg0 *managedgrafana.ListPermissionsInput) (*request.Request, *managedgrafana.ListPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.ListPermissionsOutput)
	return ret0, ret1
}

// ListPermissionsRequest indicates an expected call of ListPermissionsRequest
func (mr *MockManagedGrafanaAPIMockRecorder) ListPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListPermissionsRequest), arg0)
}

// ListPermissionsWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListPermissionsWithContext(arg0 context.Context, arg1 *managedgrafana.ListPermissionsInput, arg2 ...request.Option) (*managedgrafana.ListPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.ListPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionsWithContext indicates an expected call of ListPermissionsWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListPermissionsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockManagedGrafanaAPI) ListTagsForResource(arg0 *managedgrafana.ListTagsForResourceInput) (*managedgrafana.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*managedgrafana.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockManagedGrafanaAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockManagedGrafanaAPI) ListTagsForResourceRequest(arg0 *managedgrafana.ListTagsForResourceInput) (*request.Request, *managedgrafana.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockManagedGrafanaAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *managedgrafana.ListTagsForResourceInput, arg2 ...request.Option) (*managedgrafana.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListVersions mocks base method
func (m *MockManagedGrafanaAPI) ListVersions(arg0 *managedgrafana.ListVersionsInput) (*managedgrafana.ListVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersions", arg0)
	ret0, _ := ret[0].(*managedgrafana.ListVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersions indicates an expected call of ListVersions
func (mr *MockManagedGrafanaAPIMockRecorder) ListVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListVersions), arg0)
}

// ListVersionsPages mocks base method
func (m *MockManagedGrafanaAPI) ListVersionsPages(arg0 *managedgrafana.ListVersionsInput, arg1 func(*managedgrafana.ListVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVersionsPages indicates an expected call of ListVersionsPages
func (mr *MockManagedGrafanaAPIMockRecorder) ListVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsPages", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListVersionsPages), arg0, arg1)
}

// ListVersionsPagesWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListVersionsPagesWithContext(arg0 context.Context, arg1 *managedgrafana.ListVersionsInput, arg2 func(*managedgrafana.ListVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVersionsPagesWithContext indicates an expected call of ListVersionsPagesWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsPagesWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListVersionsPagesWithContext), varargs...)
}

// ListVersionsRequest mocks base method
func (m *MockManagedGrafanaAPI) ListVersionsRequest(arg0 *managedgrafana.ListVersionsInput) (*request.Request, *managedgrafana.ListVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.ListVersionsOutput)
	return ret0, ret1
}

// ListVersionsRequest indicates an expected call of ListVersionsRequest
func (mr *MockManagedGrafanaAPIMockRecorder) ListVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListVersionsRequest), arg0)
}

// ListVersionsWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListVersionsWithContext(arg0 context.Context, arg1 *managedgrafana.ListVersionsInput, arg2 ...request.Option) (*managedgrafana.ListVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.ListVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersionsWithContext indicates an expected call of ListVersionsWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListVersionsWithContext), varargs...)
}

// ListWorkspaceServiceAccountTokens mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaceServiceAccountTokens(arg0 *managedgrafana.ListWorkspaceServiceAccountTokensInput) (*managedgrafana.ListWorkspaceServiceAccountTokensOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceServiceAccountTokens", arg0)
	ret0, _ := ret[0].(*managedgrafana.ListWorkspaceServiceAccountTokensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceServiceAccountTokens indicates an expected call of ListWorkspaceServiceAccountTokens
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaceServiceAccountTokens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceServiceAccountTokens", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaceServiceAccountTokens), arg0)
}

// ListWorkspaceServiceAccountTokensPages mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaceServiceAccountTokensPages(arg0 *managedgrafana.ListWorkspaceServiceAccountTokensInput, arg1 func(*managedgrafana.ListWorkspaceServiceAccountTokensOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceServiceAccountTokensPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspaceServiceAccountTokensPages indicates an expected call of ListWorkspaceServiceAccountTokensPages
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaceServiceAccountTokensPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceServiceAccountTokensPages", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaceServiceAccountTokensPages), arg0, arg1)
}

// ListWorkspaceServiceAccountTokensPagesWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaceServiceAccountTokensPagesWithContext(arg0 context.Context, arg1 *managedgrafana.ListWorkspaceServiceAccountTokensInput, arg2 func(*managedgrafana.ListWorkspaceServiceAccountTokensOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspaceServiceAccountTokensPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspaceServiceAccountTokensPagesWithContext indicates an expected call of ListWorkspaceServiceAccountTokensPagesWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaceServiceAccountTokensPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceServiceAccountTokensPagesWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaceServiceAccountTokensPagesWithContext), varargs...)
}

// ListWorkspaceServiceAccountTokensRequest mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaceServiceAccountTokensRequest(arg0 *managedgrafana.ListWorkspaceServiceAccountTokensInput) (*request.Request, *managedgrafana.ListWorkspaceServiceAccountTokensOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceServiceAccountTokensRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.ListWorkspaceServiceAccountTokensOutput)
	return ret0, ret1
}

// ListWorkspaceServiceAccountTokensRequest indicates an expected call of ListWorkspaceServiceAccountTokensRequest
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaceServiceAccountTokensRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceServiceAccountTokensRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaceServiceAccountTokensRequest), arg0)
}

// ListWorkspaceServiceAccountTokensWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaceServiceAccountTokensWithContext(arg0 context.Context, arg1 *managedgrafana.ListWorkspaceServiceAccountTokensInput, arg2 ...request.Option) (*managedgrafana.ListWorkspaceServiceAccountTokensOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspaceServiceAccountTokensWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.ListWorkspaceServiceAccountTokensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceServiceAccountTokensWithContext indicates an expected call of ListWorkspaceServiceAccountTokensWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaceServiceAccountTokensWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceServiceAccountTokensWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaceServiceAccountTokensWithContext), varargs...)
}

// ListWorkspaceServiceAccounts mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaceServiceAccounts(arg0 *managedgrafana.ListWorkspaceServiceAccountsInput) (*managedgrafana.ListWorkspaceServiceAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceServiceAccounts", arg0)
	ret0, _ := ret[0].(*managedgrafana.ListWorkspaceServiceAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceServiceAccounts indicates an expected call of ListWorkspaceServiceAccounts
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaceServiceAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceServiceAccounts", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaceServiceAccounts), arg0)
}

// ListWorkspaceServiceAccountsPages mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaceServiceAccountsPages(arg0 *managedgrafana.ListWorkspaceServiceAccountsInput, arg1 func(*managedgrafana.ListWorkspaceServiceAccountsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceServiceAccountsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspaceServiceAccountsPages indicates an expected call of ListWorkspaceServiceAccountsPages
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaceServiceAccountsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceServiceAccountsPages", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaceServiceAccountsPages), arg0, arg1)
}

// ListWorkspaceServiceAccountsPagesWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaceServiceAccountsPagesWithContext(arg0 context.Context, arg1 *managedgrafana.ListWorkspaceServiceAccountsInput, arg2 func(*managedgrafana.ListWorkspaceServiceAccountsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspaceServiceAccountsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspaceServiceAccountsPagesWithContext indicates an expected call of ListWorkspaceServiceAccountsPagesWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaceServiceAccountsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceServiceAccountsPagesWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaceServiceAccountsPagesWithContext), varargs...)
}

// ListWorkspaceServiceAccountsRequest mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaceServiceAccountsRequest(arg0 *managedgrafana.ListWorkspaceServiceAccountsInput) (*request.Request, *managedgrafana.ListWorkspaceServiceAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceServiceAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.ListWorkspaceServiceAccountsOutput)
	return ret0, ret1
}

// ListWorkspaceServiceAccountsRequest indicates an expected call of ListWorkspaceServiceAccountsRequest
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaceServiceAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceServiceAccountsRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaceServiceAccountsRequest), arg0)
}

// ListWorkspaceServiceAccountsWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaceServiceAccountsWithContext(arg0 context.Context, arg1 *managedgrafana.ListWorkspaceServiceAccountsInput, arg2 ...request.Option) (*managedgrafana.ListWorkspaceServiceAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspaceServiceAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.ListWorkspaceServiceAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceServiceAccountsWithContext indicates an expected call of ListWorkspaceServiceAccountsWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaceServiceAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceServiceAccountsWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaceServiceAccountsWithContext), varargs...)
}

// ListWorkspaces mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspaces(arg0 *managedgrafana.ListWorkspacesInput) (*managedgrafana.ListWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaces", arg0)
	ret0, _ := ret[0].(*managedgrafana.ListWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaces indicates an expected call of ListWorkspaces
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaces", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaces), arg0)
}

// ListWorkspacesPages mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspacesPages(arg0 *managedgrafana.ListWorkspacesInput, arg1 func(*managedgrafana.ListWorkspacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspacesPages indicates an expected call of ListWorkspacesPages
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesPages", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspacesPages), arg0, arg1)
}

// ListWorkspacesPagesWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspacesPagesWithContext(arg0 context.Context, arg1 *managedgrafana.ListWorkspacesInput, arg2 func(*managedgrafana.ListWorkspacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspacesPagesWithContext indicates an expected call of ListWorkspacesPagesWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesPagesWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspacesPagesWithContext), varargs...)
}

// ListWorkspacesRequest mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspacesRequest(arg0 *managedgrafana.ListWorkspacesInput) (*request.Request, *managedgrafana.ListWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.ListWorkspacesOutput)
	return ret0, ret1
}

// ListWorkspacesRequest indicates an expected call of ListWorkspacesRequest
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspacesRequest), arg0)
}

// ListWorkspacesWithContext mocks base method
func (m *MockManagedGrafanaAPI) ListWorkspacesWithContext(arg0 context.Context, arg1 *managedgrafana.ListWorkspacesInput, arg2 ...request.Option) (*managedgrafana.ListWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.ListWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspacesWithContext indicates an expected call of ListWorkspacesWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspacesWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockManagedGrafanaAPI) TagResource(arg0 *managedgrafana.TagResourceInput) (*managedgrafana.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*managedgrafana.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockManagedGrafanaAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockManagedGrafanaAPI) TagResourceRequest(arg0 *managedgrafana.TagResourceInput) (*request.Request, *managedgrafana.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockManagedGrafanaAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockManagedGrafanaAPI) TagResourceWithContext(arg0 context.Context, arg1 *managedgrafana.TagResourceInput, arg2 ...request.Option) (*managedgrafana.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockManagedGrafanaAPI) UntagResource(arg0 *managedgrafana.UntagResourceInput) (*managedgrafana.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*managedgrafana.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockManagedGrafanaAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockManagedGrafanaAPI) UntagResourceRequest(arg0 *managedgrafana.UntagResourceInput) (*request.Request, *managedgrafana.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockManagedGrafanaAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockManagedGrafanaAPI) UntagResourceWithContext(arg0 context.Context, arg1 *managedgrafana.UntagResourceInput, arg2 ...request.Option) (*managedgrafana.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdatePermissions mocks base method
func (m *MockManagedGrafanaAPI) UpdatePermissions(arg0 *managedgrafana.UpdatePermissionsInput) (*managedgrafana.UpdatePermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissions", arg0)
	ret0, _ := ret[0].(*managedgrafana.UpdatePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissions indicates an expected call of UpdatePermissions
func (mr *MockManagedGrafanaAPIMockRecorder) UpdatePermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissions", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdatePermissions), arg0)
}

// UpdatePermissionsRequest mocks base method
func (m *MockManagedGrafanaAPI) UpdatePermissionsRequest(arg0 *managedgrafana.UpdatePermissionsInput) (*request.Request, *managedgrafana.UpdatePermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.UpdatePermissionsOutput)
	return ret0, ret1
}

// UpdatePermissionsRequest indicates an expected call of UpdatePermissionsRequest
func (mr *MockManagedGrafanaAPIMockRecorder) UpdatePermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionsRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdatePermissionsRequest), arg0)
}

// UpdatePermissionsWithContext mocks base method
func (m *MockManagedGrafanaAPI) UpdatePermissionsWithContext(arg0 context.Context, arg1 *managedgrafana.UpdatePermissionsInput, arg2 ...request.Option) (*managedgrafana.UpdatePermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.UpdatePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissionsWithContext indicates an expected call of UpdatePermissionsWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) UpdatePermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionsWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdatePermissionsWithContext), varargs...)
}

// UpdateWorkspace mocks base method
func (m *MockManagedGrafanaAPI) UpdateWorkspace(arg0 *managedgrafana.UpdateWorkspaceInput) (*managedgrafana.UpdateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspace", arg0)
	ret0, _ := ret[0].(*managedgrafana.UpdateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspace indicates an expected call of UpdateWorkspace
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspace", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspace), arg0)
}

// UpdateWorkspaceAuthentication mocks base method
func (m *MockManagedGrafanaAPI) UpdateWorkspaceAuthentication(arg0 *managedgrafana.UpdateWorkspaceAuthenticationInput) (*managedgrafana.UpdateWorkspaceAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceAuthentication", arg0)
	ret0, _ := ret[0].(*managedgrafana.UpdateWorkspaceAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceAuthentication indicates an expected call of UpdateWorkspaceAuthentication
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceAuthentication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceAuthentication", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceAuthentication), arg0)
}

// UpdateWorkspaceAuthenticationRequest mocks base method
func (m *MockManagedGrafanaAPI) UpdateWorkspaceAuthenticationRequest(arg0 *managedgrafana.UpdateWorkspaceAuthenticationInput) (*request.Request, *managedgrafana.UpdateWorkspaceAuthenticationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceAuthenticationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.UpdateWorkspaceAuthenticationOutput)
	return ret0, ret1
}

// UpdateWorkspaceAuthenticationRequest indicates an expected call of UpdateWorkspaceAuthenticationRequest
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceAuthenticationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceAuthenticationRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceAuthenticationRequest), arg0)
}

// UpdateWorkspaceAuthenticationWithContext mocks base method
func (m *MockManagedGrafanaAPI) UpdateWorkspaceAuthenticationWithContext(arg0 context.Context, arg1 *managedgrafana.UpdateWorkspaceAuthenticationInput, arg2 ...request.Option) (*managedgrafana.UpdateWorkspaceAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkspaceAuthenticationWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.UpdateWorkspaceAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceAuthenticationWithContext indicates an expected call of UpdateWorkspaceAuthenticationWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceAuthenticationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceAuthenticationWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceAuthenticationWithContext), varargs...)
}

// UpdateWorkspaceConfiguration mocks base method
func (m *MockManagedGrafanaAPI) UpdateWorkspaceConfiguration(arg0 *managedgrafana.UpdateWorkspaceConfigurationInput) (*managedgrafana.UpdateWorkspaceConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceConfiguration", arg0)
	ret0, _ := ret[0].(*managedgrafana.UpdateWorkspaceConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceConfiguration indicates an expected call of UpdateWorkspaceConfiguration
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceConfiguration", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceConfiguration), arg0)
}

// UpdateWorkspaceConfigurationRequest mocks base method
func (m *MockManagedGrafanaAPI) UpdateWorkspaceConfigurationRequest(arg0 *managedgrafana.UpdateWorkspaceConfigurationInput) (*request.Request, *managedgrafana.UpdateWorkspaceConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.UpdateWorkspaceConfigurationOutput)
	return ret0, ret1
}

// UpdateWorkspaceConfigurationRequest indicates an expected call of UpdateWorkspaceConfigurationRequest
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceConfigurationRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceConfigurationRequest), arg0)
}

// UpdateWorkspaceConfigurationWithContext mocks base method
func (m *MockManagedGrafanaAPI) UpdateWorkspaceConfigurationWithContext(arg0 context.Context, arg1 *managedgrafana.UpdateWorkspaceConfigurationInput, arg2 ...request.Option) (*managedgrafana.UpdateWorkspaceConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkspaceConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.UpdateWorkspaceConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceConfigurationWithContext indicates an expected call of UpdateWorkspaceConfigurationWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceConfigurationWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceConfigurationWithContext), varargs...)
}

// UpdateWorkspaceRequest mocks base method
func (m *MockManagedGrafanaAPI) UpdateWorkspaceRequest(arg0 *managedgrafana.UpdateWorkspaceInput) (*request.Request, *managedgrafana.UpdateWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.UpdateWorkspaceOutput)
	return ret0, ret1
}

// UpdateWorkspaceRequest indicates an expected call of UpdateWorkspaceRequest
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceRequest), arg0)
}

// UpdateWorkspaceWithContext mocks base method
func (m *MockManagedGrafanaAPI) UpdateWorkspaceWithContext(arg0 context.Context, arg1 *managedgrafana.UpdateWorkspaceInput, arg2 ...request.Option) (*managedgrafana.UpdateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.UpdateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceWithContext indicates an expected call of UpdateWorkspaceWithContext
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceWithContext), varargs...)
}
