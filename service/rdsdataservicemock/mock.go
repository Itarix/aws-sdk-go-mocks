// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/rdsdataservice/rdsdataserviceiface (interfaces: RDSDataServiceAPI)

// Package rdsdataservicemock is a generated GoMock package.
package rdsdataservicemock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	rdsdataservice "github.com/aws/aws-sdk-go/service/rdsdataservice"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRDSDataServiceAPI is a mock of RDSDataServiceAPI interface
type MockRDSDataServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRDSDataServiceAPIMockRecorder
}

// MockRDSDataServiceAPIMockRecorder is the mock recorder for MockRDSDataServiceAPI
type MockRDSDataServiceAPIMockRecorder struct {
	mock *MockRDSDataServiceAPI
}

// NewMockRDSDataServiceAPI creates a new mock instance
func NewMockRDSDataServiceAPI(ctrl *gomock.Controller) *MockRDSDataServiceAPI {
	mock := &MockRDSDataServiceAPI{ctrl: ctrl}
	mock.recorder = &MockRDSDataServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRDSDataServiceAPI) EXPECT() *MockRDSDataServiceAPIMockRecorder {
	return m.recorder
}

// ExecuteSql mocks base method
func (m *MockRDSDataServiceAPI) ExecuteSql(arg0 *rdsdataservice.ExecuteSqlInput) (*rdsdataservice.ExecuteSqlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSql", arg0)
	ret0, _ := ret[0].(*rdsdataservice.ExecuteSqlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteSql indicates an expected call of ExecuteSql
func (mr *MockRDSDataServiceAPIMockRecorder) ExecuteSql(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSql", reflect.TypeOf((*MockRDSDataServiceAPI)(nil).ExecuteSql), arg0)
}

// ExecuteSqlRequest mocks base method
func (m *MockRDSDataServiceAPI) ExecuteSqlRequest(arg0 *rdsdataservice.ExecuteSqlInput) (*request.Request, *rdsdataservice.ExecuteSqlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSqlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rdsdataservice.ExecuteSqlOutput)
	return ret0, ret1
}

// ExecuteSqlRequest indicates an expected call of ExecuteSqlRequest
func (mr *MockRDSDataServiceAPIMockRecorder) ExecuteSqlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSqlRequest", reflect.TypeOf((*MockRDSDataServiceAPI)(nil).ExecuteSqlRequest), arg0)
}

// ExecuteSqlWithContext mocks base method
func (m *MockRDSDataServiceAPI) ExecuteSqlWithContext(arg0 aws.Context, arg1 *rdsdataservice.ExecuteSqlInput, arg2 ...request.Option) (*rdsdataservice.ExecuteSqlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteSqlWithContext", varargs...)
	ret0, _ := ret[0].(*rdsdataservice.ExecuteSqlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteSqlWithContext indicates an expected call of ExecuteSqlWithContext
func (mr *MockRDSDataServiceAPIMockRecorder) ExecuteSqlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSqlWithContext", reflect.TypeOf((*MockRDSDataServiceAPI)(nil).ExecuteSqlWithContext), varargs...)
}
