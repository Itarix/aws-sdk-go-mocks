// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/cloudwatchrum/cloudwatchrumiface (interfaces: CloudWatchRUMAPI)

// Package cloudwatchrummock is a generated GoMock package.
package cloudwatchrummock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	cloudwatchrum "github.com/aws/aws-sdk-go/service/cloudwatchrum"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCloudWatchRUMAPI is a mock of CloudWatchRUMAPI interface
type MockCloudWatchRUMAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudWatchRUMAPIMockRecorder
}

// MockCloudWatchRUMAPIMockRecorder is the mock recorder for MockCloudWatchRUMAPI
type MockCloudWatchRUMAPIMockRecorder struct {
	mock *MockCloudWatchRUMAPI
}

// NewMockCloudWatchRUMAPI creates a new mock instance
func NewMockCloudWatchRUMAPI(ctrl *gomock.Controller) *MockCloudWatchRUMAPI {
	mock := &MockCloudWatchRUMAPI{ctrl: ctrl}
	mock.recorder = &MockCloudWatchRUMAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudWatchRUMAPI) EXPECT() *MockCloudWatchRUMAPIMockRecorder {
	return m.recorder
}

// BatchCreateRumMetricDefinitions mocks base method
func (m *MockCloudWatchRUMAPI) BatchCreateRumMetricDefinitions(arg0 *cloudwatchrum.BatchCreateRumMetricDefinitionsInput) (*cloudwatchrum.BatchCreateRumMetricDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateRumMetricDefinitions", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.BatchCreateRumMetricDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateRumMetricDefinitions indicates an expected call of BatchCreateRumMetricDefinitions
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchCreateRumMetricDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateRumMetricDefinitions", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchCreateRumMetricDefinitions), arg0)
}

// BatchCreateRumMetricDefinitionsRequest mocks base method
func (m *MockCloudWatchRUMAPI) BatchCreateRumMetricDefinitionsRequest(arg0 *cloudwatchrum.BatchCreateRumMetricDefinitionsInput) (*request.Request, *cloudwatchrum.BatchCreateRumMetricDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateRumMetricDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.BatchCreateRumMetricDefinitionsOutput)
	return ret0, ret1
}

// BatchCreateRumMetricDefinitionsRequest indicates an expected call of BatchCreateRumMetricDefinitionsRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchCreateRumMetricDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateRumMetricDefinitionsRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchCreateRumMetricDefinitionsRequest), arg0)
}

// BatchCreateRumMetricDefinitionsWithContext mocks base method
func (m *MockCloudWatchRUMAPI) BatchCreateRumMetricDefinitionsWithContext(arg0 context.Context, arg1 *cloudwatchrum.BatchCreateRumMetricDefinitionsInput, arg2 ...request.Option) (*cloudwatchrum.BatchCreateRumMetricDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateRumMetricDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.BatchCreateRumMetricDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateRumMetricDefinitionsWithContext indicates an expected call of BatchCreateRumMetricDefinitionsWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchCreateRumMetricDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateRumMetricDefinitionsWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchCreateRumMetricDefinitionsWithContext), varargs...)
}

// BatchDeleteRumMetricDefinitions mocks base method
func (m *MockCloudWatchRUMAPI) BatchDeleteRumMetricDefinitions(arg0 *cloudwatchrum.BatchDeleteRumMetricDefinitionsInput) (*cloudwatchrum.BatchDeleteRumMetricDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteRumMetricDefinitions", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.BatchDeleteRumMetricDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteRumMetricDefinitions indicates an expected call of BatchDeleteRumMetricDefinitions
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchDeleteRumMetricDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteRumMetricDefinitions", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchDeleteRumMetricDefinitions), arg0)
}

// BatchDeleteRumMetricDefinitionsRequest mocks base method
func (m *MockCloudWatchRUMAPI) BatchDeleteRumMetricDefinitionsRequest(arg0 *cloudwatchrum.BatchDeleteRumMetricDefinitionsInput) (*request.Request, *cloudwatchrum.BatchDeleteRumMetricDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteRumMetricDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.BatchDeleteRumMetricDefinitionsOutput)
	return ret0, ret1
}

// BatchDeleteRumMetricDefinitionsRequest indicates an expected call of BatchDeleteRumMetricDefinitionsRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchDeleteRumMetricDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteRumMetricDefinitionsRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchDeleteRumMetricDefinitionsRequest), arg0)
}

// BatchDeleteRumMetricDefinitionsWithContext mocks base method
func (m *MockCloudWatchRUMAPI) BatchDeleteRumMetricDefinitionsWithContext(arg0 context.Context, arg1 *cloudwatchrum.BatchDeleteRumMetricDefinitionsInput, arg2 ...request.Option) (*cloudwatchrum.BatchDeleteRumMetricDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteRumMetricDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.BatchDeleteRumMetricDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteRumMetricDefinitionsWithContext indicates an expected call of BatchDeleteRumMetricDefinitionsWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchDeleteRumMetricDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteRumMetricDefinitionsWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchDeleteRumMetricDefinitionsWithContext), varargs...)
}

// BatchGetRumMetricDefinitions mocks base method
func (m *MockCloudWatchRUMAPI) BatchGetRumMetricDefinitions(arg0 *cloudwatchrum.BatchGetRumMetricDefinitionsInput) (*cloudwatchrum.BatchGetRumMetricDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetRumMetricDefinitions", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.BatchGetRumMetricDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRumMetricDefinitions indicates an expected call of BatchGetRumMetricDefinitions
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchGetRumMetricDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRumMetricDefinitions", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchGetRumMetricDefinitions), arg0)
}

// BatchGetRumMetricDefinitionsPages mocks base method
func (m *MockCloudWatchRUMAPI) BatchGetRumMetricDefinitionsPages(arg0 *cloudwatchrum.BatchGetRumMetricDefinitionsInput, arg1 func(*cloudwatchrum.BatchGetRumMetricDefinitionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetRumMetricDefinitionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchGetRumMetricDefinitionsPages indicates an expected call of BatchGetRumMetricDefinitionsPages
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchGetRumMetricDefinitionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRumMetricDefinitionsPages", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchGetRumMetricDefinitionsPages), arg0, arg1)
}

// BatchGetRumMetricDefinitionsPagesWithContext mocks base method
func (m *MockCloudWatchRUMAPI) BatchGetRumMetricDefinitionsPagesWithContext(arg0 context.Context, arg1 *cloudwatchrum.BatchGetRumMetricDefinitionsInput, arg2 func(*cloudwatchrum.BatchGetRumMetricDefinitionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetRumMetricDefinitionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchGetRumMetricDefinitionsPagesWithContext indicates an expected call of BatchGetRumMetricDefinitionsPagesWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchGetRumMetricDefinitionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRumMetricDefinitionsPagesWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchGetRumMetricDefinitionsPagesWithContext), varargs...)
}

// BatchGetRumMetricDefinitionsRequest mocks base method
func (m *MockCloudWatchRUMAPI) BatchGetRumMetricDefinitionsRequest(arg0 *cloudwatchrum.BatchGetRumMetricDefinitionsInput) (*request.Request, *cloudwatchrum.BatchGetRumMetricDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetRumMetricDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.BatchGetRumMetricDefinitionsOutput)
	return ret0, ret1
}

// BatchGetRumMetricDefinitionsRequest indicates an expected call of BatchGetRumMetricDefinitionsRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchGetRumMetricDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRumMetricDefinitionsRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchGetRumMetricDefinitionsRequest), arg0)
}

// BatchGetRumMetricDefinitionsWithContext mocks base method
func (m *MockCloudWatchRUMAPI) BatchGetRumMetricDefinitionsWithContext(arg0 context.Context, arg1 *cloudwatchrum.BatchGetRumMetricDefinitionsInput, arg2 ...request.Option) (*cloudwatchrum.BatchGetRumMetricDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetRumMetricDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.BatchGetRumMetricDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRumMetricDefinitionsWithContext indicates an expected call of BatchGetRumMetricDefinitionsWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) BatchGetRumMetricDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRumMetricDefinitionsWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).BatchGetRumMetricDefinitionsWithContext), varargs...)
}

// CreateAppMonitor mocks base method
func (m *MockCloudWatchRUMAPI) CreateAppMonitor(arg0 *cloudwatchrum.CreateAppMonitorInput) (*cloudwatchrum.CreateAppMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppMonitor", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.CreateAppMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppMonitor indicates an expected call of CreateAppMonitor
func (mr *MockCloudWatchRUMAPIMockRecorder) CreateAppMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppMonitor", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).CreateAppMonitor), arg0)
}

// CreateAppMonitorRequest mocks base method
func (m *MockCloudWatchRUMAPI) CreateAppMonitorRequest(arg0 *cloudwatchrum.CreateAppMonitorInput) (*request.Request, *cloudwatchrum.CreateAppMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.CreateAppMonitorOutput)
	return ret0, ret1
}

// CreateAppMonitorRequest indicates an expected call of CreateAppMonitorRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) CreateAppMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppMonitorRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).CreateAppMonitorRequest), arg0)
}

// CreateAppMonitorWithContext mocks base method
func (m *MockCloudWatchRUMAPI) CreateAppMonitorWithContext(arg0 context.Context, arg1 *cloudwatchrum.CreateAppMonitorInput, arg2 ...request.Option) (*cloudwatchrum.CreateAppMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.CreateAppMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppMonitorWithContext indicates an expected call of CreateAppMonitorWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) CreateAppMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppMonitorWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).CreateAppMonitorWithContext), varargs...)
}

// DeleteAppMonitor mocks base method
func (m *MockCloudWatchRUMAPI) DeleteAppMonitor(arg0 *cloudwatchrum.DeleteAppMonitorInput) (*cloudwatchrum.DeleteAppMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppMonitor", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.DeleteAppMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppMonitor indicates an expected call of DeleteAppMonitor
func (mr *MockCloudWatchRUMAPIMockRecorder) DeleteAppMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppMonitor", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).DeleteAppMonitor), arg0)
}

// DeleteAppMonitorRequest mocks base method
func (m *MockCloudWatchRUMAPI) DeleteAppMonitorRequest(arg0 *cloudwatchrum.DeleteAppMonitorInput) (*request.Request, *cloudwatchrum.DeleteAppMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.DeleteAppMonitorOutput)
	return ret0, ret1
}

// DeleteAppMonitorRequest indicates an expected call of DeleteAppMonitorRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) DeleteAppMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppMonitorRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).DeleteAppMonitorRequest), arg0)
}

// DeleteAppMonitorWithContext mocks base method
func (m *MockCloudWatchRUMAPI) DeleteAppMonitorWithContext(arg0 context.Context, arg1 *cloudwatchrum.DeleteAppMonitorInput, arg2 ...request.Option) (*cloudwatchrum.DeleteAppMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.DeleteAppMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppMonitorWithContext indicates an expected call of DeleteAppMonitorWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) DeleteAppMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppMonitorWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).DeleteAppMonitorWithContext), varargs...)
}

// DeleteRumMetricsDestination mocks base method
func (m *MockCloudWatchRUMAPI) DeleteRumMetricsDestination(arg0 *cloudwatchrum.DeleteRumMetricsDestinationInput) (*cloudwatchrum.DeleteRumMetricsDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRumMetricsDestination", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.DeleteRumMetricsDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRumMetricsDestination indicates an expected call of DeleteRumMetricsDestination
func (mr *MockCloudWatchRUMAPIMockRecorder) DeleteRumMetricsDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRumMetricsDestination", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).DeleteRumMetricsDestination), arg0)
}

// DeleteRumMetricsDestinationRequest mocks base method
func (m *MockCloudWatchRUMAPI) DeleteRumMetricsDestinationRequest(arg0 *cloudwatchrum.DeleteRumMetricsDestinationInput) (*request.Request, *cloudwatchrum.DeleteRumMetricsDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRumMetricsDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.DeleteRumMetricsDestinationOutput)
	return ret0, ret1
}

// DeleteRumMetricsDestinationRequest indicates an expected call of DeleteRumMetricsDestinationRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) DeleteRumMetricsDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRumMetricsDestinationRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).DeleteRumMetricsDestinationRequest), arg0)
}

// DeleteRumMetricsDestinationWithContext mocks base method
func (m *MockCloudWatchRUMAPI) DeleteRumMetricsDestinationWithContext(arg0 context.Context, arg1 *cloudwatchrum.DeleteRumMetricsDestinationInput, arg2 ...request.Option) (*cloudwatchrum.DeleteRumMetricsDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRumMetricsDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.DeleteRumMetricsDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRumMetricsDestinationWithContext indicates an expected call of DeleteRumMetricsDestinationWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) DeleteRumMetricsDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRumMetricsDestinationWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).DeleteRumMetricsDestinationWithContext), varargs...)
}

// GetAppMonitor mocks base method
func (m *MockCloudWatchRUMAPI) GetAppMonitor(arg0 *cloudwatchrum.GetAppMonitorInput) (*cloudwatchrum.GetAppMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMonitor", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.GetAppMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppMonitor indicates an expected call of GetAppMonitor
func (mr *MockCloudWatchRUMAPIMockRecorder) GetAppMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMonitor", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).GetAppMonitor), arg0)
}

// GetAppMonitorData mocks base method
func (m *MockCloudWatchRUMAPI) GetAppMonitorData(arg0 *cloudwatchrum.GetAppMonitorDataInput) (*cloudwatchrum.GetAppMonitorDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMonitorData", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.GetAppMonitorDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppMonitorData indicates an expected call of GetAppMonitorData
func (mr *MockCloudWatchRUMAPIMockRecorder) GetAppMonitorData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMonitorData", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).GetAppMonitorData), arg0)
}

// GetAppMonitorDataPages mocks base method
func (m *MockCloudWatchRUMAPI) GetAppMonitorDataPages(arg0 *cloudwatchrum.GetAppMonitorDataInput, arg1 func(*cloudwatchrum.GetAppMonitorDataOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMonitorDataPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAppMonitorDataPages indicates an expected call of GetAppMonitorDataPages
func (mr *MockCloudWatchRUMAPIMockRecorder) GetAppMonitorDataPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMonitorDataPages", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).GetAppMonitorDataPages), arg0, arg1)
}

// GetAppMonitorDataPagesWithContext mocks base method
func (m *MockCloudWatchRUMAPI) GetAppMonitorDataPagesWithContext(arg0 context.Context, arg1 *cloudwatchrum.GetAppMonitorDataInput, arg2 func(*cloudwatchrum.GetAppMonitorDataOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppMonitorDataPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAppMonitorDataPagesWithContext indicates an expected call of GetAppMonitorDataPagesWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) GetAppMonitorDataPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMonitorDataPagesWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).GetAppMonitorDataPagesWithContext), varargs...)
}

// GetAppMonitorDataRequest mocks base method
func (m *MockCloudWatchRUMAPI) GetAppMonitorDataRequest(arg0 *cloudwatchrum.GetAppMonitorDataInput) (*request.Request, *cloudwatchrum.GetAppMonitorDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMonitorDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.GetAppMonitorDataOutput)
	return ret0, ret1
}

// GetAppMonitorDataRequest indicates an expected call of GetAppMonitorDataRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) GetAppMonitorDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMonitorDataRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).GetAppMonitorDataRequest), arg0)
}

// GetAppMonitorDataWithContext mocks base method
func (m *MockCloudWatchRUMAPI) GetAppMonitorDataWithContext(arg0 context.Context, arg1 *cloudwatchrum.GetAppMonitorDataInput, arg2 ...request.Option) (*cloudwatchrum.GetAppMonitorDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppMonitorDataWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.GetAppMonitorDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppMonitorDataWithContext indicates an expected call of GetAppMonitorDataWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) GetAppMonitorDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMonitorDataWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).GetAppMonitorDataWithContext), varargs...)
}

// GetAppMonitorRequest mocks base method
func (m *MockCloudWatchRUMAPI) GetAppMonitorRequest(arg0 *cloudwatchrum.GetAppMonitorInput) (*request.Request, *cloudwatchrum.GetAppMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.GetAppMonitorOutput)
	return ret0, ret1
}

// GetAppMonitorRequest indicates an expected call of GetAppMonitorRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) GetAppMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMonitorRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).GetAppMonitorRequest), arg0)
}

// GetAppMonitorWithContext mocks base method
func (m *MockCloudWatchRUMAPI) GetAppMonitorWithContext(arg0 context.Context, arg1 *cloudwatchrum.GetAppMonitorInput, arg2 ...request.Option) (*cloudwatchrum.GetAppMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.GetAppMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppMonitorWithContext indicates an expected call of GetAppMonitorWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) GetAppMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMonitorWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).GetAppMonitorWithContext), varargs...)
}

// ListAppMonitors mocks base method
func (m *MockCloudWatchRUMAPI) ListAppMonitors(arg0 *cloudwatchrum.ListAppMonitorsInput) (*cloudwatchrum.ListAppMonitorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppMonitors", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.ListAppMonitorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppMonitors indicates an expected call of ListAppMonitors
func (mr *MockCloudWatchRUMAPIMockRecorder) ListAppMonitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppMonitors", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListAppMonitors), arg0)
}

// ListAppMonitorsPages mocks base method
func (m *MockCloudWatchRUMAPI) ListAppMonitorsPages(arg0 *cloudwatchrum.ListAppMonitorsInput, arg1 func(*cloudwatchrum.ListAppMonitorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppMonitorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppMonitorsPages indicates an expected call of ListAppMonitorsPages
func (mr *MockCloudWatchRUMAPIMockRecorder) ListAppMonitorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppMonitorsPages", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListAppMonitorsPages), arg0, arg1)
}

// ListAppMonitorsPagesWithContext mocks base method
func (m *MockCloudWatchRUMAPI) ListAppMonitorsPagesWithContext(arg0 context.Context, arg1 *cloudwatchrum.ListAppMonitorsInput, arg2 func(*cloudwatchrum.ListAppMonitorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppMonitorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppMonitorsPagesWithContext indicates an expected call of ListAppMonitorsPagesWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) ListAppMonitorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppMonitorsPagesWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListAppMonitorsPagesWithContext), varargs...)
}

// ListAppMonitorsRequest mocks base method
func (m *MockCloudWatchRUMAPI) ListAppMonitorsRequest(arg0 *cloudwatchrum.ListAppMonitorsInput) (*request.Request, *cloudwatchrum.ListAppMonitorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppMonitorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.ListAppMonitorsOutput)
	return ret0, ret1
}

// ListAppMonitorsRequest indicates an expected call of ListAppMonitorsRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) ListAppMonitorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppMonitorsRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListAppMonitorsRequest), arg0)
}

// ListAppMonitorsWithContext mocks base method
func (m *MockCloudWatchRUMAPI) ListAppMonitorsWithContext(arg0 context.Context, arg1 *cloudwatchrum.ListAppMonitorsInput, arg2 ...request.Option) (*cloudwatchrum.ListAppMonitorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppMonitorsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.ListAppMonitorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppMonitorsWithContext indicates an expected call of ListAppMonitorsWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) ListAppMonitorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppMonitorsWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListAppMonitorsWithContext), varargs...)
}

// ListRumMetricsDestinations mocks base method
func (m *MockCloudWatchRUMAPI) ListRumMetricsDestinations(arg0 *cloudwatchrum.ListRumMetricsDestinationsInput) (*cloudwatchrum.ListRumMetricsDestinationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRumMetricsDestinations", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.ListRumMetricsDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRumMetricsDestinations indicates an expected call of ListRumMetricsDestinations
func (mr *MockCloudWatchRUMAPIMockRecorder) ListRumMetricsDestinations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRumMetricsDestinations", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListRumMetricsDestinations), arg0)
}

// ListRumMetricsDestinationsPages mocks base method
func (m *MockCloudWatchRUMAPI) ListRumMetricsDestinationsPages(arg0 *cloudwatchrum.ListRumMetricsDestinationsInput, arg1 func(*cloudwatchrum.ListRumMetricsDestinationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRumMetricsDestinationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRumMetricsDestinationsPages indicates an expected call of ListRumMetricsDestinationsPages
func (mr *MockCloudWatchRUMAPIMockRecorder) ListRumMetricsDestinationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRumMetricsDestinationsPages", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListRumMetricsDestinationsPages), arg0, arg1)
}

// ListRumMetricsDestinationsPagesWithContext mocks base method
func (m *MockCloudWatchRUMAPI) ListRumMetricsDestinationsPagesWithContext(arg0 context.Context, arg1 *cloudwatchrum.ListRumMetricsDestinationsInput, arg2 func(*cloudwatchrum.ListRumMetricsDestinationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRumMetricsDestinationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRumMetricsDestinationsPagesWithContext indicates an expected call of ListRumMetricsDestinationsPagesWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) ListRumMetricsDestinationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRumMetricsDestinationsPagesWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListRumMetricsDestinationsPagesWithContext), varargs...)
}

// ListRumMetricsDestinationsRequest mocks base method
func (m *MockCloudWatchRUMAPI) ListRumMetricsDestinationsRequest(arg0 *cloudwatchrum.ListRumMetricsDestinationsInput) (*request.Request, *cloudwatchrum.ListRumMetricsDestinationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRumMetricsDestinationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.ListRumMetricsDestinationsOutput)
	return ret0, ret1
}

// ListRumMetricsDestinationsRequest indicates an expected call of ListRumMetricsDestinationsRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) ListRumMetricsDestinationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRumMetricsDestinationsRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListRumMetricsDestinationsRequest), arg0)
}

// ListRumMetricsDestinationsWithContext mocks base method
func (m *MockCloudWatchRUMAPI) ListRumMetricsDestinationsWithContext(arg0 context.Context, arg1 *cloudwatchrum.ListRumMetricsDestinationsInput, arg2 ...request.Option) (*cloudwatchrum.ListRumMetricsDestinationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRumMetricsDestinationsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.ListRumMetricsDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRumMetricsDestinationsWithContext indicates an expected call of ListRumMetricsDestinationsWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) ListRumMetricsDestinationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRumMetricsDestinationsWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListRumMetricsDestinationsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCloudWatchRUMAPI) ListTagsForResource(arg0 *cloudwatchrum.ListTagsForResourceInput) (*cloudwatchrum.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCloudWatchRUMAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCloudWatchRUMAPI) ListTagsForResourceRequest(arg0 *cloudwatchrum.ListTagsForResourceInput) (*request.Request, *cloudwatchrum.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCloudWatchRUMAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *cloudwatchrum.ListTagsForResourceInput, arg2 ...request.Option) (*cloudwatchrum.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutRumEvents mocks base method
func (m *MockCloudWatchRUMAPI) PutRumEvents(arg0 *cloudwatchrum.PutRumEventsInput) (*cloudwatchrum.PutRumEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRumEvents", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.PutRumEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRumEvents indicates an expected call of PutRumEvents
func (mr *MockCloudWatchRUMAPIMockRecorder) PutRumEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRumEvents", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).PutRumEvents), arg0)
}

// PutRumEventsRequest mocks base method
func (m *MockCloudWatchRUMAPI) PutRumEventsRequest(arg0 *cloudwatchrum.PutRumEventsInput) (*request.Request, *cloudwatchrum.PutRumEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRumEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.PutRumEventsOutput)
	return ret0, ret1
}

// PutRumEventsRequest indicates an expected call of PutRumEventsRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) PutRumEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRumEventsRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).PutRumEventsRequest), arg0)
}

// PutRumEventsWithContext mocks base method
func (m *MockCloudWatchRUMAPI) PutRumEventsWithContext(arg0 context.Context, arg1 *cloudwatchrum.PutRumEventsInput, arg2 ...request.Option) (*cloudwatchrum.PutRumEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRumEventsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.PutRumEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRumEventsWithContext indicates an expected call of PutRumEventsWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) PutRumEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRumEventsWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).PutRumEventsWithContext), varargs...)
}

// PutRumMetricsDestination mocks base method
func (m *MockCloudWatchRUMAPI) PutRumMetricsDestination(arg0 *cloudwatchrum.PutRumMetricsDestinationInput) (*cloudwatchrum.PutRumMetricsDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRumMetricsDestination", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.PutRumMetricsDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRumMetricsDestination indicates an expected call of PutRumMetricsDestination
func (mr *MockCloudWatchRUMAPIMockRecorder) PutRumMetricsDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRumMetricsDestination", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).PutRumMetricsDestination), arg0)
}

// PutRumMetricsDestinationRequest mocks base method
func (m *MockCloudWatchRUMAPI) PutRumMetricsDestinationRequest(arg0 *cloudwatchrum.PutRumMetricsDestinationInput) (*request.Request, *cloudwatchrum.PutRumMetricsDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRumMetricsDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.PutRumMetricsDestinationOutput)
	return ret0, ret1
}

// PutRumMetricsDestinationRequest indicates an expected call of PutRumMetricsDestinationRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) PutRumMetricsDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRumMetricsDestinationRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).PutRumMetricsDestinationRequest), arg0)
}

// PutRumMetricsDestinationWithContext mocks base method
func (m *MockCloudWatchRUMAPI) PutRumMetricsDestinationWithContext(arg0 context.Context, arg1 *cloudwatchrum.PutRumMetricsDestinationInput, arg2 ...request.Option) (*cloudwatchrum.PutRumMetricsDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRumMetricsDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.PutRumMetricsDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRumMetricsDestinationWithContext indicates an expected call of PutRumMetricsDestinationWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) PutRumMetricsDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRumMetricsDestinationWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).PutRumMetricsDestinationWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCloudWatchRUMAPI) TagResource(arg0 *cloudwatchrum.TagResourceInput) (*cloudwatchrum.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCloudWatchRUMAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCloudWatchRUMAPI) TagResourceRequest(arg0 *cloudwatchrum.TagResourceInput) (*request.Request, *cloudwatchrum.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCloudWatchRUMAPI) TagResourceWithContext(arg0 context.Context, arg1 *cloudwatchrum.TagResourceInput, arg2 ...request.Option) (*cloudwatchrum.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCloudWatchRUMAPI) UntagResource(arg0 *cloudwatchrum.UntagResourceInput) (*cloudwatchrum.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCloudWatchRUMAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCloudWatchRUMAPI) UntagResourceRequest(arg0 *cloudwatchrum.UntagResourceInput) (*request.Request, *cloudwatchrum.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCloudWatchRUMAPI) UntagResourceWithContext(arg0 context.Context, arg1 *cloudwatchrum.UntagResourceInput, arg2 ...request.Option) (*cloudwatchrum.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAppMonitor mocks base method
func (m *MockCloudWatchRUMAPI) UpdateAppMonitor(arg0 *cloudwatchrum.UpdateAppMonitorInput) (*cloudwatchrum.UpdateAppMonitorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppMonitor", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.UpdateAppMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppMonitor indicates an expected call of UpdateAppMonitor
func (mr *MockCloudWatchRUMAPIMockRecorder) UpdateAppMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppMonitor", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).UpdateAppMonitor), arg0)
}

// UpdateAppMonitorRequest mocks base method
func (m *MockCloudWatchRUMAPI) UpdateAppMonitorRequest(arg0 *cloudwatchrum.UpdateAppMonitorInput) (*request.Request, *cloudwatchrum.UpdateAppMonitorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppMonitorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.UpdateAppMonitorOutput)
	return ret0, ret1
}

// UpdateAppMonitorRequest indicates an expected call of UpdateAppMonitorRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) UpdateAppMonitorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppMonitorRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).UpdateAppMonitorRequest), arg0)
}

// UpdateAppMonitorWithContext mocks base method
func (m *MockCloudWatchRUMAPI) UpdateAppMonitorWithContext(arg0 context.Context, arg1 *cloudwatchrum.UpdateAppMonitorInput, arg2 ...request.Option) (*cloudwatchrum.UpdateAppMonitorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppMonitorWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.UpdateAppMonitorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppMonitorWithContext indicates an expected call of UpdateAppMonitorWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) UpdateAppMonitorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppMonitorWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).UpdateAppMonitorWithContext), varargs...)
}

// UpdateRumMetricDefinition mocks base method
func (m *MockCloudWatchRUMAPI) UpdateRumMetricDefinition(arg0 *cloudwatchrum.UpdateRumMetricDefinitionInput) (*cloudwatchrum.UpdateRumMetricDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRumMetricDefinition", arg0)
	ret0, _ := ret[0].(*cloudwatchrum.UpdateRumMetricDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRumMetricDefinition indicates an expected call of UpdateRumMetricDefinition
func (mr *MockCloudWatchRUMAPIMockRecorder) UpdateRumMetricDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRumMetricDefinition", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).UpdateRumMetricDefinition), arg0)
}

// UpdateRumMetricDefinitionRequest mocks base method
func (m *MockCloudWatchRUMAPI) UpdateRumMetricDefinitionRequest(arg0 *cloudwatchrum.UpdateRumMetricDefinitionInput) (*request.Request, *cloudwatchrum.UpdateRumMetricDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRumMetricDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchrum.UpdateRumMetricDefinitionOutput)
	return ret0, ret1
}

// UpdateRumMetricDefinitionRequest indicates an expected call of UpdateRumMetricDefinitionRequest
func (mr *MockCloudWatchRUMAPIMockRecorder) UpdateRumMetricDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRumMetricDefinitionRequest", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).UpdateRumMetricDefinitionRequest), arg0)
}

// UpdateRumMetricDefinitionWithContext mocks base method
func (m *MockCloudWatchRUMAPI) UpdateRumMetricDefinitionWithContext(arg0 context.Context, arg1 *cloudwatchrum.UpdateRumMetricDefinitionInput, arg2 ...request.Option) (*cloudwatchrum.UpdateRumMetricDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRumMetricDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchrum.UpdateRumMetricDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRumMetricDefinitionWithContext indicates an expected call of UpdateRumMetricDefinitionWithContext
func (mr *MockCloudWatchRUMAPIMockRecorder) UpdateRumMetricDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRumMetricDefinitionWithContext", reflect.TypeOf((*MockCloudWatchRUMAPI)(nil).UpdateRumMetricDefinitionWithContext), varargs...)
}
