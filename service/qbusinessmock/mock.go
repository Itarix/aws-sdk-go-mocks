// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/qbusiness/qbusinessiface (interfaces: QBusinessAPI)

// Package qbusinessmock is a generated GoMock package.
package qbusinessmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	qbusiness "github.com/aws/aws-sdk-go/service/qbusiness"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQBusinessAPI is a mock of QBusinessAPI interface
type MockQBusinessAPI struct {
	ctrl     *gomock.Controller
	recorder *MockQBusinessAPIMockRecorder
}

// MockQBusinessAPIMockRecorder is the mock recorder for MockQBusinessAPI
type MockQBusinessAPIMockRecorder struct {
	mock *MockQBusinessAPI
}

// NewMockQBusinessAPI creates a new mock instance
func NewMockQBusinessAPI(ctrl *gomock.Controller) *MockQBusinessAPI {
	mock := &MockQBusinessAPI{ctrl: ctrl}
	mock.recorder = &MockQBusinessAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQBusinessAPI) EXPECT() *MockQBusinessAPIMockRecorder {
	return m.recorder
}

// BatchDeleteDocument mocks base method
func (m *MockQBusinessAPI) BatchDeleteDocument(arg0 *qbusiness.BatchDeleteDocumentInput) (*qbusiness.BatchDeleteDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteDocument", arg0)
	ret0, _ := ret[0].(*qbusiness.BatchDeleteDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteDocument indicates an expected call of BatchDeleteDocument
func (mr *MockQBusinessAPIMockRecorder) BatchDeleteDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDocument", reflect.TypeOf((*MockQBusinessAPI)(nil).BatchDeleteDocument), arg0)
}

// BatchDeleteDocumentRequest mocks base method
func (m *MockQBusinessAPI) BatchDeleteDocumentRequest(arg0 *qbusiness.BatchDeleteDocumentInput) (*request.Request, *qbusiness.BatchDeleteDocumentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteDocumentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.BatchDeleteDocumentOutput)
	return ret0, ret1
}

// BatchDeleteDocumentRequest indicates an expected call of BatchDeleteDocumentRequest
func (mr *MockQBusinessAPIMockRecorder) BatchDeleteDocumentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDocumentRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).BatchDeleteDocumentRequest), arg0)
}

// BatchDeleteDocumentWithContext mocks base method
func (m *MockQBusinessAPI) BatchDeleteDocumentWithContext(arg0 context.Context, arg1 *qbusiness.BatchDeleteDocumentInput, arg2 ...request.Option) (*qbusiness.BatchDeleteDocumentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteDocumentWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.BatchDeleteDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteDocumentWithContext indicates an expected call of BatchDeleteDocumentWithContext
func (mr *MockQBusinessAPIMockRecorder) BatchDeleteDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDocumentWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).BatchDeleteDocumentWithContext), varargs...)
}

// BatchPutDocument mocks base method
func (m *MockQBusinessAPI) BatchPutDocument(arg0 *qbusiness.BatchPutDocumentInput) (*qbusiness.BatchPutDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutDocument", arg0)
	ret0, _ := ret[0].(*qbusiness.BatchPutDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutDocument indicates an expected call of BatchPutDocument
func (mr *MockQBusinessAPIMockRecorder) BatchPutDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutDocument", reflect.TypeOf((*MockQBusinessAPI)(nil).BatchPutDocument), arg0)
}

// BatchPutDocumentRequest mocks base method
func (m *MockQBusinessAPI) BatchPutDocumentRequest(arg0 *qbusiness.BatchPutDocumentInput) (*request.Request, *qbusiness.BatchPutDocumentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutDocumentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.BatchPutDocumentOutput)
	return ret0, ret1
}

// BatchPutDocumentRequest indicates an expected call of BatchPutDocumentRequest
func (mr *MockQBusinessAPIMockRecorder) BatchPutDocumentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutDocumentRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).BatchPutDocumentRequest), arg0)
}

// BatchPutDocumentWithContext mocks base method
func (m *MockQBusinessAPI) BatchPutDocumentWithContext(arg0 context.Context, arg1 *qbusiness.BatchPutDocumentInput, arg2 ...request.Option) (*qbusiness.BatchPutDocumentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchPutDocumentWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.BatchPutDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutDocumentWithContext indicates an expected call of BatchPutDocumentWithContext
func (mr *MockQBusinessAPIMockRecorder) BatchPutDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutDocumentWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).BatchPutDocumentWithContext), varargs...)
}

// Chat mocks base method
func (m *MockQBusinessAPI) Chat(arg0 *qbusiness.ChatInput) (*qbusiness.ChatOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", arg0)
	ret0, _ := ret[0].(*qbusiness.ChatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat
func (mr *MockQBusinessAPIMockRecorder) Chat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockQBusinessAPI)(nil).Chat), arg0)
}

// ChatRequest mocks base method
func (m *MockQBusinessAPI) ChatRequest(arg0 *qbusiness.ChatInput) (*request.Request, *qbusiness.ChatOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ChatOutput)
	return ret0, ret1
}

// ChatRequest indicates an expected call of ChatRequest
func (mr *MockQBusinessAPIMockRecorder) ChatRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ChatRequest), arg0)
}

// ChatSync mocks base method
func (m *MockQBusinessAPI) ChatSync(arg0 *qbusiness.ChatSyncInput) (*qbusiness.ChatSyncOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatSync", arg0)
	ret0, _ := ret[0].(*qbusiness.ChatSyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatSync indicates an expected call of ChatSync
func (mr *MockQBusinessAPIMockRecorder) ChatSync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatSync", reflect.TypeOf((*MockQBusinessAPI)(nil).ChatSync), arg0)
}

// ChatSyncRequest mocks base method
func (m *MockQBusinessAPI) ChatSyncRequest(arg0 *qbusiness.ChatSyncInput) (*request.Request, *qbusiness.ChatSyncOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatSyncRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ChatSyncOutput)
	return ret0, ret1
}

// ChatSyncRequest indicates an expected call of ChatSyncRequest
func (mr *MockQBusinessAPIMockRecorder) ChatSyncRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatSyncRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ChatSyncRequest), arg0)
}

// ChatSyncWithContext mocks base method
func (m *MockQBusinessAPI) ChatSyncWithContext(arg0 context.Context, arg1 *qbusiness.ChatSyncInput, arg2 ...request.Option) (*qbusiness.ChatSyncOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChatSyncWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ChatSyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatSyncWithContext indicates an expected call of ChatSyncWithContext
func (mr *MockQBusinessAPIMockRecorder) ChatSyncWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatSyncWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ChatSyncWithContext), varargs...)
}

// ChatWithContext mocks base method
func (m *MockQBusinessAPI) ChatWithContext(arg0 context.Context, arg1 *qbusiness.ChatInput, arg2 ...request.Option) (*qbusiness.ChatOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChatWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ChatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatWithContext indicates an expected call of ChatWithContext
func (mr *MockQBusinessAPIMockRecorder) ChatWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ChatWithContext), varargs...)
}

// CreateApplication mocks base method
func (m *MockQBusinessAPI) CreateApplication(arg0 *qbusiness.CreateApplicationInput) (*qbusiness.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*qbusiness.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockQBusinessAPIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateApplication), arg0)
}

// CreateApplicationRequest mocks base method
func (m *MockQBusinessAPI) CreateApplicationRequest(arg0 *qbusiness.CreateApplicationInput) (*request.Request, *qbusiness.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest
func (mr *MockQBusinessAPIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationWithContext mocks base method
func (m *MockQBusinessAPI) CreateApplicationWithContext(arg0 context.Context, arg1 *qbusiness.CreateApplicationInput, arg2 ...request.Option) (*qbusiness.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext
func (mr *MockQBusinessAPIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateApplicationWithContext), varargs...)
}

// CreateIndex mocks base method
func (m *MockQBusinessAPI) CreateIndex(arg0 *qbusiness.CreateIndexInput) (*qbusiness.CreateIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", arg0)
	ret0, _ := ret[0].(*qbusiness.CreateIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndex indicates an expected call of CreateIndex
func (mr *MockQBusinessAPIMockRecorder) CreateIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateIndex), arg0)
}

// CreateIndexRequest mocks base method
func (m *MockQBusinessAPI) CreateIndexRequest(arg0 *qbusiness.CreateIndexInput) (*request.Request, *qbusiness.CreateIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.CreateIndexOutput)
	return ret0, ret1
}

// CreateIndexRequest indicates an expected call of CreateIndexRequest
func (mr *MockQBusinessAPIMockRecorder) CreateIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateIndexRequest), arg0)
}

// CreateIndexWithContext mocks base method
func (m *MockQBusinessAPI) CreateIndexWithContext(arg0 context.Context, arg1 *qbusiness.CreateIndexInput, arg2 ...request.Option) (*qbusiness.CreateIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIndexWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.CreateIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndexWithContext indicates an expected call of CreateIndexWithContext
func (mr *MockQBusinessAPIMockRecorder) CreateIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateIndexWithContext), varargs...)
}

// CreatePlugin mocks base method
func (m *MockQBusinessAPI) CreatePlugin(arg0 *qbusiness.CreatePluginInput) (*qbusiness.CreatePluginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlugin", arg0)
	ret0, _ := ret[0].(*qbusiness.CreatePluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlugin indicates an expected call of CreatePlugin
func (mr *MockQBusinessAPIMockRecorder) CreatePlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlugin", reflect.TypeOf((*MockQBusinessAPI)(nil).CreatePlugin), arg0)
}

// CreatePluginRequest mocks base method
func (m *MockQBusinessAPI) CreatePluginRequest(arg0 *qbusiness.CreatePluginInput) (*request.Request, *qbusiness.CreatePluginOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePluginRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.CreatePluginOutput)
	return ret0, ret1
}

// CreatePluginRequest indicates an expected call of CreatePluginRequest
func (mr *MockQBusinessAPIMockRecorder) CreatePluginRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePluginRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).CreatePluginRequest), arg0)
}

// CreatePluginWithContext mocks base method
func (m *MockQBusinessAPI) CreatePluginWithContext(arg0 context.Context, arg1 *qbusiness.CreatePluginInput, arg2 ...request.Option) (*qbusiness.CreatePluginOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePluginWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.CreatePluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePluginWithContext indicates an expected call of CreatePluginWithContext
func (mr *MockQBusinessAPIMockRecorder) CreatePluginWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePluginWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).CreatePluginWithContext), varargs...)
}

// CreateRetriever mocks base method
func (m *MockQBusinessAPI) CreateRetriever(arg0 *qbusiness.CreateRetrieverInput) (*qbusiness.CreateRetrieverOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRetriever", arg0)
	ret0, _ := ret[0].(*qbusiness.CreateRetrieverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRetriever indicates an expected call of CreateRetriever
func (mr *MockQBusinessAPIMockRecorder) CreateRetriever(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRetriever", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateRetriever), arg0)
}

// CreateRetrieverRequest mocks base method
func (m *MockQBusinessAPI) CreateRetrieverRequest(arg0 *qbusiness.CreateRetrieverInput) (*request.Request, *qbusiness.CreateRetrieverOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRetrieverRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.CreateRetrieverOutput)
	return ret0, ret1
}

// CreateRetrieverRequest indicates an expected call of CreateRetrieverRequest
func (mr *MockQBusinessAPIMockRecorder) CreateRetrieverRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRetrieverRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateRetrieverRequest), arg0)
}

// CreateRetrieverWithContext mocks base method
func (m *MockQBusinessAPI) CreateRetrieverWithContext(arg0 context.Context, arg1 *qbusiness.CreateRetrieverInput, arg2 ...request.Option) (*qbusiness.CreateRetrieverOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRetrieverWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.CreateRetrieverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRetrieverWithContext indicates an expected call of CreateRetrieverWithContext
func (mr *MockQBusinessAPIMockRecorder) CreateRetrieverWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRetrieverWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateRetrieverWithContext), varargs...)
}

// CreateUser mocks base method
func (m *MockQBusinessAPI) CreateUser(arg0 *qbusiness.CreateUserInput) (*qbusiness.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*qbusiness.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockQBusinessAPIMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateUser), arg0)
}

// CreateUserRequest mocks base method
func (m *MockQBusinessAPI) CreateUserRequest(arg0 *qbusiness.CreateUserInput) (*request.Request, *qbusiness.CreateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.CreateUserOutput)
	return ret0, ret1
}

// CreateUserRequest indicates an expected call of CreateUserRequest
func (mr *MockQBusinessAPIMockRecorder) CreateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateUserRequest), arg0)
}

// CreateUserWithContext mocks base method
func (m *MockQBusinessAPI) CreateUserWithContext(arg0 context.Context, arg1 *qbusiness.CreateUserInput, arg2 ...request.Option) (*qbusiness.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithContext indicates an expected call of CreateUserWithContext
func (mr *MockQBusinessAPIMockRecorder) CreateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateUserWithContext), varargs...)
}

// CreateWebExperience mocks base method
func (m *MockQBusinessAPI) CreateWebExperience(arg0 *qbusiness.CreateWebExperienceInput) (*qbusiness.CreateWebExperienceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebExperience", arg0)
	ret0, _ := ret[0].(*qbusiness.CreateWebExperienceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebExperience indicates an expected call of CreateWebExperience
func (mr *MockQBusinessAPIMockRecorder) CreateWebExperience(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebExperience", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateWebExperience), arg0)
}

// CreateWebExperienceRequest mocks base method
func (m *MockQBusinessAPI) CreateWebExperienceRequest(arg0 *qbusiness.CreateWebExperienceInput) (*request.Request, *qbusiness.CreateWebExperienceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebExperienceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.CreateWebExperienceOutput)
	return ret0, ret1
}

// CreateWebExperienceRequest indicates an expected call of CreateWebExperienceRequest
func (mr *MockQBusinessAPIMockRecorder) CreateWebExperienceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebExperienceRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateWebExperienceRequest), arg0)
}

// CreateWebExperienceWithContext mocks base method
func (m *MockQBusinessAPI) CreateWebExperienceWithContext(arg0 context.Context, arg1 *qbusiness.CreateWebExperienceInput, arg2 ...request.Option) (*qbusiness.CreateWebExperienceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWebExperienceWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.CreateWebExperienceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebExperienceWithContext indicates an expected call of CreateWebExperienceWithContext
func (mr *MockQBusinessAPIMockRecorder) CreateWebExperienceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebExperienceWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).CreateWebExperienceWithContext), varargs...)
}

// DeleteApplication mocks base method
func (m *MockQBusinessAPI) DeleteApplication(arg0 *qbusiness.DeleteApplicationInput) (*qbusiness.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*qbusiness.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockQBusinessAPIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteApplication), arg0)
}

// DeleteApplicationRequest mocks base method
func (m *MockQBusinessAPI) DeleteApplicationRequest(arg0 *qbusiness.DeleteApplicationInput) (*request.Request, *qbusiness.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest
func (mr *MockQBusinessAPIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationWithContext mocks base method
func (m *MockQBusinessAPI) DeleteApplicationWithContext(arg0 context.Context, arg1 *qbusiness.DeleteApplicationInput, arg2 ...request.Option) (*qbusiness.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext
func (mr *MockQBusinessAPIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteApplicationWithContext), varargs...)
}

// DeleteChatControlsConfiguration mocks base method
func (m *MockQBusinessAPI) DeleteChatControlsConfiguration(arg0 *qbusiness.DeleteChatControlsConfigurationInput) (*qbusiness.DeleteChatControlsConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatControlsConfiguration", arg0)
	ret0, _ := ret[0].(*qbusiness.DeleteChatControlsConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChatControlsConfiguration indicates an expected call of DeleteChatControlsConfiguration
func (mr *MockQBusinessAPIMockRecorder) DeleteChatControlsConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatControlsConfiguration", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteChatControlsConfiguration), arg0)
}

// DeleteChatControlsConfigurationRequest mocks base method
func (m *MockQBusinessAPI) DeleteChatControlsConfigurationRequest(arg0 *qbusiness.DeleteChatControlsConfigurationInput) (*request.Request, *qbusiness.DeleteChatControlsConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatControlsConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.DeleteChatControlsConfigurationOutput)
	return ret0, ret1
}

// DeleteChatControlsConfigurationRequest indicates an expected call of DeleteChatControlsConfigurationRequest
func (mr *MockQBusinessAPIMockRecorder) DeleteChatControlsConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatControlsConfigurationRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteChatControlsConfigurationRequest), arg0)
}

// DeleteChatControlsConfigurationWithContext mocks base method
func (m *MockQBusinessAPI) DeleteChatControlsConfigurationWithContext(arg0 context.Context, arg1 *qbusiness.DeleteChatControlsConfigurationInput, arg2 ...request.Option) (*qbusiness.DeleteChatControlsConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChatControlsConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.DeleteChatControlsConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChatControlsConfigurationWithContext indicates an expected call of DeleteChatControlsConfigurationWithContext
func (mr *MockQBusinessAPIMockRecorder) DeleteChatControlsConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatControlsConfigurationWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteChatControlsConfigurationWithContext), varargs...)
}

// DeleteConversation mocks base method
func (m *MockQBusinessAPI) DeleteConversation(arg0 *qbusiness.DeleteConversationInput) (*qbusiness.DeleteConversationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConversation", arg0)
	ret0, _ := ret[0].(*qbusiness.DeleteConversationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConversation indicates an expected call of DeleteConversation
func (mr *MockQBusinessAPIMockRecorder) DeleteConversation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConversation", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteConversation), arg0)
}

// DeleteConversationRequest mocks base method
func (m *MockQBusinessAPI) DeleteConversationRequest(arg0 *qbusiness.DeleteConversationInput) (*request.Request, *qbusiness.DeleteConversationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConversationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.DeleteConversationOutput)
	return ret0, ret1
}

// DeleteConversationRequest indicates an expected call of DeleteConversationRequest
func (mr *MockQBusinessAPIMockRecorder) DeleteConversationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConversationRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteConversationRequest), arg0)
}

// DeleteConversationWithContext mocks base method
func (m *MockQBusinessAPI) DeleteConversationWithContext(arg0 context.Context, arg1 *qbusiness.DeleteConversationInput, arg2 ...request.Option) (*qbusiness.DeleteConversationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConversationWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.DeleteConversationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConversationWithContext indicates an expected call of DeleteConversationWithContext
func (mr *MockQBusinessAPIMockRecorder) DeleteConversationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConversationWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteConversationWithContext), varargs...)
}

// DeleteDataSource mocks base method
func (m *MockQBusinessAPI) DeleteDataSource(arg0 *qbusiness.DeleteDataSourceInput) (*qbusiness.DeleteDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataSource", arg0)
	ret0, _ := ret[0].(*qbusiness.DeleteDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataSource indicates an expected call of DeleteDataSource
func (mr *MockQBusinessAPIMockRecorder) DeleteDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSource", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteDataSource), arg0)
}

// DeleteDataSourceRequest mocks base method
func (m *MockQBusinessAPI) DeleteDataSourceRequest(arg0 *qbusiness.DeleteDataSourceInput) (*request.Request, *qbusiness.DeleteDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.DeleteDataSourceOutput)
	return ret0, ret1
}

// DeleteDataSourceRequest indicates an expected call of DeleteDataSourceRequest
func (mr *MockQBusinessAPIMockRecorder) DeleteDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSourceRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteDataSourceRequest), arg0)
}

// DeleteDataSourceWithContext mocks base method
func (m *MockQBusinessAPI) DeleteDataSourceWithContext(arg0 context.Context, arg1 *qbusiness.DeleteDataSourceInput, arg2 ...request.Option) (*qbusiness.DeleteDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.DeleteDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataSourceWithContext indicates an expected call of DeleteDataSourceWithContext
func (mr *MockQBusinessAPIMockRecorder) DeleteDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSourceWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteDataSourceWithContext), varargs...)
}

// DeleteGroup mocks base method
func (m *MockQBusinessAPI) DeleteGroup(arg0 *qbusiness.DeleteGroupInput) (*qbusiness.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0)
	ret0, _ := ret[0].(*qbusiness.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockQBusinessAPIMockRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteGroup), arg0)
}

// DeleteGroupRequest mocks base method
func (m *MockQBusinessAPI) DeleteGroupRequest(arg0 *qbusiness.DeleteGroupInput) (*request.Request, *qbusiness.DeleteGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.DeleteGroupOutput)
	return ret0, ret1
}

// DeleteGroupRequest indicates an expected call of DeleteGroupRequest
func (mr *MockQBusinessAPIMockRecorder) DeleteGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteGroupRequest), arg0)
}

// DeleteGroupWithContext mocks base method
func (m *MockQBusinessAPI) DeleteGroupWithContext(arg0 context.Context, arg1 *qbusiness.DeleteGroupInput, arg2 ...request.Option) (*qbusiness.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupWithContext indicates an expected call of DeleteGroupWithContext
func (mr *MockQBusinessAPIMockRecorder) DeleteGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteGroupWithContext), varargs...)
}

// DeleteIndex mocks base method
func (m *MockQBusinessAPI) DeleteIndex(arg0 *qbusiness.DeleteIndexInput) (*qbusiness.DeleteIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", arg0)
	ret0, _ := ret[0].(*qbusiness.DeleteIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIndex indicates an expected call of DeleteIndex
func (mr *MockQBusinessAPIMockRecorder) DeleteIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteIndex), arg0)
}

// DeleteIndexRequest mocks base method
func (m *MockQBusinessAPI) DeleteIndexRequest(arg0 *qbusiness.DeleteIndexInput) (*request.Request, *qbusiness.DeleteIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.DeleteIndexOutput)
	return ret0, ret1
}

// DeleteIndexRequest indicates an expected call of DeleteIndexRequest
func (mr *MockQBusinessAPIMockRecorder) DeleteIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndexRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteIndexRequest), arg0)
}

// DeleteIndexWithContext mocks base method
func (m *MockQBusinessAPI) DeleteIndexWithContext(arg0 context.Context, arg1 *qbusiness.DeleteIndexInput, arg2 ...request.Option) (*qbusiness.DeleteIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIndexWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.DeleteIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIndexWithContext indicates an expected call of DeleteIndexWithContext
func (mr *MockQBusinessAPIMockRecorder) DeleteIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndexWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteIndexWithContext), varargs...)
}

// DeletePlugin mocks base method
func (m *MockQBusinessAPI) DeletePlugin(arg0 *qbusiness.DeletePluginInput) (*qbusiness.DeletePluginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlugin", arg0)
	ret0, _ := ret[0].(*qbusiness.DeletePluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlugin indicates an expected call of DeletePlugin
func (mr *MockQBusinessAPIMockRecorder) DeletePlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlugin", reflect.TypeOf((*MockQBusinessAPI)(nil).DeletePlugin), arg0)
}

// DeletePluginRequest mocks base method
func (m *MockQBusinessAPI) DeletePluginRequest(arg0 *qbusiness.DeletePluginInput) (*request.Request, *qbusiness.DeletePluginOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePluginRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.DeletePluginOutput)
	return ret0, ret1
}

// DeletePluginRequest indicates an expected call of DeletePluginRequest
func (mr *MockQBusinessAPIMockRecorder) DeletePluginRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePluginRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).DeletePluginRequest), arg0)
}

// DeletePluginWithContext mocks base method
func (m *MockQBusinessAPI) DeletePluginWithContext(arg0 context.Context, arg1 *qbusiness.DeletePluginInput, arg2 ...request.Option) (*qbusiness.DeletePluginOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePluginWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.DeletePluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePluginWithContext indicates an expected call of DeletePluginWithContext
func (mr *MockQBusinessAPIMockRecorder) DeletePluginWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePluginWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).DeletePluginWithContext), varargs...)
}

// DeleteRetriever mocks base method
func (m *MockQBusinessAPI) DeleteRetriever(arg0 *qbusiness.DeleteRetrieverInput) (*qbusiness.DeleteRetrieverOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetriever", arg0)
	ret0, _ := ret[0].(*qbusiness.DeleteRetrieverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRetriever indicates an expected call of DeleteRetriever
func (mr *MockQBusinessAPIMockRecorder) DeleteRetriever(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetriever", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteRetriever), arg0)
}

// DeleteRetrieverRequest mocks base method
func (m *MockQBusinessAPI) DeleteRetrieverRequest(arg0 *qbusiness.DeleteRetrieverInput) (*request.Request, *qbusiness.DeleteRetrieverOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetrieverRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.DeleteRetrieverOutput)
	return ret0, ret1
}

// DeleteRetrieverRequest indicates an expected call of DeleteRetrieverRequest
func (mr *MockQBusinessAPIMockRecorder) DeleteRetrieverRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetrieverRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteRetrieverRequest), arg0)
}

// DeleteRetrieverWithContext mocks base method
func (m *MockQBusinessAPI) DeleteRetrieverWithContext(arg0 context.Context, arg1 *qbusiness.DeleteRetrieverInput, arg2 ...request.Option) (*qbusiness.DeleteRetrieverOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRetrieverWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.DeleteRetrieverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRetrieverWithContext indicates an expected call of DeleteRetrieverWithContext
func (mr *MockQBusinessAPIMockRecorder) DeleteRetrieverWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetrieverWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteRetrieverWithContext), varargs...)
}

// DeleteUser mocks base method
func (m *MockQBusinessAPI) DeleteUser(arg0 *qbusiness.DeleteUserInput) (*qbusiness.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*qbusiness.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockQBusinessAPIMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteUser), arg0)
}

// DeleteUserRequest mocks base method
func (m *MockQBusinessAPI) DeleteUserRequest(arg0 *qbusiness.DeleteUserInput) (*request.Request, *qbusiness.DeleteUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.DeleteUserOutput)
	return ret0, ret1
}

// DeleteUserRequest indicates an expected call of DeleteUserRequest
func (mr *MockQBusinessAPIMockRecorder) DeleteUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteUserRequest), arg0)
}

// DeleteUserWithContext mocks base method
func (m *MockQBusinessAPI) DeleteUserWithContext(arg0 context.Context, arg1 *qbusiness.DeleteUserInput, arg2 ...request.Option) (*qbusiness.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserWithContext indicates an expected call of DeleteUserWithContext
func (mr *MockQBusinessAPIMockRecorder) DeleteUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteUserWithContext), varargs...)
}

// DeleteWebExperience mocks base method
func (m *MockQBusinessAPI) DeleteWebExperience(arg0 *qbusiness.DeleteWebExperienceInput) (*qbusiness.DeleteWebExperienceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebExperience", arg0)
	ret0, _ := ret[0].(*qbusiness.DeleteWebExperienceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebExperience indicates an expected call of DeleteWebExperience
func (mr *MockQBusinessAPIMockRecorder) DeleteWebExperience(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebExperience", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteWebExperience), arg0)
}

// DeleteWebExperienceRequest mocks base method
func (m *MockQBusinessAPI) DeleteWebExperienceRequest(arg0 *qbusiness.DeleteWebExperienceInput) (*request.Request, *qbusiness.DeleteWebExperienceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebExperienceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.DeleteWebExperienceOutput)
	return ret0, ret1
}

// DeleteWebExperienceRequest indicates an expected call of DeleteWebExperienceRequest
func (mr *MockQBusinessAPIMockRecorder) DeleteWebExperienceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebExperienceRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteWebExperienceRequest), arg0)
}

// DeleteWebExperienceWithContext mocks base method
func (m *MockQBusinessAPI) DeleteWebExperienceWithContext(arg0 context.Context, arg1 *qbusiness.DeleteWebExperienceInput, arg2 ...request.Option) (*qbusiness.DeleteWebExperienceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWebExperienceWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.DeleteWebExperienceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebExperienceWithContext indicates an expected call of DeleteWebExperienceWithContext
func (mr *MockQBusinessAPIMockRecorder) DeleteWebExperienceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebExperienceWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).DeleteWebExperienceWithContext), varargs...)
}

// GetApplication mocks base method
func (m *MockQBusinessAPI) GetApplication(arg0 *qbusiness.GetApplicationInput) (*qbusiness.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*qbusiness.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockQBusinessAPIMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockQBusinessAPI)(nil).GetApplication), arg0)
}

// GetApplicationRequest mocks base method
func (m *MockQBusinessAPI) GetApplicationRequest(arg0 *qbusiness.GetApplicationInput) (*request.Request, *qbusiness.GetApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.GetApplicationOutput)
	return ret0, ret1
}

// GetApplicationRequest indicates an expected call of GetApplicationRequest
func (mr *MockQBusinessAPIMockRecorder) GetApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).GetApplicationRequest), arg0)
}

// GetApplicationWithContext mocks base method
func (m *MockQBusinessAPI) GetApplicationWithContext(arg0 context.Context, arg1 *qbusiness.GetApplicationInput, arg2 ...request.Option) (*qbusiness.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationWithContext indicates an expected call of GetApplicationWithContext
func (mr *MockQBusinessAPIMockRecorder) GetApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).GetApplicationWithContext), varargs...)
}

// GetChatControlsConfiguration mocks base method
func (m *MockQBusinessAPI) GetChatControlsConfiguration(arg0 *qbusiness.GetChatControlsConfigurationInput) (*qbusiness.GetChatControlsConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatControlsConfiguration", arg0)
	ret0, _ := ret[0].(*qbusiness.GetChatControlsConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatControlsConfiguration indicates an expected call of GetChatControlsConfiguration
func (mr *MockQBusinessAPIMockRecorder) GetChatControlsConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatControlsConfiguration", reflect.TypeOf((*MockQBusinessAPI)(nil).GetChatControlsConfiguration), arg0)
}

// GetChatControlsConfigurationPages mocks base method
func (m *MockQBusinessAPI) GetChatControlsConfigurationPages(arg0 *qbusiness.GetChatControlsConfigurationInput, arg1 func(*qbusiness.GetChatControlsConfigurationOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatControlsConfigurationPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetChatControlsConfigurationPages indicates an expected call of GetChatControlsConfigurationPages
func (mr *MockQBusinessAPIMockRecorder) GetChatControlsConfigurationPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatControlsConfigurationPages", reflect.TypeOf((*MockQBusinessAPI)(nil).GetChatControlsConfigurationPages), arg0, arg1)
}

// GetChatControlsConfigurationPagesWithContext mocks base method
func (m *MockQBusinessAPI) GetChatControlsConfigurationPagesWithContext(arg0 context.Context, arg1 *qbusiness.GetChatControlsConfigurationInput, arg2 func(*qbusiness.GetChatControlsConfigurationOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChatControlsConfigurationPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetChatControlsConfigurationPagesWithContext indicates an expected call of GetChatControlsConfigurationPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) GetChatControlsConfigurationPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatControlsConfigurationPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).GetChatControlsConfigurationPagesWithContext), varargs...)
}

// GetChatControlsConfigurationRequest mocks base method
func (m *MockQBusinessAPI) GetChatControlsConfigurationRequest(arg0 *qbusiness.GetChatControlsConfigurationInput) (*request.Request, *qbusiness.GetChatControlsConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatControlsConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.GetChatControlsConfigurationOutput)
	return ret0, ret1
}

// GetChatControlsConfigurationRequest indicates an expected call of GetChatControlsConfigurationRequest
func (mr *MockQBusinessAPIMockRecorder) GetChatControlsConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatControlsConfigurationRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).GetChatControlsConfigurationRequest), arg0)
}

// GetChatControlsConfigurationWithContext mocks base method
func (m *MockQBusinessAPI) GetChatControlsConfigurationWithContext(arg0 context.Context, arg1 *qbusiness.GetChatControlsConfigurationInput, arg2 ...request.Option) (*qbusiness.GetChatControlsConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChatControlsConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.GetChatControlsConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatControlsConfigurationWithContext indicates an expected call of GetChatControlsConfigurationWithContext
func (mr *MockQBusinessAPIMockRecorder) GetChatControlsConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatControlsConfigurationWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).GetChatControlsConfigurationWithContext), varargs...)
}

// GetDataSource mocks base method
func (m *MockQBusinessAPI) GetDataSource(arg0 *qbusiness.GetDataSourceInput) (*qbusiness.GetDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSource", arg0)
	ret0, _ := ret[0].(*qbusiness.GetDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSource indicates an expected call of GetDataSource
func (mr *MockQBusinessAPIMockRecorder) GetDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSource", reflect.TypeOf((*MockQBusinessAPI)(nil).GetDataSource), arg0)
}

// GetDataSourceRequest mocks base method
func (m *MockQBusinessAPI) GetDataSourceRequest(arg0 *qbusiness.GetDataSourceInput) (*request.Request, *qbusiness.GetDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.GetDataSourceOutput)
	return ret0, ret1
}

// GetDataSourceRequest indicates an expected call of GetDataSourceRequest
func (mr *MockQBusinessAPIMockRecorder) GetDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).GetDataSourceRequest), arg0)
}

// GetDataSourceWithContext mocks base method
func (m *MockQBusinessAPI) GetDataSourceWithContext(arg0 context.Context, arg1 *qbusiness.GetDataSourceInput, arg2 ...request.Option) (*qbusiness.GetDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.GetDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSourceWithContext indicates an expected call of GetDataSourceWithContext
func (mr *MockQBusinessAPIMockRecorder) GetDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).GetDataSourceWithContext), varargs...)
}

// GetGroup mocks base method
func (m *MockQBusinessAPI) GetGroup(arg0 *qbusiness.GetGroupInput) (*qbusiness.GetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0)
	ret0, _ := ret[0].(*qbusiness.GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockQBusinessAPIMockRecorder) GetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockQBusinessAPI)(nil).GetGroup), arg0)
}

// GetGroupRequest mocks base method
func (m *MockQBusinessAPI) GetGroupRequest(arg0 *qbusiness.GetGroupInput) (*request.Request, *qbusiness.GetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.GetGroupOutput)
	return ret0, ret1
}

// GetGroupRequest indicates an expected call of GetGroupRequest
func (mr *MockQBusinessAPIMockRecorder) GetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).GetGroupRequest), arg0)
}

// GetGroupWithContext mocks base method
func (m *MockQBusinessAPI) GetGroupWithContext(arg0 context.Context, arg1 *qbusiness.GetGroupInput, arg2 ...request.Option) (*qbusiness.GetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupWithContext indicates an expected call of GetGroupWithContext
func (mr *MockQBusinessAPIMockRecorder) GetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).GetGroupWithContext), varargs...)
}

// GetIndex mocks base method
func (m *MockQBusinessAPI) GetIndex(arg0 *qbusiness.GetIndexInput) (*qbusiness.GetIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", arg0)
	ret0, _ := ret[0].(*qbusiness.GetIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex
func (mr *MockQBusinessAPIMockRecorder) GetIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockQBusinessAPI)(nil).GetIndex), arg0)
}

// GetIndexRequest mocks base method
func (m *MockQBusinessAPI) GetIndexRequest(arg0 *qbusiness.GetIndexInput) (*request.Request, *qbusiness.GetIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.GetIndexOutput)
	return ret0, ret1
}

// GetIndexRequest indicates an expected call of GetIndexRequest
func (mr *MockQBusinessAPIMockRecorder) GetIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).GetIndexRequest), arg0)
}

// GetIndexWithContext mocks base method
func (m *MockQBusinessAPI) GetIndexWithContext(arg0 context.Context, arg1 *qbusiness.GetIndexInput, arg2 ...request.Option) (*qbusiness.GetIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIndexWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.GetIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexWithContext indicates an expected call of GetIndexWithContext
func (mr *MockQBusinessAPIMockRecorder) GetIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).GetIndexWithContext), varargs...)
}

// GetPlugin mocks base method
func (m *MockQBusinessAPI) GetPlugin(arg0 *qbusiness.GetPluginInput) (*qbusiness.GetPluginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugin", arg0)
	ret0, _ := ret[0].(*qbusiness.GetPluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlugin indicates an expected call of GetPlugin
func (mr *MockQBusinessAPIMockRecorder) GetPlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugin", reflect.TypeOf((*MockQBusinessAPI)(nil).GetPlugin), arg0)
}

// GetPluginRequest mocks base method
func (m *MockQBusinessAPI) GetPluginRequest(arg0 *qbusiness.GetPluginInput) (*request.Request, *qbusiness.GetPluginOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.GetPluginOutput)
	return ret0, ret1
}

// GetPluginRequest indicates an expected call of GetPluginRequest
func (mr *MockQBusinessAPIMockRecorder) GetPluginRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).GetPluginRequest), arg0)
}

// GetPluginWithContext mocks base method
func (m *MockQBusinessAPI) GetPluginWithContext(arg0 context.Context, arg1 *qbusiness.GetPluginInput, arg2 ...request.Option) (*qbusiness.GetPluginOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPluginWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.GetPluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginWithContext indicates an expected call of GetPluginWithContext
func (mr *MockQBusinessAPIMockRecorder) GetPluginWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).GetPluginWithContext), varargs...)
}

// GetRetriever mocks base method
func (m *MockQBusinessAPI) GetRetriever(arg0 *qbusiness.GetRetrieverInput) (*qbusiness.GetRetrieverOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetriever", arg0)
	ret0, _ := ret[0].(*qbusiness.GetRetrieverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetriever indicates an expected call of GetRetriever
func (mr *MockQBusinessAPIMockRecorder) GetRetriever(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetriever", reflect.TypeOf((*MockQBusinessAPI)(nil).GetRetriever), arg0)
}

// GetRetrieverRequest mocks base method
func (m *MockQBusinessAPI) GetRetrieverRequest(arg0 *qbusiness.GetRetrieverInput) (*request.Request, *qbusiness.GetRetrieverOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetrieverRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.GetRetrieverOutput)
	return ret0, ret1
}

// GetRetrieverRequest indicates an expected call of GetRetrieverRequest
func (mr *MockQBusinessAPIMockRecorder) GetRetrieverRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetrieverRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).GetRetrieverRequest), arg0)
}

// GetRetrieverWithContext mocks base method
func (m *MockQBusinessAPI) GetRetrieverWithContext(arg0 context.Context, arg1 *qbusiness.GetRetrieverInput, arg2 ...request.Option) (*qbusiness.GetRetrieverOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRetrieverWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.GetRetrieverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetrieverWithContext indicates an expected call of GetRetrieverWithContext
func (mr *MockQBusinessAPIMockRecorder) GetRetrieverWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetrieverWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).GetRetrieverWithContext), varargs...)
}

// GetUser mocks base method
func (m *MockQBusinessAPI) GetUser(arg0 *qbusiness.GetUserInput) (*qbusiness.GetUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*qbusiness.GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockQBusinessAPIMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQBusinessAPI)(nil).GetUser), arg0)
}

// GetUserRequest mocks base method
func (m *MockQBusinessAPI) GetUserRequest(arg0 *qbusiness.GetUserInput) (*request.Request, *qbusiness.GetUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.GetUserOutput)
	return ret0, ret1
}

// GetUserRequest indicates an expected call of GetUserRequest
func (mr *MockQBusinessAPIMockRecorder) GetUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).GetUserRequest), arg0)
}

// GetUserWithContext mocks base method
func (m *MockQBusinessAPI) GetUserWithContext(arg0 context.Context, arg1 *qbusiness.GetUserInput, arg2 ...request.Option) (*qbusiness.GetUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithContext indicates an expected call of GetUserWithContext
func (mr *MockQBusinessAPIMockRecorder) GetUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).GetUserWithContext), varargs...)
}

// GetWebExperience mocks base method
func (m *MockQBusinessAPI) GetWebExperience(arg0 *qbusiness.GetWebExperienceInput) (*qbusiness.GetWebExperienceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebExperience", arg0)
	ret0, _ := ret[0].(*qbusiness.GetWebExperienceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebExperience indicates an expected call of GetWebExperience
func (mr *MockQBusinessAPIMockRecorder) GetWebExperience(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebExperience", reflect.TypeOf((*MockQBusinessAPI)(nil).GetWebExperience), arg0)
}

// GetWebExperienceRequest mocks base method
func (m *MockQBusinessAPI) GetWebExperienceRequest(arg0 *qbusiness.GetWebExperienceInput) (*request.Request, *qbusiness.GetWebExperienceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebExperienceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.GetWebExperienceOutput)
	return ret0, ret1
}

// GetWebExperienceRequest indicates an expected call of GetWebExperienceRequest
func (mr *MockQBusinessAPIMockRecorder) GetWebExperienceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebExperienceRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).GetWebExperienceRequest), arg0)
}

// GetWebExperienceWithContext mocks base method
func (m *MockQBusinessAPI) GetWebExperienceWithContext(arg0 context.Context, arg1 *qbusiness.GetWebExperienceInput, arg2 ...request.Option) (*qbusiness.GetWebExperienceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWebExperienceWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.GetWebExperienceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebExperienceWithContext indicates an expected call of GetWebExperienceWithContext
func (mr *MockQBusinessAPIMockRecorder) GetWebExperienceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebExperienceWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).GetWebExperienceWithContext), varargs...)
}

// ListApplications mocks base method
func (m *MockQBusinessAPI) ListApplications(arg0 *qbusiness.ListApplicationsInput) (*qbusiness.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*qbusiness.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockQBusinessAPIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockQBusinessAPI)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method
func (m *MockQBusinessAPI) ListApplicationsPages(arg0 *qbusiness.ListApplicationsInput, arg1 func(*qbusiness.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages
func (mr *MockQBusinessAPIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListApplicationsInput, arg2 func(*qbusiness.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method
func (m *MockQBusinessAPI) ListApplicationsRequest(arg0 *qbusiness.ListApplicationsInput) (*request.Request, *qbusiness.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest
func (mr *MockQBusinessAPIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method
func (m *MockQBusinessAPI) ListApplicationsWithContext(arg0 context.Context, arg1 *qbusiness.ListApplicationsInput, arg2 ...request.Option) (*qbusiness.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext
func (mr *MockQBusinessAPIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListApplicationsWithContext), varargs...)
}

// ListConversations mocks base method
func (m *MockQBusinessAPI) ListConversations(arg0 *qbusiness.ListConversationsInput) (*qbusiness.ListConversationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConversations", arg0)
	ret0, _ := ret[0].(*qbusiness.ListConversationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConversations indicates an expected call of ListConversations
func (mr *MockQBusinessAPIMockRecorder) ListConversations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConversations", reflect.TypeOf((*MockQBusinessAPI)(nil).ListConversations), arg0)
}

// ListConversationsPages mocks base method
func (m *MockQBusinessAPI) ListConversationsPages(arg0 *qbusiness.ListConversationsInput, arg1 func(*qbusiness.ListConversationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConversationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConversationsPages indicates an expected call of ListConversationsPages
func (mr *MockQBusinessAPIMockRecorder) ListConversationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConversationsPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListConversationsPages), arg0, arg1)
}

// ListConversationsPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListConversationsPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListConversationsInput, arg2 func(*qbusiness.ListConversationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConversationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConversationsPagesWithContext indicates an expected call of ListConversationsPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListConversationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConversationsPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListConversationsPagesWithContext), varargs...)
}

// ListConversationsRequest mocks base method
func (m *MockQBusinessAPI) ListConversationsRequest(arg0 *qbusiness.ListConversationsInput) (*request.Request, *qbusiness.ListConversationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConversationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListConversationsOutput)
	return ret0, ret1
}

// ListConversationsRequest indicates an expected call of ListConversationsRequest
func (mr *MockQBusinessAPIMockRecorder) ListConversationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConversationsRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListConversationsRequest), arg0)
}

// ListConversationsWithContext mocks base method
func (m *MockQBusinessAPI) ListConversationsWithContext(arg0 context.Context, arg1 *qbusiness.ListConversationsInput, arg2 ...request.Option) (*qbusiness.ListConversationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConversationsWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListConversationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConversationsWithContext indicates an expected call of ListConversationsWithContext
func (mr *MockQBusinessAPIMockRecorder) ListConversationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConversationsWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListConversationsWithContext), varargs...)
}

// ListDataSourceSyncJobs mocks base method
func (m *MockQBusinessAPI) ListDataSourceSyncJobs(arg0 *qbusiness.ListDataSourceSyncJobsInput) (*qbusiness.ListDataSourceSyncJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourceSyncJobs", arg0)
	ret0, _ := ret[0].(*qbusiness.ListDataSourceSyncJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSourceSyncJobs indicates an expected call of ListDataSourceSyncJobs
func (mr *MockQBusinessAPIMockRecorder) ListDataSourceSyncJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceSyncJobs", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDataSourceSyncJobs), arg0)
}

// ListDataSourceSyncJobsPages mocks base method
func (m *MockQBusinessAPI) ListDataSourceSyncJobsPages(arg0 *qbusiness.ListDataSourceSyncJobsInput, arg1 func(*qbusiness.ListDataSourceSyncJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourceSyncJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourceSyncJobsPages indicates an expected call of ListDataSourceSyncJobsPages
func (mr *MockQBusinessAPIMockRecorder) ListDataSourceSyncJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceSyncJobsPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDataSourceSyncJobsPages), arg0, arg1)
}

// ListDataSourceSyncJobsPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListDataSourceSyncJobsPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListDataSourceSyncJobsInput, arg2 func(*qbusiness.ListDataSourceSyncJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourceSyncJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourceSyncJobsPagesWithContext indicates an expected call of ListDataSourceSyncJobsPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListDataSourceSyncJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceSyncJobsPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDataSourceSyncJobsPagesWithContext), varargs...)
}

// ListDataSourceSyncJobsRequest mocks base method
func (m *MockQBusinessAPI) ListDataSourceSyncJobsRequest(arg0 *qbusiness.ListDataSourceSyncJobsInput) (*request.Request, *qbusiness.ListDataSourceSyncJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourceSyncJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListDataSourceSyncJobsOutput)
	return ret0, ret1
}

// ListDataSourceSyncJobsRequest indicates an expected call of ListDataSourceSyncJobsRequest
func (mr *MockQBusinessAPIMockRecorder) ListDataSourceSyncJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceSyncJobsRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDataSourceSyncJobsRequest), arg0)
}

// ListDataSourceSyncJobsWithContext mocks base method
func (m *MockQBusinessAPI) ListDataSourceSyncJobsWithContext(arg0 context.Context, arg1 *qbusiness.ListDataSourceSyncJobsInput, arg2 ...request.Option) (*qbusiness.ListDataSourceSyncJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourceSyncJobsWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListDataSourceSyncJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSourceSyncJobsWithContext indicates an expected call of ListDataSourceSyncJobsWithContext
func (mr *MockQBusinessAPIMockRecorder) ListDataSourceSyncJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceSyncJobsWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDataSourceSyncJobsWithContext), varargs...)
}

// ListDataSources mocks base method
func (m *MockQBusinessAPI) ListDataSources(arg0 *qbusiness.ListDataSourcesInput) (*qbusiness.ListDataSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSources", arg0)
	ret0, _ := ret[0].(*qbusiness.ListDataSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSources indicates an expected call of ListDataSources
func (mr *MockQBusinessAPIMockRecorder) ListDataSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSources", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDataSources), arg0)
}

// ListDataSourcesPages mocks base method
func (m *MockQBusinessAPI) ListDataSourcesPages(arg0 *qbusiness.ListDataSourcesInput, arg1 func(*qbusiness.ListDataSourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourcesPages indicates an expected call of ListDataSourcesPages
func (mr *MockQBusinessAPIMockRecorder) ListDataSourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDataSourcesPages), arg0, arg1)
}

// ListDataSourcesPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListDataSourcesPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListDataSourcesInput, arg2 func(*qbusiness.ListDataSourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourcesPagesWithContext indicates an expected call of ListDataSourcesPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListDataSourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDataSourcesPagesWithContext), varargs...)
}

// ListDataSourcesRequest mocks base method
func (m *MockQBusinessAPI) ListDataSourcesRequest(arg0 *qbusiness.ListDataSourcesInput) (*request.Request, *qbusiness.ListDataSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListDataSourcesOutput)
	return ret0, ret1
}

// ListDataSourcesRequest indicates an expected call of ListDataSourcesRequest
func (mr *MockQBusinessAPIMockRecorder) ListDataSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDataSourcesRequest), arg0)
}

// ListDataSourcesWithContext mocks base method
func (m *MockQBusinessAPI) ListDataSourcesWithContext(arg0 context.Context, arg1 *qbusiness.ListDataSourcesInput, arg2 ...request.Option) (*qbusiness.ListDataSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListDataSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSourcesWithContext indicates an expected call of ListDataSourcesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListDataSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDataSourcesWithContext), varargs...)
}

// ListDocuments mocks base method
func (m *MockQBusinessAPI) ListDocuments(arg0 *qbusiness.ListDocumentsInput) (*qbusiness.ListDocumentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDocuments", arg0)
	ret0, _ := ret[0].(*qbusiness.ListDocumentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDocuments indicates an expected call of ListDocuments
func (mr *MockQBusinessAPIMockRecorder) ListDocuments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocuments", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDocuments), arg0)
}

// ListDocumentsPages mocks base method
func (m *MockQBusinessAPI) ListDocumentsPages(arg0 *qbusiness.ListDocumentsInput, arg1 func(*qbusiness.ListDocumentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDocumentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDocumentsPages indicates an expected call of ListDocumentsPages
func (mr *MockQBusinessAPIMockRecorder) ListDocumentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocumentsPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDocumentsPages), arg0, arg1)
}

// ListDocumentsPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListDocumentsPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListDocumentsInput, arg2 func(*qbusiness.ListDocumentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDocumentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDocumentsPagesWithContext indicates an expected call of ListDocumentsPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListDocumentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocumentsPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDocumentsPagesWithContext), varargs...)
}

// ListDocumentsRequest mocks base method
func (m *MockQBusinessAPI) ListDocumentsRequest(arg0 *qbusiness.ListDocumentsInput) (*request.Request, *qbusiness.ListDocumentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDocumentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListDocumentsOutput)
	return ret0, ret1
}

// ListDocumentsRequest indicates an expected call of ListDocumentsRequest
func (mr *MockQBusinessAPIMockRecorder) ListDocumentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocumentsRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDocumentsRequest), arg0)
}

// ListDocumentsWithContext mocks base method
func (m *MockQBusinessAPI) ListDocumentsWithContext(arg0 context.Context, arg1 *qbusiness.ListDocumentsInput, arg2 ...request.Option) (*qbusiness.ListDocumentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDocumentsWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListDocumentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDocumentsWithContext indicates an expected call of ListDocumentsWithContext
func (mr *MockQBusinessAPIMockRecorder) ListDocumentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocumentsWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListDocumentsWithContext), varargs...)
}

// ListGroups mocks base method
func (m *MockQBusinessAPI) ListGroups(arg0 *qbusiness.ListGroupsInput) (*qbusiness.ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", arg0)
	ret0, _ := ret[0].(*qbusiness.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups
func (mr *MockQBusinessAPIMockRecorder) ListGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockQBusinessAPI)(nil).ListGroups), arg0)
}

// ListGroupsPages mocks base method
func (m *MockQBusinessAPI) ListGroupsPages(arg0 *qbusiness.ListGroupsInput, arg1 func(*qbusiness.ListGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupsPages indicates an expected call of ListGroupsPages
func (mr *MockQBusinessAPIMockRecorder) ListGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListGroupsPages), arg0, arg1)
}

// ListGroupsPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListGroupsPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListGroupsInput, arg2 func(*qbusiness.ListGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupsPagesWithContext indicates an expected call of ListGroupsPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListGroupsPagesWithContext), varargs...)
}

// ListGroupsRequest mocks base method
func (m *MockQBusinessAPI) ListGroupsRequest(arg0 *qbusiness.ListGroupsInput) (*request.Request, *qbusiness.ListGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListGroupsOutput)
	return ret0, ret1
}

// ListGroupsRequest indicates an expected call of ListGroupsRequest
func (mr *MockQBusinessAPIMockRecorder) ListGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListGroupsRequest), arg0)
}

// ListGroupsWithContext mocks base method
func (m *MockQBusinessAPI) ListGroupsWithContext(arg0 context.Context, arg1 *qbusiness.ListGroupsInput, arg2 ...request.Option) (*qbusiness.ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupsWithContext indicates an expected call of ListGroupsWithContext
func (mr *MockQBusinessAPIMockRecorder) ListGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListGroupsWithContext), varargs...)
}

// ListIndices mocks base method
func (m *MockQBusinessAPI) ListIndices(arg0 *qbusiness.ListIndicesInput) (*qbusiness.ListIndicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndices", arg0)
	ret0, _ := ret[0].(*qbusiness.ListIndicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndices indicates an expected call of ListIndices
func (mr *MockQBusinessAPIMockRecorder) ListIndices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndices", reflect.TypeOf((*MockQBusinessAPI)(nil).ListIndices), arg0)
}

// ListIndicesPages mocks base method
func (m *MockQBusinessAPI) ListIndicesPages(arg0 *qbusiness.ListIndicesInput, arg1 func(*qbusiness.ListIndicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIndicesPages indicates an expected call of ListIndicesPages
func (mr *MockQBusinessAPIMockRecorder) ListIndicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndicesPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListIndicesPages), arg0, arg1)
}

// ListIndicesPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListIndicesPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListIndicesInput, arg2 func(*qbusiness.ListIndicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIndicesPagesWithContext indicates an expected call of ListIndicesPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListIndicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndicesPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListIndicesPagesWithContext), varargs...)
}

// ListIndicesRequest mocks base method
func (m *MockQBusinessAPI) ListIndicesRequest(arg0 *qbusiness.ListIndicesInput) (*request.Request, *qbusiness.ListIndicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListIndicesOutput)
	return ret0, ret1
}

// ListIndicesRequest indicates an expected call of ListIndicesRequest
func (mr *MockQBusinessAPIMockRecorder) ListIndicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndicesRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListIndicesRequest), arg0)
}

// ListIndicesWithContext mocks base method
func (m *MockQBusinessAPI) ListIndicesWithContext(arg0 context.Context, arg1 *qbusiness.ListIndicesInput, arg2 ...request.Option) (*qbusiness.ListIndicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndicesWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListIndicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndicesWithContext indicates an expected call of ListIndicesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListIndicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndicesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListIndicesWithContext), varargs...)
}

// ListMessages mocks base method
func (m *MockQBusinessAPI) ListMessages(arg0 *qbusiness.ListMessagesInput) (*qbusiness.ListMessagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessages", arg0)
	ret0, _ := ret[0].(*qbusiness.ListMessagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessages indicates an expected call of ListMessages
func (mr *MockQBusinessAPIMockRecorder) ListMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListMessages), arg0)
}

// ListMessagesPages mocks base method
func (m *MockQBusinessAPI) ListMessagesPages(arg0 *qbusiness.ListMessagesInput, arg1 func(*qbusiness.ListMessagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMessagesPages indicates an expected call of ListMessagesPages
func (mr *MockQBusinessAPIMockRecorder) ListMessagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessagesPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListMessagesPages), arg0, arg1)
}

// ListMessagesPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListMessagesPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListMessagesInput, arg2 func(*qbusiness.ListMessagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMessagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMessagesPagesWithContext indicates an expected call of ListMessagesPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListMessagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessagesPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListMessagesPagesWithContext), varargs...)
}

// ListMessagesRequest mocks base method
func (m *MockQBusinessAPI) ListMessagesRequest(arg0 *qbusiness.ListMessagesInput) (*request.Request, *qbusiness.ListMessagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListMessagesOutput)
	return ret0, ret1
}

// ListMessagesRequest indicates an expected call of ListMessagesRequest
func (mr *MockQBusinessAPIMockRecorder) ListMessagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessagesRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListMessagesRequest), arg0)
}

// ListMessagesWithContext mocks base method
func (m *MockQBusinessAPI) ListMessagesWithContext(arg0 context.Context, arg1 *qbusiness.ListMessagesInput, arg2 ...request.Option) (*qbusiness.ListMessagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMessagesWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListMessagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessagesWithContext indicates an expected call of ListMessagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListMessagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListMessagesWithContext), varargs...)
}

// ListPlugins mocks base method
func (m *MockQBusinessAPI) ListPlugins(arg0 *qbusiness.ListPluginsInput) (*qbusiness.ListPluginsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlugins", arg0)
	ret0, _ := ret[0].(*qbusiness.ListPluginsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlugins indicates an expected call of ListPlugins
func (mr *MockQBusinessAPIMockRecorder) ListPlugins(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlugins", reflect.TypeOf((*MockQBusinessAPI)(nil).ListPlugins), arg0)
}

// ListPluginsPages mocks base method
func (m *MockQBusinessAPI) ListPluginsPages(arg0 *qbusiness.ListPluginsInput, arg1 func(*qbusiness.ListPluginsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPluginsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPluginsPages indicates an expected call of ListPluginsPages
func (mr *MockQBusinessAPIMockRecorder) ListPluginsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPluginsPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListPluginsPages), arg0, arg1)
}

// ListPluginsPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListPluginsPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListPluginsInput, arg2 func(*qbusiness.ListPluginsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPluginsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPluginsPagesWithContext indicates an expected call of ListPluginsPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListPluginsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPluginsPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListPluginsPagesWithContext), varargs...)
}

// ListPluginsRequest mocks base method
func (m *MockQBusinessAPI) ListPluginsRequest(arg0 *qbusiness.ListPluginsInput) (*request.Request, *qbusiness.ListPluginsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPluginsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListPluginsOutput)
	return ret0, ret1
}

// ListPluginsRequest indicates an expected call of ListPluginsRequest
func (mr *MockQBusinessAPIMockRecorder) ListPluginsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPluginsRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListPluginsRequest), arg0)
}

// ListPluginsWithContext mocks base method
func (m *MockQBusinessAPI) ListPluginsWithContext(arg0 context.Context, arg1 *qbusiness.ListPluginsInput, arg2 ...request.Option) (*qbusiness.ListPluginsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPluginsWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListPluginsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPluginsWithContext indicates an expected call of ListPluginsWithContext
func (mr *MockQBusinessAPIMockRecorder) ListPluginsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPluginsWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListPluginsWithContext), varargs...)
}

// ListRetrievers mocks base method
func (m *MockQBusinessAPI) ListRetrievers(arg0 *qbusiness.ListRetrieversInput) (*qbusiness.ListRetrieversOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRetrievers", arg0)
	ret0, _ := ret[0].(*qbusiness.ListRetrieversOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRetrievers indicates an expected call of ListRetrievers
func (mr *MockQBusinessAPIMockRecorder) ListRetrievers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetrievers", reflect.TypeOf((*MockQBusinessAPI)(nil).ListRetrievers), arg0)
}

// ListRetrieversPages mocks base method
func (m *MockQBusinessAPI) ListRetrieversPages(arg0 *qbusiness.ListRetrieversInput, arg1 func(*qbusiness.ListRetrieversOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRetrieversPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRetrieversPages indicates an expected call of ListRetrieversPages
func (mr *MockQBusinessAPIMockRecorder) ListRetrieversPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetrieversPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListRetrieversPages), arg0, arg1)
}

// ListRetrieversPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListRetrieversPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListRetrieversInput, arg2 func(*qbusiness.ListRetrieversOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRetrieversPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRetrieversPagesWithContext indicates an expected call of ListRetrieversPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListRetrieversPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetrieversPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListRetrieversPagesWithContext), varargs...)
}

// ListRetrieversRequest mocks base method
func (m *MockQBusinessAPI) ListRetrieversRequest(arg0 *qbusiness.ListRetrieversInput) (*request.Request, *qbusiness.ListRetrieversOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRetrieversRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListRetrieversOutput)
	return ret0, ret1
}

// ListRetrieversRequest indicates an expected call of ListRetrieversRequest
func (mr *MockQBusinessAPIMockRecorder) ListRetrieversRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetrieversRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListRetrieversRequest), arg0)
}

// ListRetrieversWithContext mocks base method
func (m *MockQBusinessAPI) ListRetrieversWithContext(arg0 context.Context, arg1 *qbusiness.ListRetrieversInput, arg2 ...request.Option) (*qbusiness.ListRetrieversOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRetrieversWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListRetrieversOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRetrieversWithContext indicates an expected call of ListRetrieversWithContext
func (mr *MockQBusinessAPIMockRecorder) ListRetrieversWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetrieversWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListRetrieversWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockQBusinessAPI) ListTagsForResource(arg0 *qbusiness.ListTagsForResourceInput) (*qbusiness.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*qbusiness.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockQBusinessAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockQBusinessAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockQBusinessAPI) ListTagsForResourceRequest(arg0 *qbusiness.ListTagsForResourceInput) (*request.Request, *qbusiness.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockQBusinessAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockQBusinessAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *qbusiness.ListTagsForResourceInput, arg2 ...request.Option) (*qbusiness.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockQBusinessAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListWebExperiences mocks base method
func (m *MockQBusinessAPI) ListWebExperiences(arg0 *qbusiness.ListWebExperiencesInput) (*qbusiness.ListWebExperiencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebExperiences", arg0)
	ret0, _ := ret[0].(*qbusiness.ListWebExperiencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebExperiences indicates an expected call of ListWebExperiences
func (mr *MockQBusinessAPIMockRecorder) ListWebExperiences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebExperiences", reflect.TypeOf((*MockQBusinessAPI)(nil).ListWebExperiences), arg0)
}

// ListWebExperiencesPages mocks base method
func (m *MockQBusinessAPI) ListWebExperiencesPages(arg0 *qbusiness.ListWebExperiencesInput, arg1 func(*qbusiness.ListWebExperiencesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebExperiencesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWebExperiencesPages indicates an expected call of ListWebExperiencesPages
func (mr *MockQBusinessAPIMockRecorder) ListWebExperiencesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebExperiencesPages", reflect.TypeOf((*MockQBusinessAPI)(nil).ListWebExperiencesPages), arg0, arg1)
}

// ListWebExperiencesPagesWithContext mocks base method
func (m *MockQBusinessAPI) ListWebExperiencesPagesWithContext(arg0 context.Context, arg1 *qbusiness.ListWebExperiencesInput, arg2 func(*qbusiness.ListWebExperiencesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWebExperiencesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWebExperiencesPagesWithContext indicates an expected call of ListWebExperiencesPagesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListWebExperiencesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebExperiencesPagesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListWebExperiencesPagesWithContext), varargs...)
}

// ListWebExperiencesRequest mocks base method
func (m *MockQBusinessAPI) ListWebExperiencesRequest(arg0 *qbusiness.ListWebExperiencesInput) (*request.Request, *qbusiness.ListWebExperiencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebExperiencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.ListWebExperiencesOutput)
	return ret0, ret1
}

// ListWebExperiencesRequest indicates an expected call of ListWebExperiencesRequest
func (mr *MockQBusinessAPIMockRecorder) ListWebExperiencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebExperiencesRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).ListWebExperiencesRequest), arg0)
}

// ListWebExperiencesWithContext mocks base method
func (m *MockQBusinessAPI) ListWebExperiencesWithContext(arg0 context.Context, arg1 *qbusiness.ListWebExperiencesInput, arg2 ...request.Option) (*qbusiness.ListWebExperiencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWebExperiencesWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.ListWebExperiencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebExperiencesWithContext indicates an expected call of ListWebExperiencesWithContext
func (mr *MockQBusinessAPIMockRecorder) ListWebExperiencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebExperiencesWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).ListWebExperiencesWithContext), varargs...)
}

// PutFeedback mocks base method
func (m *MockQBusinessAPI) PutFeedback(arg0 *qbusiness.PutFeedbackInput) (*qbusiness.PutFeedbackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFeedback", arg0)
	ret0, _ := ret[0].(*qbusiness.PutFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFeedback indicates an expected call of PutFeedback
func (mr *MockQBusinessAPIMockRecorder) PutFeedback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeedback", reflect.TypeOf((*MockQBusinessAPI)(nil).PutFeedback), arg0)
}

// PutFeedbackRequest mocks base method
func (m *MockQBusinessAPI) PutFeedbackRequest(arg0 *qbusiness.PutFeedbackInput) (*request.Request, *qbusiness.PutFeedbackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFeedbackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.PutFeedbackOutput)
	return ret0, ret1
}

// PutFeedbackRequest indicates an expected call of PutFeedbackRequest
func (mr *MockQBusinessAPIMockRecorder) PutFeedbackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeedbackRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).PutFeedbackRequest), arg0)
}

// PutFeedbackWithContext mocks base method
func (m *MockQBusinessAPI) PutFeedbackWithContext(arg0 context.Context, arg1 *qbusiness.PutFeedbackInput, arg2 ...request.Option) (*qbusiness.PutFeedbackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutFeedbackWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.PutFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFeedbackWithContext indicates an expected call of PutFeedbackWithContext
func (mr *MockQBusinessAPIMockRecorder) PutFeedbackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeedbackWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).PutFeedbackWithContext), varargs...)
}

// PutGroup mocks base method
func (m *MockQBusinessAPI) PutGroup(arg0 *qbusiness.PutGroupInput) (*qbusiness.PutGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGroup", arg0)
	ret0, _ := ret[0].(*qbusiness.PutGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGroup indicates an expected call of PutGroup
func (mr *MockQBusinessAPIMockRecorder) PutGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGroup", reflect.TypeOf((*MockQBusinessAPI)(nil).PutGroup), arg0)
}

// PutGroupRequest mocks base method
func (m *MockQBusinessAPI) PutGroupRequest(arg0 *qbusiness.PutGroupInput) (*request.Request, *qbusiness.PutGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.PutGroupOutput)
	return ret0, ret1
}

// PutGroupRequest indicates an expected call of PutGroupRequest
func (mr *MockQBusinessAPIMockRecorder) PutGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGroupRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).PutGroupRequest), arg0)
}

// PutGroupWithContext mocks base method
func (m *MockQBusinessAPI) PutGroupWithContext(arg0 context.Context, arg1 *qbusiness.PutGroupInput, arg2 ...request.Option) (*qbusiness.PutGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutGroupWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.PutGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGroupWithContext indicates an expected call of PutGroupWithContext
func (mr *MockQBusinessAPIMockRecorder) PutGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGroupWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).PutGroupWithContext), varargs...)
}

// StartDataSourceSyncJob mocks base method
func (m *MockQBusinessAPI) StartDataSourceSyncJob(arg0 *qbusiness.StartDataSourceSyncJobInput) (*qbusiness.StartDataSourceSyncJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDataSourceSyncJob", arg0)
	ret0, _ := ret[0].(*qbusiness.StartDataSourceSyncJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataSourceSyncJob indicates an expected call of StartDataSourceSyncJob
func (mr *MockQBusinessAPIMockRecorder) StartDataSourceSyncJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataSourceSyncJob", reflect.TypeOf((*MockQBusinessAPI)(nil).StartDataSourceSyncJob), arg0)
}

// StartDataSourceSyncJobRequest mocks base method
func (m *MockQBusinessAPI) StartDataSourceSyncJobRequest(arg0 *qbusiness.StartDataSourceSyncJobInput) (*request.Request, *qbusiness.StartDataSourceSyncJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDataSourceSyncJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.StartDataSourceSyncJobOutput)
	return ret0, ret1
}

// StartDataSourceSyncJobRequest indicates an expected call of StartDataSourceSyncJobRequest
func (mr *MockQBusinessAPIMockRecorder) StartDataSourceSyncJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataSourceSyncJobRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).StartDataSourceSyncJobRequest), arg0)
}

// StartDataSourceSyncJobWithContext mocks base method
func (m *MockQBusinessAPI) StartDataSourceSyncJobWithContext(arg0 context.Context, arg1 *qbusiness.StartDataSourceSyncJobInput, arg2 ...request.Option) (*qbusiness.StartDataSourceSyncJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDataSourceSyncJobWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.StartDataSourceSyncJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataSourceSyncJobWithContext indicates an expected call of StartDataSourceSyncJobWithContext
func (mr *MockQBusinessAPIMockRecorder) StartDataSourceSyncJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataSourceSyncJobWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).StartDataSourceSyncJobWithContext), varargs...)
}

// StopDataSourceSyncJob mocks base method
func (m *MockQBusinessAPI) StopDataSourceSyncJob(arg0 *qbusiness.StopDataSourceSyncJobInput) (*qbusiness.StopDataSourceSyncJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDataSourceSyncJob", arg0)
	ret0, _ := ret[0].(*qbusiness.StopDataSourceSyncJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDataSourceSyncJob indicates an expected call of StopDataSourceSyncJob
func (mr *MockQBusinessAPIMockRecorder) StopDataSourceSyncJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDataSourceSyncJob", reflect.TypeOf((*MockQBusinessAPI)(nil).StopDataSourceSyncJob), arg0)
}

// StopDataSourceSyncJobRequest mocks base method
func (m *MockQBusinessAPI) StopDataSourceSyncJobRequest(arg0 *qbusiness.StopDataSourceSyncJobInput) (*request.Request, *qbusiness.StopDataSourceSyncJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDataSourceSyncJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.StopDataSourceSyncJobOutput)
	return ret0, ret1
}

// StopDataSourceSyncJobRequest indicates an expected call of StopDataSourceSyncJobRequest
func (mr *MockQBusinessAPIMockRecorder) StopDataSourceSyncJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDataSourceSyncJobRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).StopDataSourceSyncJobRequest), arg0)
}

// StopDataSourceSyncJobWithContext mocks base method
func (m *MockQBusinessAPI) StopDataSourceSyncJobWithContext(arg0 context.Context, arg1 *qbusiness.StopDataSourceSyncJobInput, arg2 ...request.Option) (*qbusiness.StopDataSourceSyncJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopDataSourceSyncJobWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.StopDataSourceSyncJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDataSourceSyncJobWithContext indicates an expected call of StopDataSourceSyncJobWithContext
func (mr *MockQBusinessAPIMockRecorder) StopDataSourceSyncJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDataSourceSyncJobWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).StopDataSourceSyncJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockQBusinessAPI) TagResource(arg0 *qbusiness.TagResourceInput) (*qbusiness.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*qbusiness.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockQBusinessAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockQBusinessAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockQBusinessAPI) TagResourceRequest(arg0 *qbusiness.TagResourceInput) (*request.Request, *qbusiness.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockQBusinessAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockQBusinessAPI) TagResourceWithContext(arg0 context.Context, arg1 *qbusiness.TagResourceInput, arg2 ...request.Option) (*qbusiness.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockQBusinessAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockQBusinessAPI) UntagResource(arg0 *qbusiness.UntagResourceInput) (*qbusiness.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*qbusiness.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockQBusinessAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockQBusinessAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockQBusinessAPI) UntagResourceRequest(arg0 *qbusiness.UntagResourceInput) (*request.Request, *qbusiness.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockQBusinessAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockQBusinessAPI) UntagResourceWithContext(arg0 context.Context, arg1 *qbusiness.UntagResourceInput, arg2 ...request.Option) (*qbusiness.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockQBusinessAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApplication mocks base method
func (m *MockQBusinessAPI) UpdateApplication(arg0 *qbusiness.UpdateApplicationInput) (*qbusiness.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0)
	ret0, _ := ret[0].(*qbusiness.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockQBusinessAPIMockRecorder) UpdateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateApplication), arg0)
}

// UpdateApplicationRequest mocks base method
func (m *MockQBusinessAPI) UpdateApplicationRequest(arg0 *qbusiness.UpdateApplicationInput) (*request.Request, *qbusiness.UpdateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.UpdateApplicationOutput)
	return ret0, ret1
}

// UpdateApplicationRequest indicates an expected call of UpdateApplicationRequest
func (mr *MockQBusinessAPIMockRecorder) UpdateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateApplicationRequest), arg0)
}

// UpdateApplicationWithContext mocks base method
func (m *MockQBusinessAPI) UpdateApplicationWithContext(arg0 context.Context, arg1 *qbusiness.UpdateApplicationInput, arg2 ...request.Option) (*qbusiness.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithContext indicates an expected call of UpdateApplicationWithContext
func (mr *MockQBusinessAPIMockRecorder) UpdateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateApplicationWithContext), varargs...)
}

// UpdateChatControlsConfiguration mocks base method
func (m *MockQBusinessAPI) UpdateChatControlsConfiguration(arg0 *qbusiness.UpdateChatControlsConfigurationInput) (*qbusiness.UpdateChatControlsConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChatControlsConfiguration", arg0)
	ret0, _ := ret[0].(*qbusiness.UpdateChatControlsConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChatControlsConfiguration indicates an expected call of UpdateChatControlsConfiguration
func (mr *MockQBusinessAPIMockRecorder) UpdateChatControlsConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatControlsConfiguration", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateChatControlsConfiguration), arg0)
}

// UpdateChatControlsConfigurationRequest mocks base method
func (m *MockQBusinessAPI) UpdateChatControlsConfigurationRequest(arg0 *qbusiness.UpdateChatControlsConfigurationInput) (*request.Request, *qbusiness.UpdateChatControlsConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChatControlsConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.UpdateChatControlsConfigurationOutput)
	return ret0, ret1
}

// UpdateChatControlsConfigurationRequest indicates an expected call of UpdateChatControlsConfigurationRequest
func (mr *MockQBusinessAPIMockRecorder) UpdateChatControlsConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatControlsConfigurationRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateChatControlsConfigurationRequest), arg0)
}

// UpdateChatControlsConfigurationWithContext mocks base method
func (m *MockQBusinessAPI) UpdateChatControlsConfigurationWithContext(arg0 context.Context, arg1 *qbusiness.UpdateChatControlsConfigurationInput, arg2 ...request.Option) (*qbusiness.UpdateChatControlsConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChatControlsConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.UpdateChatControlsConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChatControlsConfigurationWithContext indicates an expected call of UpdateChatControlsConfigurationWithContext
func (mr *MockQBusinessAPIMockRecorder) UpdateChatControlsConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatControlsConfigurationWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateChatControlsConfigurationWithContext), varargs...)
}

// UpdateDataSource mocks base method
func (m *MockQBusinessAPI) UpdateDataSource(arg0 *qbusiness.UpdateDataSourceInput) (*qbusiness.UpdateDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSource", arg0)
	ret0, _ := ret[0].(*qbusiness.UpdateDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSource indicates an expected call of UpdateDataSource
func (mr *MockQBusinessAPIMockRecorder) UpdateDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSource", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateDataSource), arg0)
}

// UpdateDataSourceRequest mocks base method
func (m *MockQBusinessAPI) UpdateDataSourceRequest(arg0 *qbusiness.UpdateDataSourceInput) (*request.Request, *qbusiness.UpdateDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.UpdateDataSourceOutput)
	return ret0, ret1
}

// UpdateDataSourceRequest indicates an expected call of UpdateDataSourceRequest
func (mr *MockQBusinessAPIMockRecorder) UpdateDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSourceRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateDataSourceRequest), arg0)
}

// UpdateDataSourceWithContext mocks base method
func (m *MockQBusinessAPI) UpdateDataSourceWithContext(arg0 context.Context, arg1 *qbusiness.UpdateDataSourceInput, arg2 ...request.Option) (*qbusiness.UpdateDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.UpdateDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSourceWithContext indicates an expected call of UpdateDataSourceWithContext
func (mr *MockQBusinessAPIMockRecorder) UpdateDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSourceWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateDataSourceWithContext), varargs...)
}

// UpdateIndex mocks base method
func (m *MockQBusinessAPI) UpdateIndex(arg0 *qbusiness.UpdateIndexInput) (*qbusiness.UpdateIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndex", arg0)
	ret0, _ := ret[0].(*qbusiness.UpdateIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIndex indicates an expected call of UpdateIndex
func (mr *MockQBusinessAPIMockRecorder) UpdateIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndex", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateIndex), arg0)
}

// UpdateIndexRequest mocks base method
func (m *MockQBusinessAPI) UpdateIndexRequest(arg0 *qbusiness.UpdateIndexInput) (*request.Request, *qbusiness.UpdateIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.UpdateIndexOutput)
	return ret0, ret1
}

// UpdateIndexRequest indicates an expected call of UpdateIndexRequest
func (mr *MockQBusinessAPIMockRecorder) UpdateIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateIndexRequest), arg0)
}

// UpdateIndexWithContext mocks base method
func (m *MockQBusinessAPI) UpdateIndexWithContext(arg0 context.Context, arg1 *qbusiness.UpdateIndexInput, arg2 ...request.Option) (*qbusiness.UpdateIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIndexWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.UpdateIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIndexWithContext indicates an expected call of UpdateIndexWithContext
func (mr *MockQBusinessAPIMockRecorder) UpdateIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateIndexWithContext), varargs...)
}

// UpdatePlugin mocks base method
func (m *MockQBusinessAPI) UpdatePlugin(arg0 *qbusiness.UpdatePluginInput) (*qbusiness.UpdatePluginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlugin", arg0)
	ret0, _ := ret[0].(*qbusiness.UpdatePluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlugin indicates an expected call of UpdatePlugin
func (mr *MockQBusinessAPIMockRecorder) UpdatePlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlugin", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdatePlugin), arg0)
}

// UpdatePluginRequest mocks base method
func (m *MockQBusinessAPI) UpdatePluginRequest(arg0 *qbusiness.UpdatePluginInput) (*request.Request, *qbusiness.UpdatePluginOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePluginRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.UpdatePluginOutput)
	return ret0, ret1
}

// UpdatePluginRequest indicates an expected call of UpdatePluginRequest
func (mr *MockQBusinessAPIMockRecorder) UpdatePluginRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePluginRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdatePluginRequest), arg0)
}

// UpdatePluginWithContext mocks base method
func (m *MockQBusinessAPI) UpdatePluginWithContext(arg0 context.Context, arg1 *qbusiness.UpdatePluginInput, arg2 ...request.Option) (*qbusiness.UpdatePluginOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePluginWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.UpdatePluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePluginWithContext indicates an expected call of UpdatePluginWithContext
func (mr *MockQBusinessAPIMockRecorder) UpdatePluginWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePluginWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdatePluginWithContext), varargs...)
}

// UpdateRetriever mocks base method
func (m *MockQBusinessAPI) UpdateRetriever(arg0 *qbusiness.UpdateRetrieverInput) (*qbusiness.UpdateRetrieverOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetriever", arg0)
	ret0, _ := ret[0].(*qbusiness.UpdateRetrieverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRetriever indicates an expected call of UpdateRetriever
func (mr *MockQBusinessAPIMockRecorder) UpdateRetriever(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetriever", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateRetriever), arg0)
}

// UpdateRetrieverRequest mocks base method
func (m *MockQBusinessAPI) UpdateRetrieverRequest(arg0 *qbusiness.UpdateRetrieverInput) (*request.Request, *qbusiness.UpdateRetrieverOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetrieverRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.UpdateRetrieverOutput)
	return ret0, ret1
}

// UpdateRetrieverRequest indicates an expected call of UpdateRetrieverRequest
func (mr *MockQBusinessAPIMockRecorder) UpdateRetrieverRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetrieverRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateRetrieverRequest), arg0)
}

// UpdateRetrieverWithContext mocks base method
func (m *MockQBusinessAPI) UpdateRetrieverWithContext(arg0 context.Context, arg1 *qbusiness.UpdateRetrieverInput, arg2 ...request.Option) (*qbusiness.UpdateRetrieverOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRetrieverWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.UpdateRetrieverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRetrieverWithContext indicates an expected call of UpdateRetrieverWithContext
func (mr *MockQBusinessAPIMockRecorder) UpdateRetrieverWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetrieverWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateRetrieverWithContext), varargs...)
}

// UpdateUser mocks base method
func (m *MockQBusinessAPI) UpdateUser(arg0 *qbusiness.UpdateUserInput) (*qbusiness.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*qbusiness.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockQBusinessAPIMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateUser), arg0)
}

// UpdateUserRequest mocks base method
func (m *MockQBusinessAPI) UpdateUserRequest(arg0 *qbusiness.UpdateUserInput) (*request.Request, *qbusiness.UpdateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.UpdateUserOutput)
	return ret0, ret1
}

// UpdateUserRequest indicates an expected call of UpdateUserRequest
func (mr *MockQBusinessAPIMockRecorder) UpdateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateUserRequest), arg0)
}

// UpdateUserWithContext mocks base method
func (m *MockQBusinessAPI) UpdateUserWithContext(arg0 context.Context, arg1 *qbusiness.UpdateUserInput, arg2 ...request.Option) (*qbusiness.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserWithContext indicates an expected call of UpdateUserWithContext
func (mr *MockQBusinessAPIMockRecorder) UpdateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateUserWithContext), varargs...)
}

// UpdateWebExperience mocks base method
func (m *MockQBusinessAPI) UpdateWebExperience(arg0 *qbusiness.UpdateWebExperienceInput) (*qbusiness.UpdateWebExperienceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebExperience", arg0)
	ret0, _ := ret[0].(*qbusiness.UpdateWebExperienceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebExperience indicates an expected call of UpdateWebExperience
func (mr *MockQBusinessAPIMockRecorder) UpdateWebExperience(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebExperience", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateWebExperience), arg0)
}

// UpdateWebExperienceRequest mocks base method
func (m *MockQBusinessAPI) UpdateWebExperienceRequest(arg0 *qbusiness.UpdateWebExperienceInput) (*request.Request, *qbusiness.UpdateWebExperienceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebExperienceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qbusiness.UpdateWebExperienceOutput)
	return ret0, ret1
}

// UpdateWebExperienceRequest indicates an expected call of UpdateWebExperienceRequest
func (mr *MockQBusinessAPIMockRecorder) UpdateWebExperienceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebExperienceRequest", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateWebExperienceRequest), arg0)
}

// UpdateWebExperienceWithContext mocks base method
func (m *MockQBusinessAPI) UpdateWebExperienceWithContext(arg0 context.Context, arg1 *qbusiness.UpdateWebExperienceInput, arg2 ...request.Option) (*qbusiness.UpdateWebExperienceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWebExperienceWithContext", varargs...)
	ret0, _ := ret[0].(*qbusiness.UpdateWebExperienceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebExperienceWithContext indicates an expected call of UpdateWebExperienceWithContext
func (mr *MockQBusinessAPIMockRecorder) UpdateWebExperienceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebExperienceWithContext", reflect.TypeOf((*MockQBusinessAPI)(nil).UpdateWebExperienceWithContext), varargs...)
}
