// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/pcaconnectorscep/pcaconnectorscepiface (interfaces: PcaConnectorScepAPI)

// Package pcaconnectorscepmock is a generated GoMock package.
package pcaconnectorscepmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	pcaconnectorscep "github.com/aws/aws-sdk-go/service/pcaconnectorscep"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPcaConnectorScepAPI is a mock of PcaConnectorScepAPI interface
type MockPcaConnectorScepAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPcaConnectorScepAPIMockRecorder
}

// MockPcaConnectorScepAPIMockRecorder is the mock recorder for MockPcaConnectorScepAPI
type MockPcaConnectorScepAPIMockRecorder struct {
	mock *MockPcaConnectorScepAPI
}

// NewMockPcaConnectorScepAPI creates a new mock instance
func NewMockPcaConnectorScepAPI(ctrl *gomock.Controller) *MockPcaConnectorScepAPI {
	mock := &MockPcaConnectorScepAPI{ctrl: ctrl}
	mock.recorder = &MockPcaConnectorScepAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPcaConnectorScepAPI) EXPECT() *MockPcaConnectorScepAPIMockRecorder {
	return m.recorder
}

// CreateChallenge mocks base method
func (m *MockPcaConnectorScepAPI) CreateChallenge(arg0 *pcaconnectorscep.CreateChallengeInput) (*pcaconnectorscep.CreateChallengeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChallenge", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.CreateChallengeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChallenge indicates an expected call of CreateChallenge
func (mr *MockPcaConnectorScepAPIMockRecorder) CreateChallenge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChallenge", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).CreateChallenge), arg0)
}

// CreateChallengeRequest mocks base method
func (m *MockPcaConnectorScepAPI) CreateChallengeRequest(arg0 *pcaconnectorscep.CreateChallengeInput) (*request.Request, *pcaconnectorscep.CreateChallengeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChallengeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.CreateChallengeOutput)
	return ret0, ret1
}

// CreateChallengeRequest indicates an expected call of CreateChallengeRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) CreateChallengeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChallengeRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).CreateChallengeRequest), arg0)
}

// CreateChallengeWithContext mocks base method
func (m *MockPcaConnectorScepAPI) CreateChallengeWithContext(arg0 context.Context, arg1 *pcaconnectorscep.CreateChallengeInput, arg2 ...request.Option) (*pcaconnectorscep.CreateChallengeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChallengeWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.CreateChallengeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChallengeWithContext indicates an expected call of CreateChallengeWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) CreateChallengeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChallengeWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).CreateChallengeWithContext), varargs...)
}

// CreateConnector mocks base method
func (m *MockPcaConnectorScepAPI) CreateConnector(arg0 *pcaconnectorscep.CreateConnectorInput) (*pcaconnectorscep.CreateConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnector", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.CreateConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnector indicates an expected call of CreateConnector
func (mr *MockPcaConnectorScepAPIMockRecorder) CreateConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnector", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).CreateConnector), arg0)
}

// CreateConnectorRequest mocks base method
func (m *MockPcaConnectorScepAPI) CreateConnectorRequest(arg0 *pcaconnectorscep.CreateConnectorInput) (*request.Request, *pcaconnectorscep.CreateConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.CreateConnectorOutput)
	return ret0, ret1
}

// CreateConnectorRequest indicates an expected call of CreateConnectorRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) CreateConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectorRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).CreateConnectorRequest), arg0)
}

// CreateConnectorWithContext mocks base method
func (m *MockPcaConnectorScepAPI) CreateConnectorWithContext(arg0 context.Context, arg1 *pcaconnectorscep.CreateConnectorInput, arg2 ...request.Option) (*pcaconnectorscep.CreateConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.CreateConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectorWithContext indicates an expected call of CreateConnectorWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) CreateConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectorWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).CreateConnectorWithContext), varargs...)
}

// DeleteChallenge mocks base method
func (m *MockPcaConnectorScepAPI) DeleteChallenge(arg0 *pcaconnectorscep.DeleteChallengeInput) (*pcaconnectorscep.DeleteChallengeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChallenge", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.DeleteChallengeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChallenge indicates an expected call of DeleteChallenge
func (mr *MockPcaConnectorScepAPIMockRecorder) DeleteChallenge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChallenge", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).DeleteChallenge), arg0)
}

// DeleteChallengeRequest mocks base method
func (m *MockPcaConnectorScepAPI) DeleteChallengeRequest(arg0 *pcaconnectorscep.DeleteChallengeInput) (*request.Request, *pcaconnectorscep.DeleteChallengeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChallengeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.DeleteChallengeOutput)
	return ret0, ret1
}

// DeleteChallengeRequest indicates an expected call of DeleteChallengeRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) DeleteChallengeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChallengeRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).DeleteChallengeRequest), arg0)
}

// DeleteChallengeWithContext mocks base method
func (m *MockPcaConnectorScepAPI) DeleteChallengeWithContext(arg0 context.Context, arg1 *pcaconnectorscep.DeleteChallengeInput, arg2 ...request.Option) (*pcaconnectorscep.DeleteChallengeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChallengeWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.DeleteChallengeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChallengeWithContext indicates an expected call of DeleteChallengeWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) DeleteChallengeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChallengeWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).DeleteChallengeWithContext), varargs...)
}

// DeleteConnector mocks base method
func (m *MockPcaConnectorScepAPI) DeleteConnector(arg0 *pcaconnectorscep.DeleteConnectorInput) (*pcaconnectorscep.DeleteConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnector", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.DeleteConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnector indicates an expected call of DeleteConnector
func (mr *MockPcaConnectorScepAPIMockRecorder) DeleteConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnector", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).DeleteConnector), arg0)
}

// DeleteConnectorRequest mocks base method
func (m *MockPcaConnectorScepAPI) DeleteConnectorRequest(arg0 *pcaconnectorscep.DeleteConnectorInput) (*request.Request, *pcaconnectorscep.DeleteConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.DeleteConnectorOutput)
	return ret0, ret1
}

// DeleteConnectorRequest indicates an expected call of DeleteConnectorRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) DeleteConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectorRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).DeleteConnectorRequest), arg0)
}

// DeleteConnectorWithContext mocks base method
func (m *MockPcaConnectorScepAPI) DeleteConnectorWithContext(arg0 context.Context, arg1 *pcaconnectorscep.DeleteConnectorInput, arg2 ...request.Option) (*pcaconnectorscep.DeleteConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.DeleteConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectorWithContext indicates an expected call of DeleteConnectorWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) DeleteConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectorWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).DeleteConnectorWithContext), varargs...)
}

// GetChallengeMetadata mocks base method
func (m *MockPcaConnectorScepAPI) GetChallengeMetadata(arg0 *pcaconnectorscep.GetChallengeMetadataInput) (*pcaconnectorscep.GetChallengeMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallengeMetadata", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.GetChallengeMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallengeMetadata indicates an expected call of GetChallengeMetadata
func (mr *MockPcaConnectorScepAPIMockRecorder) GetChallengeMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallengeMetadata", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).GetChallengeMetadata), arg0)
}

// GetChallengeMetadataRequest mocks base method
func (m *MockPcaConnectorScepAPI) GetChallengeMetadataRequest(arg0 *pcaconnectorscep.GetChallengeMetadataInput) (*request.Request, *pcaconnectorscep.GetChallengeMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallengeMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.GetChallengeMetadataOutput)
	return ret0, ret1
}

// GetChallengeMetadataRequest indicates an expected call of GetChallengeMetadataRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) GetChallengeMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallengeMetadataRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).GetChallengeMetadataRequest), arg0)
}

// GetChallengeMetadataWithContext mocks base method
func (m *MockPcaConnectorScepAPI) GetChallengeMetadataWithContext(arg0 context.Context, arg1 *pcaconnectorscep.GetChallengeMetadataInput, arg2 ...request.Option) (*pcaconnectorscep.GetChallengeMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChallengeMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.GetChallengeMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallengeMetadataWithContext indicates an expected call of GetChallengeMetadataWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) GetChallengeMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallengeMetadataWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).GetChallengeMetadataWithContext), varargs...)
}

// GetChallengePassword mocks base method
func (m *MockPcaConnectorScepAPI) GetChallengePassword(arg0 *pcaconnectorscep.GetChallengePasswordInput) (*pcaconnectorscep.GetChallengePasswordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallengePassword", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.GetChallengePasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallengePassword indicates an expected call of GetChallengePassword
func (mr *MockPcaConnectorScepAPIMockRecorder) GetChallengePassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallengePassword", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).GetChallengePassword), arg0)
}

// GetChallengePasswordRequest mocks base method
func (m *MockPcaConnectorScepAPI) GetChallengePasswordRequest(arg0 *pcaconnectorscep.GetChallengePasswordInput) (*request.Request, *pcaconnectorscep.GetChallengePasswordOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallengePasswordRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.GetChallengePasswordOutput)
	return ret0, ret1
}

// GetChallengePasswordRequest indicates an expected call of GetChallengePasswordRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) GetChallengePasswordRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallengePasswordRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).GetChallengePasswordRequest), arg0)
}

// GetChallengePasswordWithContext mocks base method
func (m *MockPcaConnectorScepAPI) GetChallengePasswordWithContext(arg0 context.Context, arg1 *pcaconnectorscep.GetChallengePasswordInput, arg2 ...request.Option) (*pcaconnectorscep.GetChallengePasswordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChallengePasswordWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.GetChallengePasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallengePasswordWithContext indicates an expected call of GetChallengePasswordWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) GetChallengePasswordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallengePasswordWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).GetChallengePasswordWithContext), varargs...)
}

// GetConnector mocks base method
func (m *MockPcaConnectorScepAPI) GetConnector(arg0 *pcaconnectorscep.GetConnectorInput) (*pcaconnectorscep.GetConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnector", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.GetConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnector indicates an expected call of GetConnector
func (mr *MockPcaConnectorScepAPIMockRecorder) GetConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnector", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).GetConnector), arg0)
}

// GetConnectorRequest mocks base method
func (m *MockPcaConnectorScepAPI) GetConnectorRequest(arg0 *pcaconnectorscep.GetConnectorInput) (*request.Request, *pcaconnectorscep.GetConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.GetConnectorOutput)
	return ret0, ret1
}

// GetConnectorRequest indicates an expected call of GetConnectorRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) GetConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).GetConnectorRequest), arg0)
}

// GetConnectorWithContext mocks base method
func (m *MockPcaConnectorScepAPI) GetConnectorWithContext(arg0 context.Context, arg1 *pcaconnectorscep.GetConnectorInput, arg2 ...request.Option) (*pcaconnectorscep.GetConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.GetConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectorWithContext indicates an expected call of GetConnectorWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) GetConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).GetConnectorWithContext), varargs...)
}

// ListChallengeMetadata mocks base method
func (m *MockPcaConnectorScepAPI) ListChallengeMetadata(arg0 *pcaconnectorscep.ListChallengeMetadataInput) (*pcaconnectorscep.ListChallengeMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChallengeMetadata", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.ListChallengeMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChallengeMetadata indicates an expected call of ListChallengeMetadata
func (mr *MockPcaConnectorScepAPIMockRecorder) ListChallengeMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChallengeMetadata", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListChallengeMetadata), arg0)
}

// ListChallengeMetadataPages mocks base method
func (m *MockPcaConnectorScepAPI) ListChallengeMetadataPages(arg0 *pcaconnectorscep.ListChallengeMetadataInput, arg1 func(*pcaconnectorscep.ListChallengeMetadataOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChallengeMetadataPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChallengeMetadataPages indicates an expected call of ListChallengeMetadataPages
func (mr *MockPcaConnectorScepAPIMockRecorder) ListChallengeMetadataPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChallengeMetadataPages", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListChallengeMetadataPages), arg0, arg1)
}

// ListChallengeMetadataPagesWithContext mocks base method
func (m *MockPcaConnectorScepAPI) ListChallengeMetadataPagesWithContext(arg0 context.Context, arg1 *pcaconnectorscep.ListChallengeMetadataInput, arg2 func(*pcaconnectorscep.ListChallengeMetadataOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChallengeMetadataPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChallengeMetadataPagesWithContext indicates an expected call of ListChallengeMetadataPagesWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) ListChallengeMetadataPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChallengeMetadataPagesWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListChallengeMetadataPagesWithContext), varargs...)
}

// ListChallengeMetadataRequest mocks base method
func (m *MockPcaConnectorScepAPI) ListChallengeMetadataRequest(arg0 *pcaconnectorscep.ListChallengeMetadataInput) (*request.Request, *pcaconnectorscep.ListChallengeMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChallengeMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.ListChallengeMetadataOutput)
	return ret0, ret1
}

// ListChallengeMetadataRequest indicates an expected call of ListChallengeMetadataRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) ListChallengeMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChallengeMetadataRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListChallengeMetadataRequest), arg0)
}

// ListChallengeMetadataWithContext mocks base method
func (m *MockPcaConnectorScepAPI) ListChallengeMetadataWithContext(arg0 context.Context, arg1 *pcaconnectorscep.ListChallengeMetadataInput, arg2 ...request.Option) (*pcaconnectorscep.ListChallengeMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChallengeMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.ListChallengeMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChallengeMetadataWithContext indicates an expected call of ListChallengeMetadataWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) ListChallengeMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChallengeMetadataWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListChallengeMetadataWithContext), varargs...)
}

// ListConnectors mocks base method
func (m *MockPcaConnectorScepAPI) ListConnectors(arg0 *pcaconnectorscep.ListConnectorsInput) (*pcaconnectorscep.ListConnectorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectors", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.ListConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectors indicates an expected call of ListConnectors
func (mr *MockPcaConnectorScepAPIMockRecorder) ListConnectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectors", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListConnectors), arg0)
}

// ListConnectorsPages mocks base method
func (m *MockPcaConnectorScepAPI) ListConnectorsPages(arg0 *pcaconnectorscep.ListConnectorsInput, arg1 func(*pcaconnectorscep.ListConnectorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectorsPages indicates an expected call of ListConnectorsPages
func (mr *MockPcaConnectorScepAPIMockRecorder) ListConnectorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsPages", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListConnectorsPages), arg0, arg1)
}

// ListConnectorsPagesWithContext mocks base method
func (m *MockPcaConnectorScepAPI) ListConnectorsPagesWithContext(arg0 context.Context, arg1 *pcaconnectorscep.ListConnectorsInput, arg2 func(*pcaconnectorscep.ListConnectorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectorsPagesWithContext indicates an expected call of ListConnectorsPagesWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) ListConnectorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsPagesWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListConnectorsPagesWithContext), varargs...)
}

// ListConnectorsRequest mocks base method
func (m *MockPcaConnectorScepAPI) ListConnectorsRequest(arg0 *pcaconnectorscep.ListConnectorsInput) (*request.Request, *pcaconnectorscep.ListConnectorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.ListConnectorsOutput)
	return ret0, ret1
}

// ListConnectorsRequest indicates an expected call of ListConnectorsRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) ListConnectorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListConnectorsRequest), arg0)
}

// ListConnectorsWithContext mocks base method
func (m *MockPcaConnectorScepAPI) ListConnectorsWithContext(arg0 context.Context, arg1 *pcaconnectorscep.ListConnectorsInput, arg2 ...request.Option) (*pcaconnectorscep.ListConnectorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorsWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.ListConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectorsWithContext indicates an expected call of ListConnectorsWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) ListConnectorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListConnectorsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockPcaConnectorScepAPI) ListTagsForResource(arg0 *pcaconnectorscep.ListTagsForResourceInput) (*pcaconnectorscep.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockPcaConnectorScepAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockPcaConnectorScepAPI) ListTagsForResourceRequest(arg0 *pcaconnectorscep.ListTagsForResourceInput) (*request.Request, *pcaconnectorscep.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockPcaConnectorScepAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *pcaconnectorscep.ListTagsForResourceInput, arg2 ...request.Option) (*pcaconnectorscep.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockPcaConnectorScepAPI) TagResource(arg0 *pcaconnectorscep.TagResourceInput) (*pcaconnectorscep.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockPcaConnectorScepAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockPcaConnectorScepAPI) TagResourceRequest(arg0 *pcaconnectorscep.TagResourceInput) (*request.Request, *pcaconnectorscep.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockPcaConnectorScepAPI) TagResourceWithContext(arg0 context.Context, arg1 *pcaconnectorscep.TagResourceInput, arg2 ...request.Option) (*pcaconnectorscep.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockPcaConnectorScepAPI) UntagResource(arg0 *pcaconnectorscep.UntagResourceInput) (*pcaconnectorscep.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*pcaconnectorscep.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockPcaConnectorScepAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockPcaConnectorScepAPI) UntagResourceRequest(arg0 *pcaconnectorscep.UntagResourceInput) (*request.Request, *pcaconnectorscep.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pcaconnectorscep.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockPcaConnectorScepAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockPcaConnectorScepAPI) UntagResourceWithContext(arg0 context.Context, arg1 *pcaconnectorscep.UntagResourceInput, arg2 ...request.Option) (*pcaconnectorscep.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pcaconnectorscep.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockPcaConnectorScepAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockPcaConnectorScepAPI)(nil).UntagResourceWithContext), varargs...)
}
