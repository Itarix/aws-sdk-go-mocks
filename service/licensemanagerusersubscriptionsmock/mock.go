// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/licensemanagerusersubscriptions/licensemanagerusersubscriptionsiface (interfaces: LicenseManagerUserSubscriptionsAPI)

// Package licensemanagerusersubscriptionsmock is a generated GoMock package.
package licensemanagerusersubscriptionsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	licensemanagerusersubscriptions "github.com/aws/aws-sdk-go/service/licensemanagerusersubscriptions"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLicenseManagerUserSubscriptionsAPI is a mock of LicenseManagerUserSubscriptionsAPI interface
type MockLicenseManagerUserSubscriptionsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseManagerUserSubscriptionsAPIMockRecorder
}

// MockLicenseManagerUserSubscriptionsAPIMockRecorder is the mock recorder for MockLicenseManagerUserSubscriptionsAPI
type MockLicenseManagerUserSubscriptionsAPIMockRecorder struct {
	mock *MockLicenseManagerUserSubscriptionsAPI
}

// NewMockLicenseManagerUserSubscriptionsAPI creates a new mock instance
func NewMockLicenseManagerUserSubscriptionsAPI(ctrl *gomock.Controller) *MockLicenseManagerUserSubscriptionsAPI {
	mock := &MockLicenseManagerUserSubscriptionsAPI{ctrl: ctrl}
	mock.recorder = &MockLicenseManagerUserSubscriptionsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLicenseManagerUserSubscriptionsAPI) EXPECT() *MockLicenseManagerUserSubscriptionsAPIMockRecorder {
	return m.recorder
}

// AssociateUser mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) AssociateUser(arg0 *licensemanagerusersubscriptions.AssociateUserInput) (*licensemanagerusersubscriptions.AssociateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateUser", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.AssociateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateUser indicates an expected call of AssociateUser
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) AssociateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateUser", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).AssociateUser), arg0)
}

// AssociateUserRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) AssociateUserRequest(arg0 *licensemanagerusersubscriptions.AssociateUserInput) (*request.Request, *licensemanagerusersubscriptions.AssociateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.AssociateUserOutput)
	return ret0, ret1
}

// AssociateUserRequest indicates an expected call of AssociateUserRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) AssociateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateUserRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).AssociateUserRequest), arg0)
}

// AssociateUserWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) AssociateUserWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.AssociateUserInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.AssociateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateUserWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.AssociateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateUserWithContext indicates an expected call of AssociateUserWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) AssociateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateUserWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).AssociateUserWithContext), varargs...)
}

// DeregisterIdentityProvider mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) DeregisterIdentityProvider(arg0 *licensemanagerusersubscriptions.DeregisterIdentityProviderInput) (*licensemanagerusersubscriptions.DeregisterIdentityProviderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterIdentityProvider", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.DeregisterIdentityProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterIdentityProvider indicates an expected call of DeregisterIdentityProvider
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) DeregisterIdentityProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterIdentityProvider", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).DeregisterIdentityProvider), arg0)
}

// DeregisterIdentityProviderRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) DeregisterIdentityProviderRequest(arg0 *licensemanagerusersubscriptions.DeregisterIdentityProviderInput) (*request.Request, *licensemanagerusersubscriptions.DeregisterIdentityProviderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterIdentityProviderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.DeregisterIdentityProviderOutput)
	return ret0, ret1
}

// DeregisterIdentityProviderRequest indicates an expected call of DeregisterIdentityProviderRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) DeregisterIdentityProviderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterIdentityProviderRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).DeregisterIdentityProviderRequest), arg0)
}

// DeregisterIdentityProviderWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) DeregisterIdentityProviderWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.DeregisterIdentityProviderInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.DeregisterIdentityProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterIdentityProviderWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.DeregisterIdentityProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterIdentityProviderWithContext indicates an expected call of DeregisterIdentityProviderWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) DeregisterIdentityProviderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterIdentityProviderWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).DeregisterIdentityProviderWithContext), varargs...)
}

// DisassociateUser mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) DisassociateUser(arg0 *licensemanagerusersubscriptions.DisassociateUserInput) (*licensemanagerusersubscriptions.DisassociateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateUser", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.DisassociateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateUser indicates an expected call of DisassociateUser
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) DisassociateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateUser", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).DisassociateUser), arg0)
}

// DisassociateUserRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) DisassociateUserRequest(arg0 *licensemanagerusersubscriptions.DisassociateUserInput) (*request.Request, *licensemanagerusersubscriptions.DisassociateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.DisassociateUserOutput)
	return ret0, ret1
}

// DisassociateUserRequest indicates an expected call of DisassociateUserRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) DisassociateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateUserRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).DisassociateUserRequest), arg0)
}

// DisassociateUserWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) DisassociateUserWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.DisassociateUserInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.DisassociateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateUserWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.DisassociateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateUserWithContext indicates an expected call of DisassociateUserWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) DisassociateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateUserWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).DisassociateUserWithContext), varargs...)
}

// ListIdentityProviders mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListIdentityProviders(arg0 *licensemanagerusersubscriptions.ListIdentityProvidersInput) (*licensemanagerusersubscriptions.ListIdentityProvidersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdentityProviders", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.ListIdentityProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdentityProviders indicates an expected call of ListIdentityProviders
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListIdentityProviders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentityProviders", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListIdentityProviders), arg0)
}

// ListIdentityProvidersPages mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListIdentityProvidersPages(arg0 *licensemanagerusersubscriptions.ListIdentityProvidersInput, arg1 func(*licensemanagerusersubscriptions.ListIdentityProvidersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdentityProvidersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIdentityProvidersPages indicates an expected call of ListIdentityProvidersPages
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListIdentityProvidersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentityProvidersPages", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListIdentityProvidersPages), arg0, arg1)
}

// ListIdentityProvidersPagesWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListIdentityProvidersPagesWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.ListIdentityProvidersInput, arg2 func(*licensemanagerusersubscriptions.ListIdentityProvidersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdentityProvidersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIdentityProvidersPagesWithContext indicates an expected call of ListIdentityProvidersPagesWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListIdentityProvidersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentityProvidersPagesWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListIdentityProvidersPagesWithContext), varargs...)
}

// ListIdentityProvidersRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListIdentityProvidersRequest(arg0 *licensemanagerusersubscriptions.ListIdentityProvidersInput) (*request.Request, *licensemanagerusersubscriptions.ListIdentityProvidersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdentityProvidersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.ListIdentityProvidersOutput)
	return ret0, ret1
}

// ListIdentityProvidersRequest indicates an expected call of ListIdentityProvidersRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListIdentityProvidersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentityProvidersRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListIdentityProvidersRequest), arg0)
}

// ListIdentityProvidersWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListIdentityProvidersWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.ListIdentityProvidersInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.ListIdentityProvidersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdentityProvidersWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.ListIdentityProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdentityProvidersWithContext indicates an expected call of ListIdentityProvidersWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListIdentityProvidersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentityProvidersWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListIdentityProvidersWithContext), varargs...)
}

// ListInstances mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListInstances(arg0 *licensemanagerusersubscriptions.ListInstancesInput) (*licensemanagerusersubscriptions.ListInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListInstances), arg0)
}

// ListInstancesPages mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListInstancesPages(arg0 *licensemanagerusersubscriptions.ListInstancesInput, arg1 func(*licensemanagerusersubscriptions.ListInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstancesPages indicates an expected call of ListInstancesPages
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesPages", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListInstancesPages), arg0, arg1)
}

// ListInstancesPagesWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListInstancesPagesWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.ListInstancesInput, arg2 func(*licensemanagerusersubscriptions.ListInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstancesPagesWithContext indicates an expected call of ListInstancesPagesWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesPagesWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListInstancesPagesWithContext), varargs...)
}

// ListInstancesRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListInstancesRequest(arg0 *licensemanagerusersubscriptions.ListInstancesInput) (*request.Request, *licensemanagerusersubscriptions.ListInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.ListInstancesOutput)
	return ret0, ret1
}

// ListInstancesRequest indicates an expected call of ListInstancesRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListInstancesRequest), arg0)
}

// ListInstancesWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListInstancesWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.ListInstancesInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.ListInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstancesWithContext indicates an expected call of ListInstancesWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListInstancesWithContext), varargs...)
}

// ListProductSubscriptions mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListProductSubscriptions(arg0 *licensemanagerusersubscriptions.ListProductSubscriptionsInput) (*licensemanagerusersubscriptions.ListProductSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductSubscriptions", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.ListProductSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductSubscriptions indicates an expected call of ListProductSubscriptions
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListProductSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductSubscriptions", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListProductSubscriptions), arg0)
}

// ListProductSubscriptionsPages mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListProductSubscriptionsPages(arg0 *licensemanagerusersubscriptions.ListProductSubscriptionsInput, arg1 func(*licensemanagerusersubscriptions.ListProductSubscriptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductSubscriptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProductSubscriptionsPages indicates an expected call of ListProductSubscriptionsPages
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListProductSubscriptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductSubscriptionsPages", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListProductSubscriptionsPages), arg0, arg1)
}

// ListProductSubscriptionsPagesWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListProductSubscriptionsPagesWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.ListProductSubscriptionsInput, arg2 func(*licensemanagerusersubscriptions.ListProductSubscriptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProductSubscriptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProductSubscriptionsPagesWithContext indicates an expected call of ListProductSubscriptionsPagesWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListProductSubscriptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductSubscriptionsPagesWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListProductSubscriptionsPagesWithContext), varargs...)
}

// ListProductSubscriptionsRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListProductSubscriptionsRequest(arg0 *licensemanagerusersubscriptions.ListProductSubscriptionsInput) (*request.Request, *licensemanagerusersubscriptions.ListProductSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.ListProductSubscriptionsOutput)
	return ret0, ret1
}

// ListProductSubscriptionsRequest indicates an expected call of ListProductSubscriptionsRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListProductSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductSubscriptionsRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListProductSubscriptionsRequest), arg0)
}

// ListProductSubscriptionsWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListProductSubscriptionsWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.ListProductSubscriptionsInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.ListProductSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProductSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.ListProductSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductSubscriptionsWithContext indicates an expected call of ListProductSubscriptionsWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListProductSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductSubscriptionsWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListProductSubscriptionsWithContext), varargs...)
}

// ListUserAssociations mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListUserAssociations(arg0 *licensemanagerusersubscriptions.ListUserAssociationsInput) (*licensemanagerusersubscriptions.ListUserAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAssociations", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.ListUserAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAssociations indicates an expected call of ListUserAssociations
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListUserAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAssociations", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListUserAssociations), arg0)
}

// ListUserAssociationsPages mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListUserAssociationsPages(arg0 *licensemanagerusersubscriptions.ListUserAssociationsInput, arg1 func(*licensemanagerusersubscriptions.ListUserAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserAssociationsPages indicates an expected call of ListUserAssociationsPages
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListUserAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAssociationsPages", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListUserAssociationsPages), arg0, arg1)
}

// ListUserAssociationsPagesWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListUserAssociationsPagesWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.ListUserAssociationsInput, arg2 func(*licensemanagerusersubscriptions.ListUserAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserAssociationsPagesWithContext indicates an expected call of ListUserAssociationsPagesWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListUserAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAssociationsPagesWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListUserAssociationsPagesWithContext), varargs...)
}

// ListUserAssociationsRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListUserAssociationsRequest(arg0 *licensemanagerusersubscriptions.ListUserAssociationsInput) (*request.Request, *licensemanagerusersubscriptions.ListUserAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.ListUserAssociationsOutput)
	return ret0, ret1
}

// ListUserAssociationsRequest indicates an expected call of ListUserAssociationsRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListUserAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAssociationsRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListUserAssociationsRequest), arg0)
}

// ListUserAssociationsWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) ListUserAssociationsWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.ListUserAssociationsInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.ListUserAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.ListUserAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAssociationsWithContext indicates an expected call of ListUserAssociationsWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) ListUserAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAssociationsWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).ListUserAssociationsWithContext), varargs...)
}

// RegisterIdentityProvider mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) RegisterIdentityProvider(arg0 *licensemanagerusersubscriptions.RegisterIdentityProviderInput) (*licensemanagerusersubscriptions.RegisterIdentityProviderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterIdentityProvider", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.RegisterIdentityProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterIdentityProvider indicates an expected call of RegisterIdentityProvider
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) RegisterIdentityProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterIdentityProvider", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).RegisterIdentityProvider), arg0)
}

// RegisterIdentityProviderRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) RegisterIdentityProviderRequest(arg0 *licensemanagerusersubscriptions.RegisterIdentityProviderInput) (*request.Request, *licensemanagerusersubscriptions.RegisterIdentityProviderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterIdentityProviderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.RegisterIdentityProviderOutput)
	return ret0, ret1
}

// RegisterIdentityProviderRequest indicates an expected call of RegisterIdentityProviderRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) RegisterIdentityProviderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterIdentityProviderRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).RegisterIdentityProviderRequest), arg0)
}

// RegisterIdentityProviderWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) RegisterIdentityProviderWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.RegisterIdentityProviderInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.RegisterIdentityProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterIdentityProviderWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.RegisterIdentityProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterIdentityProviderWithContext indicates an expected call of RegisterIdentityProviderWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) RegisterIdentityProviderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterIdentityProviderWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).RegisterIdentityProviderWithContext), varargs...)
}

// StartProductSubscription mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) StartProductSubscription(arg0 *licensemanagerusersubscriptions.StartProductSubscriptionInput) (*licensemanagerusersubscriptions.StartProductSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProductSubscription", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.StartProductSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProductSubscription indicates an expected call of StartProductSubscription
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) StartProductSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProductSubscription", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).StartProductSubscription), arg0)
}

// StartProductSubscriptionRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) StartProductSubscriptionRequest(arg0 *licensemanagerusersubscriptions.StartProductSubscriptionInput) (*request.Request, *licensemanagerusersubscriptions.StartProductSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProductSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.StartProductSubscriptionOutput)
	return ret0, ret1
}

// StartProductSubscriptionRequest indicates an expected call of StartProductSubscriptionRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) StartProductSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProductSubscriptionRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).StartProductSubscriptionRequest), arg0)
}

// StartProductSubscriptionWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) StartProductSubscriptionWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.StartProductSubscriptionInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.StartProductSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartProductSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.StartProductSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProductSubscriptionWithContext indicates an expected call of StartProductSubscriptionWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) StartProductSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProductSubscriptionWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).StartProductSubscriptionWithContext), varargs...)
}

// StopProductSubscription mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) StopProductSubscription(arg0 *licensemanagerusersubscriptions.StopProductSubscriptionInput) (*licensemanagerusersubscriptions.StopProductSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopProductSubscription", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.StopProductSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopProductSubscription indicates an expected call of StopProductSubscription
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) StopProductSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProductSubscription", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).StopProductSubscription), arg0)
}

// StopProductSubscriptionRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) StopProductSubscriptionRequest(arg0 *licensemanagerusersubscriptions.StopProductSubscriptionInput) (*request.Request, *licensemanagerusersubscriptions.StopProductSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopProductSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.StopProductSubscriptionOutput)
	return ret0, ret1
}

// StopProductSubscriptionRequest indicates an expected call of StopProductSubscriptionRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) StopProductSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProductSubscriptionRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).StopProductSubscriptionRequest), arg0)
}

// StopProductSubscriptionWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) StopProductSubscriptionWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.StopProductSubscriptionInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.StopProductSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopProductSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.StopProductSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopProductSubscriptionWithContext indicates an expected call of StopProductSubscriptionWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) StopProductSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProductSubscriptionWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).StopProductSubscriptionWithContext), varargs...)
}

// UpdateIdentityProviderSettings mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) UpdateIdentityProviderSettings(arg0 *licensemanagerusersubscriptions.UpdateIdentityProviderSettingsInput) (*licensemanagerusersubscriptions.UpdateIdentityProviderSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProviderSettings", arg0)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.UpdateIdentityProviderSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentityProviderSettings indicates an expected call of UpdateIdentityProviderSettings
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) UpdateIdentityProviderSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProviderSettings", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).UpdateIdentityProviderSettings), arg0)
}

// UpdateIdentityProviderSettingsRequest mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) UpdateIdentityProviderSettingsRequest(arg0 *licensemanagerusersubscriptions.UpdateIdentityProviderSettingsInput) (*request.Request, *licensemanagerusersubscriptions.UpdateIdentityProviderSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProviderSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerusersubscriptions.UpdateIdentityProviderSettingsOutput)
	return ret0, ret1
}

// UpdateIdentityProviderSettingsRequest indicates an expected call of UpdateIdentityProviderSettingsRequest
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) UpdateIdentityProviderSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProviderSettingsRequest", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).UpdateIdentityProviderSettingsRequest), arg0)
}

// UpdateIdentityProviderSettingsWithContext mocks base method
func (m *MockLicenseManagerUserSubscriptionsAPI) UpdateIdentityProviderSettingsWithContext(arg0 context.Context, arg1 *licensemanagerusersubscriptions.UpdateIdentityProviderSettingsInput, arg2 ...request.Option) (*licensemanagerusersubscriptions.UpdateIdentityProviderSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIdentityProviderSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerusersubscriptions.UpdateIdentityProviderSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentityProviderSettingsWithContext indicates an expected call of UpdateIdentityProviderSettingsWithContext
func (mr *MockLicenseManagerUserSubscriptionsAPIMockRecorder) UpdateIdentityProviderSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProviderSettingsWithContext", reflect.TypeOf((*MockLicenseManagerUserSubscriptionsAPI)(nil).UpdateIdentityProviderSettingsWithContext), varargs...)
}
