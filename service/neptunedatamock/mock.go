// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/neptunedata/neptunedataiface (interfaces: NeptunedataAPI)

// Package neptunedatamock is a generated GoMock package.
package neptunedatamock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	neptunedata "github.com/aws/aws-sdk-go/service/neptunedata"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNeptunedataAPI is a mock of NeptunedataAPI interface
type MockNeptunedataAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNeptunedataAPIMockRecorder
}

// MockNeptunedataAPIMockRecorder is the mock recorder for MockNeptunedataAPI
type MockNeptunedataAPIMockRecorder struct {
	mock *MockNeptunedataAPI
}

// NewMockNeptunedataAPI creates a new mock instance
func NewMockNeptunedataAPI(ctrl *gomock.Controller) *MockNeptunedataAPI {
	mock := &MockNeptunedataAPI{ctrl: ctrl}
	mock.recorder = &MockNeptunedataAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNeptunedataAPI) EXPECT() *MockNeptunedataAPIMockRecorder {
	return m.recorder
}

// CancelGremlinQuery mocks base method
func (m *MockNeptunedataAPI) CancelGremlinQuery(arg0 *neptunedata.CancelGremlinQueryInput) (*neptunedata.CancelGremlinQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelGremlinQuery", arg0)
	ret0, _ := ret[0].(*neptunedata.CancelGremlinQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelGremlinQuery indicates an expected call of CancelGremlinQuery
func (mr *MockNeptunedataAPIMockRecorder) CancelGremlinQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelGremlinQuery", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelGremlinQuery), arg0)
}

// CancelGremlinQueryRequest mocks base method
func (m *MockNeptunedataAPI) CancelGremlinQueryRequest(arg0 *neptunedata.CancelGremlinQueryInput) (*request.Request, *neptunedata.CancelGremlinQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelGremlinQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.CancelGremlinQueryOutput)
	return ret0, ret1
}

// CancelGremlinQueryRequest indicates an expected call of CancelGremlinQueryRequest
func (mr *MockNeptunedataAPIMockRecorder) CancelGremlinQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelGremlinQueryRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelGremlinQueryRequest), arg0)
}

// CancelGremlinQueryWithContext mocks base method
func (m *MockNeptunedataAPI) CancelGremlinQueryWithContext(arg0 context.Context, arg1 *neptunedata.CancelGremlinQueryInput, arg2 ...request.Option) (*neptunedata.CancelGremlinQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelGremlinQueryWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.CancelGremlinQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelGremlinQueryWithContext indicates an expected call of CancelGremlinQueryWithContext
func (mr *MockNeptunedataAPIMockRecorder) CancelGremlinQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelGremlinQueryWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelGremlinQueryWithContext), varargs...)
}

// CancelLoaderJob mocks base method
func (m *MockNeptunedataAPI) CancelLoaderJob(arg0 *neptunedata.CancelLoaderJobInput) (*neptunedata.CancelLoaderJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLoaderJob", arg0)
	ret0, _ := ret[0].(*neptunedata.CancelLoaderJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelLoaderJob indicates an expected call of CancelLoaderJob
func (mr *MockNeptunedataAPIMockRecorder) CancelLoaderJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLoaderJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelLoaderJob), arg0)
}

// CancelLoaderJobRequest mocks base method
func (m *MockNeptunedataAPI) CancelLoaderJobRequest(arg0 *neptunedata.CancelLoaderJobInput) (*request.Request, *neptunedata.CancelLoaderJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLoaderJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.CancelLoaderJobOutput)
	return ret0, ret1
}

// CancelLoaderJobRequest indicates an expected call of CancelLoaderJobRequest
func (mr *MockNeptunedataAPIMockRecorder) CancelLoaderJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLoaderJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelLoaderJobRequest), arg0)
}

// CancelLoaderJobWithContext mocks base method
func (m *MockNeptunedataAPI) CancelLoaderJobWithContext(arg0 context.Context, arg1 *neptunedata.CancelLoaderJobInput, arg2 ...request.Option) (*neptunedata.CancelLoaderJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelLoaderJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.CancelLoaderJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelLoaderJobWithContext indicates an expected call of CancelLoaderJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) CancelLoaderJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLoaderJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelLoaderJobWithContext), varargs...)
}

// CancelMLDataProcessingJob mocks base method
func (m *MockNeptunedataAPI) CancelMLDataProcessingJob(arg0 *neptunedata.CancelMLDataProcessingJobInput) (*neptunedata.CancelMLDataProcessingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMLDataProcessingJob", arg0)
	ret0, _ := ret[0].(*neptunedata.CancelMLDataProcessingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMLDataProcessingJob indicates an expected call of CancelMLDataProcessingJob
func (mr *MockNeptunedataAPIMockRecorder) CancelMLDataProcessingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLDataProcessingJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelMLDataProcessingJob), arg0)
}

// CancelMLDataProcessingJobRequest mocks base method
func (m *MockNeptunedataAPI) CancelMLDataProcessingJobRequest(arg0 *neptunedata.CancelMLDataProcessingJobInput) (*request.Request, *neptunedata.CancelMLDataProcessingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMLDataProcessingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.CancelMLDataProcessingJobOutput)
	return ret0, ret1
}

// CancelMLDataProcessingJobRequest indicates an expected call of CancelMLDataProcessingJobRequest
func (mr *MockNeptunedataAPIMockRecorder) CancelMLDataProcessingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLDataProcessingJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelMLDataProcessingJobRequest), arg0)
}

// CancelMLDataProcessingJobWithContext mocks base method
func (m *MockNeptunedataAPI) CancelMLDataProcessingJobWithContext(arg0 context.Context, arg1 *neptunedata.CancelMLDataProcessingJobInput, arg2 ...request.Option) (*neptunedata.CancelMLDataProcessingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelMLDataProcessingJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.CancelMLDataProcessingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMLDataProcessingJobWithContext indicates an expected call of CancelMLDataProcessingJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) CancelMLDataProcessingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLDataProcessingJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelMLDataProcessingJobWithContext), varargs...)
}

// CancelMLModelTrainingJob mocks base method
func (m *MockNeptunedataAPI) CancelMLModelTrainingJob(arg0 *neptunedata.CancelMLModelTrainingJobInput) (*neptunedata.CancelMLModelTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMLModelTrainingJob", arg0)
	ret0, _ := ret[0].(*neptunedata.CancelMLModelTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMLModelTrainingJob indicates an expected call of CancelMLModelTrainingJob
func (mr *MockNeptunedataAPIMockRecorder) CancelMLModelTrainingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLModelTrainingJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelMLModelTrainingJob), arg0)
}

// CancelMLModelTrainingJobRequest mocks base method
func (m *MockNeptunedataAPI) CancelMLModelTrainingJobRequest(arg0 *neptunedata.CancelMLModelTrainingJobInput) (*request.Request, *neptunedata.CancelMLModelTrainingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMLModelTrainingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.CancelMLModelTrainingJobOutput)
	return ret0, ret1
}

// CancelMLModelTrainingJobRequest indicates an expected call of CancelMLModelTrainingJobRequest
func (mr *MockNeptunedataAPIMockRecorder) CancelMLModelTrainingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLModelTrainingJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelMLModelTrainingJobRequest), arg0)
}

// CancelMLModelTrainingJobWithContext mocks base method
func (m *MockNeptunedataAPI) CancelMLModelTrainingJobWithContext(arg0 context.Context, arg1 *neptunedata.CancelMLModelTrainingJobInput, arg2 ...request.Option) (*neptunedata.CancelMLModelTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelMLModelTrainingJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.CancelMLModelTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMLModelTrainingJobWithContext indicates an expected call of CancelMLModelTrainingJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) CancelMLModelTrainingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLModelTrainingJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelMLModelTrainingJobWithContext), varargs...)
}

// CancelMLModelTransformJob mocks base method
func (m *MockNeptunedataAPI) CancelMLModelTransformJob(arg0 *neptunedata.CancelMLModelTransformJobInput) (*neptunedata.CancelMLModelTransformJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMLModelTransformJob", arg0)
	ret0, _ := ret[0].(*neptunedata.CancelMLModelTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMLModelTransformJob indicates an expected call of CancelMLModelTransformJob
func (mr *MockNeptunedataAPIMockRecorder) CancelMLModelTransformJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLModelTransformJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelMLModelTransformJob), arg0)
}

// CancelMLModelTransformJobRequest mocks base method
func (m *MockNeptunedataAPI) CancelMLModelTransformJobRequest(arg0 *neptunedata.CancelMLModelTransformJobInput) (*request.Request, *neptunedata.CancelMLModelTransformJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMLModelTransformJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.CancelMLModelTransformJobOutput)
	return ret0, ret1
}

// CancelMLModelTransformJobRequest indicates an expected call of CancelMLModelTransformJobRequest
func (mr *MockNeptunedataAPIMockRecorder) CancelMLModelTransformJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLModelTransformJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelMLModelTransformJobRequest), arg0)
}

// CancelMLModelTransformJobWithContext mocks base method
func (m *MockNeptunedataAPI) CancelMLModelTransformJobWithContext(arg0 context.Context, arg1 *neptunedata.CancelMLModelTransformJobInput, arg2 ...request.Option) (*neptunedata.CancelMLModelTransformJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelMLModelTransformJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.CancelMLModelTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMLModelTransformJobWithContext indicates an expected call of CancelMLModelTransformJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) CancelMLModelTransformJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLModelTransformJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelMLModelTransformJobWithContext), varargs...)
}

// CancelOpenCypherQuery mocks base method
func (m *MockNeptunedataAPI) CancelOpenCypherQuery(arg0 *neptunedata.CancelOpenCypherQueryInput) (*neptunedata.CancelOpenCypherQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOpenCypherQuery", arg0)
	ret0, _ := ret[0].(*neptunedata.CancelOpenCypherQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOpenCypherQuery indicates an expected call of CancelOpenCypherQuery
func (mr *MockNeptunedataAPIMockRecorder) CancelOpenCypherQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOpenCypherQuery", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelOpenCypherQuery), arg0)
}

// CancelOpenCypherQueryRequest mocks base method
func (m *MockNeptunedataAPI) CancelOpenCypherQueryRequest(arg0 *neptunedata.CancelOpenCypherQueryInput) (*request.Request, *neptunedata.CancelOpenCypherQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOpenCypherQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.CancelOpenCypherQueryOutput)
	return ret0, ret1
}

// CancelOpenCypherQueryRequest indicates an expected call of CancelOpenCypherQueryRequest
func (mr *MockNeptunedataAPIMockRecorder) CancelOpenCypherQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOpenCypherQueryRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelOpenCypherQueryRequest), arg0)
}

// CancelOpenCypherQueryWithContext mocks base method
func (m *MockNeptunedataAPI) CancelOpenCypherQueryWithContext(arg0 context.Context, arg1 *neptunedata.CancelOpenCypherQueryInput, arg2 ...request.Option) (*neptunedata.CancelOpenCypherQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelOpenCypherQueryWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.CancelOpenCypherQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOpenCypherQueryWithContext indicates an expected call of CancelOpenCypherQueryWithContext
func (mr *MockNeptunedataAPIMockRecorder) CancelOpenCypherQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOpenCypherQueryWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).CancelOpenCypherQueryWithContext), varargs...)
}

// CreateMLEndpoint mocks base method
func (m *MockNeptunedataAPI) CreateMLEndpoint(arg0 *neptunedata.CreateMLEndpointInput) (*neptunedata.CreateMLEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMLEndpoint", arg0)
	ret0, _ := ret[0].(*neptunedata.CreateMLEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMLEndpoint indicates an expected call of CreateMLEndpoint
func (mr *MockNeptunedataAPIMockRecorder) CreateMLEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMLEndpoint", reflect.TypeOf((*MockNeptunedataAPI)(nil).CreateMLEndpoint), arg0)
}

// CreateMLEndpointRequest mocks base method
func (m *MockNeptunedataAPI) CreateMLEndpointRequest(arg0 *neptunedata.CreateMLEndpointInput) (*request.Request, *neptunedata.CreateMLEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMLEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.CreateMLEndpointOutput)
	return ret0, ret1
}

// CreateMLEndpointRequest indicates an expected call of CreateMLEndpointRequest
func (mr *MockNeptunedataAPIMockRecorder) CreateMLEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMLEndpointRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).CreateMLEndpointRequest), arg0)
}

// CreateMLEndpointWithContext mocks base method
func (m *MockNeptunedataAPI) CreateMLEndpointWithContext(arg0 context.Context, arg1 *neptunedata.CreateMLEndpointInput, arg2 ...request.Option) (*neptunedata.CreateMLEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMLEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.CreateMLEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMLEndpointWithContext indicates an expected call of CreateMLEndpointWithContext
func (mr *MockNeptunedataAPIMockRecorder) CreateMLEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMLEndpointWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).CreateMLEndpointWithContext), varargs...)
}

// DeleteMLEndpoint mocks base method
func (m *MockNeptunedataAPI) DeleteMLEndpoint(arg0 *neptunedata.DeleteMLEndpointInput) (*neptunedata.DeleteMLEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMLEndpoint", arg0)
	ret0, _ := ret[0].(*neptunedata.DeleteMLEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMLEndpoint indicates an expected call of DeleteMLEndpoint
func (mr *MockNeptunedataAPIMockRecorder) DeleteMLEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMLEndpoint", reflect.TypeOf((*MockNeptunedataAPI)(nil).DeleteMLEndpoint), arg0)
}

// DeleteMLEndpointRequest mocks base method
func (m *MockNeptunedataAPI) DeleteMLEndpointRequest(arg0 *neptunedata.DeleteMLEndpointInput) (*request.Request, *neptunedata.DeleteMLEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMLEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.DeleteMLEndpointOutput)
	return ret0, ret1
}

// DeleteMLEndpointRequest indicates an expected call of DeleteMLEndpointRequest
func (mr *MockNeptunedataAPIMockRecorder) DeleteMLEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMLEndpointRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).DeleteMLEndpointRequest), arg0)
}

// DeleteMLEndpointWithContext mocks base method
func (m *MockNeptunedataAPI) DeleteMLEndpointWithContext(arg0 context.Context, arg1 *neptunedata.DeleteMLEndpointInput, arg2 ...request.Option) (*neptunedata.DeleteMLEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMLEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.DeleteMLEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMLEndpointWithContext indicates an expected call of DeleteMLEndpointWithContext
func (mr *MockNeptunedataAPIMockRecorder) DeleteMLEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMLEndpointWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).DeleteMLEndpointWithContext), varargs...)
}

// DeletePropertygraphStatistics mocks base method
func (m *MockNeptunedataAPI) DeletePropertygraphStatistics(arg0 *neptunedata.DeletePropertygraphStatisticsInput) (*neptunedata.DeletePropertygraphStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePropertygraphStatistics", arg0)
	ret0, _ := ret[0].(*neptunedata.DeletePropertygraphStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePropertygraphStatistics indicates an expected call of DeletePropertygraphStatistics
func (mr *MockNeptunedataAPIMockRecorder) DeletePropertygraphStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePropertygraphStatistics", reflect.TypeOf((*MockNeptunedataAPI)(nil).DeletePropertygraphStatistics), arg0)
}

// DeletePropertygraphStatisticsRequest mocks base method
func (m *MockNeptunedataAPI) DeletePropertygraphStatisticsRequest(arg0 *neptunedata.DeletePropertygraphStatisticsInput) (*request.Request, *neptunedata.DeletePropertygraphStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePropertygraphStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.DeletePropertygraphStatisticsOutput)
	return ret0, ret1
}

// DeletePropertygraphStatisticsRequest indicates an expected call of DeletePropertygraphStatisticsRequest
func (mr *MockNeptunedataAPIMockRecorder) DeletePropertygraphStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePropertygraphStatisticsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).DeletePropertygraphStatisticsRequest), arg0)
}

// DeletePropertygraphStatisticsWithContext mocks base method
func (m *MockNeptunedataAPI) DeletePropertygraphStatisticsWithContext(arg0 context.Context, arg1 *neptunedata.DeletePropertygraphStatisticsInput, arg2 ...request.Option) (*neptunedata.DeletePropertygraphStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePropertygraphStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.DeletePropertygraphStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePropertygraphStatisticsWithContext indicates an expected call of DeletePropertygraphStatisticsWithContext
func (mr *MockNeptunedataAPIMockRecorder) DeletePropertygraphStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePropertygraphStatisticsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).DeletePropertygraphStatisticsWithContext), varargs...)
}

// DeleteSparqlStatistics mocks base method
func (m *MockNeptunedataAPI) DeleteSparqlStatistics(arg0 *neptunedata.DeleteSparqlStatisticsInput) (*neptunedata.DeleteSparqlStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSparqlStatistics", arg0)
	ret0, _ := ret[0].(*neptunedata.DeleteSparqlStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSparqlStatistics indicates an expected call of DeleteSparqlStatistics
func (mr *MockNeptunedataAPIMockRecorder) DeleteSparqlStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSparqlStatistics", reflect.TypeOf((*MockNeptunedataAPI)(nil).DeleteSparqlStatistics), arg0)
}

// DeleteSparqlStatisticsRequest mocks base method
func (m *MockNeptunedataAPI) DeleteSparqlStatisticsRequest(arg0 *neptunedata.DeleteSparqlStatisticsInput) (*request.Request, *neptunedata.DeleteSparqlStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSparqlStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.DeleteSparqlStatisticsOutput)
	return ret0, ret1
}

// DeleteSparqlStatisticsRequest indicates an expected call of DeleteSparqlStatisticsRequest
func (mr *MockNeptunedataAPIMockRecorder) DeleteSparqlStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSparqlStatisticsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).DeleteSparqlStatisticsRequest), arg0)
}

// DeleteSparqlStatisticsWithContext mocks base method
func (m *MockNeptunedataAPI) DeleteSparqlStatisticsWithContext(arg0 context.Context, arg1 *neptunedata.DeleteSparqlStatisticsInput, arg2 ...request.Option) (*neptunedata.DeleteSparqlStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSparqlStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.DeleteSparqlStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSparqlStatisticsWithContext indicates an expected call of DeleteSparqlStatisticsWithContext
func (mr *MockNeptunedataAPIMockRecorder) DeleteSparqlStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSparqlStatisticsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).DeleteSparqlStatisticsWithContext), varargs...)
}

// ExecuteFastReset mocks base method
func (m *MockNeptunedataAPI) ExecuteFastReset(arg0 *neptunedata.ExecuteFastResetInput) (*neptunedata.ExecuteFastResetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteFastReset", arg0)
	ret0, _ := ret[0].(*neptunedata.ExecuteFastResetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFastReset indicates an expected call of ExecuteFastReset
func (mr *MockNeptunedataAPIMockRecorder) ExecuteFastReset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFastReset", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteFastReset), arg0)
}

// ExecuteFastResetRequest mocks base method
func (m *MockNeptunedataAPI) ExecuteFastResetRequest(arg0 *neptunedata.ExecuteFastResetInput) (*request.Request, *neptunedata.ExecuteFastResetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteFastResetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ExecuteFastResetOutput)
	return ret0, ret1
}

// ExecuteFastResetRequest indicates an expected call of ExecuteFastResetRequest
func (mr *MockNeptunedataAPIMockRecorder) ExecuteFastResetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFastResetRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteFastResetRequest), arg0)
}

// ExecuteFastResetWithContext mocks base method
func (m *MockNeptunedataAPI) ExecuteFastResetWithContext(arg0 context.Context, arg1 *neptunedata.ExecuteFastResetInput, arg2 ...request.Option) (*neptunedata.ExecuteFastResetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteFastResetWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ExecuteFastResetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteFastResetWithContext indicates an expected call of ExecuteFastResetWithContext
func (mr *MockNeptunedataAPIMockRecorder) ExecuteFastResetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteFastResetWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteFastResetWithContext), varargs...)
}

// ExecuteGremlinExplainQuery mocks base method
func (m *MockNeptunedataAPI) ExecuteGremlinExplainQuery(arg0 *neptunedata.ExecuteGremlinExplainQueryInput) (*neptunedata.ExecuteGremlinExplainQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGremlinExplainQuery", arg0)
	ret0, _ := ret[0].(*neptunedata.ExecuteGremlinExplainQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGremlinExplainQuery indicates an expected call of ExecuteGremlinExplainQuery
func (mr *MockNeptunedataAPIMockRecorder) ExecuteGremlinExplainQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGremlinExplainQuery", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteGremlinExplainQuery), arg0)
}

// ExecuteGremlinExplainQueryRequest mocks base method
func (m *MockNeptunedataAPI) ExecuteGremlinExplainQueryRequest(arg0 *neptunedata.ExecuteGremlinExplainQueryInput) (*request.Request, *neptunedata.ExecuteGremlinExplainQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGremlinExplainQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ExecuteGremlinExplainQueryOutput)
	return ret0, ret1
}

// ExecuteGremlinExplainQueryRequest indicates an expected call of ExecuteGremlinExplainQueryRequest
func (mr *MockNeptunedataAPIMockRecorder) ExecuteGremlinExplainQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGremlinExplainQueryRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteGremlinExplainQueryRequest), arg0)
}

// ExecuteGremlinExplainQueryWithContext mocks base method
func (m *MockNeptunedataAPI) ExecuteGremlinExplainQueryWithContext(arg0 context.Context, arg1 *neptunedata.ExecuteGremlinExplainQueryInput, arg2 ...request.Option) (*neptunedata.ExecuteGremlinExplainQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteGremlinExplainQueryWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ExecuteGremlinExplainQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGremlinExplainQueryWithContext indicates an expected call of ExecuteGremlinExplainQueryWithContext
func (mr *MockNeptunedataAPIMockRecorder) ExecuteGremlinExplainQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGremlinExplainQueryWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteGremlinExplainQueryWithContext), varargs...)
}

// ExecuteGremlinProfileQuery mocks base method
func (m *MockNeptunedataAPI) ExecuteGremlinProfileQuery(arg0 *neptunedata.ExecuteGremlinProfileQueryInput) (*neptunedata.ExecuteGremlinProfileQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGremlinProfileQuery", arg0)
	ret0, _ := ret[0].(*neptunedata.ExecuteGremlinProfileQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGremlinProfileQuery indicates an expected call of ExecuteGremlinProfileQuery
func (mr *MockNeptunedataAPIMockRecorder) ExecuteGremlinProfileQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGremlinProfileQuery", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteGremlinProfileQuery), arg0)
}

// ExecuteGremlinProfileQueryRequest mocks base method
func (m *MockNeptunedataAPI) ExecuteGremlinProfileQueryRequest(arg0 *neptunedata.ExecuteGremlinProfileQueryInput) (*request.Request, *neptunedata.ExecuteGremlinProfileQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGremlinProfileQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ExecuteGremlinProfileQueryOutput)
	return ret0, ret1
}

// ExecuteGremlinProfileQueryRequest indicates an expected call of ExecuteGremlinProfileQueryRequest
func (mr *MockNeptunedataAPIMockRecorder) ExecuteGremlinProfileQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGremlinProfileQueryRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteGremlinProfileQueryRequest), arg0)
}

// ExecuteGremlinProfileQueryWithContext mocks base method
func (m *MockNeptunedataAPI) ExecuteGremlinProfileQueryWithContext(arg0 context.Context, arg1 *neptunedata.ExecuteGremlinProfileQueryInput, arg2 ...request.Option) (*neptunedata.ExecuteGremlinProfileQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteGremlinProfileQueryWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ExecuteGremlinProfileQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGremlinProfileQueryWithContext indicates an expected call of ExecuteGremlinProfileQueryWithContext
func (mr *MockNeptunedataAPIMockRecorder) ExecuteGremlinProfileQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGremlinProfileQueryWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteGremlinProfileQueryWithContext), varargs...)
}

// ExecuteGremlinQuery mocks base method
func (m *MockNeptunedataAPI) ExecuteGremlinQuery(arg0 *neptunedata.ExecuteGremlinQueryInput) (*neptunedata.ExecuteGremlinQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGremlinQuery", arg0)
	ret0, _ := ret[0].(*neptunedata.ExecuteGremlinQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGremlinQuery indicates an expected call of ExecuteGremlinQuery
func (mr *MockNeptunedataAPIMockRecorder) ExecuteGremlinQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGremlinQuery", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteGremlinQuery), arg0)
}

// ExecuteGremlinQueryRequest mocks base method
func (m *MockNeptunedataAPI) ExecuteGremlinQueryRequest(arg0 *neptunedata.ExecuteGremlinQueryInput) (*request.Request, *neptunedata.ExecuteGremlinQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGremlinQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ExecuteGremlinQueryOutput)
	return ret0, ret1
}

// ExecuteGremlinQueryRequest indicates an expected call of ExecuteGremlinQueryRequest
func (mr *MockNeptunedataAPIMockRecorder) ExecuteGremlinQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGremlinQueryRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteGremlinQueryRequest), arg0)
}

// ExecuteGremlinQueryWithContext mocks base method
func (m *MockNeptunedataAPI) ExecuteGremlinQueryWithContext(arg0 context.Context, arg1 *neptunedata.ExecuteGremlinQueryInput, arg2 ...request.Option) (*neptunedata.ExecuteGremlinQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteGremlinQueryWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ExecuteGremlinQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGremlinQueryWithContext indicates an expected call of ExecuteGremlinQueryWithContext
func (mr *MockNeptunedataAPIMockRecorder) ExecuteGremlinQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGremlinQueryWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteGremlinQueryWithContext), varargs...)
}

// ExecuteOpenCypherExplainQuery mocks base method
func (m *MockNeptunedataAPI) ExecuteOpenCypherExplainQuery(arg0 *neptunedata.ExecuteOpenCypherExplainQueryInput) (*neptunedata.ExecuteOpenCypherExplainQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteOpenCypherExplainQuery", arg0)
	ret0, _ := ret[0].(*neptunedata.ExecuteOpenCypherExplainQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteOpenCypherExplainQuery indicates an expected call of ExecuteOpenCypherExplainQuery
func (mr *MockNeptunedataAPIMockRecorder) ExecuteOpenCypherExplainQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOpenCypherExplainQuery", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteOpenCypherExplainQuery), arg0)
}

// ExecuteOpenCypherExplainQueryRequest mocks base method
func (m *MockNeptunedataAPI) ExecuteOpenCypherExplainQueryRequest(arg0 *neptunedata.ExecuteOpenCypherExplainQueryInput) (*request.Request, *neptunedata.ExecuteOpenCypherExplainQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteOpenCypherExplainQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ExecuteOpenCypherExplainQueryOutput)
	return ret0, ret1
}

// ExecuteOpenCypherExplainQueryRequest indicates an expected call of ExecuteOpenCypherExplainQueryRequest
func (mr *MockNeptunedataAPIMockRecorder) ExecuteOpenCypherExplainQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOpenCypherExplainQueryRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteOpenCypherExplainQueryRequest), arg0)
}

// ExecuteOpenCypherExplainQueryWithContext mocks base method
func (m *MockNeptunedataAPI) ExecuteOpenCypherExplainQueryWithContext(arg0 context.Context, arg1 *neptunedata.ExecuteOpenCypherExplainQueryInput, arg2 ...request.Option) (*neptunedata.ExecuteOpenCypherExplainQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteOpenCypherExplainQueryWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ExecuteOpenCypherExplainQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteOpenCypherExplainQueryWithContext indicates an expected call of ExecuteOpenCypherExplainQueryWithContext
func (mr *MockNeptunedataAPIMockRecorder) ExecuteOpenCypherExplainQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOpenCypherExplainQueryWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ExecuteOpenCypherExplainQueryWithContext), varargs...)
}

// GetEngineStatus mocks base method
func (m *MockNeptunedataAPI) GetEngineStatus(arg0 *neptunedata.GetEngineStatusInput) (*neptunedata.GetEngineStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngineStatus", arg0)
	ret0, _ := ret[0].(*neptunedata.GetEngineStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEngineStatus indicates an expected call of GetEngineStatus
func (mr *MockNeptunedataAPIMockRecorder) GetEngineStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngineStatus", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetEngineStatus), arg0)
}

// GetEngineStatusRequest mocks base method
func (m *MockNeptunedataAPI) GetEngineStatusRequest(arg0 *neptunedata.GetEngineStatusInput) (*request.Request, *neptunedata.GetEngineStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngineStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetEngineStatusOutput)
	return ret0, ret1
}

// GetEngineStatusRequest indicates an expected call of GetEngineStatusRequest
func (mr *MockNeptunedataAPIMockRecorder) GetEngineStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngineStatusRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetEngineStatusRequest), arg0)
}

// GetEngineStatusWithContext mocks base method
func (m *MockNeptunedataAPI) GetEngineStatusWithContext(arg0 context.Context, arg1 *neptunedata.GetEngineStatusInput, arg2 ...request.Option) (*neptunedata.GetEngineStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEngineStatusWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetEngineStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEngineStatusWithContext indicates an expected call of GetEngineStatusWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetEngineStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngineStatusWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetEngineStatusWithContext), varargs...)
}

// GetGremlinQueryStatus mocks base method
func (m *MockNeptunedataAPI) GetGremlinQueryStatus(arg0 *neptunedata.GetGremlinQueryStatusInput) (*neptunedata.GetGremlinQueryStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGremlinQueryStatus", arg0)
	ret0, _ := ret[0].(*neptunedata.GetGremlinQueryStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGremlinQueryStatus indicates an expected call of GetGremlinQueryStatus
func (mr *MockNeptunedataAPIMockRecorder) GetGremlinQueryStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGremlinQueryStatus", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetGremlinQueryStatus), arg0)
}

// GetGremlinQueryStatusRequest mocks base method
func (m *MockNeptunedataAPI) GetGremlinQueryStatusRequest(arg0 *neptunedata.GetGremlinQueryStatusInput) (*request.Request, *neptunedata.GetGremlinQueryStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGremlinQueryStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetGremlinQueryStatusOutput)
	return ret0, ret1
}

// GetGremlinQueryStatusRequest indicates an expected call of GetGremlinQueryStatusRequest
func (mr *MockNeptunedataAPIMockRecorder) GetGremlinQueryStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGremlinQueryStatusRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetGremlinQueryStatusRequest), arg0)
}

// GetGremlinQueryStatusWithContext mocks base method
func (m *MockNeptunedataAPI) GetGremlinQueryStatusWithContext(arg0 context.Context, arg1 *neptunedata.GetGremlinQueryStatusInput, arg2 ...request.Option) (*neptunedata.GetGremlinQueryStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGremlinQueryStatusWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetGremlinQueryStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGremlinQueryStatusWithContext indicates an expected call of GetGremlinQueryStatusWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetGremlinQueryStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGremlinQueryStatusWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetGremlinQueryStatusWithContext), varargs...)
}

// GetMLDataProcessingJob mocks base method
func (m *MockNeptunedataAPI) GetMLDataProcessingJob(arg0 *neptunedata.GetMLDataProcessingJobInput) (*neptunedata.GetMLDataProcessingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLDataProcessingJob", arg0)
	ret0, _ := ret[0].(*neptunedata.GetMLDataProcessingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLDataProcessingJob indicates an expected call of GetMLDataProcessingJob
func (mr *MockNeptunedataAPIMockRecorder) GetMLDataProcessingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLDataProcessingJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLDataProcessingJob), arg0)
}

// GetMLDataProcessingJobRequest mocks base method
func (m *MockNeptunedataAPI) GetMLDataProcessingJobRequest(arg0 *neptunedata.GetMLDataProcessingJobInput) (*request.Request, *neptunedata.GetMLDataProcessingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLDataProcessingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetMLDataProcessingJobOutput)
	return ret0, ret1
}

// GetMLDataProcessingJobRequest indicates an expected call of GetMLDataProcessingJobRequest
func (mr *MockNeptunedataAPIMockRecorder) GetMLDataProcessingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLDataProcessingJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLDataProcessingJobRequest), arg0)
}

// GetMLDataProcessingJobWithContext mocks base method
func (m *MockNeptunedataAPI) GetMLDataProcessingJobWithContext(arg0 context.Context, arg1 *neptunedata.GetMLDataProcessingJobInput, arg2 ...request.Option) (*neptunedata.GetMLDataProcessingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMLDataProcessingJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetMLDataProcessingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLDataProcessingJobWithContext indicates an expected call of GetMLDataProcessingJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetMLDataProcessingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLDataProcessingJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLDataProcessingJobWithContext), varargs...)
}

// GetMLEndpoint mocks base method
func (m *MockNeptunedataAPI) GetMLEndpoint(arg0 *neptunedata.GetMLEndpointInput) (*neptunedata.GetMLEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLEndpoint", arg0)
	ret0, _ := ret[0].(*neptunedata.GetMLEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLEndpoint indicates an expected call of GetMLEndpoint
func (mr *MockNeptunedataAPIMockRecorder) GetMLEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLEndpoint", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLEndpoint), arg0)
}

// GetMLEndpointRequest mocks base method
func (m *MockNeptunedataAPI) GetMLEndpointRequest(arg0 *neptunedata.GetMLEndpointInput) (*request.Request, *neptunedata.GetMLEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetMLEndpointOutput)
	return ret0, ret1
}

// GetMLEndpointRequest indicates an expected call of GetMLEndpointRequest
func (mr *MockNeptunedataAPIMockRecorder) GetMLEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLEndpointRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLEndpointRequest), arg0)
}

// GetMLEndpointWithContext mocks base method
func (m *MockNeptunedataAPI) GetMLEndpointWithContext(arg0 context.Context, arg1 *neptunedata.GetMLEndpointInput, arg2 ...request.Option) (*neptunedata.GetMLEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMLEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetMLEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLEndpointWithContext indicates an expected call of GetMLEndpointWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetMLEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLEndpointWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLEndpointWithContext), varargs...)
}

// GetMLModelTrainingJob mocks base method
func (m *MockNeptunedataAPI) GetMLModelTrainingJob(arg0 *neptunedata.GetMLModelTrainingJobInput) (*neptunedata.GetMLModelTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLModelTrainingJob", arg0)
	ret0, _ := ret[0].(*neptunedata.GetMLModelTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLModelTrainingJob indicates an expected call of GetMLModelTrainingJob
func (mr *MockNeptunedataAPIMockRecorder) GetMLModelTrainingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLModelTrainingJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLModelTrainingJob), arg0)
}

// GetMLModelTrainingJobRequest mocks base method
func (m *MockNeptunedataAPI) GetMLModelTrainingJobRequest(arg0 *neptunedata.GetMLModelTrainingJobInput) (*request.Request, *neptunedata.GetMLModelTrainingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLModelTrainingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetMLModelTrainingJobOutput)
	return ret0, ret1
}

// GetMLModelTrainingJobRequest indicates an expected call of GetMLModelTrainingJobRequest
func (mr *MockNeptunedataAPIMockRecorder) GetMLModelTrainingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLModelTrainingJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLModelTrainingJobRequest), arg0)
}

// GetMLModelTrainingJobWithContext mocks base method
func (m *MockNeptunedataAPI) GetMLModelTrainingJobWithContext(arg0 context.Context, arg1 *neptunedata.GetMLModelTrainingJobInput, arg2 ...request.Option) (*neptunedata.GetMLModelTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMLModelTrainingJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetMLModelTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLModelTrainingJobWithContext indicates an expected call of GetMLModelTrainingJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetMLModelTrainingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLModelTrainingJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLModelTrainingJobWithContext), varargs...)
}

// GetMLModelTransformJob mocks base method
func (m *MockNeptunedataAPI) GetMLModelTransformJob(arg0 *neptunedata.GetMLModelTransformJobInput) (*neptunedata.GetMLModelTransformJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLModelTransformJob", arg0)
	ret0, _ := ret[0].(*neptunedata.GetMLModelTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLModelTransformJob indicates an expected call of GetMLModelTransformJob
func (mr *MockNeptunedataAPIMockRecorder) GetMLModelTransformJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLModelTransformJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLModelTransformJob), arg0)
}

// GetMLModelTransformJobRequest mocks base method
func (m *MockNeptunedataAPI) GetMLModelTransformJobRequest(arg0 *neptunedata.GetMLModelTransformJobInput) (*request.Request, *neptunedata.GetMLModelTransformJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLModelTransformJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetMLModelTransformJobOutput)
	return ret0, ret1
}

// GetMLModelTransformJobRequest indicates an expected call of GetMLModelTransformJobRequest
func (mr *MockNeptunedataAPIMockRecorder) GetMLModelTransformJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLModelTransformJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLModelTransformJobRequest), arg0)
}

// GetMLModelTransformJobWithContext mocks base method
func (m *MockNeptunedataAPI) GetMLModelTransformJobWithContext(arg0 context.Context, arg1 *neptunedata.GetMLModelTransformJobInput, arg2 ...request.Option) (*neptunedata.GetMLModelTransformJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMLModelTransformJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetMLModelTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLModelTransformJobWithContext indicates an expected call of GetMLModelTransformJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetMLModelTransformJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLModelTransformJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetMLModelTransformJobWithContext), varargs...)
}

// GetOpenCypherQueryStatus mocks base method
func (m *MockNeptunedataAPI) GetOpenCypherQueryStatus(arg0 *neptunedata.GetOpenCypherQueryStatusInput) (*neptunedata.GetOpenCypherQueryStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenCypherQueryStatus", arg0)
	ret0, _ := ret[0].(*neptunedata.GetOpenCypherQueryStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenCypherQueryStatus indicates an expected call of GetOpenCypherQueryStatus
func (mr *MockNeptunedataAPIMockRecorder) GetOpenCypherQueryStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenCypherQueryStatus", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetOpenCypherQueryStatus), arg0)
}

// GetOpenCypherQueryStatusRequest mocks base method
func (m *MockNeptunedataAPI) GetOpenCypherQueryStatusRequest(arg0 *neptunedata.GetOpenCypherQueryStatusInput) (*request.Request, *neptunedata.GetOpenCypherQueryStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenCypherQueryStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetOpenCypherQueryStatusOutput)
	return ret0, ret1
}

// GetOpenCypherQueryStatusRequest indicates an expected call of GetOpenCypherQueryStatusRequest
func (mr *MockNeptunedataAPIMockRecorder) GetOpenCypherQueryStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenCypherQueryStatusRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetOpenCypherQueryStatusRequest), arg0)
}

// GetOpenCypherQueryStatusWithContext mocks base method
func (m *MockNeptunedataAPI) GetOpenCypherQueryStatusWithContext(arg0 context.Context, arg1 *neptunedata.GetOpenCypherQueryStatusInput, arg2 ...request.Option) (*neptunedata.GetOpenCypherQueryStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpenCypherQueryStatusWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetOpenCypherQueryStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenCypherQueryStatusWithContext indicates an expected call of GetOpenCypherQueryStatusWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetOpenCypherQueryStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenCypherQueryStatusWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetOpenCypherQueryStatusWithContext), varargs...)
}

// GetPropertygraphStatistics mocks base method
func (m *MockNeptunedataAPI) GetPropertygraphStatistics(arg0 *neptunedata.GetPropertygraphStatisticsInput) (*neptunedata.GetPropertygraphStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertygraphStatistics", arg0)
	ret0, _ := ret[0].(*neptunedata.GetPropertygraphStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertygraphStatistics indicates an expected call of GetPropertygraphStatistics
func (mr *MockNeptunedataAPIMockRecorder) GetPropertygraphStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertygraphStatistics", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetPropertygraphStatistics), arg0)
}

// GetPropertygraphStatisticsRequest mocks base method
func (m *MockNeptunedataAPI) GetPropertygraphStatisticsRequest(arg0 *neptunedata.GetPropertygraphStatisticsInput) (*request.Request, *neptunedata.GetPropertygraphStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertygraphStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetPropertygraphStatisticsOutput)
	return ret0, ret1
}

// GetPropertygraphStatisticsRequest indicates an expected call of GetPropertygraphStatisticsRequest
func (mr *MockNeptunedataAPIMockRecorder) GetPropertygraphStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertygraphStatisticsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetPropertygraphStatisticsRequest), arg0)
}

// GetPropertygraphStatisticsWithContext mocks base method
func (m *MockNeptunedataAPI) GetPropertygraphStatisticsWithContext(arg0 context.Context, arg1 *neptunedata.GetPropertygraphStatisticsInput, arg2 ...request.Option) (*neptunedata.GetPropertygraphStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPropertygraphStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetPropertygraphStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertygraphStatisticsWithContext indicates an expected call of GetPropertygraphStatisticsWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetPropertygraphStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertygraphStatisticsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetPropertygraphStatisticsWithContext), varargs...)
}

// GetPropertygraphSummary mocks base method
func (m *MockNeptunedataAPI) GetPropertygraphSummary(arg0 *neptunedata.GetPropertygraphSummaryInput) (*neptunedata.GetPropertygraphSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertygraphSummary", arg0)
	ret0, _ := ret[0].(*neptunedata.GetPropertygraphSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertygraphSummary indicates an expected call of GetPropertygraphSummary
func (mr *MockNeptunedataAPIMockRecorder) GetPropertygraphSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertygraphSummary", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetPropertygraphSummary), arg0)
}

// GetPropertygraphSummaryRequest mocks base method
func (m *MockNeptunedataAPI) GetPropertygraphSummaryRequest(arg0 *neptunedata.GetPropertygraphSummaryInput) (*request.Request, *neptunedata.GetPropertygraphSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertygraphSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetPropertygraphSummaryOutput)
	return ret0, ret1
}

// GetPropertygraphSummaryRequest indicates an expected call of GetPropertygraphSummaryRequest
func (mr *MockNeptunedataAPIMockRecorder) GetPropertygraphSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertygraphSummaryRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetPropertygraphSummaryRequest), arg0)
}

// GetPropertygraphSummaryWithContext mocks base method
func (m *MockNeptunedataAPI) GetPropertygraphSummaryWithContext(arg0 context.Context, arg1 *neptunedata.GetPropertygraphSummaryInput, arg2 ...request.Option) (*neptunedata.GetPropertygraphSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPropertygraphSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetPropertygraphSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertygraphSummaryWithContext indicates an expected call of GetPropertygraphSummaryWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetPropertygraphSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertygraphSummaryWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetPropertygraphSummaryWithContext), varargs...)
}

// GetRDFGraphSummary mocks base method
func (m *MockNeptunedataAPI) GetRDFGraphSummary(arg0 *neptunedata.GetRDFGraphSummaryInput) (*neptunedata.GetRDFGraphSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRDFGraphSummary", arg0)
	ret0, _ := ret[0].(*neptunedata.GetRDFGraphSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRDFGraphSummary indicates an expected call of GetRDFGraphSummary
func (mr *MockNeptunedataAPIMockRecorder) GetRDFGraphSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRDFGraphSummary", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetRDFGraphSummary), arg0)
}

// GetRDFGraphSummaryRequest mocks base method
func (m *MockNeptunedataAPI) GetRDFGraphSummaryRequest(arg0 *neptunedata.GetRDFGraphSummaryInput) (*request.Request, *neptunedata.GetRDFGraphSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRDFGraphSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetRDFGraphSummaryOutput)
	return ret0, ret1
}

// GetRDFGraphSummaryRequest indicates an expected call of GetRDFGraphSummaryRequest
func (mr *MockNeptunedataAPIMockRecorder) GetRDFGraphSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRDFGraphSummaryRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetRDFGraphSummaryRequest), arg0)
}

// GetRDFGraphSummaryWithContext mocks base method
func (m *MockNeptunedataAPI) GetRDFGraphSummaryWithContext(arg0 context.Context, arg1 *neptunedata.GetRDFGraphSummaryInput, arg2 ...request.Option) (*neptunedata.GetRDFGraphSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRDFGraphSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetRDFGraphSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRDFGraphSummaryWithContext indicates an expected call of GetRDFGraphSummaryWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetRDFGraphSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRDFGraphSummaryWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetRDFGraphSummaryWithContext), varargs...)
}

// GetSparqlStatistics mocks base method
func (m *MockNeptunedataAPI) GetSparqlStatistics(arg0 *neptunedata.GetSparqlStatisticsInput) (*neptunedata.GetSparqlStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSparqlStatistics", arg0)
	ret0, _ := ret[0].(*neptunedata.GetSparqlStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSparqlStatistics indicates an expected call of GetSparqlStatistics
func (mr *MockNeptunedataAPIMockRecorder) GetSparqlStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparqlStatistics", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetSparqlStatistics), arg0)
}

// GetSparqlStatisticsRequest mocks base method
func (m *MockNeptunedataAPI) GetSparqlStatisticsRequest(arg0 *neptunedata.GetSparqlStatisticsInput) (*request.Request, *neptunedata.GetSparqlStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSparqlStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetSparqlStatisticsOutput)
	return ret0, ret1
}

// GetSparqlStatisticsRequest indicates an expected call of GetSparqlStatisticsRequest
func (mr *MockNeptunedataAPIMockRecorder) GetSparqlStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparqlStatisticsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetSparqlStatisticsRequest), arg0)
}

// GetSparqlStatisticsWithContext mocks base method
func (m *MockNeptunedataAPI) GetSparqlStatisticsWithContext(arg0 context.Context, arg1 *neptunedata.GetSparqlStatisticsInput, arg2 ...request.Option) (*neptunedata.GetSparqlStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSparqlStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetSparqlStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSparqlStatisticsWithContext indicates an expected call of GetSparqlStatisticsWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetSparqlStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparqlStatisticsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetSparqlStatisticsWithContext), varargs...)
}

// GetSparqlStream mocks base method
func (m *MockNeptunedataAPI) GetSparqlStream(arg0 *neptunedata.GetSparqlStreamInput) (*neptunedata.GetSparqlStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSparqlStream", arg0)
	ret0, _ := ret[0].(*neptunedata.GetSparqlStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSparqlStream indicates an expected call of GetSparqlStream
func (mr *MockNeptunedataAPIMockRecorder) GetSparqlStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparqlStream", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetSparqlStream), arg0)
}

// GetSparqlStreamRequest mocks base method
func (m *MockNeptunedataAPI) GetSparqlStreamRequest(arg0 *neptunedata.GetSparqlStreamInput) (*request.Request, *neptunedata.GetSparqlStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSparqlStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.GetSparqlStreamOutput)
	return ret0, ret1
}

// GetSparqlStreamRequest indicates an expected call of GetSparqlStreamRequest
func (mr *MockNeptunedataAPIMockRecorder) GetSparqlStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparqlStreamRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetSparqlStreamRequest), arg0)
}

// GetSparqlStreamWithContext mocks base method
func (m *MockNeptunedataAPI) GetSparqlStreamWithContext(arg0 context.Context, arg1 *neptunedata.GetSparqlStreamInput, arg2 ...request.Option) (*neptunedata.GetSparqlStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSparqlStreamWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.GetSparqlStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSparqlStreamWithContext indicates an expected call of GetSparqlStreamWithContext
func (mr *MockNeptunedataAPIMockRecorder) GetSparqlStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparqlStreamWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).GetSparqlStreamWithContext), varargs...)
}

// ListGremlinQueries mocks base method
func (m *MockNeptunedataAPI) ListGremlinQueries(arg0 *neptunedata.ListGremlinQueriesInput) (*neptunedata.ListGremlinQueriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGremlinQueries", arg0)
	ret0, _ := ret[0].(*neptunedata.ListGremlinQueriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGremlinQueries indicates an expected call of ListGremlinQueries
func (mr *MockNeptunedataAPIMockRecorder) ListGremlinQueries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGremlinQueries", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListGremlinQueries), arg0)
}

// ListGremlinQueriesRequest mocks base method
func (m *MockNeptunedataAPI) ListGremlinQueriesRequest(arg0 *neptunedata.ListGremlinQueriesInput) (*request.Request, *neptunedata.ListGremlinQueriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGremlinQueriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ListGremlinQueriesOutput)
	return ret0, ret1
}

// ListGremlinQueriesRequest indicates an expected call of ListGremlinQueriesRequest
func (mr *MockNeptunedataAPIMockRecorder) ListGremlinQueriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGremlinQueriesRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListGremlinQueriesRequest), arg0)
}

// ListGremlinQueriesWithContext mocks base method
func (m *MockNeptunedataAPI) ListGremlinQueriesWithContext(arg0 context.Context, arg1 *neptunedata.ListGremlinQueriesInput, arg2 ...request.Option) (*neptunedata.ListGremlinQueriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGremlinQueriesWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ListGremlinQueriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGremlinQueriesWithContext indicates an expected call of ListGremlinQueriesWithContext
func (mr *MockNeptunedataAPIMockRecorder) ListGremlinQueriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGremlinQueriesWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListGremlinQueriesWithContext), varargs...)
}

// ListLoaderJobs mocks base method
func (m *MockNeptunedataAPI) ListLoaderJobs(arg0 *neptunedata.ListLoaderJobsInput) (*neptunedata.ListLoaderJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoaderJobs", arg0)
	ret0, _ := ret[0].(*neptunedata.ListLoaderJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoaderJobs indicates an expected call of ListLoaderJobs
func (mr *MockNeptunedataAPIMockRecorder) ListLoaderJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoaderJobs", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListLoaderJobs), arg0)
}

// ListLoaderJobsRequest mocks base method
func (m *MockNeptunedataAPI) ListLoaderJobsRequest(arg0 *neptunedata.ListLoaderJobsInput) (*request.Request, *neptunedata.ListLoaderJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoaderJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ListLoaderJobsOutput)
	return ret0, ret1
}

// ListLoaderJobsRequest indicates an expected call of ListLoaderJobsRequest
func (mr *MockNeptunedataAPIMockRecorder) ListLoaderJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoaderJobsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListLoaderJobsRequest), arg0)
}

// ListLoaderJobsWithContext mocks base method
func (m *MockNeptunedataAPI) ListLoaderJobsWithContext(arg0 context.Context, arg1 *neptunedata.ListLoaderJobsInput, arg2 ...request.Option) (*neptunedata.ListLoaderJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLoaderJobsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ListLoaderJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoaderJobsWithContext indicates an expected call of ListLoaderJobsWithContext
func (mr *MockNeptunedataAPIMockRecorder) ListLoaderJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoaderJobsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListLoaderJobsWithContext), varargs...)
}

// ListMLDataProcessingJobs mocks base method
func (m *MockNeptunedataAPI) ListMLDataProcessingJobs(arg0 *neptunedata.ListMLDataProcessingJobsInput) (*neptunedata.ListMLDataProcessingJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLDataProcessingJobs", arg0)
	ret0, _ := ret[0].(*neptunedata.ListMLDataProcessingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMLDataProcessingJobs indicates an expected call of ListMLDataProcessingJobs
func (mr *MockNeptunedataAPIMockRecorder) ListMLDataProcessingJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLDataProcessingJobs", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLDataProcessingJobs), arg0)
}

// ListMLDataProcessingJobsRequest mocks base method
func (m *MockNeptunedataAPI) ListMLDataProcessingJobsRequest(arg0 *neptunedata.ListMLDataProcessingJobsInput) (*request.Request, *neptunedata.ListMLDataProcessingJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLDataProcessingJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ListMLDataProcessingJobsOutput)
	return ret0, ret1
}

// ListMLDataProcessingJobsRequest indicates an expected call of ListMLDataProcessingJobsRequest
func (mr *MockNeptunedataAPIMockRecorder) ListMLDataProcessingJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLDataProcessingJobsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLDataProcessingJobsRequest), arg0)
}

// ListMLDataProcessingJobsWithContext mocks base method
func (m *MockNeptunedataAPI) ListMLDataProcessingJobsWithContext(arg0 context.Context, arg1 *neptunedata.ListMLDataProcessingJobsInput, arg2 ...request.Option) (*neptunedata.ListMLDataProcessingJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMLDataProcessingJobsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ListMLDataProcessingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMLDataProcessingJobsWithContext indicates an expected call of ListMLDataProcessingJobsWithContext
func (mr *MockNeptunedataAPIMockRecorder) ListMLDataProcessingJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLDataProcessingJobsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLDataProcessingJobsWithContext), varargs...)
}

// ListMLEndpoints mocks base method
func (m *MockNeptunedataAPI) ListMLEndpoints(arg0 *neptunedata.ListMLEndpointsInput) (*neptunedata.ListMLEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLEndpoints", arg0)
	ret0, _ := ret[0].(*neptunedata.ListMLEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMLEndpoints indicates an expected call of ListMLEndpoints
func (mr *MockNeptunedataAPIMockRecorder) ListMLEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLEndpoints", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLEndpoints), arg0)
}

// ListMLEndpointsRequest mocks base method
func (m *MockNeptunedataAPI) ListMLEndpointsRequest(arg0 *neptunedata.ListMLEndpointsInput) (*request.Request, *neptunedata.ListMLEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ListMLEndpointsOutput)
	return ret0, ret1
}

// ListMLEndpointsRequest indicates an expected call of ListMLEndpointsRequest
func (mr *MockNeptunedataAPIMockRecorder) ListMLEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLEndpointsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLEndpointsRequest), arg0)
}

// ListMLEndpointsWithContext mocks base method
func (m *MockNeptunedataAPI) ListMLEndpointsWithContext(arg0 context.Context, arg1 *neptunedata.ListMLEndpointsInput, arg2 ...request.Option) (*neptunedata.ListMLEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMLEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ListMLEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMLEndpointsWithContext indicates an expected call of ListMLEndpointsWithContext
func (mr *MockNeptunedataAPIMockRecorder) ListMLEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLEndpointsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLEndpointsWithContext), varargs...)
}

// ListMLModelTrainingJobs mocks base method
func (m *MockNeptunedataAPI) ListMLModelTrainingJobs(arg0 *neptunedata.ListMLModelTrainingJobsInput) (*neptunedata.ListMLModelTrainingJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLModelTrainingJobs", arg0)
	ret0, _ := ret[0].(*neptunedata.ListMLModelTrainingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMLModelTrainingJobs indicates an expected call of ListMLModelTrainingJobs
func (mr *MockNeptunedataAPIMockRecorder) ListMLModelTrainingJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLModelTrainingJobs", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLModelTrainingJobs), arg0)
}

// ListMLModelTrainingJobsRequest mocks base method
func (m *MockNeptunedataAPI) ListMLModelTrainingJobsRequest(arg0 *neptunedata.ListMLModelTrainingJobsInput) (*request.Request, *neptunedata.ListMLModelTrainingJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLModelTrainingJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ListMLModelTrainingJobsOutput)
	return ret0, ret1
}

// ListMLModelTrainingJobsRequest indicates an expected call of ListMLModelTrainingJobsRequest
func (mr *MockNeptunedataAPIMockRecorder) ListMLModelTrainingJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLModelTrainingJobsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLModelTrainingJobsRequest), arg0)
}

// ListMLModelTrainingJobsWithContext mocks base method
func (m *MockNeptunedataAPI) ListMLModelTrainingJobsWithContext(arg0 context.Context, arg1 *neptunedata.ListMLModelTrainingJobsInput, arg2 ...request.Option) (*neptunedata.ListMLModelTrainingJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMLModelTrainingJobsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ListMLModelTrainingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMLModelTrainingJobsWithContext indicates an expected call of ListMLModelTrainingJobsWithContext
func (mr *MockNeptunedataAPIMockRecorder) ListMLModelTrainingJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLModelTrainingJobsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLModelTrainingJobsWithContext), varargs...)
}

// ListMLModelTransformJobs mocks base method
func (m *MockNeptunedataAPI) ListMLModelTransformJobs(arg0 *neptunedata.ListMLModelTransformJobsInput) (*neptunedata.ListMLModelTransformJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLModelTransformJobs", arg0)
	ret0, _ := ret[0].(*neptunedata.ListMLModelTransformJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMLModelTransformJobs indicates an expected call of ListMLModelTransformJobs
func (mr *MockNeptunedataAPIMockRecorder) ListMLModelTransformJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLModelTransformJobs", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLModelTransformJobs), arg0)
}

// ListMLModelTransformJobsRequest mocks base method
func (m *MockNeptunedataAPI) ListMLModelTransformJobsRequest(arg0 *neptunedata.ListMLModelTransformJobsInput) (*request.Request, *neptunedata.ListMLModelTransformJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLModelTransformJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ListMLModelTransformJobsOutput)
	return ret0, ret1
}

// ListMLModelTransformJobsRequest indicates an expected call of ListMLModelTransformJobsRequest
func (mr *MockNeptunedataAPIMockRecorder) ListMLModelTransformJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLModelTransformJobsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLModelTransformJobsRequest), arg0)
}

// ListMLModelTransformJobsWithContext mocks base method
func (m *MockNeptunedataAPI) ListMLModelTransformJobsWithContext(arg0 context.Context, arg1 *neptunedata.ListMLModelTransformJobsInput, arg2 ...request.Option) (*neptunedata.ListMLModelTransformJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMLModelTransformJobsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ListMLModelTransformJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMLModelTransformJobsWithContext indicates an expected call of ListMLModelTransformJobsWithContext
func (mr *MockNeptunedataAPIMockRecorder) ListMLModelTransformJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLModelTransformJobsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListMLModelTransformJobsWithContext), varargs...)
}

// ListOpenCypherQueries mocks base method
func (m *MockNeptunedataAPI) ListOpenCypherQueries(arg0 *neptunedata.ListOpenCypherQueriesInput) (*neptunedata.ListOpenCypherQueriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpenCypherQueries", arg0)
	ret0, _ := ret[0].(*neptunedata.ListOpenCypherQueriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpenCypherQueries indicates an expected call of ListOpenCypherQueries
func (mr *MockNeptunedataAPIMockRecorder) ListOpenCypherQueries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpenCypherQueries", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListOpenCypherQueries), arg0)
}

// ListOpenCypherQueriesRequest mocks base method
func (m *MockNeptunedataAPI) ListOpenCypherQueriesRequest(arg0 *neptunedata.ListOpenCypherQueriesInput) (*request.Request, *neptunedata.ListOpenCypherQueriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpenCypherQueriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ListOpenCypherQueriesOutput)
	return ret0, ret1
}

// ListOpenCypherQueriesRequest indicates an expected call of ListOpenCypherQueriesRequest
func (mr *MockNeptunedataAPIMockRecorder) ListOpenCypherQueriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpenCypherQueriesRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListOpenCypherQueriesRequest), arg0)
}

// ListOpenCypherQueriesWithContext mocks base method
func (m *MockNeptunedataAPI) ListOpenCypherQueriesWithContext(arg0 context.Context, arg1 *neptunedata.ListOpenCypherQueriesInput, arg2 ...request.Option) (*neptunedata.ListOpenCypherQueriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOpenCypherQueriesWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ListOpenCypherQueriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpenCypherQueriesWithContext indicates an expected call of ListOpenCypherQueriesWithContext
func (mr *MockNeptunedataAPIMockRecorder) ListOpenCypherQueriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpenCypherQueriesWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ListOpenCypherQueriesWithContext), varargs...)
}

// ManagePropertygraphStatistics mocks base method
func (m *MockNeptunedataAPI) ManagePropertygraphStatistics(arg0 *neptunedata.ManagePropertygraphStatisticsInput) (*neptunedata.ManagePropertygraphStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagePropertygraphStatistics", arg0)
	ret0, _ := ret[0].(*neptunedata.ManagePropertygraphStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManagePropertygraphStatistics indicates an expected call of ManagePropertygraphStatistics
func (mr *MockNeptunedataAPIMockRecorder) ManagePropertygraphStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagePropertygraphStatistics", reflect.TypeOf((*MockNeptunedataAPI)(nil).ManagePropertygraphStatistics), arg0)
}

// ManagePropertygraphStatisticsRequest mocks base method
func (m *MockNeptunedataAPI) ManagePropertygraphStatisticsRequest(arg0 *neptunedata.ManagePropertygraphStatisticsInput) (*request.Request, *neptunedata.ManagePropertygraphStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagePropertygraphStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ManagePropertygraphStatisticsOutput)
	return ret0, ret1
}

// ManagePropertygraphStatisticsRequest indicates an expected call of ManagePropertygraphStatisticsRequest
func (mr *MockNeptunedataAPIMockRecorder) ManagePropertygraphStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagePropertygraphStatisticsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ManagePropertygraphStatisticsRequest), arg0)
}

// ManagePropertygraphStatisticsWithContext mocks base method
func (m *MockNeptunedataAPI) ManagePropertygraphStatisticsWithContext(arg0 context.Context, arg1 *neptunedata.ManagePropertygraphStatisticsInput, arg2 ...request.Option) (*neptunedata.ManagePropertygraphStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ManagePropertygraphStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ManagePropertygraphStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManagePropertygraphStatisticsWithContext indicates an expected call of ManagePropertygraphStatisticsWithContext
func (mr *MockNeptunedataAPIMockRecorder) ManagePropertygraphStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagePropertygraphStatisticsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ManagePropertygraphStatisticsWithContext), varargs...)
}

// ManageSparqlStatistics mocks base method
func (m *MockNeptunedataAPI) ManageSparqlStatistics(arg0 *neptunedata.ManageSparqlStatisticsInput) (*neptunedata.ManageSparqlStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageSparqlStatistics", arg0)
	ret0, _ := ret[0].(*neptunedata.ManageSparqlStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManageSparqlStatistics indicates an expected call of ManageSparqlStatistics
func (mr *MockNeptunedataAPIMockRecorder) ManageSparqlStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageSparqlStatistics", reflect.TypeOf((*MockNeptunedataAPI)(nil).ManageSparqlStatistics), arg0)
}

// ManageSparqlStatisticsRequest mocks base method
func (m *MockNeptunedataAPI) ManageSparqlStatisticsRequest(arg0 *neptunedata.ManageSparqlStatisticsInput) (*request.Request, *neptunedata.ManageSparqlStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageSparqlStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.ManageSparqlStatisticsOutput)
	return ret0, ret1
}

// ManageSparqlStatisticsRequest indicates an expected call of ManageSparqlStatisticsRequest
func (mr *MockNeptunedataAPIMockRecorder) ManageSparqlStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageSparqlStatisticsRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).ManageSparqlStatisticsRequest), arg0)
}

// ManageSparqlStatisticsWithContext mocks base method
func (m *MockNeptunedataAPI) ManageSparqlStatisticsWithContext(arg0 context.Context, arg1 *neptunedata.ManageSparqlStatisticsInput, arg2 ...request.Option) (*neptunedata.ManageSparqlStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ManageSparqlStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.ManageSparqlStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManageSparqlStatisticsWithContext indicates an expected call of ManageSparqlStatisticsWithContext
func (mr *MockNeptunedataAPIMockRecorder) ManageSparqlStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageSparqlStatisticsWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).ManageSparqlStatisticsWithContext), varargs...)
}

// StartLoaderJob mocks base method
func (m *MockNeptunedataAPI) StartLoaderJob(arg0 *neptunedata.StartLoaderJobInput) (*neptunedata.StartLoaderJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLoaderJob", arg0)
	ret0, _ := ret[0].(*neptunedata.StartLoaderJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLoaderJob indicates an expected call of StartLoaderJob
func (mr *MockNeptunedataAPIMockRecorder) StartLoaderJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLoaderJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartLoaderJob), arg0)
}

// StartLoaderJobRequest mocks base method
func (m *MockNeptunedataAPI) StartLoaderJobRequest(arg0 *neptunedata.StartLoaderJobInput) (*request.Request, *neptunedata.StartLoaderJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLoaderJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.StartLoaderJobOutput)
	return ret0, ret1
}

// StartLoaderJobRequest indicates an expected call of StartLoaderJobRequest
func (mr *MockNeptunedataAPIMockRecorder) StartLoaderJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLoaderJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartLoaderJobRequest), arg0)
}

// StartLoaderJobWithContext mocks base method
func (m *MockNeptunedataAPI) StartLoaderJobWithContext(arg0 context.Context, arg1 *neptunedata.StartLoaderJobInput, arg2 ...request.Option) (*neptunedata.StartLoaderJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartLoaderJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.StartLoaderJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLoaderJobWithContext indicates an expected call of StartLoaderJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) StartLoaderJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLoaderJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartLoaderJobWithContext), varargs...)
}

// StartMLDataProcessingJob mocks base method
func (m *MockNeptunedataAPI) StartMLDataProcessingJob(arg0 *neptunedata.StartMLDataProcessingJobInput) (*neptunedata.StartMLDataProcessingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMLDataProcessingJob", arg0)
	ret0, _ := ret[0].(*neptunedata.StartMLDataProcessingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMLDataProcessingJob indicates an expected call of StartMLDataProcessingJob
func (mr *MockNeptunedataAPIMockRecorder) StartMLDataProcessingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLDataProcessingJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartMLDataProcessingJob), arg0)
}

// StartMLDataProcessingJobRequest mocks base method
func (m *MockNeptunedataAPI) StartMLDataProcessingJobRequest(arg0 *neptunedata.StartMLDataProcessingJobInput) (*request.Request, *neptunedata.StartMLDataProcessingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMLDataProcessingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.StartMLDataProcessingJobOutput)
	return ret0, ret1
}

// StartMLDataProcessingJobRequest indicates an expected call of StartMLDataProcessingJobRequest
func (mr *MockNeptunedataAPIMockRecorder) StartMLDataProcessingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLDataProcessingJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartMLDataProcessingJobRequest), arg0)
}

// StartMLDataProcessingJobWithContext mocks base method
func (m *MockNeptunedataAPI) StartMLDataProcessingJobWithContext(arg0 context.Context, arg1 *neptunedata.StartMLDataProcessingJobInput, arg2 ...request.Option) (*neptunedata.StartMLDataProcessingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMLDataProcessingJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.StartMLDataProcessingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMLDataProcessingJobWithContext indicates an expected call of StartMLDataProcessingJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) StartMLDataProcessingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLDataProcessingJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartMLDataProcessingJobWithContext), varargs...)
}

// StartMLModelTrainingJob mocks base method
func (m *MockNeptunedataAPI) StartMLModelTrainingJob(arg0 *neptunedata.StartMLModelTrainingJobInput) (*neptunedata.StartMLModelTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMLModelTrainingJob", arg0)
	ret0, _ := ret[0].(*neptunedata.StartMLModelTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMLModelTrainingJob indicates an expected call of StartMLModelTrainingJob
func (mr *MockNeptunedataAPIMockRecorder) StartMLModelTrainingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLModelTrainingJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartMLModelTrainingJob), arg0)
}

// StartMLModelTrainingJobRequest mocks base method
func (m *MockNeptunedataAPI) StartMLModelTrainingJobRequest(arg0 *neptunedata.StartMLModelTrainingJobInput) (*request.Request, *neptunedata.StartMLModelTrainingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMLModelTrainingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.StartMLModelTrainingJobOutput)
	return ret0, ret1
}

// StartMLModelTrainingJobRequest indicates an expected call of StartMLModelTrainingJobRequest
func (mr *MockNeptunedataAPIMockRecorder) StartMLModelTrainingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLModelTrainingJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartMLModelTrainingJobRequest), arg0)
}

// StartMLModelTrainingJobWithContext mocks base method
func (m *MockNeptunedataAPI) StartMLModelTrainingJobWithContext(arg0 context.Context, arg1 *neptunedata.StartMLModelTrainingJobInput, arg2 ...request.Option) (*neptunedata.StartMLModelTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMLModelTrainingJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.StartMLModelTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMLModelTrainingJobWithContext indicates an expected call of StartMLModelTrainingJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) StartMLModelTrainingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLModelTrainingJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartMLModelTrainingJobWithContext), varargs...)
}

// StartMLModelTransformJob mocks base method
func (m *MockNeptunedataAPI) StartMLModelTransformJob(arg0 *neptunedata.StartMLModelTransformJobInput) (*neptunedata.StartMLModelTransformJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMLModelTransformJob", arg0)
	ret0, _ := ret[0].(*neptunedata.StartMLModelTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMLModelTransformJob indicates an expected call of StartMLModelTransformJob
func (mr *MockNeptunedataAPIMockRecorder) StartMLModelTransformJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLModelTransformJob", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartMLModelTransformJob), arg0)
}

// StartMLModelTransformJobRequest mocks base method
func (m *MockNeptunedataAPI) StartMLModelTransformJobRequest(arg0 *neptunedata.StartMLModelTransformJobInput) (*request.Request, *neptunedata.StartMLModelTransformJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMLModelTransformJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptunedata.StartMLModelTransformJobOutput)
	return ret0, ret1
}

// StartMLModelTransformJobRequest indicates an expected call of StartMLModelTransformJobRequest
func (mr *MockNeptunedataAPIMockRecorder) StartMLModelTransformJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLModelTransformJobRequest", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartMLModelTransformJobRequest), arg0)
}

// StartMLModelTransformJobWithContext mocks base method
func (m *MockNeptunedataAPI) StartMLModelTransformJobWithContext(arg0 context.Context, arg1 *neptunedata.StartMLModelTransformJobInput, arg2 ...request.Option) (*neptunedata.StartMLModelTransformJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMLModelTransformJobWithContext", varargs...)
	ret0, _ := ret[0].(*neptunedata.StartMLModelTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMLModelTransformJobWithContext indicates an expected call of StartMLModelTransformJobWithContext
func (mr *MockNeptunedataAPIMockRecorder) StartMLModelTransformJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLModelTransformJobWithContext", reflect.TypeOf((*MockNeptunedataAPI)(nil).StartMLModelTransformJobWithContext), varargs...)
}
