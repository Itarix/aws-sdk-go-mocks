// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/inspector2/inspector2iface (interfaces: Inspector2API)

// Package inspector2mock is a generated GoMock package.
package inspector2mock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	inspector2 "github.com/aws/aws-sdk-go/service/inspector2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInspector2API is a mock of Inspector2API interface
type MockInspector2API struct {
	ctrl     *gomock.Controller
	recorder *MockInspector2APIMockRecorder
}

// MockInspector2APIMockRecorder is the mock recorder for MockInspector2API
type MockInspector2APIMockRecorder struct {
	mock *MockInspector2API
}

// NewMockInspector2API creates a new mock instance
func NewMockInspector2API(ctrl *gomock.Controller) *MockInspector2API {
	mock := &MockInspector2API{ctrl: ctrl}
	mock.recorder = &MockInspector2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInspector2API) EXPECT() *MockInspector2APIMockRecorder {
	return m.recorder
}

// AssociateMember mocks base method
func (m *MockInspector2API) AssociateMember(arg0 *inspector2.AssociateMemberInput) (*inspector2.AssociateMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMember", arg0)
	ret0, _ := ret[0].(*inspector2.AssociateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMember indicates an expected call of AssociateMember
func (mr *MockInspector2APIMockRecorder) AssociateMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMember", reflect.TypeOf((*MockInspector2API)(nil).AssociateMember), arg0)
}

// AssociateMemberRequest mocks base method
func (m *MockInspector2API) AssociateMemberRequest(arg0 *inspector2.AssociateMemberInput) (*request.Request, *inspector2.AssociateMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.AssociateMemberOutput)
	return ret0, ret1
}

// AssociateMemberRequest indicates an expected call of AssociateMemberRequest
func (mr *MockInspector2APIMockRecorder) AssociateMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberRequest", reflect.TypeOf((*MockInspector2API)(nil).AssociateMemberRequest), arg0)
}

// AssociateMemberWithContext mocks base method
func (m *MockInspector2API) AssociateMemberWithContext(arg0 context.Context, arg1 *inspector2.AssociateMemberInput, arg2 ...request.Option) (*inspector2.AssociateMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateMemberWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.AssociateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberWithContext indicates an expected call of AssociateMemberWithContext
func (mr *MockInspector2APIMockRecorder) AssociateMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberWithContext", reflect.TypeOf((*MockInspector2API)(nil).AssociateMemberWithContext), varargs...)
}

// BatchGetAccountStatus mocks base method
func (m *MockInspector2API) BatchGetAccountStatus(arg0 *inspector2.BatchGetAccountStatusInput) (*inspector2.BatchGetAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetAccountStatus", arg0)
	ret0, _ := ret[0].(*inspector2.BatchGetAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetAccountStatus indicates an expected call of BatchGetAccountStatus
func (mr *MockInspector2APIMockRecorder) BatchGetAccountStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAccountStatus", reflect.TypeOf((*MockInspector2API)(nil).BatchGetAccountStatus), arg0)
}

// BatchGetAccountStatusRequest mocks base method
func (m *MockInspector2API) BatchGetAccountStatusRequest(arg0 *inspector2.BatchGetAccountStatusInput) (*request.Request, *inspector2.BatchGetAccountStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetAccountStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.BatchGetAccountStatusOutput)
	return ret0, ret1
}

// BatchGetAccountStatusRequest indicates an expected call of BatchGetAccountStatusRequest
func (mr *MockInspector2APIMockRecorder) BatchGetAccountStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAccountStatusRequest", reflect.TypeOf((*MockInspector2API)(nil).BatchGetAccountStatusRequest), arg0)
}

// BatchGetAccountStatusWithContext mocks base method
func (m *MockInspector2API) BatchGetAccountStatusWithContext(arg0 context.Context, arg1 *inspector2.BatchGetAccountStatusInput, arg2 ...request.Option) (*inspector2.BatchGetAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetAccountStatusWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.BatchGetAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetAccountStatusWithContext indicates an expected call of BatchGetAccountStatusWithContext
func (mr *MockInspector2APIMockRecorder) BatchGetAccountStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAccountStatusWithContext", reflect.TypeOf((*MockInspector2API)(nil).BatchGetAccountStatusWithContext), varargs...)
}

// BatchGetCodeSnippet mocks base method
func (m *MockInspector2API) BatchGetCodeSnippet(arg0 *inspector2.BatchGetCodeSnippetInput) (*inspector2.BatchGetCodeSnippetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetCodeSnippet", arg0)
	ret0, _ := ret[0].(*inspector2.BatchGetCodeSnippetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetCodeSnippet indicates an expected call of BatchGetCodeSnippet
func (mr *MockInspector2APIMockRecorder) BatchGetCodeSnippet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCodeSnippet", reflect.TypeOf((*MockInspector2API)(nil).BatchGetCodeSnippet), arg0)
}

// BatchGetCodeSnippetRequest mocks base method
func (m *MockInspector2API) BatchGetCodeSnippetRequest(arg0 *inspector2.BatchGetCodeSnippetInput) (*request.Request, *inspector2.BatchGetCodeSnippetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetCodeSnippetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.BatchGetCodeSnippetOutput)
	return ret0, ret1
}

// BatchGetCodeSnippetRequest indicates an expected call of BatchGetCodeSnippetRequest
func (mr *MockInspector2APIMockRecorder) BatchGetCodeSnippetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCodeSnippetRequest", reflect.TypeOf((*MockInspector2API)(nil).BatchGetCodeSnippetRequest), arg0)
}

// BatchGetCodeSnippetWithContext mocks base method
func (m *MockInspector2API) BatchGetCodeSnippetWithContext(arg0 context.Context, arg1 *inspector2.BatchGetCodeSnippetInput, arg2 ...request.Option) (*inspector2.BatchGetCodeSnippetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetCodeSnippetWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.BatchGetCodeSnippetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetCodeSnippetWithContext indicates an expected call of BatchGetCodeSnippetWithContext
func (mr *MockInspector2APIMockRecorder) BatchGetCodeSnippetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCodeSnippetWithContext", reflect.TypeOf((*MockInspector2API)(nil).BatchGetCodeSnippetWithContext), varargs...)
}

// BatchGetFindingDetails mocks base method
func (m *MockInspector2API) BatchGetFindingDetails(arg0 *inspector2.BatchGetFindingDetailsInput) (*inspector2.BatchGetFindingDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFindingDetails", arg0)
	ret0, _ := ret[0].(*inspector2.BatchGetFindingDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFindingDetails indicates an expected call of BatchGetFindingDetails
func (mr *MockInspector2APIMockRecorder) BatchGetFindingDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFindingDetails", reflect.TypeOf((*MockInspector2API)(nil).BatchGetFindingDetails), arg0)
}

// BatchGetFindingDetailsRequest mocks base method
func (m *MockInspector2API) BatchGetFindingDetailsRequest(arg0 *inspector2.BatchGetFindingDetailsInput) (*request.Request, *inspector2.BatchGetFindingDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFindingDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.BatchGetFindingDetailsOutput)
	return ret0, ret1
}

// BatchGetFindingDetailsRequest indicates an expected call of BatchGetFindingDetailsRequest
func (mr *MockInspector2APIMockRecorder) BatchGetFindingDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFindingDetailsRequest", reflect.TypeOf((*MockInspector2API)(nil).BatchGetFindingDetailsRequest), arg0)
}

// BatchGetFindingDetailsWithContext mocks base method
func (m *MockInspector2API) BatchGetFindingDetailsWithContext(arg0 context.Context, arg1 *inspector2.BatchGetFindingDetailsInput, arg2 ...request.Option) (*inspector2.BatchGetFindingDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetFindingDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.BatchGetFindingDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFindingDetailsWithContext indicates an expected call of BatchGetFindingDetailsWithContext
func (mr *MockInspector2APIMockRecorder) BatchGetFindingDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFindingDetailsWithContext", reflect.TypeOf((*MockInspector2API)(nil).BatchGetFindingDetailsWithContext), varargs...)
}

// BatchGetFreeTrialInfo mocks base method
func (m *MockInspector2API) BatchGetFreeTrialInfo(arg0 *inspector2.BatchGetFreeTrialInfoInput) (*inspector2.BatchGetFreeTrialInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFreeTrialInfo", arg0)
	ret0, _ := ret[0].(*inspector2.BatchGetFreeTrialInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFreeTrialInfo indicates an expected call of BatchGetFreeTrialInfo
func (mr *MockInspector2APIMockRecorder) BatchGetFreeTrialInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFreeTrialInfo", reflect.TypeOf((*MockInspector2API)(nil).BatchGetFreeTrialInfo), arg0)
}

// BatchGetFreeTrialInfoRequest mocks base method
func (m *MockInspector2API) BatchGetFreeTrialInfoRequest(arg0 *inspector2.BatchGetFreeTrialInfoInput) (*request.Request, *inspector2.BatchGetFreeTrialInfoOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFreeTrialInfoRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.BatchGetFreeTrialInfoOutput)
	return ret0, ret1
}

// BatchGetFreeTrialInfoRequest indicates an expected call of BatchGetFreeTrialInfoRequest
func (mr *MockInspector2APIMockRecorder) BatchGetFreeTrialInfoRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFreeTrialInfoRequest", reflect.TypeOf((*MockInspector2API)(nil).BatchGetFreeTrialInfoRequest), arg0)
}

// BatchGetFreeTrialInfoWithContext mocks base method
func (m *MockInspector2API) BatchGetFreeTrialInfoWithContext(arg0 context.Context, arg1 *inspector2.BatchGetFreeTrialInfoInput, arg2 ...request.Option) (*inspector2.BatchGetFreeTrialInfoOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetFreeTrialInfoWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.BatchGetFreeTrialInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFreeTrialInfoWithContext indicates an expected call of BatchGetFreeTrialInfoWithContext
func (mr *MockInspector2APIMockRecorder) BatchGetFreeTrialInfoWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFreeTrialInfoWithContext", reflect.TypeOf((*MockInspector2API)(nil).BatchGetFreeTrialInfoWithContext), varargs...)
}

// BatchGetMemberEc2DeepInspectionStatus mocks base method
func (m *MockInspector2API) BatchGetMemberEc2DeepInspectionStatus(arg0 *inspector2.BatchGetMemberEc2DeepInspectionStatusInput) (*inspector2.BatchGetMemberEc2DeepInspectionStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetMemberEc2DeepInspectionStatus", arg0)
	ret0, _ := ret[0].(*inspector2.BatchGetMemberEc2DeepInspectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMemberEc2DeepInspectionStatus indicates an expected call of BatchGetMemberEc2DeepInspectionStatus
func (mr *MockInspector2APIMockRecorder) BatchGetMemberEc2DeepInspectionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMemberEc2DeepInspectionStatus", reflect.TypeOf((*MockInspector2API)(nil).BatchGetMemberEc2DeepInspectionStatus), arg0)
}

// BatchGetMemberEc2DeepInspectionStatusRequest mocks base method
func (m *MockInspector2API) BatchGetMemberEc2DeepInspectionStatusRequest(arg0 *inspector2.BatchGetMemberEc2DeepInspectionStatusInput) (*request.Request, *inspector2.BatchGetMemberEc2DeepInspectionStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetMemberEc2DeepInspectionStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.BatchGetMemberEc2DeepInspectionStatusOutput)
	return ret0, ret1
}

// BatchGetMemberEc2DeepInspectionStatusRequest indicates an expected call of BatchGetMemberEc2DeepInspectionStatusRequest
func (mr *MockInspector2APIMockRecorder) BatchGetMemberEc2DeepInspectionStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMemberEc2DeepInspectionStatusRequest", reflect.TypeOf((*MockInspector2API)(nil).BatchGetMemberEc2DeepInspectionStatusRequest), arg0)
}

// BatchGetMemberEc2DeepInspectionStatusWithContext mocks base method
func (m *MockInspector2API) BatchGetMemberEc2DeepInspectionStatusWithContext(arg0 context.Context, arg1 *inspector2.BatchGetMemberEc2DeepInspectionStatusInput, arg2 ...request.Option) (*inspector2.BatchGetMemberEc2DeepInspectionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetMemberEc2DeepInspectionStatusWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.BatchGetMemberEc2DeepInspectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMemberEc2DeepInspectionStatusWithContext indicates an expected call of BatchGetMemberEc2DeepInspectionStatusWithContext
func (mr *MockInspector2APIMockRecorder) BatchGetMemberEc2DeepInspectionStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMemberEc2DeepInspectionStatusWithContext", reflect.TypeOf((*MockInspector2API)(nil).BatchGetMemberEc2DeepInspectionStatusWithContext), varargs...)
}

// BatchUpdateMemberEc2DeepInspectionStatus mocks base method
func (m *MockInspector2API) BatchUpdateMemberEc2DeepInspectionStatus(arg0 *inspector2.BatchUpdateMemberEc2DeepInspectionStatusInput) (*inspector2.BatchUpdateMemberEc2DeepInspectionStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateMemberEc2DeepInspectionStatus", arg0)
	ret0, _ := ret[0].(*inspector2.BatchUpdateMemberEc2DeepInspectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateMemberEc2DeepInspectionStatus indicates an expected call of BatchUpdateMemberEc2DeepInspectionStatus
func (mr *MockInspector2APIMockRecorder) BatchUpdateMemberEc2DeepInspectionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateMemberEc2DeepInspectionStatus", reflect.TypeOf((*MockInspector2API)(nil).BatchUpdateMemberEc2DeepInspectionStatus), arg0)
}

// BatchUpdateMemberEc2DeepInspectionStatusRequest mocks base method
func (m *MockInspector2API) BatchUpdateMemberEc2DeepInspectionStatusRequest(arg0 *inspector2.BatchUpdateMemberEc2DeepInspectionStatusInput) (*request.Request, *inspector2.BatchUpdateMemberEc2DeepInspectionStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateMemberEc2DeepInspectionStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.BatchUpdateMemberEc2DeepInspectionStatusOutput)
	return ret0, ret1
}

// BatchUpdateMemberEc2DeepInspectionStatusRequest indicates an expected call of BatchUpdateMemberEc2DeepInspectionStatusRequest
func (mr *MockInspector2APIMockRecorder) BatchUpdateMemberEc2DeepInspectionStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateMemberEc2DeepInspectionStatusRequest", reflect.TypeOf((*MockInspector2API)(nil).BatchUpdateMemberEc2DeepInspectionStatusRequest), arg0)
}

// BatchUpdateMemberEc2DeepInspectionStatusWithContext mocks base method
func (m *MockInspector2API) BatchUpdateMemberEc2DeepInspectionStatusWithContext(arg0 context.Context, arg1 *inspector2.BatchUpdateMemberEc2DeepInspectionStatusInput, arg2 ...request.Option) (*inspector2.BatchUpdateMemberEc2DeepInspectionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateMemberEc2DeepInspectionStatusWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.BatchUpdateMemberEc2DeepInspectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateMemberEc2DeepInspectionStatusWithContext indicates an expected call of BatchUpdateMemberEc2DeepInspectionStatusWithContext
func (mr *MockInspector2APIMockRecorder) BatchUpdateMemberEc2DeepInspectionStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateMemberEc2DeepInspectionStatusWithContext", reflect.TypeOf((*MockInspector2API)(nil).BatchUpdateMemberEc2DeepInspectionStatusWithContext), varargs...)
}

// CancelFindingsReport mocks base method
func (m *MockInspector2API) CancelFindingsReport(arg0 *inspector2.CancelFindingsReportInput) (*inspector2.CancelFindingsReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFindingsReport", arg0)
	ret0, _ := ret[0].(*inspector2.CancelFindingsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelFindingsReport indicates an expected call of CancelFindingsReport
func (mr *MockInspector2APIMockRecorder) CancelFindingsReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFindingsReport", reflect.TypeOf((*MockInspector2API)(nil).CancelFindingsReport), arg0)
}

// CancelFindingsReportRequest mocks base method
func (m *MockInspector2API) CancelFindingsReportRequest(arg0 *inspector2.CancelFindingsReportInput) (*request.Request, *inspector2.CancelFindingsReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFindingsReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.CancelFindingsReportOutput)
	return ret0, ret1
}

// CancelFindingsReportRequest indicates an expected call of CancelFindingsReportRequest
func (mr *MockInspector2APIMockRecorder) CancelFindingsReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFindingsReportRequest", reflect.TypeOf((*MockInspector2API)(nil).CancelFindingsReportRequest), arg0)
}

// CancelFindingsReportWithContext mocks base method
func (m *MockInspector2API) CancelFindingsReportWithContext(arg0 context.Context, arg1 *inspector2.CancelFindingsReportInput, arg2 ...request.Option) (*inspector2.CancelFindingsReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelFindingsReportWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.CancelFindingsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelFindingsReportWithContext indicates an expected call of CancelFindingsReportWithContext
func (mr *MockInspector2APIMockRecorder) CancelFindingsReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFindingsReportWithContext", reflect.TypeOf((*MockInspector2API)(nil).CancelFindingsReportWithContext), varargs...)
}

// CancelSbomExport mocks base method
func (m *MockInspector2API) CancelSbomExport(arg0 *inspector2.CancelSbomExportInput) (*inspector2.CancelSbomExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSbomExport", arg0)
	ret0, _ := ret[0].(*inspector2.CancelSbomExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSbomExport indicates an expected call of CancelSbomExport
func (mr *MockInspector2APIMockRecorder) CancelSbomExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSbomExport", reflect.TypeOf((*MockInspector2API)(nil).CancelSbomExport), arg0)
}

// CancelSbomExportRequest mocks base method
func (m *MockInspector2API) CancelSbomExportRequest(arg0 *inspector2.CancelSbomExportInput) (*request.Request, *inspector2.CancelSbomExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSbomExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.CancelSbomExportOutput)
	return ret0, ret1
}

// CancelSbomExportRequest indicates an expected call of CancelSbomExportRequest
func (mr *MockInspector2APIMockRecorder) CancelSbomExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSbomExportRequest", reflect.TypeOf((*MockInspector2API)(nil).CancelSbomExportRequest), arg0)
}

// CancelSbomExportWithContext mocks base method
func (m *MockInspector2API) CancelSbomExportWithContext(arg0 context.Context, arg1 *inspector2.CancelSbomExportInput, arg2 ...request.Option) (*inspector2.CancelSbomExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelSbomExportWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.CancelSbomExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSbomExportWithContext indicates an expected call of CancelSbomExportWithContext
func (mr *MockInspector2APIMockRecorder) CancelSbomExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSbomExportWithContext", reflect.TypeOf((*MockInspector2API)(nil).CancelSbomExportWithContext), varargs...)
}

// CreateCisScanConfiguration mocks base method
func (m *MockInspector2API) CreateCisScanConfiguration(arg0 *inspector2.CreateCisScanConfigurationInput) (*inspector2.CreateCisScanConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCisScanConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.CreateCisScanConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCisScanConfiguration indicates an expected call of CreateCisScanConfiguration
func (mr *MockInspector2APIMockRecorder) CreateCisScanConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCisScanConfiguration", reflect.TypeOf((*MockInspector2API)(nil).CreateCisScanConfiguration), arg0)
}

// CreateCisScanConfigurationRequest mocks base method
func (m *MockInspector2API) CreateCisScanConfigurationRequest(arg0 *inspector2.CreateCisScanConfigurationInput) (*request.Request, *inspector2.CreateCisScanConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCisScanConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.CreateCisScanConfigurationOutput)
	return ret0, ret1
}

// CreateCisScanConfigurationRequest indicates an expected call of CreateCisScanConfigurationRequest
func (mr *MockInspector2APIMockRecorder) CreateCisScanConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCisScanConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).CreateCisScanConfigurationRequest), arg0)
}

// CreateCisScanConfigurationWithContext mocks base method
func (m *MockInspector2API) CreateCisScanConfigurationWithContext(arg0 context.Context, arg1 *inspector2.CreateCisScanConfigurationInput, arg2 ...request.Option) (*inspector2.CreateCisScanConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCisScanConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.CreateCisScanConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCisScanConfigurationWithContext indicates an expected call of CreateCisScanConfigurationWithContext
func (mr *MockInspector2APIMockRecorder) CreateCisScanConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCisScanConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).CreateCisScanConfigurationWithContext), varargs...)
}

// CreateFilter mocks base method
func (m *MockInspector2API) CreateFilter(arg0 *inspector2.CreateFilterInput) (*inspector2.CreateFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilter", arg0)
	ret0, _ := ret[0].(*inspector2.CreateFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilter indicates an expected call of CreateFilter
func (mr *MockInspector2APIMockRecorder) CreateFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilter", reflect.TypeOf((*MockInspector2API)(nil).CreateFilter), arg0)
}

// CreateFilterRequest mocks base method
func (m *MockInspector2API) CreateFilterRequest(arg0 *inspector2.CreateFilterInput) (*request.Request, *inspector2.CreateFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.CreateFilterOutput)
	return ret0, ret1
}

// CreateFilterRequest indicates an expected call of CreateFilterRequest
func (mr *MockInspector2APIMockRecorder) CreateFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilterRequest", reflect.TypeOf((*MockInspector2API)(nil).CreateFilterRequest), arg0)
}

// CreateFilterWithContext mocks base method
func (m *MockInspector2API) CreateFilterWithContext(arg0 context.Context, arg1 *inspector2.CreateFilterInput, arg2 ...request.Option) (*inspector2.CreateFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFilterWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.CreateFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilterWithContext indicates an expected call of CreateFilterWithContext
func (mr *MockInspector2APIMockRecorder) CreateFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilterWithContext", reflect.TypeOf((*MockInspector2API)(nil).CreateFilterWithContext), varargs...)
}

// CreateFindingsReport mocks base method
func (m *MockInspector2API) CreateFindingsReport(arg0 *inspector2.CreateFindingsReportInput) (*inspector2.CreateFindingsReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFindingsReport", arg0)
	ret0, _ := ret[0].(*inspector2.CreateFindingsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFindingsReport indicates an expected call of CreateFindingsReport
func (mr *MockInspector2APIMockRecorder) CreateFindingsReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFindingsReport", reflect.TypeOf((*MockInspector2API)(nil).CreateFindingsReport), arg0)
}

// CreateFindingsReportRequest mocks base method
func (m *MockInspector2API) CreateFindingsReportRequest(arg0 *inspector2.CreateFindingsReportInput) (*request.Request, *inspector2.CreateFindingsReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFindingsReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.CreateFindingsReportOutput)
	return ret0, ret1
}

// CreateFindingsReportRequest indicates an expected call of CreateFindingsReportRequest
func (mr *MockInspector2APIMockRecorder) CreateFindingsReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFindingsReportRequest", reflect.TypeOf((*MockInspector2API)(nil).CreateFindingsReportRequest), arg0)
}

// CreateFindingsReportWithContext mocks base method
func (m *MockInspector2API) CreateFindingsReportWithContext(arg0 context.Context, arg1 *inspector2.CreateFindingsReportInput, arg2 ...request.Option) (*inspector2.CreateFindingsReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFindingsReportWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.CreateFindingsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFindingsReportWithContext indicates an expected call of CreateFindingsReportWithContext
func (mr *MockInspector2APIMockRecorder) CreateFindingsReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFindingsReportWithContext", reflect.TypeOf((*MockInspector2API)(nil).CreateFindingsReportWithContext), varargs...)
}

// CreateSbomExport mocks base method
func (m *MockInspector2API) CreateSbomExport(arg0 *inspector2.CreateSbomExportInput) (*inspector2.CreateSbomExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSbomExport", arg0)
	ret0, _ := ret[0].(*inspector2.CreateSbomExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSbomExport indicates an expected call of CreateSbomExport
func (mr *MockInspector2APIMockRecorder) CreateSbomExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSbomExport", reflect.TypeOf((*MockInspector2API)(nil).CreateSbomExport), arg0)
}

// CreateSbomExportRequest mocks base method
func (m *MockInspector2API) CreateSbomExportRequest(arg0 *inspector2.CreateSbomExportInput) (*request.Request, *inspector2.CreateSbomExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSbomExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.CreateSbomExportOutput)
	return ret0, ret1
}

// CreateSbomExportRequest indicates an expected call of CreateSbomExportRequest
func (mr *MockInspector2APIMockRecorder) CreateSbomExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSbomExportRequest", reflect.TypeOf((*MockInspector2API)(nil).CreateSbomExportRequest), arg0)
}

// CreateSbomExportWithContext mocks base method
func (m *MockInspector2API) CreateSbomExportWithContext(arg0 context.Context, arg1 *inspector2.CreateSbomExportInput, arg2 ...request.Option) (*inspector2.CreateSbomExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSbomExportWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.CreateSbomExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSbomExportWithContext indicates an expected call of CreateSbomExportWithContext
func (mr *MockInspector2APIMockRecorder) CreateSbomExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSbomExportWithContext", reflect.TypeOf((*MockInspector2API)(nil).CreateSbomExportWithContext), varargs...)
}

// DeleteCisScanConfiguration mocks base method
func (m *MockInspector2API) DeleteCisScanConfiguration(arg0 *inspector2.DeleteCisScanConfigurationInput) (*inspector2.DeleteCisScanConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCisScanConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.DeleteCisScanConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCisScanConfiguration indicates an expected call of DeleteCisScanConfiguration
func (mr *MockInspector2APIMockRecorder) DeleteCisScanConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCisScanConfiguration", reflect.TypeOf((*MockInspector2API)(nil).DeleteCisScanConfiguration), arg0)
}

// DeleteCisScanConfigurationRequest mocks base method
func (m *MockInspector2API) DeleteCisScanConfigurationRequest(arg0 *inspector2.DeleteCisScanConfigurationInput) (*request.Request, *inspector2.DeleteCisScanConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCisScanConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DeleteCisScanConfigurationOutput)
	return ret0, ret1
}

// DeleteCisScanConfigurationRequest indicates an expected call of DeleteCisScanConfigurationRequest
func (mr *MockInspector2APIMockRecorder) DeleteCisScanConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCisScanConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).DeleteCisScanConfigurationRequest), arg0)
}

// DeleteCisScanConfigurationWithContext mocks base method
func (m *MockInspector2API) DeleteCisScanConfigurationWithContext(arg0 context.Context, arg1 *inspector2.DeleteCisScanConfigurationInput, arg2 ...request.Option) (*inspector2.DeleteCisScanConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCisScanConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DeleteCisScanConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCisScanConfigurationWithContext indicates an expected call of DeleteCisScanConfigurationWithContext
func (mr *MockInspector2APIMockRecorder) DeleteCisScanConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCisScanConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).DeleteCisScanConfigurationWithContext), varargs...)
}

// DeleteFilter mocks base method
func (m *MockInspector2API) DeleteFilter(arg0 *inspector2.DeleteFilterInput) (*inspector2.DeleteFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilter", arg0)
	ret0, _ := ret[0].(*inspector2.DeleteFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilter indicates an expected call of DeleteFilter
func (mr *MockInspector2APIMockRecorder) DeleteFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilter", reflect.TypeOf((*MockInspector2API)(nil).DeleteFilter), arg0)
}

// DeleteFilterRequest mocks base method
func (m *MockInspector2API) DeleteFilterRequest(arg0 *inspector2.DeleteFilterInput) (*request.Request, *inspector2.DeleteFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DeleteFilterOutput)
	return ret0, ret1
}

// DeleteFilterRequest indicates an expected call of DeleteFilterRequest
func (mr *MockInspector2APIMockRecorder) DeleteFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilterRequest", reflect.TypeOf((*MockInspector2API)(nil).DeleteFilterRequest), arg0)
}

// DeleteFilterWithContext mocks base method
func (m *MockInspector2API) DeleteFilterWithContext(arg0 context.Context, arg1 *inspector2.DeleteFilterInput, arg2 ...request.Option) (*inspector2.DeleteFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFilterWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DeleteFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilterWithContext indicates an expected call of DeleteFilterWithContext
func (mr *MockInspector2APIMockRecorder) DeleteFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilterWithContext", reflect.TypeOf((*MockInspector2API)(nil).DeleteFilterWithContext), varargs...)
}

// DescribeOrganizationConfiguration mocks base method
func (m *MockInspector2API) DescribeOrganizationConfiguration(arg0 *inspector2.DescribeOrganizationConfigurationInput) (*inspector2.DescribeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.DescribeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConfiguration indicates an expected call of DescribeOrganizationConfiguration
func (mr *MockInspector2APIMockRecorder) DescribeOrganizationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfiguration", reflect.TypeOf((*MockInspector2API)(nil).DescribeOrganizationConfiguration), arg0)
}

// DescribeOrganizationConfigurationRequest mocks base method
func (m *MockInspector2API) DescribeOrganizationConfigurationRequest(arg0 *inspector2.DescribeOrganizationConfigurationInput) (*request.Request, *inspector2.DescribeOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DescribeOrganizationConfigurationOutput)
	return ret0, ret1
}

// DescribeOrganizationConfigurationRequest indicates an expected call of DescribeOrganizationConfigurationRequest
func (mr *MockInspector2APIMockRecorder) DescribeOrganizationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).DescribeOrganizationConfigurationRequest), arg0)
}

// DescribeOrganizationConfigurationWithContext mocks base method
func (m *MockInspector2API) DescribeOrganizationConfigurationWithContext(arg0 context.Context, arg1 *inspector2.DescribeOrganizationConfigurationInput, arg2 ...request.Option) (*inspector2.DescribeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DescribeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConfigurationWithContext indicates an expected call of DescribeOrganizationConfigurationWithContext
func (mr *MockInspector2APIMockRecorder) DescribeOrganizationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).DescribeOrganizationConfigurationWithContext), varargs...)
}

// Disable mocks base method
func (m *MockInspector2API) Disable(arg0 *inspector2.DisableInput) (*inspector2.DisableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", arg0)
	ret0, _ := ret[0].(*inspector2.DisableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable
func (mr *MockInspector2APIMockRecorder) Disable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockInspector2API)(nil).Disable), arg0)
}

// DisableDelegatedAdminAccount mocks base method
func (m *MockInspector2API) DisableDelegatedAdminAccount(arg0 *inspector2.DisableDelegatedAdminAccountInput) (*inspector2.DisableDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDelegatedAdminAccount", arg0)
	ret0, _ := ret[0].(*inspector2.DisableDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableDelegatedAdminAccount indicates an expected call of DisableDelegatedAdminAccount
func (mr *MockInspector2APIMockRecorder) DisableDelegatedAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDelegatedAdminAccount", reflect.TypeOf((*MockInspector2API)(nil).DisableDelegatedAdminAccount), arg0)
}

// DisableDelegatedAdminAccountRequest mocks base method
func (m *MockInspector2API) DisableDelegatedAdminAccountRequest(arg0 *inspector2.DisableDelegatedAdminAccountInput) (*request.Request, *inspector2.DisableDelegatedAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDelegatedAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DisableDelegatedAdminAccountOutput)
	return ret0, ret1
}

// DisableDelegatedAdminAccountRequest indicates an expected call of DisableDelegatedAdminAccountRequest
func (mr *MockInspector2APIMockRecorder) DisableDelegatedAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDelegatedAdminAccountRequest", reflect.TypeOf((*MockInspector2API)(nil).DisableDelegatedAdminAccountRequest), arg0)
}

// DisableDelegatedAdminAccountWithContext mocks base method
func (m *MockInspector2API) DisableDelegatedAdminAccountWithContext(arg0 context.Context, arg1 *inspector2.DisableDelegatedAdminAccountInput, arg2 ...request.Option) (*inspector2.DisableDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableDelegatedAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DisableDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableDelegatedAdminAccountWithContext indicates an expected call of DisableDelegatedAdminAccountWithContext
func (mr *MockInspector2APIMockRecorder) DisableDelegatedAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDelegatedAdminAccountWithContext", reflect.TypeOf((*MockInspector2API)(nil).DisableDelegatedAdminAccountWithContext), varargs...)
}

// DisableRequest mocks base method
func (m *MockInspector2API) DisableRequest(arg0 *inspector2.DisableInput) (*request.Request, *inspector2.DisableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DisableOutput)
	return ret0, ret1
}

// DisableRequest indicates an expected call of DisableRequest
func (mr *MockInspector2APIMockRecorder) DisableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRequest", reflect.TypeOf((*MockInspector2API)(nil).DisableRequest), arg0)
}

// DisableWithContext mocks base method
func (m *MockInspector2API) DisableWithContext(arg0 context.Context, arg1 *inspector2.DisableInput, arg2 ...request.Option) (*inspector2.DisableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DisableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableWithContext indicates an expected call of DisableWithContext
func (mr *MockInspector2APIMockRecorder) DisableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableWithContext", reflect.TypeOf((*MockInspector2API)(nil).DisableWithContext), varargs...)
}

// DisassociateMember mocks base method
func (m *MockInspector2API) DisassociateMember(arg0 *inspector2.DisassociateMemberInput) (*inspector2.DisassociateMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMember", arg0)
	ret0, _ := ret[0].(*inspector2.DisassociateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMember indicates an expected call of DisassociateMember
func (mr *MockInspector2APIMockRecorder) DisassociateMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMember", reflect.TypeOf((*MockInspector2API)(nil).DisassociateMember), arg0)
}

// DisassociateMemberRequest mocks base method
func (m *MockInspector2API) DisassociateMemberRequest(arg0 *inspector2.DisassociateMemberInput) (*request.Request, *inspector2.DisassociateMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DisassociateMemberOutput)
	return ret0, ret1
}

// DisassociateMemberRequest indicates an expected call of DisassociateMemberRequest
func (mr *MockInspector2APIMockRecorder) DisassociateMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberRequest", reflect.TypeOf((*MockInspector2API)(nil).DisassociateMemberRequest), arg0)
}

// DisassociateMemberWithContext mocks base method
func (m *MockInspector2API) DisassociateMemberWithContext(arg0 context.Context, arg1 *inspector2.DisassociateMemberInput, arg2 ...request.Option) (*inspector2.DisassociateMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMemberWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DisassociateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberWithContext indicates an expected call of DisassociateMemberWithContext
func (mr *MockInspector2APIMockRecorder) DisassociateMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberWithContext", reflect.TypeOf((*MockInspector2API)(nil).DisassociateMemberWithContext), varargs...)
}

// Enable mocks base method
func (m *MockInspector2API) Enable(arg0 *inspector2.EnableInput) (*inspector2.EnableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", arg0)
	ret0, _ := ret[0].(*inspector2.EnableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable
func (mr *MockInspector2APIMockRecorder) Enable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockInspector2API)(nil).Enable), arg0)
}

// EnableDelegatedAdminAccount mocks base method
func (m *MockInspector2API) EnableDelegatedAdminAccount(arg0 *inspector2.EnableDelegatedAdminAccountInput) (*inspector2.EnableDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableDelegatedAdminAccount", arg0)
	ret0, _ := ret[0].(*inspector2.EnableDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableDelegatedAdminAccount indicates an expected call of EnableDelegatedAdminAccount
func (mr *MockInspector2APIMockRecorder) EnableDelegatedAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDelegatedAdminAccount", reflect.TypeOf((*MockInspector2API)(nil).EnableDelegatedAdminAccount), arg0)
}

// EnableDelegatedAdminAccountRequest mocks base method
func (m *MockInspector2API) EnableDelegatedAdminAccountRequest(arg0 *inspector2.EnableDelegatedAdminAccountInput) (*request.Request, *inspector2.EnableDelegatedAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableDelegatedAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.EnableDelegatedAdminAccountOutput)
	return ret0, ret1
}

// EnableDelegatedAdminAccountRequest indicates an expected call of EnableDelegatedAdminAccountRequest
func (mr *MockInspector2APIMockRecorder) EnableDelegatedAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDelegatedAdminAccountRequest", reflect.TypeOf((*MockInspector2API)(nil).EnableDelegatedAdminAccountRequest), arg0)
}

// EnableDelegatedAdminAccountWithContext mocks base method
func (m *MockInspector2API) EnableDelegatedAdminAccountWithContext(arg0 context.Context, arg1 *inspector2.EnableDelegatedAdminAccountInput, arg2 ...request.Option) (*inspector2.EnableDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableDelegatedAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.EnableDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableDelegatedAdminAccountWithContext indicates an expected call of EnableDelegatedAdminAccountWithContext
func (mr *MockInspector2APIMockRecorder) EnableDelegatedAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDelegatedAdminAccountWithContext", reflect.TypeOf((*MockInspector2API)(nil).EnableDelegatedAdminAccountWithContext), varargs...)
}

// EnableRequest mocks base method
func (m *MockInspector2API) EnableRequest(arg0 *inspector2.EnableInput) (*request.Request, *inspector2.EnableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.EnableOutput)
	return ret0, ret1
}

// EnableRequest indicates an expected call of EnableRequest
func (mr *MockInspector2APIMockRecorder) EnableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRequest", reflect.TypeOf((*MockInspector2API)(nil).EnableRequest), arg0)
}

// EnableWithContext mocks base method
func (m *MockInspector2API) EnableWithContext(arg0 context.Context, arg1 *inspector2.EnableInput, arg2 ...request.Option) (*inspector2.EnableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.EnableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableWithContext indicates an expected call of EnableWithContext
func (mr *MockInspector2APIMockRecorder) EnableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWithContext", reflect.TypeOf((*MockInspector2API)(nil).EnableWithContext), varargs...)
}

// GetCisScanReport mocks base method
func (m *MockInspector2API) GetCisScanReport(arg0 *inspector2.GetCisScanReportInput) (*inspector2.GetCisScanReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCisScanReport", arg0)
	ret0, _ := ret[0].(*inspector2.GetCisScanReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCisScanReport indicates an expected call of GetCisScanReport
func (mr *MockInspector2APIMockRecorder) GetCisScanReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCisScanReport", reflect.TypeOf((*MockInspector2API)(nil).GetCisScanReport), arg0)
}

// GetCisScanReportRequest mocks base method
func (m *MockInspector2API) GetCisScanReportRequest(arg0 *inspector2.GetCisScanReportInput) (*request.Request, *inspector2.GetCisScanReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCisScanReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetCisScanReportOutput)
	return ret0, ret1
}

// GetCisScanReportRequest indicates an expected call of GetCisScanReportRequest
func (mr *MockInspector2APIMockRecorder) GetCisScanReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCisScanReportRequest", reflect.TypeOf((*MockInspector2API)(nil).GetCisScanReportRequest), arg0)
}

// GetCisScanReportWithContext mocks base method
func (m *MockInspector2API) GetCisScanReportWithContext(arg0 context.Context, arg1 *inspector2.GetCisScanReportInput, arg2 ...request.Option) (*inspector2.GetCisScanReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCisScanReportWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetCisScanReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCisScanReportWithContext indicates an expected call of GetCisScanReportWithContext
func (mr *MockInspector2APIMockRecorder) GetCisScanReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCisScanReportWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetCisScanReportWithContext), varargs...)
}

// GetCisScanResultDetails mocks base method
func (m *MockInspector2API) GetCisScanResultDetails(arg0 *inspector2.GetCisScanResultDetailsInput) (*inspector2.GetCisScanResultDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCisScanResultDetails", arg0)
	ret0, _ := ret[0].(*inspector2.GetCisScanResultDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCisScanResultDetails indicates an expected call of GetCisScanResultDetails
func (mr *MockInspector2APIMockRecorder) GetCisScanResultDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCisScanResultDetails", reflect.TypeOf((*MockInspector2API)(nil).GetCisScanResultDetails), arg0)
}

// GetCisScanResultDetailsPages mocks base method
func (m *MockInspector2API) GetCisScanResultDetailsPages(arg0 *inspector2.GetCisScanResultDetailsInput, arg1 func(*inspector2.GetCisScanResultDetailsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCisScanResultDetailsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCisScanResultDetailsPages indicates an expected call of GetCisScanResultDetailsPages
func (mr *MockInspector2APIMockRecorder) GetCisScanResultDetailsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCisScanResultDetailsPages", reflect.TypeOf((*MockInspector2API)(nil).GetCisScanResultDetailsPages), arg0, arg1)
}

// GetCisScanResultDetailsPagesWithContext mocks base method
func (m *MockInspector2API) GetCisScanResultDetailsPagesWithContext(arg0 context.Context, arg1 *inspector2.GetCisScanResultDetailsInput, arg2 func(*inspector2.GetCisScanResultDetailsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCisScanResultDetailsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCisScanResultDetailsPagesWithContext indicates an expected call of GetCisScanResultDetailsPagesWithContext
func (mr *MockInspector2APIMockRecorder) GetCisScanResultDetailsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCisScanResultDetailsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetCisScanResultDetailsPagesWithContext), varargs...)
}

// GetCisScanResultDetailsRequest mocks base method
func (m *MockInspector2API) GetCisScanResultDetailsRequest(arg0 *inspector2.GetCisScanResultDetailsInput) (*request.Request, *inspector2.GetCisScanResultDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCisScanResultDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetCisScanResultDetailsOutput)
	return ret0, ret1
}

// GetCisScanResultDetailsRequest indicates an expected call of GetCisScanResultDetailsRequest
func (mr *MockInspector2APIMockRecorder) GetCisScanResultDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCisScanResultDetailsRequest", reflect.TypeOf((*MockInspector2API)(nil).GetCisScanResultDetailsRequest), arg0)
}

// GetCisScanResultDetailsWithContext mocks base method
func (m *MockInspector2API) GetCisScanResultDetailsWithContext(arg0 context.Context, arg1 *inspector2.GetCisScanResultDetailsInput, arg2 ...request.Option) (*inspector2.GetCisScanResultDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCisScanResultDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetCisScanResultDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCisScanResultDetailsWithContext indicates an expected call of GetCisScanResultDetailsWithContext
func (mr *MockInspector2APIMockRecorder) GetCisScanResultDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCisScanResultDetailsWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetCisScanResultDetailsWithContext), varargs...)
}

// GetConfiguration mocks base method
func (m *MockInspector2API) GetConfiguration(arg0 *inspector2.GetConfigurationInput) (*inspector2.GetConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.GetConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration
func (mr *MockInspector2APIMockRecorder) GetConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockInspector2API)(nil).GetConfiguration), arg0)
}

// GetConfigurationRequest mocks base method
func (m *MockInspector2API) GetConfigurationRequest(arg0 *inspector2.GetConfigurationInput) (*request.Request, *inspector2.GetConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetConfigurationOutput)
	return ret0, ret1
}

// GetConfigurationRequest indicates an expected call of GetConfigurationRequest
func (mr *MockInspector2APIMockRecorder) GetConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).GetConfigurationRequest), arg0)
}

// GetConfigurationWithContext mocks base method
func (m *MockInspector2API) GetConfigurationWithContext(arg0 context.Context, arg1 *inspector2.GetConfigurationInput, arg2 ...request.Option) (*inspector2.GetConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationWithContext indicates an expected call of GetConfigurationWithContext
func (mr *MockInspector2APIMockRecorder) GetConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetConfigurationWithContext), varargs...)
}

// GetDelegatedAdminAccount mocks base method
func (m *MockInspector2API) GetDelegatedAdminAccount(arg0 *inspector2.GetDelegatedAdminAccountInput) (*inspector2.GetDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatedAdminAccount", arg0)
	ret0, _ := ret[0].(*inspector2.GetDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatedAdminAccount indicates an expected call of GetDelegatedAdminAccount
func (mr *MockInspector2APIMockRecorder) GetDelegatedAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatedAdminAccount", reflect.TypeOf((*MockInspector2API)(nil).GetDelegatedAdminAccount), arg0)
}

// GetDelegatedAdminAccountRequest mocks base method
func (m *MockInspector2API) GetDelegatedAdminAccountRequest(arg0 *inspector2.GetDelegatedAdminAccountInput) (*request.Request, *inspector2.GetDelegatedAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatedAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetDelegatedAdminAccountOutput)
	return ret0, ret1
}

// GetDelegatedAdminAccountRequest indicates an expected call of GetDelegatedAdminAccountRequest
func (mr *MockInspector2APIMockRecorder) GetDelegatedAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatedAdminAccountRequest", reflect.TypeOf((*MockInspector2API)(nil).GetDelegatedAdminAccountRequest), arg0)
}

// GetDelegatedAdminAccountWithContext mocks base method
func (m *MockInspector2API) GetDelegatedAdminAccountWithContext(arg0 context.Context, arg1 *inspector2.GetDelegatedAdminAccountInput, arg2 ...request.Option) (*inspector2.GetDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDelegatedAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatedAdminAccountWithContext indicates an expected call of GetDelegatedAdminAccountWithContext
func (mr *MockInspector2APIMockRecorder) GetDelegatedAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatedAdminAccountWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetDelegatedAdminAccountWithContext), varargs...)
}

// GetEc2DeepInspectionConfiguration mocks base method
func (m *MockInspector2API) GetEc2DeepInspectionConfiguration(arg0 *inspector2.GetEc2DeepInspectionConfigurationInput) (*inspector2.GetEc2DeepInspectionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEc2DeepInspectionConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.GetEc2DeepInspectionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEc2DeepInspectionConfiguration indicates an expected call of GetEc2DeepInspectionConfiguration
func (mr *MockInspector2APIMockRecorder) GetEc2DeepInspectionConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEc2DeepInspectionConfiguration", reflect.TypeOf((*MockInspector2API)(nil).GetEc2DeepInspectionConfiguration), arg0)
}

// GetEc2DeepInspectionConfigurationRequest mocks base method
func (m *MockInspector2API) GetEc2DeepInspectionConfigurationRequest(arg0 *inspector2.GetEc2DeepInspectionConfigurationInput) (*request.Request, *inspector2.GetEc2DeepInspectionConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEc2DeepInspectionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetEc2DeepInspectionConfigurationOutput)
	return ret0, ret1
}

// GetEc2DeepInspectionConfigurationRequest indicates an expected call of GetEc2DeepInspectionConfigurationRequest
func (mr *MockInspector2APIMockRecorder) GetEc2DeepInspectionConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEc2DeepInspectionConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).GetEc2DeepInspectionConfigurationRequest), arg0)
}

// GetEc2DeepInspectionConfigurationWithContext mocks base method
func (m *MockInspector2API) GetEc2DeepInspectionConfigurationWithContext(arg0 context.Context, arg1 *inspector2.GetEc2DeepInspectionConfigurationInput, arg2 ...request.Option) (*inspector2.GetEc2DeepInspectionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEc2DeepInspectionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetEc2DeepInspectionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEc2DeepInspectionConfigurationWithContext indicates an expected call of GetEc2DeepInspectionConfigurationWithContext
func (mr *MockInspector2APIMockRecorder) GetEc2DeepInspectionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEc2DeepInspectionConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetEc2DeepInspectionConfigurationWithContext), varargs...)
}

// GetEncryptionKey mocks base method
func (m *MockInspector2API) GetEncryptionKey(arg0 *inspector2.GetEncryptionKeyInput) (*inspector2.GetEncryptionKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptionKey", arg0)
	ret0, _ := ret[0].(*inspector2.GetEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionKey indicates an expected call of GetEncryptionKey
func (mr *MockInspector2APIMockRecorder) GetEncryptionKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionKey", reflect.TypeOf((*MockInspector2API)(nil).GetEncryptionKey), arg0)
}

// GetEncryptionKeyRequest mocks base method
func (m *MockInspector2API) GetEncryptionKeyRequest(arg0 *inspector2.GetEncryptionKeyInput) (*request.Request, *inspector2.GetEncryptionKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptionKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetEncryptionKeyOutput)
	return ret0, ret1
}

// GetEncryptionKeyRequest indicates an expected call of GetEncryptionKeyRequest
func (mr *MockInspector2APIMockRecorder) GetEncryptionKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionKeyRequest", reflect.TypeOf((*MockInspector2API)(nil).GetEncryptionKeyRequest), arg0)
}

// GetEncryptionKeyWithContext mocks base method
func (m *MockInspector2API) GetEncryptionKeyWithContext(arg0 context.Context, arg1 *inspector2.GetEncryptionKeyInput, arg2 ...request.Option) (*inspector2.GetEncryptionKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEncryptionKeyWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionKeyWithContext indicates an expected call of GetEncryptionKeyWithContext
func (mr *MockInspector2APIMockRecorder) GetEncryptionKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionKeyWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetEncryptionKeyWithContext), varargs...)
}

// GetFindingsReportStatus mocks base method
func (m *MockInspector2API) GetFindingsReportStatus(arg0 *inspector2.GetFindingsReportStatusInput) (*inspector2.GetFindingsReportStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsReportStatus", arg0)
	ret0, _ := ret[0].(*inspector2.GetFindingsReportStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingsReportStatus indicates an expected call of GetFindingsReportStatus
func (mr *MockInspector2APIMockRecorder) GetFindingsReportStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportStatus", reflect.TypeOf((*MockInspector2API)(nil).GetFindingsReportStatus), arg0)
}

// GetFindingsReportStatusRequest mocks base method
func (m *MockInspector2API) GetFindingsReportStatusRequest(arg0 *inspector2.GetFindingsReportStatusInput) (*request.Request, *inspector2.GetFindingsReportStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsReportStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetFindingsReportStatusOutput)
	return ret0, ret1
}

// GetFindingsReportStatusRequest indicates an expected call of GetFindingsReportStatusRequest
func (mr *MockInspector2APIMockRecorder) GetFindingsReportStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportStatusRequest", reflect.TypeOf((*MockInspector2API)(nil).GetFindingsReportStatusRequest), arg0)
}

// GetFindingsReportStatusWithContext mocks base method
func (m *MockInspector2API) GetFindingsReportStatusWithContext(arg0 context.Context, arg1 *inspector2.GetFindingsReportStatusInput, arg2 ...request.Option) (*inspector2.GetFindingsReportStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingsReportStatusWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetFindingsReportStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingsReportStatusWithContext indicates an expected call of GetFindingsReportStatusWithContext
func (mr *MockInspector2APIMockRecorder) GetFindingsReportStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportStatusWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetFindingsReportStatusWithContext), varargs...)
}

// GetMember mocks base method
func (m *MockInspector2API) GetMember(arg0 *inspector2.GetMemberInput) (*inspector2.GetMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", arg0)
	ret0, _ := ret[0].(*inspector2.GetMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember
func (mr *MockInspector2APIMockRecorder) GetMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockInspector2API)(nil).GetMember), arg0)
}

// GetMemberRequest mocks base method
func (m *MockInspector2API) GetMemberRequest(arg0 *inspector2.GetMemberInput) (*request.Request, *inspector2.GetMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetMemberOutput)
	return ret0, ret1
}

// GetMemberRequest indicates an expected call of GetMemberRequest
func (mr *MockInspector2APIMockRecorder) GetMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberRequest", reflect.TypeOf((*MockInspector2API)(nil).GetMemberRequest), arg0)
}

// GetMemberWithContext mocks base method
func (m *MockInspector2API) GetMemberWithContext(arg0 context.Context, arg1 *inspector2.GetMemberInput, arg2 ...request.Option) (*inspector2.GetMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberWithContext indicates an expected call of GetMemberWithContext
func (mr *MockInspector2APIMockRecorder) GetMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetMemberWithContext), varargs...)
}

// GetSbomExport mocks base method
func (m *MockInspector2API) GetSbomExport(arg0 *inspector2.GetSbomExportInput) (*inspector2.GetSbomExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSbomExport", arg0)
	ret0, _ := ret[0].(*inspector2.GetSbomExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSbomExport indicates an expected call of GetSbomExport
func (mr *MockInspector2APIMockRecorder) GetSbomExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSbomExport", reflect.TypeOf((*MockInspector2API)(nil).GetSbomExport), arg0)
}

// GetSbomExportRequest mocks base method
func (m *MockInspector2API) GetSbomExportRequest(arg0 *inspector2.GetSbomExportInput) (*request.Request, *inspector2.GetSbomExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSbomExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetSbomExportOutput)
	return ret0, ret1
}

// GetSbomExportRequest indicates an expected call of GetSbomExportRequest
func (mr *MockInspector2APIMockRecorder) GetSbomExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSbomExportRequest", reflect.TypeOf((*MockInspector2API)(nil).GetSbomExportRequest), arg0)
}

// GetSbomExportWithContext mocks base method
func (m *MockInspector2API) GetSbomExportWithContext(arg0 context.Context, arg1 *inspector2.GetSbomExportInput, arg2 ...request.Option) (*inspector2.GetSbomExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSbomExportWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetSbomExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSbomExportWithContext indicates an expected call of GetSbomExportWithContext
func (mr *MockInspector2APIMockRecorder) GetSbomExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSbomExportWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetSbomExportWithContext), varargs...)
}

// ListAccountPermissions mocks base method
func (m *MockInspector2API) ListAccountPermissions(arg0 *inspector2.ListAccountPermissionsInput) (*inspector2.ListAccountPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountPermissions", arg0)
	ret0, _ := ret[0].(*inspector2.ListAccountPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountPermissions indicates an expected call of ListAccountPermissions
func (mr *MockInspector2APIMockRecorder) ListAccountPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPermissions", reflect.TypeOf((*MockInspector2API)(nil).ListAccountPermissions), arg0)
}

// ListAccountPermissionsPages mocks base method
func (m *MockInspector2API) ListAccountPermissionsPages(arg0 *inspector2.ListAccountPermissionsInput, arg1 func(*inspector2.ListAccountPermissionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountPermissionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountPermissionsPages indicates an expected call of ListAccountPermissionsPages
func (mr *MockInspector2APIMockRecorder) ListAccountPermissionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPermissionsPages", reflect.TypeOf((*MockInspector2API)(nil).ListAccountPermissionsPages), arg0, arg1)
}

// ListAccountPermissionsPagesWithContext mocks base method
func (m *MockInspector2API) ListAccountPermissionsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListAccountPermissionsInput, arg2 func(*inspector2.ListAccountPermissionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountPermissionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountPermissionsPagesWithContext indicates an expected call of ListAccountPermissionsPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListAccountPermissionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPermissionsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListAccountPermissionsPagesWithContext), varargs...)
}

// ListAccountPermissionsRequest mocks base method
func (m *MockInspector2API) ListAccountPermissionsRequest(arg0 *inspector2.ListAccountPermissionsInput) (*request.Request, *inspector2.ListAccountPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListAccountPermissionsOutput)
	return ret0, ret1
}

// ListAccountPermissionsRequest indicates an expected call of ListAccountPermissionsRequest
func (mr *MockInspector2APIMockRecorder) ListAccountPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPermissionsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListAccountPermissionsRequest), arg0)
}

// ListAccountPermissionsWithContext mocks base method
func (m *MockInspector2API) ListAccountPermissionsWithContext(arg0 context.Context, arg1 *inspector2.ListAccountPermissionsInput, arg2 ...request.Option) (*inspector2.ListAccountPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListAccountPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountPermissionsWithContext indicates an expected call of ListAccountPermissionsWithContext
func (mr *MockInspector2APIMockRecorder) ListAccountPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPermissionsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListAccountPermissionsWithContext), varargs...)
}

// ListCisScanConfigurations mocks base method
func (m *MockInspector2API) ListCisScanConfigurations(arg0 *inspector2.ListCisScanConfigurationsInput) (*inspector2.ListCisScanConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScanConfigurations", arg0)
	ret0, _ := ret[0].(*inspector2.ListCisScanConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCisScanConfigurations indicates an expected call of ListCisScanConfigurations
func (mr *MockInspector2APIMockRecorder) ListCisScanConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanConfigurations", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanConfigurations), arg0)
}

// ListCisScanConfigurationsPages mocks base method
func (m *MockInspector2API) ListCisScanConfigurationsPages(arg0 *inspector2.ListCisScanConfigurationsInput, arg1 func(*inspector2.ListCisScanConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScanConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCisScanConfigurationsPages indicates an expected call of ListCisScanConfigurationsPages
func (mr *MockInspector2APIMockRecorder) ListCisScanConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanConfigurationsPages", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanConfigurationsPages), arg0, arg1)
}

// ListCisScanConfigurationsPagesWithContext mocks base method
func (m *MockInspector2API) ListCisScanConfigurationsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListCisScanConfigurationsInput, arg2 func(*inspector2.ListCisScanConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCisScanConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCisScanConfigurationsPagesWithContext indicates an expected call of ListCisScanConfigurationsPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListCisScanConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanConfigurationsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanConfigurationsPagesWithContext), varargs...)
}

// ListCisScanConfigurationsRequest mocks base method
func (m *MockInspector2API) ListCisScanConfigurationsRequest(arg0 *inspector2.ListCisScanConfigurationsInput) (*request.Request, *inspector2.ListCisScanConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScanConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListCisScanConfigurationsOutput)
	return ret0, ret1
}

// ListCisScanConfigurationsRequest indicates an expected call of ListCisScanConfigurationsRequest
func (mr *MockInspector2APIMockRecorder) ListCisScanConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanConfigurationsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanConfigurationsRequest), arg0)
}

// ListCisScanConfigurationsWithContext mocks base method
func (m *MockInspector2API) ListCisScanConfigurationsWithContext(arg0 context.Context, arg1 *inspector2.ListCisScanConfigurationsInput, arg2 ...request.Option) (*inspector2.ListCisScanConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCisScanConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListCisScanConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCisScanConfigurationsWithContext indicates an expected call of ListCisScanConfigurationsWithContext
func (mr *MockInspector2APIMockRecorder) ListCisScanConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanConfigurationsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanConfigurationsWithContext), varargs...)
}

// ListCisScanResultsAggregatedByChecks mocks base method
func (m *MockInspector2API) ListCisScanResultsAggregatedByChecks(arg0 *inspector2.ListCisScanResultsAggregatedByChecksInput) (*inspector2.ListCisScanResultsAggregatedByChecksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScanResultsAggregatedByChecks", arg0)
	ret0, _ := ret[0].(*inspector2.ListCisScanResultsAggregatedByChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCisScanResultsAggregatedByChecks indicates an expected call of ListCisScanResultsAggregatedByChecks
func (mr *MockInspector2APIMockRecorder) ListCisScanResultsAggregatedByChecks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanResultsAggregatedByChecks", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanResultsAggregatedByChecks), arg0)
}

// ListCisScanResultsAggregatedByChecksPages mocks base method
func (m *MockInspector2API) ListCisScanResultsAggregatedByChecksPages(arg0 *inspector2.ListCisScanResultsAggregatedByChecksInput, arg1 func(*inspector2.ListCisScanResultsAggregatedByChecksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScanResultsAggregatedByChecksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCisScanResultsAggregatedByChecksPages indicates an expected call of ListCisScanResultsAggregatedByChecksPages
func (mr *MockInspector2APIMockRecorder) ListCisScanResultsAggregatedByChecksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanResultsAggregatedByChecksPages", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanResultsAggregatedByChecksPages), arg0, arg1)
}

// ListCisScanResultsAggregatedByChecksPagesWithContext mocks base method
func (m *MockInspector2API) ListCisScanResultsAggregatedByChecksPagesWithContext(arg0 context.Context, arg1 *inspector2.ListCisScanResultsAggregatedByChecksInput, arg2 func(*inspector2.ListCisScanResultsAggregatedByChecksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCisScanResultsAggregatedByChecksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCisScanResultsAggregatedByChecksPagesWithContext indicates an expected call of ListCisScanResultsAggregatedByChecksPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListCisScanResultsAggregatedByChecksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanResultsAggregatedByChecksPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanResultsAggregatedByChecksPagesWithContext), varargs...)
}

// ListCisScanResultsAggregatedByChecksRequest mocks base method
func (m *MockInspector2API) ListCisScanResultsAggregatedByChecksRequest(arg0 *inspector2.ListCisScanResultsAggregatedByChecksInput) (*request.Request, *inspector2.ListCisScanResultsAggregatedByChecksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScanResultsAggregatedByChecksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListCisScanResultsAggregatedByChecksOutput)
	return ret0, ret1
}

// ListCisScanResultsAggregatedByChecksRequest indicates an expected call of ListCisScanResultsAggregatedByChecksRequest
func (mr *MockInspector2APIMockRecorder) ListCisScanResultsAggregatedByChecksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanResultsAggregatedByChecksRequest", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanResultsAggregatedByChecksRequest), arg0)
}

// ListCisScanResultsAggregatedByChecksWithContext mocks base method
func (m *MockInspector2API) ListCisScanResultsAggregatedByChecksWithContext(arg0 context.Context, arg1 *inspector2.ListCisScanResultsAggregatedByChecksInput, arg2 ...request.Option) (*inspector2.ListCisScanResultsAggregatedByChecksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCisScanResultsAggregatedByChecksWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListCisScanResultsAggregatedByChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCisScanResultsAggregatedByChecksWithContext indicates an expected call of ListCisScanResultsAggregatedByChecksWithContext
func (mr *MockInspector2APIMockRecorder) ListCisScanResultsAggregatedByChecksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanResultsAggregatedByChecksWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanResultsAggregatedByChecksWithContext), varargs...)
}

// ListCisScanResultsAggregatedByTargetResource mocks base method
func (m *MockInspector2API) ListCisScanResultsAggregatedByTargetResource(arg0 *inspector2.ListCisScanResultsAggregatedByTargetResourceInput) (*inspector2.ListCisScanResultsAggregatedByTargetResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScanResultsAggregatedByTargetResource", arg0)
	ret0, _ := ret[0].(*inspector2.ListCisScanResultsAggregatedByTargetResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCisScanResultsAggregatedByTargetResource indicates an expected call of ListCisScanResultsAggregatedByTargetResource
func (mr *MockInspector2APIMockRecorder) ListCisScanResultsAggregatedByTargetResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanResultsAggregatedByTargetResource", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanResultsAggregatedByTargetResource), arg0)
}

// ListCisScanResultsAggregatedByTargetResourcePages mocks base method
func (m *MockInspector2API) ListCisScanResultsAggregatedByTargetResourcePages(arg0 *inspector2.ListCisScanResultsAggregatedByTargetResourceInput, arg1 func(*inspector2.ListCisScanResultsAggregatedByTargetResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScanResultsAggregatedByTargetResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCisScanResultsAggregatedByTargetResourcePages indicates an expected call of ListCisScanResultsAggregatedByTargetResourcePages
func (mr *MockInspector2APIMockRecorder) ListCisScanResultsAggregatedByTargetResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanResultsAggregatedByTargetResourcePages", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanResultsAggregatedByTargetResourcePages), arg0, arg1)
}

// ListCisScanResultsAggregatedByTargetResourcePagesWithContext mocks base method
func (m *MockInspector2API) ListCisScanResultsAggregatedByTargetResourcePagesWithContext(arg0 context.Context, arg1 *inspector2.ListCisScanResultsAggregatedByTargetResourceInput, arg2 func(*inspector2.ListCisScanResultsAggregatedByTargetResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCisScanResultsAggregatedByTargetResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCisScanResultsAggregatedByTargetResourcePagesWithContext indicates an expected call of ListCisScanResultsAggregatedByTargetResourcePagesWithContext
func (mr *MockInspector2APIMockRecorder) ListCisScanResultsAggregatedByTargetResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanResultsAggregatedByTargetResourcePagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanResultsAggregatedByTargetResourcePagesWithContext), varargs...)
}

// ListCisScanResultsAggregatedByTargetResourceRequest mocks base method
func (m *MockInspector2API) ListCisScanResultsAggregatedByTargetResourceRequest(arg0 *inspector2.ListCisScanResultsAggregatedByTargetResourceInput) (*request.Request, *inspector2.ListCisScanResultsAggregatedByTargetResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScanResultsAggregatedByTargetResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListCisScanResultsAggregatedByTargetResourceOutput)
	return ret0, ret1
}

// ListCisScanResultsAggregatedByTargetResourceRequest indicates an expected call of ListCisScanResultsAggregatedByTargetResourceRequest
func (mr *MockInspector2APIMockRecorder) ListCisScanResultsAggregatedByTargetResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanResultsAggregatedByTargetResourceRequest", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanResultsAggregatedByTargetResourceRequest), arg0)
}

// ListCisScanResultsAggregatedByTargetResourceWithContext mocks base method
func (m *MockInspector2API) ListCisScanResultsAggregatedByTargetResourceWithContext(arg0 context.Context, arg1 *inspector2.ListCisScanResultsAggregatedByTargetResourceInput, arg2 ...request.Option) (*inspector2.ListCisScanResultsAggregatedByTargetResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCisScanResultsAggregatedByTargetResourceWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListCisScanResultsAggregatedByTargetResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCisScanResultsAggregatedByTargetResourceWithContext indicates an expected call of ListCisScanResultsAggregatedByTargetResourceWithContext
func (mr *MockInspector2APIMockRecorder) ListCisScanResultsAggregatedByTargetResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScanResultsAggregatedByTargetResourceWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCisScanResultsAggregatedByTargetResourceWithContext), varargs...)
}

// ListCisScans mocks base method
func (m *MockInspector2API) ListCisScans(arg0 *inspector2.ListCisScansInput) (*inspector2.ListCisScansOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScans", arg0)
	ret0, _ := ret[0].(*inspector2.ListCisScansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCisScans indicates an expected call of ListCisScans
func (mr *MockInspector2APIMockRecorder) ListCisScans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScans", reflect.TypeOf((*MockInspector2API)(nil).ListCisScans), arg0)
}

// ListCisScansPages mocks base method
func (m *MockInspector2API) ListCisScansPages(arg0 *inspector2.ListCisScansInput, arg1 func(*inspector2.ListCisScansOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScansPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCisScansPages indicates an expected call of ListCisScansPages
func (mr *MockInspector2APIMockRecorder) ListCisScansPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScansPages", reflect.TypeOf((*MockInspector2API)(nil).ListCisScansPages), arg0, arg1)
}

// ListCisScansPagesWithContext mocks base method
func (m *MockInspector2API) ListCisScansPagesWithContext(arg0 context.Context, arg1 *inspector2.ListCisScansInput, arg2 func(*inspector2.ListCisScansOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCisScansPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCisScansPagesWithContext indicates an expected call of ListCisScansPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListCisScansPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScansPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCisScansPagesWithContext), varargs...)
}

// ListCisScansRequest mocks base method
func (m *MockInspector2API) ListCisScansRequest(arg0 *inspector2.ListCisScansInput) (*request.Request, *inspector2.ListCisScansOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCisScansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListCisScansOutput)
	return ret0, ret1
}

// ListCisScansRequest indicates an expected call of ListCisScansRequest
func (mr *MockInspector2APIMockRecorder) ListCisScansRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScansRequest", reflect.TypeOf((*MockInspector2API)(nil).ListCisScansRequest), arg0)
}

// ListCisScansWithContext mocks base method
func (m *MockInspector2API) ListCisScansWithContext(arg0 context.Context, arg1 *inspector2.ListCisScansInput, arg2 ...request.Option) (*inspector2.ListCisScansOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCisScansWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListCisScansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCisScansWithContext indicates an expected call of ListCisScansWithContext
func (mr *MockInspector2APIMockRecorder) ListCisScansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCisScansWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCisScansWithContext), varargs...)
}

// ListCoverage mocks base method
func (m *MockInspector2API) ListCoverage(arg0 *inspector2.ListCoverageInput) (*inspector2.ListCoverageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoverage", arg0)
	ret0, _ := ret[0].(*inspector2.ListCoverageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoverage indicates an expected call of ListCoverage
func (mr *MockInspector2APIMockRecorder) ListCoverage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverage", reflect.TypeOf((*MockInspector2API)(nil).ListCoverage), arg0)
}

// ListCoveragePages mocks base method
func (m *MockInspector2API) ListCoveragePages(arg0 *inspector2.ListCoverageInput, arg1 func(*inspector2.ListCoverageOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoveragePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoveragePages indicates an expected call of ListCoveragePages
func (mr *MockInspector2APIMockRecorder) ListCoveragePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoveragePages", reflect.TypeOf((*MockInspector2API)(nil).ListCoveragePages), arg0, arg1)
}

// ListCoveragePagesWithContext mocks base method
func (m *MockInspector2API) ListCoveragePagesWithContext(arg0 context.Context, arg1 *inspector2.ListCoverageInput, arg2 func(*inspector2.ListCoverageOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoveragePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoveragePagesWithContext indicates an expected call of ListCoveragePagesWithContext
func (mr *MockInspector2APIMockRecorder) ListCoveragePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoveragePagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCoveragePagesWithContext), varargs...)
}

// ListCoverageRequest mocks base method
func (m *MockInspector2API) ListCoverageRequest(arg0 *inspector2.ListCoverageInput) (*request.Request, *inspector2.ListCoverageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoverageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListCoverageOutput)
	return ret0, ret1
}

// ListCoverageRequest indicates an expected call of ListCoverageRequest
func (mr *MockInspector2APIMockRecorder) ListCoverageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageRequest", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageRequest), arg0)
}

// ListCoverageStatistics mocks base method
func (m *MockInspector2API) ListCoverageStatistics(arg0 *inspector2.ListCoverageStatisticsInput) (*inspector2.ListCoverageStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoverageStatistics", arg0)
	ret0, _ := ret[0].(*inspector2.ListCoverageStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoverageStatistics indicates an expected call of ListCoverageStatistics
func (mr *MockInspector2APIMockRecorder) ListCoverageStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageStatistics", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageStatistics), arg0)
}

// ListCoverageStatisticsPages mocks base method
func (m *MockInspector2API) ListCoverageStatisticsPages(arg0 *inspector2.ListCoverageStatisticsInput, arg1 func(*inspector2.ListCoverageStatisticsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoverageStatisticsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoverageStatisticsPages indicates an expected call of ListCoverageStatisticsPages
func (mr *MockInspector2APIMockRecorder) ListCoverageStatisticsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageStatisticsPages", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageStatisticsPages), arg0, arg1)
}

// ListCoverageStatisticsPagesWithContext mocks base method
func (m *MockInspector2API) ListCoverageStatisticsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListCoverageStatisticsInput, arg2 func(*inspector2.ListCoverageStatisticsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoverageStatisticsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoverageStatisticsPagesWithContext indicates an expected call of ListCoverageStatisticsPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListCoverageStatisticsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageStatisticsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageStatisticsPagesWithContext), varargs...)
}

// ListCoverageStatisticsRequest mocks base method
func (m *MockInspector2API) ListCoverageStatisticsRequest(arg0 *inspector2.ListCoverageStatisticsInput) (*request.Request, *inspector2.ListCoverageStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoverageStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListCoverageStatisticsOutput)
	return ret0, ret1
}

// ListCoverageStatisticsRequest indicates an expected call of ListCoverageStatisticsRequest
func (mr *MockInspector2APIMockRecorder) ListCoverageStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageStatisticsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageStatisticsRequest), arg0)
}

// ListCoverageStatisticsWithContext mocks base method
func (m *MockInspector2API) ListCoverageStatisticsWithContext(arg0 context.Context, arg1 *inspector2.ListCoverageStatisticsInput, arg2 ...request.Option) (*inspector2.ListCoverageStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoverageStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListCoverageStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoverageStatisticsWithContext indicates an expected call of ListCoverageStatisticsWithContext
func (mr *MockInspector2APIMockRecorder) ListCoverageStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageStatisticsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageStatisticsWithContext), varargs...)
}

// ListCoverageWithContext mocks base method
func (m *MockInspector2API) ListCoverageWithContext(arg0 context.Context, arg1 *inspector2.ListCoverageInput, arg2 ...request.Option) (*inspector2.ListCoverageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoverageWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListCoverageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoverageWithContext indicates an expected call of ListCoverageWithContext
func (mr *MockInspector2APIMockRecorder) ListCoverageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageWithContext), varargs...)
}

// ListDelegatedAdminAccounts mocks base method
func (m *MockInspector2API) ListDelegatedAdminAccounts(arg0 *inspector2.ListDelegatedAdminAccountsInput) (*inspector2.ListDelegatedAdminAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDelegatedAdminAccounts", arg0)
	ret0, _ := ret[0].(*inspector2.ListDelegatedAdminAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegatedAdminAccounts indicates an expected call of ListDelegatedAdminAccounts
func (mr *MockInspector2APIMockRecorder) ListDelegatedAdminAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdminAccounts", reflect.TypeOf((*MockInspector2API)(nil).ListDelegatedAdminAccounts), arg0)
}

// ListDelegatedAdminAccountsPages mocks base method
func (m *MockInspector2API) ListDelegatedAdminAccountsPages(arg0 *inspector2.ListDelegatedAdminAccountsInput, arg1 func(*inspector2.ListDelegatedAdminAccountsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDelegatedAdminAccountsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDelegatedAdminAccountsPages indicates an expected call of ListDelegatedAdminAccountsPages
func (mr *MockInspector2APIMockRecorder) ListDelegatedAdminAccountsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdminAccountsPages", reflect.TypeOf((*MockInspector2API)(nil).ListDelegatedAdminAccountsPages), arg0, arg1)
}

// ListDelegatedAdminAccountsPagesWithContext mocks base method
func (m *MockInspector2API) ListDelegatedAdminAccountsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListDelegatedAdminAccountsInput, arg2 func(*inspector2.ListDelegatedAdminAccountsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDelegatedAdminAccountsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDelegatedAdminAccountsPagesWithContext indicates an expected call of ListDelegatedAdminAccountsPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListDelegatedAdminAccountsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdminAccountsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListDelegatedAdminAccountsPagesWithContext), varargs...)
}

// ListDelegatedAdminAccountsRequest mocks base method
func (m *MockInspector2API) ListDelegatedAdminAccountsRequest(arg0 *inspector2.ListDelegatedAdminAccountsInput) (*request.Request, *inspector2.ListDelegatedAdminAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDelegatedAdminAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListDelegatedAdminAccountsOutput)
	return ret0, ret1
}

// ListDelegatedAdminAccountsRequest indicates an expected call of ListDelegatedAdminAccountsRequest
func (mr *MockInspector2APIMockRecorder) ListDelegatedAdminAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdminAccountsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListDelegatedAdminAccountsRequest), arg0)
}

// ListDelegatedAdminAccountsWithContext mocks base method
func (m *MockInspector2API) ListDelegatedAdminAccountsWithContext(arg0 context.Context, arg1 *inspector2.ListDelegatedAdminAccountsInput, arg2 ...request.Option) (*inspector2.ListDelegatedAdminAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDelegatedAdminAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListDelegatedAdminAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegatedAdminAccountsWithContext indicates an expected call of ListDelegatedAdminAccountsWithContext
func (mr *MockInspector2APIMockRecorder) ListDelegatedAdminAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdminAccountsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListDelegatedAdminAccountsWithContext), varargs...)
}

// ListFilters mocks base method
func (m *MockInspector2API) ListFilters(arg0 *inspector2.ListFiltersInput) (*inspector2.ListFiltersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilters", arg0)
	ret0, _ := ret[0].(*inspector2.ListFiltersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilters indicates an expected call of ListFilters
func (mr *MockInspector2APIMockRecorder) ListFilters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilters", reflect.TypeOf((*MockInspector2API)(nil).ListFilters), arg0)
}

// ListFiltersPages mocks base method
func (m *MockInspector2API) ListFiltersPages(arg0 *inspector2.ListFiltersInput, arg1 func(*inspector2.ListFiltersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiltersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFiltersPages indicates an expected call of ListFiltersPages
func (mr *MockInspector2APIMockRecorder) ListFiltersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersPages", reflect.TypeOf((*MockInspector2API)(nil).ListFiltersPages), arg0, arg1)
}

// ListFiltersPagesWithContext mocks base method
func (m *MockInspector2API) ListFiltersPagesWithContext(arg0 context.Context, arg1 *inspector2.ListFiltersInput, arg2 func(*inspector2.ListFiltersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFiltersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFiltersPagesWithContext indicates an expected call of ListFiltersPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListFiltersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFiltersPagesWithContext), varargs...)
}

// ListFiltersRequest mocks base method
func (m *MockInspector2API) ListFiltersRequest(arg0 *inspector2.ListFiltersInput) (*request.Request, *inspector2.ListFiltersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiltersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListFiltersOutput)
	return ret0, ret1
}

// ListFiltersRequest indicates an expected call of ListFiltersRequest
func (mr *MockInspector2APIMockRecorder) ListFiltersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersRequest", reflect.TypeOf((*MockInspector2API)(nil).ListFiltersRequest), arg0)
}

// ListFiltersWithContext mocks base method
func (m *MockInspector2API) ListFiltersWithContext(arg0 context.Context, arg1 *inspector2.ListFiltersInput, arg2 ...request.Option) (*inspector2.ListFiltersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFiltersWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListFiltersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiltersWithContext indicates an expected call of ListFiltersWithContext
func (mr *MockInspector2APIMockRecorder) ListFiltersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFiltersWithContext), varargs...)
}

// ListFindingAggregations mocks base method
func (m *MockInspector2API) ListFindingAggregations(arg0 *inspector2.ListFindingAggregationsInput) (*inspector2.ListFindingAggregationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingAggregations", arg0)
	ret0, _ := ret[0].(*inspector2.ListFindingAggregationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingAggregations indicates an expected call of ListFindingAggregations
func (mr *MockInspector2APIMockRecorder) ListFindingAggregations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregations", reflect.TypeOf((*MockInspector2API)(nil).ListFindingAggregations), arg0)
}

// ListFindingAggregationsPages mocks base method
func (m *MockInspector2API) ListFindingAggregationsPages(arg0 *inspector2.ListFindingAggregationsInput, arg1 func(*inspector2.ListFindingAggregationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingAggregationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingAggregationsPages indicates an expected call of ListFindingAggregationsPages
func (mr *MockInspector2APIMockRecorder) ListFindingAggregationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregationsPages", reflect.TypeOf((*MockInspector2API)(nil).ListFindingAggregationsPages), arg0, arg1)
}

// ListFindingAggregationsPagesWithContext mocks base method
func (m *MockInspector2API) ListFindingAggregationsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListFindingAggregationsInput, arg2 func(*inspector2.ListFindingAggregationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingAggregationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingAggregationsPagesWithContext indicates an expected call of ListFindingAggregationsPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListFindingAggregationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregationsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFindingAggregationsPagesWithContext), varargs...)
}

// ListFindingAggregationsRequest mocks base method
func (m *MockInspector2API) ListFindingAggregationsRequest(arg0 *inspector2.ListFindingAggregationsInput) (*request.Request, *inspector2.ListFindingAggregationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingAggregationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListFindingAggregationsOutput)
	return ret0, ret1
}

// ListFindingAggregationsRequest indicates an expected call of ListFindingAggregationsRequest
func (mr *MockInspector2APIMockRecorder) ListFindingAggregationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregationsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListFindingAggregationsRequest), arg0)
}

// ListFindingAggregationsWithContext mocks base method
func (m *MockInspector2API) ListFindingAggregationsWithContext(arg0 context.Context, arg1 *inspector2.ListFindingAggregationsInput, arg2 ...request.Option) (*inspector2.ListFindingAggregationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingAggregationsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListFindingAggregationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingAggregationsWithContext indicates an expected call of ListFindingAggregationsWithContext
func (mr *MockInspector2APIMockRecorder) ListFindingAggregationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregationsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFindingAggregationsWithContext), varargs...)
}

// ListFindings mocks base method
func (m *MockInspector2API) ListFindings(arg0 *inspector2.ListFindingsInput) (*inspector2.ListFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindings", arg0)
	ret0, _ := ret[0].(*inspector2.ListFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindings indicates an expected call of ListFindings
func (mr *MockInspector2APIMockRecorder) ListFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindings", reflect.TypeOf((*MockInspector2API)(nil).ListFindings), arg0)
}

// ListFindingsPages mocks base method
func (m *MockInspector2API) ListFindingsPages(arg0 *inspector2.ListFindingsInput, arg1 func(*inspector2.ListFindingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsPages indicates an expected call of ListFindingsPages
func (mr *MockInspector2APIMockRecorder) ListFindingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsPages", reflect.TypeOf((*MockInspector2API)(nil).ListFindingsPages), arg0, arg1)
}

// ListFindingsPagesWithContext mocks base method
func (m *MockInspector2API) ListFindingsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListFindingsInput, arg2 func(*inspector2.ListFindingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsPagesWithContext indicates an expected call of ListFindingsPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListFindingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFindingsPagesWithContext), varargs...)
}

// ListFindingsRequest mocks base method
func (m *MockInspector2API) ListFindingsRequest(arg0 *inspector2.ListFindingsInput) (*request.Request, *inspector2.ListFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListFindingsOutput)
	return ret0, ret1
}

// ListFindingsRequest indicates an expected call of ListFindingsRequest
func (mr *MockInspector2APIMockRecorder) ListFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListFindingsRequest), arg0)
}

// ListFindingsWithContext mocks base method
func (m *MockInspector2API) ListFindingsWithContext(arg0 context.Context, arg1 *inspector2.ListFindingsInput, arg2 ...request.Option) (*inspector2.ListFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingsWithContext indicates an expected call of ListFindingsWithContext
func (mr *MockInspector2APIMockRecorder) ListFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFindingsWithContext), varargs...)
}

// ListMembers mocks base method
func (m *MockInspector2API) ListMembers(arg0 *inspector2.ListMembersInput) (*inspector2.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0)
	ret0, _ := ret[0].(*inspector2.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers
func (mr *MockInspector2APIMockRecorder) ListMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockInspector2API)(nil).ListMembers), arg0)
}

// ListMembersPages mocks base method
func (m *MockInspector2API) ListMembersPages(arg0 *inspector2.ListMembersInput, arg1 func(*inspector2.ListMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPages indicates an expected call of ListMembersPages
func (mr *MockInspector2APIMockRecorder) ListMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPages", reflect.TypeOf((*MockInspector2API)(nil).ListMembersPages), arg0, arg1)
}

// ListMembersPagesWithContext mocks base method
func (m *MockInspector2API) ListMembersPagesWithContext(arg0 context.Context, arg1 *inspector2.ListMembersInput, arg2 func(*inspector2.ListMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPagesWithContext indicates an expected call of ListMembersPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListMembersPagesWithContext), varargs...)
}

// ListMembersRequest mocks base method
func (m *MockInspector2API) ListMembersRequest(arg0 *inspector2.ListMembersInput) (*request.Request, *inspector2.ListMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListMembersOutput)
	return ret0, ret1
}

// ListMembersRequest indicates an expected call of ListMembersRequest
func (mr *MockInspector2APIMockRecorder) ListMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersRequest", reflect.TypeOf((*MockInspector2API)(nil).ListMembersRequest), arg0)
}

// ListMembersWithContext mocks base method
func (m *MockInspector2API) ListMembersWithContext(arg0 context.Context, arg1 *inspector2.ListMembersInput, arg2 ...request.Option) (*inspector2.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersWithContext indicates an expected call of ListMembersWithContext
func (mr *MockInspector2APIMockRecorder) ListMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListMembersWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockInspector2API) ListTagsForResource(arg0 *inspector2.ListTagsForResourceInput) (*inspector2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*inspector2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockInspector2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockInspector2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockInspector2API) ListTagsForResourceRequest(arg0 *inspector2.ListTagsForResourceInput) (*request.Request, *inspector2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockInspector2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockInspector2API)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockInspector2API) ListTagsForResourceWithContext(arg0 context.Context, arg1 *inspector2.ListTagsForResourceInput, arg2 ...request.Option) (*inspector2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockInspector2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListUsageTotals mocks base method
func (m *MockInspector2API) ListUsageTotals(arg0 *inspector2.ListUsageTotalsInput) (*inspector2.ListUsageTotalsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageTotals", arg0)
	ret0, _ := ret[0].(*inspector2.ListUsageTotalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageTotals indicates an expected call of ListUsageTotals
func (mr *MockInspector2APIMockRecorder) ListUsageTotals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageTotals", reflect.TypeOf((*MockInspector2API)(nil).ListUsageTotals), arg0)
}

// ListUsageTotalsPages mocks base method
func (m *MockInspector2API) ListUsageTotalsPages(arg0 *inspector2.ListUsageTotalsInput, arg1 func(*inspector2.ListUsageTotalsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageTotalsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsageTotalsPages indicates an expected call of ListUsageTotalsPages
func (mr *MockInspector2APIMockRecorder) ListUsageTotalsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageTotalsPages", reflect.TypeOf((*MockInspector2API)(nil).ListUsageTotalsPages), arg0, arg1)
}

// ListUsageTotalsPagesWithContext mocks base method
func (m *MockInspector2API) ListUsageTotalsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListUsageTotalsInput, arg2 func(*inspector2.ListUsageTotalsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsageTotalsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsageTotalsPagesWithContext indicates an expected call of ListUsageTotalsPagesWithContext
func (mr *MockInspector2APIMockRecorder) ListUsageTotalsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageTotalsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListUsageTotalsPagesWithContext), varargs...)
}

// ListUsageTotalsRequest mocks base method
func (m *MockInspector2API) ListUsageTotalsRequest(arg0 *inspector2.ListUsageTotalsInput) (*request.Request, *inspector2.ListUsageTotalsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageTotalsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListUsageTotalsOutput)
	return ret0, ret1
}

// ListUsageTotalsRequest indicates an expected call of ListUsageTotalsRequest
func (mr *MockInspector2APIMockRecorder) ListUsageTotalsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageTotalsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListUsageTotalsRequest), arg0)
}

// ListUsageTotalsWithContext mocks base method
func (m *MockInspector2API) ListUsageTotalsWithContext(arg0 context.Context, arg1 *inspector2.ListUsageTotalsInput, arg2 ...request.Option) (*inspector2.ListUsageTotalsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsageTotalsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListUsageTotalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageTotalsWithContext indicates an expected call of ListUsageTotalsWithContext
func (mr *MockInspector2APIMockRecorder) ListUsageTotalsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageTotalsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListUsageTotalsWithContext), varargs...)
}

// ResetEncryptionKey mocks base method
func (m *MockInspector2API) ResetEncryptionKey(arg0 *inspector2.ResetEncryptionKeyInput) (*inspector2.ResetEncryptionKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetEncryptionKey", arg0)
	ret0, _ := ret[0].(*inspector2.ResetEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetEncryptionKey indicates an expected call of ResetEncryptionKey
func (mr *MockInspector2APIMockRecorder) ResetEncryptionKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetEncryptionKey", reflect.TypeOf((*MockInspector2API)(nil).ResetEncryptionKey), arg0)
}

// ResetEncryptionKeyRequest mocks base method
func (m *MockInspector2API) ResetEncryptionKeyRequest(arg0 *inspector2.ResetEncryptionKeyInput) (*request.Request, *inspector2.ResetEncryptionKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetEncryptionKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ResetEncryptionKeyOutput)
	return ret0, ret1
}

// ResetEncryptionKeyRequest indicates an expected call of ResetEncryptionKeyRequest
func (mr *MockInspector2APIMockRecorder) ResetEncryptionKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetEncryptionKeyRequest", reflect.TypeOf((*MockInspector2API)(nil).ResetEncryptionKeyRequest), arg0)
}

// ResetEncryptionKeyWithContext mocks base method
func (m *MockInspector2API) ResetEncryptionKeyWithContext(arg0 context.Context, arg1 *inspector2.ResetEncryptionKeyInput, arg2 ...request.Option) (*inspector2.ResetEncryptionKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetEncryptionKeyWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ResetEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetEncryptionKeyWithContext indicates an expected call of ResetEncryptionKeyWithContext
func (mr *MockInspector2APIMockRecorder) ResetEncryptionKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetEncryptionKeyWithContext", reflect.TypeOf((*MockInspector2API)(nil).ResetEncryptionKeyWithContext), varargs...)
}

// SearchVulnerabilities mocks base method
func (m *MockInspector2API) SearchVulnerabilities(arg0 *inspector2.SearchVulnerabilitiesInput) (*inspector2.SearchVulnerabilitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVulnerabilities", arg0)
	ret0, _ := ret[0].(*inspector2.SearchVulnerabilitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVulnerabilities indicates an expected call of SearchVulnerabilities
func (mr *MockInspector2APIMockRecorder) SearchVulnerabilities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVulnerabilities", reflect.TypeOf((*MockInspector2API)(nil).SearchVulnerabilities), arg0)
}

// SearchVulnerabilitiesPages mocks base method
func (m *MockInspector2API) SearchVulnerabilitiesPages(arg0 *inspector2.SearchVulnerabilitiesInput, arg1 func(*inspector2.SearchVulnerabilitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVulnerabilitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchVulnerabilitiesPages indicates an expected call of SearchVulnerabilitiesPages
func (mr *MockInspector2APIMockRecorder) SearchVulnerabilitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVulnerabilitiesPages", reflect.TypeOf((*MockInspector2API)(nil).SearchVulnerabilitiesPages), arg0, arg1)
}

// SearchVulnerabilitiesPagesWithContext mocks base method
func (m *MockInspector2API) SearchVulnerabilitiesPagesWithContext(arg0 context.Context, arg1 *inspector2.SearchVulnerabilitiesInput, arg2 func(*inspector2.SearchVulnerabilitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchVulnerabilitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchVulnerabilitiesPagesWithContext indicates an expected call of SearchVulnerabilitiesPagesWithContext
func (mr *MockInspector2APIMockRecorder) SearchVulnerabilitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVulnerabilitiesPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).SearchVulnerabilitiesPagesWithContext), varargs...)
}

// SearchVulnerabilitiesRequest mocks base method
func (m *MockInspector2API) SearchVulnerabilitiesRequest(arg0 *inspector2.SearchVulnerabilitiesInput) (*request.Request, *inspector2.SearchVulnerabilitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVulnerabilitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.SearchVulnerabilitiesOutput)
	return ret0, ret1
}

// SearchVulnerabilitiesRequest indicates an expected call of SearchVulnerabilitiesRequest
func (mr *MockInspector2APIMockRecorder) SearchVulnerabilitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVulnerabilitiesRequest", reflect.TypeOf((*MockInspector2API)(nil).SearchVulnerabilitiesRequest), arg0)
}

// SearchVulnerabilitiesWithContext mocks base method
func (m *MockInspector2API) SearchVulnerabilitiesWithContext(arg0 context.Context, arg1 *inspector2.SearchVulnerabilitiesInput, arg2 ...request.Option) (*inspector2.SearchVulnerabilitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchVulnerabilitiesWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.SearchVulnerabilitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVulnerabilitiesWithContext indicates an expected call of SearchVulnerabilitiesWithContext
func (mr *MockInspector2APIMockRecorder) SearchVulnerabilitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVulnerabilitiesWithContext", reflect.TypeOf((*MockInspector2API)(nil).SearchVulnerabilitiesWithContext), varargs...)
}

// SendCisSessionHealth mocks base method
func (m *MockInspector2API) SendCisSessionHealth(arg0 *inspector2.SendCisSessionHealthInput) (*inspector2.SendCisSessionHealthOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCisSessionHealth", arg0)
	ret0, _ := ret[0].(*inspector2.SendCisSessionHealthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCisSessionHealth indicates an expected call of SendCisSessionHealth
func (mr *MockInspector2APIMockRecorder) SendCisSessionHealth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCisSessionHealth", reflect.TypeOf((*MockInspector2API)(nil).SendCisSessionHealth), arg0)
}

// SendCisSessionHealthRequest mocks base method
func (m *MockInspector2API) SendCisSessionHealthRequest(arg0 *inspector2.SendCisSessionHealthInput) (*request.Request, *inspector2.SendCisSessionHealthOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCisSessionHealthRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.SendCisSessionHealthOutput)
	return ret0, ret1
}

// SendCisSessionHealthRequest indicates an expected call of SendCisSessionHealthRequest
func (mr *MockInspector2APIMockRecorder) SendCisSessionHealthRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCisSessionHealthRequest", reflect.TypeOf((*MockInspector2API)(nil).SendCisSessionHealthRequest), arg0)
}

// SendCisSessionHealthWithContext mocks base method
func (m *MockInspector2API) SendCisSessionHealthWithContext(arg0 context.Context, arg1 *inspector2.SendCisSessionHealthInput, arg2 ...request.Option) (*inspector2.SendCisSessionHealthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendCisSessionHealthWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.SendCisSessionHealthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCisSessionHealthWithContext indicates an expected call of SendCisSessionHealthWithContext
func (mr *MockInspector2APIMockRecorder) SendCisSessionHealthWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCisSessionHealthWithContext", reflect.TypeOf((*MockInspector2API)(nil).SendCisSessionHealthWithContext), varargs...)
}

// SendCisSessionTelemetry mocks base method
func (m *MockInspector2API) SendCisSessionTelemetry(arg0 *inspector2.SendCisSessionTelemetryInput) (*inspector2.SendCisSessionTelemetryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCisSessionTelemetry", arg0)
	ret0, _ := ret[0].(*inspector2.SendCisSessionTelemetryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCisSessionTelemetry indicates an expected call of SendCisSessionTelemetry
func (mr *MockInspector2APIMockRecorder) SendCisSessionTelemetry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCisSessionTelemetry", reflect.TypeOf((*MockInspector2API)(nil).SendCisSessionTelemetry), arg0)
}

// SendCisSessionTelemetryRequest mocks base method
func (m *MockInspector2API) SendCisSessionTelemetryRequest(arg0 *inspector2.SendCisSessionTelemetryInput) (*request.Request, *inspector2.SendCisSessionTelemetryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCisSessionTelemetryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.SendCisSessionTelemetryOutput)
	return ret0, ret1
}

// SendCisSessionTelemetryRequest indicates an expected call of SendCisSessionTelemetryRequest
func (mr *MockInspector2APIMockRecorder) SendCisSessionTelemetryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCisSessionTelemetryRequest", reflect.TypeOf((*MockInspector2API)(nil).SendCisSessionTelemetryRequest), arg0)
}

// SendCisSessionTelemetryWithContext mocks base method
func (m *MockInspector2API) SendCisSessionTelemetryWithContext(arg0 context.Context, arg1 *inspector2.SendCisSessionTelemetryInput, arg2 ...request.Option) (*inspector2.SendCisSessionTelemetryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendCisSessionTelemetryWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.SendCisSessionTelemetryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCisSessionTelemetryWithContext indicates an expected call of SendCisSessionTelemetryWithContext
func (mr *MockInspector2APIMockRecorder) SendCisSessionTelemetryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCisSessionTelemetryWithContext", reflect.TypeOf((*MockInspector2API)(nil).SendCisSessionTelemetryWithContext), varargs...)
}

// StartCisSession mocks base method
func (m *MockInspector2API) StartCisSession(arg0 *inspector2.StartCisSessionInput) (*inspector2.StartCisSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCisSession", arg0)
	ret0, _ := ret[0].(*inspector2.StartCisSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCisSession indicates an expected call of StartCisSession
func (mr *MockInspector2APIMockRecorder) StartCisSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCisSession", reflect.TypeOf((*MockInspector2API)(nil).StartCisSession), arg0)
}

// StartCisSessionRequest mocks base method
func (m *MockInspector2API) StartCisSessionRequest(arg0 *inspector2.StartCisSessionInput) (*request.Request, *inspector2.StartCisSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCisSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.StartCisSessionOutput)
	return ret0, ret1
}

// StartCisSessionRequest indicates an expected call of StartCisSessionRequest
func (mr *MockInspector2APIMockRecorder) StartCisSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCisSessionRequest", reflect.TypeOf((*MockInspector2API)(nil).StartCisSessionRequest), arg0)
}

// StartCisSessionWithContext mocks base method
func (m *MockInspector2API) StartCisSessionWithContext(arg0 context.Context, arg1 *inspector2.StartCisSessionInput, arg2 ...request.Option) (*inspector2.StartCisSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCisSessionWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.StartCisSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCisSessionWithContext indicates an expected call of StartCisSessionWithContext
func (mr *MockInspector2APIMockRecorder) StartCisSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCisSessionWithContext", reflect.TypeOf((*MockInspector2API)(nil).StartCisSessionWithContext), varargs...)
}

// StopCisSession mocks base method
func (m *MockInspector2API) StopCisSession(arg0 *inspector2.StopCisSessionInput) (*inspector2.StopCisSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCisSession", arg0)
	ret0, _ := ret[0].(*inspector2.StopCisSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCisSession indicates an expected call of StopCisSession
func (mr *MockInspector2APIMockRecorder) StopCisSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCisSession", reflect.TypeOf((*MockInspector2API)(nil).StopCisSession), arg0)
}

// StopCisSessionRequest mocks base method
func (m *MockInspector2API) StopCisSessionRequest(arg0 *inspector2.StopCisSessionInput) (*request.Request, *inspector2.StopCisSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCisSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.StopCisSessionOutput)
	return ret0, ret1
}

// StopCisSessionRequest indicates an expected call of StopCisSessionRequest
func (mr *MockInspector2APIMockRecorder) StopCisSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCisSessionRequest", reflect.TypeOf((*MockInspector2API)(nil).StopCisSessionRequest), arg0)
}

// StopCisSessionWithContext mocks base method
func (m *MockInspector2API) StopCisSessionWithContext(arg0 context.Context, arg1 *inspector2.StopCisSessionInput, arg2 ...request.Option) (*inspector2.StopCisSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopCisSessionWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.StopCisSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCisSessionWithContext indicates an expected call of StopCisSessionWithContext
func (mr *MockInspector2APIMockRecorder) StopCisSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCisSessionWithContext", reflect.TypeOf((*MockInspector2API)(nil).StopCisSessionWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockInspector2API) TagResource(arg0 *inspector2.TagResourceInput) (*inspector2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*inspector2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockInspector2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockInspector2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockInspector2API) TagResourceRequest(arg0 *inspector2.TagResourceInput) (*request.Request, *inspector2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockInspector2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockInspector2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockInspector2API) TagResourceWithContext(arg0 context.Context, arg1 *inspector2.TagResourceInput, arg2 ...request.Option) (*inspector2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockInspector2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockInspector2API)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockInspector2API) UntagResource(arg0 *inspector2.UntagResourceInput) (*inspector2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*inspector2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockInspector2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockInspector2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockInspector2API) UntagResourceRequest(arg0 *inspector2.UntagResourceInput) (*request.Request, *inspector2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockInspector2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockInspector2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockInspector2API) UntagResourceWithContext(arg0 context.Context, arg1 *inspector2.UntagResourceInput, arg2 ...request.Option) (*inspector2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockInspector2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockInspector2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCisScanConfiguration mocks base method
func (m *MockInspector2API) UpdateCisScanConfiguration(arg0 *inspector2.UpdateCisScanConfigurationInput) (*inspector2.UpdateCisScanConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCisScanConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.UpdateCisScanConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCisScanConfiguration indicates an expected call of UpdateCisScanConfiguration
func (mr *MockInspector2APIMockRecorder) UpdateCisScanConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCisScanConfiguration", reflect.TypeOf((*MockInspector2API)(nil).UpdateCisScanConfiguration), arg0)
}

// UpdateCisScanConfigurationRequest mocks base method
func (m *MockInspector2API) UpdateCisScanConfigurationRequest(arg0 *inspector2.UpdateCisScanConfigurationInput) (*request.Request, *inspector2.UpdateCisScanConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCisScanConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UpdateCisScanConfigurationOutput)
	return ret0, ret1
}

// UpdateCisScanConfigurationRequest indicates an expected call of UpdateCisScanConfigurationRequest
func (mr *MockInspector2APIMockRecorder) UpdateCisScanConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCisScanConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).UpdateCisScanConfigurationRequest), arg0)
}

// UpdateCisScanConfigurationWithContext mocks base method
func (m *MockInspector2API) UpdateCisScanConfigurationWithContext(arg0 context.Context, arg1 *inspector2.UpdateCisScanConfigurationInput, arg2 ...request.Option) (*inspector2.UpdateCisScanConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCisScanConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UpdateCisScanConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCisScanConfigurationWithContext indicates an expected call of UpdateCisScanConfigurationWithContext
func (mr *MockInspector2APIMockRecorder) UpdateCisScanConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCisScanConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).UpdateCisScanConfigurationWithContext), varargs...)
}

// UpdateConfiguration mocks base method
func (m *MockInspector2API) UpdateConfiguration(arg0 *inspector2.UpdateConfigurationInput) (*inspector2.UpdateConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.UpdateConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration
func (mr *MockInspector2APIMockRecorder) UpdateConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockInspector2API)(nil).UpdateConfiguration), arg0)
}

// UpdateConfigurationRequest mocks base method
func (m *MockInspector2API) UpdateConfigurationRequest(arg0 *inspector2.UpdateConfigurationInput) (*request.Request, *inspector2.UpdateConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UpdateConfigurationOutput)
	return ret0, ret1
}

// UpdateConfigurationRequest indicates an expected call of UpdateConfigurationRequest
func (mr *MockInspector2APIMockRecorder) UpdateConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).UpdateConfigurationRequest), arg0)
}

// UpdateConfigurationWithContext mocks base method
func (m *MockInspector2API) UpdateConfigurationWithContext(arg0 context.Context, arg1 *inspector2.UpdateConfigurationInput, arg2 ...request.Option) (*inspector2.UpdateConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UpdateConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigurationWithContext indicates an expected call of UpdateConfigurationWithContext
func (mr *MockInspector2APIMockRecorder) UpdateConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).UpdateConfigurationWithContext), varargs...)
}

// UpdateEc2DeepInspectionConfiguration mocks base method
func (m *MockInspector2API) UpdateEc2DeepInspectionConfiguration(arg0 *inspector2.UpdateEc2DeepInspectionConfigurationInput) (*inspector2.UpdateEc2DeepInspectionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEc2DeepInspectionConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.UpdateEc2DeepInspectionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEc2DeepInspectionConfiguration indicates an expected call of UpdateEc2DeepInspectionConfiguration
func (mr *MockInspector2APIMockRecorder) UpdateEc2DeepInspectionConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEc2DeepInspectionConfiguration", reflect.TypeOf((*MockInspector2API)(nil).UpdateEc2DeepInspectionConfiguration), arg0)
}

// UpdateEc2DeepInspectionConfigurationRequest mocks base method
func (m *MockInspector2API) UpdateEc2DeepInspectionConfigurationRequest(arg0 *inspector2.UpdateEc2DeepInspectionConfigurationInput) (*request.Request, *inspector2.UpdateEc2DeepInspectionConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEc2DeepInspectionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UpdateEc2DeepInspectionConfigurationOutput)
	return ret0, ret1
}

// UpdateEc2DeepInspectionConfigurationRequest indicates an expected call of UpdateEc2DeepInspectionConfigurationRequest
func (mr *MockInspector2APIMockRecorder) UpdateEc2DeepInspectionConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEc2DeepInspectionConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).UpdateEc2DeepInspectionConfigurationRequest), arg0)
}

// UpdateEc2DeepInspectionConfigurationWithContext mocks base method
func (m *MockInspector2API) UpdateEc2DeepInspectionConfigurationWithContext(arg0 context.Context, arg1 *inspector2.UpdateEc2DeepInspectionConfigurationInput, arg2 ...request.Option) (*inspector2.UpdateEc2DeepInspectionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEc2DeepInspectionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UpdateEc2DeepInspectionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEc2DeepInspectionConfigurationWithContext indicates an expected call of UpdateEc2DeepInspectionConfigurationWithContext
func (mr *MockInspector2APIMockRecorder) UpdateEc2DeepInspectionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEc2DeepInspectionConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).UpdateEc2DeepInspectionConfigurationWithContext), varargs...)
}

// UpdateEncryptionKey mocks base method
func (m *MockInspector2API) UpdateEncryptionKey(arg0 *inspector2.UpdateEncryptionKeyInput) (*inspector2.UpdateEncryptionKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEncryptionKey", arg0)
	ret0, _ := ret[0].(*inspector2.UpdateEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEncryptionKey indicates an expected call of UpdateEncryptionKey
func (mr *MockInspector2APIMockRecorder) UpdateEncryptionKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEncryptionKey", reflect.TypeOf((*MockInspector2API)(nil).UpdateEncryptionKey), arg0)
}

// UpdateEncryptionKeyRequest mocks base method
func (m *MockInspector2API) UpdateEncryptionKeyRequest(arg0 *inspector2.UpdateEncryptionKeyInput) (*request.Request, *inspector2.UpdateEncryptionKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEncryptionKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UpdateEncryptionKeyOutput)
	return ret0, ret1
}

// UpdateEncryptionKeyRequest indicates an expected call of UpdateEncryptionKeyRequest
func (mr *MockInspector2APIMockRecorder) UpdateEncryptionKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEncryptionKeyRequest", reflect.TypeOf((*MockInspector2API)(nil).UpdateEncryptionKeyRequest), arg0)
}

// UpdateEncryptionKeyWithContext mocks base method
func (m *MockInspector2API) UpdateEncryptionKeyWithContext(arg0 context.Context, arg1 *inspector2.UpdateEncryptionKeyInput, arg2 ...request.Option) (*inspector2.UpdateEncryptionKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEncryptionKeyWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UpdateEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEncryptionKeyWithContext indicates an expected call of UpdateEncryptionKeyWithContext
func (mr *MockInspector2APIMockRecorder) UpdateEncryptionKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEncryptionKeyWithContext", reflect.TypeOf((*MockInspector2API)(nil).UpdateEncryptionKeyWithContext), varargs...)
}

// UpdateFilter mocks base method
func (m *MockInspector2API) UpdateFilter(arg0 *inspector2.UpdateFilterInput) (*inspector2.UpdateFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilter", arg0)
	ret0, _ := ret[0].(*inspector2.UpdateFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilter indicates an expected call of UpdateFilter
func (mr *MockInspector2APIMockRecorder) UpdateFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilter", reflect.TypeOf((*MockInspector2API)(nil).UpdateFilter), arg0)
}

// UpdateFilterRequest mocks base method
func (m *MockInspector2API) UpdateFilterRequest(arg0 *inspector2.UpdateFilterInput) (*request.Request, *inspector2.UpdateFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UpdateFilterOutput)
	return ret0, ret1
}

// UpdateFilterRequest indicates an expected call of UpdateFilterRequest
func (mr *MockInspector2APIMockRecorder) UpdateFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilterRequest", reflect.TypeOf((*MockInspector2API)(nil).UpdateFilterRequest), arg0)
}

// UpdateFilterWithContext mocks base method
func (m *MockInspector2API) UpdateFilterWithContext(arg0 context.Context, arg1 *inspector2.UpdateFilterInput, arg2 ...request.Option) (*inspector2.UpdateFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFilterWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UpdateFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilterWithContext indicates an expected call of UpdateFilterWithContext
func (mr *MockInspector2APIMockRecorder) UpdateFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilterWithContext", reflect.TypeOf((*MockInspector2API)(nil).UpdateFilterWithContext), varargs...)
}

// UpdateOrgEc2DeepInspectionConfiguration mocks base method
func (m *MockInspector2API) UpdateOrgEc2DeepInspectionConfiguration(arg0 *inspector2.UpdateOrgEc2DeepInspectionConfigurationInput) (*inspector2.UpdateOrgEc2DeepInspectionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrgEc2DeepInspectionConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.UpdateOrgEc2DeepInspectionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrgEc2DeepInspectionConfiguration indicates an expected call of UpdateOrgEc2DeepInspectionConfiguration
func (mr *MockInspector2APIMockRecorder) UpdateOrgEc2DeepInspectionConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrgEc2DeepInspectionConfiguration", reflect.TypeOf((*MockInspector2API)(nil).UpdateOrgEc2DeepInspectionConfiguration), arg0)
}

// UpdateOrgEc2DeepInspectionConfigurationRequest mocks base method
func (m *MockInspector2API) UpdateOrgEc2DeepInspectionConfigurationRequest(arg0 *inspector2.UpdateOrgEc2DeepInspectionConfigurationInput) (*request.Request, *inspector2.UpdateOrgEc2DeepInspectionConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrgEc2DeepInspectionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UpdateOrgEc2DeepInspectionConfigurationOutput)
	return ret0, ret1
}

// UpdateOrgEc2DeepInspectionConfigurationRequest indicates an expected call of UpdateOrgEc2DeepInspectionConfigurationRequest
func (mr *MockInspector2APIMockRecorder) UpdateOrgEc2DeepInspectionConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrgEc2DeepInspectionConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).UpdateOrgEc2DeepInspectionConfigurationRequest), arg0)
}

// UpdateOrgEc2DeepInspectionConfigurationWithContext mocks base method
func (m *MockInspector2API) UpdateOrgEc2DeepInspectionConfigurationWithContext(arg0 context.Context, arg1 *inspector2.UpdateOrgEc2DeepInspectionConfigurationInput, arg2 ...request.Option) (*inspector2.UpdateOrgEc2DeepInspectionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrgEc2DeepInspectionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UpdateOrgEc2DeepInspectionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrgEc2DeepInspectionConfigurationWithContext indicates an expected call of UpdateOrgEc2DeepInspectionConfigurationWithContext
func (mr *MockInspector2APIMockRecorder) UpdateOrgEc2DeepInspectionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrgEc2DeepInspectionConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).UpdateOrgEc2DeepInspectionConfigurationWithContext), varargs...)
}

// UpdateOrganizationConfiguration mocks base method
func (m *MockInspector2API) UpdateOrganizationConfiguration(arg0 *inspector2.UpdateOrganizationConfigurationInput) (*inspector2.UpdateOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.UpdateOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationConfiguration indicates an expected call of UpdateOrganizationConfiguration
func (mr *MockInspector2APIMockRecorder) UpdateOrganizationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfiguration", reflect.TypeOf((*MockInspector2API)(nil).UpdateOrganizationConfiguration), arg0)
}

// UpdateOrganizationConfigurationRequest mocks base method
func (m *MockInspector2API) UpdateOrganizationConfigurationRequest(arg0 *inspector2.UpdateOrganizationConfigurationInput) (*request.Request, *inspector2.UpdateOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UpdateOrganizationConfigurationOutput)
	return ret0, ret1
}

// UpdateOrganizationConfigurationRequest indicates an expected call of UpdateOrganizationConfigurationRequest
func (mr *MockInspector2APIMockRecorder) UpdateOrganizationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).UpdateOrganizationConfigurationRequest), arg0)
}

// UpdateOrganizationConfigurationWithContext mocks base method
func (m *MockInspector2API) UpdateOrganizationConfigurationWithContext(arg0 context.Context, arg1 *inspector2.UpdateOrganizationConfigurationInput, arg2 ...request.Option) (*inspector2.UpdateOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UpdateOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationConfigurationWithContext indicates an expected call of UpdateOrganizationConfigurationWithContext
func (mr *MockInspector2APIMockRecorder) UpdateOrganizationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).UpdateOrganizationConfigurationWithContext), varargs...)
}
