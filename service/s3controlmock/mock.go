// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/s3control/s3controliface (interfaces: S3ControlAPI)

// Package s3controlmock is a generated GoMock package.
package s3controlmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	s3control "github.com/aws/aws-sdk-go/service/s3control"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockS3ControlAPI is a mock of S3ControlAPI interface
type MockS3ControlAPI struct {
	ctrl     *gomock.Controller
	recorder *MockS3ControlAPIMockRecorder
}

// MockS3ControlAPIMockRecorder is the mock recorder for MockS3ControlAPI
type MockS3ControlAPIMockRecorder struct {
	mock *MockS3ControlAPI
}

// NewMockS3ControlAPI creates a new mock instance
func NewMockS3ControlAPI(ctrl *gomock.Controller) *MockS3ControlAPI {
	mock := &MockS3ControlAPI{ctrl: ctrl}
	mock.recorder = &MockS3ControlAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockS3ControlAPI) EXPECT() *MockS3ControlAPIMockRecorder {
	return m.recorder
}

// AssociateAccessGrantsIdentityCenter mocks base method
func (m *MockS3ControlAPI) AssociateAccessGrantsIdentityCenter(arg0 *s3control.AssociateAccessGrantsIdentityCenterInput) (*s3control.AssociateAccessGrantsIdentityCenterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAccessGrantsIdentityCenter", arg0)
	ret0, _ := ret[0].(*s3control.AssociateAccessGrantsIdentityCenterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAccessGrantsIdentityCenter indicates an expected call of AssociateAccessGrantsIdentityCenter
func (mr *MockS3ControlAPIMockRecorder) AssociateAccessGrantsIdentityCenter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAccessGrantsIdentityCenter", reflect.TypeOf((*MockS3ControlAPI)(nil).AssociateAccessGrantsIdentityCenter), arg0)
}

// AssociateAccessGrantsIdentityCenterRequest mocks base method
func (m *MockS3ControlAPI) AssociateAccessGrantsIdentityCenterRequest(arg0 *s3control.AssociateAccessGrantsIdentityCenterInput) (*request.Request, *s3control.AssociateAccessGrantsIdentityCenterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAccessGrantsIdentityCenterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.AssociateAccessGrantsIdentityCenterOutput)
	return ret0, ret1
}

// AssociateAccessGrantsIdentityCenterRequest indicates an expected call of AssociateAccessGrantsIdentityCenterRequest
func (mr *MockS3ControlAPIMockRecorder) AssociateAccessGrantsIdentityCenterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAccessGrantsIdentityCenterRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).AssociateAccessGrantsIdentityCenterRequest), arg0)
}

// AssociateAccessGrantsIdentityCenterWithContext mocks base method
func (m *MockS3ControlAPI) AssociateAccessGrantsIdentityCenterWithContext(arg0 context.Context, arg1 *s3control.AssociateAccessGrantsIdentityCenterInput, arg2 ...request.Option) (*s3control.AssociateAccessGrantsIdentityCenterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateAccessGrantsIdentityCenterWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.AssociateAccessGrantsIdentityCenterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAccessGrantsIdentityCenterWithContext indicates an expected call of AssociateAccessGrantsIdentityCenterWithContext
func (mr *MockS3ControlAPIMockRecorder) AssociateAccessGrantsIdentityCenterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAccessGrantsIdentityCenterWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).AssociateAccessGrantsIdentityCenterWithContext), varargs...)
}

// CreateAccessGrant mocks base method
func (m *MockS3ControlAPI) CreateAccessGrant(arg0 *s3control.CreateAccessGrantInput) (*s3control.CreateAccessGrantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessGrant", arg0)
	ret0, _ := ret[0].(*s3control.CreateAccessGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessGrant indicates an expected call of CreateAccessGrant
func (mr *MockS3ControlAPIMockRecorder) CreateAccessGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrant", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessGrant), arg0)
}

// CreateAccessGrantRequest mocks base method
func (m *MockS3ControlAPI) CreateAccessGrantRequest(arg0 *s3control.CreateAccessGrantInput) (*request.Request, *s3control.CreateAccessGrantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessGrantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.CreateAccessGrantOutput)
	return ret0, ret1
}

// CreateAccessGrantRequest indicates an expected call of CreateAccessGrantRequest
func (mr *MockS3ControlAPIMockRecorder) CreateAccessGrantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrantRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessGrantRequest), arg0)
}

// CreateAccessGrantWithContext mocks base method
func (m *MockS3ControlAPI) CreateAccessGrantWithContext(arg0 context.Context, arg1 *s3control.CreateAccessGrantInput, arg2 ...request.Option) (*s3control.CreateAccessGrantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessGrantWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.CreateAccessGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessGrantWithContext indicates an expected call of CreateAccessGrantWithContext
func (mr *MockS3ControlAPIMockRecorder) CreateAccessGrantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrantWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessGrantWithContext), varargs...)
}

// CreateAccessGrantsInstance mocks base method
func (m *MockS3ControlAPI) CreateAccessGrantsInstance(arg0 *s3control.CreateAccessGrantsInstanceInput) (*s3control.CreateAccessGrantsInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessGrantsInstance", arg0)
	ret0, _ := ret[0].(*s3control.CreateAccessGrantsInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessGrantsInstance indicates an expected call of CreateAccessGrantsInstance
func (mr *MockS3ControlAPIMockRecorder) CreateAccessGrantsInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrantsInstance", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessGrantsInstance), arg0)
}

// CreateAccessGrantsInstanceRequest mocks base method
func (m *MockS3ControlAPI) CreateAccessGrantsInstanceRequest(arg0 *s3control.CreateAccessGrantsInstanceInput) (*request.Request, *s3control.CreateAccessGrantsInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessGrantsInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.CreateAccessGrantsInstanceOutput)
	return ret0, ret1
}

// CreateAccessGrantsInstanceRequest indicates an expected call of CreateAccessGrantsInstanceRequest
func (mr *MockS3ControlAPIMockRecorder) CreateAccessGrantsInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrantsInstanceRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessGrantsInstanceRequest), arg0)
}

// CreateAccessGrantsInstanceWithContext mocks base method
func (m *MockS3ControlAPI) CreateAccessGrantsInstanceWithContext(arg0 context.Context, arg1 *s3control.CreateAccessGrantsInstanceInput, arg2 ...request.Option) (*s3control.CreateAccessGrantsInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessGrantsInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.CreateAccessGrantsInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessGrantsInstanceWithContext indicates an expected call of CreateAccessGrantsInstanceWithContext
func (mr *MockS3ControlAPIMockRecorder) CreateAccessGrantsInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrantsInstanceWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessGrantsInstanceWithContext), varargs...)
}

// CreateAccessGrantsLocation mocks base method
func (m *MockS3ControlAPI) CreateAccessGrantsLocation(arg0 *s3control.CreateAccessGrantsLocationInput) (*s3control.CreateAccessGrantsLocationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessGrantsLocation", arg0)
	ret0, _ := ret[0].(*s3control.CreateAccessGrantsLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessGrantsLocation indicates an expected call of CreateAccessGrantsLocation
func (mr *MockS3ControlAPIMockRecorder) CreateAccessGrantsLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrantsLocation", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessGrantsLocation), arg0)
}

// CreateAccessGrantsLocationRequest mocks base method
func (m *MockS3ControlAPI) CreateAccessGrantsLocationRequest(arg0 *s3control.CreateAccessGrantsLocationInput) (*request.Request, *s3control.CreateAccessGrantsLocationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessGrantsLocationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.CreateAccessGrantsLocationOutput)
	return ret0, ret1
}

// CreateAccessGrantsLocationRequest indicates an expected call of CreateAccessGrantsLocationRequest
func (mr *MockS3ControlAPIMockRecorder) CreateAccessGrantsLocationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrantsLocationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessGrantsLocationRequest), arg0)
}

// CreateAccessGrantsLocationWithContext mocks base method
func (m *MockS3ControlAPI) CreateAccessGrantsLocationWithContext(arg0 context.Context, arg1 *s3control.CreateAccessGrantsLocationInput, arg2 ...request.Option) (*s3control.CreateAccessGrantsLocationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessGrantsLocationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.CreateAccessGrantsLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessGrantsLocationWithContext indicates an expected call of CreateAccessGrantsLocationWithContext
func (mr *MockS3ControlAPIMockRecorder) CreateAccessGrantsLocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrantsLocationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessGrantsLocationWithContext), varargs...)
}

// CreateAccessPoint mocks base method
func (m *MockS3ControlAPI) CreateAccessPoint(arg0 *s3control.CreateAccessPointInput) (*s3control.CreateAccessPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPoint", arg0)
	ret0, _ := ret[0].(*s3control.CreateAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPoint indicates an expected call of CreateAccessPoint
func (mr *MockS3ControlAPIMockRecorder) CreateAccessPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPoint", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessPoint), arg0)
}

// CreateAccessPointForObjectLambda mocks base method
func (m *MockS3ControlAPI) CreateAccessPointForObjectLambda(arg0 *s3control.CreateAccessPointForObjectLambdaInput) (*s3control.CreateAccessPointForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPointForObjectLambda", arg0)
	ret0, _ := ret[0].(*s3control.CreateAccessPointForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPointForObjectLambda indicates an expected call of CreateAccessPointForObjectLambda
func (mr *MockS3ControlAPIMockRecorder) CreateAccessPointForObjectLambda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPointForObjectLambda", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessPointForObjectLambda), arg0)
}

// CreateAccessPointForObjectLambdaRequest mocks base method
func (m *MockS3ControlAPI) CreateAccessPointForObjectLambdaRequest(arg0 *s3control.CreateAccessPointForObjectLambdaInput) (*request.Request, *s3control.CreateAccessPointForObjectLambdaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPointForObjectLambdaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.CreateAccessPointForObjectLambdaOutput)
	return ret0, ret1
}

// CreateAccessPointForObjectLambdaRequest indicates an expected call of CreateAccessPointForObjectLambdaRequest
func (mr *MockS3ControlAPIMockRecorder) CreateAccessPointForObjectLambdaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPointForObjectLambdaRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessPointForObjectLambdaRequest), arg0)
}

// CreateAccessPointForObjectLambdaWithContext mocks base method
func (m *MockS3ControlAPI) CreateAccessPointForObjectLambdaWithContext(arg0 context.Context, arg1 *s3control.CreateAccessPointForObjectLambdaInput, arg2 ...request.Option) (*s3control.CreateAccessPointForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessPointForObjectLambdaWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.CreateAccessPointForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPointForObjectLambdaWithContext indicates an expected call of CreateAccessPointForObjectLambdaWithContext
func (mr *MockS3ControlAPIMockRecorder) CreateAccessPointForObjectLambdaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPointForObjectLambdaWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessPointForObjectLambdaWithContext), varargs...)
}

// CreateAccessPointRequest mocks base method
func (m *MockS3ControlAPI) CreateAccessPointRequest(arg0 *s3control.CreateAccessPointInput) (*request.Request, *s3control.CreateAccessPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.CreateAccessPointOutput)
	return ret0, ret1
}

// CreateAccessPointRequest indicates an expected call of CreateAccessPointRequest
func (mr *MockS3ControlAPIMockRecorder) CreateAccessPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPointRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessPointRequest), arg0)
}

// CreateAccessPointWithContext mocks base method
func (m *MockS3ControlAPI) CreateAccessPointWithContext(arg0 context.Context, arg1 *s3control.CreateAccessPointInput, arg2 ...request.Option) (*s3control.CreateAccessPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessPointWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.CreateAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPointWithContext indicates an expected call of CreateAccessPointWithContext
func (mr *MockS3ControlAPIMockRecorder) CreateAccessPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPointWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateAccessPointWithContext), varargs...)
}

// CreateBucket mocks base method
func (m *MockS3ControlAPI) CreateBucket(arg0 *s3control.CreateBucketInput) (*s3control.CreateBucketOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", arg0)
	ret0, _ := ret[0].(*s3control.CreateBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucket indicates an expected call of CreateBucket
func (mr *MockS3ControlAPIMockRecorder) CreateBucket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateBucket), arg0)
}

// CreateBucketRequest mocks base method
func (m *MockS3ControlAPI) CreateBucketRequest(arg0 *s3control.CreateBucketInput) (*request.Request, *s3control.CreateBucketOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucketRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.CreateBucketOutput)
	return ret0, ret1
}

// CreateBucketRequest indicates an expected call of CreateBucketRequest
func (mr *MockS3ControlAPIMockRecorder) CreateBucketRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateBucketRequest), arg0)
}

// CreateBucketWithContext mocks base method
func (m *MockS3ControlAPI) CreateBucketWithContext(arg0 context.Context, arg1 *s3control.CreateBucketInput, arg2 ...request.Option) (*s3control.CreateBucketOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBucketWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.CreateBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketWithContext indicates an expected call of CreateBucketWithContext
func (mr *MockS3ControlAPIMockRecorder) CreateBucketWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateBucketWithContext), varargs...)
}

// CreateJob mocks base method
func (m *MockS3ControlAPI) CreateJob(arg0 *s3control.CreateJobInput) (*s3control.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0)
	ret0, _ := ret[0].(*s3control.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob
func (mr *MockS3ControlAPIMockRecorder) CreateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateJob), arg0)
}

// CreateJobRequest mocks base method
func (m *MockS3ControlAPI) CreateJobRequest(arg0 *s3control.CreateJobInput) (*request.Request, *s3control.CreateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.CreateJobOutput)
	return ret0, ret1
}

// CreateJobRequest indicates an expected call of CreateJobRequest
func (mr *MockS3ControlAPIMockRecorder) CreateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateJobRequest), arg0)
}

// CreateJobWithContext mocks base method
func (m *MockS3ControlAPI) CreateJobWithContext(arg0 context.Context, arg1 *s3control.CreateJobInput, arg2 ...request.Option) (*s3control.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithContext indicates an expected call of CreateJobWithContext
func (mr *MockS3ControlAPIMockRecorder) CreateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateJobWithContext), varargs...)
}

// CreateMultiRegionAccessPoint mocks base method
func (m *MockS3ControlAPI) CreateMultiRegionAccessPoint(arg0 *s3control.CreateMultiRegionAccessPointInput) (*s3control.CreateMultiRegionAccessPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiRegionAccessPoint", arg0)
	ret0, _ := ret[0].(*s3control.CreateMultiRegionAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultiRegionAccessPoint indicates an expected call of CreateMultiRegionAccessPoint
func (mr *MockS3ControlAPIMockRecorder) CreateMultiRegionAccessPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiRegionAccessPoint", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateMultiRegionAccessPoint), arg0)
}

// CreateMultiRegionAccessPointRequest mocks base method
func (m *MockS3ControlAPI) CreateMultiRegionAccessPointRequest(arg0 *s3control.CreateMultiRegionAccessPointInput) (*request.Request, *s3control.CreateMultiRegionAccessPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiRegionAccessPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.CreateMultiRegionAccessPointOutput)
	return ret0, ret1
}

// CreateMultiRegionAccessPointRequest indicates an expected call of CreateMultiRegionAccessPointRequest
func (mr *MockS3ControlAPIMockRecorder) CreateMultiRegionAccessPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiRegionAccessPointRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateMultiRegionAccessPointRequest), arg0)
}

// CreateMultiRegionAccessPointWithContext mocks base method
func (m *MockS3ControlAPI) CreateMultiRegionAccessPointWithContext(arg0 context.Context, arg1 *s3control.CreateMultiRegionAccessPointInput, arg2 ...request.Option) (*s3control.CreateMultiRegionAccessPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMultiRegionAccessPointWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.CreateMultiRegionAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultiRegionAccessPointWithContext indicates an expected call of CreateMultiRegionAccessPointWithContext
func (mr *MockS3ControlAPIMockRecorder) CreateMultiRegionAccessPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiRegionAccessPointWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateMultiRegionAccessPointWithContext), varargs...)
}

// CreateStorageLensGroup mocks base method
func (m *MockS3ControlAPI) CreateStorageLensGroup(arg0 *s3control.CreateStorageLensGroupInput) (*s3control.CreateStorageLensGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorageLensGroup", arg0)
	ret0, _ := ret[0].(*s3control.CreateStorageLensGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorageLensGroup indicates an expected call of CreateStorageLensGroup
func (mr *MockS3ControlAPIMockRecorder) CreateStorageLensGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageLensGroup", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateStorageLensGroup), arg0)
}

// CreateStorageLensGroupRequest mocks base method
func (m *MockS3ControlAPI) CreateStorageLensGroupRequest(arg0 *s3control.CreateStorageLensGroupInput) (*request.Request, *s3control.CreateStorageLensGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorageLensGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.CreateStorageLensGroupOutput)
	return ret0, ret1
}

// CreateStorageLensGroupRequest indicates an expected call of CreateStorageLensGroupRequest
func (mr *MockS3ControlAPIMockRecorder) CreateStorageLensGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageLensGroupRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateStorageLensGroupRequest), arg0)
}

// CreateStorageLensGroupWithContext mocks base method
func (m *MockS3ControlAPI) CreateStorageLensGroupWithContext(arg0 context.Context, arg1 *s3control.CreateStorageLensGroupInput, arg2 ...request.Option) (*s3control.CreateStorageLensGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStorageLensGroupWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.CreateStorageLensGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorageLensGroupWithContext indicates an expected call of CreateStorageLensGroupWithContext
func (mr *MockS3ControlAPIMockRecorder) CreateStorageLensGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageLensGroupWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).CreateStorageLensGroupWithContext), varargs...)
}

// DeleteAccessGrant mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrant(arg0 *s3control.DeleteAccessGrantInput) (*s3control.DeleteAccessGrantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrant", arg0)
	ret0, _ := ret[0].(*s3control.DeleteAccessGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessGrant indicates an expected call of DeleteAccessGrant
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrant", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrant), arg0)
}

// DeleteAccessGrantRequest mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantRequest(arg0 *s3control.DeleteAccessGrantInput) (*request.Request, *s3control.DeleteAccessGrantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteAccessGrantOutput)
	return ret0, ret1
}

// DeleteAccessGrantRequest indicates an expected call of DeleteAccessGrantRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantRequest), arg0)
}

// DeleteAccessGrantWithContext mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantWithContext(arg0 context.Context, arg1 *s3control.DeleteAccessGrantInput, arg2 ...request.Option) (*s3control.DeleteAccessGrantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessGrantWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteAccessGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessGrantWithContext indicates an expected call of DeleteAccessGrantWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantWithContext), varargs...)
}

// DeleteAccessGrantsInstance mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantsInstance(arg0 *s3control.DeleteAccessGrantsInstanceInput) (*s3control.DeleteAccessGrantsInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrantsInstance", arg0)
	ret0, _ := ret[0].(*s3control.DeleteAccessGrantsInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessGrantsInstance indicates an expected call of DeleteAccessGrantsInstance
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantsInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantsInstance", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantsInstance), arg0)
}

// DeleteAccessGrantsInstanceRequest mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantsInstanceRequest(arg0 *s3control.DeleteAccessGrantsInstanceInput) (*request.Request, *s3control.DeleteAccessGrantsInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrantsInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteAccessGrantsInstanceOutput)
	return ret0, ret1
}

// DeleteAccessGrantsInstanceRequest indicates an expected call of DeleteAccessGrantsInstanceRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantsInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantsInstanceRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantsInstanceRequest), arg0)
}

// DeleteAccessGrantsInstanceResourcePolicy mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantsInstanceResourcePolicy(arg0 *s3control.DeleteAccessGrantsInstanceResourcePolicyInput) (*s3control.DeleteAccessGrantsInstanceResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrantsInstanceResourcePolicy", arg0)
	ret0, _ := ret[0].(*s3control.DeleteAccessGrantsInstanceResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessGrantsInstanceResourcePolicy indicates an expected call of DeleteAccessGrantsInstanceResourcePolicy
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantsInstanceResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantsInstanceResourcePolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantsInstanceResourcePolicy), arg0)
}

// DeleteAccessGrantsInstanceResourcePolicyRequest mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantsInstanceResourcePolicyRequest(arg0 *s3control.DeleteAccessGrantsInstanceResourcePolicyInput) (*request.Request, *s3control.DeleteAccessGrantsInstanceResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrantsInstanceResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteAccessGrantsInstanceResourcePolicyOutput)
	return ret0, ret1
}

// DeleteAccessGrantsInstanceResourcePolicyRequest indicates an expected call of DeleteAccessGrantsInstanceResourcePolicyRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantsInstanceResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantsInstanceResourcePolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantsInstanceResourcePolicyRequest), arg0)
}

// DeleteAccessGrantsInstanceResourcePolicyWithContext mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantsInstanceResourcePolicyWithContext(arg0 context.Context, arg1 *s3control.DeleteAccessGrantsInstanceResourcePolicyInput, arg2 ...request.Option) (*s3control.DeleteAccessGrantsInstanceResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessGrantsInstanceResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteAccessGrantsInstanceResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessGrantsInstanceResourcePolicyWithContext indicates an expected call of DeleteAccessGrantsInstanceResourcePolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantsInstanceResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantsInstanceResourcePolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantsInstanceResourcePolicyWithContext), varargs...)
}

// DeleteAccessGrantsInstanceWithContext mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantsInstanceWithContext(arg0 context.Context, arg1 *s3control.DeleteAccessGrantsInstanceInput, arg2 ...request.Option) (*s3control.DeleteAccessGrantsInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessGrantsInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteAccessGrantsInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessGrantsInstanceWithContext indicates an expected call of DeleteAccessGrantsInstanceWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantsInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantsInstanceWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantsInstanceWithContext), varargs...)
}

// DeleteAccessGrantsLocation mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantsLocation(arg0 *s3control.DeleteAccessGrantsLocationInput) (*s3control.DeleteAccessGrantsLocationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrantsLocation", arg0)
	ret0, _ := ret[0].(*s3control.DeleteAccessGrantsLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessGrantsLocation indicates an expected call of DeleteAccessGrantsLocation
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantsLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantsLocation", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantsLocation), arg0)
}

// DeleteAccessGrantsLocationRequest mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantsLocationRequest(arg0 *s3control.DeleteAccessGrantsLocationInput) (*request.Request, *s3control.DeleteAccessGrantsLocationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrantsLocationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteAccessGrantsLocationOutput)
	return ret0, ret1
}

// DeleteAccessGrantsLocationRequest indicates an expected call of DeleteAccessGrantsLocationRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantsLocationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantsLocationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantsLocationRequest), arg0)
}

// DeleteAccessGrantsLocationWithContext mocks base method
func (m *MockS3ControlAPI) DeleteAccessGrantsLocationWithContext(arg0 context.Context, arg1 *s3control.DeleteAccessGrantsLocationInput, arg2 ...request.Option) (*s3control.DeleteAccessGrantsLocationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessGrantsLocationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteAccessGrantsLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessGrantsLocationWithContext indicates an expected call of DeleteAccessGrantsLocationWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessGrantsLocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantsLocationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessGrantsLocationWithContext), varargs...)
}

// DeleteAccessPoint mocks base method
func (m *MockS3ControlAPI) DeleteAccessPoint(arg0 *s3control.DeleteAccessPointInput) (*s3control.DeleteAccessPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPoint", arg0)
	ret0, _ := ret[0].(*s3control.DeleteAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPoint indicates an expected call of DeleteAccessPoint
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPoint", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPoint), arg0)
}

// DeleteAccessPointForObjectLambda mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointForObjectLambda(arg0 *s3control.DeleteAccessPointForObjectLambdaInput) (*s3control.DeleteAccessPointForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPointForObjectLambda", arg0)
	ret0, _ := ret[0].(*s3control.DeleteAccessPointForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPointForObjectLambda indicates an expected call of DeleteAccessPointForObjectLambda
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointForObjectLambda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointForObjectLambda", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointForObjectLambda), arg0)
}

// DeleteAccessPointForObjectLambdaRequest mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointForObjectLambdaRequest(arg0 *s3control.DeleteAccessPointForObjectLambdaInput) (*request.Request, *s3control.DeleteAccessPointForObjectLambdaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPointForObjectLambdaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteAccessPointForObjectLambdaOutput)
	return ret0, ret1
}

// DeleteAccessPointForObjectLambdaRequest indicates an expected call of DeleteAccessPointForObjectLambdaRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointForObjectLambdaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointForObjectLambdaRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointForObjectLambdaRequest), arg0)
}

// DeleteAccessPointForObjectLambdaWithContext mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointForObjectLambdaWithContext(arg0 context.Context, arg1 *s3control.DeleteAccessPointForObjectLambdaInput, arg2 ...request.Option) (*s3control.DeleteAccessPointForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPointForObjectLambdaWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteAccessPointForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPointForObjectLambdaWithContext indicates an expected call of DeleteAccessPointForObjectLambdaWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointForObjectLambdaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointForObjectLambdaWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointForObjectLambdaWithContext), varargs...)
}

// DeleteAccessPointPolicy mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointPolicy(arg0 *s3control.DeleteAccessPointPolicyInput) (*s3control.DeleteAccessPointPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPointPolicy", arg0)
	ret0, _ := ret[0].(*s3control.DeleteAccessPointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPointPolicy indicates an expected call of DeleteAccessPointPolicy
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointPolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointPolicy), arg0)
}

// DeleteAccessPointPolicyForObjectLambda mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointPolicyForObjectLambda(arg0 *s3control.DeleteAccessPointPolicyForObjectLambdaInput) (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPointPolicyForObjectLambda", arg0)
	ret0, _ := ret[0].(*s3control.DeleteAccessPointPolicyForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPointPolicyForObjectLambda indicates an expected call of DeleteAccessPointPolicyForObjectLambda
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointPolicyForObjectLambda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointPolicyForObjectLambda", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointPolicyForObjectLambda), arg0)
}

// DeleteAccessPointPolicyForObjectLambdaRequest mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointPolicyForObjectLambdaRequest(arg0 *s3control.DeleteAccessPointPolicyForObjectLambdaInput) (*request.Request, *s3control.DeleteAccessPointPolicyForObjectLambdaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPointPolicyForObjectLambdaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteAccessPointPolicyForObjectLambdaOutput)
	return ret0, ret1
}

// DeleteAccessPointPolicyForObjectLambdaRequest indicates an expected call of DeleteAccessPointPolicyForObjectLambdaRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointPolicyForObjectLambdaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointPolicyForObjectLambdaRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointPolicyForObjectLambdaRequest), arg0)
}

// DeleteAccessPointPolicyForObjectLambdaWithContext mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointPolicyForObjectLambdaWithContext(arg0 context.Context, arg1 *s3control.DeleteAccessPointPolicyForObjectLambdaInput, arg2 ...request.Option) (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPointPolicyForObjectLambdaWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteAccessPointPolicyForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPointPolicyForObjectLambdaWithContext indicates an expected call of DeleteAccessPointPolicyForObjectLambdaWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointPolicyForObjectLambdaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointPolicyForObjectLambdaWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointPolicyForObjectLambdaWithContext), varargs...)
}

// DeleteAccessPointPolicyRequest mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointPolicyRequest(arg0 *s3control.DeleteAccessPointPolicyInput) (*request.Request, *s3control.DeleteAccessPointPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPointPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteAccessPointPolicyOutput)
	return ret0, ret1
}

// DeleteAccessPointPolicyRequest indicates an expected call of DeleteAccessPointPolicyRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointPolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointPolicyRequest), arg0)
}

// DeleteAccessPointPolicyWithContext mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointPolicyWithContext(arg0 context.Context, arg1 *s3control.DeleteAccessPointPolicyInput, arg2 ...request.Option) (*s3control.DeleteAccessPointPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPointPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteAccessPointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPointPolicyWithContext indicates an expected call of DeleteAccessPointPolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointPolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointPolicyWithContext), varargs...)
}

// DeleteAccessPointRequest mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointRequest(arg0 *s3control.DeleteAccessPointInput) (*request.Request, *s3control.DeleteAccessPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteAccessPointOutput)
	return ret0, ret1
}

// DeleteAccessPointRequest indicates an expected call of DeleteAccessPointRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointRequest), arg0)
}

// DeleteAccessPointWithContext mocks base method
func (m *MockS3ControlAPI) DeleteAccessPointWithContext(arg0 context.Context, arg1 *s3control.DeleteAccessPointInput, arg2 ...request.Option) (*s3control.DeleteAccessPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPointWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPointWithContext indicates an expected call of DeleteAccessPointWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteAccessPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteAccessPointWithContext), varargs...)
}

// DeleteBucket mocks base method
func (m *MockS3ControlAPI) DeleteBucket(arg0 *s3control.DeleteBucketInput) (*s3control.DeleteBucketOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucket", arg0)
	ret0, _ := ret[0].(*s3control.DeleteBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucket indicates an expected call of DeleteBucket
func (mr *MockS3ControlAPIMockRecorder) DeleteBucket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucket), arg0)
}

// DeleteBucketLifecycleConfiguration mocks base method
func (m *MockS3ControlAPI) DeleteBucketLifecycleConfiguration(arg0 *s3control.DeleteBucketLifecycleConfigurationInput) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketLifecycleConfiguration", arg0)
	ret0, _ := ret[0].(*s3control.DeleteBucketLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketLifecycleConfiguration indicates an expected call of DeleteBucketLifecycleConfiguration
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketLifecycleConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketLifecycleConfiguration", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketLifecycleConfiguration), arg0)
}

// DeleteBucketLifecycleConfigurationRequest mocks base method
func (m *MockS3ControlAPI) DeleteBucketLifecycleConfigurationRequest(arg0 *s3control.DeleteBucketLifecycleConfigurationInput) (*request.Request, *s3control.DeleteBucketLifecycleConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketLifecycleConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteBucketLifecycleConfigurationOutput)
	return ret0, ret1
}

// DeleteBucketLifecycleConfigurationRequest indicates an expected call of DeleteBucketLifecycleConfigurationRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketLifecycleConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketLifecycleConfigurationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketLifecycleConfigurationRequest), arg0)
}

// DeleteBucketLifecycleConfigurationWithContext mocks base method
func (m *MockS3ControlAPI) DeleteBucketLifecycleConfigurationWithContext(arg0 context.Context, arg1 *s3control.DeleteBucketLifecycleConfigurationInput, arg2 ...request.Option) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketLifecycleConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteBucketLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketLifecycleConfigurationWithContext indicates an expected call of DeleteBucketLifecycleConfigurationWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketLifecycleConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketLifecycleConfigurationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketLifecycleConfigurationWithContext), varargs...)
}

// DeleteBucketPolicy mocks base method
func (m *MockS3ControlAPI) DeleteBucketPolicy(arg0 *s3control.DeleteBucketPolicyInput) (*s3control.DeleteBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketPolicy", arg0)
	ret0, _ := ret[0].(*s3control.DeleteBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketPolicy indicates an expected call of DeleteBucketPolicy
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketPolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketPolicy), arg0)
}

// DeleteBucketPolicyRequest mocks base method
func (m *MockS3ControlAPI) DeleteBucketPolicyRequest(arg0 *s3control.DeleteBucketPolicyInput) (*request.Request, *s3control.DeleteBucketPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteBucketPolicyOutput)
	return ret0, ret1
}

// DeleteBucketPolicyRequest indicates an expected call of DeleteBucketPolicyRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketPolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketPolicyRequest), arg0)
}

// DeleteBucketPolicyWithContext mocks base method
func (m *MockS3ControlAPI) DeleteBucketPolicyWithContext(arg0 context.Context, arg1 *s3control.DeleteBucketPolicyInput, arg2 ...request.Option) (*s3control.DeleteBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketPolicyWithContext indicates an expected call of DeleteBucketPolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketPolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketPolicyWithContext), varargs...)
}

// DeleteBucketReplication mocks base method
func (m *MockS3ControlAPI) DeleteBucketReplication(arg0 *s3control.DeleteBucketReplicationInput) (*s3control.DeleteBucketReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketReplication", arg0)
	ret0, _ := ret[0].(*s3control.DeleteBucketReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketReplication indicates an expected call of DeleteBucketReplication
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketReplication", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketReplication), arg0)
}

// DeleteBucketReplicationRequest mocks base method
func (m *MockS3ControlAPI) DeleteBucketReplicationRequest(arg0 *s3control.DeleteBucketReplicationInput) (*request.Request, *s3control.DeleteBucketReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteBucketReplicationOutput)
	return ret0, ret1
}

// DeleteBucketReplicationRequest indicates an expected call of DeleteBucketReplicationRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketReplicationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketReplicationRequest), arg0)
}

// DeleteBucketReplicationWithContext mocks base method
func (m *MockS3ControlAPI) DeleteBucketReplicationWithContext(arg0 context.Context, arg1 *s3control.DeleteBucketReplicationInput, arg2 ...request.Option) (*s3control.DeleteBucketReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteBucketReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketReplicationWithContext indicates an expected call of DeleteBucketReplicationWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketReplicationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketReplicationWithContext), varargs...)
}

// DeleteBucketRequest mocks base method
func (m *MockS3ControlAPI) DeleteBucketRequest(arg0 *s3control.DeleteBucketInput) (*request.Request, *s3control.DeleteBucketOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteBucketOutput)
	return ret0, ret1
}

// DeleteBucketRequest indicates an expected call of DeleteBucketRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketRequest), arg0)
}

// DeleteBucketTagging mocks base method
func (m *MockS3ControlAPI) DeleteBucketTagging(arg0 *s3control.DeleteBucketTaggingInput) (*s3control.DeleteBucketTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketTagging", arg0)
	ret0, _ := ret[0].(*s3control.DeleteBucketTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketTagging indicates an expected call of DeleteBucketTagging
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketTagging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketTagging", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketTagging), arg0)
}

// DeleteBucketTaggingRequest mocks base method
func (m *MockS3ControlAPI) DeleteBucketTaggingRequest(arg0 *s3control.DeleteBucketTaggingInput) (*request.Request, *s3control.DeleteBucketTaggingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketTaggingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteBucketTaggingOutput)
	return ret0, ret1
}

// DeleteBucketTaggingRequest indicates an expected call of DeleteBucketTaggingRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketTaggingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketTaggingRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketTaggingRequest), arg0)
}

// DeleteBucketTaggingWithContext mocks base method
func (m *MockS3ControlAPI) DeleteBucketTaggingWithContext(arg0 context.Context, arg1 *s3control.DeleteBucketTaggingInput, arg2 ...request.Option) (*s3control.DeleteBucketTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketTaggingWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteBucketTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketTaggingWithContext indicates an expected call of DeleteBucketTaggingWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketTaggingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketTaggingWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketTaggingWithContext), varargs...)
}

// DeleteBucketWithContext mocks base method
func (m *MockS3ControlAPI) DeleteBucketWithContext(arg0 context.Context, arg1 *s3control.DeleteBucketInput, arg2 ...request.Option) (*s3control.DeleteBucketOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketWithContext indicates an expected call of DeleteBucketWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteBucketWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteBucketWithContext), varargs...)
}

// DeleteJobTagging mocks base method
func (m *MockS3ControlAPI) DeleteJobTagging(arg0 *s3control.DeleteJobTaggingInput) (*s3control.DeleteJobTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobTagging", arg0)
	ret0, _ := ret[0].(*s3control.DeleteJobTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobTagging indicates an expected call of DeleteJobTagging
func (mr *MockS3ControlAPIMockRecorder) DeleteJobTagging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobTagging", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteJobTagging), arg0)
}

// DeleteJobTaggingRequest mocks base method
func (m *MockS3ControlAPI) DeleteJobTaggingRequest(arg0 *s3control.DeleteJobTaggingInput) (*request.Request, *s3control.DeleteJobTaggingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobTaggingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteJobTaggingOutput)
	return ret0, ret1
}

// DeleteJobTaggingRequest indicates an expected call of DeleteJobTaggingRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteJobTaggingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobTaggingRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteJobTaggingRequest), arg0)
}

// DeleteJobTaggingWithContext mocks base method
func (m *MockS3ControlAPI) DeleteJobTaggingWithContext(arg0 context.Context, arg1 *s3control.DeleteJobTaggingInput, arg2 ...request.Option) (*s3control.DeleteJobTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobTaggingWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteJobTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobTaggingWithContext indicates an expected call of DeleteJobTaggingWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteJobTaggingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobTaggingWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteJobTaggingWithContext), varargs...)
}

// DeleteMultiRegionAccessPoint mocks base method
func (m *MockS3ControlAPI) DeleteMultiRegionAccessPoint(arg0 *s3control.DeleteMultiRegionAccessPointInput) (*s3control.DeleteMultiRegionAccessPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultiRegionAccessPoint", arg0)
	ret0, _ := ret[0].(*s3control.DeleteMultiRegionAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMultiRegionAccessPoint indicates an expected call of DeleteMultiRegionAccessPoint
func (mr *MockS3ControlAPIMockRecorder) DeleteMultiRegionAccessPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiRegionAccessPoint", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteMultiRegionAccessPoint), arg0)
}

// DeleteMultiRegionAccessPointRequest mocks base method
func (m *MockS3ControlAPI) DeleteMultiRegionAccessPointRequest(arg0 *s3control.DeleteMultiRegionAccessPointInput) (*request.Request, *s3control.DeleteMultiRegionAccessPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultiRegionAccessPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteMultiRegionAccessPointOutput)
	return ret0, ret1
}

// DeleteMultiRegionAccessPointRequest indicates an expected call of DeleteMultiRegionAccessPointRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteMultiRegionAccessPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiRegionAccessPointRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteMultiRegionAccessPointRequest), arg0)
}

// DeleteMultiRegionAccessPointWithContext mocks base method
func (m *MockS3ControlAPI) DeleteMultiRegionAccessPointWithContext(arg0 context.Context, arg1 *s3control.DeleteMultiRegionAccessPointInput, arg2 ...request.Option) (*s3control.DeleteMultiRegionAccessPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiRegionAccessPointWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteMultiRegionAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMultiRegionAccessPointWithContext indicates an expected call of DeleteMultiRegionAccessPointWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteMultiRegionAccessPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiRegionAccessPointWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteMultiRegionAccessPointWithContext), varargs...)
}

// DeletePublicAccessBlock mocks base method
func (m *MockS3ControlAPI) DeletePublicAccessBlock(arg0 *s3control.DeletePublicAccessBlockInput) (*s3control.DeletePublicAccessBlockOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicAccessBlock", arg0)
	ret0, _ := ret[0].(*s3control.DeletePublicAccessBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePublicAccessBlock indicates an expected call of DeletePublicAccessBlock
func (mr *MockS3ControlAPIMockRecorder) DeletePublicAccessBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicAccessBlock", reflect.TypeOf((*MockS3ControlAPI)(nil).DeletePublicAccessBlock), arg0)
}

// DeletePublicAccessBlockRequest mocks base method
func (m *MockS3ControlAPI) DeletePublicAccessBlockRequest(arg0 *s3control.DeletePublicAccessBlockInput) (*request.Request, *s3control.DeletePublicAccessBlockOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicAccessBlockRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeletePublicAccessBlockOutput)
	return ret0, ret1
}

// DeletePublicAccessBlockRequest indicates an expected call of DeletePublicAccessBlockRequest
func (mr *MockS3ControlAPIMockRecorder) DeletePublicAccessBlockRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicAccessBlockRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeletePublicAccessBlockRequest), arg0)
}

// DeletePublicAccessBlockWithContext mocks base method
func (m *MockS3ControlAPI) DeletePublicAccessBlockWithContext(arg0 context.Context, arg1 *s3control.DeletePublicAccessBlockInput, arg2 ...request.Option) (*s3control.DeletePublicAccessBlockOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePublicAccessBlockWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeletePublicAccessBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePublicAccessBlockWithContext indicates an expected call of DeletePublicAccessBlockWithContext
func (mr *MockS3ControlAPIMockRecorder) DeletePublicAccessBlockWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicAccessBlockWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeletePublicAccessBlockWithContext), varargs...)
}

// DeleteStorageLensConfiguration mocks base method
func (m *MockS3ControlAPI) DeleteStorageLensConfiguration(arg0 *s3control.DeleteStorageLensConfigurationInput) (*s3control.DeleteStorageLensConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageLensConfiguration", arg0)
	ret0, _ := ret[0].(*s3control.DeleteStorageLensConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStorageLensConfiguration indicates an expected call of DeleteStorageLensConfiguration
func (mr *MockS3ControlAPIMockRecorder) DeleteStorageLensConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageLensConfiguration", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteStorageLensConfiguration), arg0)
}

// DeleteStorageLensConfigurationRequest mocks base method
func (m *MockS3ControlAPI) DeleteStorageLensConfigurationRequest(arg0 *s3control.DeleteStorageLensConfigurationInput) (*request.Request, *s3control.DeleteStorageLensConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageLensConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteStorageLensConfigurationOutput)
	return ret0, ret1
}

// DeleteStorageLensConfigurationRequest indicates an expected call of DeleteStorageLensConfigurationRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteStorageLensConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageLensConfigurationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteStorageLensConfigurationRequest), arg0)
}

// DeleteStorageLensConfigurationTagging mocks base method
func (m *MockS3ControlAPI) DeleteStorageLensConfigurationTagging(arg0 *s3control.DeleteStorageLensConfigurationTaggingInput) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageLensConfigurationTagging", arg0)
	ret0, _ := ret[0].(*s3control.DeleteStorageLensConfigurationTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStorageLensConfigurationTagging indicates an expected call of DeleteStorageLensConfigurationTagging
func (mr *MockS3ControlAPIMockRecorder) DeleteStorageLensConfigurationTagging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageLensConfigurationTagging", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteStorageLensConfigurationTagging), arg0)
}

// DeleteStorageLensConfigurationTaggingRequest mocks base method
func (m *MockS3ControlAPI) DeleteStorageLensConfigurationTaggingRequest(arg0 *s3control.DeleteStorageLensConfigurationTaggingInput) (*request.Request, *s3control.DeleteStorageLensConfigurationTaggingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageLensConfigurationTaggingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteStorageLensConfigurationTaggingOutput)
	return ret0, ret1
}

// DeleteStorageLensConfigurationTaggingRequest indicates an expected call of DeleteStorageLensConfigurationTaggingRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteStorageLensConfigurationTaggingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageLensConfigurationTaggingRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteStorageLensConfigurationTaggingRequest), arg0)
}

// DeleteStorageLensConfigurationTaggingWithContext mocks base method
func (m *MockS3ControlAPI) DeleteStorageLensConfigurationTaggingWithContext(arg0 context.Context, arg1 *s3control.DeleteStorageLensConfigurationTaggingInput, arg2 ...request.Option) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStorageLensConfigurationTaggingWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteStorageLensConfigurationTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStorageLensConfigurationTaggingWithContext indicates an expected call of DeleteStorageLensConfigurationTaggingWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteStorageLensConfigurationTaggingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageLensConfigurationTaggingWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteStorageLensConfigurationTaggingWithContext), varargs...)
}

// DeleteStorageLensConfigurationWithContext mocks base method
func (m *MockS3ControlAPI) DeleteStorageLensConfigurationWithContext(arg0 context.Context, arg1 *s3control.DeleteStorageLensConfigurationInput, arg2 ...request.Option) (*s3control.DeleteStorageLensConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStorageLensConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteStorageLensConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStorageLensConfigurationWithContext indicates an expected call of DeleteStorageLensConfigurationWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteStorageLensConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageLensConfigurationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteStorageLensConfigurationWithContext), varargs...)
}

// DeleteStorageLensGroup mocks base method
func (m *MockS3ControlAPI) DeleteStorageLensGroup(arg0 *s3control.DeleteStorageLensGroupInput) (*s3control.DeleteStorageLensGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageLensGroup", arg0)
	ret0, _ := ret[0].(*s3control.DeleteStorageLensGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStorageLensGroup indicates an expected call of DeleteStorageLensGroup
func (mr *MockS3ControlAPIMockRecorder) DeleteStorageLensGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageLensGroup", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteStorageLensGroup), arg0)
}

// DeleteStorageLensGroupRequest mocks base method
func (m *MockS3ControlAPI) DeleteStorageLensGroupRequest(arg0 *s3control.DeleteStorageLensGroupInput) (*request.Request, *s3control.DeleteStorageLensGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageLensGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DeleteStorageLensGroupOutput)
	return ret0, ret1
}

// DeleteStorageLensGroupRequest indicates an expected call of DeleteStorageLensGroupRequest
func (mr *MockS3ControlAPIMockRecorder) DeleteStorageLensGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageLensGroupRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteStorageLensGroupRequest), arg0)
}

// DeleteStorageLensGroupWithContext mocks base method
func (m *MockS3ControlAPI) DeleteStorageLensGroupWithContext(arg0 context.Context, arg1 *s3control.DeleteStorageLensGroupInput, arg2 ...request.Option) (*s3control.DeleteStorageLensGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStorageLensGroupWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DeleteStorageLensGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStorageLensGroupWithContext indicates an expected call of DeleteStorageLensGroupWithContext
func (mr *MockS3ControlAPIMockRecorder) DeleteStorageLensGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageLensGroupWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DeleteStorageLensGroupWithContext), varargs...)
}

// DescribeJob mocks base method
func (m *MockS3ControlAPI) DescribeJob(arg0 *s3control.DescribeJobInput) (*s3control.DescribeJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJob", arg0)
	ret0, _ := ret[0].(*s3control.DescribeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJob indicates an expected call of DescribeJob
func (mr *MockS3ControlAPIMockRecorder) DescribeJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJob", reflect.TypeOf((*MockS3ControlAPI)(nil).DescribeJob), arg0)
}

// DescribeJobRequest mocks base method
func (m *MockS3ControlAPI) DescribeJobRequest(arg0 *s3control.DescribeJobInput) (*request.Request, *s3control.DescribeJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DescribeJobOutput)
	return ret0, ret1
}

// DescribeJobRequest indicates an expected call of DescribeJobRequest
func (mr *MockS3ControlAPIMockRecorder) DescribeJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DescribeJobRequest), arg0)
}

// DescribeJobWithContext mocks base method
func (m *MockS3ControlAPI) DescribeJobWithContext(arg0 context.Context, arg1 *s3control.DescribeJobInput, arg2 ...request.Option) (*s3control.DescribeJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DescribeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobWithContext indicates an expected call of DescribeJobWithContext
func (mr *MockS3ControlAPIMockRecorder) DescribeJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DescribeJobWithContext), varargs...)
}

// DescribeMultiRegionAccessPointOperation mocks base method
func (m *MockS3ControlAPI) DescribeMultiRegionAccessPointOperation(arg0 *s3control.DescribeMultiRegionAccessPointOperationInput) (*s3control.DescribeMultiRegionAccessPointOperationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMultiRegionAccessPointOperation", arg0)
	ret0, _ := ret[0].(*s3control.DescribeMultiRegionAccessPointOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMultiRegionAccessPointOperation indicates an expected call of DescribeMultiRegionAccessPointOperation
func (mr *MockS3ControlAPIMockRecorder) DescribeMultiRegionAccessPointOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMultiRegionAccessPointOperation", reflect.TypeOf((*MockS3ControlAPI)(nil).DescribeMultiRegionAccessPointOperation), arg0)
}

// DescribeMultiRegionAccessPointOperationRequest mocks base method
func (m *MockS3ControlAPI) DescribeMultiRegionAccessPointOperationRequest(arg0 *s3control.DescribeMultiRegionAccessPointOperationInput) (*request.Request, *s3control.DescribeMultiRegionAccessPointOperationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMultiRegionAccessPointOperationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DescribeMultiRegionAccessPointOperationOutput)
	return ret0, ret1
}

// DescribeMultiRegionAccessPointOperationRequest indicates an expected call of DescribeMultiRegionAccessPointOperationRequest
func (mr *MockS3ControlAPIMockRecorder) DescribeMultiRegionAccessPointOperationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMultiRegionAccessPointOperationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DescribeMultiRegionAccessPointOperationRequest), arg0)
}

// DescribeMultiRegionAccessPointOperationWithContext mocks base method
func (m *MockS3ControlAPI) DescribeMultiRegionAccessPointOperationWithContext(arg0 context.Context, arg1 *s3control.DescribeMultiRegionAccessPointOperationInput, arg2 ...request.Option) (*s3control.DescribeMultiRegionAccessPointOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMultiRegionAccessPointOperationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DescribeMultiRegionAccessPointOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMultiRegionAccessPointOperationWithContext indicates an expected call of DescribeMultiRegionAccessPointOperationWithContext
func (mr *MockS3ControlAPIMockRecorder) DescribeMultiRegionAccessPointOperationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMultiRegionAccessPointOperationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DescribeMultiRegionAccessPointOperationWithContext), varargs...)
}

// DissociateAccessGrantsIdentityCenter mocks base method
func (m *MockS3ControlAPI) DissociateAccessGrantsIdentityCenter(arg0 *s3control.DissociateAccessGrantsIdentityCenterInput) (*s3control.DissociateAccessGrantsIdentityCenterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DissociateAccessGrantsIdentityCenter", arg0)
	ret0, _ := ret[0].(*s3control.DissociateAccessGrantsIdentityCenterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DissociateAccessGrantsIdentityCenter indicates an expected call of DissociateAccessGrantsIdentityCenter
func (mr *MockS3ControlAPIMockRecorder) DissociateAccessGrantsIdentityCenter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociateAccessGrantsIdentityCenter", reflect.TypeOf((*MockS3ControlAPI)(nil).DissociateAccessGrantsIdentityCenter), arg0)
}

// DissociateAccessGrantsIdentityCenterRequest mocks base method
func (m *MockS3ControlAPI) DissociateAccessGrantsIdentityCenterRequest(arg0 *s3control.DissociateAccessGrantsIdentityCenterInput) (*request.Request, *s3control.DissociateAccessGrantsIdentityCenterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DissociateAccessGrantsIdentityCenterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.DissociateAccessGrantsIdentityCenterOutput)
	return ret0, ret1
}

// DissociateAccessGrantsIdentityCenterRequest indicates an expected call of DissociateAccessGrantsIdentityCenterRequest
func (mr *MockS3ControlAPIMockRecorder) DissociateAccessGrantsIdentityCenterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociateAccessGrantsIdentityCenterRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).DissociateAccessGrantsIdentityCenterRequest), arg0)
}

// DissociateAccessGrantsIdentityCenterWithContext mocks base method
func (m *MockS3ControlAPI) DissociateAccessGrantsIdentityCenterWithContext(arg0 context.Context, arg1 *s3control.DissociateAccessGrantsIdentityCenterInput, arg2 ...request.Option) (*s3control.DissociateAccessGrantsIdentityCenterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DissociateAccessGrantsIdentityCenterWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.DissociateAccessGrantsIdentityCenterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DissociateAccessGrantsIdentityCenterWithContext indicates an expected call of DissociateAccessGrantsIdentityCenterWithContext
func (mr *MockS3ControlAPIMockRecorder) DissociateAccessGrantsIdentityCenterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociateAccessGrantsIdentityCenterWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).DissociateAccessGrantsIdentityCenterWithContext), varargs...)
}

// GetAccessGrant mocks base method
func (m *MockS3ControlAPI) GetAccessGrant(arg0 *s3control.GetAccessGrantInput) (*s3control.GetAccessGrantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrant", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrant indicates an expected call of GetAccessGrant
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrant", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrant), arg0)
}

// GetAccessGrantRequest mocks base method
func (m *MockS3ControlAPI) GetAccessGrantRequest(arg0 *s3control.GetAccessGrantInput) (*request.Request, *s3control.GetAccessGrantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessGrantOutput)
	return ret0, ret1
}

// GetAccessGrantRequest indicates an expected call of GetAccessGrantRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantRequest), arg0)
}

// GetAccessGrantWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessGrantWithContext(arg0 context.Context, arg1 *s3control.GetAccessGrantInput, arg2 ...request.Option) (*s3control.GetAccessGrantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessGrantWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrantWithContext indicates an expected call of GetAccessGrantWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantWithContext), varargs...)
}

// GetAccessGrantsInstance mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsInstance(arg0 *s3control.GetAccessGrantsInstanceInput) (*s3control.GetAccessGrantsInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrantsInstance", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessGrantsInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrantsInstance indicates an expected call of GetAccessGrantsInstance
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsInstance", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsInstance), arg0)
}

// GetAccessGrantsInstanceForPrefix mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsInstanceForPrefix(arg0 *s3control.GetAccessGrantsInstanceForPrefixInput) (*s3control.GetAccessGrantsInstanceForPrefixOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrantsInstanceForPrefix", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessGrantsInstanceForPrefixOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrantsInstanceForPrefix indicates an expected call of GetAccessGrantsInstanceForPrefix
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsInstanceForPrefix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsInstanceForPrefix", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsInstanceForPrefix), arg0)
}

// GetAccessGrantsInstanceForPrefixRequest mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsInstanceForPrefixRequest(arg0 *s3control.GetAccessGrantsInstanceForPrefixInput) (*request.Request, *s3control.GetAccessGrantsInstanceForPrefixOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrantsInstanceForPrefixRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessGrantsInstanceForPrefixOutput)
	return ret0, ret1
}

// GetAccessGrantsInstanceForPrefixRequest indicates an expected call of GetAccessGrantsInstanceForPrefixRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsInstanceForPrefixRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsInstanceForPrefixRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsInstanceForPrefixRequest), arg0)
}

// GetAccessGrantsInstanceForPrefixWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsInstanceForPrefixWithContext(arg0 context.Context, arg1 *s3control.GetAccessGrantsInstanceForPrefixInput, arg2 ...request.Option) (*s3control.GetAccessGrantsInstanceForPrefixOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessGrantsInstanceForPrefixWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessGrantsInstanceForPrefixOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrantsInstanceForPrefixWithContext indicates an expected call of GetAccessGrantsInstanceForPrefixWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsInstanceForPrefixWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsInstanceForPrefixWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsInstanceForPrefixWithContext), varargs...)
}

// GetAccessGrantsInstanceRequest mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsInstanceRequest(arg0 *s3control.GetAccessGrantsInstanceInput) (*request.Request, *s3control.GetAccessGrantsInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrantsInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessGrantsInstanceOutput)
	return ret0, ret1
}

// GetAccessGrantsInstanceRequest indicates an expected call of GetAccessGrantsInstanceRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsInstanceRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsInstanceRequest), arg0)
}

// GetAccessGrantsInstanceResourcePolicy mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsInstanceResourcePolicy(arg0 *s3control.GetAccessGrantsInstanceResourcePolicyInput) (*s3control.GetAccessGrantsInstanceResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrantsInstanceResourcePolicy", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessGrantsInstanceResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrantsInstanceResourcePolicy indicates an expected call of GetAccessGrantsInstanceResourcePolicy
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsInstanceResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsInstanceResourcePolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsInstanceResourcePolicy), arg0)
}

// GetAccessGrantsInstanceResourcePolicyRequest mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsInstanceResourcePolicyRequest(arg0 *s3control.GetAccessGrantsInstanceResourcePolicyInput) (*request.Request, *s3control.GetAccessGrantsInstanceResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrantsInstanceResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessGrantsInstanceResourcePolicyOutput)
	return ret0, ret1
}

// GetAccessGrantsInstanceResourcePolicyRequest indicates an expected call of GetAccessGrantsInstanceResourcePolicyRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsInstanceResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsInstanceResourcePolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsInstanceResourcePolicyRequest), arg0)
}

// GetAccessGrantsInstanceResourcePolicyWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsInstanceResourcePolicyWithContext(arg0 context.Context, arg1 *s3control.GetAccessGrantsInstanceResourcePolicyInput, arg2 ...request.Option) (*s3control.GetAccessGrantsInstanceResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessGrantsInstanceResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessGrantsInstanceResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrantsInstanceResourcePolicyWithContext indicates an expected call of GetAccessGrantsInstanceResourcePolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsInstanceResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsInstanceResourcePolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsInstanceResourcePolicyWithContext), varargs...)
}

// GetAccessGrantsInstanceWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsInstanceWithContext(arg0 context.Context, arg1 *s3control.GetAccessGrantsInstanceInput, arg2 ...request.Option) (*s3control.GetAccessGrantsInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessGrantsInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessGrantsInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrantsInstanceWithContext indicates an expected call of GetAccessGrantsInstanceWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsInstanceWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsInstanceWithContext), varargs...)
}

// GetAccessGrantsLocation mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsLocation(arg0 *s3control.GetAccessGrantsLocationInput) (*s3control.GetAccessGrantsLocationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrantsLocation", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessGrantsLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrantsLocation indicates an expected call of GetAccessGrantsLocation
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsLocation", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsLocation), arg0)
}

// GetAccessGrantsLocationRequest mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsLocationRequest(arg0 *s3control.GetAccessGrantsLocationInput) (*request.Request, *s3control.GetAccessGrantsLocationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrantsLocationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessGrantsLocationOutput)
	return ret0, ret1
}

// GetAccessGrantsLocationRequest indicates an expected call of GetAccessGrantsLocationRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsLocationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsLocationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsLocationRequest), arg0)
}

// GetAccessGrantsLocationWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessGrantsLocationWithContext(arg0 context.Context, arg1 *s3control.GetAccessGrantsLocationInput, arg2 ...request.Option) (*s3control.GetAccessGrantsLocationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessGrantsLocationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessGrantsLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrantsLocationWithContext indicates an expected call of GetAccessGrantsLocationWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessGrantsLocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantsLocationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessGrantsLocationWithContext), varargs...)
}

// GetAccessPoint mocks base method
func (m *MockS3ControlAPI) GetAccessPoint(arg0 *s3control.GetAccessPointInput) (*s3control.GetAccessPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPoint", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPoint indicates an expected call of GetAccessPoint
func (mr *MockS3ControlAPIMockRecorder) GetAccessPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPoint", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPoint), arg0)
}

// GetAccessPointConfigurationForObjectLambda mocks base method
func (m *MockS3ControlAPI) GetAccessPointConfigurationForObjectLambda(arg0 *s3control.GetAccessPointConfigurationForObjectLambdaInput) (*s3control.GetAccessPointConfigurationForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointConfigurationForObjectLambda", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessPointConfigurationForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointConfigurationForObjectLambda indicates an expected call of GetAccessPointConfigurationForObjectLambda
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointConfigurationForObjectLambda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointConfigurationForObjectLambda", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointConfigurationForObjectLambda), arg0)
}

// GetAccessPointConfigurationForObjectLambdaRequest mocks base method
func (m *MockS3ControlAPI) GetAccessPointConfigurationForObjectLambdaRequest(arg0 *s3control.GetAccessPointConfigurationForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointConfigurationForObjectLambdaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointConfigurationForObjectLambdaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessPointConfigurationForObjectLambdaOutput)
	return ret0, ret1
}

// GetAccessPointConfigurationForObjectLambdaRequest indicates an expected call of GetAccessPointConfigurationForObjectLambdaRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointConfigurationForObjectLambdaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointConfigurationForObjectLambdaRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointConfigurationForObjectLambdaRequest), arg0)
}

// GetAccessPointConfigurationForObjectLambdaWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessPointConfigurationForObjectLambdaWithContext(arg0 context.Context, arg1 *s3control.GetAccessPointConfigurationForObjectLambdaInput, arg2 ...request.Option) (*s3control.GetAccessPointConfigurationForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessPointConfigurationForObjectLambdaWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessPointConfigurationForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointConfigurationForObjectLambdaWithContext indicates an expected call of GetAccessPointConfigurationForObjectLambdaWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointConfigurationForObjectLambdaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointConfigurationForObjectLambdaWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointConfigurationForObjectLambdaWithContext), varargs...)
}

// GetAccessPointForObjectLambda mocks base method
func (m *MockS3ControlAPI) GetAccessPointForObjectLambda(arg0 *s3control.GetAccessPointForObjectLambdaInput) (*s3control.GetAccessPointForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointForObjectLambda", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessPointForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointForObjectLambda indicates an expected call of GetAccessPointForObjectLambda
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointForObjectLambda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointForObjectLambda", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointForObjectLambda), arg0)
}

// GetAccessPointForObjectLambdaRequest mocks base method
func (m *MockS3ControlAPI) GetAccessPointForObjectLambdaRequest(arg0 *s3control.GetAccessPointForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointForObjectLambdaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointForObjectLambdaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessPointForObjectLambdaOutput)
	return ret0, ret1
}

// GetAccessPointForObjectLambdaRequest indicates an expected call of GetAccessPointForObjectLambdaRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointForObjectLambdaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointForObjectLambdaRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointForObjectLambdaRequest), arg0)
}

// GetAccessPointForObjectLambdaWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessPointForObjectLambdaWithContext(arg0 context.Context, arg1 *s3control.GetAccessPointForObjectLambdaInput, arg2 ...request.Option) (*s3control.GetAccessPointForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessPointForObjectLambdaWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessPointForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointForObjectLambdaWithContext indicates an expected call of GetAccessPointForObjectLambdaWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointForObjectLambdaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointForObjectLambdaWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointForObjectLambdaWithContext), varargs...)
}

// GetAccessPointPolicy mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicy(arg0 *s3control.GetAccessPointPolicyInput) (*s3control.GetAccessPointPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointPolicy", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessPointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointPolicy indicates an expected call of GetAccessPointPolicy
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicy), arg0)
}

// GetAccessPointPolicyForObjectLambda mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyForObjectLambda(arg0 *s3control.GetAccessPointPolicyForObjectLambdaInput) (*s3control.GetAccessPointPolicyForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointPolicyForObjectLambda", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessPointPolicyForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointPolicyForObjectLambda indicates an expected call of GetAccessPointPolicyForObjectLambda
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyForObjectLambda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyForObjectLambda", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyForObjectLambda), arg0)
}

// GetAccessPointPolicyForObjectLambdaRequest mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyForObjectLambdaRequest(arg0 *s3control.GetAccessPointPolicyForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointPolicyForObjectLambdaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointPolicyForObjectLambdaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessPointPolicyForObjectLambdaOutput)
	return ret0, ret1
}

// GetAccessPointPolicyForObjectLambdaRequest indicates an expected call of GetAccessPointPolicyForObjectLambdaRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyForObjectLambdaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyForObjectLambdaRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyForObjectLambdaRequest), arg0)
}

// GetAccessPointPolicyForObjectLambdaWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyForObjectLambdaWithContext(arg0 context.Context, arg1 *s3control.GetAccessPointPolicyForObjectLambdaInput, arg2 ...request.Option) (*s3control.GetAccessPointPolicyForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessPointPolicyForObjectLambdaWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessPointPolicyForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointPolicyForObjectLambdaWithContext indicates an expected call of GetAccessPointPolicyForObjectLambdaWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyForObjectLambdaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyForObjectLambdaWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyForObjectLambdaWithContext), varargs...)
}

// GetAccessPointPolicyRequest mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyRequest(arg0 *s3control.GetAccessPointPolicyInput) (*request.Request, *s3control.GetAccessPointPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessPointPolicyOutput)
	return ret0, ret1
}

// GetAccessPointPolicyRequest indicates an expected call of GetAccessPointPolicyRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyRequest), arg0)
}

// GetAccessPointPolicyStatus mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyStatus(arg0 *s3control.GetAccessPointPolicyStatusInput) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointPolicyStatus", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessPointPolicyStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointPolicyStatus indicates an expected call of GetAccessPointPolicyStatus
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyStatus", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyStatus), arg0)
}

// GetAccessPointPolicyStatusForObjectLambda mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyStatusForObjectLambda(arg0 *s3control.GetAccessPointPolicyStatusForObjectLambdaInput) (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointPolicyStatusForObjectLambda", arg0)
	ret0, _ := ret[0].(*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointPolicyStatusForObjectLambda indicates an expected call of GetAccessPointPolicyStatusForObjectLambda
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyStatusForObjectLambda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyStatusForObjectLambda", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyStatusForObjectLambda), arg0)
}

// GetAccessPointPolicyStatusForObjectLambdaRequest mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyStatusForObjectLambdaRequest(arg0 *s3control.GetAccessPointPolicyStatusForObjectLambdaInput) (*request.Request, *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointPolicyStatusForObjectLambdaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput)
	return ret0, ret1
}

// GetAccessPointPolicyStatusForObjectLambdaRequest indicates an expected call of GetAccessPointPolicyStatusForObjectLambdaRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyStatusForObjectLambdaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyStatusForObjectLambdaRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyStatusForObjectLambdaRequest), arg0)
}

// GetAccessPointPolicyStatusForObjectLambdaWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyStatusForObjectLambdaWithContext(arg0 context.Context, arg1 *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, arg2 ...request.Option) (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessPointPolicyStatusForObjectLambdaWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointPolicyStatusForObjectLambdaWithContext indicates an expected call of GetAccessPointPolicyStatusForObjectLambdaWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyStatusForObjectLambdaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyStatusForObjectLambdaWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyStatusForObjectLambdaWithContext), varargs...)
}

// GetAccessPointPolicyStatusRequest mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyStatusRequest(arg0 *s3control.GetAccessPointPolicyStatusInput) (*request.Request, *s3control.GetAccessPointPolicyStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointPolicyStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessPointPolicyStatusOutput)
	return ret0, ret1
}

// GetAccessPointPolicyStatusRequest indicates an expected call of GetAccessPointPolicyStatusRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyStatusRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyStatusRequest), arg0)
}

// GetAccessPointPolicyStatusWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyStatusWithContext(arg0 context.Context, arg1 *s3control.GetAccessPointPolicyStatusInput, arg2 ...request.Option) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessPointPolicyStatusWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessPointPolicyStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointPolicyStatusWithContext indicates an expected call of GetAccessPointPolicyStatusWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyStatusWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyStatusWithContext), varargs...)
}

// GetAccessPointPolicyWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessPointPolicyWithContext(arg0 context.Context, arg1 *s3control.GetAccessPointPolicyInput, arg2 ...request.Option) (*s3control.GetAccessPointPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessPointPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessPointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointPolicyWithContext indicates an expected call of GetAccessPointPolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointPolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointPolicyWithContext), varargs...)
}

// GetAccessPointRequest mocks base method
func (m *MockS3ControlAPI) GetAccessPointRequest(arg0 *s3control.GetAccessPointInput) (*request.Request, *s3control.GetAccessPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetAccessPointOutput)
	return ret0, ret1
}

// GetAccessPointRequest indicates an expected call of GetAccessPointRequest
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointRequest), arg0)
}

// GetAccessPointWithContext mocks base method
func (m *MockS3ControlAPI) GetAccessPointWithContext(arg0 context.Context, arg1 *s3control.GetAccessPointInput, arg2 ...request.Option) (*s3control.GetAccessPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessPointWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPointWithContext indicates an expected call of GetAccessPointWithContext
func (mr *MockS3ControlAPIMockRecorder) GetAccessPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPointWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetAccessPointWithContext), varargs...)
}

// GetBucket mocks base method
func (m *MockS3ControlAPI) GetBucket(arg0 *s3control.GetBucketInput) (*s3control.GetBucketOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucket", arg0)
	ret0, _ := ret[0].(*s3control.GetBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucket indicates an expected call of GetBucket
func (mr *MockS3ControlAPIMockRecorder) GetBucket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucket", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucket), arg0)
}

// GetBucketLifecycleConfiguration mocks base method
func (m *MockS3ControlAPI) GetBucketLifecycleConfiguration(arg0 *s3control.GetBucketLifecycleConfigurationInput) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketLifecycleConfiguration", arg0)
	ret0, _ := ret[0].(*s3control.GetBucketLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLifecycleConfiguration indicates an expected call of GetBucketLifecycleConfiguration
func (mr *MockS3ControlAPIMockRecorder) GetBucketLifecycleConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLifecycleConfiguration", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketLifecycleConfiguration), arg0)
}

// GetBucketLifecycleConfigurationRequest mocks base method
func (m *MockS3ControlAPI) GetBucketLifecycleConfigurationRequest(arg0 *s3control.GetBucketLifecycleConfigurationInput) (*request.Request, *s3control.GetBucketLifecycleConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketLifecycleConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetBucketLifecycleConfigurationOutput)
	return ret0, ret1
}

// GetBucketLifecycleConfigurationRequest indicates an expected call of GetBucketLifecycleConfigurationRequest
func (mr *MockS3ControlAPIMockRecorder) GetBucketLifecycleConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLifecycleConfigurationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketLifecycleConfigurationRequest), arg0)
}

// GetBucketLifecycleConfigurationWithContext mocks base method
func (m *MockS3ControlAPI) GetBucketLifecycleConfigurationWithContext(arg0 context.Context, arg1 *s3control.GetBucketLifecycleConfigurationInput, arg2 ...request.Option) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketLifecycleConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetBucketLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLifecycleConfigurationWithContext indicates an expected call of GetBucketLifecycleConfigurationWithContext
func (mr *MockS3ControlAPIMockRecorder) GetBucketLifecycleConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLifecycleConfigurationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketLifecycleConfigurationWithContext), varargs...)
}

// GetBucketPolicy mocks base method
func (m *MockS3ControlAPI) GetBucketPolicy(arg0 *s3control.GetBucketPolicyInput) (*s3control.GetBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketPolicy", arg0)
	ret0, _ := ret[0].(*s3control.GetBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketPolicy indicates an expected call of GetBucketPolicy
func (mr *MockS3ControlAPIMockRecorder) GetBucketPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketPolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketPolicy), arg0)
}

// GetBucketPolicyRequest mocks base method
func (m *MockS3ControlAPI) GetBucketPolicyRequest(arg0 *s3control.GetBucketPolicyInput) (*request.Request, *s3control.GetBucketPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetBucketPolicyOutput)
	return ret0, ret1
}

// GetBucketPolicyRequest indicates an expected call of GetBucketPolicyRequest
func (mr *MockS3ControlAPIMockRecorder) GetBucketPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketPolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketPolicyRequest), arg0)
}

// GetBucketPolicyWithContext mocks base method
func (m *MockS3ControlAPI) GetBucketPolicyWithContext(arg0 context.Context, arg1 *s3control.GetBucketPolicyInput, arg2 ...request.Option) (*s3control.GetBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketPolicyWithContext indicates an expected call of GetBucketPolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) GetBucketPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketPolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketPolicyWithContext), varargs...)
}

// GetBucketReplication mocks base method
func (m *MockS3ControlAPI) GetBucketReplication(arg0 *s3control.GetBucketReplicationInput) (*s3control.GetBucketReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketReplication", arg0)
	ret0, _ := ret[0].(*s3control.GetBucketReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketReplication indicates an expected call of GetBucketReplication
func (mr *MockS3ControlAPIMockRecorder) GetBucketReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketReplication", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketReplication), arg0)
}

// GetBucketReplicationRequest mocks base method
func (m *MockS3ControlAPI) GetBucketReplicationRequest(arg0 *s3control.GetBucketReplicationInput) (*request.Request, *s3control.GetBucketReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetBucketReplicationOutput)
	return ret0, ret1
}

// GetBucketReplicationRequest indicates an expected call of GetBucketReplicationRequest
func (mr *MockS3ControlAPIMockRecorder) GetBucketReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketReplicationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketReplicationRequest), arg0)
}

// GetBucketReplicationWithContext mocks base method
func (m *MockS3ControlAPI) GetBucketReplicationWithContext(arg0 context.Context, arg1 *s3control.GetBucketReplicationInput, arg2 ...request.Option) (*s3control.GetBucketReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetBucketReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketReplicationWithContext indicates an expected call of GetBucketReplicationWithContext
func (mr *MockS3ControlAPIMockRecorder) GetBucketReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketReplicationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketReplicationWithContext), varargs...)
}

// GetBucketRequest mocks base method
func (m *MockS3ControlAPI) GetBucketRequest(arg0 *s3control.GetBucketInput) (*request.Request, *s3control.GetBucketOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetBucketOutput)
	return ret0, ret1
}

// GetBucketRequest indicates an expected call of GetBucketRequest
func (mr *MockS3ControlAPIMockRecorder) GetBucketRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketRequest), arg0)
}

// GetBucketTagging mocks base method
func (m *MockS3ControlAPI) GetBucketTagging(arg0 *s3control.GetBucketTaggingInput) (*s3control.GetBucketTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketTagging", arg0)
	ret0, _ := ret[0].(*s3control.GetBucketTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketTagging indicates an expected call of GetBucketTagging
func (mr *MockS3ControlAPIMockRecorder) GetBucketTagging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketTagging", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketTagging), arg0)
}

// GetBucketTaggingRequest mocks base method
func (m *MockS3ControlAPI) GetBucketTaggingRequest(arg0 *s3control.GetBucketTaggingInput) (*request.Request, *s3control.GetBucketTaggingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketTaggingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetBucketTaggingOutput)
	return ret0, ret1
}

// GetBucketTaggingRequest indicates an expected call of GetBucketTaggingRequest
func (mr *MockS3ControlAPIMockRecorder) GetBucketTaggingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketTaggingRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketTaggingRequest), arg0)
}

// GetBucketTaggingWithContext mocks base method
func (m *MockS3ControlAPI) GetBucketTaggingWithContext(arg0 context.Context, arg1 *s3control.GetBucketTaggingInput, arg2 ...request.Option) (*s3control.GetBucketTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketTaggingWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetBucketTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketTaggingWithContext indicates an expected call of GetBucketTaggingWithContext
func (mr *MockS3ControlAPIMockRecorder) GetBucketTaggingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketTaggingWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketTaggingWithContext), varargs...)
}

// GetBucketVersioning mocks base method
func (m *MockS3ControlAPI) GetBucketVersioning(arg0 *s3control.GetBucketVersioningInput) (*s3control.GetBucketVersioningOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketVersioning", arg0)
	ret0, _ := ret[0].(*s3control.GetBucketVersioningOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketVersioning indicates an expected call of GetBucketVersioning
func (mr *MockS3ControlAPIMockRecorder) GetBucketVersioning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketVersioning", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketVersioning), arg0)
}

// GetBucketVersioningRequest mocks base method
func (m *MockS3ControlAPI) GetBucketVersioningRequest(arg0 *s3control.GetBucketVersioningInput) (*request.Request, *s3control.GetBucketVersioningOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketVersioningRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetBucketVersioningOutput)
	return ret0, ret1
}

// GetBucketVersioningRequest indicates an expected call of GetBucketVersioningRequest
func (mr *MockS3ControlAPIMockRecorder) GetBucketVersioningRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketVersioningRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketVersioningRequest), arg0)
}

// GetBucketVersioningWithContext mocks base method
func (m *MockS3ControlAPI) GetBucketVersioningWithContext(arg0 context.Context, arg1 *s3control.GetBucketVersioningInput, arg2 ...request.Option) (*s3control.GetBucketVersioningOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketVersioningWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetBucketVersioningOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketVersioningWithContext indicates an expected call of GetBucketVersioningWithContext
func (mr *MockS3ControlAPIMockRecorder) GetBucketVersioningWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketVersioningWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketVersioningWithContext), varargs...)
}

// GetBucketWithContext mocks base method
func (m *MockS3ControlAPI) GetBucketWithContext(arg0 context.Context, arg1 *s3control.GetBucketInput, arg2 ...request.Option) (*s3control.GetBucketOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketWithContext indicates an expected call of GetBucketWithContext
func (mr *MockS3ControlAPIMockRecorder) GetBucketWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetBucketWithContext), varargs...)
}

// GetDataAccess mocks base method
func (m *MockS3ControlAPI) GetDataAccess(arg0 *s3control.GetDataAccessInput) (*s3control.GetDataAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataAccess", arg0)
	ret0, _ := ret[0].(*s3control.GetDataAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataAccess indicates an expected call of GetDataAccess
func (mr *MockS3ControlAPIMockRecorder) GetDataAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataAccess", reflect.TypeOf((*MockS3ControlAPI)(nil).GetDataAccess), arg0)
}

// GetDataAccessRequest mocks base method
func (m *MockS3ControlAPI) GetDataAccessRequest(arg0 *s3control.GetDataAccessInput) (*request.Request, *s3control.GetDataAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetDataAccessOutput)
	return ret0, ret1
}

// GetDataAccessRequest indicates an expected call of GetDataAccessRequest
func (mr *MockS3ControlAPIMockRecorder) GetDataAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataAccessRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetDataAccessRequest), arg0)
}

// GetDataAccessWithContext mocks base method
func (m *MockS3ControlAPI) GetDataAccessWithContext(arg0 context.Context, arg1 *s3control.GetDataAccessInput, arg2 ...request.Option) (*s3control.GetDataAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataAccessWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetDataAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataAccessWithContext indicates an expected call of GetDataAccessWithContext
func (mr *MockS3ControlAPIMockRecorder) GetDataAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataAccessWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetDataAccessWithContext), varargs...)
}

// GetJobTagging mocks base method
func (m *MockS3ControlAPI) GetJobTagging(arg0 *s3control.GetJobTaggingInput) (*s3control.GetJobTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobTagging", arg0)
	ret0, _ := ret[0].(*s3control.GetJobTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobTagging indicates an expected call of GetJobTagging
func (mr *MockS3ControlAPIMockRecorder) GetJobTagging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobTagging", reflect.TypeOf((*MockS3ControlAPI)(nil).GetJobTagging), arg0)
}

// GetJobTaggingRequest mocks base method
func (m *MockS3ControlAPI) GetJobTaggingRequest(arg0 *s3control.GetJobTaggingInput) (*request.Request, *s3control.GetJobTaggingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobTaggingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetJobTaggingOutput)
	return ret0, ret1
}

// GetJobTaggingRequest indicates an expected call of GetJobTaggingRequest
func (mr *MockS3ControlAPIMockRecorder) GetJobTaggingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobTaggingRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetJobTaggingRequest), arg0)
}

// GetJobTaggingWithContext mocks base method
func (m *MockS3ControlAPI) GetJobTaggingWithContext(arg0 context.Context, arg1 *s3control.GetJobTaggingInput, arg2 ...request.Option) (*s3control.GetJobTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobTaggingWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetJobTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobTaggingWithContext indicates an expected call of GetJobTaggingWithContext
func (mr *MockS3ControlAPIMockRecorder) GetJobTaggingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobTaggingWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetJobTaggingWithContext), varargs...)
}

// GetMultiRegionAccessPoint mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPoint(arg0 *s3control.GetMultiRegionAccessPointInput) (*s3control.GetMultiRegionAccessPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPoint", arg0)
	ret0, _ := ret[0].(*s3control.GetMultiRegionAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiRegionAccessPoint indicates an expected call of GetMultiRegionAccessPoint
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPoint", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPoint), arg0)
}

// GetMultiRegionAccessPointPolicy mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointPolicy(arg0 *s3control.GetMultiRegionAccessPointPolicyInput) (*s3control.GetMultiRegionAccessPointPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointPolicy", arg0)
	ret0, _ := ret[0].(*s3control.GetMultiRegionAccessPointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiRegionAccessPointPolicy indicates an expected call of GetMultiRegionAccessPointPolicy
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointPolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointPolicy), arg0)
}

// GetMultiRegionAccessPointPolicyRequest mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointPolicyRequest(arg0 *s3control.GetMultiRegionAccessPointPolicyInput) (*request.Request, *s3control.GetMultiRegionAccessPointPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetMultiRegionAccessPointPolicyOutput)
	return ret0, ret1
}

// GetMultiRegionAccessPointPolicyRequest indicates an expected call of GetMultiRegionAccessPointPolicyRequest
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointPolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointPolicyRequest), arg0)
}

// GetMultiRegionAccessPointPolicyStatus mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointPolicyStatus(arg0 *s3control.GetMultiRegionAccessPointPolicyStatusInput) (*s3control.GetMultiRegionAccessPointPolicyStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointPolicyStatus", arg0)
	ret0, _ := ret[0].(*s3control.GetMultiRegionAccessPointPolicyStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiRegionAccessPointPolicyStatus indicates an expected call of GetMultiRegionAccessPointPolicyStatus
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointPolicyStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointPolicyStatus", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointPolicyStatus), arg0)
}

// GetMultiRegionAccessPointPolicyStatusRequest mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointPolicyStatusRequest(arg0 *s3control.GetMultiRegionAccessPointPolicyStatusInput) (*request.Request, *s3control.GetMultiRegionAccessPointPolicyStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointPolicyStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetMultiRegionAccessPointPolicyStatusOutput)
	return ret0, ret1
}

// GetMultiRegionAccessPointPolicyStatusRequest indicates an expected call of GetMultiRegionAccessPointPolicyStatusRequest
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointPolicyStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointPolicyStatusRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointPolicyStatusRequest), arg0)
}

// GetMultiRegionAccessPointPolicyStatusWithContext mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointPolicyStatusWithContext(arg0 context.Context, arg1 *s3control.GetMultiRegionAccessPointPolicyStatusInput, arg2 ...request.Option) (*s3control.GetMultiRegionAccessPointPolicyStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointPolicyStatusWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetMultiRegionAccessPointPolicyStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiRegionAccessPointPolicyStatusWithContext indicates an expected call of GetMultiRegionAccessPointPolicyStatusWithContext
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointPolicyStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointPolicyStatusWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointPolicyStatusWithContext), varargs...)
}

// GetMultiRegionAccessPointPolicyWithContext mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointPolicyWithContext(arg0 context.Context, arg1 *s3control.GetMultiRegionAccessPointPolicyInput, arg2 ...request.Option) (*s3control.GetMultiRegionAccessPointPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetMultiRegionAccessPointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiRegionAccessPointPolicyWithContext indicates an expected call of GetMultiRegionAccessPointPolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointPolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointPolicyWithContext), varargs...)
}

// GetMultiRegionAccessPointRequest mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointRequest(arg0 *s3control.GetMultiRegionAccessPointInput) (*request.Request, *s3control.GetMultiRegionAccessPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetMultiRegionAccessPointOutput)
	return ret0, ret1
}

// GetMultiRegionAccessPointRequest indicates an expected call of GetMultiRegionAccessPointRequest
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointRequest), arg0)
}

// GetMultiRegionAccessPointRoutes mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointRoutes(arg0 *s3control.GetMultiRegionAccessPointRoutesInput) (*s3control.GetMultiRegionAccessPointRoutesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointRoutes", arg0)
	ret0, _ := ret[0].(*s3control.GetMultiRegionAccessPointRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiRegionAccessPointRoutes indicates an expected call of GetMultiRegionAccessPointRoutes
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointRoutes", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointRoutes), arg0)
}

// GetMultiRegionAccessPointRoutesRequest mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointRoutesRequest(arg0 *s3control.GetMultiRegionAccessPointRoutesInput) (*request.Request, *s3control.GetMultiRegionAccessPointRoutesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointRoutesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetMultiRegionAccessPointRoutesOutput)
	return ret0, ret1
}

// GetMultiRegionAccessPointRoutesRequest indicates an expected call of GetMultiRegionAccessPointRoutesRequest
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointRoutesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointRoutesRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointRoutesRequest), arg0)
}

// GetMultiRegionAccessPointRoutesWithContext mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointRoutesWithContext(arg0 context.Context, arg1 *s3control.GetMultiRegionAccessPointRoutesInput, arg2 ...request.Option) (*s3control.GetMultiRegionAccessPointRoutesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointRoutesWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetMultiRegionAccessPointRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiRegionAccessPointRoutesWithContext indicates an expected call of GetMultiRegionAccessPointRoutesWithContext
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointRoutesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointRoutesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointRoutesWithContext), varargs...)
}

// GetMultiRegionAccessPointWithContext mocks base method
func (m *MockS3ControlAPI) GetMultiRegionAccessPointWithContext(arg0 context.Context, arg1 *s3control.GetMultiRegionAccessPointInput, arg2 ...request.Option) (*s3control.GetMultiRegionAccessPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMultiRegionAccessPointWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetMultiRegionAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiRegionAccessPointWithContext indicates an expected call of GetMultiRegionAccessPointWithContext
func (mr *MockS3ControlAPIMockRecorder) GetMultiRegionAccessPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiRegionAccessPointWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetMultiRegionAccessPointWithContext), varargs...)
}

// GetPublicAccessBlock mocks base method
func (m *MockS3ControlAPI) GetPublicAccessBlock(arg0 *s3control.GetPublicAccessBlockInput) (*s3control.GetPublicAccessBlockOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicAccessBlock", arg0)
	ret0, _ := ret[0].(*s3control.GetPublicAccessBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicAccessBlock indicates an expected call of GetPublicAccessBlock
func (mr *MockS3ControlAPIMockRecorder) GetPublicAccessBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicAccessBlock", reflect.TypeOf((*MockS3ControlAPI)(nil).GetPublicAccessBlock), arg0)
}

// GetPublicAccessBlockRequest mocks base method
func (m *MockS3ControlAPI) GetPublicAccessBlockRequest(arg0 *s3control.GetPublicAccessBlockInput) (*request.Request, *s3control.GetPublicAccessBlockOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicAccessBlockRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetPublicAccessBlockOutput)
	return ret0, ret1
}

// GetPublicAccessBlockRequest indicates an expected call of GetPublicAccessBlockRequest
func (mr *MockS3ControlAPIMockRecorder) GetPublicAccessBlockRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicAccessBlockRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetPublicAccessBlockRequest), arg0)
}

// GetPublicAccessBlockWithContext mocks base method
func (m *MockS3ControlAPI) GetPublicAccessBlockWithContext(arg0 context.Context, arg1 *s3control.GetPublicAccessBlockInput, arg2 ...request.Option) (*s3control.GetPublicAccessBlockOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicAccessBlockWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetPublicAccessBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicAccessBlockWithContext indicates an expected call of GetPublicAccessBlockWithContext
func (mr *MockS3ControlAPIMockRecorder) GetPublicAccessBlockWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicAccessBlockWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetPublicAccessBlockWithContext), varargs...)
}

// GetStorageLensConfiguration mocks base method
func (m *MockS3ControlAPI) GetStorageLensConfiguration(arg0 *s3control.GetStorageLensConfigurationInput) (*s3control.GetStorageLensConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageLensConfiguration", arg0)
	ret0, _ := ret[0].(*s3control.GetStorageLensConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageLensConfiguration indicates an expected call of GetStorageLensConfiguration
func (mr *MockS3ControlAPIMockRecorder) GetStorageLensConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageLensConfiguration", reflect.TypeOf((*MockS3ControlAPI)(nil).GetStorageLensConfiguration), arg0)
}

// GetStorageLensConfigurationRequest mocks base method
func (m *MockS3ControlAPI) GetStorageLensConfigurationRequest(arg0 *s3control.GetStorageLensConfigurationInput) (*request.Request, *s3control.GetStorageLensConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageLensConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetStorageLensConfigurationOutput)
	return ret0, ret1
}

// GetStorageLensConfigurationRequest indicates an expected call of GetStorageLensConfigurationRequest
func (mr *MockS3ControlAPIMockRecorder) GetStorageLensConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageLensConfigurationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetStorageLensConfigurationRequest), arg0)
}

// GetStorageLensConfigurationTagging mocks base method
func (m *MockS3ControlAPI) GetStorageLensConfigurationTagging(arg0 *s3control.GetStorageLensConfigurationTaggingInput) (*s3control.GetStorageLensConfigurationTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageLensConfigurationTagging", arg0)
	ret0, _ := ret[0].(*s3control.GetStorageLensConfigurationTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageLensConfigurationTagging indicates an expected call of GetStorageLensConfigurationTagging
func (mr *MockS3ControlAPIMockRecorder) GetStorageLensConfigurationTagging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageLensConfigurationTagging", reflect.TypeOf((*MockS3ControlAPI)(nil).GetStorageLensConfigurationTagging), arg0)
}

// GetStorageLensConfigurationTaggingRequest mocks base method
func (m *MockS3ControlAPI) GetStorageLensConfigurationTaggingRequest(arg0 *s3control.GetStorageLensConfigurationTaggingInput) (*request.Request, *s3control.GetStorageLensConfigurationTaggingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageLensConfigurationTaggingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetStorageLensConfigurationTaggingOutput)
	return ret0, ret1
}

// GetStorageLensConfigurationTaggingRequest indicates an expected call of GetStorageLensConfigurationTaggingRequest
func (mr *MockS3ControlAPIMockRecorder) GetStorageLensConfigurationTaggingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageLensConfigurationTaggingRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetStorageLensConfigurationTaggingRequest), arg0)
}

// GetStorageLensConfigurationTaggingWithContext mocks base method
func (m *MockS3ControlAPI) GetStorageLensConfigurationTaggingWithContext(arg0 context.Context, arg1 *s3control.GetStorageLensConfigurationTaggingInput, arg2 ...request.Option) (*s3control.GetStorageLensConfigurationTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageLensConfigurationTaggingWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetStorageLensConfigurationTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageLensConfigurationTaggingWithContext indicates an expected call of GetStorageLensConfigurationTaggingWithContext
func (mr *MockS3ControlAPIMockRecorder) GetStorageLensConfigurationTaggingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageLensConfigurationTaggingWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetStorageLensConfigurationTaggingWithContext), varargs...)
}

// GetStorageLensConfigurationWithContext mocks base method
func (m *MockS3ControlAPI) GetStorageLensConfigurationWithContext(arg0 context.Context, arg1 *s3control.GetStorageLensConfigurationInput, arg2 ...request.Option) (*s3control.GetStorageLensConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageLensConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetStorageLensConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageLensConfigurationWithContext indicates an expected call of GetStorageLensConfigurationWithContext
func (mr *MockS3ControlAPIMockRecorder) GetStorageLensConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageLensConfigurationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetStorageLensConfigurationWithContext), varargs...)
}

// GetStorageLensGroup mocks base method
func (m *MockS3ControlAPI) GetStorageLensGroup(arg0 *s3control.GetStorageLensGroupInput) (*s3control.GetStorageLensGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageLensGroup", arg0)
	ret0, _ := ret[0].(*s3control.GetStorageLensGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageLensGroup indicates an expected call of GetStorageLensGroup
func (mr *MockS3ControlAPIMockRecorder) GetStorageLensGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageLensGroup", reflect.TypeOf((*MockS3ControlAPI)(nil).GetStorageLensGroup), arg0)
}

// GetStorageLensGroupRequest mocks base method
func (m *MockS3ControlAPI) GetStorageLensGroupRequest(arg0 *s3control.GetStorageLensGroupInput) (*request.Request, *s3control.GetStorageLensGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageLensGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.GetStorageLensGroupOutput)
	return ret0, ret1
}

// GetStorageLensGroupRequest indicates an expected call of GetStorageLensGroupRequest
func (mr *MockS3ControlAPIMockRecorder) GetStorageLensGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageLensGroupRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).GetStorageLensGroupRequest), arg0)
}

// GetStorageLensGroupWithContext mocks base method
func (m *MockS3ControlAPI) GetStorageLensGroupWithContext(arg0 context.Context, arg1 *s3control.GetStorageLensGroupInput, arg2 ...request.Option) (*s3control.GetStorageLensGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageLensGroupWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.GetStorageLensGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageLensGroupWithContext indicates an expected call of GetStorageLensGroupWithContext
func (mr *MockS3ControlAPIMockRecorder) GetStorageLensGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageLensGroupWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).GetStorageLensGroupWithContext), varargs...)
}

// ListAccessGrants mocks base method
func (m *MockS3ControlAPI) ListAccessGrants(arg0 *s3control.ListAccessGrantsInput) (*s3control.ListAccessGrantsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrants", arg0)
	ret0, _ := ret[0].(*s3control.ListAccessGrantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrants indicates an expected call of ListAccessGrants
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrants(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrants", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrants), arg0)
}

// ListAccessGrantsInstances mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsInstances(arg0 *s3control.ListAccessGrantsInstancesInput) (*s3control.ListAccessGrantsInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrantsInstances", arg0)
	ret0, _ := ret[0].(*s3control.ListAccessGrantsInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrantsInstances indicates an expected call of ListAccessGrantsInstances
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsInstances", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsInstances), arg0)
}

// ListAccessGrantsInstancesPages mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsInstancesPages(arg0 *s3control.ListAccessGrantsInstancesInput, arg1 func(*s3control.ListAccessGrantsInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrantsInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessGrantsInstancesPages indicates an expected call of ListAccessGrantsInstancesPages
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsInstancesPages", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsInstancesPages), arg0, arg1)
}

// ListAccessGrantsInstancesPagesWithContext mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsInstancesPagesWithContext(arg0 context.Context, arg1 *s3control.ListAccessGrantsInstancesInput, arg2 func(*s3control.ListAccessGrantsInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessGrantsInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessGrantsInstancesPagesWithContext indicates an expected call of ListAccessGrantsInstancesPagesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsInstancesPagesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsInstancesPagesWithContext), varargs...)
}

// ListAccessGrantsInstancesRequest mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsInstancesRequest(arg0 *s3control.ListAccessGrantsInstancesInput) (*request.Request, *s3control.ListAccessGrantsInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrantsInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListAccessGrantsInstancesOutput)
	return ret0, ret1
}

// ListAccessGrantsInstancesRequest indicates an expected call of ListAccessGrantsInstancesRequest
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsInstancesRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsInstancesRequest), arg0)
}

// ListAccessGrantsInstancesWithContext mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsInstancesWithContext(arg0 context.Context, arg1 *s3control.ListAccessGrantsInstancesInput, arg2 ...request.Option) (*s3control.ListAccessGrantsInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessGrantsInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListAccessGrantsInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrantsInstancesWithContext indicates an expected call of ListAccessGrantsInstancesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsInstancesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsInstancesWithContext), varargs...)
}

// ListAccessGrantsLocations mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsLocations(arg0 *s3control.ListAccessGrantsLocationsInput) (*s3control.ListAccessGrantsLocationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrantsLocations", arg0)
	ret0, _ := ret[0].(*s3control.ListAccessGrantsLocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrantsLocations indicates an expected call of ListAccessGrantsLocations
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsLocations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsLocations", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsLocations), arg0)
}

// ListAccessGrantsLocationsPages mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsLocationsPages(arg0 *s3control.ListAccessGrantsLocationsInput, arg1 func(*s3control.ListAccessGrantsLocationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrantsLocationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessGrantsLocationsPages indicates an expected call of ListAccessGrantsLocationsPages
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsLocationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsLocationsPages", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsLocationsPages), arg0, arg1)
}

// ListAccessGrantsLocationsPagesWithContext mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsLocationsPagesWithContext(arg0 context.Context, arg1 *s3control.ListAccessGrantsLocationsInput, arg2 func(*s3control.ListAccessGrantsLocationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessGrantsLocationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessGrantsLocationsPagesWithContext indicates an expected call of ListAccessGrantsLocationsPagesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsLocationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsLocationsPagesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsLocationsPagesWithContext), varargs...)
}

// ListAccessGrantsLocationsRequest mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsLocationsRequest(arg0 *s3control.ListAccessGrantsLocationsInput) (*request.Request, *s3control.ListAccessGrantsLocationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrantsLocationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListAccessGrantsLocationsOutput)
	return ret0, ret1
}

// ListAccessGrantsLocationsRequest indicates an expected call of ListAccessGrantsLocationsRequest
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsLocationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsLocationsRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsLocationsRequest), arg0)
}

// ListAccessGrantsLocationsWithContext mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsLocationsWithContext(arg0 context.Context, arg1 *s3control.ListAccessGrantsLocationsInput, arg2 ...request.Option) (*s3control.ListAccessGrantsLocationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessGrantsLocationsWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListAccessGrantsLocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrantsLocationsWithContext indicates an expected call of ListAccessGrantsLocationsWithContext
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsLocationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsLocationsWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsLocationsWithContext), varargs...)
}

// ListAccessGrantsPages mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsPages(arg0 *s3control.ListAccessGrantsInput, arg1 func(*s3control.ListAccessGrantsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrantsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessGrantsPages indicates an expected call of ListAccessGrantsPages
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsPages", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsPages), arg0, arg1)
}

// ListAccessGrantsPagesWithContext mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsPagesWithContext(arg0 context.Context, arg1 *s3control.ListAccessGrantsInput, arg2 func(*s3control.ListAccessGrantsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessGrantsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessGrantsPagesWithContext indicates an expected call of ListAccessGrantsPagesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsPagesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsPagesWithContext), varargs...)
}

// ListAccessGrantsRequest mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsRequest(arg0 *s3control.ListAccessGrantsInput) (*request.Request, *s3control.ListAccessGrantsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrantsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListAccessGrantsOutput)
	return ret0, ret1
}

// ListAccessGrantsRequest indicates an expected call of ListAccessGrantsRequest
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsRequest), arg0)
}

// ListAccessGrantsWithContext mocks base method
func (m *MockS3ControlAPI) ListAccessGrantsWithContext(arg0 context.Context, arg1 *s3control.ListAccessGrantsInput, arg2 ...request.Option) (*s3control.ListAccessGrantsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessGrantsWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListAccessGrantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrantsWithContext indicates an expected call of ListAccessGrantsWithContext
func (mr *MockS3ControlAPIMockRecorder) ListAccessGrantsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrantsWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessGrantsWithContext), varargs...)
}

// ListAccessPoints mocks base method
func (m *MockS3ControlAPI) ListAccessPoints(arg0 *s3control.ListAccessPointsInput) (*s3control.ListAccessPointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPoints", arg0)
	ret0, _ := ret[0].(*s3control.ListAccessPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPoints indicates an expected call of ListAccessPoints
func (mr *MockS3ControlAPIMockRecorder) ListAccessPoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPoints", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessPoints), arg0)
}

// ListAccessPointsForObjectLambda mocks base method
func (m *MockS3ControlAPI) ListAccessPointsForObjectLambda(arg0 *s3control.ListAccessPointsForObjectLambdaInput) (*s3control.ListAccessPointsForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPointsForObjectLambda", arg0)
	ret0, _ := ret[0].(*s3control.ListAccessPointsForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPointsForObjectLambda indicates an expected call of ListAccessPointsForObjectLambda
func (mr *MockS3ControlAPIMockRecorder) ListAccessPointsForObjectLambda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPointsForObjectLambda", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessPointsForObjectLambda), arg0)
}

// ListAccessPointsForObjectLambdaPages mocks base method
func (m *MockS3ControlAPI) ListAccessPointsForObjectLambdaPages(arg0 *s3control.ListAccessPointsForObjectLambdaInput, arg1 func(*s3control.ListAccessPointsForObjectLambdaOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPointsForObjectLambdaPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessPointsForObjectLambdaPages indicates an expected call of ListAccessPointsForObjectLambdaPages
func (mr *MockS3ControlAPIMockRecorder) ListAccessPointsForObjectLambdaPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPointsForObjectLambdaPages", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessPointsForObjectLambdaPages), arg0, arg1)
}

// ListAccessPointsForObjectLambdaPagesWithContext mocks base method
func (m *MockS3ControlAPI) ListAccessPointsForObjectLambdaPagesWithContext(arg0 context.Context, arg1 *s3control.ListAccessPointsForObjectLambdaInput, arg2 func(*s3control.ListAccessPointsForObjectLambdaOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPointsForObjectLambdaPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessPointsForObjectLambdaPagesWithContext indicates an expected call of ListAccessPointsForObjectLambdaPagesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListAccessPointsForObjectLambdaPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPointsForObjectLambdaPagesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessPointsForObjectLambdaPagesWithContext), varargs...)
}

// ListAccessPointsForObjectLambdaRequest mocks base method
func (m *MockS3ControlAPI) ListAccessPointsForObjectLambdaRequest(arg0 *s3control.ListAccessPointsForObjectLambdaInput) (*request.Request, *s3control.ListAccessPointsForObjectLambdaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPointsForObjectLambdaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListAccessPointsForObjectLambdaOutput)
	return ret0, ret1
}

// ListAccessPointsForObjectLambdaRequest indicates an expected call of ListAccessPointsForObjectLambdaRequest
func (mr *MockS3ControlAPIMockRecorder) ListAccessPointsForObjectLambdaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPointsForObjectLambdaRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessPointsForObjectLambdaRequest), arg0)
}

// ListAccessPointsForObjectLambdaWithContext mocks base method
func (m *MockS3ControlAPI) ListAccessPointsForObjectLambdaWithContext(arg0 context.Context, arg1 *s3control.ListAccessPointsForObjectLambdaInput, arg2 ...request.Option) (*s3control.ListAccessPointsForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPointsForObjectLambdaWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListAccessPointsForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPointsForObjectLambdaWithContext indicates an expected call of ListAccessPointsForObjectLambdaWithContext
func (mr *MockS3ControlAPIMockRecorder) ListAccessPointsForObjectLambdaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPointsForObjectLambdaWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessPointsForObjectLambdaWithContext), varargs...)
}

// ListAccessPointsPages mocks base method
func (m *MockS3ControlAPI) ListAccessPointsPages(arg0 *s3control.ListAccessPointsInput, arg1 func(*s3control.ListAccessPointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessPointsPages indicates an expected call of ListAccessPointsPages
func (mr *MockS3ControlAPIMockRecorder) ListAccessPointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPointsPages", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessPointsPages), arg0, arg1)
}

// ListAccessPointsPagesWithContext mocks base method
func (m *MockS3ControlAPI) ListAccessPointsPagesWithContext(arg0 context.Context, arg1 *s3control.ListAccessPointsInput, arg2 func(*s3control.ListAccessPointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessPointsPagesWithContext indicates an expected call of ListAccessPointsPagesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListAccessPointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPointsPagesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessPointsPagesWithContext), varargs...)
}

// ListAccessPointsRequest mocks base method
func (m *MockS3ControlAPI) ListAccessPointsRequest(arg0 *s3control.ListAccessPointsInput) (*request.Request, *s3control.ListAccessPointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListAccessPointsOutput)
	return ret0, ret1
}

// ListAccessPointsRequest indicates an expected call of ListAccessPointsRequest
func (mr *MockS3ControlAPIMockRecorder) ListAccessPointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPointsRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessPointsRequest), arg0)
}

// ListAccessPointsWithContext mocks base method
func (m *MockS3ControlAPI) ListAccessPointsWithContext(arg0 context.Context, arg1 *s3control.ListAccessPointsInput, arg2 ...request.Option) (*s3control.ListAccessPointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPointsWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListAccessPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPointsWithContext indicates an expected call of ListAccessPointsWithContext
func (mr *MockS3ControlAPIMockRecorder) ListAccessPointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPointsWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListAccessPointsWithContext), varargs...)
}

// ListJobs mocks base method
func (m *MockS3ControlAPI) ListJobs(arg0 *s3control.ListJobsInput) (*s3control.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*s3control.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs
func (mr *MockS3ControlAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockS3ControlAPI)(nil).ListJobs), arg0)
}

// ListJobsPages mocks base method
func (m *MockS3ControlAPI) ListJobsPages(arg0 *s3control.ListJobsInput, arg1 func(*s3control.ListJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPages indicates an expected call of ListJobsPages
func (mr *MockS3ControlAPIMockRecorder) ListJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPages", reflect.TypeOf((*MockS3ControlAPI)(nil).ListJobsPages), arg0, arg1)
}

// ListJobsPagesWithContext mocks base method
func (m *MockS3ControlAPI) ListJobsPagesWithContext(arg0 context.Context, arg1 *s3control.ListJobsInput, arg2 func(*s3control.ListJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPagesWithContext indicates an expected call of ListJobsPagesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPagesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListJobsPagesWithContext), varargs...)
}

// ListJobsRequest mocks base method
func (m *MockS3ControlAPI) ListJobsRequest(arg0 *s3control.ListJobsInput) (*request.Request, *s3control.ListJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest
func (mr *MockS3ControlAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method
func (m *MockS3ControlAPI) ListJobsWithContext(arg0 context.Context, arg1 *s3control.ListJobsInput, arg2 ...request.Option) (*s3control.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext
func (mr *MockS3ControlAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListJobsWithContext), varargs...)
}

// ListMultiRegionAccessPoints mocks base method
func (m *MockS3ControlAPI) ListMultiRegionAccessPoints(arg0 *s3control.ListMultiRegionAccessPointsInput) (*s3control.ListMultiRegionAccessPointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMultiRegionAccessPoints", arg0)
	ret0, _ := ret[0].(*s3control.ListMultiRegionAccessPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultiRegionAccessPoints indicates an expected call of ListMultiRegionAccessPoints
func (mr *MockS3ControlAPIMockRecorder) ListMultiRegionAccessPoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultiRegionAccessPoints", reflect.TypeOf((*MockS3ControlAPI)(nil).ListMultiRegionAccessPoints), arg0)
}

// ListMultiRegionAccessPointsPages mocks base method
func (m *MockS3ControlAPI) ListMultiRegionAccessPointsPages(arg0 *s3control.ListMultiRegionAccessPointsInput, arg1 func(*s3control.ListMultiRegionAccessPointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMultiRegionAccessPointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMultiRegionAccessPointsPages indicates an expected call of ListMultiRegionAccessPointsPages
func (mr *MockS3ControlAPIMockRecorder) ListMultiRegionAccessPointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultiRegionAccessPointsPages", reflect.TypeOf((*MockS3ControlAPI)(nil).ListMultiRegionAccessPointsPages), arg0, arg1)
}

// ListMultiRegionAccessPointsPagesWithContext mocks base method
func (m *MockS3ControlAPI) ListMultiRegionAccessPointsPagesWithContext(arg0 context.Context, arg1 *s3control.ListMultiRegionAccessPointsInput, arg2 func(*s3control.ListMultiRegionAccessPointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMultiRegionAccessPointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMultiRegionAccessPointsPagesWithContext indicates an expected call of ListMultiRegionAccessPointsPagesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListMultiRegionAccessPointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultiRegionAccessPointsPagesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListMultiRegionAccessPointsPagesWithContext), varargs...)
}

// ListMultiRegionAccessPointsRequest mocks base method
func (m *MockS3ControlAPI) ListMultiRegionAccessPointsRequest(arg0 *s3control.ListMultiRegionAccessPointsInput) (*request.Request, *s3control.ListMultiRegionAccessPointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMultiRegionAccessPointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListMultiRegionAccessPointsOutput)
	return ret0, ret1
}

// ListMultiRegionAccessPointsRequest indicates an expected call of ListMultiRegionAccessPointsRequest
func (mr *MockS3ControlAPIMockRecorder) ListMultiRegionAccessPointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultiRegionAccessPointsRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListMultiRegionAccessPointsRequest), arg0)
}

// ListMultiRegionAccessPointsWithContext mocks base method
func (m *MockS3ControlAPI) ListMultiRegionAccessPointsWithContext(arg0 context.Context, arg1 *s3control.ListMultiRegionAccessPointsInput, arg2 ...request.Option) (*s3control.ListMultiRegionAccessPointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMultiRegionAccessPointsWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListMultiRegionAccessPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultiRegionAccessPointsWithContext indicates an expected call of ListMultiRegionAccessPointsWithContext
func (mr *MockS3ControlAPIMockRecorder) ListMultiRegionAccessPointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultiRegionAccessPointsWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListMultiRegionAccessPointsWithContext), varargs...)
}

// ListRegionalBuckets mocks base method
func (m *MockS3ControlAPI) ListRegionalBuckets(arg0 *s3control.ListRegionalBucketsInput) (*s3control.ListRegionalBucketsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegionalBuckets", arg0)
	ret0, _ := ret[0].(*s3control.ListRegionalBucketsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegionalBuckets indicates an expected call of ListRegionalBuckets
func (mr *MockS3ControlAPIMockRecorder) ListRegionalBuckets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionalBuckets", reflect.TypeOf((*MockS3ControlAPI)(nil).ListRegionalBuckets), arg0)
}

// ListRegionalBucketsPages mocks base method
func (m *MockS3ControlAPI) ListRegionalBucketsPages(arg0 *s3control.ListRegionalBucketsInput, arg1 func(*s3control.ListRegionalBucketsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegionalBucketsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegionalBucketsPages indicates an expected call of ListRegionalBucketsPages
func (mr *MockS3ControlAPIMockRecorder) ListRegionalBucketsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionalBucketsPages", reflect.TypeOf((*MockS3ControlAPI)(nil).ListRegionalBucketsPages), arg0, arg1)
}

// ListRegionalBucketsPagesWithContext mocks base method
func (m *MockS3ControlAPI) ListRegionalBucketsPagesWithContext(arg0 context.Context, arg1 *s3control.ListRegionalBucketsInput, arg2 func(*s3control.ListRegionalBucketsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegionalBucketsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegionalBucketsPagesWithContext indicates an expected call of ListRegionalBucketsPagesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListRegionalBucketsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionalBucketsPagesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListRegionalBucketsPagesWithContext), varargs...)
}

// ListRegionalBucketsRequest mocks base method
func (m *MockS3ControlAPI) ListRegionalBucketsRequest(arg0 *s3control.ListRegionalBucketsInput) (*request.Request, *s3control.ListRegionalBucketsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegionalBucketsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListRegionalBucketsOutput)
	return ret0, ret1
}

// ListRegionalBucketsRequest indicates an expected call of ListRegionalBucketsRequest
func (mr *MockS3ControlAPIMockRecorder) ListRegionalBucketsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionalBucketsRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListRegionalBucketsRequest), arg0)
}

// ListRegionalBucketsWithContext mocks base method
func (m *MockS3ControlAPI) ListRegionalBucketsWithContext(arg0 context.Context, arg1 *s3control.ListRegionalBucketsInput, arg2 ...request.Option) (*s3control.ListRegionalBucketsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegionalBucketsWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListRegionalBucketsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegionalBucketsWithContext indicates an expected call of ListRegionalBucketsWithContext
func (mr *MockS3ControlAPIMockRecorder) ListRegionalBucketsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionalBucketsWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListRegionalBucketsWithContext), varargs...)
}

// ListStorageLensConfigurations mocks base method
func (m *MockS3ControlAPI) ListStorageLensConfigurations(arg0 *s3control.ListStorageLensConfigurationsInput) (*s3control.ListStorageLensConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageLensConfigurations", arg0)
	ret0, _ := ret[0].(*s3control.ListStorageLensConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageLensConfigurations indicates an expected call of ListStorageLensConfigurations
func (mr *MockS3ControlAPIMockRecorder) ListStorageLensConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageLensConfigurations", reflect.TypeOf((*MockS3ControlAPI)(nil).ListStorageLensConfigurations), arg0)
}

// ListStorageLensConfigurationsPages mocks base method
func (m *MockS3ControlAPI) ListStorageLensConfigurationsPages(arg0 *s3control.ListStorageLensConfigurationsInput, arg1 func(*s3control.ListStorageLensConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageLensConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStorageLensConfigurationsPages indicates an expected call of ListStorageLensConfigurationsPages
func (mr *MockS3ControlAPIMockRecorder) ListStorageLensConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageLensConfigurationsPages", reflect.TypeOf((*MockS3ControlAPI)(nil).ListStorageLensConfigurationsPages), arg0, arg1)
}

// ListStorageLensConfigurationsPagesWithContext mocks base method
func (m *MockS3ControlAPI) ListStorageLensConfigurationsPagesWithContext(arg0 context.Context, arg1 *s3control.ListStorageLensConfigurationsInput, arg2 func(*s3control.ListStorageLensConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStorageLensConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStorageLensConfigurationsPagesWithContext indicates an expected call of ListStorageLensConfigurationsPagesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListStorageLensConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageLensConfigurationsPagesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListStorageLensConfigurationsPagesWithContext), varargs...)
}

// ListStorageLensConfigurationsRequest mocks base method
func (m *MockS3ControlAPI) ListStorageLensConfigurationsRequest(arg0 *s3control.ListStorageLensConfigurationsInput) (*request.Request, *s3control.ListStorageLensConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageLensConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListStorageLensConfigurationsOutput)
	return ret0, ret1
}

// ListStorageLensConfigurationsRequest indicates an expected call of ListStorageLensConfigurationsRequest
func (mr *MockS3ControlAPIMockRecorder) ListStorageLensConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageLensConfigurationsRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListStorageLensConfigurationsRequest), arg0)
}

// ListStorageLensConfigurationsWithContext mocks base method
func (m *MockS3ControlAPI) ListStorageLensConfigurationsWithContext(arg0 context.Context, arg1 *s3control.ListStorageLensConfigurationsInput, arg2 ...request.Option) (*s3control.ListStorageLensConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStorageLensConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListStorageLensConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageLensConfigurationsWithContext indicates an expected call of ListStorageLensConfigurationsWithContext
func (mr *MockS3ControlAPIMockRecorder) ListStorageLensConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageLensConfigurationsWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListStorageLensConfigurationsWithContext), varargs...)
}

// ListStorageLensGroups mocks base method
func (m *MockS3ControlAPI) ListStorageLensGroups(arg0 *s3control.ListStorageLensGroupsInput) (*s3control.ListStorageLensGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageLensGroups", arg0)
	ret0, _ := ret[0].(*s3control.ListStorageLensGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageLensGroups indicates an expected call of ListStorageLensGroups
func (mr *MockS3ControlAPIMockRecorder) ListStorageLensGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageLensGroups", reflect.TypeOf((*MockS3ControlAPI)(nil).ListStorageLensGroups), arg0)
}

// ListStorageLensGroupsPages mocks base method
func (m *MockS3ControlAPI) ListStorageLensGroupsPages(arg0 *s3control.ListStorageLensGroupsInput, arg1 func(*s3control.ListStorageLensGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageLensGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStorageLensGroupsPages indicates an expected call of ListStorageLensGroupsPages
func (mr *MockS3ControlAPIMockRecorder) ListStorageLensGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageLensGroupsPages", reflect.TypeOf((*MockS3ControlAPI)(nil).ListStorageLensGroupsPages), arg0, arg1)
}

// ListStorageLensGroupsPagesWithContext mocks base method
func (m *MockS3ControlAPI) ListStorageLensGroupsPagesWithContext(arg0 context.Context, arg1 *s3control.ListStorageLensGroupsInput, arg2 func(*s3control.ListStorageLensGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStorageLensGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStorageLensGroupsPagesWithContext indicates an expected call of ListStorageLensGroupsPagesWithContext
func (mr *MockS3ControlAPIMockRecorder) ListStorageLensGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageLensGroupsPagesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListStorageLensGroupsPagesWithContext), varargs...)
}

// ListStorageLensGroupsRequest mocks base method
func (m *MockS3ControlAPI) ListStorageLensGroupsRequest(arg0 *s3control.ListStorageLensGroupsInput) (*request.Request, *s3control.ListStorageLensGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageLensGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListStorageLensGroupsOutput)
	return ret0, ret1
}

// ListStorageLensGroupsRequest indicates an expected call of ListStorageLensGroupsRequest
func (mr *MockS3ControlAPIMockRecorder) ListStorageLensGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageLensGroupsRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListStorageLensGroupsRequest), arg0)
}

// ListStorageLensGroupsWithContext mocks base method
func (m *MockS3ControlAPI) ListStorageLensGroupsWithContext(arg0 context.Context, arg1 *s3control.ListStorageLensGroupsInput, arg2 ...request.Option) (*s3control.ListStorageLensGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStorageLensGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListStorageLensGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageLensGroupsWithContext indicates an expected call of ListStorageLensGroupsWithContext
func (mr *MockS3ControlAPIMockRecorder) ListStorageLensGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageLensGroupsWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListStorageLensGroupsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockS3ControlAPI) ListTagsForResource(arg0 *s3control.ListTagsForResourceInput) (*s3control.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*s3control.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockS3ControlAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockS3ControlAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockS3ControlAPI) ListTagsForResourceRequest(arg0 *s3control.ListTagsForResourceInput) (*request.Request, *s3control.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockS3ControlAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockS3ControlAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *s3control.ListTagsForResourceInput, arg2 ...request.Option) (*s3control.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockS3ControlAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutAccessGrantsInstanceResourcePolicy mocks base method
func (m *MockS3ControlAPI) PutAccessGrantsInstanceResourcePolicy(arg0 *s3control.PutAccessGrantsInstanceResourcePolicyInput) (*s3control.PutAccessGrantsInstanceResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccessGrantsInstanceResourcePolicy", arg0)
	ret0, _ := ret[0].(*s3control.PutAccessGrantsInstanceResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccessGrantsInstanceResourcePolicy indicates an expected call of PutAccessGrantsInstanceResourcePolicy
func (mr *MockS3ControlAPIMockRecorder) PutAccessGrantsInstanceResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessGrantsInstanceResourcePolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessGrantsInstanceResourcePolicy), arg0)
}

// PutAccessGrantsInstanceResourcePolicyRequest mocks base method
func (m *MockS3ControlAPI) PutAccessGrantsInstanceResourcePolicyRequest(arg0 *s3control.PutAccessGrantsInstanceResourcePolicyInput) (*request.Request, *s3control.PutAccessGrantsInstanceResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccessGrantsInstanceResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutAccessGrantsInstanceResourcePolicyOutput)
	return ret0, ret1
}

// PutAccessGrantsInstanceResourcePolicyRequest indicates an expected call of PutAccessGrantsInstanceResourcePolicyRequest
func (mr *MockS3ControlAPIMockRecorder) PutAccessGrantsInstanceResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessGrantsInstanceResourcePolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessGrantsInstanceResourcePolicyRequest), arg0)
}

// PutAccessGrantsInstanceResourcePolicyWithContext mocks base method
func (m *MockS3ControlAPI) PutAccessGrantsInstanceResourcePolicyWithContext(arg0 context.Context, arg1 *s3control.PutAccessGrantsInstanceResourcePolicyInput, arg2 ...request.Option) (*s3control.PutAccessGrantsInstanceResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccessGrantsInstanceResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutAccessGrantsInstanceResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccessGrantsInstanceResourcePolicyWithContext indicates an expected call of PutAccessGrantsInstanceResourcePolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) PutAccessGrantsInstanceResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessGrantsInstanceResourcePolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessGrantsInstanceResourcePolicyWithContext), varargs...)
}

// PutAccessPointConfigurationForObjectLambda mocks base method
func (m *MockS3ControlAPI) PutAccessPointConfigurationForObjectLambda(arg0 *s3control.PutAccessPointConfigurationForObjectLambdaInput) (*s3control.PutAccessPointConfigurationForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccessPointConfigurationForObjectLambda", arg0)
	ret0, _ := ret[0].(*s3control.PutAccessPointConfigurationForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccessPointConfigurationForObjectLambda indicates an expected call of PutAccessPointConfigurationForObjectLambda
func (mr *MockS3ControlAPIMockRecorder) PutAccessPointConfigurationForObjectLambda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessPointConfigurationForObjectLambda", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessPointConfigurationForObjectLambda), arg0)
}

// PutAccessPointConfigurationForObjectLambdaRequest mocks base method
func (m *MockS3ControlAPI) PutAccessPointConfigurationForObjectLambdaRequest(arg0 *s3control.PutAccessPointConfigurationForObjectLambdaInput) (*request.Request, *s3control.PutAccessPointConfigurationForObjectLambdaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccessPointConfigurationForObjectLambdaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutAccessPointConfigurationForObjectLambdaOutput)
	return ret0, ret1
}

// PutAccessPointConfigurationForObjectLambdaRequest indicates an expected call of PutAccessPointConfigurationForObjectLambdaRequest
func (mr *MockS3ControlAPIMockRecorder) PutAccessPointConfigurationForObjectLambdaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessPointConfigurationForObjectLambdaRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessPointConfigurationForObjectLambdaRequest), arg0)
}

// PutAccessPointConfigurationForObjectLambdaWithContext mocks base method
func (m *MockS3ControlAPI) PutAccessPointConfigurationForObjectLambdaWithContext(arg0 context.Context, arg1 *s3control.PutAccessPointConfigurationForObjectLambdaInput, arg2 ...request.Option) (*s3control.PutAccessPointConfigurationForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccessPointConfigurationForObjectLambdaWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutAccessPointConfigurationForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccessPointConfigurationForObjectLambdaWithContext indicates an expected call of PutAccessPointConfigurationForObjectLambdaWithContext
func (mr *MockS3ControlAPIMockRecorder) PutAccessPointConfigurationForObjectLambdaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessPointConfigurationForObjectLambdaWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessPointConfigurationForObjectLambdaWithContext), varargs...)
}

// PutAccessPointPolicy mocks base method
func (m *MockS3ControlAPI) PutAccessPointPolicy(arg0 *s3control.PutAccessPointPolicyInput) (*s3control.PutAccessPointPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccessPointPolicy", arg0)
	ret0, _ := ret[0].(*s3control.PutAccessPointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccessPointPolicy indicates an expected call of PutAccessPointPolicy
func (mr *MockS3ControlAPIMockRecorder) PutAccessPointPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessPointPolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessPointPolicy), arg0)
}

// PutAccessPointPolicyForObjectLambda mocks base method
func (m *MockS3ControlAPI) PutAccessPointPolicyForObjectLambda(arg0 *s3control.PutAccessPointPolicyForObjectLambdaInput) (*s3control.PutAccessPointPolicyForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccessPointPolicyForObjectLambda", arg0)
	ret0, _ := ret[0].(*s3control.PutAccessPointPolicyForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccessPointPolicyForObjectLambda indicates an expected call of PutAccessPointPolicyForObjectLambda
func (mr *MockS3ControlAPIMockRecorder) PutAccessPointPolicyForObjectLambda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessPointPolicyForObjectLambda", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessPointPolicyForObjectLambda), arg0)
}

// PutAccessPointPolicyForObjectLambdaRequest mocks base method
func (m *MockS3ControlAPI) PutAccessPointPolicyForObjectLambdaRequest(arg0 *s3control.PutAccessPointPolicyForObjectLambdaInput) (*request.Request, *s3control.PutAccessPointPolicyForObjectLambdaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccessPointPolicyForObjectLambdaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutAccessPointPolicyForObjectLambdaOutput)
	return ret0, ret1
}

// PutAccessPointPolicyForObjectLambdaRequest indicates an expected call of PutAccessPointPolicyForObjectLambdaRequest
func (mr *MockS3ControlAPIMockRecorder) PutAccessPointPolicyForObjectLambdaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessPointPolicyForObjectLambdaRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessPointPolicyForObjectLambdaRequest), arg0)
}

// PutAccessPointPolicyForObjectLambdaWithContext mocks base method
func (m *MockS3ControlAPI) PutAccessPointPolicyForObjectLambdaWithContext(arg0 context.Context, arg1 *s3control.PutAccessPointPolicyForObjectLambdaInput, arg2 ...request.Option) (*s3control.PutAccessPointPolicyForObjectLambdaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccessPointPolicyForObjectLambdaWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutAccessPointPolicyForObjectLambdaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccessPointPolicyForObjectLambdaWithContext indicates an expected call of PutAccessPointPolicyForObjectLambdaWithContext
func (mr *MockS3ControlAPIMockRecorder) PutAccessPointPolicyForObjectLambdaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessPointPolicyForObjectLambdaWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessPointPolicyForObjectLambdaWithContext), varargs...)
}

// PutAccessPointPolicyRequest mocks base method
func (m *MockS3ControlAPI) PutAccessPointPolicyRequest(arg0 *s3control.PutAccessPointPolicyInput) (*request.Request, *s3control.PutAccessPointPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccessPointPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutAccessPointPolicyOutput)
	return ret0, ret1
}

// PutAccessPointPolicyRequest indicates an expected call of PutAccessPointPolicyRequest
func (mr *MockS3ControlAPIMockRecorder) PutAccessPointPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessPointPolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessPointPolicyRequest), arg0)
}

// PutAccessPointPolicyWithContext mocks base method
func (m *MockS3ControlAPI) PutAccessPointPolicyWithContext(arg0 context.Context, arg1 *s3control.PutAccessPointPolicyInput, arg2 ...request.Option) (*s3control.PutAccessPointPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccessPointPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutAccessPointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccessPointPolicyWithContext indicates an expected call of PutAccessPointPolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) PutAccessPointPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessPointPolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutAccessPointPolicyWithContext), varargs...)
}

// PutBucketLifecycleConfiguration mocks base method
func (m *MockS3ControlAPI) PutBucketLifecycleConfiguration(arg0 *s3control.PutBucketLifecycleConfigurationInput) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketLifecycleConfiguration", arg0)
	ret0, _ := ret[0].(*s3control.PutBucketLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketLifecycleConfiguration indicates an expected call of PutBucketLifecycleConfiguration
func (mr *MockS3ControlAPIMockRecorder) PutBucketLifecycleConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketLifecycleConfiguration", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketLifecycleConfiguration), arg0)
}

// PutBucketLifecycleConfigurationRequest mocks base method
func (m *MockS3ControlAPI) PutBucketLifecycleConfigurationRequest(arg0 *s3control.PutBucketLifecycleConfigurationInput) (*request.Request, *s3control.PutBucketLifecycleConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketLifecycleConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutBucketLifecycleConfigurationOutput)
	return ret0, ret1
}

// PutBucketLifecycleConfigurationRequest indicates an expected call of PutBucketLifecycleConfigurationRequest
func (mr *MockS3ControlAPIMockRecorder) PutBucketLifecycleConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketLifecycleConfigurationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketLifecycleConfigurationRequest), arg0)
}

// PutBucketLifecycleConfigurationWithContext mocks base method
func (m *MockS3ControlAPI) PutBucketLifecycleConfigurationWithContext(arg0 context.Context, arg1 *s3control.PutBucketLifecycleConfigurationInput, arg2 ...request.Option) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBucketLifecycleConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutBucketLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketLifecycleConfigurationWithContext indicates an expected call of PutBucketLifecycleConfigurationWithContext
func (mr *MockS3ControlAPIMockRecorder) PutBucketLifecycleConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketLifecycleConfigurationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketLifecycleConfigurationWithContext), varargs...)
}

// PutBucketPolicy mocks base method
func (m *MockS3ControlAPI) PutBucketPolicy(arg0 *s3control.PutBucketPolicyInput) (*s3control.PutBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketPolicy", arg0)
	ret0, _ := ret[0].(*s3control.PutBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketPolicy indicates an expected call of PutBucketPolicy
func (mr *MockS3ControlAPIMockRecorder) PutBucketPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketPolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketPolicy), arg0)
}

// PutBucketPolicyRequest mocks base method
func (m *MockS3ControlAPI) PutBucketPolicyRequest(arg0 *s3control.PutBucketPolicyInput) (*request.Request, *s3control.PutBucketPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutBucketPolicyOutput)
	return ret0, ret1
}

// PutBucketPolicyRequest indicates an expected call of PutBucketPolicyRequest
func (mr *MockS3ControlAPIMockRecorder) PutBucketPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketPolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketPolicyRequest), arg0)
}

// PutBucketPolicyWithContext mocks base method
func (m *MockS3ControlAPI) PutBucketPolicyWithContext(arg0 context.Context, arg1 *s3control.PutBucketPolicyInput, arg2 ...request.Option) (*s3control.PutBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBucketPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketPolicyWithContext indicates an expected call of PutBucketPolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) PutBucketPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketPolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketPolicyWithContext), varargs...)
}

// PutBucketReplication mocks base method
func (m *MockS3ControlAPI) PutBucketReplication(arg0 *s3control.PutBucketReplicationInput) (*s3control.PutBucketReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketReplication", arg0)
	ret0, _ := ret[0].(*s3control.PutBucketReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketReplication indicates an expected call of PutBucketReplication
func (mr *MockS3ControlAPIMockRecorder) PutBucketReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketReplication", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketReplication), arg0)
}

// PutBucketReplicationRequest mocks base method
func (m *MockS3ControlAPI) PutBucketReplicationRequest(arg0 *s3control.PutBucketReplicationInput) (*request.Request, *s3control.PutBucketReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutBucketReplicationOutput)
	return ret0, ret1
}

// PutBucketReplicationRequest indicates an expected call of PutBucketReplicationRequest
func (mr *MockS3ControlAPIMockRecorder) PutBucketReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketReplicationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketReplicationRequest), arg0)
}

// PutBucketReplicationWithContext mocks base method
func (m *MockS3ControlAPI) PutBucketReplicationWithContext(arg0 context.Context, arg1 *s3control.PutBucketReplicationInput, arg2 ...request.Option) (*s3control.PutBucketReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBucketReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutBucketReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketReplicationWithContext indicates an expected call of PutBucketReplicationWithContext
func (mr *MockS3ControlAPIMockRecorder) PutBucketReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketReplicationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketReplicationWithContext), varargs...)
}

// PutBucketTagging mocks base method
func (m *MockS3ControlAPI) PutBucketTagging(arg0 *s3control.PutBucketTaggingInput) (*s3control.PutBucketTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketTagging", arg0)
	ret0, _ := ret[0].(*s3control.PutBucketTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketTagging indicates an expected call of PutBucketTagging
func (mr *MockS3ControlAPIMockRecorder) PutBucketTagging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketTagging", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketTagging), arg0)
}

// PutBucketTaggingRequest mocks base method
func (m *MockS3ControlAPI) PutBucketTaggingRequest(arg0 *s3control.PutBucketTaggingInput) (*request.Request, *s3control.PutBucketTaggingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketTaggingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutBucketTaggingOutput)
	return ret0, ret1
}

// PutBucketTaggingRequest indicates an expected call of PutBucketTaggingRequest
func (mr *MockS3ControlAPIMockRecorder) PutBucketTaggingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketTaggingRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketTaggingRequest), arg0)
}

// PutBucketTaggingWithContext mocks base method
func (m *MockS3ControlAPI) PutBucketTaggingWithContext(arg0 context.Context, arg1 *s3control.PutBucketTaggingInput, arg2 ...request.Option) (*s3control.PutBucketTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBucketTaggingWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutBucketTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketTaggingWithContext indicates an expected call of PutBucketTaggingWithContext
func (mr *MockS3ControlAPIMockRecorder) PutBucketTaggingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketTaggingWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketTaggingWithContext), varargs...)
}

// PutBucketVersioning mocks base method
func (m *MockS3ControlAPI) PutBucketVersioning(arg0 *s3control.PutBucketVersioningInput) (*s3control.PutBucketVersioningOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketVersioning", arg0)
	ret0, _ := ret[0].(*s3control.PutBucketVersioningOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketVersioning indicates an expected call of PutBucketVersioning
func (mr *MockS3ControlAPIMockRecorder) PutBucketVersioning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketVersioning", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketVersioning), arg0)
}

// PutBucketVersioningRequest mocks base method
func (m *MockS3ControlAPI) PutBucketVersioningRequest(arg0 *s3control.PutBucketVersioningInput) (*request.Request, *s3control.PutBucketVersioningOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketVersioningRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutBucketVersioningOutput)
	return ret0, ret1
}

// PutBucketVersioningRequest indicates an expected call of PutBucketVersioningRequest
func (mr *MockS3ControlAPIMockRecorder) PutBucketVersioningRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketVersioningRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketVersioningRequest), arg0)
}

// PutBucketVersioningWithContext mocks base method
func (m *MockS3ControlAPI) PutBucketVersioningWithContext(arg0 context.Context, arg1 *s3control.PutBucketVersioningInput, arg2 ...request.Option) (*s3control.PutBucketVersioningOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBucketVersioningWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutBucketVersioningOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketVersioningWithContext indicates an expected call of PutBucketVersioningWithContext
func (mr *MockS3ControlAPIMockRecorder) PutBucketVersioningWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketVersioningWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutBucketVersioningWithContext), varargs...)
}

// PutJobTagging mocks base method
func (m *MockS3ControlAPI) PutJobTagging(arg0 *s3control.PutJobTaggingInput) (*s3control.PutJobTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutJobTagging", arg0)
	ret0, _ := ret[0].(*s3control.PutJobTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutJobTagging indicates an expected call of PutJobTagging
func (mr *MockS3ControlAPIMockRecorder) PutJobTagging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutJobTagging", reflect.TypeOf((*MockS3ControlAPI)(nil).PutJobTagging), arg0)
}

// PutJobTaggingRequest mocks base method
func (m *MockS3ControlAPI) PutJobTaggingRequest(arg0 *s3control.PutJobTaggingInput) (*request.Request, *s3control.PutJobTaggingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutJobTaggingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutJobTaggingOutput)
	return ret0, ret1
}

// PutJobTaggingRequest indicates an expected call of PutJobTaggingRequest
func (mr *MockS3ControlAPIMockRecorder) PutJobTaggingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutJobTaggingRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutJobTaggingRequest), arg0)
}

// PutJobTaggingWithContext mocks base method
func (m *MockS3ControlAPI) PutJobTaggingWithContext(arg0 context.Context, arg1 *s3control.PutJobTaggingInput, arg2 ...request.Option) (*s3control.PutJobTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutJobTaggingWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutJobTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutJobTaggingWithContext indicates an expected call of PutJobTaggingWithContext
func (mr *MockS3ControlAPIMockRecorder) PutJobTaggingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutJobTaggingWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutJobTaggingWithContext), varargs...)
}

// PutMultiRegionAccessPointPolicy mocks base method
func (m *MockS3ControlAPI) PutMultiRegionAccessPointPolicy(arg0 *s3control.PutMultiRegionAccessPointPolicyInput) (*s3control.PutMultiRegionAccessPointPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMultiRegionAccessPointPolicy", arg0)
	ret0, _ := ret[0].(*s3control.PutMultiRegionAccessPointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMultiRegionAccessPointPolicy indicates an expected call of PutMultiRegionAccessPointPolicy
func (mr *MockS3ControlAPIMockRecorder) PutMultiRegionAccessPointPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMultiRegionAccessPointPolicy", reflect.TypeOf((*MockS3ControlAPI)(nil).PutMultiRegionAccessPointPolicy), arg0)
}

// PutMultiRegionAccessPointPolicyRequest mocks base method
func (m *MockS3ControlAPI) PutMultiRegionAccessPointPolicyRequest(arg0 *s3control.PutMultiRegionAccessPointPolicyInput) (*request.Request, *s3control.PutMultiRegionAccessPointPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMultiRegionAccessPointPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutMultiRegionAccessPointPolicyOutput)
	return ret0, ret1
}

// PutMultiRegionAccessPointPolicyRequest indicates an expected call of PutMultiRegionAccessPointPolicyRequest
func (mr *MockS3ControlAPIMockRecorder) PutMultiRegionAccessPointPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMultiRegionAccessPointPolicyRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutMultiRegionAccessPointPolicyRequest), arg0)
}

// PutMultiRegionAccessPointPolicyWithContext mocks base method
func (m *MockS3ControlAPI) PutMultiRegionAccessPointPolicyWithContext(arg0 context.Context, arg1 *s3control.PutMultiRegionAccessPointPolicyInput, arg2 ...request.Option) (*s3control.PutMultiRegionAccessPointPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMultiRegionAccessPointPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutMultiRegionAccessPointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMultiRegionAccessPointPolicyWithContext indicates an expected call of PutMultiRegionAccessPointPolicyWithContext
func (mr *MockS3ControlAPIMockRecorder) PutMultiRegionAccessPointPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMultiRegionAccessPointPolicyWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutMultiRegionAccessPointPolicyWithContext), varargs...)
}

// PutPublicAccessBlock mocks base method
func (m *MockS3ControlAPI) PutPublicAccessBlock(arg0 *s3control.PutPublicAccessBlockInput) (*s3control.PutPublicAccessBlockOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPublicAccessBlock", arg0)
	ret0, _ := ret[0].(*s3control.PutPublicAccessBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPublicAccessBlock indicates an expected call of PutPublicAccessBlock
func (mr *MockS3ControlAPIMockRecorder) PutPublicAccessBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPublicAccessBlock", reflect.TypeOf((*MockS3ControlAPI)(nil).PutPublicAccessBlock), arg0)
}

// PutPublicAccessBlockRequest mocks base method
func (m *MockS3ControlAPI) PutPublicAccessBlockRequest(arg0 *s3control.PutPublicAccessBlockInput) (*request.Request, *s3control.PutPublicAccessBlockOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPublicAccessBlockRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutPublicAccessBlockOutput)
	return ret0, ret1
}

// PutPublicAccessBlockRequest indicates an expected call of PutPublicAccessBlockRequest
func (mr *MockS3ControlAPIMockRecorder) PutPublicAccessBlockRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPublicAccessBlockRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutPublicAccessBlockRequest), arg0)
}

// PutPublicAccessBlockWithContext mocks base method
func (m *MockS3ControlAPI) PutPublicAccessBlockWithContext(arg0 context.Context, arg1 *s3control.PutPublicAccessBlockInput, arg2 ...request.Option) (*s3control.PutPublicAccessBlockOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPublicAccessBlockWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutPublicAccessBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPublicAccessBlockWithContext indicates an expected call of PutPublicAccessBlockWithContext
func (mr *MockS3ControlAPIMockRecorder) PutPublicAccessBlockWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPublicAccessBlockWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutPublicAccessBlockWithContext), varargs...)
}

// PutStorageLensConfiguration mocks base method
func (m *MockS3ControlAPI) PutStorageLensConfiguration(arg0 *s3control.PutStorageLensConfigurationInput) (*s3control.PutStorageLensConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutStorageLensConfiguration", arg0)
	ret0, _ := ret[0].(*s3control.PutStorageLensConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutStorageLensConfiguration indicates an expected call of PutStorageLensConfiguration
func (mr *MockS3ControlAPIMockRecorder) PutStorageLensConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStorageLensConfiguration", reflect.TypeOf((*MockS3ControlAPI)(nil).PutStorageLensConfiguration), arg0)
}

// PutStorageLensConfigurationRequest mocks base method
func (m *MockS3ControlAPI) PutStorageLensConfigurationRequest(arg0 *s3control.PutStorageLensConfigurationInput) (*request.Request, *s3control.PutStorageLensConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutStorageLensConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutStorageLensConfigurationOutput)
	return ret0, ret1
}

// PutStorageLensConfigurationRequest indicates an expected call of PutStorageLensConfigurationRequest
func (mr *MockS3ControlAPIMockRecorder) PutStorageLensConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStorageLensConfigurationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutStorageLensConfigurationRequest), arg0)
}

// PutStorageLensConfigurationTagging mocks base method
func (m *MockS3ControlAPI) PutStorageLensConfigurationTagging(arg0 *s3control.PutStorageLensConfigurationTaggingInput) (*s3control.PutStorageLensConfigurationTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutStorageLensConfigurationTagging", arg0)
	ret0, _ := ret[0].(*s3control.PutStorageLensConfigurationTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutStorageLensConfigurationTagging indicates an expected call of PutStorageLensConfigurationTagging
func (mr *MockS3ControlAPIMockRecorder) PutStorageLensConfigurationTagging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStorageLensConfigurationTagging", reflect.TypeOf((*MockS3ControlAPI)(nil).PutStorageLensConfigurationTagging), arg0)
}

// PutStorageLensConfigurationTaggingRequest mocks base method
func (m *MockS3ControlAPI) PutStorageLensConfigurationTaggingRequest(arg0 *s3control.PutStorageLensConfigurationTaggingInput) (*request.Request, *s3control.PutStorageLensConfigurationTaggingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutStorageLensConfigurationTaggingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.PutStorageLensConfigurationTaggingOutput)
	return ret0, ret1
}

// PutStorageLensConfigurationTaggingRequest indicates an expected call of PutStorageLensConfigurationTaggingRequest
func (mr *MockS3ControlAPIMockRecorder) PutStorageLensConfigurationTaggingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStorageLensConfigurationTaggingRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).PutStorageLensConfigurationTaggingRequest), arg0)
}

// PutStorageLensConfigurationTaggingWithContext mocks base method
func (m *MockS3ControlAPI) PutStorageLensConfigurationTaggingWithContext(arg0 context.Context, arg1 *s3control.PutStorageLensConfigurationTaggingInput, arg2 ...request.Option) (*s3control.PutStorageLensConfigurationTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutStorageLensConfigurationTaggingWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutStorageLensConfigurationTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutStorageLensConfigurationTaggingWithContext indicates an expected call of PutStorageLensConfigurationTaggingWithContext
func (mr *MockS3ControlAPIMockRecorder) PutStorageLensConfigurationTaggingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStorageLensConfigurationTaggingWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutStorageLensConfigurationTaggingWithContext), varargs...)
}

// PutStorageLensConfigurationWithContext mocks base method
func (m *MockS3ControlAPI) PutStorageLensConfigurationWithContext(arg0 context.Context, arg1 *s3control.PutStorageLensConfigurationInput, arg2 ...request.Option) (*s3control.PutStorageLensConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutStorageLensConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.PutStorageLensConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutStorageLensConfigurationWithContext indicates an expected call of PutStorageLensConfigurationWithContext
func (mr *MockS3ControlAPIMockRecorder) PutStorageLensConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStorageLensConfigurationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).PutStorageLensConfigurationWithContext), varargs...)
}

// SubmitMultiRegionAccessPointRoutes mocks base method
func (m *MockS3ControlAPI) SubmitMultiRegionAccessPointRoutes(arg0 *s3control.SubmitMultiRegionAccessPointRoutesInput) (*s3control.SubmitMultiRegionAccessPointRoutesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitMultiRegionAccessPointRoutes", arg0)
	ret0, _ := ret[0].(*s3control.SubmitMultiRegionAccessPointRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitMultiRegionAccessPointRoutes indicates an expected call of SubmitMultiRegionAccessPointRoutes
func (mr *MockS3ControlAPIMockRecorder) SubmitMultiRegionAccessPointRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitMultiRegionAccessPointRoutes", reflect.TypeOf((*MockS3ControlAPI)(nil).SubmitMultiRegionAccessPointRoutes), arg0)
}

// SubmitMultiRegionAccessPointRoutesRequest mocks base method
func (m *MockS3ControlAPI) SubmitMultiRegionAccessPointRoutesRequest(arg0 *s3control.SubmitMultiRegionAccessPointRoutesInput) (*request.Request, *s3control.SubmitMultiRegionAccessPointRoutesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitMultiRegionAccessPointRoutesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.SubmitMultiRegionAccessPointRoutesOutput)
	return ret0, ret1
}

// SubmitMultiRegionAccessPointRoutesRequest indicates an expected call of SubmitMultiRegionAccessPointRoutesRequest
func (mr *MockS3ControlAPIMockRecorder) SubmitMultiRegionAccessPointRoutesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitMultiRegionAccessPointRoutesRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).SubmitMultiRegionAccessPointRoutesRequest), arg0)
}

// SubmitMultiRegionAccessPointRoutesWithContext mocks base method
func (m *MockS3ControlAPI) SubmitMultiRegionAccessPointRoutesWithContext(arg0 context.Context, arg1 *s3control.SubmitMultiRegionAccessPointRoutesInput, arg2 ...request.Option) (*s3control.SubmitMultiRegionAccessPointRoutesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitMultiRegionAccessPointRoutesWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.SubmitMultiRegionAccessPointRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitMultiRegionAccessPointRoutesWithContext indicates an expected call of SubmitMultiRegionAccessPointRoutesWithContext
func (mr *MockS3ControlAPIMockRecorder) SubmitMultiRegionAccessPointRoutesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitMultiRegionAccessPointRoutesWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).SubmitMultiRegionAccessPointRoutesWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockS3ControlAPI) TagResource(arg0 *s3control.TagResourceInput) (*s3control.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*s3control.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockS3ControlAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockS3ControlAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockS3ControlAPI) TagResourceRequest(arg0 *s3control.TagResourceInput) (*request.Request, *s3control.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockS3ControlAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockS3ControlAPI) TagResourceWithContext(arg0 context.Context, arg1 *s3control.TagResourceInput, arg2 ...request.Option) (*s3control.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockS3ControlAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockS3ControlAPI) UntagResource(arg0 *s3control.UntagResourceInput) (*s3control.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*s3control.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockS3ControlAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockS3ControlAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockS3ControlAPI) UntagResourceRequest(arg0 *s3control.UntagResourceInput) (*request.Request, *s3control.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockS3ControlAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockS3ControlAPI) UntagResourceWithContext(arg0 context.Context, arg1 *s3control.UntagResourceInput, arg2 ...request.Option) (*s3control.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockS3ControlAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAccessGrantsLocation mocks base method
func (m *MockS3ControlAPI) UpdateAccessGrantsLocation(arg0 *s3control.UpdateAccessGrantsLocationInput) (*s3control.UpdateAccessGrantsLocationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessGrantsLocation", arg0)
	ret0, _ := ret[0].(*s3control.UpdateAccessGrantsLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessGrantsLocation indicates an expected call of UpdateAccessGrantsLocation
func (mr *MockS3ControlAPIMockRecorder) UpdateAccessGrantsLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessGrantsLocation", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateAccessGrantsLocation), arg0)
}

// UpdateAccessGrantsLocationRequest mocks base method
func (m *MockS3ControlAPI) UpdateAccessGrantsLocationRequest(arg0 *s3control.UpdateAccessGrantsLocationInput) (*request.Request, *s3control.UpdateAccessGrantsLocationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessGrantsLocationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.UpdateAccessGrantsLocationOutput)
	return ret0, ret1
}

// UpdateAccessGrantsLocationRequest indicates an expected call of UpdateAccessGrantsLocationRequest
func (mr *MockS3ControlAPIMockRecorder) UpdateAccessGrantsLocationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessGrantsLocationRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateAccessGrantsLocationRequest), arg0)
}

// UpdateAccessGrantsLocationWithContext mocks base method
func (m *MockS3ControlAPI) UpdateAccessGrantsLocationWithContext(arg0 context.Context, arg1 *s3control.UpdateAccessGrantsLocationInput, arg2 ...request.Option) (*s3control.UpdateAccessGrantsLocationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessGrantsLocationWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.UpdateAccessGrantsLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessGrantsLocationWithContext indicates an expected call of UpdateAccessGrantsLocationWithContext
func (mr *MockS3ControlAPIMockRecorder) UpdateAccessGrantsLocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessGrantsLocationWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateAccessGrantsLocationWithContext), varargs...)
}

// UpdateJobPriority mocks base method
func (m *MockS3ControlAPI) UpdateJobPriority(arg0 *s3control.UpdateJobPriorityInput) (*s3control.UpdateJobPriorityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobPriority", arg0)
	ret0, _ := ret[0].(*s3control.UpdateJobPriorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobPriority indicates an expected call of UpdateJobPriority
func (mr *MockS3ControlAPIMockRecorder) UpdateJobPriority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobPriority", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateJobPriority), arg0)
}

// UpdateJobPriorityRequest mocks base method
func (m *MockS3ControlAPI) UpdateJobPriorityRequest(arg0 *s3control.UpdateJobPriorityInput) (*request.Request, *s3control.UpdateJobPriorityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobPriorityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.UpdateJobPriorityOutput)
	return ret0, ret1
}

// UpdateJobPriorityRequest indicates an expected call of UpdateJobPriorityRequest
func (mr *MockS3ControlAPIMockRecorder) UpdateJobPriorityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobPriorityRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateJobPriorityRequest), arg0)
}

// UpdateJobPriorityWithContext mocks base method
func (m *MockS3ControlAPI) UpdateJobPriorityWithContext(arg0 context.Context, arg1 *s3control.UpdateJobPriorityInput, arg2 ...request.Option) (*s3control.UpdateJobPriorityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobPriorityWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.UpdateJobPriorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobPriorityWithContext indicates an expected call of UpdateJobPriorityWithContext
func (mr *MockS3ControlAPIMockRecorder) UpdateJobPriorityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobPriorityWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateJobPriorityWithContext), varargs...)
}

// UpdateJobStatus mocks base method
func (m *MockS3ControlAPI) UpdateJobStatus(arg0 *s3control.UpdateJobStatusInput) (*s3control.UpdateJobStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", arg0)
	ret0, _ := ret[0].(*s3control.UpdateJobStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus
func (mr *MockS3ControlAPIMockRecorder) UpdateJobStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateJobStatus), arg0)
}

// UpdateJobStatusRequest mocks base method
func (m *MockS3ControlAPI) UpdateJobStatusRequest(arg0 *s3control.UpdateJobStatusInput) (*request.Request, *s3control.UpdateJobStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.UpdateJobStatusOutput)
	return ret0, ret1
}

// UpdateJobStatusRequest indicates an expected call of UpdateJobStatusRequest
func (mr *MockS3ControlAPIMockRecorder) UpdateJobStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatusRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateJobStatusRequest), arg0)
}

// UpdateJobStatusWithContext mocks base method
func (m *MockS3ControlAPI) UpdateJobStatusWithContext(arg0 context.Context, arg1 *s3control.UpdateJobStatusInput, arg2 ...request.Option) (*s3control.UpdateJobStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobStatusWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.UpdateJobStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobStatusWithContext indicates an expected call of UpdateJobStatusWithContext
func (mr *MockS3ControlAPIMockRecorder) UpdateJobStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatusWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateJobStatusWithContext), varargs...)
}

// UpdateStorageLensGroup mocks base method
func (m *MockS3ControlAPI) UpdateStorageLensGroup(arg0 *s3control.UpdateStorageLensGroupInput) (*s3control.UpdateStorageLensGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorageLensGroup", arg0)
	ret0, _ := ret[0].(*s3control.UpdateStorageLensGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStorageLensGroup indicates an expected call of UpdateStorageLensGroup
func (mr *MockS3ControlAPIMockRecorder) UpdateStorageLensGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageLensGroup", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateStorageLensGroup), arg0)
}

// UpdateStorageLensGroupRequest mocks base method
func (m *MockS3ControlAPI) UpdateStorageLensGroupRequest(arg0 *s3control.UpdateStorageLensGroupInput) (*request.Request, *s3control.UpdateStorageLensGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorageLensGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*s3control.UpdateStorageLensGroupOutput)
	return ret0, ret1
}

// UpdateStorageLensGroupRequest indicates an expected call of UpdateStorageLensGroupRequest
func (mr *MockS3ControlAPIMockRecorder) UpdateStorageLensGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageLensGroupRequest", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateStorageLensGroupRequest), arg0)
}

// UpdateStorageLensGroupWithContext mocks base method
func (m *MockS3ControlAPI) UpdateStorageLensGroupWithContext(arg0 context.Context, arg1 *s3control.UpdateStorageLensGroupInput, arg2 ...request.Option) (*s3control.UpdateStorageLensGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStorageLensGroupWithContext", varargs...)
	ret0, _ := ret[0].(*s3control.UpdateStorageLensGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStorageLensGroupWithContext indicates an expected call of UpdateStorageLensGroupWithContext
func (mr *MockS3ControlAPIMockRecorder) UpdateStorageLensGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageLensGroupWithContext", reflect.TypeOf((*MockS3ControlAPI)(nil).UpdateStorageLensGroupWithContext), varargs...)
}
