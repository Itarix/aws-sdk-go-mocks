// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/sagemaker/sagemakeriface (interfaces: SageMakerAPI)

// Package sagemakermock is a generated GoMock package.
package sagemakermock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	sagemaker "github.com/aws/aws-sdk-go/service/sagemaker"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSageMakerAPI is a mock of SageMakerAPI interface
type MockSageMakerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSageMakerAPIMockRecorder
}

// MockSageMakerAPIMockRecorder is the mock recorder for MockSageMakerAPI
type MockSageMakerAPIMockRecorder struct {
	mock *MockSageMakerAPI
}

// NewMockSageMakerAPI creates a new mock instance
func NewMockSageMakerAPI(ctrl *gomock.Controller) *MockSageMakerAPI {
	mock := &MockSageMakerAPI{ctrl: ctrl}
	mock.recorder = &MockSageMakerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSageMakerAPI) EXPECT() *MockSageMakerAPIMockRecorder {
	return m.recorder
}

// AddTags mocks base method
func (m *MockSageMakerAPI) AddTags(arg0 *sagemaker.AddTagsInput) (*sagemaker.AddTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTags", arg0)
	ret0, _ := ret[0].(*sagemaker.AddTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTags indicates an expected call of AddTags
func (mr *MockSageMakerAPIMockRecorder) AddTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTags", reflect.TypeOf((*MockSageMakerAPI)(nil).AddTags), arg0)
}

// AddTagsRequest mocks base method
func (m *MockSageMakerAPI) AddTagsRequest(arg0 *sagemaker.AddTagsInput) (*request.Request, *sagemaker.AddTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.AddTagsOutput)
	return ret0, ret1
}

// AddTagsRequest indicates an expected call of AddTagsRequest
func (mr *MockSageMakerAPIMockRecorder) AddTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).AddTagsRequest), arg0)
}

// AddTagsWithContext mocks base method
func (m *MockSageMakerAPI) AddTagsWithContext(arg0 aws.Context, arg1 *sagemaker.AddTagsInput, arg2 ...request.Option) (*sagemaker.AddTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTagsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.AddTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsWithContext indicates an expected call of AddTagsWithContext
func (mr *MockSageMakerAPIMockRecorder) AddTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).AddTagsWithContext), varargs...)
}

// CreateEndpoint mocks base method
func (m *MockSageMakerAPI) CreateEndpoint(arg0 *sagemaker.CreateEndpointInput) (*sagemaker.CreateEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpoint", arg0)
	ret0, _ := ret[0].(*sagemaker.CreateEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpoint indicates an expected call of CreateEndpoint
func (mr *MockSageMakerAPIMockRecorder) CreateEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpoint", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateEndpoint), arg0)
}

// CreateEndpointConfig mocks base method
func (m *MockSageMakerAPI) CreateEndpointConfig(arg0 *sagemaker.CreateEndpointConfigInput) (*sagemaker.CreateEndpointConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpointConfig", arg0)
	ret0, _ := ret[0].(*sagemaker.CreateEndpointConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpointConfig indicates an expected call of CreateEndpointConfig
func (mr *MockSageMakerAPIMockRecorder) CreateEndpointConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointConfig", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateEndpointConfig), arg0)
}

// CreateEndpointConfigRequest mocks base method
func (m *MockSageMakerAPI) CreateEndpointConfigRequest(arg0 *sagemaker.CreateEndpointConfigInput) (*request.Request, *sagemaker.CreateEndpointConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpointConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.CreateEndpointConfigOutput)
	return ret0, ret1
}

// CreateEndpointConfigRequest indicates an expected call of CreateEndpointConfigRequest
func (mr *MockSageMakerAPIMockRecorder) CreateEndpointConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointConfigRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateEndpointConfigRequest), arg0)
}

// CreateEndpointConfigWithContext mocks base method
func (m *MockSageMakerAPI) CreateEndpointConfigWithContext(arg0 aws.Context, arg1 *sagemaker.CreateEndpointConfigInput, arg2 ...request.Option) (*sagemaker.CreateEndpointConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEndpointConfigWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.CreateEndpointConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpointConfigWithContext indicates an expected call of CreateEndpointConfigWithContext
func (mr *MockSageMakerAPIMockRecorder) CreateEndpointConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointConfigWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateEndpointConfigWithContext), varargs...)
}

// CreateEndpointRequest mocks base method
func (m *MockSageMakerAPI) CreateEndpointRequest(arg0 *sagemaker.CreateEndpointInput) (*request.Request, *sagemaker.CreateEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.CreateEndpointOutput)
	return ret0, ret1
}

// CreateEndpointRequest indicates an expected call of CreateEndpointRequest
func (mr *MockSageMakerAPIMockRecorder) CreateEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateEndpointRequest), arg0)
}

// CreateEndpointWithContext mocks base method
func (m *MockSageMakerAPI) CreateEndpointWithContext(arg0 aws.Context, arg1 *sagemaker.CreateEndpointInput, arg2 ...request.Option) (*sagemaker.CreateEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.CreateEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpointWithContext indicates an expected call of CreateEndpointWithContext
func (mr *MockSageMakerAPIMockRecorder) CreateEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateEndpointWithContext), varargs...)
}

// CreateHyperParameterTuningJob mocks base method
func (m *MockSageMakerAPI) CreateHyperParameterTuningJob(arg0 *sagemaker.CreateHyperParameterTuningJobInput) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHyperParameterTuningJob", arg0)
	ret0, _ := ret[0].(*sagemaker.CreateHyperParameterTuningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHyperParameterTuningJob indicates an expected call of CreateHyperParameterTuningJob
func (mr *MockSageMakerAPIMockRecorder) CreateHyperParameterTuningJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHyperParameterTuningJob", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateHyperParameterTuningJob), arg0)
}

// CreateHyperParameterTuningJobRequest mocks base method
func (m *MockSageMakerAPI) CreateHyperParameterTuningJobRequest(arg0 *sagemaker.CreateHyperParameterTuningJobInput) (*request.Request, *sagemaker.CreateHyperParameterTuningJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHyperParameterTuningJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.CreateHyperParameterTuningJobOutput)
	return ret0, ret1
}

// CreateHyperParameterTuningJobRequest indicates an expected call of CreateHyperParameterTuningJobRequest
func (mr *MockSageMakerAPIMockRecorder) CreateHyperParameterTuningJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHyperParameterTuningJobRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateHyperParameterTuningJobRequest), arg0)
}

// CreateHyperParameterTuningJobWithContext mocks base method
func (m *MockSageMakerAPI) CreateHyperParameterTuningJobWithContext(arg0 aws.Context, arg1 *sagemaker.CreateHyperParameterTuningJobInput, arg2 ...request.Option) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHyperParameterTuningJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.CreateHyperParameterTuningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHyperParameterTuningJobWithContext indicates an expected call of CreateHyperParameterTuningJobWithContext
func (mr *MockSageMakerAPIMockRecorder) CreateHyperParameterTuningJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHyperParameterTuningJobWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateHyperParameterTuningJobWithContext), varargs...)
}

// CreateModel mocks base method
func (m *MockSageMakerAPI) CreateModel(arg0 *sagemaker.CreateModelInput) (*sagemaker.CreateModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0)
	ret0, _ := ret[0].(*sagemaker.CreateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel
func (mr *MockSageMakerAPIMockRecorder) CreateModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateModel), arg0)
}

// CreateModelRequest mocks base method
func (m *MockSageMakerAPI) CreateModelRequest(arg0 *sagemaker.CreateModelInput) (*request.Request, *sagemaker.CreateModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.CreateModelOutput)
	return ret0, ret1
}

// CreateModelRequest indicates an expected call of CreateModelRequest
func (mr *MockSageMakerAPIMockRecorder) CreateModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateModelRequest), arg0)
}

// CreateModelWithContext mocks base method
func (m *MockSageMakerAPI) CreateModelWithContext(arg0 aws.Context, arg1 *sagemaker.CreateModelInput, arg2 ...request.Option) (*sagemaker.CreateModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.CreateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelWithContext indicates an expected call of CreateModelWithContext
func (mr *MockSageMakerAPIMockRecorder) CreateModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateModelWithContext), varargs...)
}

// CreateNotebookInstance mocks base method
func (m *MockSageMakerAPI) CreateNotebookInstance(arg0 *sagemaker.CreateNotebookInstanceInput) (*sagemaker.CreateNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotebookInstance", arg0)
	ret0, _ := ret[0].(*sagemaker.CreateNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotebookInstance indicates an expected call of CreateNotebookInstance
func (mr *MockSageMakerAPIMockRecorder) CreateNotebookInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotebookInstance", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateNotebookInstance), arg0)
}

// CreateNotebookInstanceLifecycleConfig mocks base method
func (m *MockSageMakerAPI) CreateNotebookInstanceLifecycleConfig(arg0 *sagemaker.CreateNotebookInstanceLifecycleConfigInput) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotebookInstanceLifecycleConfig", arg0)
	ret0, _ := ret[0].(*sagemaker.CreateNotebookInstanceLifecycleConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotebookInstanceLifecycleConfig indicates an expected call of CreateNotebookInstanceLifecycleConfig
func (mr *MockSageMakerAPIMockRecorder) CreateNotebookInstanceLifecycleConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotebookInstanceLifecycleConfig", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateNotebookInstanceLifecycleConfig), arg0)
}

// CreateNotebookInstanceLifecycleConfigRequest mocks base method
func (m *MockSageMakerAPI) CreateNotebookInstanceLifecycleConfigRequest(arg0 *sagemaker.CreateNotebookInstanceLifecycleConfigInput) (*request.Request, *sagemaker.CreateNotebookInstanceLifecycleConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotebookInstanceLifecycleConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.CreateNotebookInstanceLifecycleConfigOutput)
	return ret0, ret1
}

// CreateNotebookInstanceLifecycleConfigRequest indicates an expected call of CreateNotebookInstanceLifecycleConfigRequest
func (mr *MockSageMakerAPIMockRecorder) CreateNotebookInstanceLifecycleConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotebookInstanceLifecycleConfigRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateNotebookInstanceLifecycleConfigRequest), arg0)
}

// CreateNotebookInstanceLifecycleConfigWithContext mocks base method
func (m *MockSageMakerAPI) CreateNotebookInstanceLifecycleConfigWithContext(arg0 aws.Context, arg1 *sagemaker.CreateNotebookInstanceLifecycleConfigInput, arg2 ...request.Option) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNotebookInstanceLifecycleConfigWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.CreateNotebookInstanceLifecycleConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotebookInstanceLifecycleConfigWithContext indicates an expected call of CreateNotebookInstanceLifecycleConfigWithContext
func (mr *MockSageMakerAPIMockRecorder) CreateNotebookInstanceLifecycleConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotebookInstanceLifecycleConfigWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateNotebookInstanceLifecycleConfigWithContext), varargs...)
}

// CreateNotebookInstanceRequest mocks base method
func (m *MockSageMakerAPI) CreateNotebookInstanceRequest(arg0 *sagemaker.CreateNotebookInstanceInput) (*request.Request, *sagemaker.CreateNotebookInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotebookInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.CreateNotebookInstanceOutput)
	return ret0, ret1
}

// CreateNotebookInstanceRequest indicates an expected call of CreateNotebookInstanceRequest
func (mr *MockSageMakerAPIMockRecorder) CreateNotebookInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotebookInstanceRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateNotebookInstanceRequest), arg0)
}

// CreateNotebookInstanceWithContext mocks base method
func (m *MockSageMakerAPI) CreateNotebookInstanceWithContext(arg0 aws.Context, arg1 *sagemaker.CreateNotebookInstanceInput, arg2 ...request.Option) (*sagemaker.CreateNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNotebookInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.CreateNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotebookInstanceWithContext indicates an expected call of CreateNotebookInstanceWithContext
func (mr *MockSageMakerAPIMockRecorder) CreateNotebookInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotebookInstanceWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateNotebookInstanceWithContext), varargs...)
}

// CreatePresignedNotebookInstanceUrl mocks base method
func (m *MockSageMakerAPI) CreatePresignedNotebookInstanceUrl(arg0 *sagemaker.CreatePresignedNotebookInstanceUrlInput) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePresignedNotebookInstanceUrl", arg0)
	ret0, _ := ret[0].(*sagemaker.CreatePresignedNotebookInstanceUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePresignedNotebookInstanceUrl indicates an expected call of CreatePresignedNotebookInstanceUrl
func (mr *MockSageMakerAPIMockRecorder) CreatePresignedNotebookInstanceUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePresignedNotebookInstanceUrl", reflect.TypeOf((*MockSageMakerAPI)(nil).CreatePresignedNotebookInstanceUrl), arg0)
}

// CreatePresignedNotebookInstanceUrlRequest mocks base method
func (m *MockSageMakerAPI) CreatePresignedNotebookInstanceUrlRequest(arg0 *sagemaker.CreatePresignedNotebookInstanceUrlInput) (*request.Request, *sagemaker.CreatePresignedNotebookInstanceUrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePresignedNotebookInstanceUrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.CreatePresignedNotebookInstanceUrlOutput)
	return ret0, ret1
}

// CreatePresignedNotebookInstanceUrlRequest indicates an expected call of CreatePresignedNotebookInstanceUrlRequest
func (mr *MockSageMakerAPIMockRecorder) CreatePresignedNotebookInstanceUrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePresignedNotebookInstanceUrlRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).CreatePresignedNotebookInstanceUrlRequest), arg0)
}

// CreatePresignedNotebookInstanceUrlWithContext mocks base method
func (m *MockSageMakerAPI) CreatePresignedNotebookInstanceUrlWithContext(arg0 aws.Context, arg1 *sagemaker.CreatePresignedNotebookInstanceUrlInput, arg2 ...request.Option) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePresignedNotebookInstanceUrlWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.CreatePresignedNotebookInstanceUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePresignedNotebookInstanceUrlWithContext indicates an expected call of CreatePresignedNotebookInstanceUrlWithContext
func (mr *MockSageMakerAPIMockRecorder) CreatePresignedNotebookInstanceUrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePresignedNotebookInstanceUrlWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).CreatePresignedNotebookInstanceUrlWithContext), varargs...)
}

// CreateTrainingJob mocks base method
func (m *MockSageMakerAPI) CreateTrainingJob(arg0 *sagemaker.CreateTrainingJobInput) (*sagemaker.CreateTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrainingJob", arg0)
	ret0, _ := ret[0].(*sagemaker.CreateTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrainingJob indicates an expected call of CreateTrainingJob
func (mr *MockSageMakerAPIMockRecorder) CreateTrainingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrainingJob", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateTrainingJob), arg0)
}

// CreateTrainingJobRequest mocks base method
func (m *MockSageMakerAPI) CreateTrainingJobRequest(arg0 *sagemaker.CreateTrainingJobInput) (*request.Request, *sagemaker.CreateTrainingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrainingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.CreateTrainingJobOutput)
	return ret0, ret1
}

// CreateTrainingJobRequest indicates an expected call of CreateTrainingJobRequest
func (mr *MockSageMakerAPIMockRecorder) CreateTrainingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrainingJobRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateTrainingJobRequest), arg0)
}

// CreateTrainingJobWithContext mocks base method
func (m *MockSageMakerAPI) CreateTrainingJobWithContext(arg0 aws.Context, arg1 *sagemaker.CreateTrainingJobInput, arg2 ...request.Option) (*sagemaker.CreateTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrainingJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.CreateTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrainingJobWithContext indicates an expected call of CreateTrainingJobWithContext
func (mr *MockSageMakerAPIMockRecorder) CreateTrainingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrainingJobWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateTrainingJobWithContext), varargs...)
}

// CreateTransformJob mocks base method
func (m *MockSageMakerAPI) CreateTransformJob(arg0 *sagemaker.CreateTransformJobInput) (*sagemaker.CreateTransformJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransformJob", arg0)
	ret0, _ := ret[0].(*sagemaker.CreateTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransformJob indicates an expected call of CreateTransformJob
func (mr *MockSageMakerAPIMockRecorder) CreateTransformJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransformJob", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateTransformJob), arg0)
}

// CreateTransformJobRequest mocks base method
func (m *MockSageMakerAPI) CreateTransformJobRequest(arg0 *sagemaker.CreateTransformJobInput) (*request.Request, *sagemaker.CreateTransformJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransformJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.CreateTransformJobOutput)
	return ret0, ret1
}

// CreateTransformJobRequest indicates an expected call of CreateTransformJobRequest
func (mr *MockSageMakerAPIMockRecorder) CreateTransformJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransformJobRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateTransformJobRequest), arg0)
}

// CreateTransformJobWithContext mocks base method
func (m *MockSageMakerAPI) CreateTransformJobWithContext(arg0 aws.Context, arg1 *sagemaker.CreateTransformJobInput, arg2 ...request.Option) (*sagemaker.CreateTransformJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTransformJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.CreateTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransformJobWithContext indicates an expected call of CreateTransformJobWithContext
func (mr *MockSageMakerAPIMockRecorder) CreateTransformJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransformJobWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).CreateTransformJobWithContext), varargs...)
}

// DeleteEndpoint mocks base method
func (m *MockSageMakerAPI) DeleteEndpoint(arg0 *sagemaker.DeleteEndpointInput) (*sagemaker.DeleteEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoint", arg0)
	ret0, _ := ret[0].(*sagemaker.DeleteEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpoint indicates an expected call of DeleteEndpoint
func (mr *MockSageMakerAPIMockRecorder) DeleteEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoint", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteEndpoint), arg0)
}

// DeleteEndpointConfig mocks base method
func (m *MockSageMakerAPI) DeleteEndpointConfig(arg0 *sagemaker.DeleteEndpointConfigInput) (*sagemaker.DeleteEndpointConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointConfig", arg0)
	ret0, _ := ret[0].(*sagemaker.DeleteEndpointConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointConfig indicates an expected call of DeleteEndpointConfig
func (mr *MockSageMakerAPIMockRecorder) DeleteEndpointConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointConfig", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteEndpointConfig), arg0)
}

// DeleteEndpointConfigRequest mocks base method
func (m *MockSageMakerAPI) DeleteEndpointConfigRequest(arg0 *sagemaker.DeleteEndpointConfigInput) (*request.Request, *sagemaker.DeleteEndpointConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DeleteEndpointConfigOutput)
	return ret0, ret1
}

// DeleteEndpointConfigRequest indicates an expected call of DeleteEndpointConfigRequest
func (mr *MockSageMakerAPIMockRecorder) DeleteEndpointConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointConfigRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteEndpointConfigRequest), arg0)
}

// DeleteEndpointConfigWithContext mocks base method
func (m *MockSageMakerAPI) DeleteEndpointConfigWithContext(arg0 aws.Context, arg1 *sagemaker.DeleteEndpointConfigInput, arg2 ...request.Option) (*sagemaker.DeleteEndpointConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEndpointConfigWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DeleteEndpointConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointConfigWithContext indicates an expected call of DeleteEndpointConfigWithContext
func (mr *MockSageMakerAPIMockRecorder) DeleteEndpointConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointConfigWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteEndpointConfigWithContext), varargs...)
}

// DeleteEndpointRequest mocks base method
func (m *MockSageMakerAPI) DeleteEndpointRequest(arg0 *sagemaker.DeleteEndpointInput) (*request.Request, *sagemaker.DeleteEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DeleteEndpointOutput)
	return ret0, ret1
}

// DeleteEndpointRequest indicates an expected call of DeleteEndpointRequest
func (mr *MockSageMakerAPIMockRecorder) DeleteEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteEndpointRequest), arg0)
}

// DeleteEndpointWithContext mocks base method
func (m *MockSageMakerAPI) DeleteEndpointWithContext(arg0 aws.Context, arg1 *sagemaker.DeleteEndpointInput, arg2 ...request.Option) (*sagemaker.DeleteEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DeleteEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointWithContext indicates an expected call of DeleteEndpointWithContext
func (mr *MockSageMakerAPIMockRecorder) DeleteEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteEndpointWithContext), varargs...)
}

// DeleteModel mocks base method
func (m *MockSageMakerAPI) DeleteModel(arg0 *sagemaker.DeleteModelInput) (*sagemaker.DeleteModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(*sagemaker.DeleteModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModel indicates an expected call of DeleteModel
func (mr *MockSageMakerAPIMockRecorder) DeleteModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteModel), arg0)
}

// DeleteModelRequest mocks base method
func (m *MockSageMakerAPI) DeleteModelRequest(arg0 *sagemaker.DeleteModelInput) (*request.Request, *sagemaker.DeleteModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DeleteModelOutput)
	return ret0, ret1
}

// DeleteModelRequest indicates an expected call of DeleteModelRequest
func (mr *MockSageMakerAPIMockRecorder) DeleteModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteModelRequest), arg0)
}

// DeleteModelWithContext mocks base method
func (m *MockSageMakerAPI) DeleteModelWithContext(arg0 aws.Context, arg1 *sagemaker.DeleteModelInput, arg2 ...request.Option) (*sagemaker.DeleteModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DeleteModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelWithContext indicates an expected call of DeleteModelWithContext
func (mr *MockSageMakerAPIMockRecorder) DeleteModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteModelWithContext), varargs...)
}

// DeleteNotebookInstance mocks base method
func (m *MockSageMakerAPI) DeleteNotebookInstance(arg0 *sagemaker.DeleteNotebookInstanceInput) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotebookInstance", arg0)
	ret0, _ := ret[0].(*sagemaker.DeleteNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotebookInstance indicates an expected call of DeleteNotebookInstance
func (mr *MockSageMakerAPIMockRecorder) DeleteNotebookInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotebookInstance", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteNotebookInstance), arg0)
}

// DeleteNotebookInstanceLifecycleConfig mocks base method
func (m *MockSageMakerAPI) DeleteNotebookInstanceLifecycleConfig(arg0 *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotebookInstanceLifecycleConfig", arg0)
	ret0, _ := ret[0].(*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotebookInstanceLifecycleConfig indicates an expected call of DeleteNotebookInstanceLifecycleConfig
func (mr *MockSageMakerAPIMockRecorder) DeleteNotebookInstanceLifecycleConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotebookInstanceLifecycleConfig", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteNotebookInstanceLifecycleConfig), arg0)
}

// DeleteNotebookInstanceLifecycleConfigRequest mocks base method
func (m *MockSageMakerAPI) DeleteNotebookInstanceLifecycleConfigRequest(arg0 *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) (*request.Request, *sagemaker.DeleteNotebookInstanceLifecycleConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotebookInstanceLifecycleConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput)
	return ret0, ret1
}

// DeleteNotebookInstanceLifecycleConfigRequest indicates an expected call of DeleteNotebookInstanceLifecycleConfigRequest
func (mr *MockSageMakerAPIMockRecorder) DeleteNotebookInstanceLifecycleConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotebookInstanceLifecycleConfigRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteNotebookInstanceLifecycleConfigRequest), arg0)
}

// DeleteNotebookInstanceLifecycleConfigWithContext mocks base method
func (m *MockSageMakerAPI) DeleteNotebookInstanceLifecycleConfigWithContext(arg0 aws.Context, arg1 *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, arg2 ...request.Option) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNotebookInstanceLifecycleConfigWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotebookInstanceLifecycleConfigWithContext indicates an expected call of DeleteNotebookInstanceLifecycleConfigWithContext
func (mr *MockSageMakerAPIMockRecorder) DeleteNotebookInstanceLifecycleConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotebookInstanceLifecycleConfigWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteNotebookInstanceLifecycleConfigWithContext), varargs...)
}

// DeleteNotebookInstanceRequest mocks base method
func (m *MockSageMakerAPI) DeleteNotebookInstanceRequest(arg0 *sagemaker.DeleteNotebookInstanceInput) (*request.Request, *sagemaker.DeleteNotebookInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotebookInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DeleteNotebookInstanceOutput)
	return ret0, ret1
}

// DeleteNotebookInstanceRequest indicates an expected call of DeleteNotebookInstanceRequest
func (mr *MockSageMakerAPIMockRecorder) DeleteNotebookInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotebookInstanceRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteNotebookInstanceRequest), arg0)
}

// DeleteNotebookInstanceWithContext mocks base method
func (m *MockSageMakerAPI) DeleteNotebookInstanceWithContext(arg0 aws.Context, arg1 *sagemaker.DeleteNotebookInstanceInput, arg2 ...request.Option) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNotebookInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DeleteNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotebookInstanceWithContext indicates an expected call of DeleteNotebookInstanceWithContext
func (mr *MockSageMakerAPIMockRecorder) DeleteNotebookInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotebookInstanceWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteNotebookInstanceWithContext), varargs...)
}

// DeleteTags mocks base method
func (m *MockSageMakerAPI) DeleteTags(arg0 *sagemaker.DeleteTagsInput) (*sagemaker.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTags", arg0)
	ret0, _ := ret[0].(*sagemaker.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTags indicates an expected call of DeleteTags
func (mr *MockSageMakerAPIMockRecorder) DeleteTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTags", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteTags), arg0)
}

// DeleteTagsRequest mocks base method
func (m *MockSageMakerAPI) DeleteTagsRequest(arg0 *sagemaker.DeleteTagsInput) (*request.Request, *sagemaker.DeleteTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DeleteTagsOutput)
	return ret0, ret1
}

// DeleteTagsRequest indicates an expected call of DeleteTagsRequest
func (mr *MockSageMakerAPIMockRecorder) DeleteTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteTagsRequest), arg0)
}

// DeleteTagsWithContext mocks base method
func (m *MockSageMakerAPI) DeleteTagsWithContext(arg0 aws.Context, arg1 *sagemaker.DeleteTagsInput, arg2 ...request.Option) (*sagemaker.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTagsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTagsWithContext indicates an expected call of DeleteTagsWithContext
func (mr *MockSageMakerAPIMockRecorder) DeleteTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DeleteTagsWithContext), varargs...)
}

// DescribeEndpoint mocks base method
func (m *MockSageMakerAPI) DescribeEndpoint(arg0 *sagemaker.DescribeEndpointInput) (*sagemaker.DescribeEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpoint", arg0)
	ret0, _ := ret[0].(*sagemaker.DescribeEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpoint indicates an expected call of DescribeEndpoint
func (mr *MockSageMakerAPIMockRecorder) DescribeEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpoint", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeEndpoint), arg0)
}

// DescribeEndpointConfig mocks base method
func (m *MockSageMakerAPI) DescribeEndpointConfig(arg0 *sagemaker.DescribeEndpointConfigInput) (*sagemaker.DescribeEndpointConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointConfig", arg0)
	ret0, _ := ret[0].(*sagemaker.DescribeEndpointConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointConfig indicates an expected call of DescribeEndpointConfig
func (mr *MockSageMakerAPIMockRecorder) DescribeEndpointConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointConfig", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeEndpointConfig), arg0)
}

// DescribeEndpointConfigRequest mocks base method
func (m *MockSageMakerAPI) DescribeEndpointConfigRequest(arg0 *sagemaker.DescribeEndpointConfigInput) (*request.Request, *sagemaker.DescribeEndpointConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DescribeEndpointConfigOutput)
	return ret0, ret1
}

// DescribeEndpointConfigRequest indicates an expected call of DescribeEndpointConfigRequest
func (mr *MockSageMakerAPIMockRecorder) DescribeEndpointConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointConfigRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeEndpointConfigRequest), arg0)
}

// DescribeEndpointConfigWithContext mocks base method
func (m *MockSageMakerAPI) DescribeEndpointConfigWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeEndpointConfigInput, arg2 ...request.Option) (*sagemaker.DescribeEndpointConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointConfigWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeEndpointConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointConfigWithContext indicates an expected call of DescribeEndpointConfigWithContext
func (mr *MockSageMakerAPIMockRecorder) DescribeEndpointConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointConfigWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeEndpointConfigWithContext), varargs...)
}

// DescribeEndpointRequest mocks base method
func (m *MockSageMakerAPI) DescribeEndpointRequest(arg0 *sagemaker.DescribeEndpointInput) (*request.Request, *sagemaker.DescribeEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DescribeEndpointOutput)
	return ret0, ret1
}

// DescribeEndpointRequest indicates an expected call of DescribeEndpointRequest
func (mr *MockSageMakerAPIMockRecorder) DescribeEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeEndpointRequest), arg0)
}

// DescribeEndpointWithContext mocks base method
func (m *MockSageMakerAPI) DescribeEndpointWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeEndpointInput, arg2 ...request.Option) (*sagemaker.DescribeEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointWithContext indicates an expected call of DescribeEndpointWithContext
func (mr *MockSageMakerAPIMockRecorder) DescribeEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeEndpointWithContext), varargs...)
}

// DescribeHyperParameterTuningJob mocks base method
func (m *MockSageMakerAPI) DescribeHyperParameterTuningJob(arg0 *sagemaker.DescribeHyperParameterTuningJobInput) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeHyperParameterTuningJob", arg0)
	ret0, _ := ret[0].(*sagemaker.DescribeHyperParameterTuningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHyperParameterTuningJob indicates an expected call of DescribeHyperParameterTuningJob
func (mr *MockSageMakerAPIMockRecorder) DescribeHyperParameterTuningJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHyperParameterTuningJob", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeHyperParameterTuningJob), arg0)
}

// DescribeHyperParameterTuningJobRequest mocks base method
func (m *MockSageMakerAPI) DescribeHyperParameterTuningJobRequest(arg0 *sagemaker.DescribeHyperParameterTuningJobInput) (*request.Request, *sagemaker.DescribeHyperParameterTuningJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeHyperParameterTuningJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DescribeHyperParameterTuningJobOutput)
	return ret0, ret1
}

// DescribeHyperParameterTuningJobRequest indicates an expected call of DescribeHyperParameterTuningJobRequest
func (mr *MockSageMakerAPIMockRecorder) DescribeHyperParameterTuningJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHyperParameterTuningJobRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeHyperParameterTuningJobRequest), arg0)
}

// DescribeHyperParameterTuningJobWithContext mocks base method
func (m *MockSageMakerAPI) DescribeHyperParameterTuningJobWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeHyperParameterTuningJobInput, arg2 ...request.Option) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHyperParameterTuningJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeHyperParameterTuningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHyperParameterTuningJobWithContext indicates an expected call of DescribeHyperParameterTuningJobWithContext
func (mr *MockSageMakerAPIMockRecorder) DescribeHyperParameterTuningJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHyperParameterTuningJobWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeHyperParameterTuningJobWithContext), varargs...)
}

// DescribeModel mocks base method
func (m *MockSageMakerAPI) DescribeModel(arg0 *sagemaker.DescribeModelInput) (*sagemaker.DescribeModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeModel", arg0)
	ret0, _ := ret[0].(*sagemaker.DescribeModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModel indicates an expected call of DescribeModel
func (mr *MockSageMakerAPIMockRecorder) DescribeModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModel", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeModel), arg0)
}

// DescribeModelRequest mocks base method
func (m *MockSageMakerAPI) DescribeModelRequest(arg0 *sagemaker.DescribeModelInput) (*request.Request, *sagemaker.DescribeModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DescribeModelOutput)
	return ret0, ret1
}

// DescribeModelRequest indicates an expected call of DescribeModelRequest
func (mr *MockSageMakerAPIMockRecorder) DescribeModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeModelRequest), arg0)
}

// DescribeModelWithContext mocks base method
func (m *MockSageMakerAPI) DescribeModelWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeModelInput, arg2 ...request.Option) (*sagemaker.DescribeModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelWithContext indicates an expected call of DescribeModelWithContext
func (mr *MockSageMakerAPIMockRecorder) DescribeModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeModelWithContext), varargs...)
}

// DescribeNotebookInstance mocks base method
func (m *MockSageMakerAPI) DescribeNotebookInstance(arg0 *sagemaker.DescribeNotebookInstanceInput) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNotebookInstance", arg0)
	ret0, _ := ret[0].(*sagemaker.DescribeNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNotebookInstance indicates an expected call of DescribeNotebookInstance
func (mr *MockSageMakerAPIMockRecorder) DescribeNotebookInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNotebookInstance", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeNotebookInstance), arg0)
}

// DescribeNotebookInstanceLifecycleConfig mocks base method
func (m *MockSageMakerAPI) DescribeNotebookInstanceLifecycleConfig(arg0 *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNotebookInstanceLifecycleConfig", arg0)
	ret0, _ := ret[0].(*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNotebookInstanceLifecycleConfig indicates an expected call of DescribeNotebookInstanceLifecycleConfig
func (mr *MockSageMakerAPIMockRecorder) DescribeNotebookInstanceLifecycleConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNotebookInstanceLifecycleConfig", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeNotebookInstanceLifecycleConfig), arg0)
}

// DescribeNotebookInstanceLifecycleConfigRequest mocks base method
func (m *MockSageMakerAPI) DescribeNotebookInstanceLifecycleConfigRequest(arg0 *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) (*request.Request, *sagemaker.DescribeNotebookInstanceLifecycleConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNotebookInstanceLifecycleConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput)
	return ret0, ret1
}

// DescribeNotebookInstanceLifecycleConfigRequest indicates an expected call of DescribeNotebookInstanceLifecycleConfigRequest
func (mr *MockSageMakerAPIMockRecorder) DescribeNotebookInstanceLifecycleConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNotebookInstanceLifecycleConfigRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeNotebookInstanceLifecycleConfigRequest), arg0)
}

// DescribeNotebookInstanceLifecycleConfigWithContext mocks base method
func (m *MockSageMakerAPI) DescribeNotebookInstanceLifecycleConfigWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, arg2 ...request.Option) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNotebookInstanceLifecycleConfigWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNotebookInstanceLifecycleConfigWithContext indicates an expected call of DescribeNotebookInstanceLifecycleConfigWithContext
func (mr *MockSageMakerAPIMockRecorder) DescribeNotebookInstanceLifecycleConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNotebookInstanceLifecycleConfigWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeNotebookInstanceLifecycleConfigWithContext), varargs...)
}

// DescribeNotebookInstanceRequest mocks base method
func (m *MockSageMakerAPI) DescribeNotebookInstanceRequest(arg0 *sagemaker.DescribeNotebookInstanceInput) (*request.Request, *sagemaker.DescribeNotebookInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNotebookInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DescribeNotebookInstanceOutput)
	return ret0, ret1
}

// DescribeNotebookInstanceRequest indicates an expected call of DescribeNotebookInstanceRequest
func (mr *MockSageMakerAPIMockRecorder) DescribeNotebookInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNotebookInstanceRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeNotebookInstanceRequest), arg0)
}

// DescribeNotebookInstanceWithContext mocks base method
func (m *MockSageMakerAPI) DescribeNotebookInstanceWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeNotebookInstanceInput, arg2 ...request.Option) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNotebookInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNotebookInstanceWithContext indicates an expected call of DescribeNotebookInstanceWithContext
func (mr *MockSageMakerAPIMockRecorder) DescribeNotebookInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNotebookInstanceWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeNotebookInstanceWithContext), varargs...)
}

// DescribeTrainingJob mocks base method
func (m *MockSageMakerAPI) DescribeTrainingJob(arg0 *sagemaker.DescribeTrainingJobInput) (*sagemaker.DescribeTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTrainingJob", arg0)
	ret0, _ := ret[0].(*sagemaker.DescribeTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrainingJob indicates an expected call of DescribeTrainingJob
func (mr *MockSageMakerAPIMockRecorder) DescribeTrainingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrainingJob", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeTrainingJob), arg0)
}

// DescribeTrainingJobRequest mocks base method
func (m *MockSageMakerAPI) DescribeTrainingJobRequest(arg0 *sagemaker.DescribeTrainingJobInput) (*request.Request, *sagemaker.DescribeTrainingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTrainingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DescribeTrainingJobOutput)
	return ret0, ret1
}

// DescribeTrainingJobRequest indicates an expected call of DescribeTrainingJobRequest
func (mr *MockSageMakerAPIMockRecorder) DescribeTrainingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrainingJobRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeTrainingJobRequest), arg0)
}

// DescribeTrainingJobWithContext mocks base method
func (m *MockSageMakerAPI) DescribeTrainingJobWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeTrainingJobInput, arg2 ...request.Option) (*sagemaker.DescribeTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrainingJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrainingJobWithContext indicates an expected call of DescribeTrainingJobWithContext
func (mr *MockSageMakerAPIMockRecorder) DescribeTrainingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrainingJobWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeTrainingJobWithContext), varargs...)
}

// DescribeTransformJob mocks base method
func (m *MockSageMakerAPI) DescribeTransformJob(arg0 *sagemaker.DescribeTransformJobInput) (*sagemaker.DescribeTransformJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTransformJob", arg0)
	ret0, _ := ret[0].(*sagemaker.DescribeTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransformJob indicates an expected call of DescribeTransformJob
func (mr *MockSageMakerAPIMockRecorder) DescribeTransformJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransformJob", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeTransformJob), arg0)
}

// DescribeTransformJobRequest mocks base method
func (m *MockSageMakerAPI) DescribeTransformJobRequest(arg0 *sagemaker.DescribeTransformJobInput) (*request.Request, *sagemaker.DescribeTransformJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTransformJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.DescribeTransformJobOutput)
	return ret0, ret1
}

// DescribeTransformJobRequest indicates an expected call of DescribeTransformJobRequest
func (mr *MockSageMakerAPIMockRecorder) DescribeTransformJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransformJobRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeTransformJobRequest), arg0)
}

// DescribeTransformJobWithContext mocks base method
func (m *MockSageMakerAPI) DescribeTransformJobWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeTransformJobInput, arg2 ...request.Option) (*sagemaker.DescribeTransformJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransformJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransformJobWithContext indicates an expected call of DescribeTransformJobWithContext
func (mr *MockSageMakerAPIMockRecorder) DescribeTransformJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransformJobWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).DescribeTransformJobWithContext), varargs...)
}

// ListEndpointConfigs mocks base method
func (m *MockSageMakerAPI) ListEndpointConfigs(arg0 *sagemaker.ListEndpointConfigsInput) (*sagemaker.ListEndpointConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointConfigs", arg0)
	ret0, _ := ret[0].(*sagemaker.ListEndpointConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointConfigs indicates an expected call of ListEndpointConfigs
func (mr *MockSageMakerAPIMockRecorder) ListEndpointConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointConfigs", reflect.TypeOf((*MockSageMakerAPI)(nil).ListEndpointConfigs), arg0)
}

// ListEndpointConfigsPages mocks base method
func (m *MockSageMakerAPI) ListEndpointConfigsPages(arg0 *sagemaker.ListEndpointConfigsInput, arg1 func(*sagemaker.ListEndpointConfigsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointConfigsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEndpointConfigsPages indicates an expected call of ListEndpointConfigsPages
func (mr *MockSageMakerAPIMockRecorder) ListEndpointConfigsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointConfigsPages", reflect.TypeOf((*MockSageMakerAPI)(nil).ListEndpointConfigsPages), arg0, arg1)
}

// ListEndpointConfigsPagesWithContext mocks base method
func (m *MockSageMakerAPI) ListEndpointConfigsPagesWithContext(arg0 aws.Context, arg1 *sagemaker.ListEndpointConfigsInput, arg2 func(*sagemaker.ListEndpointConfigsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointConfigsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEndpointConfigsPagesWithContext indicates an expected call of ListEndpointConfigsPagesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListEndpointConfigsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointConfigsPagesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListEndpointConfigsPagesWithContext), varargs...)
}

// ListEndpointConfigsRequest mocks base method
func (m *MockSageMakerAPI) ListEndpointConfigsRequest(arg0 *sagemaker.ListEndpointConfigsInput) (*request.Request, *sagemaker.ListEndpointConfigsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointConfigsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.ListEndpointConfigsOutput)
	return ret0, ret1
}

// ListEndpointConfigsRequest indicates an expected call of ListEndpointConfigsRequest
func (mr *MockSageMakerAPIMockRecorder) ListEndpointConfigsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointConfigsRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).ListEndpointConfigsRequest), arg0)
}

// ListEndpointConfigsWithContext mocks base method
func (m *MockSageMakerAPI) ListEndpointConfigsWithContext(arg0 aws.Context, arg1 *sagemaker.ListEndpointConfigsInput, arg2 ...request.Option) (*sagemaker.ListEndpointConfigsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointConfigsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListEndpointConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointConfigsWithContext indicates an expected call of ListEndpointConfigsWithContext
func (mr *MockSageMakerAPIMockRecorder) ListEndpointConfigsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointConfigsWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListEndpointConfigsWithContext), varargs...)
}

// ListEndpoints mocks base method
func (m *MockSageMakerAPI) ListEndpoints(arg0 *sagemaker.ListEndpointsInput) (*sagemaker.ListEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpoints", arg0)
	ret0, _ := ret[0].(*sagemaker.ListEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpoints indicates an expected call of ListEndpoints
func (mr *MockSageMakerAPIMockRecorder) ListEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpoints", reflect.TypeOf((*MockSageMakerAPI)(nil).ListEndpoints), arg0)
}

// ListEndpointsPages mocks base method
func (m *MockSageMakerAPI) ListEndpointsPages(arg0 *sagemaker.ListEndpointsInput, arg1 func(*sagemaker.ListEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEndpointsPages indicates an expected call of ListEndpointsPages
func (mr *MockSageMakerAPIMockRecorder) ListEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointsPages", reflect.TypeOf((*MockSageMakerAPI)(nil).ListEndpointsPages), arg0, arg1)
}

// ListEndpointsPagesWithContext mocks base method
func (m *MockSageMakerAPI) ListEndpointsPagesWithContext(arg0 aws.Context, arg1 *sagemaker.ListEndpointsInput, arg2 func(*sagemaker.ListEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEndpointsPagesWithContext indicates an expected call of ListEndpointsPagesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointsPagesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListEndpointsPagesWithContext), varargs...)
}

// ListEndpointsRequest mocks base method
func (m *MockSageMakerAPI) ListEndpointsRequest(arg0 *sagemaker.ListEndpointsInput) (*request.Request, *sagemaker.ListEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.ListEndpointsOutput)
	return ret0, ret1
}

// ListEndpointsRequest indicates an expected call of ListEndpointsRequest
func (mr *MockSageMakerAPIMockRecorder) ListEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointsRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).ListEndpointsRequest), arg0)
}

// ListEndpointsWithContext mocks base method
func (m *MockSageMakerAPI) ListEndpointsWithContext(arg0 aws.Context, arg1 *sagemaker.ListEndpointsInput, arg2 ...request.Option) (*sagemaker.ListEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointsWithContext indicates an expected call of ListEndpointsWithContext
func (mr *MockSageMakerAPIMockRecorder) ListEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointsWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListEndpointsWithContext), varargs...)
}

// ListHyperParameterTuningJobs mocks base method
func (m *MockSageMakerAPI) ListHyperParameterTuningJobs(arg0 *sagemaker.ListHyperParameterTuningJobsInput) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHyperParameterTuningJobs", arg0)
	ret0, _ := ret[0].(*sagemaker.ListHyperParameterTuningJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHyperParameterTuningJobs indicates an expected call of ListHyperParameterTuningJobs
func (mr *MockSageMakerAPIMockRecorder) ListHyperParameterTuningJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHyperParameterTuningJobs", reflect.TypeOf((*MockSageMakerAPI)(nil).ListHyperParameterTuningJobs), arg0)
}

// ListHyperParameterTuningJobsPages mocks base method
func (m *MockSageMakerAPI) ListHyperParameterTuningJobsPages(arg0 *sagemaker.ListHyperParameterTuningJobsInput, arg1 func(*sagemaker.ListHyperParameterTuningJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHyperParameterTuningJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHyperParameterTuningJobsPages indicates an expected call of ListHyperParameterTuningJobsPages
func (mr *MockSageMakerAPIMockRecorder) ListHyperParameterTuningJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHyperParameterTuningJobsPages", reflect.TypeOf((*MockSageMakerAPI)(nil).ListHyperParameterTuningJobsPages), arg0, arg1)
}

// ListHyperParameterTuningJobsPagesWithContext mocks base method
func (m *MockSageMakerAPI) ListHyperParameterTuningJobsPagesWithContext(arg0 aws.Context, arg1 *sagemaker.ListHyperParameterTuningJobsInput, arg2 func(*sagemaker.ListHyperParameterTuningJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHyperParameterTuningJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHyperParameterTuningJobsPagesWithContext indicates an expected call of ListHyperParameterTuningJobsPagesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListHyperParameterTuningJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHyperParameterTuningJobsPagesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListHyperParameterTuningJobsPagesWithContext), varargs...)
}

// ListHyperParameterTuningJobsRequest mocks base method
func (m *MockSageMakerAPI) ListHyperParameterTuningJobsRequest(arg0 *sagemaker.ListHyperParameterTuningJobsInput) (*request.Request, *sagemaker.ListHyperParameterTuningJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHyperParameterTuningJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.ListHyperParameterTuningJobsOutput)
	return ret0, ret1
}

// ListHyperParameterTuningJobsRequest indicates an expected call of ListHyperParameterTuningJobsRequest
func (mr *MockSageMakerAPIMockRecorder) ListHyperParameterTuningJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHyperParameterTuningJobsRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).ListHyperParameterTuningJobsRequest), arg0)
}

// ListHyperParameterTuningJobsWithContext mocks base method
func (m *MockSageMakerAPI) ListHyperParameterTuningJobsWithContext(arg0 aws.Context, arg1 *sagemaker.ListHyperParameterTuningJobsInput, arg2 ...request.Option) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHyperParameterTuningJobsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListHyperParameterTuningJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHyperParameterTuningJobsWithContext indicates an expected call of ListHyperParameterTuningJobsWithContext
func (mr *MockSageMakerAPIMockRecorder) ListHyperParameterTuningJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHyperParameterTuningJobsWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListHyperParameterTuningJobsWithContext), varargs...)
}

// ListModels mocks base method
func (m *MockSageMakerAPI) ListModels(arg0 *sagemaker.ListModelsInput) (*sagemaker.ListModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", arg0)
	ret0, _ := ret[0].(*sagemaker.ListModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels
func (mr *MockSageMakerAPIMockRecorder) ListModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockSageMakerAPI)(nil).ListModels), arg0)
}

// ListModelsPages mocks base method
func (m *MockSageMakerAPI) ListModelsPages(arg0 *sagemaker.ListModelsInput, arg1 func(*sagemaker.ListModelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListModelsPages indicates an expected call of ListModelsPages
func (mr *MockSageMakerAPIMockRecorder) ListModelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsPages", reflect.TypeOf((*MockSageMakerAPI)(nil).ListModelsPages), arg0, arg1)
}

// ListModelsPagesWithContext mocks base method
func (m *MockSageMakerAPI) ListModelsPagesWithContext(arg0 aws.Context, arg1 *sagemaker.ListModelsInput, arg2 func(*sagemaker.ListModelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListModelsPagesWithContext indicates an expected call of ListModelsPagesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListModelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsPagesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListModelsPagesWithContext), varargs...)
}

// ListModelsRequest mocks base method
func (m *MockSageMakerAPI) ListModelsRequest(arg0 *sagemaker.ListModelsInput) (*request.Request, *sagemaker.ListModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.ListModelsOutput)
	return ret0, ret1
}

// ListModelsRequest indicates an expected call of ListModelsRequest
func (mr *MockSageMakerAPIMockRecorder) ListModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).ListModelsRequest), arg0)
}

// ListModelsWithContext mocks base method
func (m *MockSageMakerAPI) ListModelsWithContext(arg0 aws.Context, arg1 *sagemaker.ListModelsInput, arg2 ...request.Option) (*sagemaker.ListModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelsWithContext indicates an expected call of ListModelsWithContext
func (mr *MockSageMakerAPIMockRecorder) ListModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListModelsWithContext), varargs...)
}

// ListNotebookInstanceLifecycleConfigs mocks base method
func (m *MockSageMakerAPI) ListNotebookInstanceLifecycleConfigs(arg0 *sagemaker.ListNotebookInstanceLifecycleConfigsInput) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotebookInstanceLifecycleConfigs", arg0)
	ret0, _ := ret[0].(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotebookInstanceLifecycleConfigs indicates an expected call of ListNotebookInstanceLifecycleConfigs
func (mr *MockSageMakerAPIMockRecorder) ListNotebookInstanceLifecycleConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstanceLifecycleConfigs", reflect.TypeOf((*MockSageMakerAPI)(nil).ListNotebookInstanceLifecycleConfigs), arg0)
}

// ListNotebookInstanceLifecycleConfigsPages mocks base method
func (m *MockSageMakerAPI) ListNotebookInstanceLifecycleConfigsPages(arg0 *sagemaker.ListNotebookInstanceLifecycleConfigsInput, arg1 func(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotebookInstanceLifecycleConfigsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotebookInstanceLifecycleConfigsPages indicates an expected call of ListNotebookInstanceLifecycleConfigsPages
func (mr *MockSageMakerAPIMockRecorder) ListNotebookInstanceLifecycleConfigsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstanceLifecycleConfigsPages", reflect.TypeOf((*MockSageMakerAPI)(nil).ListNotebookInstanceLifecycleConfigsPages), arg0, arg1)
}

// ListNotebookInstanceLifecycleConfigsPagesWithContext mocks base method
func (m *MockSageMakerAPI) ListNotebookInstanceLifecycleConfigsPagesWithContext(arg0 aws.Context, arg1 *sagemaker.ListNotebookInstanceLifecycleConfigsInput, arg2 func(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotebookInstanceLifecycleConfigsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotebookInstanceLifecycleConfigsPagesWithContext indicates an expected call of ListNotebookInstanceLifecycleConfigsPagesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListNotebookInstanceLifecycleConfigsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstanceLifecycleConfigsPagesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListNotebookInstanceLifecycleConfigsPagesWithContext), varargs...)
}

// ListNotebookInstanceLifecycleConfigsRequest mocks base method
func (m *MockSageMakerAPI) ListNotebookInstanceLifecycleConfigsRequest(arg0 *sagemaker.ListNotebookInstanceLifecycleConfigsInput) (*request.Request, *sagemaker.ListNotebookInstanceLifecycleConfigsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotebookInstanceLifecycleConfigsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput)
	return ret0, ret1
}

// ListNotebookInstanceLifecycleConfigsRequest indicates an expected call of ListNotebookInstanceLifecycleConfigsRequest
func (mr *MockSageMakerAPIMockRecorder) ListNotebookInstanceLifecycleConfigsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstanceLifecycleConfigsRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).ListNotebookInstanceLifecycleConfigsRequest), arg0)
}

// ListNotebookInstanceLifecycleConfigsWithContext mocks base method
func (m *MockSageMakerAPI) ListNotebookInstanceLifecycleConfigsWithContext(arg0 aws.Context, arg1 *sagemaker.ListNotebookInstanceLifecycleConfigsInput, arg2 ...request.Option) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotebookInstanceLifecycleConfigsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotebookInstanceLifecycleConfigsWithContext indicates an expected call of ListNotebookInstanceLifecycleConfigsWithContext
func (mr *MockSageMakerAPIMockRecorder) ListNotebookInstanceLifecycleConfigsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstanceLifecycleConfigsWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListNotebookInstanceLifecycleConfigsWithContext), varargs...)
}

// ListNotebookInstances mocks base method
func (m *MockSageMakerAPI) ListNotebookInstances(arg0 *sagemaker.ListNotebookInstancesInput) (*sagemaker.ListNotebookInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotebookInstances", arg0)
	ret0, _ := ret[0].(*sagemaker.ListNotebookInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotebookInstances indicates an expected call of ListNotebookInstances
func (mr *MockSageMakerAPIMockRecorder) ListNotebookInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstances", reflect.TypeOf((*MockSageMakerAPI)(nil).ListNotebookInstances), arg0)
}

// ListNotebookInstancesPages mocks base method
func (m *MockSageMakerAPI) ListNotebookInstancesPages(arg0 *sagemaker.ListNotebookInstancesInput, arg1 func(*sagemaker.ListNotebookInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotebookInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotebookInstancesPages indicates an expected call of ListNotebookInstancesPages
func (mr *MockSageMakerAPIMockRecorder) ListNotebookInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstancesPages", reflect.TypeOf((*MockSageMakerAPI)(nil).ListNotebookInstancesPages), arg0, arg1)
}

// ListNotebookInstancesPagesWithContext mocks base method
func (m *MockSageMakerAPI) ListNotebookInstancesPagesWithContext(arg0 aws.Context, arg1 *sagemaker.ListNotebookInstancesInput, arg2 func(*sagemaker.ListNotebookInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotebookInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotebookInstancesPagesWithContext indicates an expected call of ListNotebookInstancesPagesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListNotebookInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstancesPagesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListNotebookInstancesPagesWithContext), varargs...)
}

// ListNotebookInstancesRequest mocks base method
func (m *MockSageMakerAPI) ListNotebookInstancesRequest(arg0 *sagemaker.ListNotebookInstancesInput) (*request.Request, *sagemaker.ListNotebookInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotebookInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.ListNotebookInstancesOutput)
	return ret0, ret1
}

// ListNotebookInstancesRequest indicates an expected call of ListNotebookInstancesRequest
func (mr *MockSageMakerAPIMockRecorder) ListNotebookInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstancesRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).ListNotebookInstancesRequest), arg0)
}

// ListNotebookInstancesWithContext mocks base method
func (m *MockSageMakerAPI) ListNotebookInstancesWithContext(arg0 aws.Context, arg1 *sagemaker.ListNotebookInstancesInput, arg2 ...request.Option) (*sagemaker.ListNotebookInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotebookInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListNotebookInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotebookInstancesWithContext indicates an expected call of ListNotebookInstancesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListNotebookInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstancesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListNotebookInstancesWithContext), varargs...)
}

// ListTags mocks base method
func (m *MockSageMakerAPI) ListTags(arg0 *sagemaker.ListTagsInput) (*sagemaker.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(*sagemaker.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags
func (mr *MockSageMakerAPIMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTags), arg0)
}

// ListTagsPages mocks base method
func (m *MockSageMakerAPI) ListTagsPages(arg0 *sagemaker.ListTagsInput, arg1 func(*sagemaker.ListTagsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsPages indicates an expected call of ListTagsPages
func (mr *MockSageMakerAPIMockRecorder) ListTagsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsPages", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTagsPages), arg0, arg1)
}

// ListTagsPagesWithContext mocks base method
func (m *MockSageMakerAPI) ListTagsPagesWithContext(arg0 aws.Context, arg1 *sagemaker.ListTagsInput, arg2 func(*sagemaker.ListTagsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsPagesWithContext indicates an expected call of ListTagsPagesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListTagsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsPagesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTagsPagesWithContext), varargs...)
}

// ListTagsRequest mocks base method
func (m *MockSageMakerAPI) ListTagsRequest(arg0 *sagemaker.ListTagsInput) (*request.Request, *sagemaker.ListTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.ListTagsOutput)
	return ret0, ret1
}

// ListTagsRequest indicates an expected call of ListTagsRequest
func (mr *MockSageMakerAPIMockRecorder) ListTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTagsRequest), arg0)
}

// ListTagsWithContext mocks base method
func (m *MockSageMakerAPI) ListTagsWithContext(arg0 aws.Context, arg1 *sagemaker.ListTagsInput, arg2 ...request.Option) (*sagemaker.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsWithContext indicates an expected call of ListTagsWithContext
func (mr *MockSageMakerAPIMockRecorder) ListTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTagsWithContext), varargs...)
}

// ListTrainingJobs mocks base method
func (m *MockSageMakerAPI) ListTrainingJobs(arg0 *sagemaker.ListTrainingJobsInput) (*sagemaker.ListTrainingJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrainingJobs", arg0)
	ret0, _ := ret[0].(*sagemaker.ListTrainingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrainingJobs indicates an expected call of ListTrainingJobs
func (mr *MockSageMakerAPIMockRecorder) ListTrainingJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobs", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTrainingJobs), arg0)
}

// ListTrainingJobsForHyperParameterTuningJob mocks base method
func (m *MockSageMakerAPI) ListTrainingJobsForHyperParameterTuningJob(arg0 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrainingJobsForHyperParameterTuningJob", arg0)
	ret0, _ := ret[0].(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrainingJobsForHyperParameterTuningJob indicates an expected call of ListTrainingJobsForHyperParameterTuningJob
func (mr *MockSageMakerAPIMockRecorder) ListTrainingJobsForHyperParameterTuningJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobsForHyperParameterTuningJob", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTrainingJobsForHyperParameterTuningJob), arg0)
}

// ListTrainingJobsForHyperParameterTuningJobPages mocks base method
func (m *MockSageMakerAPI) ListTrainingJobsForHyperParameterTuningJobPages(arg0 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, arg1 func(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrainingJobsForHyperParameterTuningJobPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrainingJobsForHyperParameterTuningJobPages indicates an expected call of ListTrainingJobsForHyperParameterTuningJobPages
func (mr *MockSageMakerAPIMockRecorder) ListTrainingJobsForHyperParameterTuningJobPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobsForHyperParameterTuningJobPages", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTrainingJobsForHyperParameterTuningJobPages), arg0, arg1)
}

// ListTrainingJobsForHyperParameterTuningJobPagesWithContext mocks base method
func (m *MockSageMakerAPI) ListTrainingJobsForHyperParameterTuningJobPagesWithContext(arg0 aws.Context, arg1 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, arg2 func(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrainingJobsForHyperParameterTuningJobPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrainingJobsForHyperParameterTuningJobPagesWithContext indicates an expected call of ListTrainingJobsForHyperParameterTuningJobPagesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListTrainingJobsForHyperParameterTuningJobPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobsForHyperParameterTuningJobPagesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTrainingJobsForHyperParameterTuningJobPagesWithContext), varargs...)
}

// ListTrainingJobsForHyperParameterTuningJobRequest mocks base method
func (m *MockSageMakerAPI) ListTrainingJobsForHyperParameterTuningJobRequest(arg0 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) (*request.Request, *sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrainingJobsForHyperParameterTuningJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput)
	return ret0, ret1
}

// ListTrainingJobsForHyperParameterTuningJobRequest indicates an expected call of ListTrainingJobsForHyperParameterTuningJobRequest
func (mr *MockSageMakerAPIMockRecorder) ListTrainingJobsForHyperParameterTuningJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobsForHyperParameterTuningJobRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTrainingJobsForHyperParameterTuningJobRequest), arg0)
}

// ListTrainingJobsForHyperParameterTuningJobWithContext mocks base method
func (m *MockSageMakerAPI) ListTrainingJobsForHyperParameterTuningJobWithContext(arg0 aws.Context, arg1 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, arg2 ...request.Option) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrainingJobsForHyperParameterTuningJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrainingJobsForHyperParameterTuningJobWithContext indicates an expected call of ListTrainingJobsForHyperParameterTuningJobWithContext
func (mr *MockSageMakerAPIMockRecorder) ListTrainingJobsForHyperParameterTuningJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobsForHyperParameterTuningJobWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTrainingJobsForHyperParameterTuningJobWithContext), varargs...)
}

// ListTrainingJobsPages mocks base method
func (m *MockSageMakerAPI) ListTrainingJobsPages(arg0 *sagemaker.ListTrainingJobsInput, arg1 func(*sagemaker.ListTrainingJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrainingJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrainingJobsPages indicates an expected call of ListTrainingJobsPages
func (mr *MockSageMakerAPIMockRecorder) ListTrainingJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobsPages", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTrainingJobsPages), arg0, arg1)
}

// ListTrainingJobsPagesWithContext mocks base method
func (m *MockSageMakerAPI) ListTrainingJobsPagesWithContext(arg0 aws.Context, arg1 *sagemaker.ListTrainingJobsInput, arg2 func(*sagemaker.ListTrainingJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrainingJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrainingJobsPagesWithContext indicates an expected call of ListTrainingJobsPagesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListTrainingJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobsPagesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTrainingJobsPagesWithContext), varargs...)
}

// ListTrainingJobsRequest mocks base method
func (m *MockSageMakerAPI) ListTrainingJobsRequest(arg0 *sagemaker.ListTrainingJobsInput) (*request.Request, *sagemaker.ListTrainingJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrainingJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.ListTrainingJobsOutput)
	return ret0, ret1
}

// ListTrainingJobsRequest indicates an expected call of ListTrainingJobsRequest
func (mr *MockSageMakerAPIMockRecorder) ListTrainingJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobsRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTrainingJobsRequest), arg0)
}

// ListTrainingJobsWithContext mocks base method
func (m *MockSageMakerAPI) ListTrainingJobsWithContext(arg0 aws.Context, arg1 *sagemaker.ListTrainingJobsInput, arg2 ...request.Option) (*sagemaker.ListTrainingJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrainingJobsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListTrainingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrainingJobsWithContext indicates an expected call of ListTrainingJobsWithContext
func (mr *MockSageMakerAPIMockRecorder) ListTrainingJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobsWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTrainingJobsWithContext), varargs...)
}

// ListTransformJobs mocks base method
func (m *MockSageMakerAPI) ListTransformJobs(arg0 *sagemaker.ListTransformJobsInput) (*sagemaker.ListTransformJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransformJobs", arg0)
	ret0, _ := ret[0].(*sagemaker.ListTransformJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransformJobs indicates an expected call of ListTransformJobs
func (mr *MockSageMakerAPIMockRecorder) ListTransformJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformJobs", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTransformJobs), arg0)
}

// ListTransformJobsPages mocks base method
func (m *MockSageMakerAPI) ListTransformJobsPages(arg0 *sagemaker.ListTransformJobsInput, arg1 func(*sagemaker.ListTransformJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransformJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransformJobsPages indicates an expected call of ListTransformJobsPages
func (mr *MockSageMakerAPIMockRecorder) ListTransformJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformJobsPages", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTransformJobsPages), arg0, arg1)
}

// ListTransformJobsPagesWithContext mocks base method
func (m *MockSageMakerAPI) ListTransformJobsPagesWithContext(arg0 aws.Context, arg1 *sagemaker.ListTransformJobsInput, arg2 func(*sagemaker.ListTransformJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransformJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransformJobsPagesWithContext indicates an expected call of ListTransformJobsPagesWithContext
func (mr *MockSageMakerAPIMockRecorder) ListTransformJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformJobsPagesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTransformJobsPagesWithContext), varargs...)
}

// ListTransformJobsRequest mocks base method
func (m *MockSageMakerAPI) ListTransformJobsRequest(arg0 *sagemaker.ListTransformJobsInput) (*request.Request, *sagemaker.ListTransformJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransformJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.ListTransformJobsOutput)
	return ret0, ret1
}

// ListTransformJobsRequest indicates an expected call of ListTransformJobsRequest
func (mr *MockSageMakerAPIMockRecorder) ListTransformJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformJobsRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTransformJobsRequest), arg0)
}

// ListTransformJobsWithContext mocks base method
func (m *MockSageMakerAPI) ListTransformJobsWithContext(arg0 aws.Context, arg1 *sagemaker.ListTransformJobsInput, arg2 ...request.Option) (*sagemaker.ListTransformJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransformJobsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListTransformJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransformJobsWithContext indicates an expected call of ListTransformJobsWithContext
func (mr *MockSageMakerAPIMockRecorder) ListTransformJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformJobsWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).ListTransformJobsWithContext), varargs...)
}

// StartNotebookInstance mocks base method
func (m *MockSageMakerAPI) StartNotebookInstance(arg0 *sagemaker.StartNotebookInstanceInput) (*sagemaker.StartNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartNotebookInstance", arg0)
	ret0, _ := ret[0].(*sagemaker.StartNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartNotebookInstance indicates an expected call of StartNotebookInstance
func (mr *MockSageMakerAPIMockRecorder) StartNotebookInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNotebookInstance", reflect.TypeOf((*MockSageMakerAPI)(nil).StartNotebookInstance), arg0)
}

// StartNotebookInstanceRequest mocks base method
func (m *MockSageMakerAPI) StartNotebookInstanceRequest(arg0 *sagemaker.StartNotebookInstanceInput) (*request.Request, *sagemaker.StartNotebookInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartNotebookInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.StartNotebookInstanceOutput)
	return ret0, ret1
}

// StartNotebookInstanceRequest indicates an expected call of StartNotebookInstanceRequest
func (mr *MockSageMakerAPIMockRecorder) StartNotebookInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNotebookInstanceRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).StartNotebookInstanceRequest), arg0)
}

// StartNotebookInstanceWithContext mocks base method
func (m *MockSageMakerAPI) StartNotebookInstanceWithContext(arg0 aws.Context, arg1 *sagemaker.StartNotebookInstanceInput, arg2 ...request.Option) (*sagemaker.StartNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartNotebookInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.StartNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartNotebookInstanceWithContext indicates an expected call of StartNotebookInstanceWithContext
func (mr *MockSageMakerAPIMockRecorder) StartNotebookInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNotebookInstanceWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).StartNotebookInstanceWithContext), varargs...)
}

// StopHyperParameterTuningJob mocks base method
func (m *MockSageMakerAPI) StopHyperParameterTuningJob(arg0 *sagemaker.StopHyperParameterTuningJobInput) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopHyperParameterTuningJob", arg0)
	ret0, _ := ret[0].(*sagemaker.StopHyperParameterTuningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopHyperParameterTuningJob indicates an expected call of StopHyperParameterTuningJob
func (mr *MockSageMakerAPIMockRecorder) StopHyperParameterTuningJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopHyperParameterTuningJob", reflect.TypeOf((*MockSageMakerAPI)(nil).StopHyperParameterTuningJob), arg0)
}

// StopHyperParameterTuningJobRequest mocks base method
func (m *MockSageMakerAPI) StopHyperParameterTuningJobRequest(arg0 *sagemaker.StopHyperParameterTuningJobInput) (*request.Request, *sagemaker.StopHyperParameterTuningJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopHyperParameterTuningJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.StopHyperParameterTuningJobOutput)
	return ret0, ret1
}

// StopHyperParameterTuningJobRequest indicates an expected call of StopHyperParameterTuningJobRequest
func (mr *MockSageMakerAPIMockRecorder) StopHyperParameterTuningJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopHyperParameterTuningJobRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).StopHyperParameterTuningJobRequest), arg0)
}

// StopHyperParameterTuningJobWithContext mocks base method
func (m *MockSageMakerAPI) StopHyperParameterTuningJobWithContext(arg0 aws.Context, arg1 *sagemaker.StopHyperParameterTuningJobInput, arg2 ...request.Option) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopHyperParameterTuningJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.StopHyperParameterTuningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopHyperParameterTuningJobWithContext indicates an expected call of StopHyperParameterTuningJobWithContext
func (mr *MockSageMakerAPIMockRecorder) StopHyperParameterTuningJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopHyperParameterTuningJobWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).StopHyperParameterTuningJobWithContext), varargs...)
}

// StopNotebookInstance mocks base method
func (m *MockSageMakerAPI) StopNotebookInstance(arg0 *sagemaker.StopNotebookInstanceInput) (*sagemaker.StopNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopNotebookInstance", arg0)
	ret0, _ := ret[0].(*sagemaker.StopNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopNotebookInstance indicates an expected call of StopNotebookInstance
func (mr *MockSageMakerAPIMockRecorder) StopNotebookInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopNotebookInstance", reflect.TypeOf((*MockSageMakerAPI)(nil).StopNotebookInstance), arg0)
}

// StopNotebookInstanceRequest mocks base method
func (m *MockSageMakerAPI) StopNotebookInstanceRequest(arg0 *sagemaker.StopNotebookInstanceInput) (*request.Request, *sagemaker.StopNotebookInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopNotebookInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.StopNotebookInstanceOutput)
	return ret0, ret1
}

// StopNotebookInstanceRequest indicates an expected call of StopNotebookInstanceRequest
func (mr *MockSageMakerAPIMockRecorder) StopNotebookInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopNotebookInstanceRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).StopNotebookInstanceRequest), arg0)
}

// StopNotebookInstanceWithContext mocks base method
func (m *MockSageMakerAPI) StopNotebookInstanceWithContext(arg0 aws.Context, arg1 *sagemaker.StopNotebookInstanceInput, arg2 ...request.Option) (*sagemaker.StopNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopNotebookInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.StopNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopNotebookInstanceWithContext indicates an expected call of StopNotebookInstanceWithContext
func (mr *MockSageMakerAPIMockRecorder) StopNotebookInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopNotebookInstanceWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).StopNotebookInstanceWithContext), varargs...)
}

// StopTrainingJob mocks base method
func (m *MockSageMakerAPI) StopTrainingJob(arg0 *sagemaker.StopTrainingJobInput) (*sagemaker.StopTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTrainingJob", arg0)
	ret0, _ := ret[0].(*sagemaker.StopTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTrainingJob indicates an expected call of StopTrainingJob
func (mr *MockSageMakerAPIMockRecorder) StopTrainingJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTrainingJob", reflect.TypeOf((*MockSageMakerAPI)(nil).StopTrainingJob), arg0)
}

// StopTrainingJobRequest mocks base method
func (m *MockSageMakerAPI) StopTrainingJobRequest(arg0 *sagemaker.StopTrainingJobInput) (*request.Request, *sagemaker.StopTrainingJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTrainingJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.StopTrainingJobOutput)
	return ret0, ret1
}

// StopTrainingJobRequest indicates an expected call of StopTrainingJobRequest
func (mr *MockSageMakerAPIMockRecorder) StopTrainingJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTrainingJobRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).StopTrainingJobRequest), arg0)
}

// StopTrainingJobWithContext mocks base method
func (m *MockSageMakerAPI) StopTrainingJobWithContext(arg0 aws.Context, arg1 *sagemaker.StopTrainingJobInput, arg2 ...request.Option) (*sagemaker.StopTrainingJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopTrainingJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.StopTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTrainingJobWithContext indicates an expected call of StopTrainingJobWithContext
func (mr *MockSageMakerAPIMockRecorder) StopTrainingJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTrainingJobWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).StopTrainingJobWithContext), varargs...)
}

// StopTransformJob mocks base method
func (m *MockSageMakerAPI) StopTransformJob(arg0 *sagemaker.StopTransformJobInput) (*sagemaker.StopTransformJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTransformJob", arg0)
	ret0, _ := ret[0].(*sagemaker.StopTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTransformJob indicates an expected call of StopTransformJob
func (mr *MockSageMakerAPIMockRecorder) StopTransformJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTransformJob", reflect.TypeOf((*MockSageMakerAPI)(nil).StopTransformJob), arg0)
}

// StopTransformJobRequest mocks base method
func (m *MockSageMakerAPI) StopTransformJobRequest(arg0 *sagemaker.StopTransformJobInput) (*request.Request, *sagemaker.StopTransformJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTransformJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.StopTransformJobOutput)
	return ret0, ret1
}

// StopTransformJobRequest indicates an expected call of StopTransformJobRequest
func (mr *MockSageMakerAPIMockRecorder) StopTransformJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTransformJobRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).StopTransformJobRequest), arg0)
}

// StopTransformJobWithContext mocks base method
func (m *MockSageMakerAPI) StopTransformJobWithContext(arg0 aws.Context, arg1 *sagemaker.StopTransformJobInput, arg2 ...request.Option) (*sagemaker.StopTransformJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopTransformJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.StopTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTransformJobWithContext indicates an expected call of StopTransformJobWithContext
func (mr *MockSageMakerAPIMockRecorder) StopTransformJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTransformJobWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).StopTransformJobWithContext), varargs...)
}

// UpdateEndpoint mocks base method
func (m *MockSageMakerAPI) UpdateEndpoint(arg0 *sagemaker.UpdateEndpointInput) (*sagemaker.UpdateEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpoint", arg0)
	ret0, _ := ret[0].(*sagemaker.UpdateEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpoint indicates an expected call of UpdateEndpoint
func (mr *MockSageMakerAPIMockRecorder) UpdateEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpoint", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateEndpoint), arg0)
}

// UpdateEndpointRequest mocks base method
func (m *MockSageMakerAPI) UpdateEndpointRequest(arg0 *sagemaker.UpdateEndpointInput) (*request.Request, *sagemaker.UpdateEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.UpdateEndpointOutput)
	return ret0, ret1
}

// UpdateEndpointRequest indicates an expected call of UpdateEndpointRequest
func (mr *MockSageMakerAPIMockRecorder) UpdateEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateEndpointRequest), arg0)
}

// UpdateEndpointWeightsAndCapacities mocks base method
func (m *MockSageMakerAPI) UpdateEndpointWeightsAndCapacities(arg0 *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointWeightsAndCapacities", arg0)
	ret0, _ := ret[0].(*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointWeightsAndCapacities indicates an expected call of UpdateEndpointWeightsAndCapacities
func (mr *MockSageMakerAPIMockRecorder) UpdateEndpointWeightsAndCapacities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointWeightsAndCapacities", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateEndpointWeightsAndCapacities), arg0)
}

// UpdateEndpointWeightsAndCapacitiesRequest mocks base method
func (m *MockSageMakerAPI) UpdateEndpointWeightsAndCapacitiesRequest(arg0 *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (*request.Request, *sagemaker.UpdateEndpointWeightsAndCapacitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointWeightsAndCapacitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput)
	return ret0, ret1
}

// UpdateEndpointWeightsAndCapacitiesRequest indicates an expected call of UpdateEndpointWeightsAndCapacitiesRequest
func (mr *MockSageMakerAPIMockRecorder) UpdateEndpointWeightsAndCapacitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointWeightsAndCapacitiesRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateEndpointWeightsAndCapacitiesRequest), arg0)
}

// UpdateEndpointWeightsAndCapacitiesWithContext mocks base method
func (m *MockSageMakerAPI) UpdateEndpointWeightsAndCapacitiesWithContext(arg0 aws.Context, arg1 *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, arg2 ...request.Option) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEndpointWeightsAndCapacitiesWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointWeightsAndCapacitiesWithContext indicates an expected call of UpdateEndpointWeightsAndCapacitiesWithContext
func (mr *MockSageMakerAPIMockRecorder) UpdateEndpointWeightsAndCapacitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointWeightsAndCapacitiesWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateEndpointWeightsAndCapacitiesWithContext), varargs...)
}

// UpdateEndpointWithContext mocks base method
func (m *MockSageMakerAPI) UpdateEndpointWithContext(arg0 aws.Context, arg1 *sagemaker.UpdateEndpointInput, arg2 ...request.Option) (*sagemaker.UpdateEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.UpdateEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointWithContext indicates an expected call of UpdateEndpointWithContext
func (mr *MockSageMakerAPIMockRecorder) UpdateEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateEndpointWithContext), varargs...)
}

// UpdateNotebookInstance mocks base method
func (m *MockSageMakerAPI) UpdateNotebookInstance(arg0 *sagemaker.UpdateNotebookInstanceInput) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotebookInstance", arg0)
	ret0, _ := ret[0].(*sagemaker.UpdateNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotebookInstance indicates an expected call of UpdateNotebookInstance
func (mr *MockSageMakerAPIMockRecorder) UpdateNotebookInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotebookInstance", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateNotebookInstance), arg0)
}

// UpdateNotebookInstanceLifecycleConfig mocks base method
func (m *MockSageMakerAPI) UpdateNotebookInstanceLifecycleConfig(arg0 *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotebookInstanceLifecycleConfig", arg0)
	ret0, _ := ret[0].(*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotebookInstanceLifecycleConfig indicates an expected call of UpdateNotebookInstanceLifecycleConfig
func (mr *MockSageMakerAPIMockRecorder) UpdateNotebookInstanceLifecycleConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotebookInstanceLifecycleConfig", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateNotebookInstanceLifecycleConfig), arg0)
}

// UpdateNotebookInstanceLifecycleConfigRequest mocks base method
func (m *MockSageMakerAPI) UpdateNotebookInstanceLifecycleConfigRequest(arg0 *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) (*request.Request, *sagemaker.UpdateNotebookInstanceLifecycleConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotebookInstanceLifecycleConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput)
	return ret0, ret1
}

// UpdateNotebookInstanceLifecycleConfigRequest indicates an expected call of UpdateNotebookInstanceLifecycleConfigRequest
func (mr *MockSageMakerAPIMockRecorder) UpdateNotebookInstanceLifecycleConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotebookInstanceLifecycleConfigRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateNotebookInstanceLifecycleConfigRequest), arg0)
}

// UpdateNotebookInstanceLifecycleConfigWithContext mocks base method
func (m *MockSageMakerAPI) UpdateNotebookInstanceLifecycleConfigWithContext(arg0 aws.Context, arg1 *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, arg2 ...request.Option) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNotebookInstanceLifecycleConfigWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotebookInstanceLifecycleConfigWithContext indicates an expected call of UpdateNotebookInstanceLifecycleConfigWithContext
func (mr *MockSageMakerAPIMockRecorder) UpdateNotebookInstanceLifecycleConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotebookInstanceLifecycleConfigWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateNotebookInstanceLifecycleConfigWithContext), varargs...)
}

// UpdateNotebookInstanceRequest mocks base method
func (m *MockSageMakerAPI) UpdateNotebookInstanceRequest(arg0 *sagemaker.UpdateNotebookInstanceInput) (*request.Request, *sagemaker.UpdateNotebookInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotebookInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemaker.UpdateNotebookInstanceOutput)
	return ret0, ret1
}

// UpdateNotebookInstanceRequest indicates an expected call of UpdateNotebookInstanceRequest
func (mr *MockSageMakerAPIMockRecorder) UpdateNotebookInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotebookInstanceRequest", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateNotebookInstanceRequest), arg0)
}

// UpdateNotebookInstanceWithContext mocks base method
func (m *MockSageMakerAPI) UpdateNotebookInstanceWithContext(arg0 aws.Context, arg1 *sagemaker.UpdateNotebookInstanceInput, arg2 ...request.Option) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNotebookInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.UpdateNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotebookInstanceWithContext indicates an expected call of UpdateNotebookInstanceWithContext
func (mr *MockSageMakerAPIMockRecorder) UpdateNotebookInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotebookInstanceWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).UpdateNotebookInstanceWithContext), varargs...)
}

// WaitUntilEndpointDeleted mocks base method
func (m *MockSageMakerAPI) WaitUntilEndpointDeleted(arg0 *sagemaker.DescribeEndpointInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilEndpointDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEndpointDeleted indicates an expected call of WaitUntilEndpointDeleted
func (mr *MockSageMakerAPIMockRecorder) WaitUntilEndpointDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEndpointDeleted", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilEndpointDeleted), arg0)
}

// WaitUntilEndpointDeletedWithContext mocks base method
func (m *MockSageMakerAPI) WaitUntilEndpointDeletedWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeEndpointInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilEndpointDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEndpointDeletedWithContext indicates an expected call of WaitUntilEndpointDeletedWithContext
func (mr *MockSageMakerAPIMockRecorder) WaitUntilEndpointDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEndpointDeletedWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilEndpointDeletedWithContext), varargs...)
}

// WaitUntilEndpointInService mocks base method
func (m *MockSageMakerAPI) WaitUntilEndpointInService(arg0 *sagemaker.DescribeEndpointInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilEndpointInService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEndpointInService indicates an expected call of WaitUntilEndpointInService
func (mr *MockSageMakerAPIMockRecorder) WaitUntilEndpointInService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEndpointInService", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilEndpointInService), arg0)
}

// WaitUntilEndpointInServiceWithContext mocks base method
func (m *MockSageMakerAPI) WaitUntilEndpointInServiceWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeEndpointInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilEndpointInServiceWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEndpointInServiceWithContext indicates an expected call of WaitUntilEndpointInServiceWithContext
func (mr *MockSageMakerAPIMockRecorder) WaitUntilEndpointInServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEndpointInServiceWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilEndpointInServiceWithContext), varargs...)
}

// WaitUntilNotebookInstanceDeleted mocks base method
func (m *MockSageMakerAPI) WaitUntilNotebookInstanceDeleted(arg0 *sagemaker.DescribeNotebookInstanceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilNotebookInstanceDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilNotebookInstanceDeleted indicates an expected call of WaitUntilNotebookInstanceDeleted
func (mr *MockSageMakerAPIMockRecorder) WaitUntilNotebookInstanceDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilNotebookInstanceDeleted", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilNotebookInstanceDeleted), arg0)
}

// WaitUntilNotebookInstanceDeletedWithContext mocks base method
func (m *MockSageMakerAPI) WaitUntilNotebookInstanceDeletedWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeNotebookInstanceInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilNotebookInstanceDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilNotebookInstanceDeletedWithContext indicates an expected call of WaitUntilNotebookInstanceDeletedWithContext
func (mr *MockSageMakerAPIMockRecorder) WaitUntilNotebookInstanceDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilNotebookInstanceDeletedWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilNotebookInstanceDeletedWithContext), varargs...)
}

// WaitUntilNotebookInstanceInService mocks base method
func (m *MockSageMakerAPI) WaitUntilNotebookInstanceInService(arg0 *sagemaker.DescribeNotebookInstanceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilNotebookInstanceInService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilNotebookInstanceInService indicates an expected call of WaitUntilNotebookInstanceInService
func (mr *MockSageMakerAPIMockRecorder) WaitUntilNotebookInstanceInService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilNotebookInstanceInService", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilNotebookInstanceInService), arg0)
}

// WaitUntilNotebookInstanceInServiceWithContext mocks base method
func (m *MockSageMakerAPI) WaitUntilNotebookInstanceInServiceWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeNotebookInstanceInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilNotebookInstanceInServiceWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilNotebookInstanceInServiceWithContext indicates an expected call of WaitUntilNotebookInstanceInServiceWithContext
func (mr *MockSageMakerAPIMockRecorder) WaitUntilNotebookInstanceInServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilNotebookInstanceInServiceWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilNotebookInstanceInServiceWithContext), varargs...)
}

// WaitUntilNotebookInstanceStopped mocks base method
func (m *MockSageMakerAPI) WaitUntilNotebookInstanceStopped(arg0 *sagemaker.DescribeNotebookInstanceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilNotebookInstanceStopped", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilNotebookInstanceStopped indicates an expected call of WaitUntilNotebookInstanceStopped
func (mr *MockSageMakerAPIMockRecorder) WaitUntilNotebookInstanceStopped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilNotebookInstanceStopped", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilNotebookInstanceStopped), arg0)
}

// WaitUntilNotebookInstanceStoppedWithContext mocks base method
func (m *MockSageMakerAPI) WaitUntilNotebookInstanceStoppedWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeNotebookInstanceInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilNotebookInstanceStoppedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilNotebookInstanceStoppedWithContext indicates an expected call of WaitUntilNotebookInstanceStoppedWithContext
func (mr *MockSageMakerAPIMockRecorder) WaitUntilNotebookInstanceStoppedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilNotebookInstanceStoppedWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilNotebookInstanceStoppedWithContext), varargs...)
}

// WaitUntilTrainingJobCompletedOrStopped mocks base method
func (m *MockSageMakerAPI) WaitUntilTrainingJobCompletedOrStopped(arg0 *sagemaker.DescribeTrainingJobInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilTrainingJobCompletedOrStopped", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTrainingJobCompletedOrStopped indicates an expected call of WaitUntilTrainingJobCompletedOrStopped
func (mr *MockSageMakerAPIMockRecorder) WaitUntilTrainingJobCompletedOrStopped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTrainingJobCompletedOrStopped", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilTrainingJobCompletedOrStopped), arg0)
}

// WaitUntilTrainingJobCompletedOrStoppedWithContext mocks base method
func (m *MockSageMakerAPI) WaitUntilTrainingJobCompletedOrStoppedWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeTrainingJobInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilTrainingJobCompletedOrStoppedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTrainingJobCompletedOrStoppedWithContext indicates an expected call of WaitUntilTrainingJobCompletedOrStoppedWithContext
func (mr *MockSageMakerAPIMockRecorder) WaitUntilTrainingJobCompletedOrStoppedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTrainingJobCompletedOrStoppedWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilTrainingJobCompletedOrStoppedWithContext), varargs...)
}

// WaitUntilTransformJobCompletedOrStopped mocks base method
func (m *MockSageMakerAPI) WaitUntilTransformJobCompletedOrStopped(arg0 *sagemaker.DescribeTransformJobInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilTransformJobCompletedOrStopped", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTransformJobCompletedOrStopped indicates an expected call of WaitUntilTransformJobCompletedOrStopped
func (mr *MockSageMakerAPIMockRecorder) WaitUntilTransformJobCompletedOrStopped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTransformJobCompletedOrStopped", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilTransformJobCompletedOrStopped), arg0)
}

// WaitUntilTransformJobCompletedOrStoppedWithContext mocks base method
func (m *MockSageMakerAPI) WaitUntilTransformJobCompletedOrStoppedWithContext(arg0 aws.Context, arg1 *sagemaker.DescribeTransformJobInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilTransformJobCompletedOrStoppedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTransformJobCompletedOrStoppedWithContext indicates an expected call of WaitUntilTransformJobCompletedOrStoppedWithContext
func (mr *MockSageMakerAPIMockRecorder) WaitUntilTransformJobCompletedOrStoppedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTransformJobCompletedOrStoppedWithContext", reflect.TypeOf((*MockSageMakerAPI)(nil).WaitUntilTransformJobCompletedOrStoppedWithContext), varargs...)
}
