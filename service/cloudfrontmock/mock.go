// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/cloudfront/cloudfrontiface (interfaces: CloudFrontAPI)

// Package cloudfrontmock is a generated GoMock package.
package cloudfrontmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	cloudfront "github.com/aws/aws-sdk-go/service/cloudfront"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCloudFrontAPI is a mock of CloudFrontAPI interface
type MockCloudFrontAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudFrontAPIMockRecorder
}

// MockCloudFrontAPIMockRecorder is the mock recorder for MockCloudFrontAPI
type MockCloudFrontAPIMockRecorder struct {
	mock *MockCloudFrontAPI
}

// NewMockCloudFrontAPI creates a new mock instance
func NewMockCloudFrontAPI(ctrl *gomock.Controller) *MockCloudFrontAPI {
	mock := &MockCloudFrontAPI{ctrl: ctrl}
	mock.recorder = &MockCloudFrontAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudFrontAPI) EXPECT() *MockCloudFrontAPIMockRecorder {
	return m.recorder
}

// CreateCloudFrontOriginAccessIdentity mocks base method
func (m *MockCloudFrontAPI) CreateCloudFrontOriginAccessIdentity(arg0 *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudFrontOriginAccessIdentity", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudFrontOriginAccessIdentity indicates an expected call of CreateCloudFrontOriginAccessIdentity
func (mr *MockCloudFrontAPIMockRecorder) CreateCloudFrontOriginAccessIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFrontOriginAccessIdentity", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateCloudFrontOriginAccessIdentity), arg0)
}

// CreateCloudFrontOriginAccessIdentityRequest mocks base method
func (m *MockCloudFrontAPI) CreateCloudFrontOriginAccessIdentityRequest(arg0 *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.CreateCloudFrontOriginAccessIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudFrontOriginAccessIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	return ret0, ret1
}

// CreateCloudFrontOriginAccessIdentityRequest indicates an expected call of CreateCloudFrontOriginAccessIdentityRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateCloudFrontOriginAccessIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFrontOriginAccessIdentityRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateCloudFrontOriginAccessIdentityRequest), arg0)
}

// CreateCloudFrontOriginAccessIdentityWithContext mocks base method
func (m *MockCloudFrontAPI) CreateCloudFrontOriginAccessIdentityWithContext(arg0 context.Context, arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput, arg2 ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCloudFrontOriginAccessIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudFrontOriginAccessIdentityWithContext indicates an expected call of CreateCloudFrontOriginAccessIdentityWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateCloudFrontOriginAccessIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFrontOriginAccessIdentityWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateCloudFrontOriginAccessIdentityWithContext), varargs...)
}

// CreateDistribution mocks base method
func (m *MockCloudFrontAPI) CreateDistribution(arg0 *cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDistribution indicates an expected call of CreateDistribution
func (mr *MockCloudFrontAPIMockRecorder) CreateDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistribution), arg0)
}

// CreateDistributionRequest mocks base method
func (m *MockCloudFrontAPI) CreateDistributionRequest(arg0 *cloudfront.CreateDistributionInput) (*request.Request, *cloudfront.CreateDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateDistributionOutput)
	return ret0, ret1
}

// CreateDistributionRequest indicates an expected call of CreateDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistributionRequest), arg0)
}

// CreateDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) CreateDistributionWithContext(arg0 context.Context, arg1 *cloudfront.CreateDistributionInput, arg2 ...request.Option) (*cloudfront.CreateDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDistributionWithContext indicates an expected call of CreateDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistributionWithContext), varargs...)
}

// CreateDistributionWithTags mocks base method
func (m *MockCloudFrontAPI) CreateDistributionWithTags(arg0 *cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistributionWithTags", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateDistributionWithTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDistributionWithTags indicates an expected call of CreateDistributionWithTags
func (mr *MockCloudFrontAPIMockRecorder) CreateDistributionWithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionWithTags", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistributionWithTags), arg0)
}

// CreateDistributionWithTagsRequest mocks base method
func (m *MockCloudFrontAPI) CreateDistributionWithTagsRequest(arg0 *cloudfront.CreateDistributionWithTagsInput) (*request.Request, *cloudfront.CreateDistributionWithTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistributionWithTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateDistributionWithTagsOutput)
	return ret0, ret1
}

// CreateDistributionWithTagsRequest indicates an expected call of CreateDistributionWithTagsRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateDistributionWithTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionWithTagsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistributionWithTagsRequest), arg0)
}

// CreateDistributionWithTagsWithContext mocks base method
func (m *MockCloudFrontAPI) CreateDistributionWithTagsWithContext(arg0 context.Context, arg1 *cloudfront.CreateDistributionWithTagsInput, arg2 ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDistributionWithTagsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateDistributionWithTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDistributionWithTagsWithContext indicates an expected call of CreateDistributionWithTagsWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateDistributionWithTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionWithTagsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistributionWithTagsWithContext), varargs...)
}

// CreateFieldLevelEncryptionConfig mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionConfig(arg0 *cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFieldLevelEncryptionConfig indicates an expected call of CreateFieldLevelEncryptionConfig
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionConfig), arg0)
}

// CreateFieldLevelEncryptionConfigRequest mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionConfigRequest(arg0 *cloudfront.CreateFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.CreateFieldLevelEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateFieldLevelEncryptionConfigOutput)
	return ret0, ret1
}

// CreateFieldLevelEncryptionConfigRequest indicates an expected call of CreateFieldLevelEncryptionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionConfigRequest), arg0)
}

// CreateFieldLevelEncryptionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionConfigWithContext(arg0 context.Context, arg1 *cloudfront.CreateFieldLevelEncryptionConfigInput, arg2 ...request.Option) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFieldLevelEncryptionConfigWithContext indicates an expected call of CreateFieldLevelEncryptionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionConfigWithContext), varargs...)
}

// CreateFieldLevelEncryptionProfile mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionProfile(arg0 *cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionProfile", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFieldLevelEncryptionProfile indicates an expected call of CreateFieldLevelEncryptionProfile
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionProfile", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionProfile), arg0)
}

// CreateFieldLevelEncryptionProfileRequest mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionProfileRequest(arg0 *cloudfront.CreateFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.CreateFieldLevelEncryptionProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateFieldLevelEncryptionProfileOutput)
	return ret0, ret1
}

// CreateFieldLevelEncryptionProfileRequest indicates an expected call of CreateFieldLevelEncryptionProfileRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionProfileRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionProfileRequest), arg0)
}

// CreateFieldLevelEncryptionProfileWithContext mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionProfileWithContext(arg0 context.Context, arg1 *cloudfront.CreateFieldLevelEncryptionProfileInput, arg2 ...request.Option) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionProfileWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFieldLevelEncryptionProfileWithContext indicates an expected call of CreateFieldLevelEncryptionProfileWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionProfileWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionProfileWithContext), varargs...)
}

// CreateInvalidation mocks base method
func (m *MockCloudFrontAPI) CreateInvalidation(arg0 *cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvalidation", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateInvalidationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvalidation indicates an expected call of CreateInvalidation
func (mr *MockCloudFrontAPIMockRecorder) CreateInvalidation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvalidation", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateInvalidation), arg0)
}

// CreateInvalidationRequest mocks base method
func (m *MockCloudFrontAPI) CreateInvalidationRequest(arg0 *cloudfront.CreateInvalidationInput) (*request.Request, *cloudfront.CreateInvalidationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvalidationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateInvalidationOutput)
	return ret0, ret1
}

// CreateInvalidationRequest indicates an expected call of CreateInvalidationRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateInvalidationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvalidationRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateInvalidationRequest), arg0)
}

// CreateInvalidationWithContext mocks base method
func (m *MockCloudFrontAPI) CreateInvalidationWithContext(arg0 context.Context, arg1 *cloudfront.CreateInvalidationInput, arg2 ...request.Option) (*cloudfront.CreateInvalidationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInvalidationWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateInvalidationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvalidationWithContext indicates an expected call of CreateInvalidationWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateInvalidationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvalidationWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateInvalidationWithContext), varargs...)
}

// CreatePublicKey mocks base method
func (m *MockCloudFrontAPI) CreatePublicKey(arg0 *cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicKey", arg0)
	ret0, _ := ret[0].(*cloudfront.CreatePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicKey indicates an expected call of CreatePublicKey
func (mr *MockCloudFrontAPIMockRecorder) CreatePublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicKey", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreatePublicKey), arg0)
}

// CreatePublicKeyRequest mocks base method
func (m *MockCloudFrontAPI) CreatePublicKeyRequest(arg0 *cloudfront.CreatePublicKeyInput) (*request.Request, *cloudfront.CreatePublicKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreatePublicKeyOutput)
	return ret0, ret1
}

// CreatePublicKeyRequest indicates an expected call of CreatePublicKeyRequest
func (mr *MockCloudFrontAPIMockRecorder) CreatePublicKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicKeyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreatePublicKeyRequest), arg0)
}

// CreatePublicKeyWithContext mocks base method
func (m *MockCloudFrontAPI) CreatePublicKeyWithContext(arg0 context.Context, arg1 *cloudfront.CreatePublicKeyInput, arg2 ...request.Option) (*cloudfront.CreatePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePublicKeyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreatePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicKeyWithContext indicates an expected call of CreatePublicKeyWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreatePublicKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicKeyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreatePublicKeyWithContext), varargs...)
}

// CreateStreamingDistribution mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistribution(arg0 *cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingDistribution indicates an expected call of CreateStreamingDistribution
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistribution), arg0)
}

// CreateStreamingDistributionRequest mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistributionRequest(arg0 *cloudfront.CreateStreamingDistributionInput) (*request.Request, *cloudfront.CreateStreamingDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateStreamingDistributionOutput)
	return ret0, ret1
}

// CreateStreamingDistributionRequest indicates an expected call of CreateStreamingDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistributionRequest), arg0)
}

// CreateStreamingDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistributionWithContext(arg0 context.Context, arg1 *cloudfront.CreateStreamingDistributionInput, arg2 ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamingDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingDistributionWithContext indicates an expected call of CreateStreamingDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistributionWithContext), varargs...)
}

// CreateStreamingDistributionWithTags mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistributionWithTags(arg0 *cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingDistributionWithTags", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateStreamingDistributionWithTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingDistributionWithTags indicates an expected call of CreateStreamingDistributionWithTags
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistributionWithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistributionWithTags", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistributionWithTags), arg0)
}

// CreateStreamingDistributionWithTagsRequest mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistributionWithTagsRequest(arg0 *cloudfront.CreateStreamingDistributionWithTagsInput) (*request.Request, *cloudfront.CreateStreamingDistributionWithTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingDistributionWithTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateStreamingDistributionWithTagsOutput)
	return ret0, ret1
}

// CreateStreamingDistributionWithTagsRequest indicates an expected call of CreateStreamingDistributionWithTagsRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistributionWithTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistributionWithTagsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistributionWithTagsRequest), arg0)
}

// CreateStreamingDistributionWithTagsWithContext mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistributionWithTagsWithContext(arg0 context.Context, arg1 *cloudfront.CreateStreamingDistributionWithTagsInput, arg2 ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamingDistributionWithTagsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateStreamingDistributionWithTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingDistributionWithTagsWithContext indicates an expected call of CreateStreamingDistributionWithTagsWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistributionWithTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistributionWithTagsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistributionWithTagsWithContext), varargs...)
}

// DeleteCloudFrontOriginAccessIdentity mocks base method
func (m *MockCloudFrontAPI) DeleteCloudFrontOriginAccessIdentity(arg0 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudFrontOriginAccessIdentity", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCloudFrontOriginAccessIdentity indicates an expected call of DeleteCloudFrontOriginAccessIdentity
func (mr *MockCloudFrontAPIMockRecorder) DeleteCloudFrontOriginAccessIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudFrontOriginAccessIdentity", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteCloudFrontOriginAccessIdentity), arg0)
}

// DeleteCloudFrontOriginAccessIdentityRequest mocks base method
func (m *MockCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityRequest(arg0 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudFrontOriginAccessIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	return ret0, ret1
}

// DeleteCloudFrontOriginAccessIdentityRequest indicates an expected call of DeleteCloudFrontOriginAccessIdentityRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteCloudFrontOriginAccessIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudFrontOriginAccessIdentityRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteCloudFrontOriginAccessIdentityRequest), arg0)
}

// DeleteCloudFrontOriginAccessIdentityWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityWithContext(arg0 context.Context, arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, arg2 ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCloudFrontOriginAccessIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCloudFrontOriginAccessIdentityWithContext indicates an expected call of DeleteCloudFrontOriginAccessIdentityWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteCloudFrontOriginAccessIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudFrontOriginAccessIdentityWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteCloudFrontOriginAccessIdentityWithContext), varargs...)
}

// DeleteDistribution mocks base method
func (m *MockCloudFrontAPI) DeleteDistribution(arg0 *cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDistribution indicates an expected call of DeleteDistribution
func (mr *MockCloudFrontAPIMockRecorder) DeleteDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteDistribution), arg0)
}

// DeleteDistributionRequest mocks base method
func (m *MockCloudFrontAPI) DeleteDistributionRequest(arg0 *cloudfront.DeleteDistributionInput) (*request.Request, *cloudfront.DeleteDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteDistributionOutput)
	return ret0, ret1
}

// DeleteDistributionRequest indicates an expected call of DeleteDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteDistributionRequest), arg0)
}

// DeleteDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteDistributionWithContext(arg0 context.Context, arg1 *cloudfront.DeleteDistributionInput, arg2 ...request.Option) (*cloudfront.DeleteDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDistributionWithContext indicates an expected call of DeleteDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteDistributionWithContext), varargs...)
}

// DeleteFieldLevelEncryptionConfig mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionConfig(arg0 *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionConfig indicates an expected call of DeleteFieldLevelEncryptionConfig
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionConfig), arg0)
}

// DeleteFieldLevelEncryptionConfigRequest mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionConfigRequest(arg0 *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.DeleteFieldLevelEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteFieldLevelEncryptionConfigOutput)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionConfigRequest indicates an expected call of DeleteFieldLevelEncryptionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionConfigRequest), arg0)
}

// DeleteFieldLevelEncryptionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionConfigWithContext(arg0 context.Context, arg1 *cloudfront.DeleteFieldLevelEncryptionConfigInput, arg2 ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionConfigWithContext indicates an expected call of DeleteFieldLevelEncryptionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionConfigWithContext), varargs...)
}

// DeleteFieldLevelEncryptionProfile mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionProfile(arg0 *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionProfile", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionProfile indicates an expected call of DeleteFieldLevelEncryptionProfile
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionProfile", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionProfile), arg0)
}

// DeleteFieldLevelEncryptionProfileRequest mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionProfileRequest(arg0 *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.DeleteFieldLevelEncryptionProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteFieldLevelEncryptionProfileOutput)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionProfileRequest indicates an expected call of DeleteFieldLevelEncryptionProfileRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionProfileRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionProfileRequest), arg0)
}

// DeleteFieldLevelEncryptionProfileWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionProfileWithContext(arg0 context.Context, arg1 *cloudfront.DeleteFieldLevelEncryptionProfileInput, arg2 ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionProfileWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionProfileWithContext indicates an expected call of DeleteFieldLevelEncryptionProfileWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionProfileWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionProfileWithContext), varargs...)
}

// DeletePublicKey mocks base method
func (m *MockCloudFrontAPI) DeletePublicKey(arg0 *cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicKey", arg0)
	ret0, _ := ret[0].(*cloudfront.DeletePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePublicKey indicates an expected call of DeletePublicKey
func (mr *MockCloudFrontAPIMockRecorder) DeletePublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicKey", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeletePublicKey), arg0)
}

// DeletePublicKeyRequest mocks base method
func (m *MockCloudFrontAPI) DeletePublicKeyRequest(arg0 *cloudfront.DeletePublicKeyInput) (*request.Request, *cloudfront.DeletePublicKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeletePublicKeyOutput)
	return ret0, ret1
}

// DeletePublicKeyRequest indicates an expected call of DeletePublicKeyRequest
func (mr *MockCloudFrontAPIMockRecorder) DeletePublicKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicKeyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeletePublicKeyRequest), arg0)
}

// DeletePublicKeyWithContext mocks base method
func (m *MockCloudFrontAPI) DeletePublicKeyWithContext(arg0 context.Context, arg1 *cloudfront.DeletePublicKeyInput, arg2 ...request.Option) (*cloudfront.DeletePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePublicKeyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeletePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePublicKeyWithContext indicates an expected call of DeletePublicKeyWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeletePublicKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicKeyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeletePublicKeyWithContext), varargs...)
}

// DeleteStreamingDistribution mocks base method
func (m *MockCloudFrontAPI) DeleteStreamingDistribution(arg0 *cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamingDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamingDistribution indicates an expected call of DeleteStreamingDistribution
func (mr *MockCloudFrontAPIMockRecorder) DeleteStreamingDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteStreamingDistribution), arg0)
}

// DeleteStreamingDistributionRequest mocks base method
func (m *MockCloudFrontAPI) DeleteStreamingDistributionRequest(arg0 *cloudfront.DeleteStreamingDistributionInput) (*request.Request, *cloudfront.DeleteStreamingDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamingDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteStreamingDistributionOutput)
	return ret0, ret1
}

// DeleteStreamingDistributionRequest indicates an expected call of DeleteStreamingDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteStreamingDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteStreamingDistributionRequest), arg0)
}

// DeleteStreamingDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteStreamingDistributionWithContext(arg0 context.Context, arg1 *cloudfront.DeleteStreamingDistributionInput, arg2 ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStreamingDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamingDistributionWithContext indicates an expected call of DeleteStreamingDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteStreamingDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteStreamingDistributionWithContext), varargs...)
}

// GetCloudFrontOriginAccessIdentity mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentity(arg0 *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentity", arg0)
	ret0, _ := ret[0].(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentity indicates an expected call of GetCloudFrontOriginAccessIdentity
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentity", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentity), arg0)
}

// GetCloudFrontOriginAccessIdentityConfig mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfig(arg0 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityConfig indicates an expected call of GetCloudFrontOriginAccessIdentityConfig
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentityConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentityConfig), arg0)
}

// GetCloudFrontOriginAccessIdentityConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigRequest(arg0 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityConfigRequest indicates an expected call of GetCloudFrontOriginAccessIdentityConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentityConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentityConfigRequest), arg0)
}

// GetCloudFrontOriginAccessIdentityConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, arg2 ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityConfigWithContext indicates an expected call of GetCloudFrontOriginAccessIdentityConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentityConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentityConfigWithContext), varargs...)
}

// GetCloudFrontOriginAccessIdentityRequest mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentityRequest(arg0 *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityRequest indicates an expected call of GetCloudFrontOriginAccessIdentityRequest
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentityRequest), arg0)
}

// GetCloudFrontOriginAccessIdentityWithContext mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentityWithContext(arg0 context.Context, arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput, arg2 ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityWithContext indicates an expected call of GetCloudFrontOriginAccessIdentityWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentityWithContext), varargs...)
}

// GetDistribution mocks base method
func (m *MockCloudFrontAPI) GetDistribution(arg0 *cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.GetDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistribution indicates an expected call of GetDistribution
func (mr *MockCloudFrontAPIMockRecorder) GetDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistribution), arg0)
}

// GetDistributionConfig mocks base method
func (m *MockCloudFrontAPI) GetDistributionConfig(arg0 *cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistributionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetDistributionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionConfig indicates an expected call of GetDistributionConfig
func (mr *MockCloudFrontAPIMockRecorder) GetDistributionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistributionConfig), arg0)
}

// GetDistributionConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetDistributionConfigRequest(arg0 *cloudfront.GetDistributionConfigInput) (*request.Request, *cloudfront.GetDistributionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistributionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetDistributionConfigOutput)
	return ret0, ret1
}

// GetDistributionConfigRequest indicates an expected call of GetDistributionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetDistributionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistributionConfigRequest), arg0)
}

// GetDistributionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetDistributionConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetDistributionConfigInput, arg2 ...request.Option) (*cloudfront.GetDistributionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDistributionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetDistributionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionConfigWithContext indicates an expected call of GetDistributionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetDistributionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistributionConfigWithContext), varargs...)
}

// GetDistributionRequest mocks base method
func (m *MockCloudFrontAPI) GetDistributionRequest(arg0 *cloudfront.GetDistributionInput) (*request.Request, *cloudfront.GetDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetDistributionOutput)
	return ret0, ret1
}

// GetDistributionRequest indicates an expected call of GetDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) GetDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistributionRequest), arg0)
}

// GetDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) GetDistributionWithContext(arg0 context.Context, arg1 *cloudfront.GetDistributionInput, arg2 ...request.Option) (*cloudfront.GetDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionWithContext indicates an expected call of GetDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistributionWithContext), varargs...)
}

// GetFieldLevelEncryption mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryption(arg0 *cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryption", arg0)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryption indicates an expected call of GetFieldLevelEncryption
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryption", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryption), arg0)
}

// GetFieldLevelEncryptionConfig mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionConfig(arg0 *cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionConfig indicates an expected call of GetFieldLevelEncryptionConfig
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionConfig), arg0)
}

// GetFieldLevelEncryptionConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionConfigRequest(arg0 *cloudfront.GetFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetFieldLevelEncryptionConfigOutput)
	return ret0, ret1
}

// GetFieldLevelEncryptionConfigRequest indicates an expected call of GetFieldLevelEncryptionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionConfigRequest), arg0)
}

// GetFieldLevelEncryptionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionConfigInput, arg2 ...request.Option) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionConfigWithContext indicates an expected call of GetFieldLevelEncryptionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionConfigWithContext), varargs...)
}

// GetFieldLevelEncryptionProfile mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfile(arg0 *cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfile", arg0)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfile indicates an expected call of GetFieldLevelEncryptionProfile
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfile", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfile), arg0)
}

// GetFieldLevelEncryptionProfileConfig mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfileConfig(arg0 *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileConfig indicates an expected call of GetFieldLevelEncryptionProfileConfig
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfileConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfileConfig), arg0)
}

// GetFieldLevelEncryptionProfileConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfileConfigRequest(arg0 *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionProfileConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileConfigRequest indicates an expected call of GetFieldLevelEncryptionProfileConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfileConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfileConfigRequest), arg0)
}

// GetFieldLevelEncryptionProfileConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfileConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionProfileConfigInput, arg2 ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileConfigWithContext indicates an expected call of GetFieldLevelEncryptionProfileConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfileConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfileConfigWithContext), varargs...)
}

// GetFieldLevelEncryptionProfileRequest mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfileRequest(arg0 *cloudfront.GetFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetFieldLevelEncryptionProfileOutput)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileRequest indicates an expected call of GetFieldLevelEncryptionProfileRequest
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfileRequest), arg0)
}

// GetFieldLevelEncryptionProfileWithContext mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfileWithContext(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionProfileInput, arg2 ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileWithContext indicates an expected call of GetFieldLevelEncryptionProfileWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfileWithContext), varargs...)
}

// GetFieldLevelEncryptionRequest mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionRequest(arg0 *cloudfront.GetFieldLevelEncryptionInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetFieldLevelEncryptionOutput)
	return ret0, ret1
}

// GetFieldLevelEncryptionRequest indicates an expected call of GetFieldLevelEncryptionRequest
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionRequest), arg0)
}

// GetFieldLevelEncryptionWithContext mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionWithContext(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionInput, arg2 ...request.Option) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionWithContext indicates an expected call of GetFieldLevelEncryptionWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionWithContext), varargs...)
}

// GetInvalidation mocks base method
func (m *MockCloudFrontAPI) GetInvalidation(arg0 *cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvalidation", arg0)
	ret0, _ := ret[0].(*cloudfront.GetInvalidationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvalidation indicates an expected call of GetInvalidation
func (mr *MockCloudFrontAPIMockRecorder) GetInvalidation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidation", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetInvalidation), arg0)
}

// GetInvalidationRequest mocks base method
func (m *MockCloudFrontAPI) GetInvalidationRequest(arg0 *cloudfront.GetInvalidationInput) (*request.Request, *cloudfront.GetInvalidationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvalidationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetInvalidationOutput)
	return ret0, ret1
}

// GetInvalidationRequest indicates an expected call of GetInvalidationRequest
func (mr *MockCloudFrontAPIMockRecorder) GetInvalidationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidationRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetInvalidationRequest), arg0)
}

// GetInvalidationWithContext mocks base method
func (m *MockCloudFrontAPI) GetInvalidationWithContext(arg0 context.Context, arg1 *cloudfront.GetInvalidationInput, arg2 ...request.Option) (*cloudfront.GetInvalidationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvalidationWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetInvalidationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvalidationWithContext indicates an expected call of GetInvalidationWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetInvalidationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidationWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetInvalidationWithContext), varargs...)
}

// GetPublicKey mocks base method
func (m *MockCloudFrontAPI) GetPublicKey(arg0 *cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", arg0)
	ret0, _ := ret[0].(*cloudfront.GetPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKey), arg0)
}

// GetPublicKeyConfig mocks base method
func (m *MockCloudFrontAPI) GetPublicKeyConfig(arg0 *cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetPublicKeyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyConfig indicates an expected call of GetPublicKeyConfig
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKeyConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKeyConfig), arg0)
}

// GetPublicKeyConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetPublicKeyConfigRequest(arg0 *cloudfront.GetPublicKeyConfigInput) (*request.Request, *cloudfront.GetPublicKeyConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetPublicKeyConfigOutput)
	return ret0, ret1
}

// GetPublicKeyConfigRequest indicates an expected call of GetPublicKeyConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKeyConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKeyConfigRequest), arg0)
}

// GetPublicKeyConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetPublicKeyConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetPublicKeyConfigInput, arg2 ...request.Option) (*cloudfront.GetPublicKeyConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKeyConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetPublicKeyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyConfigWithContext indicates an expected call of GetPublicKeyConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKeyConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKeyConfigWithContext), varargs...)
}

// GetPublicKeyRequest mocks base method
func (m *MockCloudFrontAPI) GetPublicKeyRequest(arg0 *cloudfront.GetPublicKeyInput) (*request.Request, *cloudfront.GetPublicKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetPublicKeyOutput)
	return ret0, ret1
}

// GetPublicKeyRequest indicates an expected call of GetPublicKeyRequest
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKeyRequest), arg0)
}

// GetPublicKeyWithContext mocks base method
func (m *MockCloudFrontAPI) GetPublicKeyWithContext(arg0 context.Context, arg1 *cloudfront.GetPublicKeyInput, arg2 ...request.Option) (*cloudfront.GetPublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKeyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyWithContext indicates an expected call of GetPublicKeyWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKeyWithContext), varargs...)
}

// GetStreamingDistribution mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistribution(arg0 *cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.GetStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingDistribution indicates an expected call of GetStreamingDistribution
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistribution), arg0)
}

// GetStreamingDistributionConfig mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistributionConfig(arg0 *cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingDistributionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetStreamingDistributionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingDistributionConfig indicates an expected call of GetStreamingDistributionConfig
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistributionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistributionConfig), arg0)
}

// GetStreamingDistributionConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistributionConfigRequest(arg0 *cloudfront.GetStreamingDistributionConfigInput) (*request.Request, *cloudfront.GetStreamingDistributionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingDistributionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetStreamingDistributionConfigOutput)
	return ret0, ret1
}

// GetStreamingDistributionConfigRequest indicates an expected call of GetStreamingDistributionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistributionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistributionConfigRequest), arg0)
}

// GetStreamingDistributionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistributionConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetStreamingDistributionConfigInput, arg2 ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamingDistributionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetStreamingDistributionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingDistributionConfigWithContext indicates an expected call of GetStreamingDistributionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistributionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistributionConfigWithContext), varargs...)
}

// GetStreamingDistributionRequest mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistributionRequest(arg0 *cloudfront.GetStreamingDistributionInput) (*request.Request, *cloudfront.GetStreamingDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetStreamingDistributionOutput)
	return ret0, ret1
}

// GetStreamingDistributionRequest indicates an expected call of GetStreamingDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistributionRequest), arg0)
}

// GetStreamingDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistributionWithContext(arg0 context.Context, arg1 *cloudfront.GetStreamingDistributionInput, arg2 ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamingDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingDistributionWithContext indicates an expected call of GetStreamingDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistributionWithContext), varargs...)
}

// ListCloudFrontOriginAccessIdentities mocks base method
func (m *MockCloudFrontAPI) ListCloudFrontOriginAccessIdentities(arg0 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentities", arg0)
	ret0, _ := ret[0].(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudFrontOriginAccessIdentities indicates an expected call of ListCloudFrontOriginAccessIdentities
func (mr *MockCloudFrontAPIMockRecorder) ListCloudFrontOriginAccessIdentities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentities", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCloudFrontOriginAccessIdentities), arg0)
}

// ListCloudFrontOriginAccessIdentitiesPages mocks base method
func (m *MockCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPages(arg0 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg1 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCloudFrontOriginAccessIdentitiesPages indicates an expected call of ListCloudFrontOriginAccessIdentitiesPages
func (mr *MockCloudFrontAPIMockRecorder) ListCloudFrontOriginAccessIdentitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentitiesPages", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCloudFrontOriginAccessIdentitiesPages), arg0, arg1)
}

// ListCloudFrontOriginAccessIdentitiesPagesWithContext mocks base method
func (m *MockCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesWithContext(arg0 context.Context, arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg2 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCloudFrontOriginAccessIdentitiesPagesWithContext indicates an expected call of ListCloudFrontOriginAccessIdentitiesPagesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListCloudFrontOriginAccessIdentitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentitiesPagesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCloudFrontOriginAccessIdentitiesPagesWithContext), varargs...)
}

// ListCloudFrontOriginAccessIdentitiesRequest mocks base method
func (m *MockCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesRequest(arg0 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*request.Request, *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	return ret0, ret1
}

// ListCloudFrontOriginAccessIdentitiesRequest indicates an expected call of ListCloudFrontOriginAccessIdentitiesRequest
func (mr *MockCloudFrontAPIMockRecorder) ListCloudFrontOriginAccessIdentitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentitiesRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCloudFrontOriginAccessIdentitiesRequest), arg0)
}

// ListCloudFrontOriginAccessIdentitiesWithContext mocks base method
func (m *MockCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesWithContext(arg0 context.Context, arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg2 ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentitiesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudFrontOriginAccessIdentitiesWithContext indicates an expected call of ListCloudFrontOriginAccessIdentitiesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListCloudFrontOriginAccessIdentitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentitiesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCloudFrontOriginAccessIdentitiesWithContext), varargs...)
}

// ListDistributions mocks base method
func (m *MockCloudFrontAPI) ListDistributions(arg0 *cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributions", arg0)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributions indicates an expected call of ListDistributions
func (mr *MockCloudFrontAPIMockRecorder) ListDistributions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributions", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributions), arg0)
}

// ListDistributionsByWebACLId mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByWebACLId(arg0 *cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByWebACLId", arg0)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByWebACLIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByWebACLId indicates an expected call of ListDistributionsByWebACLId
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByWebACLId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByWebACLId", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByWebACLId), arg0)
}

// ListDistributionsByWebACLIdRequest mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByWebACLIdRequest(arg0 *cloudfront.ListDistributionsByWebACLIdInput) (*request.Request, *cloudfront.ListDistributionsByWebACLIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByWebACLIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListDistributionsByWebACLIdOutput)
	return ret0, ret1
}

// ListDistributionsByWebACLIdRequest indicates an expected call of ListDistributionsByWebACLIdRequest
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByWebACLIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByWebACLIdRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByWebACLIdRequest), arg0)
}

// ListDistributionsByWebACLIdWithContext mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByWebACLIdWithContext(arg0 context.Context, arg1 *cloudfront.ListDistributionsByWebACLIdInput, arg2 ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByWebACLIdWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByWebACLIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByWebACLIdWithContext indicates an expected call of ListDistributionsByWebACLIdWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByWebACLIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByWebACLIdWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByWebACLIdWithContext), varargs...)
}

// ListDistributionsPages mocks base method
func (m *MockCloudFrontAPI) ListDistributionsPages(arg0 *cloudfront.ListDistributionsInput, arg1 func(*cloudfront.ListDistributionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDistributionsPages indicates an expected call of ListDistributionsPages
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsPages", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsPages), arg0, arg1)
}

// ListDistributionsPagesWithContext mocks base method
func (m *MockCloudFrontAPI) ListDistributionsPagesWithContext(arg0 context.Context, arg1 *cloudfront.ListDistributionsInput, arg2 func(*cloudfront.ListDistributionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDistributionsPagesWithContext indicates an expected call of ListDistributionsPagesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsPagesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsPagesWithContext), varargs...)
}

// ListDistributionsRequest mocks base method
func (m *MockCloudFrontAPI) ListDistributionsRequest(arg0 *cloudfront.ListDistributionsInput) (*request.Request, *cloudfront.ListDistributionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListDistributionsOutput)
	return ret0, ret1
}

// ListDistributionsRequest indicates an expected call of ListDistributionsRequest
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsRequest), arg0)
}

// ListDistributionsWithContext mocks base method
func (m *MockCloudFrontAPI) ListDistributionsWithContext(arg0 context.Context, arg1 *cloudfront.ListDistributionsInput, arg2 ...request.Option) (*cloudfront.ListDistributionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsWithContext indicates an expected call of ListDistributionsWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsWithContext), varargs...)
}

// ListFieldLevelEncryptionConfigs mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionConfigs(arg0 *cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionConfigs", arg0)
	ret0, _ := ret[0].(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldLevelEncryptionConfigs indicates an expected call of ListFieldLevelEncryptionConfigs
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionConfigs", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionConfigs), arg0)
}

// ListFieldLevelEncryptionConfigsRequest mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionConfigsRequest(arg0 *cloudfront.ListFieldLevelEncryptionConfigsInput) (*request.Request, *cloudfront.ListFieldLevelEncryptionConfigsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionConfigsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
	return ret0, ret1
}

// ListFieldLevelEncryptionConfigsRequest indicates an expected call of ListFieldLevelEncryptionConfigsRequest
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionConfigsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionConfigsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionConfigsRequest), arg0)
}

// ListFieldLevelEncryptionConfigsWithContext mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionConfigsWithContext(arg0 context.Context, arg1 *cloudfront.ListFieldLevelEncryptionConfigsInput, arg2 ...request.Option) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionConfigsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldLevelEncryptionConfigsWithContext indicates an expected call of ListFieldLevelEncryptionConfigsWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionConfigsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionConfigsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionConfigsWithContext), varargs...)
}

// ListFieldLevelEncryptionProfiles mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionProfiles(arg0 *cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionProfiles", arg0)
	ret0, _ := ret[0].(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldLevelEncryptionProfiles indicates an expected call of ListFieldLevelEncryptionProfiles
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionProfiles", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionProfiles), arg0)
}

// ListFieldLevelEncryptionProfilesRequest mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionProfilesRequest(arg0 *cloudfront.ListFieldLevelEncryptionProfilesInput) (*request.Request, *cloudfront.ListFieldLevelEncryptionProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
	return ret0, ret1
}

// ListFieldLevelEncryptionProfilesRequest indicates an expected call of ListFieldLevelEncryptionProfilesRequest
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionProfilesRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionProfilesRequest), arg0)
}

// ListFieldLevelEncryptionProfilesWithContext mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionProfilesWithContext(arg0 context.Context, arg1 *cloudfront.ListFieldLevelEncryptionProfilesInput, arg2 ...request.Option) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldLevelEncryptionProfilesWithContext indicates an expected call of ListFieldLevelEncryptionProfilesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionProfilesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionProfilesWithContext), varargs...)
}

// ListInvalidations mocks base method
func (m *MockCloudFrontAPI) ListInvalidations(arg0 *cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvalidations", arg0)
	ret0, _ := ret[0].(*cloudfront.ListInvalidationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvalidations indicates an expected call of ListInvalidations
func (mr *MockCloudFrontAPIMockRecorder) ListInvalidations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidations", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListInvalidations), arg0)
}

// ListInvalidationsPages mocks base method
func (m *MockCloudFrontAPI) ListInvalidationsPages(arg0 *cloudfront.ListInvalidationsInput, arg1 func(*cloudfront.ListInvalidationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvalidationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvalidationsPages indicates an expected call of ListInvalidationsPages
func (mr *MockCloudFrontAPIMockRecorder) ListInvalidationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidationsPages", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListInvalidationsPages), arg0, arg1)
}

// ListInvalidationsPagesWithContext mocks base method
func (m *MockCloudFrontAPI) ListInvalidationsPagesWithContext(arg0 context.Context, arg1 *cloudfront.ListInvalidationsInput, arg2 func(*cloudfront.ListInvalidationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvalidationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvalidationsPagesWithContext indicates an expected call of ListInvalidationsPagesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListInvalidationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidationsPagesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListInvalidationsPagesWithContext), varargs...)
}

// ListInvalidationsRequest mocks base method
func (m *MockCloudFrontAPI) ListInvalidationsRequest(arg0 *cloudfront.ListInvalidationsInput) (*request.Request, *cloudfront.ListInvalidationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvalidationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListInvalidationsOutput)
	return ret0, ret1
}

// ListInvalidationsRequest indicates an expected call of ListInvalidationsRequest
func (mr *MockCloudFrontAPIMockRecorder) ListInvalidationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidationsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListInvalidationsRequest), arg0)
}

// ListInvalidationsWithContext mocks base method
func (m *MockCloudFrontAPI) ListInvalidationsWithContext(arg0 context.Context, arg1 *cloudfront.ListInvalidationsInput, arg2 ...request.Option) (*cloudfront.ListInvalidationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvalidationsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListInvalidationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvalidationsWithContext indicates an expected call of ListInvalidationsWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListInvalidationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidationsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListInvalidationsWithContext), varargs...)
}

// ListPublicKeys mocks base method
func (m *MockCloudFrontAPI) ListPublicKeys(arg0 *cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicKeys", arg0)
	ret0, _ := ret[0].(*cloudfront.ListPublicKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicKeys indicates an expected call of ListPublicKeys
func (mr *MockCloudFrontAPIMockRecorder) ListPublicKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeys", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListPublicKeys), arg0)
}

// ListPublicKeysRequest mocks base method
func (m *MockCloudFrontAPI) ListPublicKeysRequest(arg0 *cloudfront.ListPublicKeysInput) (*request.Request, *cloudfront.ListPublicKeysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListPublicKeysOutput)
	return ret0, ret1
}

// ListPublicKeysRequest indicates an expected call of ListPublicKeysRequest
func (mr *MockCloudFrontAPIMockRecorder) ListPublicKeysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeysRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListPublicKeysRequest), arg0)
}

// ListPublicKeysWithContext mocks base method
func (m *MockCloudFrontAPI) ListPublicKeysWithContext(arg0 context.Context, arg1 *cloudfront.ListPublicKeysInput, arg2 ...request.Option) (*cloudfront.ListPublicKeysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPublicKeysWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListPublicKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicKeysWithContext indicates an expected call of ListPublicKeysWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListPublicKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeysWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListPublicKeysWithContext), varargs...)
}

// ListStreamingDistributions mocks base method
func (m *MockCloudFrontAPI) ListStreamingDistributions(arg0 *cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingDistributions", arg0)
	ret0, _ := ret[0].(*cloudfront.ListStreamingDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamingDistributions indicates an expected call of ListStreamingDistributions
func (mr *MockCloudFrontAPIMockRecorder) ListStreamingDistributions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributions", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListStreamingDistributions), arg0)
}

// ListStreamingDistributionsPages mocks base method
func (m *MockCloudFrontAPI) ListStreamingDistributionsPages(arg0 *cloudfront.ListStreamingDistributionsInput, arg1 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingDistributionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamingDistributionsPages indicates an expected call of ListStreamingDistributionsPages
func (mr *MockCloudFrontAPIMockRecorder) ListStreamingDistributionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributionsPages", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListStreamingDistributionsPages), arg0, arg1)
}

// ListStreamingDistributionsPagesWithContext mocks base method
func (m *MockCloudFrontAPI) ListStreamingDistributionsPagesWithContext(arg0 context.Context, arg1 *cloudfront.ListStreamingDistributionsInput, arg2 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamingDistributionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamingDistributionsPagesWithContext indicates an expected call of ListStreamingDistributionsPagesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListStreamingDistributionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributionsPagesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListStreamingDistributionsPagesWithContext), varargs...)
}

// ListStreamingDistributionsRequest mocks base method
func (m *MockCloudFrontAPI) ListStreamingDistributionsRequest(arg0 *cloudfront.ListStreamingDistributionsInput) (*request.Request, *cloudfront.ListStreamingDistributionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingDistributionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListStreamingDistributionsOutput)
	return ret0, ret1
}

// ListStreamingDistributionsRequest indicates an expected call of ListStreamingDistributionsRequest
func (mr *MockCloudFrontAPIMockRecorder) ListStreamingDistributionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributionsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListStreamingDistributionsRequest), arg0)
}

// ListStreamingDistributionsWithContext mocks base method
func (m *MockCloudFrontAPI) ListStreamingDistributionsWithContext(arg0 context.Context, arg1 *cloudfront.ListStreamingDistributionsInput, arg2 ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamingDistributionsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListStreamingDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamingDistributionsWithContext indicates an expected call of ListStreamingDistributionsWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListStreamingDistributionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributionsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListStreamingDistributionsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCloudFrontAPI) ListTagsForResource(arg0 *cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*cloudfront.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCloudFrontAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCloudFrontAPI) ListTagsForResourceRequest(arg0 *cloudfront.ListTagsForResourceInput) (*request.Request, *cloudfront.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCloudFrontAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCloudFrontAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *cloudfront.ListTagsForResourceInput, arg2 ...request.Option) (*cloudfront.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCloudFrontAPI) TagResource(arg0 *cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*cloudfront.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCloudFrontAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCloudFrontAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCloudFrontAPI) TagResourceRequest(arg0 *cloudfront.TagResourceInput) (*request.Request, *cloudfront.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCloudFrontAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCloudFrontAPI) TagResourceWithContext(arg0 context.Context, arg1 *cloudfront.TagResourceInput, arg2 ...request.Option) (*cloudfront.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCloudFrontAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCloudFrontAPI) UntagResource(arg0 *cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*cloudfront.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCloudFrontAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCloudFrontAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCloudFrontAPI) UntagResourceRequest(arg0 *cloudfront.UntagResourceInput) (*request.Request, *cloudfront.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCloudFrontAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCloudFrontAPI) UntagResourceWithContext(arg0 context.Context, arg1 *cloudfront.UntagResourceInput, arg2 ...request.Option) (*cloudfront.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCloudFrontAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCloudFrontOriginAccessIdentity mocks base method
func (m *MockCloudFrontAPI) UpdateCloudFrontOriginAccessIdentity(arg0 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudFrontOriginAccessIdentity", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCloudFrontOriginAccessIdentity indicates an expected call of UpdateCloudFrontOriginAccessIdentity
func (mr *MockCloudFrontAPIMockRecorder) UpdateCloudFrontOriginAccessIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudFrontOriginAccessIdentity", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateCloudFrontOriginAccessIdentity), arg0)
}

// UpdateCloudFrontOriginAccessIdentityRequest mocks base method
func (m *MockCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityRequest(arg0 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudFrontOriginAccessIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	return ret0, ret1
}

// UpdateCloudFrontOriginAccessIdentityRequest indicates an expected call of UpdateCloudFrontOriginAccessIdentityRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateCloudFrontOriginAccessIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudFrontOriginAccessIdentityRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateCloudFrontOriginAccessIdentityRequest), arg0)
}

// UpdateCloudFrontOriginAccessIdentityWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityWithContext(arg0 context.Context, arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, arg2 ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudFrontOriginAccessIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCloudFrontOriginAccessIdentityWithContext indicates an expected call of UpdateCloudFrontOriginAccessIdentityWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateCloudFrontOriginAccessIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudFrontOriginAccessIdentityWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateCloudFrontOriginAccessIdentityWithContext), varargs...)
}

// UpdateDistribution mocks base method
func (m *MockCloudFrontAPI) UpdateDistribution(arg0 *cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDistribution indicates an expected call of UpdateDistribution
func (mr *MockCloudFrontAPIMockRecorder) UpdateDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateDistribution), arg0)
}

// UpdateDistributionRequest mocks base method
func (m *MockCloudFrontAPI) UpdateDistributionRequest(arg0 *cloudfront.UpdateDistributionInput) (*request.Request, *cloudfront.UpdateDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateDistributionOutput)
	return ret0, ret1
}

// UpdateDistributionRequest indicates an expected call of UpdateDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateDistributionRequest), arg0)
}

// UpdateDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateDistributionWithContext(arg0 context.Context, arg1 *cloudfront.UpdateDistributionInput, arg2 ...request.Option) (*cloudfront.UpdateDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDistributionWithContext indicates an expected call of UpdateDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateDistributionWithContext), varargs...)
}

// UpdateFieldLevelEncryptionConfig mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionConfig(arg0 *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionConfig indicates an expected call of UpdateFieldLevelEncryptionConfig
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionConfig), arg0)
}

// UpdateFieldLevelEncryptionConfigRequest mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionConfigRequest(arg0 *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.UpdateFieldLevelEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateFieldLevelEncryptionConfigOutput)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionConfigRequest indicates an expected call of UpdateFieldLevelEncryptionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionConfigRequest), arg0)
}

// UpdateFieldLevelEncryptionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionConfigWithContext(arg0 context.Context, arg1 *cloudfront.UpdateFieldLevelEncryptionConfigInput, arg2 ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionConfigWithContext indicates an expected call of UpdateFieldLevelEncryptionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionConfigWithContext), varargs...)
}

// UpdateFieldLevelEncryptionProfile mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionProfile(arg0 *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionProfile", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionProfile indicates an expected call of UpdateFieldLevelEncryptionProfile
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionProfile", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionProfile), arg0)
}

// UpdateFieldLevelEncryptionProfileRequest mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionProfileRequest(arg0 *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.UpdateFieldLevelEncryptionProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateFieldLevelEncryptionProfileOutput)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionProfileRequest indicates an expected call of UpdateFieldLevelEncryptionProfileRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionProfileRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionProfileRequest), arg0)
}

// UpdateFieldLevelEncryptionProfileWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionProfileWithContext(arg0 context.Context, arg1 *cloudfront.UpdateFieldLevelEncryptionProfileInput, arg2 ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionProfileWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionProfileWithContext indicates an expected call of UpdateFieldLevelEncryptionProfileWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionProfileWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionProfileWithContext), varargs...)
}

// UpdatePublicKey mocks base method
func (m *MockCloudFrontAPI) UpdatePublicKey(arg0 *cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicKey", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdatePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePublicKey indicates an expected call of UpdatePublicKey
func (mr *MockCloudFrontAPIMockRecorder) UpdatePublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicKey", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdatePublicKey), arg0)
}

// UpdatePublicKeyRequest mocks base method
func (m *MockCloudFrontAPI) UpdatePublicKeyRequest(arg0 *cloudfront.UpdatePublicKeyInput) (*request.Request, *cloudfront.UpdatePublicKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdatePublicKeyOutput)
	return ret0, ret1
}

// UpdatePublicKeyRequest indicates an expected call of UpdatePublicKeyRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdatePublicKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicKeyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdatePublicKeyRequest), arg0)
}

// UpdatePublicKeyWithContext mocks base method
func (m *MockCloudFrontAPI) UpdatePublicKeyWithContext(arg0 context.Context, arg1 *cloudfront.UpdatePublicKeyInput, arg2 ...request.Option) (*cloudfront.UpdatePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePublicKeyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdatePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePublicKeyWithContext indicates an expected call of UpdatePublicKeyWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdatePublicKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicKeyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdatePublicKeyWithContext), varargs...)
}

// UpdateStreamingDistribution mocks base method
func (m *MockCloudFrontAPI) UpdateStreamingDistribution(arg0 *cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamingDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStreamingDistribution indicates an expected call of UpdateStreamingDistribution
func (mr *MockCloudFrontAPIMockRecorder) UpdateStreamingDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateStreamingDistribution), arg0)
}

// UpdateStreamingDistributionRequest mocks base method
func (m *MockCloudFrontAPI) UpdateStreamingDistributionRequest(arg0 *cloudfront.UpdateStreamingDistributionInput) (*request.Request, *cloudfront.UpdateStreamingDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamingDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateStreamingDistributionOutput)
	return ret0, ret1
}

// UpdateStreamingDistributionRequest indicates an expected call of UpdateStreamingDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateStreamingDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateStreamingDistributionRequest), arg0)
}

// UpdateStreamingDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateStreamingDistributionWithContext(arg0 context.Context, arg1 *cloudfront.UpdateStreamingDistributionInput, arg2 ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStreamingDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStreamingDistributionWithContext indicates an expected call of UpdateStreamingDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateStreamingDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateStreamingDistributionWithContext), varargs...)
}

// WaitUntilDistributionDeployed mocks base method
func (m *MockCloudFrontAPI) WaitUntilDistributionDeployed(arg0 *cloudfront.GetDistributionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilDistributionDeployed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDistributionDeployed indicates an expected call of WaitUntilDistributionDeployed
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilDistributionDeployed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDistributionDeployed", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilDistributionDeployed), arg0)
}

// WaitUntilDistributionDeployedWithContext mocks base method
func (m *MockCloudFrontAPI) WaitUntilDistributionDeployedWithContext(arg0 context.Context, arg1 *cloudfront.GetDistributionInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilDistributionDeployedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDistributionDeployedWithContext indicates an expected call of WaitUntilDistributionDeployedWithContext
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilDistributionDeployedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDistributionDeployedWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilDistributionDeployedWithContext), varargs...)
}

// WaitUntilInvalidationCompleted mocks base method
func (m *MockCloudFrontAPI) WaitUntilInvalidationCompleted(arg0 *cloudfront.GetInvalidationInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilInvalidationCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInvalidationCompleted indicates an expected call of WaitUntilInvalidationCompleted
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilInvalidationCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInvalidationCompleted", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilInvalidationCompleted), arg0)
}

// WaitUntilInvalidationCompletedWithContext mocks base method
func (m *MockCloudFrontAPI) WaitUntilInvalidationCompletedWithContext(arg0 context.Context, arg1 *cloudfront.GetInvalidationInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilInvalidationCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInvalidationCompletedWithContext indicates an expected call of WaitUntilInvalidationCompletedWithContext
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilInvalidationCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInvalidationCompletedWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilInvalidationCompletedWithContext), varargs...)
}

// WaitUntilStreamingDistributionDeployed mocks base method
func (m *MockCloudFrontAPI) WaitUntilStreamingDistributionDeployed(arg0 *cloudfront.GetStreamingDistributionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilStreamingDistributionDeployed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilStreamingDistributionDeployed indicates an expected call of WaitUntilStreamingDistributionDeployed
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilStreamingDistributionDeployed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilStreamingDistributionDeployed", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilStreamingDistributionDeployed), arg0)
}

// WaitUntilStreamingDistributionDeployedWithContext mocks base method
func (m *MockCloudFrontAPI) WaitUntilStreamingDistributionDeployedWithContext(arg0 context.Context, arg1 *cloudfront.GetStreamingDistributionInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilStreamingDistributionDeployedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilStreamingDistributionDeployedWithContext indicates an expected call of WaitUntilStreamingDistributionDeployedWithContext
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilStreamingDistributionDeployedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilStreamingDistributionDeployedWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilStreamingDistributionDeployedWithContext), varargs...)
}
