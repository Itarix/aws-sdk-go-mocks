// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/iotroborunner/iotroborunneriface (interfaces: IoTRoboRunnerAPI)

// Package iotroborunnermock is a generated GoMock package.
package iotroborunnermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	iotroborunner "github.com/aws/aws-sdk-go/service/iotroborunner"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIoTRoboRunnerAPI is a mock of IoTRoboRunnerAPI interface
type MockIoTRoboRunnerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIoTRoboRunnerAPIMockRecorder
}

// MockIoTRoboRunnerAPIMockRecorder is the mock recorder for MockIoTRoboRunnerAPI
type MockIoTRoboRunnerAPIMockRecorder struct {
	mock *MockIoTRoboRunnerAPI
}

// NewMockIoTRoboRunnerAPI creates a new mock instance
func NewMockIoTRoboRunnerAPI(ctrl *gomock.Controller) *MockIoTRoboRunnerAPI {
	mock := &MockIoTRoboRunnerAPI{ctrl: ctrl}
	mock.recorder = &MockIoTRoboRunnerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIoTRoboRunnerAPI) EXPECT() *MockIoTRoboRunnerAPIMockRecorder {
	return m.recorder
}

// CreateDestination mocks base method
func (m *MockIoTRoboRunnerAPI) CreateDestination(arg0 *iotroborunner.CreateDestinationInput) (*iotroborunner.CreateDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDestination", arg0)
	ret0, _ := ret[0].(*iotroborunner.CreateDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDestination indicates an expected call of CreateDestination
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestination", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateDestination), arg0)
}

// CreateDestinationRequest mocks base method
func (m *MockIoTRoboRunnerAPI) CreateDestinationRequest(arg0 *iotroborunner.CreateDestinationInput) (*request.Request, *iotroborunner.CreateDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.CreateDestinationOutput)
	return ret0, ret1
}

// CreateDestinationRequest indicates an expected call of CreateDestinationRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestinationRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateDestinationRequest), arg0)
}

// CreateDestinationWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) CreateDestinationWithContext(arg0 context.Context, arg1 *iotroborunner.CreateDestinationInput, arg2 ...request.Option) (*iotroborunner.CreateDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.CreateDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDestinationWithContext indicates an expected call of CreateDestinationWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestinationWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateDestinationWithContext), varargs...)
}

// CreateSite mocks base method
func (m *MockIoTRoboRunnerAPI) CreateSite(arg0 *iotroborunner.CreateSiteInput) (*iotroborunner.CreateSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSite", arg0)
	ret0, _ := ret[0].(*iotroborunner.CreateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSite indicates an expected call of CreateSite
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSite", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateSite), arg0)
}

// CreateSiteRequest mocks base method
func (m *MockIoTRoboRunnerAPI) CreateSiteRequest(arg0 *iotroborunner.CreateSiteInput) (*request.Request, *iotroborunner.CreateSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.CreateSiteOutput)
	return ret0, ret1
}

// CreateSiteRequest indicates an expected call of CreateSiteRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateSiteRequest), arg0)
}

// CreateSiteWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) CreateSiteWithContext(arg0 context.Context, arg1 *iotroborunner.CreateSiteInput, arg2 ...request.Option) (*iotroborunner.CreateSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSiteWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.CreateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSiteWithContext indicates an expected call of CreateSiteWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateSiteWithContext), varargs...)
}

// CreateWorker mocks base method
func (m *MockIoTRoboRunnerAPI) CreateWorker(arg0 *iotroborunner.CreateWorkerInput) (*iotroborunner.CreateWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorker", arg0)
	ret0, _ := ret[0].(*iotroborunner.CreateWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorker indicates an expected call of CreateWorker
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorker", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateWorker), arg0)
}

// CreateWorkerFleet mocks base method
func (m *MockIoTRoboRunnerAPI) CreateWorkerFleet(arg0 *iotroborunner.CreateWorkerFleetInput) (*iotroborunner.CreateWorkerFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerFleet", arg0)
	ret0, _ := ret[0].(*iotroborunner.CreateWorkerFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerFleet indicates an expected call of CreateWorkerFleet
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateWorkerFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerFleet", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateWorkerFleet), arg0)
}

// CreateWorkerFleetRequest mocks base method
func (m *MockIoTRoboRunnerAPI) CreateWorkerFleetRequest(arg0 *iotroborunner.CreateWorkerFleetInput) (*request.Request, *iotroborunner.CreateWorkerFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.CreateWorkerFleetOutput)
	return ret0, ret1
}

// CreateWorkerFleetRequest indicates an expected call of CreateWorkerFleetRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateWorkerFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerFleetRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateWorkerFleetRequest), arg0)
}

// CreateWorkerFleetWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) CreateWorkerFleetWithContext(arg0 context.Context, arg1 *iotroborunner.CreateWorkerFleetInput, arg2 ...request.Option) (*iotroborunner.CreateWorkerFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkerFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.CreateWorkerFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerFleetWithContext indicates an expected call of CreateWorkerFleetWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateWorkerFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerFleetWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateWorkerFleetWithContext), varargs...)
}

// CreateWorkerRequest mocks base method
func (m *MockIoTRoboRunnerAPI) CreateWorkerRequest(arg0 *iotroborunner.CreateWorkerInput) (*request.Request, *iotroborunner.CreateWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.CreateWorkerOutput)
	return ret0, ret1
}

// CreateWorkerRequest indicates an expected call of CreateWorkerRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateWorkerRequest), arg0)
}

// CreateWorkerWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) CreateWorkerWithContext(arg0 context.Context, arg1 *iotroborunner.CreateWorkerInput, arg2 ...request.Option) (*iotroborunner.CreateWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.CreateWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerWithContext indicates an expected call of CreateWorkerWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) CreateWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).CreateWorkerWithContext), varargs...)
}

// DeleteDestination mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteDestination(arg0 *iotroborunner.DeleteDestinationInput) (*iotroborunner.DeleteDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDestination", arg0)
	ret0, _ := ret[0].(*iotroborunner.DeleteDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDestination indicates an expected call of DeleteDestination
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDestination", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteDestination), arg0)
}

// DeleteDestinationRequest mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteDestinationRequest(arg0 *iotroborunner.DeleteDestinationInput) (*request.Request, *iotroborunner.DeleteDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.DeleteDestinationOutput)
	return ret0, ret1
}

// DeleteDestinationRequest indicates an expected call of DeleteDestinationRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDestinationRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteDestinationRequest), arg0)
}

// DeleteDestinationWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteDestinationWithContext(arg0 context.Context, arg1 *iotroborunner.DeleteDestinationInput, arg2 ...request.Option) (*iotroborunner.DeleteDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.DeleteDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDestinationWithContext indicates an expected call of DeleteDestinationWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDestinationWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteDestinationWithContext), varargs...)
}

// DeleteSite mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteSite(arg0 *iotroborunner.DeleteSiteInput) (*iotroborunner.DeleteSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSite", arg0)
	ret0, _ := ret[0].(*iotroborunner.DeleteSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSite indicates an expected call of DeleteSite
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSite", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteSite), arg0)
}

// DeleteSiteRequest mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteSiteRequest(arg0 *iotroborunner.DeleteSiteInput) (*request.Request, *iotroborunner.DeleteSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.DeleteSiteOutput)
	return ret0, ret1
}

// DeleteSiteRequest indicates an expected call of DeleteSiteRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSiteRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteSiteRequest), arg0)
}

// DeleteSiteWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteSiteWithContext(arg0 context.Context, arg1 *iotroborunner.DeleteSiteInput, arg2 ...request.Option) (*iotroborunner.DeleteSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSiteWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.DeleteSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSiteWithContext indicates an expected call of DeleteSiteWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSiteWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteSiteWithContext), varargs...)
}

// DeleteWorker mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteWorker(arg0 *iotroborunner.DeleteWorkerInput) (*iotroborunner.DeleteWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorker", arg0)
	ret0, _ := ret[0].(*iotroborunner.DeleteWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorker indicates an expected call of DeleteWorker
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorker", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteWorker), arg0)
}

// DeleteWorkerFleet mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteWorkerFleet(arg0 *iotroborunner.DeleteWorkerFleetInput) (*iotroborunner.DeleteWorkerFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkerFleet", arg0)
	ret0, _ := ret[0].(*iotroborunner.DeleteWorkerFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkerFleet indicates an expected call of DeleteWorkerFleet
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteWorkerFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerFleet", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteWorkerFleet), arg0)
}

// DeleteWorkerFleetRequest mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteWorkerFleetRequest(arg0 *iotroborunner.DeleteWorkerFleetInput) (*request.Request, *iotroborunner.DeleteWorkerFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkerFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.DeleteWorkerFleetOutput)
	return ret0, ret1
}

// DeleteWorkerFleetRequest indicates an expected call of DeleteWorkerFleetRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteWorkerFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerFleetRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteWorkerFleetRequest), arg0)
}

// DeleteWorkerFleetWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteWorkerFleetWithContext(arg0 context.Context, arg1 *iotroborunner.DeleteWorkerFleetInput, arg2 ...request.Option) (*iotroborunner.DeleteWorkerFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkerFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.DeleteWorkerFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkerFleetWithContext indicates an expected call of DeleteWorkerFleetWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteWorkerFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerFleetWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteWorkerFleetWithContext), varargs...)
}

// DeleteWorkerRequest mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteWorkerRequest(arg0 *iotroborunner.DeleteWorkerInput) (*request.Request, *iotroborunner.DeleteWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.DeleteWorkerOutput)
	return ret0, ret1
}

// DeleteWorkerRequest indicates an expected call of DeleteWorkerRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteWorkerRequest), arg0)
}

// DeleteWorkerWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) DeleteWorkerWithContext(arg0 context.Context, arg1 *iotroborunner.DeleteWorkerInput, arg2 ...request.Option) (*iotroborunner.DeleteWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.DeleteWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkerWithContext indicates an expected call of DeleteWorkerWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) DeleteWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).DeleteWorkerWithContext), varargs...)
}

// GetDestination mocks base method
func (m *MockIoTRoboRunnerAPI) GetDestination(arg0 *iotroborunner.GetDestinationInput) (*iotroborunner.GetDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestination", arg0)
	ret0, _ := ret[0].(*iotroborunner.GetDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestination indicates an expected call of GetDestination
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestination", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetDestination), arg0)
}

// GetDestinationRequest mocks base method
func (m *MockIoTRoboRunnerAPI) GetDestinationRequest(arg0 *iotroborunner.GetDestinationInput) (*request.Request, *iotroborunner.GetDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.GetDestinationOutput)
	return ret0, ret1
}

// GetDestinationRequest indicates an expected call of GetDestinationRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetDestinationRequest), arg0)
}

// GetDestinationWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) GetDestinationWithContext(arg0 context.Context, arg1 *iotroborunner.GetDestinationInput, arg2 ...request.Option) (*iotroborunner.GetDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.GetDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationWithContext indicates an expected call of GetDestinationWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetDestinationWithContext), varargs...)
}

// GetSite mocks base method
func (m *MockIoTRoboRunnerAPI) GetSite(arg0 *iotroborunner.GetSiteInput) (*iotroborunner.GetSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSite", arg0)
	ret0, _ := ret[0].(*iotroborunner.GetSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSite indicates an expected call of GetSite
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSite", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetSite), arg0)
}

// GetSiteRequest mocks base method
func (m *MockIoTRoboRunnerAPI) GetSiteRequest(arg0 *iotroborunner.GetSiteInput) (*request.Request, *iotroborunner.GetSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.GetSiteOutput)
	return ret0, ret1
}

// GetSiteRequest indicates an expected call of GetSiteRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetSiteRequest), arg0)
}

// GetSiteWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) GetSiteWithContext(arg0 context.Context, arg1 *iotroborunner.GetSiteInput, arg2 ...request.Option) (*iotroborunner.GetSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSiteWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.GetSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteWithContext indicates an expected call of GetSiteWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetSiteWithContext), varargs...)
}

// GetWorker mocks base method
func (m *MockIoTRoboRunnerAPI) GetWorker(arg0 *iotroborunner.GetWorkerInput) (*iotroborunner.GetWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorker", arg0)
	ret0, _ := ret[0].(*iotroborunner.GetWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorker indicates an expected call of GetWorker
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorker", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetWorker), arg0)
}

// GetWorkerFleet mocks base method
func (m *MockIoTRoboRunnerAPI) GetWorkerFleet(arg0 *iotroborunner.GetWorkerFleetInput) (*iotroborunner.GetWorkerFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerFleet", arg0)
	ret0, _ := ret[0].(*iotroborunner.GetWorkerFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerFleet indicates an expected call of GetWorkerFleet
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetWorkerFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerFleet", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetWorkerFleet), arg0)
}

// GetWorkerFleetRequest mocks base method
func (m *MockIoTRoboRunnerAPI) GetWorkerFleetRequest(arg0 *iotroborunner.GetWorkerFleetInput) (*request.Request, *iotroborunner.GetWorkerFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.GetWorkerFleetOutput)
	return ret0, ret1
}

// GetWorkerFleetRequest indicates an expected call of GetWorkerFleetRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetWorkerFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerFleetRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetWorkerFleetRequest), arg0)
}

// GetWorkerFleetWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) GetWorkerFleetWithContext(arg0 context.Context, arg1 *iotroborunner.GetWorkerFleetInput, arg2 ...request.Option) (*iotroborunner.GetWorkerFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkerFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.GetWorkerFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerFleetWithContext indicates an expected call of GetWorkerFleetWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetWorkerFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerFleetWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetWorkerFleetWithContext), varargs...)
}

// GetWorkerRequest mocks base method
func (m *MockIoTRoboRunnerAPI) GetWorkerRequest(arg0 *iotroborunner.GetWorkerInput) (*request.Request, *iotroborunner.GetWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.GetWorkerOutput)
	return ret0, ret1
}

// GetWorkerRequest indicates an expected call of GetWorkerRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetWorkerRequest), arg0)
}

// GetWorkerWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) GetWorkerWithContext(arg0 context.Context, arg1 *iotroborunner.GetWorkerInput, arg2 ...request.Option) (*iotroborunner.GetWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.GetWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerWithContext indicates an expected call of GetWorkerWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) GetWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).GetWorkerWithContext), varargs...)
}

// ListDestinations mocks base method
func (m *MockIoTRoboRunnerAPI) ListDestinations(arg0 *iotroborunner.ListDestinationsInput) (*iotroborunner.ListDestinationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDestinations", arg0)
	ret0, _ := ret[0].(*iotroborunner.ListDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDestinations indicates an expected call of ListDestinations
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListDestinations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinations", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListDestinations), arg0)
}

// ListDestinationsPages mocks base method
func (m *MockIoTRoboRunnerAPI) ListDestinationsPages(arg0 *iotroborunner.ListDestinationsInput, arg1 func(*iotroborunner.ListDestinationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDestinationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDestinationsPages indicates an expected call of ListDestinationsPages
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListDestinationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationsPages", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListDestinationsPages), arg0, arg1)
}

// ListDestinationsPagesWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) ListDestinationsPagesWithContext(arg0 context.Context, arg1 *iotroborunner.ListDestinationsInput, arg2 func(*iotroborunner.ListDestinationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDestinationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDestinationsPagesWithContext indicates an expected call of ListDestinationsPagesWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListDestinationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationsPagesWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListDestinationsPagesWithContext), varargs...)
}

// ListDestinationsRequest mocks base method
func (m *MockIoTRoboRunnerAPI) ListDestinationsRequest(arg0 *iotroborunner.ListDestinationsInput) (*request.Request, *iotroborunner.ListDestinationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDestinationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.ListDestinationsOutput)
	return ret0, ret1
}

// ListDestinationsRequest indicates an expected call of ListDestinationsRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListDestinationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationsRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListDestinationsRequest), arg0)
}

// ListDestinationsWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) ListDestinationsWithContext(arg0 context.Context, arg1 *iotroborunner.ListDestinationsInput, arg2 ...request.Option) (*iotroborunner.ListDestinationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDestinationsWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.ListDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDestinationsWithContext indicates an expected call of ListDestinationsWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListDestinationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationsWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListDestinationsWithContext), varargs...)
}

// ListSites mocks base method
func (m *MockIoTRoboRunnerAPI) ListSites(arg0 *iotroborunner.ListSitesInput) (*iotroborunner.ListSitesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSites", arg0)
	ret0, _ := ret[0].(*iotroborunner.ListSitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSites indicates an expected call of ListSites
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListSites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSites", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListSites), arg0)
}

// ListSitesPages mocks base method
func (m *MockIoTRoboRunnerAPI) ListSitesPages(arg0 *iotroborunner.ListSitesInput, arg1 func(*iotroborunner.ListSitesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSitesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSitesPages indicates an expected call of ListSitesPages
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListSitesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesPages", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListSitesPages), arg0, arg1)
}

// ListSitesPagesWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) ListSitesPagesWithContext(arg0 context.Context, arg1 *iotroborunner.ListSitesInput, arg2 func(*iotroborunner.ListSitesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSitesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSitesPagesWithContext indicates an expected call of ListSitesPagesWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListSitesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesPagesWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListSitesPagesWithContext), varargs...)
}

// ListSitesRequest mocks base method
func (m *MockIoTRoboRunnerAPI) ListSitesRequest(arg0 *iotroborunner.ListSitesInput) (*request.Request, *iotroborunner.ListSitesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSitesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.ListSitesOutput)
	return ret0, ret1
}

// ListSitesRequest indicates an expected call of ListSitesRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListSitesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListSitesRequest), arg0)
}

// ListSitesWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) ListSitesWithContext(arg0 context.Context, arg1 *iotroborunner.ListSitesInput, arg2 ...request.Option) (*iotroborunner.ListSitesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSitesWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.ListSitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSitesWithContext indicates an expected call of ListSitesWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListSitesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListSitesWithContext), varargs...)
}

// ListWorkerFleets mocks base method
func (m *MockIoTRoboRunnerAPI) ListWorkerFleets(arg0 *iotroborunner.ListWorkerFleetsInput) (*iotroborunner.ListWorkerFleetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkerFleets", arg0)
	ret0, _ := ret[0].(*iotroborunner.ListWorkerFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkerFleets indicates an expected call of ListWorkerFleets
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListWorkerFleets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerFleets", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListWorkerFleets), arg0)
}

// ListWorkerFleetsPages mocks base method
func (m *MockIoTRoboRunnerAPI) ListWorkerFleetsPages(arg0 *iotroborunner.ListWorkerFleetsInput, arg1 func(*iotroborunner.ListWorkerFleetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkerFleetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkerFleetsPages indicates an expected call of ListWorkerFleetsPages
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListWorkerFleetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerFleetsPages", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListWorkerFleetsPages), arg0, arg1)
}

// ListWorkerFleetsPagesWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) ListWorkerFleetsPagesWithContext(arg0 context.Context, arg1 *iotroborunner.ListWorkerFleetsInput, arg2 func(*iotroborunner.ListWorkerFleetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkerFleetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkerFleetsPagesWithContext indicates an expected call of ListWorkerFleetsPagesWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListWorkerFleetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerFleetsPagesWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListWorkerFleetsPagesWithContext), varargs...)
}

// ListWorkerFleetsRequest mocks base method
func (m *MockIoTRoboRunnerAPI) ListWorkerFleetsRequest(arg0 *iotroborunner.ListWorkerFleetsInput) (*request.Request, *iotroborunner.ListWorkerFleetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkerFleetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.ListWorkerFleetsOutput)
	return ret0, ret1
}

// ListWorkerFleetsRequest indicates an expected call of ListWorkerFleetsRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListWorkerFleetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerFleetsRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListWorkerFleetsRequest), arg0)
}

// ListWorkerFleetsWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) ListWorkerFleetsWithContext(arg0 context.Context, arg1 *iotroborunner.ListWorkerFleetsInput, arg2 ...request.Option) (*iotroborunner.ListWorkerFleetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkerFleetsWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.ListWorkerFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkerFleetsWithContext indicates an expected call of ListWorkerFleetsWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListWorkerFleetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerFleetsWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListWorkerFleetsWithContext), varargs...)
}

// ListWorkers mocks base method
func (m *MockIoTRoboRunnerAPI) ListWorkers(arg0 *iotroborunner.ListWorkersInput) (*iotroborunner.ListWorkersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkers", arg0)
	ret0, _ := ret[0].(*iotroborunner.ListWorkersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkers indicates an expected call of ListWorkers
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListWorkers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkers", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListWorkers), arg0)
}

// ListWorkersPages mocks base method
func (m *MockIoTRoboRunnerAPI) ListWorkersPages(arg0 *iotroborunner.ListWorkersInput, arg1 func(*iotroborunner.ListWorkersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkersPages indicates an expected call of ListWorkersPages
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListWorkersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkersPages", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListWorkersPages), arg0, arg1)
}

// ListWorkersPagesWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) ListWorkersPagesWithContext(arg0 context.Context, arg1 *iotroborunner.ListWorkersInput, arg2 func(*iotroborunner.ListWorkersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkersPagesWithContext indicates an expected call of ListWorkersPagesWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListWorkersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkersPagesWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListWorkersPagesWithContext), varargs...)
}

// ListWorkersRequest mocks base method
func (m *MockIoTRoboRunnerAPI) ListWorkersRequest(arg0 *iotroborunner.ListWorkersInput) (*request.Request, *iotroborunner.ListWorkersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.ListWorkersOutput)
	return ret0, ret1
}

// ListWorkersRequest indicates an expected call of ListWorkersRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListWorkersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkersRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListWorkersRequest), arg0)
}

// ListWorkersWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) ListWorkersWithContext(arg0 context.Context, arg1 *iotroborunner.ListWorkersInput, arg2 ...request.Option) (*iotroborunner.ListWorkersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkersWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.ListWorkersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkersWithContext indicates an expected call of ListWorkersWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) ListWorkersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkersWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).ListWorkersWithContext), varargs...)
}

// UpdateDestination mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateDestination(arg0 *iotroborunner.UpdateDestinationInput) (*iotroborunner.UpdateDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDestination", arg0)
	ret0, _ := ret[0].(*iotroborunner.UpdateDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDestination indicates an expected call of UpdateDestination
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestination", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateDestination), arg0)
}

// UpdateDestinationRequest mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateDestinationRequest(arg0 *iotroborunner.UpdateDestinationInput) (*request.Request, *iotroborunner.UpdateDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.UpdateDestinationOutput)
	return ret0, ret1
}

// UpdateDestinationRequest indicates an expected call of UpdateDestinationRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestinationRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateDestinationRequest), arg0)
}

// UpdateDestinationWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateDestinationWithContext(arg0 context.Context, arg1 *iotroborunner.UpdateDestinationInput, arg2 ...request.Option) (*iotroborunner.UpdateDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.UpdateDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDestinationWithContext indicates an expected call of UpdateDestinationWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestinationWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateDestinationWithContext), varargs...)
}

// UpdateSite mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateSite(arg0 *iotroborunner.UpdateSiteInput) (*iotroborunner.UpdateSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSite", arg0)
	ret0, _ := ret[0].(*iotroborunner.UpdateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSite indicates an expected call of UpdateSite
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSite", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateSite), arg0)
}

// UpdateSiteRequest mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateSiteRequest(arg0 *iotroborunner.UpdateSiteInput) (*request.Request, *iotroborunner.UpdateSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.UpdateSiteOutput)
	return ret0, ret1
}

// UpdateSiteRequest indicates an expected call of UpdateSiteRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateSiteRequest), arg0)
}

// UpdateSiteWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateSiteWithContext(arg0 context.Context, arg1 *iotroborunner.UpdateSiteInput, arg2 ...request.Option) (*iotroborunner.UpdateSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSiteWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.UpdateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSiteWithContext indicates an expected call of UpdateSiteWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateSiteWithContext), varargs...)
}

// UpdateWorker mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateWorker(arg0 *iotroborunner.UpdateWorkerInput) (*iotroborunner.UpdateWorkerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorker", arg0)
	ret0, _ := ret[0].(*iotroborunner.UpdateWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorker indicates an expected call of UpdateWorker
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorker", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateWorker), arg0)
}

// UpdateWorkerFleet mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateWorkerFleet(arg0 *iotroborunner.UpdateWorkerFleetInput) (*iotroborunner.UpdateWorkerFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerFleet", arg0)
	ret0, _ := ret[0].(*iotroborunner.UpdateWorkerFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkerFleet indicates an expected call of UpdateWorkerFleet
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateWorkerFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerFleet", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateWorkerFleet), arg0)
}

// UpdateWorkerFleetRequest mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateWorkerFleetRequest(arg0 *iotroborunner.UpdateWorkerFleetInput) (*request.Request, *iotroborunner.UpdateWorkerFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.UpdateWorkerFleetOutput)
	return ret0, ret1
}

// UpdateWorkerFleetRequest indicates an expected call of UpdateWorkerFleetRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateWorkerFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerFleetRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateWorkerFleetRequest), arg0)
}

// UpdateWorkerFleetWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateWorkerFleetWithContext(arg0 context.Context, arg1 *iotroborunner.UpdateWorkerFleetInput, arg2 ...request.Option) (*iotroborunner.UpdateWorkerFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkerFleetWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.UpdateWorkerFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkerFleetWithContext indicates an expected call of UpdateWorkerFleetWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateWorkerFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerFleetWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateWorkerFleetWithContext), varargs...)
}

// UpdateWorkerRequest mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateWorkerRequest(arg0 *iotroborunner.UpdateWorkerInput) (*request.Request, *iotroborunner.UpdateWorkerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotroborunner.UpdateWorkerOutput)
	return ret0, ret1
}

// UpdateWorkerRequest indicates an expected call of UpdateWorkerRequest
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateWorkerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerRequest", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateWorkerRequest), arg0)
}

// UpdateWorkerWithContext mocks base method
func (m *MockIoTRoboRunnerAPI) UpdateWorkerWithContext(arg0 context.Context, arg1 *iotroborunner.UpdateWorkerInput, arg2 ...request.Option) (*iotroborunner.UpdateWorkerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkerWithContext", varargs...)
	ret0, _ := ret[0].(*iotroborunner.UpdateWorkerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkerWithContext indicates an expected call of UpdateWorkerWithContext
func (mr *MockIoTRoboRunnerAPIMockRecorder) UpdateWorkerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerWithContext", reflect.TypeOf((*MockIoTRoboRunnerAPI)(nil).UpdateWorkerWithContext), varargs...)
}
