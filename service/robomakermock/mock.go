// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/robomaker/robomakeriface (interfaces: RoboMakerAPI)

// Package robomakermock is a generated GoMock package.
package robomakermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	robomaker "github.com/aws/aws-sdk-go/service/robomaker"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRoboMakerAPI is a mock of RoboMakerAPI interface
type MockRoboMakerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRoboMakerAPIMockRecorder
}

// MockRoboMakerAPIMockRecorder is the mock recorder for MockRoboMakerAPI
type MockRoboMakerAPIMockRecorder struct {
	mock *MockRoboMakerAPI
}

// NewMockRoboMakerAPI creates a new mock instance
func NewMockRoboMakerAPI(ctrl *gomock.Controller) *MockRoboMakerAPI {
	mock := &MockRoboMakerAPI{ctrl: ctrl}
	mock.recorder = &MockRoboMakerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoboMakerAPI) EXPECT() *MockRoboMakerAPIMockRecorder {
	return m.recorder
}

// BatchDescribeSimulationJob mocks base method
func (m *MockRoboMakerAPI) BatchDescribeSimulationJob(arg0 *robomaker.BatchDescribeSimulationJobInput) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDescribeSimulationJob", arg0)
	ret0, _ := ret[0].(*robomaker.BatchDescribeSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDescribeSimulationJob indicates an expected call of BatchDescribeSimulationJob
func (mr *MockRoboMakerAPIMockRecorder) BatchDescribeSimulationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDescribeSimulationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).BatchDescribeSimulationJob), arg0)
}

// BatchDescribeSimulationJobRequest mocks base method
func (m *MockRoboMakerAPI) BatchDescribeSimulationJobRequest(arg0 *robomaker.BatchDescribeSimulationJobInput) (*request.Request, *robomaker.BatchDescribeSimulationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDescribeSimulationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.BatchDescribeSimulationJobOutput)
	return ret0, ret1
}

// BatchDescribeSimulationJobRequest indicates an expected call of BatchDescribeSimulationJobRequest
func (mr *MockRoboMakerAPIMockRecorder) BatchDescribeSimulationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDescribeSimulationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).BatchDescribeSimulationJobRequest), arg0)
}

// BatchDescribeSimulationJobWithContext mocks base method
func (m *MockRoboMakerAPI) BatchDescribeSimulationJobWithContext(arg0 context.Context, arg1 *robomaker.BatchDescribeSimulationJobInput, arg2 ...request.Option) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDescribeSimulationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.BatchDescribeSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDescribeSimulationJobWithContext indicates an expected call of BatchDescribeSimulationJobWithContext
func (mr *MockRoboMakerAPIMockRecorder) BatchDescribeSimulationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDescribeSimulationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).BatchDescribeSimulationJobWithContext), varargs...)
}

// CancelSimulationJob mocks base method
func (m *MockRoboMakerAPI) CancelSimulationJob(arg0 *robomaker.CancelSimulationJobInput) (*robomaker.CancelSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSimulationJob", arg0)
	ret0, _ := ret[0].(*robomaker.CancelSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSimulationJob indicates an expected call of CancelSimulationJob
func (mr *MockRoboMakerAPIMockRecorder) CancelSimulationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSimulationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelSimulationJob), arg0)
}

// CancelSimulationJobRequest mocks base method
func (m *MockRoboMakerAPI) CancelSimulationJobRequest(arg0 *robomaker.CancelSimulationJobInput) (*request.Request, *robomaker.CancelSimulationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSimulationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CancelSimulationJobOutput)
	return ret0, ret1
}

// CancelSimulationJobRequest indicates an expected call of CancelSimulationJobRequest
func (mr *MockRoboMakerAPIMockRecorder) CancelSimulationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSimulationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelSimulationJobRequest), arg0)
}

// CancelSimulationJobWithContext mocks base method
func (m *MockRoboMakerAPI) CancelSimulationJobWithContext(arg0 context.Context, arg1 *robomaker.CancelSimulationJobInput, arg2 ...request.Option) (*robomaker.CancelSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelSimulationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CancelSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSimulationJobWithContext indicates an expected call of CancelSimulationJobWithContext
func (mr *MockRoboMakerAPIMockRecorder) CancelSimulationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSimulationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelSimulationJobWithContext), varargs...)
}

// CreateDeploymentJob mocks base method
func (m *MockRoboMakerAPI) CreateDeploymentJob(arg0 *robomaker.CreateDeploymentJobInput) (*robomaker.CreateDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentJob", arg0)
	ret0, _ := ret[0].(*robomaker.CreateDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentJob indicates an expected call of CreateDeploymentJob
func (mr *MockRoboMakerAPIMockRecorder) CreateDeploymentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateDeploymentJob), arg0)
}

// CreateDeploymentJobRequest mocks base method
func (m *MockRoboMakerAPI) CreateDeploymentJobRequest(arg0 *robomaker.CreateDeploymentJobInput) (*request.Request, *robomaker.CreateDeploymentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateDeploymentJobOutput)
	return ret0, ret1
}

// CreateDeploymentJobRequest indicates an expected call of CreateDeploymentJobRequest
func (mr *MockRoboMakerAPIMockRecorder) CreateDeploymentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateDeploymentJobRequest), arg0)
}

// CreateDeploymentJobWithContext mocks base method
func (m *MockRoboMakerAPI) CreateDeploymentJobWithContext(arg0 context.Context, arg1 *robomaker.CreateDeploymentJobInput, arg2 ...request.Option) (*robomaker.CreateDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeploymentJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentJobWithContext indicates an expected call of CreateDeploymentJobWithContext
func (mr *MockRoboMakerAPIMockRecorder) CreateDeploymentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateDeploymentJobWithContext), varargs...)
}

// CreateFleet mocks base method
func (m *MockRoboMakerAPI) CreateFleet(arg0 *robomaker.CreateFleetInput) (*robomaker.CreateFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleet", arg0)
	ret0, _ := ret[0].(*robomaker.CreateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleet indicates an expected call of CreateFleet
func (mr *MockRoboMakerAPIMockRecorder) CreateFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleet", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateFleet), arg0)
}

// CreateFleetRequest mocks base method
func (m *MockRoboMakerAPI) CreateFleetRequest(arg0 *robomaker.CreateFleetInput) (*request.Request, *robomaker.CreateFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateFleetOutput)
	return ret0, ret1
}

// CreateFleetRequest indicates an expected call of CreateFleetRequest
func (mr *MockRoboMakerAPIMockRecorder) CreateFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleetRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateFleetRequest), arg0)
}

// CreateFleetWithContext mocks base method
func (m *MockRoboMakerAPI) CreateFleetWithContext(arg0 context.Context, arg1 *robomaker.CreateFleetInput, arg2 ...request.Option) (*robomaker.CreateFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFleetWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleetWithContext indicates an expected call of CreateFleetWithContext
func (mr *MockRoboMakerAPIMockRecorder) CreateFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleetWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateFleetWithContext), varargs...)
}

// CreateRobot mocks base method
func (m *MockRoboMakerAPI) CreateRobot(arg0 *robomaker.CreateRobotInput) (*robomaker.CreateRobotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobot", arg0)
	ret0, _ := ret[0].(*robomaker.CreateRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobot indicates an expected call of CreateRobot
func (mr *MockRoboMakerAPIMockRecorder) CreateRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobot", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobot), arg0)
}

// CreateRobotApplication mocks base method
func (m *MockRoboMakerAPI) CreateRobotApplication(arg0 *robomaker.CreateRobotApplicationInput) (*robomaker.CreateRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotApplication", arg0)
	ret0, _ := ret[0].(*robomaker.CreateRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotApplication indicates an expected call of CreateRobotApplication
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplication), arg0)
}

// CreateRobotApplicationRequest mocks base method
func (m *MockRoboMakerAPI) CreateRobotApplicationRequest(arg0 *robomaker.CreateRobotApplicationInput) (*request.Request, *robomaker.CreateRobotApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateRobotApplicationOutput)
	return ret0, ret1
}

// CreateRobotApplicationRequest indicates an expected call of CreateRobotApplicationRequest
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplicationRequest), arg0)
}

// CreateRobotApplicationVersion mocks base method
func (m *MockRoboMakerAPI) CreateRobotApplicationVersion(arg0 *robomaker.CreateRobotApplicationVersionInput) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotApplicationVersion", arg0)
	ret0, _ := ret[0].(*robomaker.CreateRobotApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotApplicationVersion indicates an expected call of CreateRobotApplicationVersion
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplicationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplicationVersion", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplicationVersion), arg0)
}

// CreateRobotApplicationVersionRequest mocks base method
func (m *MockRoboMakerAPI) CreateRobotApplicationVersionRequest(arg0 *robomaker.CreateRobotApplicationVersionInput) (*request.Request, *robomaker.CreateRobotApplicationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotApplicationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateRobotApplicationVersionOutput)
	return ret0, ret1
}

// CreateRobotApplicationVersionRequest indicates an expected call of CreateRobotApplicationVersionRequest
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplicationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplicationVersionRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplicationVersionRequest), arg0)
}

// CreateRobotApplicationVersionWithContext mocks base method
func (m *MockRoboMakerAPI) CreateRobotApplicationVersionWithContext(arg0 context.Context, arg1 *robomaker.CreateRobotApplicationVersionInput, arg2 ...request.Option) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRobotApplicationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateRobotApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotApplicationVersionWithContext indicates an expected call of CreateRobotApplicationVersionWithContext
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplicationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplicationVersionWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplicationVersionWithContext), varargs...)
}

// CreateRobotApplicationWithContext mocks base method
func (m *MockRoboMakerAPI) CreateRobotApplicationWithContext(arg0 context.Context, arg1 *robomaker.CreateRobotApplicationInput, arg2 ...request.Option) (*robomaker.CreateRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRobotApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotApplicationWithContext indicates an expected call of CreateRobotApplicationWithContext
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplicationWithContext), varargs...)
}

// CreateRobotRequest mocks base method
func (m *MockRoboMakerAPI) CreateRobotRequest(arg0 *robomaker.CreateRobotInput) (*request.Request, *robomaker.CreateRobotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateRobotOutput)
	return ret0, ret1
}

// CreateRobotRequest indicates an expected call of CreateRobotRequest
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotRequest), arg0)
}

// CreateRobotWithContext mocks base method
func (m *MockRoboMakerAPI) CreateRobotWithContext(arg0 context.Context, arg1 *robomaker.CreateRobotInput, arg2 ...request.Option) (*robomaker.CreateRobotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRobotWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotWithContext indicates an expected call of CreateRobotWithContext
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotWithContext), varargs...)
}

// CreateSimulationApplication mocks base method
func (m *MockRoboMakerAPI) CreateSimulationApplication(arg0 *robomaker.CreateSimulationApplicationInput) (*robomaker.CreateSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationApplication", arg0)
	ret0, _ := ret[0].(*robomaker.CreateSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationApplication indicates an expected call of CreateSimulationApplication
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplication), arg0)
}

// CreateSimulationApplicationRequest mocks base method
func (m *MockRoboMakerAPI) CreateSimulationApplicationRequest(arg0 *robomaker.CreateSimulationApplicationInput) (*request.Request, *robomaker.CreateSimulationApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateSimulationApplicationOutput)
	return ret0, ret1
}

// CreateSimulationApplicationRequest indicates an expected call of CreateSimulationApplicationRequest
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplicationRequest), arg0)
}

// CreateSimulationApplicationVersion mocks base method
func (m *MockRoboMakerAPI) CreateSimulationApplicationVersion(arg0 *robomaker.CreateSimulationApplicationVersionInput) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationApplicationVersion", arg0)
	ret0, _ := ret[0].(*robomaker.CreateSimulationApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationApplicationVersion indicates an expected call of CreateSimulationApplicationVersion
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplicationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplicationVersion", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplicationVersion), arg0)
}

// CreateSimulationApplicationVersionRequest mocks base method
func (m *MockRoboMakerAPI) CreateSimulationApplicationVersionRequest(arg0 *robomaker.CreateSimulationApplicationVersionInput) (*request.Request, *robomaker.CreateSimulationApplicationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationApplicationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateSimulationApplicationVersionOutput)
	return ret0, ret1
}

// CreateSimulationApplicationVersionRequest indicates an expected call of CreateSimulationApplicationVersionRequest
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplicationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplicationVersionRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplicationVersionRequest), arg0)
}

// CreateSimulationApplicationVersionWithContext mocks base method
func (m *MockRoboMakerAPI) CreateSimulationApplicationVersionWithContext(arg0 context.Context, arg1 *robomaker.CreateSimulationApplicationVersionInput, arg2 ...request.Option) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSimulationApplicationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateSimulationApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationApplicationVersionWithContext indicates an expected call of CreateSimulationApplicationVersionWithContext
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplicationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplicationVersionWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplicationVersionWithContext), varargs...)
}

// CreateSimulationApplicationWithContext mocks base method
func (m *MockRoboMakerAPI) CreateSimulationApplicationWithContext(arg0 context.Context, arg1 *robomaker.CreateSimulationApplicationInput, arg2 ...request.Option) (*robomaker.CreateSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSimulationApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationApplicationWithContext indicates an expected call of CreateSimulationApplicationWithContext
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplicationWithContext), varargs...)
}

// CreateSimulationJob mocks base method
func (m *MockRoboMakerAPI) CreateSimulationJob(arg0 *robomaker.CreateSimulationJobInput) (*robomaker.CreateSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationJob", arg0)
	ret0, _ := ret[0].(*robomaker.CreateSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationJob indicates an expected call of CreateSimulationJob
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationJob), arg0)
}

// CreateSimulationJobRequest mocks base method
func (m *MockRoboMakerAPI) CreateSimulationJobRequest(arg0 *robomaker.CreateSimulationJobInput) (*request.Request, *robomaker.CreateSimulationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateSimulationJobOutput)
	return ret0, ret1
}

// CreateSimulationJobRequest indicates an expected call of CreateSimulationJobRequest
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationJobRequest), arg0)
}

// CreateSimulationJobWithContext mocks base method
func (m *MockRoboMakerAPI) CreateSimulationJobWithContext(arg0 context.Context, arg1 *robomaker.CreateSimulationJobInput, arg2 ...request.Option) (*robomaker.CreateSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSimulationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationJobWithContext indicates an expected call of CreateSimulationJobWithContext
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationJobWithContext), varargs...)
}

// DeleteFleet mocks base method
func (m *MockRoboMakerAPI) DeleteFleet(arg0 *robomaker.DeleteFleetInput) (*robomaker.DeleteFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleet", arg0)
	ret0, _ := ret[0].(*robomaker.DeleteFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFleet indicates an expected call of DeleteFleet
func (mr *MockRoboMakerAPIMockRecorder) DeleteFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleet", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteFleet), arg0)
}

// DeleteFleetRequest mocks base method
func (m *MockRoboMakerAPI) DeleteFleetRequest(arg0 *robomaker.DeleteFleetInput) (*request.Request, *robomaker.DeleteFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeleteFleetOutput)
	return ret0, ret1
}

// DeleteFleetRequest indicates an expected call of DeleteFleetRequest
func (mr *MockRoboMakerAPIMockRecorder) DeleteFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleetRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteFleetRequest), arg0)
}

// DeleteFleetWithContext mocks base method
func (m *MockRoboMakerAPI) DeleteFleetWithContext(arg0 context.Context, arg1 *robomaker.DeleteFleetInput, arg2 ...request.Option) (*robomaker.DeleteFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFleetWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeleteFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFleetWithContext indicates an expected call of DeleteFleetWithContext
func (mr *MockRoboMakerAPIMockRecorder) DeleteFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleetWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteFleetWithContext), varargs...)
}

// DeleteRobot mocks base method
func (m *MockRoboMakerAPI) DeleteRobot(arg0 *robomaker.DeleteRobotInput) (*robomaker.DeleteRobotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobot", arg0)
	ret0, _ := ret[0].(*robomaker.DeleteRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobot indicates an expected call of DeleteRobot
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobot", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobot), arg0)
}

// DeleteRobotApplication mocks base method
func (m *MockRoboMakerAPI) DeleteRobotApplication(arg0 *robomaker.DeleteRobotApplicationInput) (*robomaker.DeleteRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobotApplication", arg0)
	ret0, _ := ret[0].(*robomaker.DeleteRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobotApplication indicates an expected call of DeleteRobotApplication
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobotApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobotApplication), arg0)
}

// DeleteRobotApplicationRequest mocks base method
func (m *MockRoboMakerAPI) DeleteRobotApplicationRequest(arg0 *robomaker.DeleteRobotApplicationInput) (*request.Request, *robomaker.DeleteRobotApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobotApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeleteRobotApplicationOutput)
	return ret0, ret1
}

// DeleteRobotApplicationRequest indicates an expected call of DeleteRobotApplicationRequest
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobotApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobotApplicationRequest), arg0)
}

// DeleteRobotApplicationWithContext mocks base method
func (m *MockRoboMakerAPI) DeleteRobotApplicationWithContext(arg0 context.Context, arg1 *robomaker.DeleteRobotApplicationInput, arg2 ...request.Option) (*robomaker.DeleteRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRobotApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeleteRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobotApplicationWithContext indicates an expected call of DeleteRobotApplicationWithContext
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobotApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobotApplicationWithContext), varargs...)
}

// DeleteRobotRequest mocks base method
func (m *MockRoboMakerAPI) DeleteRobotRequest(arg0 *robomaker.DeleteRobotInput) (*request.Request, *robomaker.DeleteRobotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeleteRobotOutput)
	return ret0, ret1
}

// DeleteRobotRequest indicates an expected call of DeleteRobotRequest
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobotRequest), arg0)
}

// DeleteRobotWithContext mocks base method
func (m *MockRoboMakerAPI) DeleteRobotWithContext(arg0 context.Context, arg1 *robomaker.DeleteRobotInput, arg2 ...request.Option) (*robomaker.DeleteRobotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRobotWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeleteRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobotWithContext indicates an expected call of DeleteRobotWithContext
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobotWithContext), varargs...)
}

// DeleteSimulationApplication mocks base method
func (m *MockRoboMakerAPI) DeleteSimulationApplication(arg0 *robomaker.DeleteSimulationApplicationInput) (*robomaker.DeleteSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSimulationApplication", arg0)
	ret0, _ := ret[0].(*robomaker.DeleteSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSimulationApplication indicates an expected call of DeleteSimulationApplication
func (mr *MockRoboMakerAPIMockRecorder) DeleteSimulationApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSimulationApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteSimulationApplication), arg0)
}

// DeleteSimulationApplicationRequest mocks base method
func (m *MockRoboMakerAPI) DeleteSimulationApplicationRequest(arg0 *robomaker.DeleteSimulationApplicationInput) (*request.Request, *robomaker.DeleteSimulationApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSimulationApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeleteSimulationApplicationOutput)
	return ret0, ret1
}

// DeleteSimulationApplicationRequest indicates an expected call of DeleteSimulationApplicationRequest
func (mr *MockRoboMakerAPIMockRecorder) DeleteSimulationApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSimulationApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteSimulationApplicationRequest), arg0)
}

// DeleteSimulationApplicationWithContext mocks base method
func (m *MockRoboMakerAPI) DeleteSimulationApplicationWithContext(arg0 context.Context, arg1 *robomaker.DeleteSimulationApplicationInput, arg2 ...request.Option) (*robomaker.DeleteSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSimulationApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeleteSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSimulationApplicationWithContext indicates an expected call of DeleteSimulationApplicationWithContext
func (mr *MockRoboMakerAPIMockRecorder) DeleteSimulationApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSimulationApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteSimulationApplicationWithContext), varargs...)
}

// DeregisterRobot mocks base method
func (m *MockRoboMakerAPI) DeregisterRobot(arg0 *robomaker.DeregisterRobotInput) (*robomaker.DeregisterRobotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterRobot", arg0)
	ret0, _ := ret[0].(*robomaker.DeregisterRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterRobot indicates an expected call of DeregisterRobot
func (mr *MockRoboMakerAPIMockRecorder) DeregisterRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterRobot", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeregisterRobot), arg0)
}

// DeregisterRobotRequest mocks base method
func (m *MockRoboMakerAPI) DeregisterRobotRequest(arg0 *robomaker.DeregisterRobotInput) (*request.Request, *robomaker.DeregisterRobotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterRobotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeregisterRobotOutput)
	return ret0, ret1
}

// DeregisterRobotRequest indicates an expected call of DeregisterRobotRequest
func (mr *MockRoboMakerAPIMockRecorder) DeregisterRobotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterRobotRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeregisterRobotRequest), arg0)
}

// DeregisterRobotWithContext mocks base method
func (m *MockRoboMakerAPI) DeregisterRobotWithContext(arg0 context.Context, arg1 *robomaker.DeregisterRobotInput, arg2 ...request.Option) (*robomaker.DeregisterRobotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterRobotWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeregisterRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterRobotWithContext indicates an expected call of DeregisterRobotWithContext
func (mr *MockRoboMakerAPIMockRecorder) DeregisterRobotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterRobotWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeregisterRobotWithContext), varargs...)
}

// DescribeDeploymentJob mocks base method
func (m *MockRoboMakerAPI) DescribeDeploymentJob(arg0 *robomaker.DescribeDeploymentJobInput) (*robomaker.DescribeDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeploymentJob", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeploymentJob indicates an expected call of DescribeDeploymentJob
func (mr *MockRoboMakerAPIMockRecorder) DescribeDeploymentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeploymentJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeDeploymentJob), arg0)
}

// DescribeDeploymentJobRequest mocks base method
func (m *MockRoboMakerAPI) DescribeDeploymentJobRequest(arg0 *robomaker.DescribeDeploymentJobInput) (*request.Request, *robomaker.DescribeDeploymentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeploymentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeDeploymentJobOutput)
	return ret0, ret1
}

// DescribeDeploymentJobRequest indicates an expected call of DescribeDeploymentJobRequest
func (mr *MockRoboMakerAPIMockRecorder) DescribeDeploymentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeploymentJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeDeploymentJobRequest), arg0)
}

// DescribeDeploymentJobWithContext mocks base method
func (m *MockRoboMakerAPI) DescribeDeploymentJobWithContext(arg0 context.Context, arg1 *robomaker.DescribeDeploymentJobInput, arg2 ...request.Option) (*robomaker.DescribeDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeploymentJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeploymentJobWithContext indicates an expected call of DescribeDeploymentJobWithContext
func (mr *MockRoboMakerAPIMockRecorder) DescribeDeploymentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeploymentJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeDeploymentJobWithContext), varargs...)
}

// DescribeFleet mocks base method
func (m *MockRoboMakerAPI) DescribeFleet(arg0 *robomaker.DescribeFleetInput) (*robomaker.DescribeFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFleet", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleet indicates an expected call of DescribeFleet
func (mr *MockRoboMakerAPIMockRecorder) DescribeFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleet", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeFleet), arg0)
}

// DescribeFleetRequest mocks base method
func (m *MockRoboMakerAPI) DescribeFleetRequest(arg0 *robomaker.DescribeFleetInput) (*request.Request, *robomaker.DescribeFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeFleetOutput)
	return ret0, ret1
}

// DescribeFleetRequest indicates an expected call of DescribeFleetRequest
func (mr *MockRoboMakerAPIMockRecorder) DescribeFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeFleetRequest), arg0)
}

// DescribeFleetWithContext mocks base method
func (m *MockRoboMakerAPI) DescribeFleetWithContext(arg0 context.Context, arg1 *robomaker.DescribeFleetInput, arg2 ...request.Option) (*robomaker.DescribeFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetWithContext indicates an expected call of DescribeFleetWithContext
func (mr *MockRoboMakerAPIMockRecorder) DescribeFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeFleetWithContext), varargs...)
}

// DescribeRobot mocks base method
func (m *MockRoboMakerAPI) DescribeRobot(arg0 *robomaker.DescribeRobotInput) (*robomaker.DescribeRobotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRobot", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRobot indicates an expected call of DescribeRobot
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobot", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobot), arg0)
}

// DescribeRobotApplication mocks base method
func (m *MockRoboMakerAPI) DescribeRobotApplication(arg0 *robomaker.DescribeRobotApplicationInput) (*robomaker.DescribeRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRobotApplication", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRobotApplication indicates an expected call of DescribeRobotApplication
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobotApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobotApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobotApplication), arg0)
}

// DescribeRobotApplicationRequest mocks base method
func (m *MockRoboMakerAPI) DescribeRobotApplicationRequest(arg0 *robomaker.DescribeRobotApplicationInput) (*request.Request, *robomaker.DescribeRobotApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRobotApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeRobotApplicationOutput)
	return ret0, ret1
}

// DescribeRobotApplicationRequest indicates an expected call of DescribeRobotApplicationRequest
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobotApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobotApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobotApplicationRequest), arg0)
}

// DescribeRobotApplicationWithContext mocks base method
func (m *MockRoboMakerAPI) DescribeRobotApplicationWithContext(arg0 context.Context, arg1 *robomaker.DescribeRobotApplicationInput, arg2 ...request.Option) (*robomaker.DescribeRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRobotApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRobotApplicationWithContext indicates an expected call of DescribeRobotApplicationWithContext
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobotApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobotApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobotApplicationWithContext), varargs...)
}

// DescribeRobotRequest mocks base method
func (m *MockRoboMakerAPI) DescribeRobotRequest(arg0 *robomaker.DescribeRobotInput) (*request.Request, *robomaker.DescribeRobotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRobotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeRobotOutput)
	return ret0, ret1
}

// DescribeRobotRequest indicates an expected call of DescribeRobotRequest
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobotRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobotRequest), arg0)
}

// DescribeRobotWithContext mocks base method
func (m *MockRoboMakerAPI) DescribeRobotWithContext(arg0 context.Context, arg1 *robomaker.DescribeRobotInput, arg2 ...request.Option) (*robomaker.DescribeRobotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRobotWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRobotWithContext indicates an expected call of DescribeRobotWithContext
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobotWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobotWithContext), varargs...)
}

// DescribeSimulationApplication mocks base method
func (m *MockRoboMakerAPI) DescribeSimulationApplication(arg0 *robomaker.DescribeSimulationApplicationInput) (*robomaker.DescribeSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationApplication", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationApplication indicates an expected call of DescribeSimulationApplication
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationApplication), arg0)
}

// DescribeSimulationApplicationRequest mocks base method
func (m *MockRoboMakerAPI) DescribeSimulationApplicationRequest(arg0 *robomaker.DescribeSimulationApplicationInput) (*request.Request, *robomaker.DescribeSimulationApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeSimulationApplicationOutput)
	return ret0, ret1
}

// DescribeSimulationApplicationRequest indicates an expected call of DescribeSimulationApplicationRequest
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationApplicationRequest), arg0)
}

// DescribeSimulationApplicationWithContext mocks base method
func (m *MockRoboMakerAPI) DescribeSimulationApplicationWithContext(arg0 context.Context, arg1 *robomaker.DescribeSimulationApplicationInput, arg2 ...request.Option) (*robomaker.DescribeSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSimulationApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationApplicationWithContext indicates an expected call of DescribeSimulationApplicationWithContext
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationApplicationWithContext), varargs...)
}

// DescribeSimulationJob mocks base method
func (m *MockRoboMakerAPI) DescribeSimulationJob(arg0 *robomaker.DescribeSimulationJobInput) (*robomaker.DescribeSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationJob", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationJob indicates an expected call of DescribeSimulationJob
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationJob), arg0)
}

// DescribeSimulationJobRequest mocks base method
func (m *MockRoboMakerAPI) DescribeSimulationJobRequest(arg0 *robomaker.DescribeSimulationJobInput) (*request.Request, *robomaker.DescribeSimulationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeSimulationJobOutput)
	return ret0, ret1
}

// DescribeSimulationJobRequest indicates an expected call of DescribeSimulationJobRequest
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationJobRequest), arg0)
}

// DescribeSimulationJobWithContext mocks base method
func (m *MockRoboMakerAPI) DescribeSimulationJobWithContext(arg0 context.Context, arg1 *robomaker.DescribeSimulationJobInput, arg2 ...request.Option) (*robomaker.DescribeSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSimulationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationJobWithContext indicates an expected call of DescribeSimulationJobWithContext
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationJobWithContext), varargs...)
}

// ListDeploymentJobs mocks base method
func (m *MockRoboMakerAPI) ListDeploymentJobs(arg0 *robomaker.ListDeploymentJobsInput) (*robomaker.ListDeploymentJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentJobs", arg0)
	ret0, _ := ret[0].(*robomaker.ListDeploymentJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentJobs indicates an expected call of ListDeploymentJobs
func (mr *MockRoboMakerAPIMockRecorder) ListDeploymentJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentJobs", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListDeploymentJobs), arg0)
}

// ListDeploymentJobsRequest mocks base method
func (m *MockRoboMakerAPI) ListDeploymentJobsRequest(arg0 *robomaker.ListDeploymentJobsInput) (*request.Request, *robomaker.ListDeploymentJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListDeploymentJobsOutput)
	return ret0, ret1
}

// ListDeploymentJobsRequest indicates an expected call of ListDeploymentJobsRequest
func (mr *MockRoboMakerAPIMockRecorder) ListDeploymentJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentJobsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListDeploymentJobsRequest), arg0)
}

// ListDeploymentJobsWithContext mocks base method
func (m *MockRoboMakerAPI) ListDeploymentJobsWithContext(arg0 context.Context, arg1 *robomaker.ListDeploymentJobsInput, arg2 ...request.Option) (*robomaker.ListDeploymentJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentJobsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListDeploymentJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentJobsWithContext indicates an expected call of ListDeploymentJobsWithContext
func (mr *MockRoboMakerAPIMockRecorder) ListDeploymentJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentJobsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListDeploymentJobsWithContext), varargs...)
}

// ListFleets mocks base method
func (m *MockRoboMakerAPI) ListFleets(arg0 *robomaker.ListFleetsInput) (*robomaker.ListFleetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleets", arg0)
	ret0, _ := ret[0].(*robomaker.ListFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleets indicates an expected call of ListFleets
func (mr *MockRoboMakerAPIMockRecorder) ListFleets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleets", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListFleets), arg0)
}

// ListFleetsRequest mocks base method
func (m *MockRoboMakerAPI) ListFleetsRequest(arg0 *robomaker.ListFleetsInput) (*request.Request, *robomaker.ListFleetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListFleetsOutput)
	return ret0, ret1
}

// ListFleetsRequest indicates an expected call of ListFleetsRequest
func (mr *MockRoboMakerAPIMockRecorder) ListFleetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListFleetsRequest), arg0)
}

// ListFleetsWithContext mocks base method
func (m *MockRoboMakerAPI) ListFleetsWithContext(arg0 context.Context, arg1 *robomaker.ListFleetsInput, arg2 ...request.Option) (*robomaker.ListFleetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleetsWithContext indicates an expected call of ListFleetsWithContext
func (mr *MockRoboMakerAPIMockRecorder) ListFleetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListFleetsWithContext), varargs...)
}

// ListRobotApplications mocks base method
func (m *MockRoboMakerAPI) ListRobotApplications(arg0 *robomaker.ListRobotApplicationsInput) (*robomaker.ListRobotApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobotApplications", arg0)
	ret0, _ := ret[0].(*robomaker.ListRobotApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRobotApplications indicates an expected call of ListRobotApplications
func (mr *MockRoboMakerAPIMockRecorder) ListRobotApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotApplications", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotApplications), arg0)
}

// ListRobotApplicationsRequest mocks base method
func (m *MockRoboMakerAPI) ListRobotApplicationsRequest(arg0 *robomaker.ListRobotApplicationsInput) (*request.Request, *robomaker.ListRobotApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobotApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListRobotApplicationsOutput)
	return ret0, ret1
}

// ListRobotApplicationsRequest indicates an expected call of ListRobotApplicationsRequest
func (mr *MockRoboMakerAPIMockRecorder) ListRobotApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotApplicationsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotApplicationsRequest), arg0)
}

// ListRobotApplicationsWithContext mocks base method
func (m *MockRoboMakerAPI) ListRobotApplicationsWithContext(arg0 context.Context, arg1 *robomaker.ListRobotApplicationsInput, arg2 ...request.Option) (*robomaker.ListRobotApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRobotApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListRobotApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRobotApplicationsWithContext indicates an expected call of ListRobotApplicationsWithContext
func (mr *MockRoboMakerAPIMockRecorder) ListRobotApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotApplicationsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotApplicationsWithContext), varargs...)
}

// ListRobots mocks base method
func (m *MockRoboMakerAPI) ListRobots(arg0 *robomaker.ListRobotsInput) (*robomaker.ListRobotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobots", arg0)
	ret0, _ := ret[0].(*robomaker.ListRobotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRobots indicates an expected call of ListRobots
func (mr *MockRoboMakerAPIMockRecorder) ListRobots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobots", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobots), arg0)
}

// ListRobotsRequest mocks base method
func (m *MockRoboMakerAPI) ListRobotsRequest(arg0 *robomaker.ListRobotsInput) (*request.Request, *robomaker.ListRobotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListRobotsOutput)
	return ret0, ret1
}

// ListRobotsRequest indicates an expected call of ListRobotsRequest
func (mr *MockRoboMakerAPIMockRecorder) ListRobotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotsRequest), arg0)
}

// ListRobotsWithContext mocks base method
func (m *MockRoboMakerAPI) ListRobotsWithContext(arg0 context.Context, arg1 *robomaker.ListRobotsInput, arg2 ...request.Option) (*robomaker.ListRobotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRobotsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListRobotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRobotsWithContext indicates an expected call of ListRobotsWithContext
func (mr *MockRoboMakerAPIMockRecorder) ListRobotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotsWithContext), varargs...)
}

// ListSimulationApplications mocks base method
func (m *MockRoboMakerAPI) ListSimulationApplications(arg0 *robomaker.ListSimulationApplicationsInput) (*robomaker.ListSimulationApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationApplications", arg0)
	ret0, _ := ret[0].(*robomaker.ListSimulationApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationApplications indicates an expected call of ListSimulationApplications
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationApplications", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationApplications), arg0)
}

// ListSimulationApplicationsRequest mocks base method
func (m *MockRoboMakerAPI) ListSimulationApplicationsRequest(arg0 *robomaker.ListSimulationApplicationsInput) (*request.Request, *robomaker.ListSimulationApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListSimulationApplicationsOutput)
	return ret0, ret1
}

// ListSimulationApplicationsRequest indicates an expected call of ListSimulationApplicationsRequest
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationApplicationsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationApplicationsRequest), arg0)
}

// ListSimulationApplicationsWithContext mocks base method
func (m *MockRoboMakerAPI) ListSimulationApplicationsWithContext(arg0 context.Context, arg1 *robomaker.ListSimulationApplicationsInput, arg2 ...request.Option) (*robomaker.ListSimulationApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSimulationApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListSimulationApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationApplicationsWithContext indicates an expected call of ListSimulationApplicationsWithContext
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationApplicationsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationApplicationsWithContext), varargs...)
}

// ListSimulationJobs mocks base method
func (m *MockRoboMakerAPI) ListSimulationJobs(arg0 *robomaker.ListSimulationJobsInput) (*robomaker.ListSimulationJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationJobs", arg0)
	ret0, _ := ret[0].(*robomaker.ListSimulationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationJobs indicates an expected call of ListSimulationJobs
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobs", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobs), arg0)
}

// ListSimulationJobsRequest mocks base method
func (m *MockRoboMakerAPI) ListSimulationJobsRequest(arg0 *robomaker.ListSimulationJobsInput) (*request.Request, *robomaker.ListSimulationJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListSimulationJobsOutput)
	return ret0, ret1
}

// ListSimulationJobsRequest indicates an expected call of ListSimulationJobsRequest
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobsRequest), arg0)
}

// ListSimulationJobsWithContext mocks base method
func (m *MockRoboMakerAPI) ListSimulationJobsWithContext(arg0 context.Context, arg1 *robomaker.ListSimulationJobsInput, arg2 ...request.Option) (*robomaker.ListSimulationJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSimulationJobsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListSimulationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationJobsWithContext indicates an expected call of ListSimulationJobsWithContext
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobsWithContext), varargs...)
}

// RegisterRobot mocks base method
func (m *MockRoboMakerAPI) RegisterRobot(arg0 *robomaker.RegisterRobotInput) (*robomaker.RegisterRobotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRobot", arg0)
	ret0, _ := ret[0].(*robomaker.RegisterRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRobot indicates an expected call of RegisterRobot
func (mr *MockRoboMakerAPIMockRecorder) RegisterRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRobot", reflect.TypeOf((*MockRoboMakerAPI)(nil).RegisterRobot), arg0)
}

// RegisterRobotRequest mocks base method
func (m *MockRoboMakerAPI) RegisterRobotRequest(arg0 *robomaker.RegisterRobotInput) (*request.Request, *robomaker.RegisterRobotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRobotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.RegisterRobotOutput)
	return ret0, ret1
}

// RegisterRobotRequest indicates an expected call of RegisterRobotRequest
func (mr *MockRoboMakerAPIMockRecorder) RegisterRobotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRobotRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).RegisterRobotRequest), arg0)
}

// RegisterRobotWithContext mocks base method
func (m *MockRoboMakerAPI) RegisterRobotWithContext(arg0 context.Context, arg1 *robomaker.RegisterRobotInput, arg2 ...request.Option) (*robomaker.RegisterRobotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterRobotWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.RegisterRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRobotWithContext indicates an expected call of RegisterRobotWithContext
func (mr *MockRoboMakerAPIMockRecorder) RegisterRobotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRobotWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).RegisterRobotWithContext), varargs...)
}

// RestartSimulationJob mocks base method
func (m *MockRoboMakerAPI) RestartSimulationJob(arg0 *robomaker.RestartSimulationJobInput) (*robomaker.RestartSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartSimulationJob", arg0)
	ret0, _ := ret[0].(*robomaker.RestartSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartSimulationJob indicates an expected call of RestartSimulationJob
func (mr *MockRoboMakerAPIMockRecorder) RestartSimulationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartSimulationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).RestartSimulationJob), arg0)
}

// RestartSimulationJobRequest mocks base method
func (m *MockRoboMakerAPI) RestartSimulationJobRequest(arg0 *robomaker.RestartSimulationJobInput) (*request.Request, *robomaker.RestartSimulationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartSimulationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.RestartSimulationJobOutput)
	return ret0, ret1
}

// RestartSimulationJobRequest indicates an expected call of RestartSimulationJobRequest
func (mr *MockRoboMakerAPIMockRecorder) RestartSimulationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartSimulationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).RestartSimulationJobRequest), arg0)
}

// RestartSimulationJobWithContext mocks base method
func (m *MockRoboMakerAPI) RestartSimulationJobWithContext(arg0 context.Context, arg1 *robomaker.RestartSimulationJobInput, arg2 ...request.Option) (*robomaker.RestartSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartSimulationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.RestartSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartSimulationJobWithContext indicates an expected call of RestartSimulationJobWithContext
func (mr *MockRoboMakerAPIMockRecorder) RestartSimulationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartSimulationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).RestartSimulationJobWithContext), varargs...)
}

// SyncDeploymentJob mocks base method
func (m *MockRoboMakerAPI) SyncDeploymentJob(arg0 *robomaker.SyncDeploymentJobInput) (*robomaker.SyncDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDeploymentJob", arg0)
	ret0, _ := ret[0].(*robomaker.SyncDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncDeploymentJob indicates an expected call of SyncDeploymentJob
func (mr *MockRoboMakerAPIMockRecorder) SyncDeploymentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDeploymentJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).SyncDeploymentJob), arg0)
}

// SyncDeploymentJobRequest mocks base method
func (m *MockRoboMakerAPI) SyncDeploymentJobRequest(arg0 *robomaker.SyncDeploymentJobInput) (*request.Request, *robomaker.SyncDeploymentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDeploymentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.SyncDeploymentJobOutput)
	return ret0, ret1
}

// SyncDeploymentJobRequest indicates an expected call of SyncDeploymentJobRequest
func (mr *MockRoboMakerAPIMockRecorder) SyncDeploymentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDeploymentJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).SyncDeploymentJobRequest), arg0)
}

// SyncDeploymentJobWithContext mocks base method
func (m *MockRoboMakerAPI) SyncDeploymentJobWithContext(arg0 context.Context, arg1 *robomaker.SyncDeploymentJobInput, arg2 ...request.Option) (*robomaker.SyncDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncDeploymentJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.SyncDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncDeploymentJobWithContext indicates an expected call of SyncDeploymentJobWithContext
func (mr *MockRoboMakerAPIMockRecorder) SyncDeploymentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDeploymentJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).SyncDeploymentJobWithContext), varargs...)
}

// UpdateRobotApplication mocks base method
func (m *MockRoboMakerAPI) UpdateRobotApplication(arg0 *robomaker.UpdateRobotApplicationInput) (*robomaker.UpdateRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRobotApplication", arg0)
	ret0, _ := ret[0].(*robomaker.UpdateRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRobotApplication indicates an expected call of UpdateRobotApplication
func (mr *MockRoboMakerAPIMockRecorder) UpdateRobotApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRobotApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateRobotApplication), arg0)
}

// UpdateRobotApplicationRequest mocks base method
func (m *MockRoboMakerAPI) UpdateRobotApplicationRequest(arg0 *robomaker.UpdateRobotApplicationInput) (*request.Request, *robomaker.UpdateRobotApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRobotApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.UpdateRobotApplicationOutput)
	return ret0, ret1
}

// UpdateRobotApplicationRequest indicates an expected call of UpdateRobotApplicationRequest
func (mr *MockRoboMakerAPIMockRecorder) UpdateRobotApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRobotApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateRobotApplicationRequest), arg0)
}

// UpdateRobotApplicationWithContext mocks base method
func (m *MockRoboMakerAPI) UpdateRobotApplicationWithContext(arg0 context.Context, arg1 *robomaker.UpdateRobotApplicationInput, arg2 ...request.Option) (*robomaker.UpdateRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRobotApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.UpdateRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRobotApplicationWithContext indicates an expected call of UpdateRobotApplicationWithContext
func (mr *MockRoboMakerAPIMockRecorder) UpdateRobotApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRobotApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateRobotApplicationWithContext), varargs...)
}

// UpdateSimulationApplication mocks base method
func (m *MockRoboMakerAPI) UpdateSimulationApplication(arg0 *robomaker.UpdateSimulationApplicationInput) (*robomaker.UpdateSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSimulationApplication", arg0)
	ret0, _ := ret[0].(*robomaker.UpdateSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSimulationApplication indicates an expected call of UpdateSimulationApplication
func (mr *MockRoboMakerAPIMockRecorder) UpdateSimulationApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSimulationApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateSimulationApplication), arg0)
}

// UpdateSimulationApplicationRequest mocks base method
func (m *MockRoboMakerAPI) UpdateSimulationApplicationRequest(arg0 *robomaker.UpdateSimulationApplicationInput) (*request.Request, *robomaker.UpdateSimulationApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSimulationApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.UpdateSimulationApplicationOutput)
	return ret0, ret1
}

// UpdateSimulationApplicationRequest indicates an expected call of UpdateSimulationApplicationRequest
func (mr *MockRoboMakerAPIMockRecorder) UpdateSimulationApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSimulationApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateSimulationApplicationRequest), arg0)
}

// UpdateSimulationApplicationWithContext mocks base method
func (m *MockRoboMakerAPI) UpdateSimulationApplicationWithContext(arg0 context.Context, arg1 *robomaker.UpdateSimulationApplicationInput, arg2 ...request.Option) (*robomaker.UpdateSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSimulationApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.UpdateSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSimulationApplicationWithContext indicates an expected call of UpdateSimulationApplicationWithContext
func (mr *MockRoboMakerAPIMockRecorder) UpdateSimulationApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSimulationApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateSimulationApplicationWithContext), varargs...)
}
