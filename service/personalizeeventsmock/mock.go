// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/personalizeevents/personalizeeventsiface (interfaces: PersonalizeEventsAPI)

// Package personalizeeventsmock is a generated GoMock package.
package personalizeeventsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	personalizeevents "github.com/aws/aws-sdk-go/service/personalizeevents"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPersonalizeEventsAPI is a mock of PersonalizeEventsAPI interface
type MockPersonalizeEventsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPersonalizeEventsAPIMockRecorder
}

// MockPersonalizeEventsAPIMockRecorder is the mock recorder for MockPersonalizeEventsAPI
type MockPersonalizeEventsAPIMockRecorder struct {
	mock *MockPersonalizeEventsAPI
}

// NewMockPersonalizeEventsAPI creates a new mock instance
func NewMockPersonalizeEventsAPI(ctrl *gomock.Controller) *MockPersonalizeEventsAPI {
	mock := &MockPersonalizeEventsAPI{ctrl: ctrl}
	mock.recorder = &MockPersonalizeEventsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersonalizeEventsAPI) EXPECT() *MockPersonalizeEventsAPIMockRecorder {
	return m.recorder
}

// PutActionInteractions mocks base method
func (m *MockPersonalizeEventsAPI) PutActionInteractions(arg0 *personalizeevents.PutActionInteractionsInput) (*personalizeevents.PutActionInteractionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutActionInteractions", arg0)
	ret0, _ := ret[0].(*personalizeevents.PutActionInteractionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutActionInteractions indicates an expected call of PutActionInteractions
func (mr *MockPersonalizeEventsAPIMockRecorder) PutActionInteractions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutActionInteractions", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutActionInteractions), arg0)
}

// PutActionInteractionsRequest mocks base method
func (m *MockPersonalizeEventsAPI) PutActionInteractionsRequest(arg0 *personalizeevents.PutActionInteractionsInput) (*request.Request, *personalizeevents.PutActionInteractionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutActionInteractionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalizeevents.PutActionInteractionsOutput)
	return ret0, ret1
}

// PutActionInteractionsRequest indicates an expected call of PutActionInteractionsRequest
func (mr *MockPersonalizeEventsAPIMockRecorder) PutActionInteractionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutActionInteractionsRequest", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutActionInteractionsRequest), arg0)
}

// PutActionInteractionsWithContext mocks base method
func (m *MockPersonalizeEventsAPI) PutActionInteractionsWithContext(arg0 context.Context, arg1 *personalizeevents.PutActionInteractionsInput, arg2 ...request.Option) (*personalizeevents.PutActionInteractionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutActionInteractionsWithContext", varargs...)
	ret0, _ := ret[0].(*personalizeevents.PutActionInteractionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutActionInteractionsWithContext indicates an expected call of PutActionInteractionsWithContext
func (mr *MockPersonalizeEventsAPIMockRecorder) PutActionInteractionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutActionInteractionsWithContext", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutActionInteractionsWithContext), varargs...)
}

// PutActions mocks base method
func (m *MockPersonalizeEventsAPI) PutActions(arg0 *personalizeevents.PutActionsInput) (*personalizeevents.PutActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutActions", arg0)
	ret0, _ := ret[0].(*personalizeevents.PutActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutActions indicates an expected call of PutActions
func (mr *MockPersonalizeEventsAPIMockRecorder) PutActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutActions", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutActions), arg0)
}

// PutActionsRequest mocks base method
func (m *MockPersonalizeEventsAPI) PutActionsRequest(arg0 *personalizeevents.PutActionsInput) (*request.Request, *personalizeevents.PutActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalizeevents.PutActionsOutput)
	return ret0, ret1
}

// PutActionsRequest indicates an expected call of PutActionsRequest
func (mr *MockPersonalizeEventsAPIMockRecorder) PutActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutActionsRequest", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutActionsRequest), arg0)
}

// PutActionsWithContext mocks base method
func (m *MockPersonalizeEventsAPI) PutActionsWithContext(arg0 context.Context, arg1 *personalizeevents.PutActionsInput, arg2 ...request.Option) (*personalizeevents.PutActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutActionsWithContext", varargs...)
	ret0, _ := ret[0].(*personalizeevents.PutActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutActionsWithContext indicates an expected call of PutActionsWithContext
func (mr *MockPersonalizeEventsAPIMockRecorder) PutActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutActionsWithContext", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutActionsWithContext), varargs...)
}

// PutEvents mocks base method
func (m *MockPersonalizeEventsAPI) PutEvents(arg0 *personalizeevents.PutEventsInput) (*personalizeevents.PutEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEvents", arg0)
	ret0, _ := ret[0].(*personalizeevents.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvents indicates an expected call of PutEvents
func (mr *MockPersonalizeEventsAPIMockRecorder) PutEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvents", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutEvents), arg0)
}

// PutEventsRequest mocks base method
func (m *MockPersonalizeEventsAPI) PutEventsRequest(arg0 *personalizeevents.PutEventsInput) (*request.Request, *personalizeevents.PutEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalizeevents.PutEventsOutput)
	return ret0, ret1
}

// PutEventsRequest indicates an expected call of PutEventsRequest
func (mr *MockPersonalizeEventsAPIMockRecorder) PutEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEventsRequest", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutEventsRequest), arg0)
}

// PutEventsWithContext mocks base method
func (m *MockPersonalizeEventsAPI) PutEventsWithContext(arg0 context.Context, arg1 *personalizeevents.PutEventsInput, arg2 ...request.Option) (*personalizeevents.PutEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEventsWithContext", varargs...)
	ret0, _ := ret[0].(*personalizeevents.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEventsWithContext indicates an expected call of PutEventsWithContext
func (mr *MockPersonalizeEventsAPIMockRecorder) PutEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEventsWithContext", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutEventsWithContext), varargs...)
}

// PutItems mocks base method
func (m *MockPersonalizeEventsAPI) PutItems(arg0 *personalizeevents.PutItemsInput) (*personalizeevents.PutItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItems", arg0)
	ret0, _ := ret[0].(*personalizeevents.PutItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItems indicates an expected call of PutItems
func (mr *MockPersonalizeEventsAPIMockRecorder) PutItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItems", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutItems), arg0)
}

// PutItemsRequest mocks base method
func (m *MockPersonalizeEventsAPI) PutItemsRequest(arg0 *personalizeevents.PutItemsInput) (*request.Request, *personalizeevents.PutItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalizeevents.PutItemsOutput)
	return ret0, ret1
}

// PutItemsRequest indicates an expected call of PutItemsRequest
func (mr *MockPersonalizeEventsAPIMockRecorder) PutItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItemsRequest", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutItemsRequest), arg0)
}

// PutItemsWithContext mocks base method
func (m *MockPersonalizeEventsAPI) PutItemsWithContext(arg0 context.Context, arg1 *personalizeevents.PutItemsInput, arg2 ...request.Option) (*personalizeevents.PutItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItemsWithContext", varargs...)
	ret0, _ := ret[0].(*personalizeevents.PutItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItemsWithContext indicates an expected call of PutItemsWithContext
func (mr *MockPersonalizeEventsAPIMockRecorder) PutItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItemsWithContext", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutItemsWithContext), varargs...)
}

// PutUsers mocks base method
func (m *MockPersonalizeEventsAPI) PutUsers(arg0 *personalizeevents.PutUsersInput) (*personalizeevents.PutUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutUsers", arg0)
	ret0, _ := ret[0].(*personalizeevents.PutUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutUsers indicates an expected call of PutUsers
func (mr *MockPersonalizeEventsAPIMockRecorder) PutUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUsers", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutUsers), arg0)
}

// PutUsersRequest mocks base method
func (m *MockPersonalizeEventsAPI) PutUsersRequest(arg0 *personalizeevents.PutUsersInput) (*request.Request, *personalizeevents.PutUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalizeevents.PutUsersOutput)
	return ret0, ret1
}

// PutUsersRequest indicates an expected call of PutUsersRequest
func (mr *MockPersonalizeEventsAPIMockRecorder) PutUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUsersRequest", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutUsersRequest), arg0)
}

// PutUsersWithContext mocks base method
func (m *MockPersonalizeEventsAPI) PutUsersWithContext(arg0 context.Context, arg1 *personalizeevents.PutUsersInput, arg2 ...request.Option) (*personalizeevents.PutUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutUsersWithContext", varargs...)
	ret0, _ := ret[0].(*personalizeevents.PutUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutUsersWithContext indicates an expected call of PutUsersWithContext
func (mr *MockPersonalizeEventsAPIMockRecorder) PutUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUsersWithContext", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutUsersWithContext), varargs...)
}
