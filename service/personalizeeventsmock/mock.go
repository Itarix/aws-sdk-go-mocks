// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/personalizeevents/personalizeeventsiface (interfaces: PersonalizeEventsAPI)

// Package personalizeeventsmock is a generated GoMock package.
package personalizeeventsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	personalizeevents "github.com/aws/aws-sdk-go/service/personalizeevents"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPersonalizeEventsAPI is a mock of PersonalizeEventsAPI interface
type MockPersonalizeEventsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPersonalizeEventsAPIMockRecorder
}

// MockPersonalizeEventsAPIMockRecorder is the mock recorder for MockPersonalizeEventsAPI
type MockPersonalizeEventsAPIMockRecorder struct {
	mock *MockPersonalizeEventsAPI
}

// NewMockPersonalizeEventsAPI creates a new mock instance
func NewMockPersonalizeEventsAPI(ctrl *gomock.Controller) *MockPersonalizeEventsAPI {
	mock := &MockPersonalizeEventsAPI{ctrl: ctrl}
	mock.recorder = &MockPersonalizeEventsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersonalizeEventsAPI) EXPECT() *MockPersonalizeEventsAPIMockRecorder {
	return m.recorder
}

// PutEvents mocks base method
func (m *MockPersonalizeEventsAPI) PutEvents(arg0 *personalizeevents.PutEventsInput) (*personalizeevents.PutEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEvents", arg0)
	ret0, _ := ret[0].(*personalizeevents.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvents indicates an expected call of PutEvents
func (mr *MockPersonalizeEventsAPIMockRecorder) PutEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvents", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutEvents), arg0)
}

// PutEventsRequest mocks base method
func (m *MockPersonalizeEventsAPI) PutEventsRequest(arg0 *personalizeevents.PutEventsInput) (*request.Request, *personalizeevents.PutEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalizeevents.PutEventsOutput)
	return ret0, ret1
}

// PutEventsRequest indicates an expected call of PutEventsRequest
func (mr *MockPersonalizeEventsAPIMockRecorder) PutEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEventsRequest", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutEventsRequest), arg0)
}

// PutEventsWithContext mocks base method
func (m *MockPersonalizeEventsAPI) PutEventsWithContext(arg0 context.Context, arg1 *personalizeevents.PutEventsInput, arg2 ...request.Option) (*personalizeevents.PutEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEventsWithContext", varargs...)
	ret0, _ := ret[0].(*personalizeevents.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEventsWithContext indicates an expected call of PutEventsWithContext
func (mr *MockPersonalizeEventsAPIMockRecorder) PutEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEventsWithContext", reflect.TypeOf((*MockPersonalizeEventsAPI)(nil).PutEventsWithContext), varargs...)
}
