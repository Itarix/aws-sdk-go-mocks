// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/opensearchserverless/opensearchserverlessiface (interfaces: OpenSearchServerlessAPI)

// Package opensearchserverlessmock is a generated GoMock package.
package opensearchserverlessmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	opensearchserverless "github.com/aws/aws-sdk-go/service/opensearchserverless"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOpenSearchServerlessAPI is a mock of OpenSearchServerlessAPI interface
type MockOpenSearchServerlessAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOpenSearchServerlessAPIMockRecorder
}

// MockOpenSearchServerlessAPIMockRecorder is the mock recorder for MockOpenSearchServerlessAPI
type MockOpenSearchServerlessAPIMockRecorder struct {
	mock *MockOpenSearchServerlessAPI
}

// NewMockOpenSearchServerlessAPI creates a new mock instance
func NewMockOpenSearchServerlessAPI(ctrl *gomock.Controller) *MockOpenSearchServerlessAPI {
	mock := &MockOpenSearchServerlessAPI{ctrl: ctrl}
	mock.recorder = &MockOpenSearchServerlessAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenSearchServerlessAPI) EXPECT() *MockOpenSearchServerlessAPIMockRecorder {
	return m.recorder
}

// BatchGetCollection mocks base method
func (m *MockOpenSearchServerlessAPI) BatchGetCollection(arg0 *opensearchserverless.BatchGetCollectionInput) (*opensearchserverless.BatchGetCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetCollection", arg0)
	ret0, _ := ret[0].(*opensearchserverless.BatchGetCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetCollection indicates an expected call of BatchGetCollection
func (mr *MockOpenSearchServerlessAPIMockRecorder) BatchGetCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCollection", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).BatchGetCollection), arg0)
}

// BatchGetCollectionRequest mocks base method
func (m *MockOpenSearchServerlessAPI) BatchGetCollectionRequest(arg0 *opensearchserverless.BatchGetCollectionInput) (*request.Request, *opensearchserverless.BatchGetCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.BatchGetCollectionOutput)
	return ret0, ret1
}

// BatchGetCollectionRequest indicates an expected call of BatchGetCollectionRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) BatchGetCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCollectionRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).BatchGetCollectionRequest), arg0)
}

// BatchGetCollectionWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) BatchGetCollectionWithContext(arg0 context.Context, arg1 *opensearchserverless.BatchGetCollectionInput, arg2 ...request.Option) (*opensearchserverless.BatchGetCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.BatchGetCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetCollectionWithContext indicates an expected call of BatchGetCollectionWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) BatchGetCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCollectionWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).BatchGetCollectionWithContext), varargs...)
}

// BatchGetVpcEndpoint mocks base method
func (m *MockOpenSearchServerlessAPI) BatchGetVpcEndpoint(arg0 *opensearchserverless.BatchGetVpcEndpointInput) (*opensearchserverless.BatchGetVpcEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetVpcEndpoint", arg0)
	ret0, _ := ret[0].(*opensearchserverless.BatchGetVpcEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVpcEndpoint indicates an expected call of BatchGetVpcEndpoint
func (mr *MockOpenSearchServerlessAPIMockRecorder) BatchGetVpcEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVpcEndpoint", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).BatchGetVpcEndpoint), arg0)
}

// BatchGetVpcEndpointRequest mocks base method
func (m *MockOpenSearchServerlessAPI) BatchGetVpcEndpointRequest(arg0 *opensearchserverless.BatchGetVpcEndpointInput) (*request.Request, *opensearchserverless.BatchGetVpcEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetVpcEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.BatchGetVpcEndpointOutput)
	return ret0, ret1
}

// BatchGetVpcEndpointRequest indicates an expected call of BatchGetVpcEndpointRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) BatchGetVpcEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVpcEndpointRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).BatchGetVpcEndpointRequest), arg0)
}

// BatchGetVpcEndpointWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) BatchGetVpcEndpointWithContext(arg0 context.Context, arg1 *opensearchserverless.BatchGetVpcEndpointInput, arg2 ...request.Option) (*opensearchserverless.BatchGetVpcEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetVpcEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.BatchGetVpcEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVpcEndpointWithContext indicates an expected call of BatchGetVpcEndpointWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) BatchGetVpcEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVpcEndpointWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).BatchGetVpcEndpointWithContext), varargs...)
}

// CreateAccessPolicy mocks base method
func (m *MockOpenSearchServerlessAPI) CreateAccessPolicy(arg0 *opensearchserverless.CreateAccessPolicyInput) (*opensearchserverless.CreateAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPolicy", arg0)
	ret0, _ := ret[0].(*opensearchserverless.CreateAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPolicy indicates an expected call of CreateAccessPolicy
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPolicy", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateAccessPolicy), arg0)
}

// CreateAccessPolicyRequest mocks base method
func (m *MockOpenSearchServerlessAPI) CreateAccessPolicyRequest(arg0 *opensearchserverless.CreateAccessPolicyInput) (*request.Request, *opensearchserverless.CreateAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.CreateAccessPolicyOutput)
	return ret0, ret1
}

// CreateAccessPolicyRequest indicates an expected call of CreateAccessPolicyRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPolicyRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateAccessPolicyRequest), arg0)
}

// CreateAccessPolicyWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) CreateAccessPolicyWithContext(arg0 context.Context, arg1 *opensearchserverless.CreateAccessPolicyInput, arg2 ...request.Option) (*opensearchserverless.CreateAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.CreateAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPolicyWithContext indicates an expected call of CreateAccessPolicyWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPolicyWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateAccessPolicyWithContext), varargs...)
}

// CreateCollection mocks base method
func (m *MockOpenSearchServerlessAPI) CreateCollection(arg0 *opensearchserverless.CreateCollectionInput) (*opensearchserverless.CreateCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", arg0)
	ret0, _ := ret[0].(*opensearchserverless.CreateCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateCollection), arg0)
}

// CreateCollectionRequest mocks base method
func (m *MockOpenSearchServerlessAPI) CreateCollectionRequest(arg0 *opensearchserverless.CreateCollectionInput) (*request.Request, *opensearchserverless.CreateCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.CreateCollectionOutput)
	return ret0, ret1
}

// CreateCollectionRequest indicates an expected call of CreateCollectionRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateCollectionRequest), arg0)
}

// CreateCollectionWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) CreateCollectionWithContext(arg0 context.Context, arg1 *opensearchserverless.CreateCollectionInput, arg2 ...request.Option) (*opensearchserverless.CreateCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.CreateCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectionWithContext indicates an expected call of CreateCollectionWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateCollectionWithContext), varargs...)
}

// CreateSecurityConfig mocks base method
func (m *MockOpenSearchServerlessAPI) CreateSecurityConfig(arg0 *opensearchserverless.CreateSecurityConfigInput) (*opensearchserverless.CreateSecurityConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityConfig", arg0)
	ret0, _ := ret[0].(*opensearchserverless.CreateSecurityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityConfig indicates an expected call of CreateSecurityConfig
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateSecurityConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityConfig", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateSecurityConfig), arg0)
}

// CreateSecurityConfigRequest mocks base method
func (m *MockOpenSearchServerlessAPI) CreateSecurityConfigRequest(arg0 *opensearchserverless.CreateSecurityConfigInput) (*request.Request, *opensearchserverless.CreateSecurityConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.CreateSecurityConfigOutput)
	return ret0, ret1
}

// CreateSecurityConfigRequest indicates an expected call of CreateSecurityConfigRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateSecurityConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityConfigRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateSecurityConfigRequest), arg0)
}

// CreateSecurityConfigWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) CreateSecurityConfigWithContext(arg0 context.Context, arg1 *opensearchserverless.CreateSecurityConfigInput, arg2 ...request.Option) (*opensearchserverless.CreateSecurityConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecurityConfigWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.CreateSecurityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityConfigWithContext indicates an expected call of CreateSecurityConfigWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateSecurityConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityConfigWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateSecurityConfigWithContext), varargs...)
}

// CreateSecurityPolicy mocks base method
func (m *MockOpenSearchServerlessAPI) CreateSecurityPolicy(arg0 *opensearchserverless.CreateSecurityPolicyInput) (*opensearchserverless.CreateSecurityPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityPolicy", arg0)
	ret0, _ := ret[0].(*opensearchserverless.CreateSecurityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityPolicy indicates an expected call of CreateSecurityPolicy
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateSecurityPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityPolicy", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateSecurityPolicy), arg0)
}

// CreateSecurityPolicyRequest mocks base method
func (m *MockOpenSearchServerlessAPI) CreateSecurityPolicyRequest(arg0 *opensearchserverless.CreateSecurityPolicyInput) (*request.Request, *opensearchserverless.CreateSecurityPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.CreateSecurityPolicyOutput)
	return ret0, ret1
}

// CreateSecurityPolicyRequest indicates an expected call of CreateSecurityPolicyRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateSecurityPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityPolicyRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateSecurityPolicyRequest), arg0)
}

// CreateSecurityPolicyWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) CreateSecurityPolicyWithContext(arg0 context.Context, arg1 *opensearchserverless.CreateSecurityPolicyInput, arg2 ...request.Option) (*opensearchserverless.CreateSecurityPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecurityPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.CreateSecurityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityPolicyWithContext indicates an expected call of CreateSecurityPolicyWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateSecurityPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityPolicyWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateSecurityPolicyWithContext), varargs...)
}

// CreateVpcEndpoint mocks base method
func (m *MockOpenSearchServerlessAPI) CreateVpcEndpoint(arg0 *opensearchserverless.CreateVpcEndpointInput) (*opensearchserverless.CreateVpcEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpcEndpoint", arg0)
	ret0, _ := ret[0].(*opensearchserverless.CreateVpcEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpcEndpoint indicates an expected call of CreateVpcEndpoint
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateVpcEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcEndpoint", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateVpcEndpoint), arg0)
}

// CreateVpcEndpointRequest mocks base method
func (m *MockOpenSearchServerlessAPI) CreateVpcEndpointRequest(arg0 *opensearchserverless.CreateVpcEndpointInput) (*request.Request, *opensearchserverless.CreateVpcEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpcEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.CreateVpcEndpointOutput)
	return ret0, ret1
}

// CreateVpcEndpointRequest indicates an expected call of CreateVpcEndpointRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateVpcEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcEndpointRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateVpcEndpointRequest), arg0)
}

// CreateVpcEndpointWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) CreateVpcEndpointWithContext(arg0 context.Context, arg1 *opensearchserverless.CreateVpcEndpointInput, arg2 ...request.Option) (*opensearchserverless.CreateVpcEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVpcEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.CreateVpcEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpcEndpointWithContext indicates an expected call of CreateVpcEndpointWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) CreateVpcEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcEndpointWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).CreateVpcEndpointWithContext), varargs...)
}

// DeleteAccessPolicy mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteAccessPolicy(arg0 *opensearchserverless.DeleteAccessPolicyInput) (*opensearchserverless.DeleteAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPolicy", arg0)
	ret0, _ := ret[0].(*opensearchserverless.DeleteAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPolicy indicates an expected call of DeleteAccessPolicy
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPolicy", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteAccessPolicy), arg0)
}

// DeleteAccessPolicyRequest mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteAccessPolicyRequest(arg0 *opensearchserverless.DeleteAccessPolicyInput) (*request.Request, *opensearchserverless.DeleteAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.DeleteAccessPolicyOutput)
	return ret0, ret1
}

// DeleteAccessPolicyRequest indicates an expected call of DeleteAccessPolicyRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPolicyRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteAccessPolicyRequest), arg0)
}

// DeleteAccessPolicyWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteAccessPolicyWithContext(arg0 context.Context, arg1 *opensearchserverless.DeleteAccessPolicyInput, arg2 ...request.Option) (*opensearchserverless.DeleteAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.DeleteAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPolicyWithContext indicates an expected call of DeleteAccessPolicyWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPolicyWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteAccessPolicyWithContext), varargs...)
}

// DeleteCollection mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteCollection(arg0 *opensearchserverless.DeleteCollectionInput) (*opensearchserverless.DeleteCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0)
	ret0, _ := ret[0].(*opensearchserverless.DeleteCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteCollection), arg0)
}

// DeleteCollectionRequest mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteCollectionRequest(arg0 *opensearchserverless.DeleteCollectionInput) (*request.Request, *opensearchserverless.DeleteCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.DeleteCollectionOutput)
	return ret0, ret1
}

// DeleteCollectionRequest indicates an expected call of DeleteCollectionRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollectionRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteCollectionRequest), arg0)
}

// DeleteCollectionWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteCollectionWithContext(arg0 context.Context, arg1 *opensearchserverless.DeleteCollectionInput, arg2 ...request.Option) (*opensearchserverless.DeleteCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.DeleteCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollectionWithContext indicates an expected call of DeleteCollectionWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollectionWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteCollectionWithContext), varargs...)
}

// DeleteSecurityConfig mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteSecurityConfig(arg0 *opensearchserverless.DeleteSecurityConfigInput) (*opensearchserverless.DeleteSecurityConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityConfig", arg0)
	ret0, _ := ret[0].(*opensearchserverless.DeleteSecurityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityConfig indicates an expected call of DeleteSecurityConfig
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteSecurityConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityConfig", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteSecurityConfig), arg0)
}

// DeleteSecurityConfigRequest mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteSecurityConfigRequest(arg0 *opensearchserverless.DeleteSecurityConfigInput) (*request.Request, *opensearchserverless.DeleteSecurityConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.DeleteSecurityConfigOutput)
	return ret0, ret1
}

// DeleteSecurityConfigRequest indicates an expected call of DeleteSecurityConfigRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteSecurityConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityConfigRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteSecurityConfigRequest), arg0)
}

// DeleteSecurityConfigWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteSecurityConfigWithContext(arg0 context.Context, arg1 *opensearchserverless.DeleteSecurityConfigInput, arg2 ...request.Option) (*opensearchserverless.DeleteSecurityConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecurityConfigWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.DeleteSecurityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityConfigWithContext indicates an expected call of DeleteSecurityConfigWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteSecurityConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityConfigWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteSecurityConfigWithContext), varargs...)
}

// DeleteSecurityPolicy mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteSecurityPolicy(arg0 *opensearchserverless.DeleteSecurityPolicyInput) (*opensearchserverless.DeleteSecurityPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityPolicy", arg0)
	ret0, _ := ret[0].(*opensearchserverless.DeleteSecurityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityPolicy indicates an expected call of DeleteSecurityPolicy
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteSecurityPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityPolicy", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteSecurityPolicy), arg0)
}

// DeleteSecurityPolicyRequest mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteSecurityPolicyRequest(arg0 *opensearchserverless.DeleteSecurityPolicyInput) (*request.Request, *opensearchserverless.DeleteSecurityPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.DeleteSecurityPolicyOutput)
	return ret0, ret1
}

// DeleteSecurityPolicyRequest indicates an expected call of DeleteSecurityPolicyRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteSecurityPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityPolicyRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteSecurityPolicyRequest), arg0)
}

// DeleteSecurityPolicyWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteSecurityPolicyWithContext(arg0 context.Context, arg1 *opensearchserverless.DeleteSecurityPolicyInput, arg2 ...request.Option) (*opensearchserverless.DeleteSecurityPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecurityPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.DeleteSecurityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityPolicyWithContext indicates an expected call of DeleteSecurityPolicyWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteSecurityPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityPolicyWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteSecurityPolicyWithContext), varargs...)
}

// DeleteVpcEndpoint mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteVpcEndpoint(arg0 *opensearchserverless.DeleteVpcEndpointInput) (*opensearchserverless.DeleteVpcEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpcEndpoint", arg0)
	ret0, _ := ret[0].(*opensearchserverless.DeleteVpcEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVpcEndpoint indicates an expected call of DeleteVpcEndpoint
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteVpcEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpcEndpoint", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteVpcEndpoint), arg0)
}

// DeleteVpcEndpointRequest mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteVpcEndpointRequest(arg0 *opensearchserverless.DeleteVpcEndpointInput) (*request.Request, *opensearchserverless.DeleteVpcEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpcEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.DeleteVpcEndpointOutput)
	return ret0, ret1
}

// DeleteVpcEndpointRequest indicates an expected call of DeleteVpcEndpointRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteVpcEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpcEndpointRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteVpcEndpointRequest), arg0)
}

// DeleteVpcEndpointWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) DeleteVpcEndpointWithContext(arg0 context.Context, arg1 *opensearchserverless.DeleteVpcEndpointInput, arg2 ...request.Option) (*opensearchserverless.DeleteVpcEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVpcEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.DeleteVpcEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVpcEndpointWithContext indicates an expected call of DeleteVpcEndpointWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) DeleteVpcEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpcEndpointWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).DeleteVpcEndpointWithContext), varargs...)
}

// GetAccessPolicy mocks base method
func (m *MockOpenSearchServerlessAPI) GetAccessPolicy(arg0 *opensearchserverless.GetAccessPolicyInput) (*opensearchserverless.GetAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPolicy", arg0)
	ret0, _ := ret[0].(*opensearchserverless.GetAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPolicy indicates an expected call of GetAccessPolicy
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPolicy", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetAccessPolicy), arg0)
}

// GetAccessPolicyRequest mocks base method
func (m *MockOpenSearchServerlessAPI) GetAccessPolicyRequest(arg0 *opensearchserverless.GetAccessPolicyInput) (*request.Request, *opensearchserverless.GetAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.GetAccessPolicyOutput)
	return ret0, ret1
}

// GetAccessPolicyRequest indicates an expected call of GetAccessPolicyRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPolicyRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetAccessPolicyRequest), arg0)
}

// GetAccessPolicyWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) GetAccessPolicyWithContext(arg0 context.Context, arg1 *opensearchserverless.GetAccessPolicyInput, arg2 ...request.Option) (*opensearchserverless.GetAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.GetAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessPolicyWithContext indicates an expected call of GetAccessPolicyWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessPolicyWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetAccessPolicyWithContext), varargs...)
}

// GetAccountSettings mocks base method
func (m *MockOpenSearchServerlessAPI) GetAccountSettings(arg0 *opensearchserverless.GetAccountSettingsInput) (*opensearchserverless.GetAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSettings", arg0)
	ret0, _ := ret[0].(*opensearchserverless.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettings indicates an expected call of GetAccountSettings
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetAccountSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettings", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetAccountSettings), arg0)
}

// GetAccountSettingsRequest mocks base method
func (m *MockOpenSearchServerlessAPI) GetAccountSettingsRequest(arg0 *opensearchserverless.GetAccountSettingsInput) (*request.Request, *opensearchserverless.GetAccountSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.GetAccountSettingsOutput)
	return ret0, ret1
}

// GetAccountSettingsRequest indicates an expected call of GetAccountSettingsRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetAccountSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettingsRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetAccountSettingsRequest), arg0)
}

// GetAccountSettingsWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) GetAccountSettingsWithContext(arg0 context.Context, arg1 *opensearchserverless.GetAccountSettingsInput, arg2 ...request.Option) (*opensearchserverless.GetAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettingsWithContext indicates an expected call of GetAccountSettingsWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetAccountSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettingsWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetAccountSettingsWithContext), varargs...)
}

// GetPoliciesStats mocks base method
func (m *MockOpenSearchServerlessAPI) GetPoliciesStats(arg0 *opensearchserverless.GetPoliciesStatsInput) (*opensearchserverless.GetPoliciesStatsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoliciesStats", arg0)
	ret0, _ := ret[0].(*opensearchserverless.GetPoliciesStatsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoliciesStats indicates an expected call of GetPoliciesStats
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetPoliciesStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoliciesStats", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetPoliciesStats), arg0)
}

// GetPoliciesStatsRequest mocks base method
func (m *MockOpenSearchServerlessAPI) GetPoliciesStatsRequest(arg0 *opensearchserverless.GetPoliciesStatsInput) (*request.Request, *opensearchserverless.GetPoliciesStatsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoliciesStatsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.GetPoliciesStatsOutput)
	return ret0, ret1
}

// GetPoliciesStatsRequest indicates an expected call of GetPoliciesStatsRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetPoliciesStatsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoliciesStatsRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetPoliciesStatsRequest), arg0)
}

// GetPoliciesStatsWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) GetPoliciesStatsWithContext(arg0 context.Context, arg1 *opensearchserverless.GetPoliciesStatsInput, arg2 ...request.Option) (*opensearchserverless.GetPoliciesStatsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPoliciesStatsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.GetPoliciesStatsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoliciesStatsWithContext indicates an expected call of GetPoliciesStatsWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetPoliciesStatsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoliciesStatsWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetPoliciesStatsWithContext), varargs...)
}

// GetSecurityConfig mocks base method
func (m *MockOpenSearchServerlessAPI) GetSecurityConfig(arg0 *opensearchserverless.GetSecurityConfigInput) (*opensearchserverless.GetSecurityConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityConfig", arg0)
	ret0, _ := ret[0].(*opensearchserverless.GetSecurityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityConfig indicates an expected call of GetSecurityConfig
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetSecurityConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfig", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetSecurityConfig), arg0)
}

// GetSecurityConfigRequest mocks base method
func (m *MockOpenSearchServerlessAPI) GetSecurityConfigRequest(arg0 *opensearchserverless.GetSecurityConfigInput) (*request.Request, *opensearchserverless.GetSecurityConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.GetSecurityConfigOutput)
	return ret0, ret1
}

// GetSecurityConfigRequest indicates an expected call of GetSecurityConfigRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetSecurityConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfigRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetSecurityConfigRequest), arg0)
}

// GetSecurityConfigWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) GetSecurityConfigWithContext(arg0 context.Context, arg1 *opensearchserverless.GetSecurityConfigInput, arg2 ...request.Option) (*opensearchserverless.GetSecurityConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityConfigWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.GetSecurityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityConfigWithContext indicates an expected call of GetSecurityConfigWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetSecurityConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfigWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetSecurityConfigWithContext), varargs...)
}

// GetSecurityPolicy mocks base method
func (m *MockOpenSearchServerlessAPI) GetSecurityPolicy(arg0 *opensearchserverless.GetSecurityPolicyInput) (*opensearchserverless.GetSecurityPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityPolicy", arg0)
	ret0, _ := ret[0].(*opensearchserverless.GetSecurityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityPolicy indicates an expected call of GetSecurityPolicy
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetSecurityPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityPolicy", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetSecurityPolicy), arg0)
}

// GetSecurityPolicyRequest mocks base method
func (m *MockOpenSearchServerlessAPI) GetSecurityPolicyRequest(arg0 *opensearchserverless.GetSecurityPolicyInput) (*request.Request, *opensearchserverless.GetSecurityPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.GetSecurityPolicyOutput)
	return ret0, ret1
}

// GetSecurityPolicyRequest indicates an expected call of GetSecurityPolicyRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetSecurityPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityPolicyRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetSecurityPolicyRequest), arg0)
}

// GetSecurityPolicyWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) GetSecurityPolicyWithContext(arg0 context.Context, arg1 *opensearchserverless.GetSecurityPolicyInput, arg2 ...request.Option) (*opensearchserverless.GetSecurityPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.GetSecurityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityPolicyWithContext indicates an expected call of GetSecurityPolicyWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) GetSecurityPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityPolicyWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).GetSecurityPolicyWithContext), varargs...)
}

// ListAccessPolicies mocks base method
func (m *MockOpenSearchServerlessAPI) ListAccessPolicies(arg0 *opensearchserverless.ListAccessPoliciesInput) (*opensearchserverless.ListAccessPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPolicies", arg0)
	ret0, _ := ret[0].(*opensearchserverless.ListAccessPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPolicies indicates an expected call of ListAccessPolicies
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListAccessPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPolicies", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListAccessPolicies), arg0)
}

// ListAccessPoliciesPages mocks base method
func (m *MockOpenSearchServerlessAPI) ListAccessPoliciesPages(arg0 *opensearchserverless.ListAccessPoliciesInput, arg1 func(*opensearchserverless.ListAccessPoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessPoliciesPages indicates an expected call of ListAccessPoliciesPages
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListAccessPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPoliciesPages", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListAccessPoliciesPages), arg0, arg1)
}

// ListAccessPoliciesPagesWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListAccessPoliciesPagesWithContext(arg0 context.Context, arg1 *opensearchserverless.ListAccessPoliciesInput, arg2 func(*opensearchserverless.ListAccessPoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessPoliciesPagesWithContext indicates an expected call of ListAccessPoliciesPagesWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListAccessPoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPoliciesPagesWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListAccessPoliciesPagesWithContext), varargs...)
}

// ListAccessPoliciesRequest mocks base method
func (m *MockOpenSearchServerlessAPI) ListAccessPoliciesRequest(arg0 *opensearchserverless.ListAccessPoliciesInput) (*request.Request, *opensearchserverless.ListAccessPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.ListAccessPoliciesOutput)
	return ret0, ret1
}

// ListAccessPoliciesRequest indicates an expected call of ListAccessPoliciesRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListAccessPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPoliciesRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListAccessPoliciesRequest), arg0)
}

// ListAccessPoliciesWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListAccessPoliciesWithContext(arg0 context.Context, arg1 *opensearchserverless.ListAccessPoliciesInput, arg2 ...request.Option) (*opensearchserverless.ListAccessPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.ListAccessPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPoliciesWithContext indicates an expected call of ListAccessPoliciesWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListAccessPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPoliciesWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListAccessPoliciesWithContext), varargs...)
}

// ListCollections mocks base method
func (m *MockOpenSearchServerlessAPI) ListCollections(arg0 *opensearchserverless.ListCollectionsInput) (*opensearchserverless.ListCollectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollections", arg0)
	ret0, _ := ret[0].(*opensearchserverless.ListCollectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListCollections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListCollections), arg0)
}

// ListCollectionsPages mocks base method
func (m *MockOpenSearchServerlessAPI) ListCollectionsPages(arg0 *opensearchserverless.ListCollectionsInput, arg1 func(*opensearchserverless.ListCollectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCollectionsPages indicates an expected call of ListCollectionsPages
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListCollectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsPages", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListCollectionsPages), arg0, arg1)
}

// ListCollectionsPagesWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListCollectionsPagesWithContext(arg0 context.Context, arg1 *opensearchserverless.ListCollectionsInput, arg2 func(*opensearchserverless.ListCollectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCollectionsPagesWithContext indicates an expected call of ListCollectionsPagesWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListCollectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsPagesWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListCollectionsPagesWithContext), varargs...)
}

// ListCollectionsRequest mocks base method
func (m *MockOpenSearchServerlessAPI) ListCollectionsRequest(arg0 *opensearchserverless.ListCollectionsInput) (*request.Request, *opensearchserverless.ListCollectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.ListCollectionsOutput)
	return ret0, ret1
}

// ListCollectionsRequest indicates an expected call of ListCollectionsRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListCollectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListCollectionsRequest), arg0)
}

// ListCollectionsWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListCollectionsWithContext(arg0 context.Context, arg1 *opensearchserverless.ListCollectionsInput, arg2 ...request.Option) (*opensearchserverless.ListCollectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollectionsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.ListCollectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollectionsWithContext indicates an expected call of ListCollectionsWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListCollectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListCollectionsWithContext), varargs...)
}

// ListSecurityConfigs mocks base method
func (m *MockOpenSearchServerlessAPI) ListSecurityConfigs(arg0 *opensearchserverless.ListSecurityConfigsInput) (*opensearchserverless.ListSecurityConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityConfigs", arg0)
	ret0, _ := ret[0].(*opensearchserverless.ListSecurityConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityConfigs indicates an expected call of ListSecurityConfigs
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListSecurityConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityConfigs", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListSecurityConfigs), arg0)
}

// ListSecurityConfigsPages mocks base method
func (m *MockOpenSearchServerlessAPI) ListSecurityConfigsPages(arg0 *opensearchserverless.ListSecurityConfigsInput, arg1 func(*opensearchserverless.ListSecurityConfigsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityConfigsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityConfigsPages indicates an expected call of ListSecurityConfigsPages
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListSecurityConfigsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityConfigsPages", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListSecurityConfigsPages), arg0, arg1)
}

// ListSecurityConfigsPagesWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListSecurityConfigsPagesWithContext(arg0 context.Context, arg1 *opensearchserverless.ListSecurityConfigsInput, arg2 func(*opensearchserverless.ListSecurityConfigsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityConfigsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityConfigsPagesWithContext indicates an expected call of ListSecurityConfigsPagesWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListSecurityConfigsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityConfigsPagesWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListSecurityConfigsPagesWithContext), varargs...)
}

// ListSecurityConfigsRequest mocks base method
func (m *MockOpenSearchServerlessAPI) ListSecurityConfigsRequest(arg0 *opensearchserverless.ListSecurityConfigsInput) (*request.Request, *opensearchserverless.ListSecurityConfigsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityConfigsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.ListSecurityConfigsOutput)
	return ret0, ret1
}

// ListSecurityConfigsRequest indicates an expected call of ListSecurityConfigsRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListSecurityConfigsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityConfigsRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListSecurityConfigsRequest), arg0)
}

// ListSecurityConfigsWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListSecurityConfigsWithContext(arg0 context.Context, arg1 *opensearchserverless.ListSecurityConfigsInput, arg2 ...request.Option) (*opensearchserverless.ListSecurityConfigsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityConfigsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.ListSecurityConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityConfigsWithContext indicates an expected call of ListSecurityConfigsWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListSecurityConfigsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityConfigsWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListSecurityConfigsWithContext), varargs...)
}

// ListSecurityPolicies mocks base method
func (m *MockOpenSearchServerlessAPI) ListSecurityPolicies(arg0 *opensearchserverless.ListSecurityPoliciesInput) (*opensearchserverless.ListSecurityPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityPolicies", arg0)
	ret0, _ := ret[0].(*opensearchserverless.ListSecurityPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityPolicies indicates an expected call of ListSecurityPolicies
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListSecurityPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityPolicies", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListSecurityPolicies), arg0)
}

// ListSecurityPoliciesPages mocks base method
func (m *MockOpenSearchServerlessAPI) ListSecurityPoliciesPages(arg0 *opensearchserverless.ListSecurityPoliciesInput, arg1 func(*opensearchserverless.ListSecurityPoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityPoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityPoliciesPages indicates an expected call of ListSecurityPoliciesPages
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListSecurityPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityPoliciesPages", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListSecurityPoliciesPages), arg0, arg1)
}

// ListSecurityPoliciesPagesWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListSecurityPoliciesPagesWithContext(arg0 context.Context, arg1 *opensearchserverless.ListSecurityPoliciesInput, arg2 func(*opensearchserverless.ListSecurityPoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityPoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityPoliciesPagesWithContext indicates an expected call of ListSecurityPoliciesPagesWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListSecurityPoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityPoliciesPagesWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListSecurityPoliciesPagesWithContext), varargs...)
}

// ListSecurityPoliciesRequest mocks base method
func (m *MockOpenSearchServerlessAPI) ListSecurityPoliciesRequest(arg0 *opensearchserverless.ListSecurityPoliciesInput) (*request.Request, *opensearchserverless.ListSecurityPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.ListSecurityPoliciesOutput)
	return ret0, ret1
}

// ListSecurityPoliciesRequest indicates an expected call of ListSecurityPoliciesRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListSecurityPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityPoliciesRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListSecurityPoliciesRequest), arg0)
}

// ListSecurityPoliciesWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListSecurityPoliciesWithContext(arg0 context.Context, arg1 *opensearchserverless.ListSecurityPoliciesInput, arg2 ...request.Option) (*opensearchserverless.ListSecurityPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.ListSecurityPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityPoliciesWithContext indicates an expected call of ListSecurityPoliciesWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListSecurityPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityPoliciesWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListSecurityPoliciesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockOpenSearchServerlessAPI) ListTagsForResource(arg0 *opensearchserverless.ListTagsForResourceInput) (*opensearchserverless.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*opensearchserverless.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockOpenSearchServerlessAPI) ListTagsForResourceRequest(arg0 *opensearchserverless.ListTagsForResourceInput) (*request.Request, *opensearchserverless.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *opensearchserverless.ListTagsForResourceInput, arg2 ...request.Option) (*opensearchserverless.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListVpcEndpoints mocks base method
func (m *MockOpenSearchServerlessAPI) ListVpcEndpoints(arg0 *opensearchserverless.ListVpcEndpointsInput) (*opensearchserverless.ListVpcEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpcEndpoints", arg0)
	ret0, _ := ret[0].(*opensearchserverless.ListVpcEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpcEndpoints indicates an expected call of ListVpcEndpoints
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListVpcEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcEndpoints", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListVpcEndpoints), arg0)
}

// ListVpcEndpointsPages mocks base method
func (m *MockOpenSearchServerlessAPI) ListVpcEndpointsPages(arg0 *opensearchserverless.ListVpcEndpointsInput, arg1 func(*opensearchserverless.ListVpcEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpcEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVpcEndpointsPages indicates an expected call of ListVpcEndpointsPages
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListVpcEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcEndpointsPages", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListVpcEndpointsPages), arg0, arg1)
}

// ListVpcEndpointsPagesWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListVpcEndpointsPagesWithContext(arg0 context.Context, arg1 *opensearchserverless.ListVpcEndpointsInput, arg2 func(*opensearchserverless.ListVpcEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVpcEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVpcEndpointsPagesWithContext indicates an expected call of ListVpcEndpointsPagesWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListVpcEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcEndpointsPagesWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListVpcEndpointsPagesWithContext), varargs...)
}

// ListVpcEndpointsRequest mocks base method
func (m *MockOpenSearchServerlessAPI) ListVpcEndpointsRequest(arg0 *opensearchserverless.ListVpcEndpointsInput) (*request.Request, *opensearchserverless.ListVpcEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpcEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.ListVpcEndpointsOutput)
	return ret0, ret1
}

// ListVpcEndpointsRequest indicates an expected call of ListVpcEndpointsRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListVpcEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcEndpointsRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListVpcEndpointsRequest), arg0)
}

// ListVpcEndpointsWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) ListVpcEndpointsWithContext(arg0 context.Context, arg1 *opensearchserverless.ListVpcEndpointsInput, arg2 ...request.Option) (*opensearchserverless.ListVpcEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVpcEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.ListVpcEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpcEndpointsWithContext indicates an expected call of ListVpcEndpointsWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) ListVpcEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcEndpointsWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).ListVpcEndpointsWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockOpenSearchServerlessAPI) TagResource(arg0 *opensearchserverless.TagResourceInput) (*opensearchserverless.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*opensearchserverless.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockOpenSearchServerlessAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockOpenSearchServerlessAPI) TagResourceRequest(arg0 *opensearchserverless.TagResourceInput) (*request.Request, *opensearchserverless.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) TagResourceWithContext(arg0 context.Context, arg1 *opensearchserverless.TagResourceInput, arg2 ...request.Option) (*opensearchserverless.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockOpenSearchServerlessAPI) UntagResource(arg0 *opensearchserverless.UntagResourceInput) (*opensearchserverless.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*opensearchserverless.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockOpenSearchServerlessAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockOpenSearchServerlessAPI) UntagResourceRequest(arg0 *opensearchserverless.UntagResourceInput) (*request.Request, *opensearchserverless.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) UntagResourceWithContext(arg0 context.Context, arg1 *opensearchserverless.UntagResourceInput, arg2 ...request.Option) (*opensearchserverless.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAccessPolicy mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateAccessPolicy(arg0 *opensearchserverless.UpdateAccessPolicyInput) (*opensearchserverless.UpdateAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessPolicy", arg0)
	ret0, _ := ret[0].(*opensearchserverless.UpdateAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessPolicy indicates an expected call of UpdateAccessPolicy
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicy", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateAccessPolicy), arg0)
}

// UpdateAccessPolicyRequest mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateAccessPolicyRequest(arg0 *opensearchserverless.UpdateAccessPolicyInput) (*request.Request, *opensearchserverless.UpdateAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.UpdateAccessPolicyOutput)
	return ret0, ret1
}

// UpdateAccessPolicyRequest indicates an expected call of UpdateAccessPolicyRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicyRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateAccessPolicyRequest), arg0)
}

// UpdateAccessPolicyWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateAccessPolicyWithContext(arg0 context.Context, arg1 *opensearchserverless.UpdateAccessPolicyInput, arg2 ...request.Option) (*opensearchserverless.UpdateAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.UpdateAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessPolicyWithContext indicates an expected call of UpdateAccessPolicyWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicyWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateAccessPolicyWithContext), varargs...)
}

// UpdateAccountSettings mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateAccountSettings(arg0 *opensearchserverless.UpdateAccountSettingsInput) (*opensearchserverless.UpdateAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountSettings", arg0)
	ret0, _ := ret[0].(*opensearchserverless.UpdateAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountSettings indicates an expected call of UpdateAccountSettings
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateAccountSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountSettings", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateAccountSettings), arg0)
}

// UpdateAccountSettingsRequest mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateAccountSettingsRequest(arg0 *opensearchserverless.UpdateAccountSettingsInput) (*request.Request, *opensearchserverless.UpdateAccountSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.UpdateAccountSettingsOutput)
	return ret0, ret1
}

// UpdateAccountSettingsRequest indicates an expected call of UpdateAccountSettingsRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateAccountSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountSettingsRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateAccountSettingsRequest), arg0)
}

// UpdateAccountSettingsWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateAccountSettingsWithContext(arg0 context.Context, arg1 *opensearchserverless.UpdateAccountSettingsInput, arg2 ...request.Option) (*opensearchserverless.UpdateAccountSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccountSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.UpdateAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountSettingsWithContext indicates an expected call of UpdateAccountSettingsWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateAccountSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountSettingsWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateAccountSettingsWithContext), varargs...)
}

// UpdateCollection mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateCollection(arg0 *opensearchserverless.UpdateCollectionInput) (*opensearchserverless.UpdateCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCollection", arg0)
	ret0, _ := ret[0].(*opensearchserverless.UpdateCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollection indicates an expected call of UpdateCollection
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollection", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateCollection), arg0)
}

// UpdateCollectionRequest mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateCollectionRequest(arg0 *opensearchserverless.UpdateCollectionInput) (*request.Request, *opensearchserverless.UpdateCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.UpdateCollectionOutput)
	return ret0, ret1
}

// UpdateCollectionRequest indicates an expected call of UpdateCollectionRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollectionRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateCollectionRequest), arg0)
}

// UpdateCollectionWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateCollectionWithContext(arg0 context.Context, arg1 *opensearchserverless.UpdateCollectionInput, arg2 ...request.Option) (*opensearchserverless.UpdateCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.UpdateCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollectionWithContext indicates an expected call of UpdateCollectionWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollectionWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateCollectionWithContext), varargs...)
}

// UpdateSecurityConfig mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateSecurityConfig(arg0 *opensearchserverless.UpdateSecurityConfigInput) (*opensearchserverless.UpdateSecurityConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityConfig", arg0)
	ret0, _ := ret[0].(*opensearchserverless.UpdateSecurityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurityConfig indicates an expected call of UpdateSecurityConfig
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateSecurityConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityConfig", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateSecurityConfig), arg0)
}

// UpdateSecurityConfigRequest mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateSecurityConfigRequest(arg0 *opensearchserverless.UpdateSecurityConfigInput) (*request.Request, *opensearchserverless.UpdateSecurityConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.UpdateSecurityConfigOutput)
	return ret0, ret1
}

// UpdateSecurityConfigRequest indicates an expected call of UpdateSecurityConfigRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateSecurityConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityConfigRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateSecurityConfigRequest), arg0)
}

// UpdateSecurityConfigWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateSecurityConfigWithContext(arg0 context.Context, arg1 *opensearchserverless.UpdateSecurityConfigInput, arg2 ...request.Option) (*opensearchserverless.UpdateSecurityConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecurityConfigWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.UpdateSecurityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurityConfigWithContext indicates an expected call of UpdateSecurityConfigWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateSecurityConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityConfigWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateSecurityConfigWithContext), varargs...)
}

// UpdateSecurityPolicy mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateSecurityPolicy(arg0 *opensearchserverless.UpdateSecurityPolicyInput) (*opensearchserverless.UpdateSecurityPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityPolicy", arg0)
	ret0, _ := ret[0].(*opensearchserverless.UpdateSecurityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurityPolicy indicates an expected call of UpdateSecurityPolicy
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateSecurityPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityPolicy", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateSecurityPolicy), arg0)
}

// UpdateSecurityPolicyRequest mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateSecurityPolicyRequest(arg0 *opensearchserverless.UpdateSecurityPolicyInput) (*request.Request, *opensearchserverless.UpdateSecurityPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.UpdateSecurityPolicyOutput)
	return ret0, ret1
}

// UpdateSecurityPolicyRequest indicates an expected call of UpdateSecurityPolicyRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateSecurityPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityPolicyRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateSecurityPolicyRequest), arg0)
}

// UpdateSecurityPolicyWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateSecurityPolicyWithContext(arg0 context.Context, arg1 *opensearchserverless.UpdateSecurityPolicyInput, arg2 ...request.Option) (*opensearchserverless.UpdateSecurityPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecurityPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.UpdateSecurityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurityPolicyWithContext indicates an expected call of UpdateSecurityPolicyWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateSecurityPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityPolicyWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateSecurityPolicyWithContext), varargs...)
}

// UpdateVpcEndpoint mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateVpcEndpoint(arg0 *opensearchserverless.UpdateVpcEndpointInput) (*opensearchserverless.UpdateVpcEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVpcEndpoint", arg0)
	ret0, _ := ret[0].(*opensearchserverless.UpdateVpcEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVpcEndpoint indicates an expected call of UpdateVpcEndpoint
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateVpcEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpcEndpoint", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateVpcEndpoint), arg0)
}

// UpdateVpcEndpointRequest mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateVpcEndpointRequest(arg0 *opensearchserverless.UpdateVpcEndpointInput) (*request.Request, *opensearchserverless.UpdateVpcEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVpcEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchserverless.UpdateVpcEndpointOutput)
	return ret0, ret1
}

// UpdateVpcEndpointRequest indicates an expected call of UpdateVpcEndpointRequest
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateVpcEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpcEndpointRequest", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateVpcEndpointRequest), arg0)
}

// UpdateVpcEndpointWithContext mocks base method
func (m *MockOpenSearchServerlessAPI) UpdateVpcEndpointWithContext(arg0 context.Context, arg1 *opensearchserverless.UpdateVpcEndpointInput, arg2 ...request.Option) (*opensearchserverless.UpdateVpcEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVpcEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchserverless.UpdateVpcEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVpcEndpointWithContext indicates an expected call of UpdateVpcEndpointWithContext
func (mr *MockOpenSearchServerlessAPIMockRecorder) UpdateVpcEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpcEndpointWithContext", reflect.TypeOf((*MockOpenSearchServerlessAPI)(nil).UpdateVpcEndpointWithContext), varargs...)
}
