// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/connect/connectiface (interfaces: ConnectAPI)

// Package connectmock is a generated GoMock package.
package connectmock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	connect "github.com/aws/aws-sdk-go/service/connect"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConnectAPI is a mock of ConnectAPI interface
type MockConnectAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConnectAPIMockRecorder
}

// MockConnectAPIMockRecorder is the mock recorder for MockConnectAPI
type MockConnectAPIMockRecorder struct {
	mock *MockConnectAPI
}

// NewMockConnectAPI creates a new mock instance
func NewMockConnectAPI(ctrl *gomock.Controller) *MockConnectAPI {
	mock := &MockConnectAPI{ctrl: ctrl}
	mock.recorder = &MockConnectAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectAPI) EXPECT() *MockConnectAPIMockRecorder {
	return m.recorder
}

// StartOutboundVoiceContact mocks base method
func (m *MockConnectAPI) StartOutboundVoiceContact(arg0 *connect.StartOutboundVoiceContactInput) (*connect.StartOutboundVoiceContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOutboundVoiceContact", arg0)
	ret0, _ := ret[0].(*connect.StartOutboundVoiceContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOutboundVoiceContact indicates an expected call of StartOutboundVoiceContact
func (mr *MockConnectAPIMockRecorder) StartOutboundVoiceContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOutboundVoiceContact", reflect.TypeOf((*MockConnectAPI)(nil).StartOutboundVoiceContact), arg0)
}

// StartOutboundVoiceContactRequest mocks base method
func (m *MockConnectAPI) StartOutboundVoiceContactRequest(arg0 *connect.StartOutboundVoiceContactInput) (*request.Request, *connect.StartOutboundVoiceContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOutboundVoiceContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StartOutboundVoiceContactOutput)
	return ret0, ret1
}

// StartOutboundVoiceContactRequest indicates an expected call of StartOutboundVoiceContactRequest
func (mr *MockConnectAPIMockRecorder) StartOutboundVoiceContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOutboundVoiceContactRequest", reflect.TypeOf((*MockConnectAPI)(nil).StartOutboundVoiceContactRequest), arg0)
}

// StartOutboundVoiceContactWithContext mocks base method
func (m *MockConnectAPI) StartOutboundVoiceContactWithContext(arg0 aws.Context, arg1 *connect.StartOutboundVoiceContactInput, arg2 ...request.Option) (*connect.StartOutboundVoiceContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartOutboundVoiceContactWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StartOutboundVoiceContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOutboundVoiceContactWithContext indicates an expected call of StartOutboundVoiceContactWithContext
func (mr *MockConnectAPIMockRecorder) StartOutboundVoiceContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOutboundVoiceContactWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StartOutboundVoiceContactWithContext), varargs...)
}

// StopContact mocks base method
func (m *MockConnectAPI) StopContact(arg0 *connect.StopContactInput) (*connect.StopContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContact", arg0)
	ret0, _ := ret[0].(*connect.StopContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContact indicates an expected call of StopContact
func (mr *MockConnectAPIMockRecorder) StopContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContact", reflect.TypeOf((*MockConnectAPI)(nil).StopContact), arg0)
}

// StopContactRequest mocks base method
func (m *MockConnectAPI) StopContactRequest(arg0 *connect.StopContactInput) (*request.Request, *connect.StopContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StopContactOutput)
	return ret0, ret1
}

// StopContactRequest indicates an expected call of StopContactRequest
func (mr *MockConnectAPIMockRecorder) StopContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactRequest", reflect.TypeOf((*MockConnectAPI)(nil).StopContactRequest), arg0)
}

// StopContactWithContext mocks base method
func (m *MockConnectAPI) StopContactWithContext(arg0 aws.Context, arg1 *connect.StopContactInput, arg2 ...request.Option) (*connect.StopContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopContactWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StopContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContactWithContext indicates an expected call of StopContactWithContext
func (mr *MockConnectAPIMockRecorder) StopContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StopContactWithContext), varargs...)
}
