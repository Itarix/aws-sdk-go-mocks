// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/connect/connectiface (interfaces: ConnectAPI)

// Package connectmock is a generated GoMock package.
package connectmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	connect "github.com/aws/aws-sdk-go/service/connect"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConnectAPI is a mock of ConnectAPI interface
type MockConnectAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConnectAPIMockRecorder
}

// MockConnectAPIMockRecorder is the mock recorder for MockConnectAPI
type MockConnectAPIMockRecorder struct {
	mock *MockConnectAPI
}

// NewMockConnectAPI creates a new mock instance
func NewMockConnectAPI(ctrl *gomock.Controller) *MockConnectAPI {
	mock := &MockConnectAPI{ctrl: ctrl}
	mock.recorder = &MockConnectAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectAPI) EXPECT() *MockConnectAPIMockRecorder {
	return m.recorder
}

// AssociateRoutingProfileQueues mocks base method
func (m *MockConnectAPI) AssociateRoutingProfileQueues(arg0 *connect.AssociateRoutingProfileQueuesInput) (*connect.AssociateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateRoutingProfileQueues", arg0)
	ret0, _ := ret[0].(*connect.AssociateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateRoutingProfileQueues indicates an expected call of AssociateRoutingProfileQueues
func (mr *MockConnectAPIMockRecorder) AssociateRoutingProfileQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateRoutingProfileQueues", reflect.TypeOf((*MockConnectAPI)(nil).AssociateRoutingProfileQueues), arg0)
}

// AssociateRoutingProfileQueuesRequest mocks base method
func (m *MockConnectAPI) AssociateRoutingProfileQueuesRequest(arg0 *connect.AssociateRoutingProfileQueuesInput) (*request.Request, *connect.AssociateRoutingProfileQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateRoutingProfileQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.AssociateRoutingProfileQueuesOutput)
	return ret0, ret1
}

// AssociateRoutingProfileQueuesRequest indicates an expected call of AssociateRoutingProfileQueuesRequest
func (mr *MockConnectAPIMockRecorder) AssociateRoutingProfileQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateRoutingProfileQueuesRequest", reflect.TypeOf((*MockConnectAPI)(nil).AssociateRoutingProfileQueuesRequest), arg0)
}

// AssociateRoutingProfileQueuesWithContext mocks base method
func (m *MockConnectAPI) AssociateRoutingProfileQueuesWithContext(arg0 context.Context, arg1 *connect.AssociateRoutingProfileQueuesInput, arg2 ...request.Option) (*connect.AssociateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateRoutingProfileQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.AssociateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateRoutingProfileQueuesWithContext indicates an expected call of AssociateRoutingProfileQueuesWithContext
func (mr *MockConnectAPIMockRecorder) AssociateRoutingProfileQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateRoutingProfileQueuesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).AssociateRoutingProfileQueuesWithContext), varargs...)
}

// CreateContactFlow mocks base method
func (m *MockConnectAPI) CreateContactFlow(arg0 *connect.CreateContactFlowInput) (*connect.CreateContactFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactFlow", arg0)
	ret0, _ := ret[0].(*connect.CreateContactFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContactFlow indicates an expected call of CreateContactFlow
func (mr *MockConnectAPIMockRecorder) CreateContactFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactFlow", reflect.TypeOf((*MockConnectAPI)(nil).CreateContactFlow), arg0)
}

// CreateContactFlowRequest mocks base method
func (m *MockConnectAPI) CreateContactFlowRequest(arg0 *connect.CreateContactFlowInput) (*request.Request, *connect.CreateContactFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateContactFlowOutput)
	return ret0, ret1
}

// CreateContactFlowRequest indicates an expected call of CreateContactFlowRequest
func (mr *MockConnectAPIMockRecorder) CreateContactFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactFlowRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateContactFlowRequest), arg0)
}

// CreateContactFlowWithContext mocks base method
func (m *MockConnectAPI) CreateContactFlowWithContext(arg0 context.Context, arg1 *connect.CreateContactFlowInput, arg2 ...request.Option) (*connect.CreateContactFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContactFlowWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateContactFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContactFlowWithContext indicates an expected call of CreateContactFlowWithContext
func (mr *MockConnectAPIMockRecorder) CreateContactFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactFlowWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateContactFlowWithContext), varargs...)
}

// CreateRoutingProfile mocks base method
func (m *MockConnectAPI) CreateRoutingProfile(arg0 *connect.CreateRoutingProfileInput) (*connect.CreateRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutingProfile", arg0)
	ret0, _ := ret[0].(*connect.CreateRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoutingProfile indicates an expected call of CreateRoutingProfile
func (mr *MockConnectAPIMockRecorder) CreateRoutingProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingProfile", reflect.TypeOf((*MockConnectAPI)(nil).CreateRoutingProfile), arg0)
}

// CreateRoutingProfileRequest mocks base method
func (m *MockConnectAPI) CreateRoutingProfileRequest(arg0 *connect.CreateRoutingProfileInput) (*request.Request, *connect.CreateRoutingProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutingProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateRoutingProfileOutput)
	return ret0, ret1
}

// CreateRoutingProfileRequest indicates an expected call of CreateRoutingProfileRequest
func (mr *MockConnectAPIMockRecorder) CreateRoutingProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingProfileRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateRoutingProfileRequest), arg0)
}

// CreateRoutingProfileWithContext mocks base method
func (m *MockConnectAPI) CreateRoutingProfileWithContext(arg0 context.Context, arg1 *connect.CreateRoutingProfileInput, arg2 ...request.Option) (*connect.CreateRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoutingProfileWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoutingProfileWithContext indicates an expected call of CreateRoutingProfileWithContext
func (mr *MockConnectAPIMockRecorder) CreateRoutingProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingProfileWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateRoutingProfileWithContext), varargs...)
}

// CreateUser mocks base method
func (m *MockConnectAPI) CreateUser(arg0 *connect.CreateUserInput) (*connect.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*connect.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockConnectAPIMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockConnectAPI)(nil).CreateUser), arg0)
}

// CreateUserRequest mocks base method
func (m *MockConnectAPI) CreateUserRequest(arg0 *connect.CreateUserInput) (*request.Request, *connect.CreateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateUserOutput)
	return ret0, ret1
}

// CreateUserRequest indicates an expected call of CreateUserRequest
func (mr *MockConnectAPIMockRecorder) CreateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateUserRequest), arg0)
}

// CreateUserWithContext mocks base method
func (m *MockConnectAPI) CreateUserWithContext(arg0 context.Context, arg1 *connect.CreateUserInput, arg2 ...request.Option) (*connect.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithContext indicates an expected call of CreateUserWithContext
func (mr *MockConnectAPIMockRecorder) CreateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateUserWithContext), varargs...)
}

// DeleteUser mocks base method
func (m *MockConnectAPI) DeleteUser(arg0 *connect.DeleteUserInput) (*connect.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*connect.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockConnectAPIMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUser), arg0)
}

// DeleteUserRequest mocks base method
func (m *MockConnectAPI) DeleteUserRequest(arg0 *connect.DeleteUserInput) (*request.Request, *connect.DeleteUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DeleteUserOutput)
	return ret0, ret1
}

// DeleteUserRequest indicates an expected call of DeleteUserRequest
func (mr *MockConnectAPIMockRecorder) DeleteUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRequest", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUserRequest), arg0)
}

// DeleteUserWithContext mocks base method
func (m *MockConnectAPI) DeleteUserWithContext(arg0 context.Context, arg1 *connect.DeleteUserInput, arg2 ...request.Option) (*connect.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserWithContext indicates an expected call of DeleteUserWithContext
func (mr *MockConnectAPIMockRecorder) DeleteUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUserWithContext), varargs...)
}

// DescribeContactFlow mocks base method
func (m *MockConnectAPI) DescribeContactFlow(arg0 *connect.DescribeContactFlowInput) (*connect.DescribeContactFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeContactFlow", arg0)
	ret0, _ := ret[0].(*connect.DescribeContactFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContactFlow indicates an expected call of DescribeContactFlow
func (mr *MockConnectAPIMockRecorder) DescribeContactFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContactFlow", reflect.TypeOf((*MockConnectAPI)(nil).DescribeContactFlow), arg0)
}

// DescribeContactFlowRequest mocks base method
func (m *MockConnectAPI) DescribeContactFlowRequest(arg0 *connect.DescribeContactFlowInput) (*request.Request, *connect.DescribeContactFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeContactFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeContactFlowOutput)
	return ret0, ret1
}

// DescribeContactFlowRequest indicates an expected call of DescribeContactFlowRequest
func (mr *MockConnectAPIMockRecorder) DescribeContactFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContactFlowRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeContactFlowRequest), arg0)
}

// DescribeContactFlowWithContext mocks base method
func (m *MockConnectAPI) DescribeContactFlowWithContext(arg0 context.Context, arg1 *connect.DescribeContactFlowInput, arg2 ...request.Option) (*connect.DescribeContactFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeContactFlowWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeContactFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContactFlowWithContext indicates an expected call of DescribeContactFlowWithContext
func (mr *MockConnectAPIMockRecorder) DescribeContactFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContactFlowWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeContactFlowWithContext), varargs...)
}

// DescribeRoutingProfile mocks base method
func (m *MockConnectAPI) DescribeRoutingProfile(arg0 *connect.DescribeRoutingProfileInput) (*connect.DescribeRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRoutingProfile", arg0)
	ret0, _ := ret[0].(*connect.DescribeRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoutingProfile indicates an expected call of DescribeRoutingProfile
func (mr *MockConnectAPIMockRecorder) DescribeRoutingProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoutingProfile", reflect.TypeOf((*MockConnectAPI)(nil).DescribeRoutingProfile), arg0)
}

// DescribeRoutingProfileRequest mocks base method
func (m *MockConnectAPI) DescribeRoutingProfileRequest(arg0 *connect.DescribeRoutingProfileInput) (*request.Request, *connect.DescribeRoutingProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRoutingProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeRoutingProfileOutput)
	return ret0, ret1
}

// DescribeRoutingProfileRequest indicates an expected call of DescribeRoutingProfileRequest
func (mr *MockConnectAPIMockRecorder) DescribeRoutingProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoutingProfileRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeRoutingProfileRequest), arg0)
}

// DescribeRoutingProfileWithContext mocks base method
func (m *MockConnectAPI) DescribeRoutingProfileWithContext(arg0 context.Context, arg1 *connect.DescribeRoutingProfileInput, arg2 ...request.Option) (*connect.DescribeRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRoutingProfileWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoutingProfileWithContext indicates an expected call of DescribeRoutingProfileWithContext
func (mr *MockConnectAPIMockRecorder) DescribeRoutingProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoutingProfileWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeRoutingProfileWithContext), varargs...)
}

// DescribeUser mocks base method
func (m *MockConnectAPI) DescribeUser(arg0 *connect.DescribeUserInput) (*connect.DescribeUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUser", arg0)
	ret0, _ := ret[0].(*connect.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUser indicates an expected call of DescribeUser
func (mr *MockConnectAPIMockRecorder) DescribeUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUser", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUser), arg0)
}

// DescribeUserHierarchyGroup mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyGroup(arg0 *connect.DescribeUserHierarchyGroupInput) (*connect.DescribeUserHierarchyGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserHierarchyGroup", arg0)
	ret0, _ := ret[0].(*connect.DescribeUserHierarchyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserHierarchyGroup indicates an expected call of DescribeUserHierarchyGroup
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyGroup", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyGroup), arg0)
}

// DescribeUserHierarchyGroupRequest mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyGroupRequest(arg0 *connect.DescribeUserHierarchyGroupInput) (*request.Request, *connect.DescribeUserHierarchyGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserHierarchyGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeUserHierarchyGroupOutput)
	return ret0, ret1
}

// DescribeUserHierarchyGroupRequest indicates an expected call of DescribeUserHierarchyGroupRequest
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyGroupRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyGroupRequest), arg0)
}

// DescribeUserHierarchyGroupWithContext mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyGroupWithContext(arg0 context.Context, arg1 *connect.DescribeUserHierarchyGroupInput, arg2 ...request.Option) (*connect.DescribeUserHierarchyGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserHierarchyGroupWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeUserHierarchyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserHierarchyGroupWithContext indicates an expected call of DescribeUserHierarchyGroupWithContext
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyGroupWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyGroupWithContext), varargs...)
}

// DescribeUserHierarchyStructure mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyStructure(arg0 *connect.DescribeUserHierarchyStructureInput) (*connect.DescribeUserHierarchyStructureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserHierarchyStructure", arg0)
	ret0, _ := ret[0].(*connect.DescribeUserHierarchyStructureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserHierarchyStructure indicates an expected call of DescribeUserHierarchyStructure
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyStructure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyStructure", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyStructure), arg0)
}

// DescribeUserHierarchyStructureRequest mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyStructureRequest(arg0 *connect.DescribeUserHierarchyStructureInput) (*request.Request, *connect.DescribeUserHierarchyStructureOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserHierarchyStructureRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeUserHierarchyStructureOutput)
	return ret0, ret1
}

// DescribeUserHierarchyStructureRequest indicates an expected call of DescribeUserHierarchyStructureRequest
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyStructureRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyStructureRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyStructureRequest), arg0)
}

// DescribeUserHierarchyStructureWithContext mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyStructureWithContext(arg0 context.Context, arg1 *connect.DescribeUserHierarchyStructureInput, arg2 ...request.Option) (*connect.DescribeUserHierarchyStructureOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserHierarchyStructureWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeUserHierarchyStructureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserHierarchyStructureWithContext indicates an expected call of DescribeUserHierarchyStructureWithContext
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyStructureWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyStructureWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyStructureWithContext), varargs...)
}

// DescribeUserRequest mocks base method
func (m *MockConnectAPI) DescribeUserRequest(arg0 *connect.DescribeUserInput) (*request.Request, *connect.DescribeUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeUserOutput)
	return ret0, ret1
}

// DescribeUserRequest indicates an expected call of DescribeUserRequest
func (mr *MockConnectAPIMockRecorder) DescribeUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserRequest), arg0)
}

// DescribeUserWithContext mocks base method
func (m *MockConnectAPI) DescribeUserWithContext(arg0 context.Context, arg1 *connect.DescribeUserInput, arg2 ...request.Option) (*connect.DescribeUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserWithContext indicates an expected call of DescribeUserWithContext
func (mr *MockConnectAPIMockRecorder) DescribeUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserWithContext), varargs...)
}

// DisassociateRoutingProfileQueues mocks base method
func (m *MockConnectAPI) DisassociateRoutingProfileQueues(arg0 *connect.DisassociateRoutingProfileQueuesInput) (*connect.DisassociateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateRoutingProfileQueues", arg0)
	ret0, _ := ret[0].(*connect.DisassociateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateRoutingProfileQueues indicates an expected call of DisassociateRoutingProfileQueues
func (mr *MockConnectAPIMockRecorder) DisassociateRoutingProfileQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRoutingProfileQueues", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateRoutingProfileQueues), arg0)
}

// DisassociateRoutingProfileQueuesRequest mocks base method
func (m *MockConnectAPI) DisassociateRoutingProfileQueuesRequest(arg0 *connect.DisassociateRoutingProfileQueuesInput) (*request.Request, *connect.DisassociateRoutingProfileQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateRoutingProfileQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DisassociateRoutingProfileQueuesOutput)
	return ret0, ret1
}

// DisassociateRoutingProfileQueuesRequest indicates an expected call of DisassociateRoutingProfileQueuesRequest
func (mr *MockConnectAPIMockRecorder) DisassociateRoutingProfileQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRoutingProfileQueuesRequest", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateRoutingProfileQueuesRequest), arg0)
}

// DisassociateRoutingProfileQueuesWithContext mocks base method
func (m *MockConnectAPI) DisassociateRoutingProfileQueuesWithContext(arg0 context.Context, arg1 *connect.DisassociateRoutingProfileQueuesInput, arg2 ...request.Option) (*connect.DisassociateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateRoutingProfileQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DisassociateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateRoutingProfileQueuesWithContext indicates an expected call of DisassociateRoutingProfileQueuesWithContext
func (mr *MockConnectAPIMockRecorder) DisassociateRoutingProfileQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRoutingProfileQueuesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateRoutingProfileQueuesWithContext), varargs...)
}

// GetContactAttributes mocks base method
func (m *MockConnectAPI) GetContactAttributes(arg0 *connect.GetContactAttributesInput) (*connect.GetContactAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactAttributes", arg0)
	ret0, _ := ret[0].(*connect.GetContactAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactAttributes indicates an expected call of GetContactAttributes
func (mr *MockConnectAPIMockRecorder) GetContactAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactAttributes", reflect.TypeOf((*MockConnectAPI)(nil).GetContactAttributes), arg0)
}

// GetContactAttributesRequest mocks base method
func (m *MockConnectAPI) GetContactAttributesRequest(arg0 *connect.GetContactAttributesInput) (*request.Request, *connect.GetContactAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.GetContactAttributesOutput)
	return ret0, ret1
}

// GetContactAttributesRequest indicates an expected call of GetContactAttributesRequest
func (mr *MockConnectAPIMockRecorder) GetContactAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactAttributesRequest", reflect.TypeOf((*MockConnectAPI)(nil).GetContactAttributesRequest), arg0)
}

// GetContactAttributesWithContext mocks base method
func (m *MockConnectAPI) GetContactAttributesWithContext(arg0 context.Context, arg1 *connect.GetContactAttributesInput, arg2 ...request.Option) (*connect.GetContactAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContactAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.GetContactAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactAttributesWithContext indicates an expected call of GetContactAttributesWithContext
func (mr *MockConnectAPIMockRecorder) GetContactAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactAttributesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetContactAttributesWithContext), varargs...)
}

// GetCurrentMetricData mocks base method
func (m *MockConnectAPI) GetCurrentMetricData(arg0 *connect.GetCurrentMetricDataInput) (*connect.GetCurrentMetricDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMetricData", arg0)
	ret0, _ := ret[0].(*connect.GetCurrentMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMetricData indicates an expected call of GetCurrentMetricData
func (mr *MockConnectAPIMockRecorder) GetCurrentMetricData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMetricData", reflect.TypeOf((*MockConnectAPI)(nil).GetCurrentMetricData), arg0)
}

// GetCurrentMetricDataPages mocks base method
func (m *MockConnectAPI) GetCurrentMetricDataPages(arg0 *connect.GetCurrentMetricDataInput, arg1 func(*connect.GetCurrentMetricDataOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMetricDataPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCurrentMetricDataPages indicates an expected call of GetCurrentMetricDataPages
func (mr *MockConnectAPIMockRecorder) GetCurrentMetricDataPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMetricDataPages", reflect.TypeOf((*MockConnectAPI)(nil).GetCurrentMetricDataPages), arg0, arg1)
}

// GetCurrentMetricDataPagesWithContext mocks base method
func (m *MockConnectAPI) GetCurrentMetricDataPagesWithContext(arg0 context.Context, arg1 *connect.GetCurrentMetricDataInput, arg2 func(*connect.GetCurrentMetricDataOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentMetricDataPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCurrentMetricDataPagesWithContext indicates an expected call of GetCurrentMetricDataPagesWithContext
func (mr *MockConnectAPIMockRecorder) GetCurrentMetricDataPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMetricDataPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetCurrentMetricDataPagesWithContext), varargs...)
}

// GetCurrentMetricDataRequest mocks base method
func (m *MockConnectAPI) GetCurrentMetricDataRequest(arg0 *connect.GetCurrentMetricDataInput) (*request.Request, *connect.GetCurrentMetricDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMetricDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.GetCurrentMetricDataOutput)
	return ret0, ret1
}

// GetCurrentMetricDataRequest indicates an expected call of GetCurrentMetricDataRequest
func (mr *MockConnectAPIMockRecorder) GetCurrentMetricDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMetricDataRequest", reflect.TypeOf((*MockConnectAPI)(nil).GetCurrentMetricDataRequest), arg0)
}

// GetCurrentMetricDataWithContext mocks base method
func (m *MockConnectAPI) GetCurrentMetricDataWithContext(arg0 context.Context, arg1 *connect.GetCurrentMetricDataInput, arg2 ...request.Option) (*connect.GetCurrentMetricDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentMetricDataWithContext", varargs...)
	ret0, _ := ret[0].(*connect.GetCurrentMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMetricDataWithContext indicates an expected call of GetCurrentMetricDataWithContext
func (mr *MockConnectAPIMockRecorder) GetCurrentMetricDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMetricDataWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetCurrentMetricDataWithContext), varargs...)
}

// GetFederationToken mocks base method
func (m *MockConnectAPI) GetFederationToken(arg0 *connect.GetFederationTokenInput) (*connect.GetFederationTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFederationToken", arg0)
	ret0, _ := ret[0].(*connect.GetFederationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFederationToken indicates an expected call of GetFederationToken
func (mr *MockConnectAPIMockRecorder) GetFederationToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFederationToken", reflect.TypeOf((*MockConnectAPI)(nil).GetFederationToken), arg0)
}

// GetFederationTokenRequest mocks base method
func (m *MockConnectAPI) GetFederationTokenRequest(arg0 *connect.GetFederationTokenInput) (*request.Request, *connect.GetFederationTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFederationTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.GetFederationTokenOutput)
	return ret0, ret1
}

// GetFederationTokenRequest indicates an expected call of GetFederationTokenRequest
func (mr *MockConnectAPIMockRecorder) GetFederationTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFederationTokenRequest", reflect.TypeOf((*MockConnectAPI)(nil).GetFederationTokenRequest), arg0)
}

// GetFederationTokenWithContext mocks base method
func (m *MockConnectAPI) GetFederationTokenWithContext(arg0 context.Context, arg1 *connect.GetFederationTokenInput, arg2 ...request.Option) (*connect.GetFederationTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFederationTokenWithContext", varargs...)
	ret0, _ := ret[0].(*connect.GetFederationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFederationTokenWithContext indicates an expected call of GetFederationTokenWithContext
func (mr *MockConnectAPIMockRecorder) GetFederationTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFederationTokenWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetFederationTokenWithContext), varargs...)
}

// GetMetricData mocks base method
func (m *MockConnectAPI) GetMetricData(arg0 *connect.GetMetricDataInput) (*connect.GetMetricDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricData", arg0)
	ret0, _ := ret[0].(*connect.GetMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricData indicates an expected call of GetMetricData
func (mr *MockConnectAPIMockRecorder) GetMetricData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricData", reflect.TypeOf((*MockConnectAPI)(nil).GetMetricData), arg0)
}

// GetMetricDataPages mocks base method
func (m *MockConnectAPI) GetMetricDataPages(arg0 *connect.GetMetricDataInput, arg1 func(*connect.GetMetricDataOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricDataPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMetricDataPages indicates an expected call of GetMetricDataPages
func (mr *MockConnectAPIMockRecorder) GetMetricDataPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricDataPages", reflect.TypeOf((*MockConnectAPI)(nil).GetMetricDataPages), arg0, arg1)
}

// GetMetricDataPagesWithContext mocks base method
func (m *MockConnectAPI) GetMetricDataPagesWithContext(arg0 context.Context, arg1 *connect.GetMetricDataInput, arg2 func(*connect.GetMetricDataOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricDataPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMetricDataPagesWithContext indicates an expected call of GetMetricDataPagesWithContext
func (mr *MockConnectAPIMockRecorder) GetMetricDataPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricDataPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetMetricDataPagesWithContext), varargs...)
}

// GetMetricDataRequest mocks base method
func (m *MockConnectAPI) GetMetricDataRequest(arg0 *connect.GetMetricDataInput) (*request.Request, *connect.GetMetricDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.GetMetricDataOutput)
	return ret0, ret1
}

// GetMetricDataRequest indicates an expected call of GetMetricDataRequest
func (mr *MockConnectAPIMockRecorder) GetMetricDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricDataRequest", reflect.TypeOf((*MockConnectAPI)(nil).GetMetricDataRequest), arg0)
}

// GetMetricDataWithContext mocks base method
func (m *MockConnectAPI) GetMetricDataWithContext(arg0 context.Context, arg1 *connect.GetMetricDataInput, arg2 ...request.Option) (*connect.GetMetricDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricDataWithContext", varargs...)
	ret0, _ := ret[0].(*connect.GetMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricDataWithContext indicates an expected call of GetMetricDataWithContext
func (mr *MockConnectAPIMockRecorder) GetMetricDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricDataWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetMetricDataWithContext), varargs...)
}

// ListContactFlows mocks base method
func (m *MockConnectAPI) ListContactFlows(arg0 *connect.ListContactFlowsInput) (*connect.ListContactFlowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactFlows", arg0)
	ret0, _ := ret[0].(*connect.ListContactFlowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactFlows indicates an expected call of ListContactFlows
func (mr *MockConnectAPIMockRecorder) ListContactFlows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactFlows", reflect.TypeOf((*MockConnectAPI)(nil).ListContactFlows), arg0)
}

// ListContactFlowsPages mocks base method
func (m *MockConnectAPI) ListContactFlowsPages(arg0 *connect.ListContactFlowsInput, arg1 func(*connect.ListContactFlowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactFlowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactFlowsPages indicates an expected call of ListContactFlowsPages
func (mr *MockConnectAPIMockRecorder) ListContactFlowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactFlowsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListContactFlowsPages), arg0, arg1)
}

// ListContactFlowsPagesWithContext mocks base method
func (m *MockConnectAPI) ListContactFlowsPagesWithContext(arg0 context.Context, arg1 *connect.ListContactFlowsInput, arg2 func(*connect.ListContactFlowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactFlowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactFlowsPagesWithContext indicates an expected call of ListContactFlowsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListContactFlowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactFlowsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListContactFlowsPagesWithContext), varargs...)
}

// ListContactFlowsRequest mocks base method
func (m *MockConnectAPI) ListContactFlowsRequest(arg0 *connect.ListContactFlowsInput) (*request.Request, *connect.ListContactFlowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactFlowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListContactFlowsOutput)
	return ret0, ret1
}

// ListContactFlowsRequest indicates an expected call of ListContactFlowsRequest
func (mr *MockConnectAPIMockRecorder) ListContactFlowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactFlowsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListContactFlowsRequest), arg0)
}

// ListContactFlowsWithContext mocks base method
func (m *MockConnectAPI) ListContactFlowsWithContext(arg0 context.Context, arg1 *connect.ListContactFlowsInput, arg2 ...request.Option) (*connect.ListContactFlowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactFlowsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListContactFlowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactFlowsWithContext indicates an expected call of ListContactFlowsWithContext
func (mr *MockConnectAPIMockRecorder) ListContactFlowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactFlowsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListContactFlowsWithContext), varargs...)
}

// ListHoursOfOperations mocks base method
func (m *MockConnectAPI) ListHoursOfOperations(arg0 *connect.ListHoursOfOperationsInput) (*connect.ListHoursOfOperationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHoursOfOperations", arg0)
	ret0, _ := ret[0].(*connect.ListHoursOfOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHoursOfOperations indicates an expected call of ListHoursOfOperations
func (mr *MockConnectAPIMockRecorder) ListHoursOfOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoursOfOperations", reflect.TypeOf((*MockConnectAPI)(nil).ListHoursOfOperations), arg0)
}

// ListHoursOfOperationsPages mocks base method
func (m *MockConnectAPI) ListHoursOfOperationsPages(arg0 *connect.ListHoursOfOperationsInput, arg1 func(*connect.ListHoursOfOperationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHoursOfOperationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHoursOfOperationsPages indicates an expected call of ListHoursOfOperationsPages
func (mr *MockConnectAPIMockRecorder) ListHoursOfOperationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoursOfOperationsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListHoursOfOperationsPages), arg0, arg1)
}

// ListHoursOfOperationsPagesWithContext mocks base method
func (m *MockConnectAPI) ListHoursOfOperationsPagesWithContext(arg0 context.Context, arg1 *connect.ListHoursOfOperationsInput, arg2 func(*connect.ListHoursOfOperationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHoursOfOperationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHoursOfOperationsPagesWithContext indicates an expected call of ListHoursOfOperationsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListHoursOfOperationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoursOfOperationsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListHoursOfOperationsPagesWithContext), varargs...)
}

// ListHoursOfOperationsRequest mocks base method
func (m *MockConnectAPI) ListHoursOfOperationsRequest(arg0 *connect.ListHoursOfOperationsInput) (*request.Request, *connect.ListHoursOfOperationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHoursOfOperationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListHoursOfOperationsOutput)
	return ret0, ret1
}

// ListHoursOfOperationsRequest indicates an expected call of ListHoursOfOperationsRequest
func (mr *MockConnectAPIMockRecorder) ListHoursOfOperationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoursOfOperationsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListHoursOfOperationsRequest), arg0)
}

// ListHoursOfOperationsWithContext mocks base method
func (m *MockConnectAPI) ListHoursOfOperationsWithContext(arg0 context.Context, arg1 *connect.ListHoursOfOperationsInput, arg2 ...request.Option) (*connect.ListHoursOfOperationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHoursOfOperationsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListHoursOfOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHoursOfOperationsWithContext indicates an expected call of ListHoursOfOperationsWithContext
func (mr *MockConnectAPIMockRecorder) ListHoursOfOperationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoursOfOperationsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListHoursOfOperationsWithContext), varargs...)
}

// ListPhoneNumbers mocks base method
func (m *MockConnectAPI) ListPhoneNumbers(arg0 *connect.ListPhoneNumbersInput) (*connect.ListPhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbers", arg0)
	ret0, _ := ret[0].(*connect.ListPhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumbers indicates an expected call of ListPhoneNumbers
func (mr *MockConnectAPIMockRecorder) ListPhoneNumbers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbers", reflect.TypeOf((*MockConnectAPI)(nil).ListPhoneNumbers), arg0)
}

// ListPhoneNumbersPages mocks base method
func (m *MockConnectAPI) ListPhoneNumbersPages(arg0 *connect.ListPhoneNumbersInput, arg1 func(*connect.ListPhoneNumbersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPhoneNumbersPages indicates an expected call of ListPhoneNumbersPages
func (mr *MockConnectAPIMockRecorder) ListPhoneNumbersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersPages", reflect.TypeOf((*MockConnectAPI)(nil).ListPhoneNumbersPages), arg0, arg1)
}

// ListPhoneNumbersPagesWithContext mocks base method
func (m *MockConnectAPI) ListPhoneNumbersPagesWithContext(arg0 context.Context, arg1 *connect.ListPhoneNumbersInput, arg2 func(*connect.ListPhoneNumbersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumbersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPhoneNumbersPagesWithContext indicates an expected call of ListPhoneNumbersPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListPhoneNumbersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListPhoneNumbersPagesWithContext), varargs...)
}

// ListPhoneNumbersRequest mocks base method
func (m *MockConnectAPI) ListPhoneNumbersRequest(arg0 *connect.ListPhoneNumbersInput) (*request.Request, *connect.ListPhoneNumbersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListPhoneNumbersOutput)
	return ret0, ret1
}

// ListPhoneNumbersRequest indicates an expected call of ListPhoneNumbersRequest
func (mr *MockConnectAPIMockRecorder) ListPhoneNumbersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListPhoneNumbersRequest), arg0)
}

// ListPhoneNumbersWithContext mocks base method
func (m *MockConnectAPI) ListPhoneNumbersWithContext(arg0 context.Context, arg1 *connect.ListPhoneNumbersInput, arg2 ...request.Option) (*connect.ListPhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumbersWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListPhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumbersWithContext indicates an expected call of ListPhoneNumbersWithContext
func (mr *MockConnectAPIMockRecorder) ListPhoneNumbersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListPhoneNumbersWithContext), varargs...)
}

// ListPrompts mocks base method
func (m *MockConnectAPI) ListPrompts(arg0 *connect.ListPromptsInput) (*connect.ListPromptsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrompts", arg0)
	ret0, _ := ret[0].(*connect.ListPromptsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrompts indicates an expected call of ListPrompts
func (mr *MockConnectAPIMockRecorder) ListPrompts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrompts", reflect.TypeOf((*MockConnectAPI)(nil).ListPrompts), arg0)
}

// ListPromptsPages mocks base method
func (m *MockConnectAPI) ListPromptsPages(arg0 *connect.ListPromptsInput, arg1 func(*connect.ListPromptsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromptsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPromptsPages indicates an expected call of ListPromptsPages
func (mr *MockConnectAPIMockRecorder) ListPromptsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListPromptsPages), arg0, arg1)
}

// ListPromptsPagesWithContext mocks base method
func (m *MockConnectAPI) ListPromptsPagesWithContext(arg0 context.Context, arg1 *connect.ListPromptsInput, arg2 func(*connect.ListPromptsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPromptsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPromptsPagesWithContext indicates an expected call of ListPromptsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListPromptsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListPromptsPagesWithContext), varargs...)
}

// ListPromptsRequest mocks base method
func (m *MockConnectAPI) ListPromptsRequest(arg0 *connect.ListPromptsInput) (*request.Request, *connect.ListPromptsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromptsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListPromptsOutput)
	return ret0, ret1
}

// ListPromptsRequest indicates an expected call of ListPromptsRequest
func (mr *MockConnectAPIMockRecorder) ListPromptsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListPromptsRequest), arg0)
}

// ListPromptsWithContext mocks base method
func (m *MockConnectAPI) ListPromptsWithContext(arg0 context.Context, arg1 *connect.ListPromptsInput, arg2 ...request.Option) (*connect.ListPromptsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPromptsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListPromptsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPromptsWithContext indicates an expected call of ListPromptsWithContext
func (mr *MockConnectAPIMockRecorder) ListPromptsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListPromptsWithContext), varargs...)
}

// ListQueues mocks base method
func (m *MockConnectAPI) ListQueues(arg0 *connect.ListQueuesInput) (*connect.ListQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueues", arg0)
	ret0, _ := ret[0].(*connect.ListQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueues indicates an expected call of ListQueues
func (mr *MockConnectAPIMockRecorder) ListQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueues", reflect.TypeOf((*MockConnectAPI)(nil).ListQueues), arg0)
}

// ListQueuesPages mocks base method
func (m *MockConnectAPI) ListQueuesPages(arg0 *connect.ListQueuesInput, arg1 func(*connect.ListQueuesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueuesPages indicates an expected call of ListQueuesPages
func (mr *MockConnectAPIMockRecorder) ListQueuesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListQueuesPages), arg0, arg1)
}

// ListQueuesPagesWithContext mocks base method
func (m *MockConnectAPI) ListQueuesPagesWithContext(arg0 context.Context, arg1 *connect.ListQueuesInput, arg2 func(*connect.ListQueuesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueuesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueuesPagesWithContext indicates an expected call of ListQueuesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListQueuesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListQueuesPagesWithContext), varargs...)
}

// ListQueuesRequest mocks base method
func (m *MockConnectAPI) ListQueuesRequest(arg0 *connect.ListQueuesInput) (*request.Request, *connect.ListQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListQueuesOutput)
	return ret0, ret1
}

// ListQueuesRequest indicates an expected call of ListQueuesRequest
func (mr *MockConnectAPIMockRecorder) ListQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListQueuesRequest), arg0)
}

// ListQueuesWithContext mocks base method
func (m *MockConnectAPI) ListQueuesWithContext(arg0 context.Context, arg1 *connect.ListQueuesInput, arg2 ...request.Option) (*connect.ListQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueuesWithContext indicates an expected call of ListQueuesWithContext
func (mr *MockConnectAPIMockRecorder) ListQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListQueuesWithContext), varargs...)
}

// ListRoutingProfileQueues mocks base method
func (m *MockConnectAPI) ListRoutingProfileQueues(arg0 *connect.ListRoutingProfileQueuesInput) (*connect.ListRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfileQueues", arg0)
	ret0, _ := ret[0].(*connect.ListRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingProfileQueues indicates an expected call of ListRoutingProfileQueues
func (mr *MockConnectAPIMockRecorder) ListRoutingProfileQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfileQueues", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfileQueues), arg0)
}

// ListRoutingProfileQueuesPages mocks base method
func (m *MockConnectAPI) ListRoutingProfileQueuesPages(arg0 *connect.ListRoutingProfileQueuesInput, arg1 func(*connect.ListRoutingProfileQueuesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfileQueuesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutingProfileQueuesPages indicates an expected call of ListRoutingProfileQueuesPages
func (mr *MockConnectAPIMockRecorder) ListRoutingProfileQueuesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfileQueuesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfileQueuesPages), arg0, arg1)
}

// ListRoutingProfileQueuesPagesWithContext mocks base method
func (m *MockConnectAPI) ListRoutingProfileQueuesPagesWithContext(arg0 context.Context, arg1 *connect.ListRoutingProfileQueuesInput, arg2 func(*connect.ListRoutingProfileQueuesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingProfileQueuesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutingProfileQueuesPagesWithContext indicates an expected call of ListRoutingProfileQueuesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListRoutingProfileQueuesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfileQueuesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfileQueuesPagesWithContext), varargs...)
}

// ListRoutingProfileQueuesRequest mocks base method
func (m *MockConnectAPI) ListRoutingProfileQueuesRequest(arg0 *connect.ListRoutingProfileQueuesInput) (*request.Request, *connect.ListRoutingProfileQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfileQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListRoutingProfileQueuesOutput)
	return ret0, ret1
}

// ListRoutingProfileQueuesRequest indicates an expected call of ListRoutingProfileQueuesRequest
func (mr *MockConnectAPIMockRecorder) ListRoutingProfileQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfileQueuesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfileQueuesRequest), arg0)
}

// ListRoutingProfileQueuesWithContext mocks base method
func (m *MockConnectAPI) ListRoutingProfileQueuesWithContext(arg0 context.Context, arg1 *connect.ListRoutingProfileQueuesInput, arg2 ...request.Option) (*connect.ListRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingProfileQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingProfileQueuesWithContext indicates an expected call of ListRoutingProfileQueuesWithContext
func (mr *MockConnectAPIMockRecorder) ListRoutingProfileQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfileQueuesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfileQueuesWithContext), varargs...)
}

// ListRoutingProfiles mocks base method
func (m *MockConnectAPI) ListRoutingProfiles(arg0 *connect.ListRoutingProfilesInput) (*connect.ListRoutingProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfiles", arg0)
	ret0, _ := ret[0].(*connect.ListRoutingProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingProfiles indicates an expected call of ListRoutingProfiles
func (mr *MockConnectAPIMockRecorder) ListRoutingProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfiles", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfiles), arg0)
}

// ListRoutingProfilesPages mocks base method
func (m *MockConnectAPI) ListRoutingProfilesPages(arg0 *connect.ListRoutingProfilesInput, arg1 func(*connect.ListRoutingProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutingProfilesPages indicates an expected call of ListRoutingProfilesPages
func (mr *MockConnectAPIMockRecorder) ListRoutingProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfilesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfilesPages), arg0, arg1)
}

// ListRoutingProfilesPagesWithContext mocks base method
func (m *MockConnectAPI) ListRoutingProfilesPagesWithContext(arg0 context.Context, arg1 *connect.ListRoutingProfilesInput, arg2 func(*connect.ListRoutingProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutingProfilesPagesWithContext indicates an expected call of ListRoutingProfilesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListRoutingProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfilesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfilesPagesWithContext), varargs...)
}

// ListRoutingProfilesRequest mocks base method
func (m *MockConnectAPI) ListRoutingProfilesRequest(arg0 *connect.ListRoutingProfilesInput) (*request.Request, *connect.ListRoutingProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListRoutingProfilesOutput)
	return ret0, ret1
}

// ListRoutingProfilesRequest indicates an expected call of ListRoutingProfilesRequest
func (mr *MockConnectAPIMockRecorder) ListRoutingProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfilesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfilesRequest), arg0)
}

// ListRoutingProfilesWithContext mocks base method
func (m *MockConnectAPI) ListRoutingProfilesWithContext(arg0 context.Context, arg1 *connect.ListRoutingProfilesInput, arg2 ...request.Option) (*connect.ListRoutingProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListRoutingProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingProfilesWithContext indicates an expected call of ListRoutingProfilesWithContext
func (mr *MockConnectAPIMockRecorder) ListRoutingProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfilesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfilesWithContext), varargs...)
}

// ListSecurityProfiles mocks base method
func (m *MockConnectAPI) ListSecurityProfiles(arg0 *connect.ListSecurityProfilesInput) (*connect.ListSecurityProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityProfiles", arg0)
	ret0, _ := ret[0].(*connect.ListSecurityProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityProfiles indicates an expected call of ListSecurityProfiles
func (mr *MockConnectAPIMockRecorder) ListSecurityProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfiles", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityProfiles), arg0)
}

// ListSecurityProfilesPages mocks base method
func (m *MockConnectAPI) ListSecurityProfilesPages(arg0 *connect.ListSecurityProfilesInput, arg1 func(*connect.ListSecurityProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityProfilesPages indicates an expected call of ListSecurityProfilesPages
func (mr *MockConnectAPIMockRecorder) ListSecurityProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfilesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityProfilesPages), arg0, arg1)
}

// ListSecurityProfilesPagesWithContext mocks base method
func (m *MockConnectAPI) ListSecurityProfilesPagesWithContext(arg0 context.Context, arg1 *connect.ListSecurityProfilesInput, arg2 func(*connect.ListSecurityProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityProfilesPagesWithContext indicates an expected call of ListSecurityProfilesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListSecurityProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfilesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityProfilesPagesWithContext), varargs...)
}

// ListSecurityProfilesRequest mocks base method
func (m *MockConnectAPI) ListSecurityProfilesRequest(arg0 *connect.ListSecurityProfilesInput) (*request.Request, *connect.ListSecurityProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListSecurityProfilesOutput)
	return ret0, ret1
}

// ListSecurityProfilesRequest indicates an expected call of ListSecurityProfilesRequest
func (mr *MockConnectAPIMockRecorder) ListSecurityProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfilesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityProfilesRequest), arg0)
}

// ListSecurityProfilesWithContext mocks base method
func (m *MockConnectAPI) ListSecurityProfilesWithContext(arg0 context.Context, arg1 *connect.ListSecurityProfilesInput, arg2 ...request.Option) (*connect.ListSecurityProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListSecurityProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityProfilesWithContext indicates an expected call of ListSecurityProfilesWithContext
func (mr *MockConnectAPIMockRecorder) ListSecurityProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfilesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityProfilesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockConnectAPI) ListTagsForResource(arg0 *connect.ListTagsForResourceInput) (*connect.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*connect.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockConnectAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockConnectAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockConnectAPI) ListTagsForResourceRequest(arg0 *connect.ListTagsForResourceInput) (*request.Request, *connect.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockConnectAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockConnectAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *connect.ListTagsForResourceInput, arg2 ...request.Option) (*connect.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockConnectAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListUserHierarchyGroups mocks base method
func (m *MockConnectAPI) ListUserHierarchyGroups(arg0 *connect.ListUserHierarchyGroupsInput) (*connect.ListUserHierarchyGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserHierarchyGroups", arg0)
	ret0, _ := ret[0].(*connect.ListUserHierarchyGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserHierarchyGroups indicates an expected call of ListUserHierarchyGroups
func (mr *MockConnectAPIMockRecorder) ListUserHierarchyGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHierarchyGroups", reflect.TypeOf((*MockConnectAPI)(nil).ListUserHierarchyGroups), arg0)
}

// ListUserHierarchyGroupsPages mocks base method
func (m *MockConnectAPI) ListUserHierarchyGroupsPages(arg0 *connect.ListUserHierarchyGroupsInput, arg1 func(*connect.ListUserHierarchyGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserHierarchyGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserHierarchyGroupsPages indicates an expected call of ListUserHierarchyGroupsPages
func (mr *MockConnectAPIMockRecorder) ListUserHierarchyGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHierarchyGroupsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListUserHierarchyGroupsPages), arg0, arg1)
}

// ListUserHierarchyGroupsPagesWithContext mocks base method
func (m *MockConnectAPI) ListUserHierarchyGroupsPagesWithContext(arg0 context.Context, arg1 *connect.ListUserHierarchyGroupsInput, arg2 func(*connect.ListUserHierarchyGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserHierarchyGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserHierarchyGroupsPagesWithContext indicates an expected call of ListUserHierarchyGroupsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListUserHierarchyGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHierarchyGroupsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListUserHierarchyGroupsPagesWithContext), varargs...)
}

// ListUserHierarchyGroupsRequest mocks base method
func (m *MockConnectAPI) ListUserHierarchyGroupsRequest(arg0 *connect.ListUserHierarchyGroupsInput) (*request.Request, *connect.ListUserHierarchyGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserHierarchyGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListUserHierarchyGroupsOutput)
	return ret0, ret1
}

// ListUserHierarchyGroupsRequest indicates an expected call of ListUserHierarchyGroupsRequest
func (mr *MockConnectAPIMockRecorder) ListUserHierarchyGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHierarchyGroupsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListUserHierarchyGroupsRequest), arg0)
}

// ListUserHierarchyGroupsWithContext mocks base method
func (m *MockConnectAPI) ListUserHierarchyGroupsWithContext(arg0 context.Context, arg1 *connect.ListUserHierarchyGroupsInput, arg2 ...request.Option) (*connect.ListUserHierarchyGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserHierarchyGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListUserHierarchyGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserHierarchyGroupsWithContext indicates an expected call of ListUserHierarchyGroupsWithContext
func (mr *MockConnectAPIMockRecorder) ListUserHierarchyGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHierarchyGroupsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListUserHierarchyGroupsWithContext), varargs...)
}

// ListUsers mocks base method
func (m *MockConnectAPI) ListUsers(arg0 *connect.ListUsersInput) (*connect.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].(*connect.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockConnectAPIMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockConnectAPI)(nil).ListUsers), arg0)
}

// ListUsersPages mocks base method
func (m *MockConnectAPI) ListUsersPages(arg0 *connect.ListUsersInput, arg1 func(*connect.ListUsersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPages indicates an expected call of ListUsersPages
func (mr *MockConnectAPIMockRecorder) ListUsersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPages", reflect.TypeOf((*MockConnectAPI)(nil).ListUsersPages), arg0, arg1)
}

// ListUsersPagesWithContext mocks base method
func (m *MockConnectAPI) ListUsersPagesWithContext(arg0 context.Context, arg1 *connect.ListUsersInput, arg2 func(*connect.ListUsersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPagesWithContext indicates an expected call of ListUsersPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListUsersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListUsersPagesWithContext), varargs...)
}

// ListUsersRequest mocks base method
func (m *MockConnectAPI) ListUsersRequest(arg0 *connect.ListUsersInput) (*request.Request, *connect.ListUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListUsersOutput)
	return ret0, ret1
}

// ListUsersRequest indicates an expected call of ListUsersRequest
func (mr *MockConnectAPIMockRecorder) ListUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListUsersRequest), arg0)
}

// ListUsersWithContext mocks base method
func (m *MockConnectAPI) ListUsersWithContext(arg0 context.Context, arg1 *connect.ListUsersInput, arg2 ...request.Option) (*connect.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersWithContext indicates an expected call of ListUsersWithContext
func (mr *MockConnectAPIMockRecorder) ListUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListUsersWithContext), varargs...)
}

// ResumeContactRecording mocks base method
func (m *MockConnectAPI) ResumeContactRecording(arg0 *connect.ResumeContactRecordingInput) (*connect.ResumeContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeContactRecording", arg0)
	ret0, _ := ret[0].(*connect.ResumeContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeContactRecording indicates an expected call of ResumeContactRecording
func (mr *MockConnectAPIMockRecorder) ResumeContactRecording(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeContactRecording", reflect.TypeOf((*MockConnectAPI)(nil).ResumeContactRecording), arg0)
}

// ResumeContactRecordingRequest mocks base method
func (m *MockConnectAPI) ResumeContactRecordingRequest(arg0 *connect.ResumeContactRecordingInput) (*request.Request, *connect.ResumeContactRecordingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeContactRecordingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ResumeContactRecordingOutput)
	return ret0, ret1
}

// ResumeContactRecordingRequest indicates an expected call of ResumeContactRecordingRequest
func (mr *MockConnectAPIMockRecorder) ResumeContactRecordingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeContactRecordingRequest", reflect.TypeOf((*MockConnectAPI)(nil).ResumeContactRecordingRequest), arg0)
}

// ResumeContactRecordingWithContext mocks base method
func (m *MockConnectAPI) ResumeContactRecordingWithContext(arg0 context.Context, arg1 *connect.ResumeContactRecordingInput, arg2 ...request.Option) (*connect.ResumeContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeContactRecordingWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ResumeContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeContactRecordingWithContext indicates an expected call of ResumeContactRecordingWithContext
func (mr *MockConnectAPIMockRecorder) ResumeContactRecordingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeContactRecordingWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ResumeContactRecordingWithContext), varargs...)
}

// StartChatContact mocks base method
func (m *MockConnectAPI) StartChatContact(arg0 *connect.StartChatContactInput) (*connect.StartChatContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChatContact", arg0)
	ret0, _ := ret[0].(*connect.StartChatContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChatContact indicates an expected call of StartChatContact
func (mr *MockConnectAPIMockRecorder) StartChatContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChatContact", reflect.TypeOf((*MockConnectAPI)(nil).StartChatContact), arg0)
}

// StartChatContactRequest mocks base method
func (m *MockConnectAPI) StartChatContactRequest(arg0 *connect.StartChatContactInput) (*request.Request, *connect.StartChatContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChatContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StartChatContactOutput)
	return ret0, ret1
}

// StartChatContactRequest indicates an expected call of StartChatContactRequest
func (mr *MockConnectAPIMockRecorder) StartChatContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChatContactRequest", reflect.TypeOf((*MockConnectAPI)(nil).StartChatContactRequest), arg0)
}

// StartChatContactWithContext mocks base method
func (m *MockConnectAPI) StartChatContactWithContext(arg0 context.Context, arg1 *connect.StartChatContactInput, arg2 ...request.Option) (*connect.StartChatContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartChatContactWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StartChatContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChatContactWithContext indicates an expected call of StartChatContactWithContext
func (mr *MockConnectAPIMockRecorder) StartChatContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChatContactWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StartChatContactWithContext), varargs...)
}

// StartContactRecording mocks base method
func (m *MockConnectAPI) StartContactRecording(arg0 *connect.StartContactRecordingInput) (*connect.StartContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContactRecording", arg0)
	ret0, _ := ret[0].(*connect.StartContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContactRecording indicates an expected call of StartContactRecording
func (mr *MockConnectAPIMockRecorder) StartContactRecording(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContactRecording", reflect.TypeOf((*MockConnectAPI)(nil).StartContactRecording), arg0)
}

// StartContactRecordingRequest mocks base method
func (m *MockConnectAPI) StartContactRecordingRequest(arg0 *connect.StartContactRecordingInput) (*request.Request, *connect.StartContactRecordingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContactRecordingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StartContactRecordingOutput)
	return ret0, ret1
}

// StartContactRecordingRequest indicates an expected call of StartContactRecordingRequest
func (mr *MockConnectAPIMockRecorder) StartContactRecordingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContactRecordingRequest", reflect.TypeOf((*MockConnectAPI)(nil).StartContactRecordingRequest), arg0)
}

// StartContactRecordingWithContext mocks base method
func (m *MockConnectAPI) StartContactRecordingWithContext(arg0 context.Context, arg1 *connect.StartContactRecordingInput, arg2 ...request.Option) (*connect.StartContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartContactRecordingWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StartContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContactRecordingWithContext indicates an expected call of StartContactRecordingWithContext
func (mr *MockConnectAPIMockRecorder) StartContactRecordingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContactRecordingWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StartContactRecordingWithContext), varargs...)
}

// StartOutboundVoiceContact mocks base method
func (m *MockConnectAPI) StartOutboundVoiceContact(arg0 *connect.StartOutboundVoiceContactInput) (*connect.StartOutboundVoiceContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOutboundVoiceContact", arg0)
	ret0, _ := ret[0].(*connect.StartOutboundVoiceContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOutboundVoiceContact indicates an expected call of StartOutboundVoiceContact
func (mr *MockConnectAPIMockRecorder) StartOutboundVoiceContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOutboundVoiceContact", reflect.TypeOf((*MockConnectAPI)(nil).StartOutboundVoiceContact), arg0)
}

// StartOutboundVoiceContactRequest mocks base method
func (m *MockConnectAPI) StartOutboundVoiceContactRequest(arg0 *connect.StartOutboundVoiceContactInput) (*request.Request, *connect.StartOutboundVoiceContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOutboundVoiceContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StartOutboundVoiceContactOutput)
	return ret0, ret1
}

// StartOutboundVoiceContactRequest indicates an expected call of StartOutboundVoiceContactRequest
func (mr *MockConnectAPIMockRecorder) StartOutboundVoiceContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOutboundVoiceContactRequest", reflect.TypeOf((*MockConnectAPI)(nil).StartOutboundVoiceContactRequest), arg0)
}

// StartOutboundVoiceContactWithContext mocks base method
func (m *MockConnectAPI) StartOutboundVoiceContactWithContext(arg0 context.Context, arg1 *connect.StartOutboundVoiceContactInput, arg2 ...request.Option) (*connect.StartOutboundVoiceContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartOutboundVoiceContactWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StartOutboundVoiceContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOutboundVoiceContactWithContext indicates an expected call of StartOutboundVoiceContactWithContext
func (mr *MockConnectAPIMockRecorder) StartOutboundVoiceContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOutboundVoiceContactWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StartOutboundVoiceContactWithContext), varargs...)
}

// StopContact mocks base method
func (m *MockConnectAPI) StopContact(arg0 *connect.StopContactInput) (*connect.StopContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContact", arg0)
	ret0, _ := ret[0].(*connect.StopContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContact indicates an expected call of StopContact
func (mr *MockConnectAPIMockRecorder) StopContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContact", reflect.TypeOf((*MockConnectAPI)(nil).StopContact), arg0)
}

// StopContactRecording mocks base method
func (m *MockConnectAPI) StopContactRecording(arg0 *connect.StopContactRecordingInput) (*connect.StopContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContactRecording", arg0)
	ret0, _ := ret[0].(*connect.StopContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContactRecording indicates an expected call of StopContactRecording
func (mr *MockConnectAPIMockRecorder) StopContactRecording(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactRecording", reflect.TypeOf((*MockConnectAPI)(nil).StopContactRecording), arg0)
}

// StopContactRecordingRequest mocks base method
func (m *MockConnectAPI) StopContactRecordingRequest(arg0 *connect.StopContactRecordingInput) (*request.Request, *connect.StopContactRecordingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContactRecordingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StopContactRecordingOutput)
	return ret0, ret1
}

// StopContactRecordingRequest indicates an expected call of StopContactRecordingRequest
func (mr *MockConnectAPIMockRecorder) StopContactRecordingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactRecordingRequest", reflect.TypeOf((*MockConnectAPI)(nil).StopContactRecordingRequest), arg0)
}

// StopContactRecordingWithContext mocks base method
func (m *MockConnectAPI) StopContactRecordingWithContext(arg0 context.Context, arg1 *connect.StopContactRecordingInput, arg2 ...request.Option) (*connect.StopContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopContactRecordingWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StopContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContactRecordingWithContext indicates an expected call of StopContactRecordingWithContext
func (mr *MockConnectAPIMockRecorder) StopContactRecordingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactRecordingWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StopContactRecordingWithContext), varargs...)
}

// StopContactRequest mocks base method
func (m *MockConnectAPI) StopContactRequest(arg0 *connect.StopContactInput) (*request.Request, *connect.StopContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StopContactOutput)
	return ret0, ret1
}

// StopContactRequest indicates an expected call of StopContactRequest
func (mr *MockConnectAPIMockRecorder) StopContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactRequest", reflect.TypeOf((*MockConnectAPI)(nil).StopContactRequest), arg0)
}

// StopContactWithContext mocks base method
func (m *MockConnectAPI) StopContactWithContext(arg0 context.Context, arg1 *connect.StopContactInput, arg2 ...request.Option) (*connect.StopContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopContactWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StopContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContactWithContext indicates an expected call of StopContactWithContext
func (mr *MockConnectAPIMockRecorder) StopContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StopContactWithContext), varargs...)
}

// SuspendContactRecording mocks base method
func (m *MockConnectAPI) SuspendContactRecording(arg0 *connect.SuspendContactRecordingInput) (*connect.SuspendContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendContactRecording", arg0)
	ret0, _ := ret[0].(*connect.SuspendContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuspendContactRecording indicates an expected call of SuspendContactRecording
func (mr *MockConnectAPIMockRecorder) SuspendContactRecording(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendContactRecording", reflect.TypeOf((*MockConnectAPI)(nil).SuspendContactRecording), arg0)
}

// SuspendContactRecordingRequest mocks base method
func (m *MockConnectAPI) SuspendContactRecordingRequest(arg0 *connect.SuspendContactRecordingInput) (*request.Request, *connect.SuspendContactRecordingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendContactRecordingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.SuspendContactRecordingOutput)
	return ret0, ret1
}

// SuspendContactRecordingRequest indicates an expected call of SuspendContactRecordingRequest
func (mr *MockConnectAPIMockRecorder) SuspendContactRecordingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendContactRecordingRequest", reflect.TypeOf((*MockConnectAPI)(nil).SuspendContactRecordingRequest), arg0)
}

// SuspendContactRecordingWithContext mocks base method
func (m *MockConnectAPI) SuspendContactRecordingWithContext(arg0 context.Context, arg1 *connect.SuspendContactRecordingInput, arg2 ...request.Option) (*connect.SuspendContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SuspendContactRecordingWithContext", varargs...)
	ret0, _ := ret[0].(*connect.SuspendContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuspendContactRecordingWithContext indicates an expected call of SuspendContactRecordingWithContext
func (mr *MockConnectAPIMockRecorder) SuspendContactRecordingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendContactRecordingWithContext", reflect.TypeOf((*MockConnectAPI)(nil).SuspendContactRecordingWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockConnectAPI) TagResource(arg0 *connect.TagResourceInput) (*connect.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*connect.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockConnectAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockConnectAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockConnectAPI) TagResourceRequest(arg0 *connect.TagResourceInput) (*request.Request, *connect.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockConnectAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockConnectAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockConnectAPI) TagResourceWithContext(arg0 context.Context, arg1 *connect.TagResourceInput, arg2 ...request.Option) (*connect.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connect.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockConnectAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockConnectAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockConnectAPI) UntagResource(arg0 *connect.UntagResourceInput) (*connect.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*connect.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockConnectAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockConnectAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockConnectAPI) UntagResourceRequest(arg0 *connect.UntagResourceInput) (*request.Request, *connect.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockConnectAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockConnectAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockConnectAPI) UntagResourceWithContext(arg0 context.Context, arg1 *connect.UntagResourceInput, arg2 ...request.Option) (*connect.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockConnectAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateContactAttributes mocks base method
func (m *MockConnectAPI) UpdateContactAttributes(arg0 *connect.UpdateContactAttributesInput) (*connect.UpdateContactAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactAttributes", arg0)
	ret0, _ := ret[0].(*connect.UpdateContactAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactAttributes indicates an expected call of UpdateContactAttributes
func (mr *MockConnectAPIMockRecorder) UpdateContactAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactAttributes", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactAttributes), arg0)
}

// UpdateContactAttributesRequest mocks base method
func (m *MockConnectAPI) UpdateContactAttributesRequest(arg0 *connect.UpdateContactAttributesInput) (*request.Request, *connect.UpdateContactAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateContactAttributesOutput)
	return ret0, ret1
}

// UpdateContactAttributesRequest indicates an expected call of UpdateContactAttributesRequest
func (mr *MockConnectAPIMockRecorder) UpdateContactAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactAttributesRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactAttributesRequest), arg0)
}

// UpdateContactAttributesWithContext mocks base method
func (m *MockConnectAPI) UpdateContactAttributesWithContext(arg0 context.Context, arg1 *connect.UpdateContactAttributesInput, arg2 ...request.Option) (*connect.UpdateContactAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateContactAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactAttributesWithContext indicates an expected call of UpdateContactAttributesWithContext
func (mr *MockConnectAPIMockRecorder) UpdateContactAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactAttributesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactAttributesWithContext), varargs...)
}

// UpdateContactFlowContent mocks base method
func (m *MockConnectAPI) UpdateContactFlowContent(arg0 *connect.UpdateContactFlowContentInput) (*connect.UpdateContactFlowContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactFlowContent", arg0)
	ret0, _ := ret[0].(*connect.UpdateContactFlowContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactFlowContent indicates an expected call of UpdateContactFlowContent
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowContent", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowContent), arg0)
}

// UpdateContactFlowContentRequest mocks base method
func (m *MockConnectAPI) UpdateContactFlowContentRequest(arg0 *connect.UpdateContactFlowContentInput) (*request.Request, *connect.UpdateContactFlowContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactFlowContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateContactFlowContentOutput)
	return ret0, ret1
}

// UpdateContactFlowContentRequest indicates an expected call of UpdateContactFlowContentRequest
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowContentRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowContentRequest), arg0)
}

// UpdateContactFlowContentWithContext mocks base method
func (m *MockConnectAPI) UpdateContactFlowContentWithContext(arg0 context.Context, arg1 *connect.UpdateContactFlowContentInput, arg2 ...request.Option) (*connect.UpdateContactFlowContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactFlowContentWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateContactFlowContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactFlowContentWithContext indicates an expected call of UpdateContactFlowContentWithContext
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowContentWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowContentWithContext), varargs...)
}

// UpdateContactFlowName mocks base method
func (m *MockConnectAPI) UpdateContactFlowName(arg0 *connect.UpdateContactFlowNameInput) (*connect.UpdateContactFlowNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactFlowName", arg0)
	ret0, _ := ret[0].(*connect.UpdateContactFlowNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactFlowName indicates an expected call of UpdateContactFlowName
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowName", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowName), arg0)
}

// UpdateContactFlowNameRequest mocks base method
func (m *MockConnectAPI) UpdateContactFlowNameRequest(arg0 *connect.UpdateContactFlowNameInput) (*request.Request, *connect.UpdateContactFlowNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactFlowNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateContactFlowNameOutput)
	return ret0, ret1
}

// UpdateContactFlowNameRequest indicates an expected call of UpdateContactFlowNameRequest
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowNameRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowNameRequest), arg0)
}

// UpdateContactFlowNameWithContext mocks base method
func (m *MockConnectAPI) UpdateContactFlowNameWithContext(arg0 context.Context, arg1 *connect.UpdateContactFlowNameInput, arg2 ...request.Option) (*connect.UpdateContactFlowNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactFlowNameWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateContactFlowNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactFlowNameWithContext indicates an expected call of UpdateContactFlowNameWithContext
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowNameWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowNameWithContext), varargs...)
}

// UpdateRoutingProfileConcurrency mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileConcurrency(arg0 *connect.UpdateRoutingProfileConcurrencyInput) (*connect.UpdateRoutingProfileConcurrencyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileConcurrency", arg0)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileConcurrencyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileConcurrency indicates an expected call of UpdateRoutingProfileConcurrency
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileConcurrency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileConcurrency", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileConcurrency), arg0)
}

// UpdateRoutingProfileConcurrencyRequest mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileConcurrencyRequest(arg0 *connect.UpdateRoutingProfileConcurrencyInput) (*request.Request, *connect.UpdateRoutingProfileConcurrencyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileConcurrencyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateRoutingProfileConcurrencyOutput)
	return ret0, ret1
}

// UpdateRoutingProfileConcurrencyRequest indicates an expected call of UpdateRoutingProfileConcurrencyRequest
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileConcurrencyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileConcurrencyRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileConcurrencyRequest), arg0)
}

// UpdateRoutingProfileConcurrencyWithContext mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileConcurrencyWithContext(arg0 context.Context, arg1 *connect.UpdateRoutingProfileConcurrencyInput, arg2 ...request.Option) (*connect.UpdateRoutingProfileConcurrencyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoutingProfileConcurrencyWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileConcurrencyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileConcurrencyWithContext indicates an expected call of UpdateRoutingProfileConcurrencyWithContext
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileConcurrencyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileConcurrencyWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileConcurrencyWithContext), varargs...)
}

// UpdateRoutingProfileDefaultOutboundQueue mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileDefaultOutboundQueue(arg0 *connect.UpdateRoutingProfileDefaultOutboundQueueInput) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileDefaultOutboundQueue", arg0)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileDefaultOutboundQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileDefaultOutboundQueue indicates an expected call of UpdateRoutingProfileDefaultOutboundQueue
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileDefaultOutboundQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileDefaultOutboundQueue", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileDefaultOutboundQueue), arg0)
}

// UpdateRoutingProfileDefaultOutboundQueueRequest mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileDefaultOutboundQueueRequest(arg0 *connect.UpdateRoutingProfileDefaultOutboundQueueInput) (*request.Request, *connect.UpdateRoutingProfileDefaultOutboundQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileDefaultOutboundQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateRoutingProfileDefaultOutboundQueueOutput)
	return ret0, ret1
}

// UpdateRoutingProfileDefaultOutboundQueueRequest indicates an expected call of UpdateRoutingProfileDefaultOutboundQueueRequest
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileDefaultOutboundQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileDefaultOutboundQueueRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileDefaultOutboundQueueRequest), arg0)
}

// UpdateRoutingProfileDefaultOutboundQueueWithContext mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileDefaultOutboundQueueWithContext(arg0 context.Context, arg1 *connect.UpdateRoutingProfileDefaultOutboundQueueInput, arg2 ...request.Option) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoutingProfileDefaultOutboundQueueWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileDefaultOutboundQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileDefaultOutboundQueueWithContext indicates an expected call of UpdateRoutingProfileDefaultOutboundQueueWithContext
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileDefaultOutboundQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileDefaultOutboundQueueWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileDefaultOutboundQueueWithContext), varargs...)
}

// UpdateRoutingProfileName mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileName(arg0 *connect.UpdateRoutingProfileNameInput) (*connect.UpdateRoutingProfileNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileName", arg0)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileName indicates an expected call of UpdateRoutingProfileName
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileName", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileName), arg0)
}

// UpdateRoutingProfileNameRequest mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileNameRequest(arg0 *connect.UpdateRoutingProfileNameInput) (*request.Request, *connect.UpdateRoutingProfileNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateRoutingProfileNameOutput)
	return ret0, ret1
}

// UpdateRoutingProfileNameRequest indicates an expected call of UpdateRoutingProfileNameRequest
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileNameRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileNameRequest), arg0)
}

// UpdateRoutingProfileNameWithContext mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileNameWithContext(arg0 context.Context, arg1 *connect.UpdateRoutingProfileNameInput, arg2 ...request.Option) (*connect.UpdateRoutingProfileNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoutingProfileNameWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileNameWithContext indicates an expected call of UpdateRoutingProfileNameWithContext
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileNameWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileNameWithContext), varargs...)
}

// UpdateRoutingProfileQueues mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileQueues(arg0 *connect.UpdateRoutingProfileQueuesInput) (*connect.UpdateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileQueues", arg0)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileQueues indicates an expected call of UpdateRoutingProfileQueues
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileQueues", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileQueues), arg0)
}

// UpdateRoutingProfileQueuesRequest mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileQueuesRequest(arg0 *connect.UpdateRoutingProfileQueuesInput) (*request.Request, *connect.UpdateRoutingProfileQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateRoutingProfileQueuesOutput)
	return ret0, ret1
}

// UpdateRoutingProfileQueuesRequest indicates an expected call of UpdateRoutingProfileQueuesRequest
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileQueuesRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileQueuesRequest), arg0)
}

// UpdateRoutingProfileQueuesWithContext mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileQueuesWithContext(arg0 context.Context, arg1 *connect.UpdateRoutingProfileQueuesInput, arg2 ...request.Option) (*connect.UpdateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoutingProfileQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileQueuesWithContext indicates an expected call of UpdateRoutingProfileQueuesWithContext
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileQueuesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileQueuesWithContext), varargs...)
}

// UpdateUserHierarchy mocks base method
func (m *MockConnectAPI) UpdateUserHierarchy(arg0 *connect.UpdateUserHierarchyInput) (*connect.UpdateUserHierarchyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHierarchy", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserHierarchyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHierarchy indicates an expected call of UpdateUserHierarchy
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchy", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchy), arg0)
}

// UpdateUserHierarchyRequest mocks base method
func (m *MockConnectAPI) UpdateUserHierarchyRequest(arg0 *connect.UpdateUserHierarchyInput) (*request.Request, *connect.UpdateUserHierarchyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHierarchyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserHierarchyOutput)
	return ret0, ret1
}

// UpdateUserHierarchyRequest indicates an expected call of UpdateUserHierarchyRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchyRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchyRequest), arg0)
}

// UpdateUserHierarchyWithContext mocks base method
func (m *MockConnectAPI) UpdateUserHierarchyWithContext(arg0 context.Context, arg1 *connect.UpdateUserHierarchyInput, arg2 ...request.Option) (*connect.UpdateUserHierarchyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserHierarchyWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserHierarchyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHierarchyWithContext indicates an expected call of UpdateUserHierarchyWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchyWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchyWithContext), varargs...)
}

// UpdateUserIdentityInfo mocks base method
func (m *MockConnectAPI) UpdateUserIdentityInfo(arg0 *connect.UpdateUserIdentityInfoInput) (*connect.UpdateUserIdentityInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserIdentityInfo", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserIdentityInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserIdentityInfo indicates an expected call of UpdateUserIdentityInfo
func (mr *MockConnectAPIMockRecorder) UpdateUserIdentityInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserIdentityInfo", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserIdentityInfo), arg0)
}

// UpdateUserIdentityInfoRequest mocks base method
func (m *MockConnectAPI) UpdateUserIdentityInfoRequest(arg0 *connect.UpdateUserIdentityInfoInput) (*request.Request, *connect.UpdateUserIdentityInfoOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserIdentityInfoRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserIdentityInfoOutput)
	return ret0, ret1
}

// UpdateUserIdentityInfoRequest indicates an expected call of UpdateUserIdentityInfoRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserIdentityInfoRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserIdentityInfoRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserIdentityInfoRequest), arg0)
}

// UpdateUserIdentityInfoWithContext mocks base method
func (m *MockConnectAPI) UpdateUserIdentityInfoWithContext(arg0 context.Context, arg1 *connect.UpdateUserIdentityInfoInput, arg2 ...request.Option) (*connect.UpdateUserIdentityInfoOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserIdentityInfoWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserIdentityInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserIdentityInfoWithContext indicates an expected call of UpdateUserIdentityInfoWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserIdentityInfoWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserIdentityInfoWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserIdentityInfoWithContext), varargs...)
}

// UpdateUserPhoneConfig mocks base method
func (m *MockConnectAPI) UpdateUserPhoneConfig(arg0 *connect.UpdateUserPhoneConfigInput) (*connect.UpdateUserPhoneConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhoneConfig", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserPhoneConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPhoneConfig indicates an expected call of UpdateUserPhoneConfig
func (mr *MockConnectAPIMockRecorder) UpdateUserPhoneConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhoneConfig", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserPhoneConfig), arg0)
}

// UpdateUserPhoneConfigRequest mocks base method
func (m *MockConnectAPI) UpdateUserPhoneConfigRequest(arg0 *connect.UpdateUserPhoneConfigInput) (*request.Request, *connect.UpdateUserPhoneConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhoneConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserPhoneConfigOutput)
	return ret0, ret1
}

// UpdateUserPhoneConfigRequest indicates an expected call of UpdateUserPhoneConfigRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserPhoneConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhoneConfigRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserPhoneConfigRequest), arg0)
}

// UpdateUserPhoneConfigWithContext mocks base method
func (m *MockConnectAPI) UpdateUserPhoneConfigWithContext(arg0 context.Context, arg1 *connect.UpdateUserPhoneConfigInput, arg2 ...request.Option) (*connect.UpdateUserPhoneConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserPhoneConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserPhoneConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPhoneConfigWithContext indicates an expected call of UpdateUserPhoneConfigWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserPhoneConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhoneConfigWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserPhoneConfigWithContext), varargs...)
}

// UpdateUserRoutingProfile mocks base method
func (m *MockConnectAPI) UpdateUserRoutingProfile(arg0 *connect.UpdateUserRoutingProfileInput) (*connect.UpdateUserRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoutingProfile", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRoutingProfile indicates an expected call of UpdateUserRoutingProfile
func (mr *MockConnectAPIMockRecorder) UpdateUserRoutingProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoutingProfile", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserRoutingProfile), arg0)
}

// UpdateUserRoutingProfileRequest mocks base method
func (m *MockConnectAPI) UpdateUserRoutingProfileRequest(arg0 *connect.UpdateUserRoutingProfileInput) (*request.Request, *connect.UpdateUserRoutingProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoutingProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserRoutingProfileOutput)
	return ret0, ret1
}

// UpdateUserRoutingProfileRequest indicates an expected call of UpdateUserRoutingProfileRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserRoutingProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoutingProfileRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserRoutingProfileRequest), arg0)
}

// UpdateUserRoutingProfileWithContext mocks base method
func (m *MockConnectAPI) UpdateUserRoutingProfileWithContext(arg0 context.Context, arg1 *connect.UpdateUserRoutingProfileInput, arg2 ...request.Option) (*connect.UpdateUserRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserRoutingProfileWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRoutingProfileWithContext indicates an expected call of UpdateUserRoutingProfileWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserRoutingProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoutingProfileWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserRoutingProfileWithContext), varargs...)
}

// UpdateUserSecurityProfiles mocks base method
func (m *MockConnectAPI) UpdateUserSecurityProfiles(arg0 *connect.UpdateUserSecurityProfilesInput) (*connect.UpdateUserSecurityProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSecurityProfiles", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserSecurityProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSecurityProfiles indicates an expected call of UpdateUserSecurityProfiles
func (mr *MockConnectAPIMockRecorder) UpdateUserSecurityProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSecurityProfiles", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserSecurityProfiles), arg0)
}

// UpdateUserSecurityProfilesRequest mocks base method
func (m *MockConnectAPI) UpdateUserSecurityProfilesRequest(arg0 *connect.UpdateUserSecurityProfilesInput) (*request.Request, *connect.UpdateUserSecurityProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSecurityProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserSecurityProfilesOutput)
	return ret0, ret1
}

// UpdateUserSecurityProfilesRequest indicates an expected call of UpdateUserSecurityProfilesRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserSecurityProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSecurityProfilesRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserSecurityProfilesRequest), arg0)
}

// UpdateUserSecurityProfilesWithContext mocks base method
func (m *MockConnectAPI) UpdateUserSecurityProfilesWithContext(arg0 context.Context, arg1 *connect.UpdateUserSecurityProfilesInput, arg2 ...request.Option) (*connect.UpdateUserSecurityProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserSecurityProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserSecurityProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSecurityProfilesWithContext indicates an expected call of UpdateUserSecurityProfilesWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserSecurityProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSecurityProfilesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserSecurityProfilesWithContext), varargs...)
}
