// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/cloudtraildata/cloudtraildataiface (interfaces: CloudTrailDataAPI)

// Package cloudtraildatamock is a generated GoMock package.
package cloudtraildatamock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	cloudtraildata "github.com/aws/aws-sdk-go/service/cloudtraildata"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCloudTrailDataAPI is a mock of CloudTrailDataAPI interface
type MockCloudTrailDataAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudTrailDataAPIMockRecorder
}

// MockCloudTrailDataAPIMockRecorder is the mock recorder for MockCloudTrailDataAPI
type MockCloudTrailDataAPIMockRecorder struct {
	mock *MockCloudTrailDataAPI
}

// NewMockCloudTrailDataAPI creates a new mock instance
func NewMockCloudTrailDataAPI(ctrl *gomock.Controller) *MockCloudTrailDataAPI {
	mock := &MockCloudTrailDataAPI{ctrl: ctrl}
	mock.recorder = &MockCloudTrailDataAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudTrailDataAPI) EXPECT() *MockCloudTrailDataAPIMockRecorder {
	return m.recorder
}

// PutAuditEvents mocks base method
func (m *MockCloudTrailDataAPI) PutAuditEvents(arg0 *cloudtraildata.PutAuditEventsInput) (*cloudtraildata.PutAuditEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuditEvents", arg0)
	ret0, _ := ret[0].(*cloudtraildata.PutAuditEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuditEvents indicates an expected call of PutAuditEvents
func (mr *MockCloudTrailDataAPIMockRecorder) PutAuditEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuditEvents", reflect.TypeOf((*MockCloudTrailDataAPI)(nil).PutAuditEvents), arg0)
}

// PutAuditEventsRequest mocks base method
func (m *MockCloudTrailDataAPI) PutAuditEventsRequest(arg0 *cloudtraildata.PutAuditEventsInput) (*request.Request, *cloudtraildata.PutAuditEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuditEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudtraildata.PutAuditEventsOutput)
	return ret0, ret1
}

// PutAuditEventsRequest indicates an expected call of PutAuditEventsRequest
func (mr *MockCloudTrailDataAPIMockRecorder) PutAuditEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuditEventsRequest", reflect.TypeOf((*MockCloudTrailDataAPI)(nil).PutAuditEventsRequest), arg0)
}

// PutAuditEventsWithContext mocks base method
func (m *MockCloudTrailDataAPI) PutAuditEventsWithContext(arg0 context.Context, arg1 *cloudtraildata.PutAuditEventsInput, arg2 ...request.Option) (*cloudtraildata.PutAuditEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAuditEventsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudtraildata.PutAuditEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuditEventsWithContext indicates an expected call of PutAuditEventsWithContext
func (mr *MockCloudTrailDataAPIMockRecorder) PutAuditEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuditEventsWithContext", reflect.TypeOf((*MockCloudTrailDataAPI)(nil).PutAuditEventsWithContext), varargs...)
}
