// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/taxsettings/taxsettingsiface (interfaces: TaxSettingsAPI)

// Package taxsettingsmock is a generated GoMock package.
package taxsettingsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	taxsettings "github.com/aws/aws-sdk-go/service/taxsettings"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTaxSettingsAPI is a mock of TaxSettingsAPI interface
type MockTaxSettingsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTaxSettingsAPIMockRecorder
}

// MockTaxSettingsAPIMockRecorder is the mock recorder for MockTaxSettingsAPI
type MockTaxSettingsAPIMockRecorder struct {
	mock *MockTaxSettingsAPI
}

// NewMockTaxSettingsAPI creates a new mock instance
func NewMockTaxSettingsAPI(ctrl *gomock.Controller) *MockTaxSettingsAPI {
	mock := &MockTaxSettingsAPI{ctrl: ctrl}
	mock.recorder = &MockTaxSettingsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaxSettingsAPI) EXPECT() *MockTaxSettingsAPIMockRecorder {
	return m.recorder
}

// BatchDeleteTaxRegistration mocks base method
func (m *MockTaxSettingsAPI) BatchDeleteTaxRegistration(arg0 *taxsettings.BatchDeleteTaxRegistrationInput) (*taxsettings.BatchDeleteTaxRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteTaxRegistration", arg0)
	ret0, _ := ret[0].(*taxsettings.BatchDeleteTaxRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteTaxRegistration indicates an expected call of BatchDeleteTaxRegistration
func (mr *MockTaxSettingsAPIMockRecorder) BatchDeleteTaxRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteTaxRegistration", reflect.TypeOf((*MockTaxSettingsAPI)(nil).BatchDeleteTaxRegistration), arg0)
}

// BatchDeleteTaxRegistrationRequest mocks base method
func (m *MockTaxSettingsAPI) BatchDeleteTaxRegistrationRequest(arg0 *taxsettings.BatchDeleteTaxRegistrationInput) (*request.Request, *taxsettings.BatchDeleteTaxRegistrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteTaxRegistrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*taxsettings.BatchDeleteTaxRegistrationOutput)
	return ret0, ret1
}

// BatchDeleteTaxRegistrationRequest indicates an expected call of BatchDeleteTaxRegistrationRequest
func (mr *MockTaxSettingsAPIMockRecorder) BatchDeleteTaxRegistrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteTaxRegistrationRequest", reflect.TypeOf((*MockTaxSettingsAPI)(nil).BatchDeleteTaxRegistrationRequest), arg0)
}

// BatchDeleteTaxRegistrationWithContext mocks base method
func (m *MockTaxSettingsAPI) BatchDeleteTaxRegistrationWithContext(arg0 context.Context, arg1 *taxsettings.BatchDeleteTaxRegistrationInput, arg2 ...request.Option) (*taxsettings.BatchDeleteTaxRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteTaxRegistrationWithContext", varargs...)
	ret0, _ := ret[0].(*taxsettings.BatchDeleteTaxRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteTaxRegistrationWithContext indicates an expected call of BatchDeleteTaxRegistrationWithContext
func (mr *MockTaxSettingsAPIMockRecorder) BatchDeleteTaxRegistrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteTaxRegistrationWithContext", reflect.TypeOf((*MockTaxSettingsAPI)(nil).BatchDeleteTaxRegistrationWithContext), varargs...)
}

// BatchPutTaxRegistration mocks base method
func (m *MockTaxSettingsAPI) BatchPutTaxRegistration(arg0 *taxsettings.BatchPutTaxRegistrationInput) (*taxsettings.BatchPutTaxRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutTaxRegistration", arg0)
	ret0, _ := ret[0].(*taxsettings.BatchPutTaxRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutTaxRegistration indicates an expected call of BatchPutTaxRegistration
func (mr *MockTaxSettingsAPIMockRecorder) BatchPutTaxRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutTaxRegistration", reflect.TypeOf((*MockTaxSettingsAPI)(nil).BatchPutTaxRegistration), arg0)
}

// BatchPutTaxRegistrationRequest mocks base method
func (m *MockTaxSettingsAPI) BatchPutTaxRegistrationRequest(arg0 *taxsettings.BatchPutTaxRegistrationInput) (*request.Request, *taxsettings.BatchPutTaxRegistrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutTaxRegistrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*taxsettings.BatchPutTaxRegistrationOutput)
	return ret0, ret1
}

// BatchPutTaxRegistrationRequest indicates an expected call of BatchPutTaxRegistrationRequest
func (mr *MockTaxSettingsAPIMockRecorder) BatchPutTaxRegistrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutTaxRegistrationRequest", reflect.TypeOf((*MockTaxSettingsAPI)(nil).BatchPutTaxRegistrationRequest), arg0)
}

// BatchPutTaxRegistrationWithContext mocks base method
func (m *MockTaxSettingsAPI) BatchPutTaxRegistrationWithContext(arg0 context.Context, arg1 *taxsettings.BatchPutTaxRegistrationInput, arg2 ...request.Option) (*taxsettings.BatchPutTaxRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchPutTaxRegistrationWithContext", varargs...)
	ret0, _ := ret[0].(*taxsettings.BatchPutTaxRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutTaxRegistrationWithContext indicates an expected call of BatchPutTaxRegistrationWithContext
func (mr *MockTaxSettingsAPIMockRecorder) BatchPutTaxRegistrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutTaxRegistrationWithContext", reflect.TypeOf((*MockTaxSettingsAPI)(nil).BatchPutTaxRegistrationWithContext), varargs...)
}

// DeleteTaxRegistration mocks base method
func (m *MockTaxSettingsAPI) DeleteTaxRegistration(arg0 *taxsettings.DeleteTaxRegistrationInput) (*taxsettings.DeleteTaxRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaxRegistration", arg0)
	ret0, _ := ret[0].(*taxsettings.DeleteTaxRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTaxRegistration indicates an expected call of DeleteTaxRegistration
func (mr *MockTaxSettingsAPIMockRecorder) DeleteTaxRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaxRegistration", reflect.TypeOf((*MockTaxSettingsAPI)(nil).DeleteTaxRegistration), arg0)
}

// DeleteTaxRegistrationRequest mocks base method
func (m *MockTaxSettingsAPI) DeleteTaxRegistrationRequest(arg0 *taxsettings.DeleteTaxRegistrationInput) (*request.Request, *taxsettings.DeleteTaxRegistrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaxRegistrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*taxsettings.DeleteTaxRegistrationOutput)
	return ret0, ret1
}

// DeleteTaxRegistrationRequest indicates an expected call of DeleteTaxRegistrationRequest
func (mr *MockTaxSettingsAPIMockRecorder) DeleteTaxRegistrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaxRegistrationRequest", reflect.TypeOf((*MockTaxSettingsAPI)(nil).DeleteTaxRegistrationRequest), arg0)
}

// DeleteTaxRegistrationWithContext mocks base method
func (m *MockTaxSettingsAPI) DeleteTaxRegistrationWithContext(arg0 context.Context, arg1 *taxsettings.DeleteTaxRegistrationInput, arg2 ...request.Option) (*taxsettings.DeleteTaxRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTaxRegistrationWithContext", varargs...)
	ret0, _ := ret[0].(*taxsettings.DeleteTaxRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTaxRegistrationWithContext indicates an expected call of DeleteTaxRegistrationWithContext
func (mr *MockTaxSettingsAPIMockRecorder) DeleteTaxRegistrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaxRegistrationWithContext", reflect.TypeOf((*MockTaxSettingsAPI)(nil).DeleteTaxRegistrationWithContext), varargs...)
}

// GetTaxRegistration mocks base method
func (m *MockTaxSettingsAPI) GetTaxRegistration(arg0 *taxsettings.GetTaxRegistrationInput) (*taxsettings.GetTaxRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxRegistration", arg0)
	ret0, _ := ret[0].(*taxsettings.GetTaxRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxRegistration indicates an expected call of GetTaxRegistration
func (mr *MockTaxSettingsAPIMockRecorder) GetTaxRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxRegistration", reflect.TypeOf((*MockTaxSettingsAPI)(nil).GetTaxRegistration), arg0)
}

// GetTaxRegistrationDocument mocks base method
func (m *MockTaxSettingsAPI) GetTaxRegistrationDocument(arg0 *taxsettings.GetTaxRegistrationDocumentInput) (*taxsettings.GetTaxRegistrationDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxRegistrationDocument", arg0)
	ret0, _ := ret[0].(*taxsettings.GetTaxRegistrationDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxRegistrationDocument indicates an expected call of GetTaxRegistrationDocument
func (mr *MockTaxSettingsAPIMockRecorder) GetTaxRegistrationDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxRegistrationDocument", reflect.TypeOf((*MockTaxSettingsAPI)(nil).GetTaxRegistrationDocument), arg0)
}

// GetTaxRegistrationDocumentRequest mocks base method
func (m *MockTaxSettingsAPI) GetTaxRegistrationDocumentRequest(arg0 *taxsettings.GetTaxRegistrationDocumentInput) (*request.Request, *taxsettings.GetTaxRegistrationDocumentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxRegistrationDocumentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*taxsettings.GetTaxRegistrationDocumentOutput)
	return ret0, ret1
}

// GetTaxRegistrationDocumentRequest indicates an expected call of GetTaxRegistrationDocumentRequest
func (mr *MockTaxSettingsAPIMockRecorder) GetTaxRegistrationDocumentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxRegistrationDocumentRequest", reflect.TypeOf((*MockTaxSettingsAPI)(nil).GetTaxRegistrationDocumentRequest), arg0)
}

// GetTaxRegistrationDocumentWithContext mocks base method
func (m *MockTaxSettingsAPI) GetTaxRegistrationDocumentWithContext(arg0 context.Context, arg1 *taxsettings.GetTaxRegistrationDocumentInput, arg2 ...request.Option) (*taxsettings.GetTaxRegistrationDocumentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTaxRegistrationDocumentWithContext", varargs...)
	ret0, _ := ret[0].(*taxsettings.GetTaxRegistrationDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxRegistrationDocumentWithContext indicates an expected call of GetTaxRegistrationDocumentWithContext
func (mr *MockTaxSettingsAPIMockRecorder) GetTaxRegistrationDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxRegistrationDocumentWithContext", reflect.TypeOf((*MockTaxSettingsAPI)(nil).GetTaxRegistrationDocumentWithContext), varargs...)
}

// GetTaxRegistrationRequest mocks base method
func (m *MockTaxSettingsAPI) GetTaxRegistrationRequest(arg0 *taxsettings.GetTaxRegistrationInput) (*request.Request, *taxsettings.GetTaxRegistrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxRegistrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*taxsettings.GetTaxRegistrationOutput)
	return ret0, ret1
}

// GetTaxRegistrationRequest indicates an expected call of GetTaxRegistrationRequest
func (mr *MockTaxSettingsAPIMockRecorder) GetTaxRegistrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxRegistrationRequest", reflect.TypeOf((*MockTaxSettingsAPI)(nil).GetTaxRegistrationRequest), arg0)
}

// GetTaxRegistrationWithContext mocks base method
func (m *MockTaxSettingsAPI) GetTaxRegistrationWithContext(arg0 context.Context, arg1 *taxsettings.GetTaxRegistrationInput, arg2 ...request.Option) (*taxsettings.GetTaxRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTaxRegistrationWithContext", varargs...)
	ret0, _ := ret[0].(*taxsettings.GetTaxRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxRegistrationWithContext indicates an expected call of GetTaxRegistrationWithContext
func (mr *MockTaxSettingsAPIMockRecorder) GetTaxRegistrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxRegistrationWithContext", reflect.TypeOf((*MockTaxSettingsAPI)(nil).GetTaxRegistrationWithContext), varargs...)
}

// ListTaxRegistrations mocks base method
func (m *MockTaxSettingsAPI) ListTaxRegistrations(arg0 *taxsettings.ListTaxRegistrationsInput) (*taxsettings.ListTaxRegistrationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaxRegistrations", arg0)
	ret0, _ := ret[0].(*taxsettings.ListTaxRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaxRegistrations indicates an expected call of ListTaxRegistrations
func (mr *MockTaxSettingsAPIMockRecorder) ListTaxRegistrations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaxRegistrations", reflect.TypeOf((*MockTaxSettingsAPI)(nil).ListTaxRegistrations), arg0)
}

// ListTaxRegistrationsPages mocks base method
func (m *MockTaxSettingsAPI) ListTaxRegistrationsPages(arg0 *taxsettings.ListTaxRegistrationsInput, arg1 func(*taxsettings.ListTaxRegistrationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaxRegistrationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTaxRegistrationsPages indicates an expected call of ListTaxRegistrationsPages
func (mr *MockTaxSettingsAPIMockRecorder) ListTaxRegistrationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaxRegistrationsPages", reflect.TypeOf((*MockTaxSettingsAPI)(nil).ListTaxRegistrationsPages), arg0, arg1)
}

// ListTaxRegistrationsPagesWithContext mocks base method
func (m *MockTaxSettingsAPI) ListTaxRegistrationsPagesWithContext(arg0 context.Context, arg1 *taxsettings.ListTaxRegistrationsInput, arg2 func(*taxsettings.ListTaxRegistrationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTaxRegistrationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTaxRegistrationsPagesWithContext indicates an expected call of ListTaxRegistrationsPagesWithContext
func (mr *MockTaxSettingsAPIMockRecorder) ListTaxRegistrationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaxRegistrationsPagesWithContext", reflect.TypeOf((*MockTaxSettingsAPI)(nil).ListTaxRegistrationsPagesWithContext), varargs...)
}

// ListTaxRegistrationsRequest mocks base method
func (m *MockTaxSettingsAPI) ListTaxRegistrationsRequest(arg0 *taxsettings.ListTaxRegistrationsInput) (*request.Request, *taxsettings.ListTaxRegistrationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaxRegistrationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*taxsettings.ListTaxRegistrationsOutput)
	return ret0, ret1
}

// ListTaxRegistrationsRequest indicates an expected call of ListTaxRegistrationsRequest
func (mr *MockTaxSettingsAPIMockRecorder) ListTaxRegistrationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaxRegistrationsRequest", reflect.TypeOf((*MockTaxSettingsAPI)(nil).ListTaxRegistrationsRequest), arg0)
}

// ListTaxRegistrationsWithContext mocks base method
func (m *MockTaxSettingsAPI) ListTaxRegistrationsWithContext(arg0 context.Context, arg1 *taxsettings.ListTaxRegistrationsInput, arg2 ...request.Option) (*taxsettings.ListTaxRegistrationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTaxRegistrationsWithContext", varargs...)
	ret0, _ := ret[0].(*taxsettings.ListTaxRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaxRegistrationsWithContext indicates an expected call of ListTaxRegistrationsWithContext
func (mr *MockTaxSettingsAPIMockRecorder) ListTaxRegistrationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaxRegistrationsWithContext", reflect.TypeOf((*MockTaxSettingsAPI)(nil).ListTaxRegistrationsWithContext), varargs...)
}

// PutTaxRegistration mocks base method
func (m *MockTaxSettingsAPI) PutTaxRegistration(arg0 *taxsettings.PutTaxRegistrationInput) (*taxsettings.PutTaxRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTaxRegistration", arg0)
	ret0, _ := ret[0].(*taxsettings.PutTaxRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTaxRegistration indicates an expected call of PutTaxRegistration
func (mr *MockTaxSettingsAPIMockRecorder) PutTaxRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTaxRegistration", reflect.TypeOf((*MockTaxSettingsAPI)(nil).PutTaxRegistration), arg0)
}

// PutTaxRegistrationRequest mocks base method
func (m *MockTaxSettingsAPI) PutTaxRegistrationRequest(arg0 *taxsettings.PutTaxRegistrationInput) (*request.Request, *taxsettings.PutTaxRegistrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTaxRegistrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*taxsettings.PutTaxRegistrationOutput)
	return ret0, ret1
}

// PutTaxRegistrationRequest indicates an expected call of PutTaxRegistrationRequest
func (mr *MockTaxSettingsAPIMockRecorder) PutTaxRegistrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTaxRegistrationRequest", reflect.TypeOf((*MockTaxSettingsAPI)(nil).PutTaxRegistrationRequest), arg0)
}

// PutTaxRegistrationWithContext mocks base method
func (m *MockTaxSettingsAPI) PutTaxRegistrationWithContext(arg0 context.Context, arg1 *taxsettings.PutTaxRegistrationInput, arg2 ...request.Option) (*taxsettings.PutTaxRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTaxRegistrationWithContext", varargs...)
	ret0, _ := ret[0].(*taxsettings.PutTaxRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTaxRegistrationWithContext indicates an expected call of PutTaxRegistrationWithContext
func (mr *MockTaxSettingsAPIMockRecorder) PutTaxRegistrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTaxRegistrationWithContext", reflect.TypeOf((*MockTaxSettingsAPI)(nil).PutTaxRegistrationWithContext), varargs...)
}
