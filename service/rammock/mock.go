// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ram/ramiface (interfaces: RAMAPI)

// Package rammock is a generated GoMock package.
package rammock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	ram "github.com/aws/aws-sdk-go/service/ram"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRAMAPI is a mock of RAMAPI interface
type MockRAMAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRAMAPIMockRecorder
}

// MockRAMAPIMockRecorder is the mock recorder for MockRAMAPI
type MockRAMAPIMockRecorder struct {
	mock *MockRAMAPI
}

// NewMockRAMAPI creates a new mock instance
func NewMockRAMAPI(ctrl *gomock.Controller) *MockRAMAPI {
	mock := &MockRAMAPI{ctrl: ctrl}
	mock.recorder = &MockRAMAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRAMAPI) EXPECT() *MockRAMAPIMockRecorder {
	return m.recorder
}

// AcceptResourceShareInvitation mocks base method
func (m *MockRAMAPI) AcceptResourceShareInvitation(arg0 *ram.AcceptResourceShareInvitationInput) (*ram.AcceptResourceShareInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptResourceShareInvitation", arg0)
	ret0, _ := ret[0].(*ram.AcceptResourceShareInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptResourceShareInvitation indicates an expected call of AcceptResourceShareInvitation
func (mr *MockRAMAPIMockRecorder) AcceptResourceShareInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptResourceShareInvitation", reflect.TypeOf((*MockRAMAPI)(nil).AcceptResourceShareInvitation), arg0)
}

// AcceptResourceShareInvitationRequest mocks base method
func (m *MockRAMAPI) AcceptResourceShareInvitationRequest(arg0 *ram.AcceptResourceShareInvitationInput) (*request.Request, *ram.AcceptResourceShareInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptResourceShareInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.AcceptResourceShareInvitationOutput)
	return ret0, ret1
}

// AcceptResourceShareInvitationRequest indicates an expected call of AcceptResourceShareInvitationRequest
func (mr *MockRAMAPIMockRecorder) AcceptResourceShareInvitationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptResourceShareInvitationRequest", reflect.TypeOf((*MockRAMAPI)(nil).AcceptResourceShareInvitationRequest), arg0)
}

// AcceptResourceShareInvitationWithContext mocks base method
func (m *MockRAMAPI) AcceptResourceShareInvitationWithContext(arg0 context.Context, arg1 *ram.AcceptResourceShareInvitationInput, arg2 ...request.Option) (*ram.AcceptResourceShareInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptResourceShareInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*ram.AcceptResourceShareInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptResourceShareInvitationWithContext indicates an expected call of AcceptResourceShareInvitationWithContext
func (mr *MockRAMAPIMockRecorder) AcceptResourceShareInvitationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptResourceShareInvitationWithContext", reflect.TypeOf((*MockRAMAPI)(nil).AcceptResourceShareInvitationWithContext), varargs...)
}

// AssociateResourceShare mocks base method
func (m *MockRAMAPI) AssociateResourceShare(arg0 *ram.AssociateResourceShareInput) (*ram.AssociateResourceShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResourceShare", arg0)
	ret0, _ := ret[0].(*ram.AssociateResourceShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResourceShare indicates an expected call of AssociateResourceShare
func (mr *MockRAMAPIMockRecorder) AssociateResourceShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResourceShare", reflect.TypeOf((*MockRAMAPI)(nil).AssociateResourceShare), arg0)
}

// AssociateResourceShareRequest mocks base method
func (m *MockRAMAPI) AssociateResourceShareRequest(arg0 *ram.AssociateResourceShareInput) (*request.Request, *ram.AssociateResourceShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResourceShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.AssociateResourceShareOutput)
	return ret0, ret1
}

// AssociateResourceShareRequest indicates an expected call of AssociateResourceShareRequest
func (mr *MockRAMAPIMockRecorder) AssociateResourceShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResourceShareRequest", reflect.TypeOf((*MockRAMAPI)(nil).AssociateResourceShareRequest), arg0)
}

// AssociateResourceShareWithContext mocks base method
func (m *MockRAMAPI) AssociateResourceShareWithContext(arg0 context.Context, arg1 *ram.AssociateResourceShareInput, arg2 ...request.Option) (*ram.AssociateResourceShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateResourceShareWithContext", varargs...)
	ret0, _ := ret[0].(*ram.AssociateResourceShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResourceShareWithContext indicates an expected call of AssociateResourceShareWithContext
func (mr *MockRAMAPIMockRecorder) AssociateResourceShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResourceShareWithContext", reflect.TypeOf((*MockRAMAPI)(nil).AssociateResourceShareWithContext), varargs...)
}

// CreateResourceShare mocks base method
func (m *MockRAMAPI) CreateResourceShare(arg0 *ram.CreateResourceShareInput) (*ram.CreateResourceShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceShare", arg0)
	ret0, _ := ret[0].(*ram.CreateResourceShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceShare indicates an expected call of CreateResourceShare
func (mr *MockRAMAPIMockRecorder) CreateResourceShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceShare", reflect.TypeOf((*MockRAMAPI)(nil).CreateResourceShare), arg0)
}

// CreateResourceShareRequest mocks base method
func (m *MockRAMAPI) CreateResourceShareRequest(arg0 *ram.CreateResourceShareInput) (*request.Request, *ram.CreateResourceShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.CreateResourceShareOutput)
	return ret0, ret1
}

// CreateResourceShareRequest indicates an expected call of CreateResourceShareRequest
func (mr *MockRAMAPIMockRecorder) CreateResourceShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceShareRequest", reflect.TypeOf((*MockRAMAPI)(nil).CreateResourceShareRequest), arg0)
}

// CreateResourceShareWithContext mocks base method
func (m *MockRAMAPI) CreateResourceShareWithContext(arg0 context.Context, arg1 *ram.CreateResourceShareInput, arg2 ...request.Option) (*ram.CreateResourceShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResourceShareWithContext", varargs...)
	ret0, _ := ret[0].(*ram.CreateResourceShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceShareWithContext indicates an expected call of CreateResourceShareWithContext
func (mr *MockRAMAPIMockRecorder) CreateResourceShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceShareWithContext", reflect.TypeOf((*MockRAMAPI)(nil).CreateResourceShareWithContext), varargs...)
}

// DeleteResourceShare mocks base method
func (m *MockRAMAPI) DeleteResourceShare(arg0 *ram.DeleteResourceShareInput) (*ram.DeleteResourceShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceShare", arg0)
	ret0, _ := ret[0].(*ram.DeleteResourceShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceShare indicates an expected call of DeleteResourceShare
func (mr *MockRAMAPIMockRecorder) DeleteResourceShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceShare", reflect.TypeOf((*MockRAMAPI)(nil).DeleteResourceShare), arg0)
}

// DeleteResourceShareRequest mocks base method
func (m *MockRAMAPI) DeleteResourceShareRequest(arg0 *ram.DeleteResourceShareInput) (*request.Request, *ram.DeleteResourceShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.DeleteResourceShareOutput)
	return ret0, ret1
}

// DeleteResourceShareRequest indicates an expected call of DeleteResourceShareRequest
func (mr *MockRAMAPIMockRecorder) DeleteResourceShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceShareRequest", reflect.TypeOf((*MockRAMAPI)(nil).DeleteResourceShareRequest), arg0)
}

// DeleteResourceShareWithContext mocks base method
func (m *MockRAMAPI) DeleteResourceShareWithContext(arg0 context.Context, arg1 *ram.DeleteResourceShareInput, arg2 ...request.Option) (*ram.DeleteResourceShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourceShareWithContext", varargs...)
	ret0, _ := ret[0].(*ram.DeleteResourceShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceShareWithContext indicates an expected call of DeleteResourceShareWithContext
func (mr *MockRAMAPIMockRecorder) DeleteResourceShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceShareWithContext", reflect.TypeOf((*MockRAMAPI)(nil).DeleteResourceShareWithContext), varargs...)
}

// DisassociateResourceShare mocks base method
func (m *MockRAMAPI) DisassociateResourceShare(arg0 *ram.DisassociateResourceShareInput) (*ram.DisassociateResourceShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResourceShare", arg0)
	ret0, _ := ret[0].(*ram.DisassociateResourceShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResourceShare indicates an expected call of DisassociateResourceShare
func (mr *MockRAMAPIMockRecorder) DisassociateResourceShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResourceShare", reflect.TypeOf((*MockRAMAPI)(nil).DisassociateResourceShare), arg0)
}

// DisassociateResourceShareRequest mocks base method
func (m *MockRAMAPI) DisassociateResourceShareRequest(arg0 *ram.DisassociateResourceShareInput) (*request.Request, *ram.DisassociateResourceShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResourceShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.DisassociateResourceShareOutput)
	return ret0, ret1
}

// DisassociateResourceShareRequest indicates an expected call of DisassociateResourceShareRequest
func (mr *MockRAMAPIMockRecorder) DisassociateResourceShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResourceShareRequest", reflect.TypeOf((*MockRAMAPI)(nil).DisassociateResourceShareRequest), arg0)
}

// DisassociateResourceShareWithContext mocks base method
func (m *MockRAMAPI) DisassociateResourceShareWithContext(arg0 context.Context, arg1 *ram.DisassociateResourceShareInput, arg2 ...request.Option) (*ram.DisassociateResourceShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateResourceShareWithContext", varargs...)
	ret0, _ := ret[0].(*ram.DisassociateResourceShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResourceShareWithContext indicates an expected call of DisassociateResourceShareWithContext
func (mr *MockRAMAPIMockRecorder) DisassociateResourceShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResourceShareWithContext", reflect.TypeOf((*MockRAMAPI)(nil).DisassociateResourceShareWithContext), varargs...)
}

// EnableSharingWithAwsOrganization mocks base method
func (m *MockRAMAPI) EnableSharingWithAwsOrganization(arg0 *ram.EnableSharingWithAwsOrganizationInput) (*ram.EnableSharingWithAwsOrganizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSharingWithAwsOrganization", arg0)
	ret0, _ := ret[0].(*ram.EnableSharingWithAwsOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableSharingWithAwsOrganization indicates an expected call of EnableSharingWithAwsOrganization
func (mr *MockRAMAPIMockRecorder) EnableSharingWithAwsOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSharingWithAwsOrganization", reflect.TypeOf((*MockRAMAPI)(nil).EnableSharingWithAwsOrganization), arg0)
}

// EnableSharingWithAwsOrganizationRequest mocks base method
func (m *MockRAMAPI) EnableSharingWithAwsOrganizationRequest(arg0 *ram.EnableSharingWithAwsOrganizationInput) (*request.Request, *ram.EnableSharingWithAwsOrganizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSharingWithAwsOrganizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.EnableSharingWithAwsOrganizationOutput)
	return ret0, ret1
}

// EnableSharingWithAwsOrganizationRequest indicates an expected call of EnableSharingWithAwsOrganizationRequest
func (mr *MockRAMAPIMockRecorder) EnableSharingWithAwsOrganizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSharingWithAwsOrganizationRequest", reflect.TypeOf((*MockRAMAPI)(nil).EnableSharingWithAwsOrganizationRequest), arg0)
}

// EnableSharingWithAwsOrganizationWithContext mocks base method
func (m *MockRAMAPI) EnableSharingWithAwsOrganizationWithContext(arg0 context.Context, arg1 *ram.EnableSharingWithAwsOrganizationInput, arg2 ...request.Option) (*ram.EnableSharingWithAwsOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableSharingWithAwsOrganizationWithContext", varargs...)
	ret0, _ := ret[0].(*ram.EnableSharingWithAwsOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableSharingWithAwsOrganizationWithContext indicates an expected call of EnableSharingWithAwsOrganizationWithContext
func (mr *MockRAMAPIMockRecorder) EnableSharingWithAwsOrganizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSharingWithAwsOrganizationWithContext", reflect.TypeOf((*MockRAMAPI)(nil).EnableSharingWithAwsOrganizationWithContext), varargs...)
}

// GetResourcePolicies mocks base method
func (m *MockRAMAPI) GetResourcePolicies(arg0 *ram.GetResourcePoliciesInput) (*ram.GetResourcePoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicies", arg0)
	ret0, _ := ret[0].(*ram.GetResourcePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicies indicates an expected call of GetResourcePolicies
func (mr *MockRAMAPIMockRecorder) GetResourcePolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicies", reflect.TypeOf((*MockRAMAPI)(nil).GetResourcePolicies), arg0)
}

// GetResourcePoliciesPages mocks base method
func (m *MockRAMAPI) GetResourcePoliciesPages(arg0 *ram.GetResourcePoliciesInput, arg1 func(*ram.GetResourcePoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourcePoliciesPages indicates an expected call of GetResourcePoliciesPages
func (mr *MockRAMAPIMockRecorder) GetResourcePoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesPages", reflect.TypeOf((*MockRAMAPI)(nil).GetResourcePoliciesPages), arg0, arg1)
}

// GetResourcePoliciesPagesWithContext mocks base method
func (m *MockRAMAPI) GetResourcePoliciesPagesWithContext(arg0 context.Context, arg1 *ram.GetResourcePoliciesInput, arg2 func(*ram.GetResourcePoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourcePoliciesPagesWithContext indicates an expected call of GetResourcePoliciesPagesWithContext
func (mr *MockRAMAPIMockRecorder) GetResourcePoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesPagesWithContext", reflect.TypeOf((*MockRAMAPI)(nil).GetResourcePoliciesPagesWithContext), varargs...)
}

// GetResourcePoliciesRequest mocks base method
func (m *MockRAMAPI) GetResourcePoliciesRequest(arg0 *ram.GetResourcePoliciesInput) (*request.Request, *ram.GetResourcePoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.GetResourcePoliciesOutput)
	return ret0, ret1
}

// GetResourcePoliciesRequest indicates an expected call of GetResourcePoliciesRequest
func (mr *MockRAMAPIMockRecorder) GetResourcePoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesRequest", reflect.TypeOf((*MockRAMAPI)(nil).GetResourcePoliciesRequest), arg0)
}

// GetResourcePoliciesWithContext mocks base method
func (m *MockRAMAPI) GetResourcePoliciesWithContext(arg0 context.Context, arg1 *ram.GetResourcePoliciesInput, arg2 ...request.Option) (*ram.GetResourcePoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*ram.GetResourcePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePoliciesWithContext indicates an expected call of GetResourcePoliciesWithContext
func (mr *MockRAMAPIMockRecorder) GetResourcePoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesWithContext", reflect.TypeOf((*MockRAMAPI)(nil).GetResourcePoliciesWithContext), varargs...)
}

// GetResourceShareAssociations mocks base method
func (m *MockRAMAPI) GetResourceShareAssociations(arg0 *ram.GetResourceShareAssociationsInput) (*ram.GetResourceShareAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceShareAssociations", arg0)
	ret0, _ := ret[0].(*ram.GetResourceShareAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceShareAssociations indicates an expected call of GetResourceShareAssociations
func (mr *MockRAMAPIMockRecorder) GetResourceShareAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShareAssociations", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShareAssociations), arg0)
}

// GetResourceShareAssociationsPages mocks base method
func (m *MockRAMAPI) GetResourceShareAssociationsPages(arg0 *ram.GetResourceShareAssociationsInput, arg1 func(*ram.GetResourceShareAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceShareAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourceShareAssociationsPages indicates an expected call of GetResourceShareAssociationsPages
func (mr *MockRAMAPIMockRecorder) GetResourceShareAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShareAssociationsPages", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShareAssociationsPages), arg0, arg1)
}

// GetResourceShareAssociationsPagesWithContext mocks base method
func (m *MockRAMAPI) GetResourceShareAssociationsPagesWithContext(arg0 context.Context, arg1 *ram.GetResourceShareAssociationsInput, arg2 func(*ram.GetResourceShareAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceShareAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourceShareAssociationsPagesWithContext indicates an expected call of GetResourceShareAssociationsPagesWithContext
func (mr *MockRAMAPIMockRecorder) GetResourceShareAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShareAssociationsPagesWithContext", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShareAssociationsPagesWithContext), varargs...)
}

// GetResourceShareAssociationsRequest mocks base method
func (m *MockRAMAPI) GetResourceShareAssociationsRequest(arg0 *ram.GetResourceShareAssociationsInput) (*request.Request, *ram.GetResourceShareAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceShareAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.GetResourceShareAssociationsOutput)
	return ret0, ret1
}

// GetResourceShareAssociationsRequest indicates an expected call of GetResourceShareAssociationsRequest
func (mr *MockRAMAPIMockRecorder) GetResourceShareAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShareAssociationsRequest", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShareAssociationsRequest), arg0)
}

// GetResourceShareAssociationsWithContext mocks base method
func (m *MockRAMAPI) GetResourceShareAssociationsWithContext(arg0 context.Context, arg1 *ram.GetResourceShareAssociationsInput, arg2 ...request.Option) (*ram.GetResourceShareAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceShareAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*ram.GetResourceShareAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceShareAssociationsWithContext indicates an expected call of GetResourceShareAssociationsWithContext
func (mr *MockRAMAPIMockRecorder) GetResourceShareAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShareAssociationsWithContext", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShareAssociationsWithContext), varargs...)
}

// GetResourceShareInvitations mocks base method
func (m *MockRAMAPI) GetResourceShareInvitations(arg0 *ram.GetResourceShareInvitationsInput) (*ram.GetResourceShareInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceShareInvitations", arg0)
	ret0, _ := ret[0].(*ram.GetResourceShareInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceShareInvitations indicates an expected call of GetResourceShareInvitations
func (mr *MockRAMAPIMockRecorder) GetResourceShareInvitations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShareInvitations", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShareInvitations), arg0)
}

// GetResourceShareInvitationsPages mocks base method
func (m *MockRAMAPI) GetResourceShareInvitationsPages(arg0 *ram.GetResourceShareInvitationsInput, arg1 func(*ram.GetResourceShareInvitationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceShareInvitationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourceShareInvitationsPages indicates an expected call of GetResourceShareInvitationsPages
func (mr *MockRAMAPIMockRecorder) GetResourceShareInvitationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShareInvitationsPages", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShareInvitationsPages), arg0, arg1)
}

// GetResourceShareInvitationsPagesWithContext mocks base method
func (m *MockRAMAPI) GetResourceShareInvitationsPagesWithContext(arg0 context.Context, arg1 *ram.GetResourceShareInvitationsInput, arg2 func(*ram.GetResourceShareInvitationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceShareInvitationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourceShareInvitationsPagesWithContext indicates an expected call of GetResourceShareInvitationsPagesWithContext
func (mr *MockRAMAPIMockRecorder) GetResourceShareInvitationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShareInvitationsPagesWithContext", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShareInvitationsPagesWithContext), varargs...)
}

// GetResourceShareInvitationsRequest mocks base method
func (m *MockRAMAPI) GetResourceShareInvitationsRequest(arg0 *ram.GetResourceShareInvitationsInput) (*request.Request, *ram.GetResourceShareInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceShareInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.GetResourceShareInvitationsOutput)
	return ret0, ret1
}

// GetResourceShareInvitationsRequest indicates an expected call of GetResourceShareInvitationsRequest
func (mr *MockRAMAPIMockRecorder) GetResourceShareInvitationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShareInvitationsRequest", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShareInvitationsRequest), arg0)
}

// GetResourceShareInvitationsWithContext mocks base method
func (m *MockRAMAPI) GetResourceShareInvitationsWithContext(arg0 context.Context, arg1 *ram.GetResourceShareInvitationsInput, arg2 ...request.Option) (*ram.GetResourceShareInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceShareInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*ram.GetResourceShareInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceShareInvitationsWithContext indicates an expected call of GetResourceShareInvitationsWithContext
func (mr *MockRAMAPIMockRecorder) GetResourceShareInvitationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShareInvitationsWithContext", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShareInvitationsWithContext), varargs...)
}

// GetResourceShares mocks base method
func (m *MockRAMAPI) GetResourceShares(arg0 *ram.GetResourceSharesInput) (*ram.GetResourceSharesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceShares", arg0)
	ret0, _ := ret[0].(*ram.GetResourceSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceShares indicates an expected call of GetResourceShares
func (mr *MockRAMAPIMockRecorder) GetResourceShares(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceShares", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceShares), arg0)
}

// GetResourceSharesPages mocks base method
func (m *MockRAMAPI) GetResourceSharesPages(arg0 *ram.GetResourceSharesInput, arg1 func(*ram.GetResourceSharesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceSharesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourceSharesPages indicates an expected call of GetResourceSharesPages
func (mr *MockRAMAPIMockRecorder) GetResourceSharesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSharesPages", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceSharesPages), arg0, arg1)
}

// GetResourceSharesPagesWithContext mocks base method
func (m *MockRAMAPI) GetResourceSharesPagesWithContext(arg0 context.Context, arg1 *ram.GetResourceSharesInput, arg2 func(*ram.GetResourceSharesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceSharesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourceSharesPagesWithContext indicates an expected call of GetResourceSharesPagesWithContext
func (mr *MockRAMAPIMockRecorder) GetResourceSharesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSharesPagesWithContext", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceSharesPagesWithContext), varargs...)
}

// GetResourceSharesRequest mocks base method
func (m *MockRAMAPI) GetResourceSharesRequest(arg0 *ram.GetResourceSharesInput) (*request.Request, *ram.GetResourceSharesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceSharesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.GetResourceSharesOutput)
	return ret0, ret1
}

// GetResourceSharesRequest indicates an expected call of GetResourceSharesRequest
func (mr *MockRAMAPIMockRecorder) GetResourceSharesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSharesRequest", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceSharesRequest), arg0)
}

// GetResourceSharesWithContext mocks base method
func (m *MockRAMAPI) GetResourceSharesWithContext(arg0 context.Context, arg1 *ram.GetResourceSharesInput, arg2 ...request.Option) (*ram.GetResourceSharesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceSharesWithContext", varargs...)
	ret0, _ := ret[0].(*ram.GetResourceSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceSharesWithContext indicates an expected call of GetResourceSharesWithContext
func (mr *MockRAMAPIMockRecorder) GetResourceSharesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSharesWithContext", reflect.TypeOf((*MockRAMAPI)(nil).GetResourceSharesWithContext), varargs...)
}

// ListPrincipals mocks base method
func (m *MockRAMAPI) ListPrincipals(arg0 *ram.ListPrincipalsInput) (*ram.ListPrincipalsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrincipals", arg0)
	ret0, _ := ret[0].(*ram.ListPrincipalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipals indicates an expected call of ListPrincipals
func (mr *MockRAMAPIMockRecorder) ListPrincipals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipals", reflect.TypeOf((*MockRAMAPI)(nil).ListPrincipals), arg0)
}

// ListPrincipalsPages mocks base method
func (m *MockRAMAPI) ListPrincipalsPages(arg0 *ram.ListPrincipalsInput, arg1 func(*ram.ListPrincipalsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrincipalsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPrincipalsPages indicates an expected call of ListPrincipalsPages
func (mr *MockRAMAPIMockRecorder) ListPrincipalsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalsPages", reflect.TypeOf((*MockRAMAPI)(nil).ListPrincipalsPages), arg0, arg1)
}

// ListPrincipalsPagesWithContext mocks base method
func (m *MockRAMAPI) ListPrincipalsPagesWithContext(arg0 context.Context, arg1 *ram.ListPrincipalsInput, arg2 func(*ram.ListPrincipalsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrincipalsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPrincipalsPagesWithContext indicates an expected call of ListPrincipalsPagesWithContext
func (mr *MockRAMAPIMockRecorder) ListPrincipalsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalsPagesWithContext", reflect.TypeOf((*MockRAMAPI)(nil).ListPrincipalsPagesWithContext), varargs...)
}

// ListPrincipalsRequest mocks base method
func (m *MockRAMAPI) ListPrincipalsRequest(arg0 *ram.ListPrincipalsInput) (*request.Request, *ram.ListPrincipalsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrincipalsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.ListPrincipalsOutput)
	return ret0, ret1
}

// ListPrincipalsRequest indicates an expected call of ListPrincipalsRequest
func (mr *MockRAMAPIMockRecorder) ListPrincipalsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalsRequest", reflect.TypeOf((*MockRAMAPI)(nil).ListPrincipalsRequest), arg0)
}

// ListPrincipalsWithContext mocks base method
func (m *MockRAMAPI) ListPrincipalsWithContext(arg0 context.Context, arg1 *ram.ListPrincipalsInput, arg2 ...request.Option) (*ram.ListPrincipalsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrincipalsWithContext", varargs...)
	ret0, _ := ret[0].(*ram.ListPrincipalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipalsWithContext indicates an expected call of ListPrincipalsWithContext
func (mr *MockRAMAPIMockRecorder) ListPrincipalsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalsWithContext", reflect.TypeOf((*MockRAMAPI)(nil).ListPrincipalsWithContext), varargs...)
}

// ListResources mocks base method
func (m *MockRAMAPI) ListResources(arg0 *ram.ListResourcesInput) (*ram.ListResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0)
	ret0, _ := ret[0].(*ram.ListResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources
func (mr *MockRAMAPIMockRecorder) ListResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockRAMAPI)(nil).ListResources), arg0)
}

// ListResourcesPages mocks base method
func (m *MockRAMAPI) ListResourcesPages(arg0 *ram.ListResourcesInput, arg1 func(*ram.ListResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourcesPages indicates an expected call of ListResourcesPages
func (mr *MockRAMAPIMockRecorder) ListResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesPages", reflect.TypeOf((*MockRAMAPI)(nil).ListResourcesPages), arg0, arg1)
}

// ListResourcesPagesWithContext mocks base method
func (m *MockRAMAPI) ListResourcesPagesWithContext(arg0 context.Context, arg1 *ram.ListResourcesInput, arg2 func(*ram.ListResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourcesPagesWithContext indicates an expected call of ListResourcesPagesWithContext
func (mr *MockRAMAPIMockRecorder) ListResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesPagesWithContext", reflect.TypeOf((*MockRAMAPI)(nil).ListResourcesPagesWithContext), varargs...)
}

// ListResourcesRequest mocks base method
func (m *MockRAMAPI) ListResourcesRequest(arg0 *ram.ListResourcesInput) (*request.Request, *ram.ListResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.ListResourcesOutput)
	return ret0, ret1
}

// ListResourcesRequest indicates an expected call of ListResourcesRequest
func (mr *MockRAMAPIMockRecorder) ListResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesRequest", reflect.TypeOf((*MockRAMAPI)(nil).ListResourcesRequest), arg0)
}

// ListResourcesWithContext mocks base method
func (m *MockRAMAPI) ListResourcesWithContext(arg0 context.Context, arg1 *ram.ListResourcesInput, arg2 ...request.Option) (*ram.ListResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*ram.ListResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesWithContext indicates an expected call of ListResourcesWithContext
func (mr *MockRAMAPIMockRecorder) ListResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesWithContext", reflect.TypeOf((*MockRAMAPI)(nil).ListResourcesWithContext), varargs...)
}

// RejectResourceShareInvitation mocks base method
func (m *MockRAMAPI) RejectResourceShareInvitation(arg0 *ram.RejectResourceShareInvitationInput) (*ram.RejectResourceShareInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectResourceShareInvitation", arg0)
	ret0, _ := ret[0].(*ram.RejectResourceShareInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectResourceShareInvitation indicates an expected call of RejectResourceShareInvitation
func (mr *MockRAMAPIMockRecorder) RejectResourceShareInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectResourceShareInvitation", reflect.TypeOf((*MockRAMAPI)(nil).RejectResourceShareInvitation), arg0)
}

// RejectResourceShareInvitationRequest mocks base method
func (m *MockRAMAPI) RejectResourceShareInvitationRequest(arg0 *ram.RejectResourceShareInvitationInput) (*request.Request, *ram.RejectResourceShareInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectResourceShareInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.RejectResourceShareInvitationOutput)
	return ret0, ret1
}

// RejectResourceShareInvitationRequest indicates an expected call of RejectResourceShareInvitationRequest
func (mr *MockRAMAPIMockRecorder) RejectResourceShareInvitationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectResourceShareInvitationRequest", reflect.TypeOf((*MockRAMAPI)(nil).RejectResourceShareInvitationRequest), arg0)
}

// RejectResourceShareInvitationWithContext mocks base method
func (m *MockRAMAPI) RejectResourceShareInvitationWithContext(arg0 context.Context, arg1 *ram.RejectResourceShareInvitationInput, arg2 ...request.Option) (*ram.RejectResourceShareInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectResourceShareInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*ram.RejectResourceShareInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectResourceShareInvitationWithContext indicates an expected call of RejectResourceShareInvitationWithContext
func (mr *MockRAMAPIMockRecorder) RejectResourceShareInvitationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectResourceShareInvitationWithContext", reflect.TypeOf((*MockRAMAPI)(nil).RejectResourceShareInvitationWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockRAMAPI) TagResource(arg0 *ram.TagResourceInput) (*ram.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*ram.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockRAMAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRAMAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockRAMAPI) TagResourceRequest(arg0 *ram.TagResourceInput) (*request.Request, *ram.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockRAMAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockRAMAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockRAMAPI) TagResourceWithContext(arg0 context.Context, arg1 *ram.TagResourceInput, arg2 ...request.Option) (*ram.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ram.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockRAMAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockRAMAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockRAMAPI) UntagResource(arg0 *ram.UntagResourceInput) (*ram.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*ram.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockRAMAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRAMAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockRAMAPI) UntagResourceRequest(arg0 *ram.UntagResourceInput) (*request.Request, *ram.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockRAMAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockRAMAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockRAMAPI) UntagResourceWithContext(arg0 context.Context, arg1 *ram.UntagResourceInput, arg2 ...request.Option) (*ram.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ram.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockRAMAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockRAMAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateResourceShare mocks base method
func (m *MockRAMAPI) UpdateResourceShare(arg0 *ram.UpdateResourceShareInput) (*ram.UpdateResourceShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceShare", arg0)
	ret0, _ := ret[0].(*ram.UpdateResourceShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceShare indicates an expected call of UpdateResourceShare
func (mr *MockRAMAPIMockRecorder) UpdateResourceShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceShare", reflect.TypeOf((*MockRAMAPI)(nil).UpdateResourceShare), arg0)
}

// UpdateResourceShareRequest mocks base method
func (m *MockRAMAPI) UpdateResourceShareRequest(arg0 *ram.UpdateResourceShareInput) (*request.Request, *ram.UpdateResourceShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ram.UpdateResourceShareOutput)
	return ret0, ret1
}

// UpdateResourceShareRequest indicates an expected call of UpdateResourceShareRequest
func (mr *MockRAMAPIMockRecorder) UpdateResourceShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceShareRequest", reflect.TypeOf((*MockRAMAPI)(nil).UpdateResourceShareRequest), arg0)
}

// UpdateResourceShareWithContext mocks base method
func (m *MockRAMAPI) UpdateResourceShareWithContext(arg0 context.Context, arg1 *ram.UpdateResourceShareInput, arg2 ...request.Option) (*ram.UpdateResourceShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourceShareWithContext", varargs...)
	ret0, _ := ret[0].(*ram.UpdateResourceShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceShareWithContext indicates an expected call of UpdateResourceShareWithContext
func (mr *MockRAMAPIMockRecorder) UpdateResourceShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceShareWithContext", reflect.TypeOf((*MockRAMAPI)(nil).UpdateResourceShareWithContext), varargs...)
}
