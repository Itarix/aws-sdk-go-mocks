// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/fis/fisiface (interfaces: FISAPI)

// Package fismock is a generated GoMock package.
package fismock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	fis "github.com/aws/aws-sdk-go/service/fis"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFISAPI is a mock of FISAPI interface
type MockFISAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFISAPIMockRecorder
}

// MockFISAPIMockRecorder is the mock recorder for MockFISAPI
type MockFISAPIMockRecorder struct {
	mock *MockFISAPI
}

// NewMockFISAPI creates a new mock instance
func NewMockFISAPI(ctrl *gomock.Controller) *MockFISAPI {
	mock := &MockFISAPI{ctrl: ctrl}
	mock.recorder = &MockFISAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFISAPI) EXPECT() *MockFISAPIMockRecorder {
	return m.recorder
}

// CreateExperimentTemplate mocks base method
func (m *MockFISAPI) CreateExperimentTemplate(arg0 *fis.CreateExperimentTemplateInput) (*fis.CreateExperimentTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExperimentTemplate", arg0)
	ret0, _ := ret[0].(*fis.CreateExperimentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExperimentTemplate indicates an expected call of CreateExperimentTemplate
func (mr *MockFISAPIMockRecorder) CreateExperimentTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExperimentTemplate", reflect.TypeOf((*MockFISAPI)(nil).CreateExperimentTemplate), arg0)
}

// CreateExperimentTemplateRequest mocks base method
func (m *MockFISAPI) CreateExperimentTemplateRequest(arg0 *fis.CreateExperimentTemplateInput) (*request.Request, *fis.CreateExperimentTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExperimentTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.CreateExperimentTemplateOutput)
	return ret0, ret1
}

// CreateExperimentTemplateRequest indicates an expected call of CreateExperimentTemplateRequest
func (mr *MockFISAPIMockRecorder) CreateExperimentTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExperimentTemplateRequest", reflect.TypeOf((*MockFISAPI)(nil).CreateExperimentTemplateRequest), arg0)
}

// CreateExperimentTemplateWithContext mocks base method
func (m *MockFISAPI) CreateExperimentTemplateWithContext(arg0 context.Context, arg1 *fis.CreateExperimentTemplateInput, arg2 ...request.Option) (*fis.CreateExperimentTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExperimentTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*fis.CreateExperimentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExperimentTemplateWithContext indicates an expected call of CreateExperimentTemplateWithContext
func (mr *MockFISAPIMockRecorder) CreateExperimentTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExperimentTemplateWithContext", reflect.TypeOf((*MockFISAPI)(nil).CreateExperimentTemplateWithContext), varargs...)
}

// CreateTargetAccountConfiguration mocks base method
func (m *MockFISAPI) CreateTargetAccountConfiguration(arg0 *fis.CreateTargetAccountConfigurationInput) (*fis.CreateTargetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetAccountConfiguration", arg0)
	ret0, _ := ret[0].(*fis.CreateTargetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTargetAccountConfiguration indicates an expected call of CreateTargetAccountConfiguration
func (mr *MockFISAPIMockRecorder) CreateTargetAccountConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetAccountConfiguration", reflect.TypeOf((*MockFISAPI)(nil).CreateTargetAccountConfiguration), arg0)
}

// CreateTargetAccountConfigurationRequest mocks base method
func (m *MockFISAPI) CreateTargetAccountConfigurationRequest(arg0 *fis.CreateTargetAccountConfigurationInput) (*request.Request, *fis.CreateTargetAccountConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetAccountConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.CreateTargetAccountConfigurationOutput)
	return ret0, ret1
}

// CreateTargetAccountConfigurationRequest indicates an expected call of CreateTargetAccountConfigurationRequest
func (mr *MockFISAPIMockRecorder) CreateTargetAccountConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetAccountConfigurationRequest", reflect.TypeOf((*MockFISAPI)(nil).CreateTargetAccountConfigurationRequest), arg0)
}

// CreateTargetAccountConfigurationWithContext mocks base method
func (m *MockFISAPI) CreateTargetAccountConfigurationWithContext(arg0 context.Context, arg1 *fis.CreateTargetAccountConfigurationInput, arg2 ...request.Option) (*fis.CreateTargetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTargetAccountConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*fis.CreateTargetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTargetAccountConfigurationWithContext indicates an expected call of CreateTargetAccountConfigurationWithContext
func (mr *MockFISAPIMockRecorder) CreateTargetAccountConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetAccountConfigurationWithContext", reflect.TypeOf((*MockFISAPI)(nil).CreateTargetAccountConfigurationWithContext), varargs...)
}

// DeleteExperimentTemplate mocks base method
func (m *MockFISAPI) DeleteExperimentTemplate(arg0 *fis.DeleteExperimentTemplateInput) (*fis.DeleteExperimentTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExperimentTemplate", arg0)
	ret0, _ := ret[0].(*fis.DeleteExperimentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExperimentTemplate indicates an expected call of DeleteExperimentTemplate
func (mr *MockFISAPIMockRecorder) DeleteExperimentTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExperimentTemplate", reflect.TypeOf((*MockFISAPI)(nil).DeleteExperimentTemplate), arg0)
}

// DeleteExperimentTemplateRequest mocks base method
func (m *MockFISAPI) DeleteExperimentTemplateRequest(arg0 *fis.DeleteExperimentTemplateInput) (*request.Request, *fis.DeleteExperimentTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExperimentTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.DeleteExperimentTemplateOutput)
	return ret0, ret1
}

// DeleteExperimentTemplateRequest indicates an expected call of DeleteExperimentTemplateRequest
func (mr *MockFISAPIMockRecorder) DeleteExperimentTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExperimentTemplateRequest", reflect.TypeOf((*MockFISAPI)(nil).DeleteExperimentTemplateRequest), arg0)
}

// DeleteExperimentTemplateWithContext mocks base method
func (m *MockFISAPI) DeleteExperimentTemplateWithContext(arg0 context.Context, arg1 *fis.DeleteExperimentTemplateInput, arg2 ...request.Option) (*fis.DeleteExperimentTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExperimentTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*fis.DeleteExperimentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExperimentTemplateWithContext indicates an expected call of DeleteExperimentTemplateWithContext
func (mr *MockFISAPIMockRecorder) DeleteExperimentTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExperimentTemplateWithContext", reflect.TypeOf((*MockFISAPI)(nil).DeleteExperimentTemplateWithContext), varargs...)
}

// DeleteTargetAccountConfiguration mocks base method
func (m *MockFISAPI) DeleteTargetAccountConfiguration(arg0 *fis.DeleteTargetAccountConfigurationInput) (*fis.DeleteTargetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetAccountConfiguration", arg0)
	ret0, _ := ret[0].(*fis.DeleteTargetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTargetAccountConfiguration indicates an expected call of DeleteTargetAccountConfiguration
func (mr *MockFISAPIMockRecorder) DeleteTargetAccountConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetAccountConfiguration", reflect.TypeOf((*MockFISAPI)(nil).DeleteTargetAccountConfiguration), arg0)
}

// DeleteTargetAccountConfigurationRequest mocks base method
func (m *MockFISAPI) DeleteTargetAccountConfigurationRequest(arg0 *fis.DeleteTargetAccountConfigurationInput) (*request.Request, *fis.DeleteTargetAccountConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetAccountConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.DeleteTargetAccountConfigurationOutput)
	return ret0, ret1
}

// DeleteTargetAccountConfigurationRequest indicates an expected call of DeleteTargetAccountConfigurationRequest
func (mr *MockFISAPIMockRecorder) DeleteTargetAccountConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetAccountConfigurationRequest", reflect.TypeOf((*MockFISAPI)(nil).DeleteTargetAccountConfigurationRequest), arg0)
}

// DeleteTargetAccountConfigurationWithContext mocks base method
func (m *MockFISAPI) DeleteTargetAccountConfigurationWithContext(arg0 context.Context, arg1 *fis.DeleteTargetAccountConfigurationInput, arg2 ...request.Option) (*fis.DeleteTargetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTargetAccountConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*fis.DeleteTargetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTargetAccountConfigurationWithContext indicates an expected call of DeleteTargetAccountConfigurationWithContext
func (mr *MockFISAPIMockRecorder) DeleteTargetAccountConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetAccountConfigurationWithContext", reflect.TypeOf((*MockFISAPI)(nil).DeleteTargetAccountConfigurationWithContext), varargs...)
}

// GetAction mocks base method
func (m *MockFISAPI) GetAction(arg0 *fis.GetActionInput) (*fis.GetActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", arg0)
	ret0, _ := ret[0].(*fis.GetActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAction indicates an expected call of GetAction
func (mr *MockFISAPIMockRecorder) GetAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockFISAPI)(nil).GetAction), arg0)
}

// GetActionRequest mocks base method
func (m *MockFISAPI) GetActionRequest(arg0 *fis.GetActionInput) (*request.Request, *fis.GetActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.GetActionOutput)
	return ret0, ret1
}

// GetActionRequest indicates an expected call of GetActionRequest
func (mr *MockFISAPIMockRecorder) GetActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionRequest", reflect.TypeOf((*MockFISAPI)(nil).GetActionRequest), arg0)
}

// GetActionWithContext mocks base method
func (m *MockFISAPI) GetActionWithContext(arg0 context.Context, arg1 *fis.GetActionInput, arg2 ...request.Option) (*fis.GetActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActionWithContext", varargs...)
	ret0, _ := ret[0].(*fis.GetActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionWithContext indicates an expected call of GetActionWithContext
func (mr *MockFISAPIMockRecorder) GetActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionWithContext", reflect.TypeOf((*MockFISAPI)(nil).GetActionWithContext), varargs...)
}

// GetExperiment mocks base method
func (m *MockFISAPI) GetExperiment(arg0 *fis.GetExperimentInput) (*fis.GetExperimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperiment", arg0)
	ret0, _ := ret[0].(*fis.GetExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperiment indicates an expected call of GetExperiment
func (mr *MockFISAPIMockRecorder) GetExperiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperiment", reflect.TypeOf((*MockFISAPI)(nil).GetExperiment), arg0)
}

// GetExperimentRequest mocks base method
func (m *MockFISAPI) GetExperimentRequest(arg0 *fis.GetExperimentInput) (*request.Request, *fis.GetExperimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.GetExperimentOutput)
	return ret0, ret1
}

// GetExperimentRequest indicates an expected call of GetExperimentRequest
func (mr *MockFISAPIMockRecorder) GetExperimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentRequest", reflect.TypeOf((*MockFISAPI)(nil).GetExperimentRequest), arg0)
}

// GetExperimentTargetAccountConfiguration mocks base method
func (m *MockFISAPI) GetExperimentTargetAccountConfiguration(arg0 *fis.GetExperimentTargetAccountConfigurationInput) (*fis.GetExperimentTargetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperimentTargetAccountConfiguration", arg0)
	ret0, _ := ret[0].(*fis.GetExperimentTargetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperimentTargetAccountConfiguration indicates an expected call of GetExperimentTargetAccountConfiguration
func (mr *MockFISAPIMockRecorder) GetExperimentTargetAccountConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentTargetAccountConfiguration", reflect.TypeOf((*MockFISAPI)(nil).GetExperimentTargetAccountConfiguration), arg0)
}

// GetExperimentTargetAccountConfigurationRequest mocks base method
func (m *MockFISAPI) GetExperimentTargetAccountConfigurationRequest(arg0 *fis.GetExperimentTargetAccountConfigurationInput) (*request.Request, *fis.GetExperimentTargetAccountConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperimentTargetAccountConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.GetExperimentTargetAccountConfigurationOutput)
	return ret0, ret1
}

// GetExperimentTargetAccountConfigurationRequest indicates an expected call of GetExperimentTargetAccountConfigurationRequest
func (mr *MockFISAPIMockRecorder) GetExperimentTargetAccountConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentTargetAccountConfigurationRequest", reflect.TypeOf((*MockFISAPI)(nil).GetExperimentTargetAccountConfigurationRequest), arg0)
}

// GetExperimentTargetAccountConfigurationWithContext mocks base method
func (m *MockFISAPI) GetExperimentTargetAccountConfigurationWithContext(arg0 context.Context, arg1 *fis.GetExperimentTargetAccountConfigurationInput, arg2 ...request.Option) (*fis.GetExperimentTargetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExperimentTargetAccountConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*fis.GetExperimentTargetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperimentTargetAccountConfigurationWithContext indicates an expected call of GetExperimentTargetAccountConfigurationWithContext
func (mr *MockFISAPIMockRecorder) GetExperimentTargetAccountConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentTargetAccountConfigurationWithContext", reflect.TypeOf((*MockFISAPI)(nil).GetExperimentTargetAccountConfigurationWithContext), varargs...)
}

// GetExperimentTemplate mocks base method
func (m *MockFISAPI) GetExperimentTemplate(arg0 *fis.GetExperimentTemplateInput) (*fis.GetExperimentTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperimentTemplate", arg0)
	ret0, _ := ret[0].(*fis.GetExperimentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperimentTemplate indicates an expected call of GetExperimentTemplate
func (mr *MockFISAPIMockRecorder) GetExperimentTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentTemplate", reflect.TypeOf((*MockFISAPI)(nil).GetExperimentTemplate), arg0)
}

// GetExperimentTemplateRequest mocks base method
func (m *MockFISAPI) GetExperimentTemplateRequest(arg0 *fis.GetExperimentTemplateInput) (*request.Request, *fis.GetExperimentTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperimentTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.GetExperimentTemplateOutput)
	return ret0, ret1
}

// GetExperimentTemplateRequest indicates an expected call of GetExperimentTemplateRequest
func (mr *MockFISAPIMockRecorder) GetExperimentTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentTemplateRequest", reflect.TypeOf((*MockFISAPI)(nil).GetExperimentTemplateRequest), arg0)
}

// GetExperimentTemplateWithContext mocks base method
func (m *MockFISAPI) GetExperimentTemplateWithContext(arg0 context.Context, arg1 *fis.GetExperimentTemplateInput, arg2 ...request.Option) (*fis.GetExperimentTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExperimentTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*fis.GetExperimentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperimentTemplateWithContext indicates an expected call of GetExperimentTemplateWithContext
func (mr *MockFISAPIMockRecorder) GetExperimentTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentTemplateWithContext", reflect.TypeOf((*MockFISAPI)(nil).GetExperimentTemplateWithContext), varargs...)
}

// GetExperimentWithContext mocks base method
func (m *MockFISAPI) GetExperimentWithContext(arg0 context.Context, arg1 *fis.GetExperimentInput, arg2 ...request.Option) (*fis.GetExperimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExperimentWithContext", varargs...)
	ret0, _ := ret[0].(*fis.GetExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperimentWithContext indicates an expected call of GetExperimentWithContext
func (mr *MockFISAPIMockRecorder) GetExperimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentWithContext", reflect.TypeOf((*MockFISAPI)(nil).GetExperimentWithContext), varargs...)
}

// GetTargetAccountConfiguration mocks base method
func (m *MockFISAPI) GetTargetAccountConfiguration(arg0 *fis.GetTargetAccountConfigurationInput) (*fis.GetTargetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetAccountConfiguration", arg0)
	ret0, _ := ret[0].(*fis.GetTargetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetAccountConfiguration indicates an expected call of GetTargetAccountConfiguration
func (mr *MockFISAPIMockRecorder) GetTargetAccountConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetAccountConfiguration", reflect.TypeOf((*MockFISAPI)(nil).GetTargetAccountConfiguration), arg0)
}

// GetTargetAccountConfigurationRequest mocks base method
func (m *MockFISAPI) GetTargetAccountConfigurationRequest(arg0 *fis.GetTargetAccountConfigurationInput) (*request.Request, *fis.GetTargetAccountConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetAccountConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.GetTargetAccountConfigurationOutput)
	return ret0, ret1
}

// GetTargetAccountConfigurationRequest indicates an expected call of GetTargetAccountConfigurationRequest
func (mr *MockFISAPIMockRecorder) GetTargetAccountConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetAccountConfigurationRequest", reflect.TypeOf((*MockFISAPI)(nil).GetTargetAccountConfigurationRequest), arg0)
}

// GetTargetAccountConfigurationWithContext mocks base method
func (m *MockFISAPI) GetTargetAccountConfigurationWithContext(arg0 context.Context, arg1 *fis.GetTargetAccountConfigurationInput, arg2 ...request.Option) (*fis.GetTargetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTargetAccountConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*fis.GetTargetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetAccountConfigurationWithContext indicates an expected call of GetTargetAccountConfigurationWithContext
func (mr *MockFISAPIMockRecorder) GetTargetAccountConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetAccountConfigurationWithContext", reflect.TypeOf((*MockFISAPI)(nil).GetTargetAccountConfigurationWithContext), varargs...)
}

// GetTargetResourceType mocks base method
func (m *MockFISAPI) GetTargetResourceType(arg0 *fis.GetTargetResourceTypeInput) (*fis.GetTargetResourceTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetResourceType", arg0)
	ret0, _ := ret[0].(*fis.GetTargetResourceTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetResourceType indicates an expected call of GetTargetResourceType
func (mr *MockFISAPIMockRecorder) GetTargetResourceType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetResourceType", reflect.TypeOf((*MockFISAPI)(nil).GetTargetResourceType), arg0)
}

// GetTargetResourceTypeRequest mocks base method
func (m *MockFISAPI) GetTargetResourceTypeRequest(arg0 *fis.GetTargetResourceTypeInput) (*request.Request, *fis.GetTargetResourceTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetResourceTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.GetTargetResourceTypeOutput)
	return ret0, ret1
}

// GetTargetResourceTypeRequest indicates an expected call of GetTargetResourceTypeRequest
func (mr *MockFISAPIMockRecorder) GetTargetResourceTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetResourceTypeRequest", reflect.TypeOf((*MockFISAPI)(nil).GetTargetResourceTypeRequest), arg0)
}

// GetTargetResourceTypeWithContext mocks base method
func (m *MockFISAPI) GetTargetResourceTypeWithContext(arg0 context.Context, arg1 *fis.GetTargetResourceTypeInput, arg2 ...request.Option) (*fis.GetTargetResourceTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTargetResourceTypeWithContext", varargs...)
	ret0, _ := ret[0].(*fis.GetTargetResourceTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetResourceTypeWithContext indicates an expected call of GetTargetResourceTypeWithContext
func (mr *MockFISAPIMockRecorder) GetTargetResourceTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetResourceTypeWithContext", reflect.TypeOf((*MockFISAPI)(nil).GetTargetResourceTypeWithContext), varargs...)
}

// ListActions mocks base method
func (m *MockFISAPI) ListActions(arg0 *fis.ListActionsInput) (*fis.ListActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActions", arg0)
	ret0, _ := ret[0].(*fis.ListActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActions indicates an expected call of ListActions
func (mr *MockFISAPIMockRecorder) ListActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActions", reflect.TypeOf((*MockFISAPI)(nil).ListActions), arg0)
}

// ListActionsPages mocks base method
func (m *MockFISAPI) ListActionsPages(arg0 *fis.ListActionsInput, arg1 func(*fis.ListActionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListActionsPages indicates an expected call of ListActionsPages
func (mr *MockFISAPIMockRecorder) ListActionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActionsPages", reflect.TypeOf((*MockFISAPI)(nil).ListActionsPages), arg0, arg1)
}

// ListActionsPagesWithContext mocks base method
func (m *MockFISAPI) ListActionsPagesWithContext(arg0 context.Context, arg1 *fis.ListActionsInput, arg2 func(*fis.ListActionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListActionsPagesWithContext indicates an expected call of ListActionsPagesWithContext
func (mr *MockFISAPIMockRecorder) ListActionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActionsPagesWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListActionsPagesWithContext), varargs...)
}

// ListActionsRequest mocks base method
func (m *MockFISAPI) ListActionsRequest(arg0 *fis.ListActionsInput) (*request.Request, *fis.ListActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.ListActionsOutput)
	return ret0, ret1
}

// ListActionsRequest indicates an expected call of ListActionsRequest
func (mr *MockFISAPIMockRecorder) ListActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActionsRequest", reflect.TypeOf((*MockFISAPI)(nil).ListActionsRequest), arg0)
}

// ListActionsWithContext mocks base method
func (m *MockFISAPI) ListActionsWithContext(arg0 context.Context, arg1 *fis.ListActionsInput, arg2 ...request.Option) (*fis.ListActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActionsWithContext", varargs...)
	ret0, _ := ret[0].(*fis.ListActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActionsWithContext indicates an expected call of ListActionsWithContext
func (mr *MockFISAPIMockRecorder) ListActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActionsWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListActionsWithContext), varargs...)
}

// ListExperimentResolvedTargets mocks base method
func (m *MockFISAPI) ListExperimentResolvedTargets(arg0 *fis.ListExperimentResolvedTargetsInput) (*fis.ListExperimentResolvedTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentResolvedTargets", arg0)
	ret0, _ := ret[0].(*fis.ListExperimentResolvedTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperimentResolvedTargets indicates an expected call of ListExperimentResolvedTargets
func (mr *MockFISAPIMockRecorder) ListExperimentResolvedTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentResolvedTargets", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentResolvedTargets), arg0)
}

// ListExperimentResolvedTargetsPages mocks base method
func (m *MockFISAPI) ListExperimentResolvedTargetsPages(arg0 *fis.ListExperimentResolvedTargetsInput, arg1 func(*fis.ListExperimentResolvedTargetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentResolvedTargetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExperimentResolvedTargetsPages indicates an expected call of ListExperimentResolvedTargetsPages
func (mr *MockFISAPIMockRecorder) ListExperimentResolvedTargetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentResolvedTargetsPages", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentResolvedTargetsPages), arg0, arg1)
}

// ListExperimentResolvedTargetsPagesWithContext mocks base method
func (m *MockFISAPI) ListExperimentResolvedTargetsPagesWithContext(arg0 context.Context, arg1 *fis.ListExperimentResolvedTargetsInput, arg2 func(*fis.ListExperimentResolvedTargetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExperimentResolvedTargetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExperimentResolvedTargetsPagesWithContext indicates an expected call of ListExperimentResolvedTargetsPagesWithContext
func (mr *MockFISAPIMockRecorder) ListExperimentResolvedTargetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentResolvedTargetsPagesWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentResolvedTargetsPagesWithContext), varargs...)
}

// ListExperimentResolvedTargetsRequest mocks base method
func (m *MockFISAPI) ListExperimentResolvedTargetsRequest(arg0 *fis.ListExperimentResolvedTargetsInput) (*request.Request, *fis.ListExperimentResolvedTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentResolvedTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.ListExperimentResolvedTargetsOutput)
	return ret0, ret1
}

// ListExperimentResolvedTargetsRequest indicates an expected call of ListExperimentResolvedTargetsRequest
func (mr *MockFISAPIMockRecorder) ListExperimentResolvedTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentResolvedTargetsRequest", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentResolvedTargetsRequest), arg0)
}

// ListExperimentResolvedTargetsWithContext mocks base method
func (m *MockFISAPI) ListExperimentResolvedTargetsWithContext(arg0 context.Context, arg1 *fis.ListExperimentResolvedTargetsInput, arg2 ...request.Option) (*fis.ListExperimentResolvedTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExperimentResolvedTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*fis.ListExperimentResolvedTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperimentResolvedTargetsWithContext indicates an expected call of ListExperimentResolvedTargetsWithContext
func (mr *MockFISAPIMockRecorder) ListExperimentResolvedTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentResolvedTargetsWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentResolvedTargetsWithContext), varargs...)
}

// ListExperimentTargetAccountConfigurations mocks base method
func (m *MockFISAPI) ListExperimentTargetAccountConfigurations(arg0 *fis.ListExperimentTargetAccountConfigurationsInput) (*fis.ListExperimentTargetAccountConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentTargetAccountConfigurations", arg0)
	ret0, _ := ret[0].(*fis.ListExperimentTargetAccountConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperimentTargetAccountConfigurations indicates an expected call of ListExperimentTargetAccountConfigurations
func (mr *MockFISAPIMockRecorder) ListExperimentTargetAccountConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentTargetAccountConfigurations", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentTargetAccountConfigurations), arg0)
}

// ListExperimentTargetAccountConfigurationsRequest mocks base method
func (m *MockFISAPI) ListExperimentTargetAccountConfigurationsRequest(arg0 *fis.ListExperimentTargetAccountConfigurationsInput) (*request.Request, *fis.ListExperimentTargetAccountConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentTargetAccountConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.ListExperimentTargetAccountConfigurationsOutput)
	return ret0, ret1
}

// ListExperimentTargetAccountConfigurationsRequest indicates an expected call of ListExperimentTargetAccountConfigurationsRequest
func (mr *MockFISAPIMockRecorder) ListExperimentTargetAccountConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentTargetAccountConfigurationsRequest", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentTargetAccountConfigurationsRequest), arg0)
}

// ListExperimentTargetAccountConfigurationsWithContext mocks base method
func (m *MockFISAPI) ListExperimentTargetAccountConfigurationsWithContext(arg0 context.Context, arg1 *fis.ListExperimentTargetAccountConfigurationsInput, arg2 ...request.Option) (*fis.ListExperimentTargetAccountConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExperimentTargetAccountConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*fis.ListExperimentTargetAccountConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperimentTargetAccountConfigurationsWithContext indicates an expected call of ListExperimentTargetAccountConfigurationsWithContext
func (mr *MockFISAPIMockRecorder) ListExperimentTargetAccountConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentTargetAccountConfigurationsWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentTargetAccountConfigurationsWithContext), varargs...)
}

// ListExperimentTemplates mocks base method
func (m *MockFISAPI) ListExperimentTemplates(arg0 *fis.ListExperimentTemplatesInput) (*fis.ListExperimentTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentTemplates", arg0)
	ret0, _ := ret[0].(*fis.ListExperimentTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperimentTemplates indicates an expected call of ListExperimentTemplates
func (mr *MockFISAPIMockRecorder) ListExperimentTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentTemplates", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentTemplates), arg0)
}

// ListExperimentTemplatesPages mocks base method
func (m *MockFISAPI) ListExperimentTemplatesPages(arg0 *fis.ListExperimentTemplatesInput, arg1 func(*fis.ListExperimentTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExperimentTemplatesPages indicates an expected call of ListExperimentTemplatesPages
func (mr *MockFISAPIMockRecorder) ListExperimentTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentTemplatesPages", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentTemplatesPages), arg0, arg1)
}

// ListExperimentTemplatesPagesWithContext mocks base method
func (m *MockFISAPI) ListExperimentTemplatesPagesWithContext(arg0 context.Context, arg1 *fis.ListExperimentTemplatesInput, arg2 func(*fis.ListExperimentTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExperimentTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExperimentTemplatesPagesWithContext indicates an expected call of ListExperimentTemplatesPagesWithContext
func (mr *MockFISAPIMockRecorder) ListExperimentTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentTemplatesPagesWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentTemplatesPagesWithContext), varargs...)
}

// ListExperimentTemplatesRequest mocks base method
func (m *MockFISAPI) ListExperimentTemplatesRequest(arg0 *fis.ListExperimentTemplatesInput) (*request.Request, *fis.ListExperimentTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.ListExperimentTemplatesOutput)
	return ret0, ret1
}

// ListExperimentTemplatesRequest indicates an expected call of ListExperimentTemplatesRequest
func (mr *MockFISAPIMockRecorder) ListExperimentTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentTemplatesRequest", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentTemplatesRequest), arg0)
}

// ListExperimentTemplatesWithContext mocks base method
func (m *MockFISAPI) ListExperimentTemplatesWithContext(arg0 context.Context, arg1 *fis.ListExperimentTemplatesInput, arg2 ...request.Option) (*fis.ListExperimentTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExperimentTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*fis.ListExperimentTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperimentTemplatesWithContext indicates an expected call of ListExperimentTemplatesWithContext
func (mr *MockFISAPIMockRecorder) ListExperimentTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentTemplatesWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentTemplatesWithContext), varargs...)
}

// ListExperiments mocks base method
func (m *MockFISAPI) ListExperiments(arg0 *fis.ListExperimentsInput) (*fis.ListExperimentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperiments", arg0)
	ret0, _ := ret[0].(*fis.ListExperimentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperiments indicates an expected call of ListExperiments
func (mr *MockFISAPIMockRecorder) ListExperiments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperiments", reflect.TypeOf((*MockFISAPI)(nil).ListExperiments), arg0)
}

// ListExperimentsPages mocks base method
func (m *MockFISAPI) ListExperimentsPages(arg0 *fis.ListExperimentsInput, arg1 func(*fis.ListExperimentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExperimentsPages indicates an expected call of ListExperimentsPages
func (mr *MockFISAPIMockRecorder) ListExperimentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentsPages", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentsPages), arg0, arg1)
}

// ListExperimentsPagesWithContext mocks base method
func (m *MockFISAPI) ListExperimentsPagesWithContext(arg0 context.Context, arg1 *fis.ListExperimentsInput, arg2 func(*fis.ListExperimentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExperimentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExperimentsPagesWithContext indicates an expected call of ListExperimentsPagesWithContext
func (mr *MockFISAPIMockRecorder) ListExperimentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentsPagesWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentsPagesWithContext), varargs...)
}

// ListExperimentsRequest mocks base method
func (m *MockFISAPI) ListExperimentsRequest(arg0 *fis.ListExperimentsInput) (*request.Request, *fis.ListExperimentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.ListExperimentsOutput)
	return ret0, ret1
}

// ListExperimentsRequest indicates an expected call of ListExperimentsRequest
func (mr *MockFISAPIMockRecorder) ListExperimentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentsRequest", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentsRequest), arg0)
}

// ListExperimentsWithContext mocks base method
func (m *MockFISAPI) ListExperimentsWithContext(arg0 context.Context, arg1 *fis.ListExperimentsInput, arg2 ...request.Option) (*fis.ListExperimentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExperimentsWithContext", varargs...)
	ret0, _ := ret[0].(*fis.ListExperimentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperimentsWithContext indicates an expected call of ListExperimentsWithContext
func (mr *MockFISAPIMockRecorder) ListExperimentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentsWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListExperimentsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockFISAPI) ListTagsForResource(arg0 *fis.ListTagsForResourceInput) (*fis.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*fis.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockFISAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockFISAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockFISAPI) ListTagsForResourceRequest(arg0 *fis.ListTagsForResourceInput) (*request.Request, *fis.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockFISAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockFISAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockFISAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *fis.ListTagsForResourceInput, arg2 ...request.Option) (*fis.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*fis.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockFISAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTargetAccountConfigurations mocks base method
func (m *MockFISAPI) ListTargetAccountConfigurations(arg0 *fis.ListTargetAccountConfigurationsInput) (*fis.ListTargetAccountConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetAccountConfigurations", arg0)
	ret0, _ := ret[0].(*fis.ListTargetAccountConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetAccountConfigurations indicates an expected call of ListTargetAccountConfigurations
func (mr *MockFISAPIMockRecorder) ListTargetAccountConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetAccountConfigurations", reflect.TypeOf((*MockFISAPI)(nil).ListTargetAccountConfigurations), arg0)
}

// ListTargetAccountConfigurationsPages mocks base method
func (m *MockFISAPI) ListTargetAccountConfigurationsPages(arg0 *fis.ListTargetAccountConfigurationsInput, arg1 func(*fis.ListTargetAccountConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetAccountConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTargetAccountConfigurationsPages indicates an expected call of ListTargetAccountConfigurationsPages
func (mr *MockFISAPIMockRecorder) ListTargetAccountConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetAccountConfigurationsPages", reflect.TypeOf((*MockFISAPI)(nil).ListTargetAccountConfigurationsPages), arg0, arg1)
}

// ListTargetAccountConfigurationsPagesWithContext mocks base method
func (m *MockFISAPI) ListTargetAccountConfigurationsPagesWithContext(arg0 context.Context, arg1 *fis.ListTargetAccountConfigurationsInput, arg2 func(*fis.ListTargetAccountConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetAccountConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTargetAccountConfigurationsPagesWithContext indicates an expected call of ListTargetAccountConfigurationsPagesWithContext
func (mr *MockFISAPIMockRecorder) ListTargetAccountConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetAccountConfigurationsPagesWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListTargetAccountConfigurationsPagesWithContext), varargs...)
}

// ListTargetAccountConfigurationsRequest mocks base method
func (m *MockFISAPI) ListTargetAccountConfigurationsRequest(arg0 *fis.ListTargetAccountConfigurationsInput) (*request.Request, *fis.ListTargetAccountConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetAccountConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.ListTargetAccountConfigurationsOutput)
	return ret0, ret1
}

// ListTargetAccountConfigurationsRequest indicates an expected call of ListTargetAccountConfigurationsRequest
func (mr *MockFISAPIMockRecorder) ListTargetAccountConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetAccountConfigurationsRequest", reflect.TypeOf((*MockFISAPI)(nil).ListTargetAccountConfigurationsRequest), arg0)
}

// ListTargetAccountConfigurationsWithContext mocks base method
func (m *MockFISAPI) ListTargetAccountConfigurationsWithContext(arg0 context.Context, arg1 *fis.ListTargetAccountConfigurationsInput, arg2 ...request.Option) (*fis.ListTargetAccountConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetAccountConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*fis.ListTargetAccountConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetAccountConfigurationsWithContext indicates an expected call of ListTargetAccountConfigurationsWithContext
func (mr *MockFISAPIMockRecorder) ListTargetAccountConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetAccountConfigurationsWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListTargetAccountConfigurationsWithContext), varargs...)
}

// ListTargetResourceTypes mocks base method
func (m *MockFISAPI) ListTargetResourceTypes(arg0 *fis.ListTargetResourceTypesInput) (*fis.ListTargetResourceTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetResourceTypes", arg0)
	ret0, _ := ret[0].(*fis.ListTargetResourceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetResourceTypes indicates an expected call of ListTargetResourceTypes
func (mr *MockFISAPIMockRecorder) ListTargetResourceTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetResourceTypes", reflect.TypeOf((*MockFISAPI)(nil).ListTargetResourceTypes), arg0)
}

// ListTargetResourceTypesPages mocks base method
func (m *MockFISAPI) ListTargetResourceTypesPages(arg0 *fis.ListTargetResourceTypesInput, arg1 func(*fis.ListTargetResourceTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetResourceTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTargetResourceTypesPages indicates an expected call of ListTargetResourceTypesPages
func (mr *MockFISAPIMockRecorder) ListTargetResourceTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetResourceTypesPages", reflect.TypeOf((*MockFISAPI)(nil).ListTargetResourceTypesPages), arg0, arg1)
}

// ListTargetResourceTypesPagesWithContext mocks base method
func (m *MockFISAPI) ListTargetResourceTypesPagesWithContext(arg0 context.Context, arg1 *fis.ListTargetResourceTypesInput, arg2 func(*fis.ListTargetResourceTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetResourceTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTargetResourceTypesPagesWithContext indicates an expected call of ListTargetResourceTypesPagesWithContext
func (mr *MockFISAPIMockRecorder) ListTargetResourceTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetResourceTypesPagesWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListTargetResourceTypesPagesWithContext), varargs...)
}

// ListTargetResourceTypesRequest mocks base method
func (m *MockFISAPI) ListTargetResourceTypesRequest(arg0 *fis.ListTargetResourceTypesInput) (*request.Request, *fis.ListTargetResourceTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetResourceTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.ListTargetResourceTypesOutput)
	return ret0, ret1
}

// ListTargetResourceTypesRequest indicates an expected call of ListTargetResourceTypesRequest
func (mr *MockFISAPIMockRecorder) ListTargetResourceTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetResourceTypesRequest", reflect.TypeOf((*MockFISAPI)(nil).ListTargetResourceTypesRequest), arg0)
}

// ListTargetResourceTypesWithContext mocks base method
func (m *MockFISAPI) ListTargetResourceTypesWithContext(arg0 context.Context, arg1 *fis.ListTargetResourceTypesInput, arg2 ...request.Option) (*fis.ListTargetResourceTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetResourceTypesWithContext", varargs...)
	ret0, _ := ret[0].(*fis.ListTargetResourceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetResourceTypesWithContext indicates an expected call of ListTargetResourceTypesWithContext
func (mr *MockFISAPIMockRecorder) ListTargetResourceTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetResourceTypesWithContext", reflect.TypeOf((*MockFISAPI)(nil).ListTargetResourceTypesWithContext), varargs...)
}

// StartExperiment mocks base method
func (m *MockFISAPI) StartExperiment(arg0 *fis.StartExperimentInput) (*fis.StartExperimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExperiment", arg0)
	ret0, _ := ret[0].(*fis.StartExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExperiment indicates an expected call of StartExperiment
func (mr *MockFISAPIMockRecorder) StartExperiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExperiment", reflect.TypeOf((*MockFISAPI)(nil).StartExperiment), arg0)
}

// StartExperimentRequest mocks base method
func (m *MockFISAPI) StartExperimentRequest(arg0 *fis.StartExperimentInput) (*request.Request, *fis.StartExperimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExperimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.StartExperimentOutput)
	return ret0, ret1
}

// StartExperimentRequest indicates an expected call of StartExperimentRequest
func (mr *MockFISAPIMockRecorder) StartExperimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExperimentRequest", reflect.TypeOf((*MockFISAPI)(nil).StartExperimentRequest), arg0)
}

// StartExperimentWithContext mocks base method
func (m *MockFISAPI) StartExperimentWithContext(arg0 context.Context, arg1 *fis.StartExperimentInput, arg2 ...request.Option) (*fis.StartExperimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartExperimentWithContext", varargs...)
	ret0, _ := ret[0].(*fis.StartExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExperimentWithContext indicates an expected call of StartExperimentWithContext
func (mr *MockFISAPIMockRecorder) StartExperimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExperimentWithContext", reflect.TypeOf((*MockFISAPI)(nil).StartExperimentWithContext), varargs...)
}

// StopExperiment mocks base method
func (m *MockFISAPI) StopExperiment(arg0 *fis.StopExperimentInput) (*fis.StopExperimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExperiment", arg0)
	ret0, _ := ret[0].(*fis.StopExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopExperiment indicates an expected call of StopExperiment
func (mr *MockFISAPIMockRecorder) StopExperiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExperiment", reflect.TypeOf((*MockFISAPI)(nil).StopExperiment), arg0)
}

// StopExperimentRequest mocks base method
func (m *MockFISAPI) StopExperimentRequest(arg0 *fis.StopExperimentInput) (*request.Request, *fis.StopExperimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExperimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.StopExperimentOutput)
	return ret0, ret1
}

// StopExperimentRequest indicates an expected call of StopExperimentRequest
func (mr *MockFISAPIMockRecorder) StopExperimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExperimentRequest", reflect.TypeOf((*MockFISAPI)(nil).StopExperimentRequest), arg0)
}

// StopExperimentWithContext mocks base method
func (m *MockFISAPI) StopExperimentWithContext(arg0 context.Context, arg1 *fis.StopExperimentInput, arg2 ...request.Option) (*fis.StopExperimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopExperimentWithContext", varargs...)
	ret0, _ := ret[0].(*fis.StopExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopExperimentWithContext indicates an expected call of StopExperimentWithContext
func (mr *MockFISAPIMockRecorder) StopExperimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExperimentWithContext", reflect.TypeOf((*MockFISAPI)(nil).StopExperimentWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockFISAPI) TagResource(arg0 *fis.TagResourceInput) (*fis.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*fis.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockFISAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockFISAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockFISAPI) TagResourceRequest(arg0 *fis.TagResourceInput) (*request.Request, *fis.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockFISAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockFISAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockFISAPI) TagResourceWithContext(arg0 context.Context, arg1 *fis.TagResourceInput, arg2 ...request.Option) (*fis.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*fis.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockFISAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockFISAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockFISAPI) UntagResource(arg0 *fis.UntagResourceInput) (*fis.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*fis.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockFISAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockFISAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockFISAPI) UntagResourceRequest(arg0 *fis.UntagResourceInput) (*request.Request, *fis.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockFISAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockFISAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockFISAPI) UntagResourceWithContext(arg0 context.Context, arg1 *fis.UntagResourceInput, arg2 ...request.Option) (*fis.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*fis.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockFISAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockFISAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateExperimentTemplate mocks base method
func (m *MockFISAPI) UpdateExperimentTemplate(arg0 *fis.UpdateExperimentTemplateInput) (*fis.UpdateExperimentTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExperimentTemplate", arg0)
	ret0, _ := ret[0].(*fis.UpdateExperimentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExperimentTemplate indicates an expected call of UpdateExperimentTemplate
func (mr *MockFISAPIMockRecorder) UpdateExperimentTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExperimentTemplate", reflect.TypeOf((*MockFISAPI)(nil).UpdateExperimentTemplate), arg0)
}

// UpdateExperimentTemplateRequest mocks base method
func (m *MockFISAPI) UpdateExperimentTemplateRequest(arg0 *fis.UpdateExperimentTemplateInput) (*request.Request, *fis.UpdateExperimentTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExperimentTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.UpdateExperimentTemplateOutput)
	return ret0, ret1
}

// UpdateExperimentTemplateRequest indicates an expected call of UpdateExperimentTemplateRequest
func (mr *MockFISAPIMockRecorder) UpdateExperimentTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExperimentTemplateRequest", reflect.TypeOf((*MockFISAPI)(nil).UpdateExperimentTemplateRequest), arg0)
}

// UpdateExperimentTemplateWithContext mocks base method
func (m *MockFISAPI) UpdateExperimentTemplateWithContext(arg0 context.Context, arg1 *fis.UpdateExperimentTemplateInput, arg2 ...request.Option) (*fis.UpdateExperimentTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExperimentTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*fis.UpdateExperimentTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExperimentTemplateWithContext indicates an expected call of UpdateExperimentTemplateWithContext
func (mr *MockFISAPIMockRecorder) UpdateExperimentTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExperimentTemplateWithContext", reflect.TypeOf((*MockFISAPI)(nil).UpdateExperimentTemplateWithContext), varargs...)
}

// UpdateTargetAccountConfiguration mocks base method
func (m *MockFISAPI) UpdateTargetAccountConfiguration(arg0 *fis.UpdateTargetAccountConfigurationInput) (*fis.UpdateTargetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetAccountConfiguration", arg0)
	ret0, _ := ret[0].(*fis.UpdateTargetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTargetAccountConfiguration indicates an expected call of UpdateTargetAccountConfiguration
func (mr *MockFISAPIMockRecorder) UpdateTargetAccountConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetAccountConfiguration", reflect.TypeOf((*MockFISAPI)(nil).UpdateTargetAccountConfiguration), arg0)
}

// UpdateTargetAccountConfigurationRequest mocks base method
func (m *MockFISAPI) UpdateTargetAccountConfigurationRequest(arg0 *fis.UpdateTargetAccountConfigurationInput) (*request.Request, *fis.UpdateTargetAccountConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetAccountConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fis.UpdateTargetAccountConfigurationOutput)
	return ret0, ret1
}

// UpdateTargetAccountConfigurationRequest indicates an expected call of UpdateTargetAccountConfigurationRequest
func (mr *MockFISAPIMockRecorder) UpdateTargetAccountConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetAccountConfigurationRequest", reflect.TypeOf((*MockFISAPI)(nil).UpdateTargetAccountConfigurationRequest), arg0)
}

// UpdateTargetAccountConfigurationWithContext mocks base method
func (m *MockFISAPI) UpdateTargetAccountConfigurationWithContext(arg0 context.Context, arg1 *fis.UpdateTargetAccountConfigurationInput, arg2 ...request.Option) (*fis.UpdateTargetAccountConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTargetAccountConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*fis.UpdateTargetAccountConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTargetAccountConfigurationWithContext indicates an expected call of UpdateTargetAccountConfigurationWithContext
func (mr *MockFISAPIMockRecorder) UpdateTargetAccountConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetAccountConfigurationWithContext", reflect.TypeOf((*MockFISAPI)(nil).UpdateTargetAccountConfigurationWithContext), varargs...)
}
