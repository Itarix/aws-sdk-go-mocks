// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/lightsail/lightsailiface (interfaces: LightsailAPI)

// Package lightsailmock is a generated GoMock package.
package lightsailmock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	lightsail "github.com/aws/aws-sdk-go/service/lightsail"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLightsailAPI is a mock of LightsailAPI interface
type MockLightsailAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLightsailAPIMockRecorder
}

// MockLightsailAPIMockRecorder is the mock recorder for MockLightsailAPI
type MockLightsailAPIMockRecorder struct {
	mock *MockLightsailAPI
}

// NewMockLightsailAPI creates a new mock instance
func NewMockLightsailAPI(ctrl *gomock.Controller) *MockLightsailAPI {
	mock := &MockLightsailAPI{ctrl: ctrl}
	mock.recorder = &MockLightsailAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLightsailAPI) EXPECT() *MockLightsailAPIMockRecorder {
	return m.recorder
}

// AllocateStaticIp mocks base method
func (m *MockLightsailAPI) AllocateStaticIp(arg0 *lightsail.AllocateStaticIpInput) (*lightsail.AllocateStaticIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateStaticIp", arg0)
	ret0, _ := ret[0].(*lightsail.AllocateStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateStaticIp indicates an expected call of AllocateStaticIp
func (mr *MockLightsailAPIMockRecorder) AllocateStaticIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateStaticIp", reflect.TypeOf((*MockLightsailAPI)(nil).AllocateStaticIp), arg0)
}

// AllocateStaticIpRequest mocks base method
func (m *MockLightsailAPI) AllocateStaticIpRequest(arg0 *lightsail.AllocateStaticIpInput) (*request.Request, *lightsail.AllocateStaticIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateStaticIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.AllocateStaticIpOutput)
	return ret0, ret1
}

// AllocateStaticIpRequest indicates an expected call of AllocateStaticIpRequest
func (mr *MockLightsailAPIMockRecorder) AllocateStaticIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateStaticIpRequest", reflect.TypeOf((*MockLightsailAPI)(nil).AllocateStaticIpRequest), arg0)
}

// AllocateStaticIpWithContext mocks base method
func (m *MockLightsailAPI) AllocateStaticIpWithContext(arg0 aws.Context, arg1 *lightsail.AllocateStaticIpInput, arg2 ...request.Option) (*lightsail.AllocateStaticIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocateStaticIpWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.AllocateStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateStaticIpWithContext indicates an expected call of AllocateStaticIpWithContext
func (mr *MockLightsailAPIMockRecorder) AllocateStaticIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateStaticIpWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).AllocateStaticIpWithContext), varargs...)
}

// AttachDisk mocks base method
func (m *MockLightsailAPI) AttachDisk(arg0 *lightsail.AttachDiskInput) (*lightsail.AttachDiskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachDisk", arg0)
	ret0, _ := ret[0].(*lightsail.AttachDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachDisk indicates an expected call of AttachDisk
func (mr *MockLightsailAPIMockRecorder) AttachDisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDisk", reflect.TypeOf((*MockLightsailAPI)(nil).AttachDisk), arg0)
}

// AttachDiskRequest mocks base method
func (m *MockLightsailAPI) AttachDiskRequest(arg0 *lightsail.AttachDiskInput) (*request.Request, *lightsail.AttachDiskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachDiskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.AttachDiskOutput)
	return ret0, ret1
}

// AttachDiskRequest indicates an expected call of AttachDiskRequest
func (mr *MockLightsailAPIMockRecorder) AttachDiskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDiskRequest", reflect.TypeOf((*MockLightsailAPI)(nil).AttachDiskRequest), arg0)
}

// AttachDiskWithContext mocks base method
func (m *MockLightsailAPI) AttachDiskWithContext(arg0 aws.Context, arg1 *lightsail.AttachDiskInput, arg2 ...request.Option) (*lightsail.AttachDiskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachDiskWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.AttachDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachDiskWithContext indicates an expected call of AttachDiskWithContext
func (mr *MockLightsailAPIMockRecorder) AttachDiskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDiskWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).AttachDiskWithContext), varargs...)
}

// AttachInstancesToLoadBalancer mocks base method
func (m *MockLightsailAPI) AttachInstancesToLoadBalancer(arg0 *lightsail.AttachInstancesToLoadBalancerInput) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachInstancesToLoadBalancer", arg0)
	ret0, _ := ret[0].(*lightsail.AttachInstancesToLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachInstancesToLoadBalancer indicates an expected call of AttachInstancesToLoadBalancer
func (mr *MockLightsailAPIMockRecorder) AttachInstancesToLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachInstancesToLoadBalancer", reflect.TypeOf((*MockLightsailAPI)(nil).AttachInstancesToLoadBalancer), arg0)
}

// AttachInstancesToLoadBalancerRequest mocks base method
func (m *MockLightsailAPI) AttachInstancesToLoadBalancerRequest(arg0 *lightsail.AttachInstancesToLoadBalancerInput) (*request.Request, *lightsail.AttachInstancesToLoadBalancerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachInstancesToLoadBalancerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.AttachInstancesToLoadBalancerOutput)
	return ret0, ret1
}

// AttachInstancesToLoadBalancerRequest indicates an expected call of AttachInstancesToLoadBalancerRequest
func (mr *MockLightsailAPIMockRecorder) AttachInstancesToLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachInstancesToLoadBalancerRequest", reflect.TypeOf((*MockLightsailAPI)(nil).AttachInstancesToLoadBalancerRequest), arg0)
}

// AttachInstancesToLoadBalancerWithContext mocks base method
func (m *MockLightsailAPI) AttachInstancesToLoadBalancerWithContext(arg0 aws.Context, arg1 *lightsail.AttachInstancesToLoadBalancerInput, arg2 ...request.Option) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachInstancesToLoadBalancerWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.AttachInstancesToLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachInstancesToLoadBalancerWithContext indicates an expected call of AttachInstancesToLoadBalancerWithContext
func (mr *MockLightsailAPIMockRecorder) AttachInstancesToLoadBalancerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachInstancesToLoadBalancerWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).AttachInstancesToLoadBalancerWithContext), varargs...)
}

// AttachLoadBalancerTlsCertificate mocks base method
func (m *MockLightsailAPI) AttachLoadBalancerTlsCertificate(arg0 *lightsail.AttachLoadBalancerTlsCertificateInput) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachLoadBalancerTlsCertificate", arg0)
	ret0, _ := ret[0].(*lightsail.AttachLoadBalancerTlsCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachLoadBalancerTlsCertificate indicates an expected call of AttachLoadBalancerTlsCertificate
func (mr *MockLightsailAPIMockRecorder) AttachLoadBalancerTlsCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachLoadBalancerTlsCertificate", reflect.TypeOf((*MockLightsailAPI)(nil).AttachLoadBalancerTlsCertificate), arg0)
}

// AttachLoadBalancerTlsCertificateRequest mocks base method
func (m *MockLightsailAPI) AttachLoadBalancerTlsCertificateRequest(arg0 *lightsail.AttachLoadBalancerTlsCertificateInput) (*request.Request, *lightsail.AttachLoadBalancerTlsCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachLoadBalancerTlsCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.AttachLoadBalancerTlsCertificateOutput)
	return ret0, ret1
}

// AttachLoadBalancerTlsCertificateRequest indicates an expected call of AttachLoadBalancerTlsCertificateRequest
func (mr *MockLightsailAPIMockRecorder) AttachLoadBalancerTlsCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachLoadBalancerTlsCertificateRequest", reflect.TypeOf((*MockLightsailAPI)(nil).AttachLoadBalancerTlsCertificateRequest), arg0)
}

// AttachLoadBalancerTlsCertificateWithContext mocks base method
func (m *MockLightsailAPI) AttachLoadBalancerTlsCertificateWithContext(arg0 aws.Context, arg1 *lightsail.AttachLoadBalancerTlsCertificateInput, arg2 ...request.Option) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachLoadBalancerTlsCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.AttachLoadBalancerTlsCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachLoadBalancerTlsCertificateWithContext indicates an expected call of AttachLoadBalancerTlsCertificateWithContext
func (mr *MockLightsailAPIMockRecorder) AttachLoadBalancerTlsCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachLoadBalancerTlsCertificateWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).AttachLoadBalancerTlsCertificateWithContext), varargs...)
}

// AttachStaticIp mocks base method
func (m *MockLightsailAPI) AttachStaticIp(arg0 *lightsail.AttachStaticIpInput) (*lightsail.AttachStaticIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachStaticIp", arg0)
	ret0, _ := ret[0].(*lightsail.AttachStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachStaticIp indicates an expected call of AttachStaticIp
func (mr *MockLightsailAPIMockRecorder) AttachStaticIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachStaticIp", reflect.TypeOf((*MockLightsailAPI)(nil).AttachStaticIp), arg0)
}

// AttachStaticIpRequest mocks base method
func (m *MockLightsailAPI) AttachStaticIpRequest(arg0 *lightsail.AttachStaticIpInput) (*request.Request, *lightsail.AttachStaticIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachStaticIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.AttachStaticIpOutput)
	return ret0, ret1
}

// AttachStaticIpRequest indicates an expected call of AttachStaticIpRequest
func (mr *MockLightsailAPIMockRecorder) AttachStaticIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachStaticIpRequest", reflect.TypeOf((*MockLightsailAPI)(nil).AttachStaticIpRequest), arg0)
}

// AttachStaticIpWithContext mocks base method
func (m *MockLightsailAPI) AttachStaticIpWithContext(arg0 aws.Context, arg1 *lightsail.AttachStaticIpInput, arg2 ...request.Option) (*lightsail.AttachStaticIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachStaticIpWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.AttachStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachStaticIpWithContext indicates an expected call of AttachStaticIpWithContext
func (mr *MockLightsailAPIMockRecorder) AttachStaticIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachStaticIpWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).AttachStaticIpWithContext), varargs...)
}

// CloseInstancePublicPorts mocks base method
func (m *MockLightsailAPI) CloseInstancePublicPorts(arg0 *lightsail.CloseInstancePublicPortsInput) (*lightsail.CloseInstancePublicPortsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseInstancePublicPorts", arg0)
	ret0, _ := ret[0].(*lightsail.CloseInstancePublicPortsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseInstancePublicPorts indicates an expected call of CloseInstancePublicPorts
func (mr *MockLightsailAPIMockRecorder) CloseInstancePublicPorts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseInstancePublicPorts", reflect.TypeOf((*MockLightsailAPI)(nil).CloseInstancePublicPorts), arg0)
}

// CloseInstancePublicPortsRequest mocks base method
func (m *MockLightsailAPI) CloseInstancePublicPortsRequest(arg0 *lightsail.CloseInstancePublicPortsInput) (*request.Request, *lightsail.CloseInstancePublicPortsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseInstancePublicPortsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CloseInstancePublicPortsOutput)
	return ret0, ret1
}

// CloseInstancePublicPortsRequest indicates an expected call of CloseInstancePublicPortsRequest
func (mr *MockLightsailAPIMockRecorder) CloseInstancePublicPortsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseInstancePublicPortsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CloseInstancePublicPortsRequest), arg0)
}

// CloseInstancePublicPortsWithContext mocks base method
func (m *MockLightsailAPI) CloseInstancePublicPortsWithContext(arg0 aws.Context, arg1 *lightsail.CloseInstancePublicPortsInput, arg2 ...request.Option) (*lightsail.CloseInstancePublicPortsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloseInstancePublicPortsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CloseInstancePublicPortsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseInstancePublicPortsWithContext indicates an expected call of CloseInstancePublicPortsWithContext
func (mr *MockLightsailAPIMockRecorder) CloseInstancePublicPortsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseInstancePublicPortsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CloseInstancePublicPortsWithContext), varargs...)
}

// CreateDisk mocks base method
func (m *MockLightsailAPI) CreateDisk(arg0 *lightsail.CreateDiskInput) (*lightsail.CreateDiskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisk", arg0)
	ret0, _ := ret[0].(*lightsail.CreateDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDisk indicates an expected call of CreateDisk
func (mr *MockLightsailAPIMockRecorder) CreateDisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisk", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDisk), arg0)
}

// CreateDiskFromSnapshot mocks base method
func (m *MockLightsailAPI) CreateDiskFromSnapshot(arg0 *lightsail.CreateDiskFromSnapshotInput) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiskFromSnapshot", arg0)
	ret0, _ := ret[0].(*lightsail.CreateDiskFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiskFromSnapshot indicates an expected call of CreateDiskFromSnapshot
func (mr *MockLightsailAPIMockRecorder) CreateDiskFromSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskFromSnapshot", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDiskFromSnapshot), arg0)
}

// CreateDiskFromSnapshotRequest mocks base method
func (m *MockLightsailAPI) CreateDiskFromSnapshotRequest(arg0 *lightsail.CreateDiskFromSnapshotInput) (*request.Request, *lightsail.CreateDiskFromSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiskFromSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateDiskFromSnapshotOutput)
	return ret0, ret1
}

// CreateDiskFromSnapshotRequest indicates an expected call of CreateDiskFromSnapshotRequest
func (mr *MockLightsailAPIMockRecorder) CreateDiskFromSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskFromSnapshotRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDiskFromSnapshotRequest), arg0)
}

// CreateDiskFromSnapshotWithContext mocks base method
func (m *MockLightsailAPI) CreateDiskFromSnapshotWithContext(arg0 aws.Context, arg1 *lightsail.CreateDiskFromSnapshotInput, arg2 ...request.Option) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDiskFromSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateDiskFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiskFromSnapshotWithContext indicates an expected call of CreateDiskFromSnapshotWithContext
func (mr *MockLightsailAPIMockRecorder) CreateDiskFromSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskFromSnapshotWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDiskFromSnapshotWithContext), varargs...)
}

// CreateDiskRequest mocks base method
func (m *MockLightsailAPI) CreateDiskRequest(arg0 *lightsail.CreateDiskInput) (*request.Request, *lightsail.CreateDiskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateDiskOutput)
	return ret0, ret1
}

// CreateDiskRequest indicates an expected call of CreateDiskRequest
func (mr *MockLightsailAPIMockRecorder) CreateDiskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDiskRequest), arg0)
}

// CreateDiskSnapshot mocks base method
func (m *MockLightsailAPI) CreateDiskSnapshot(arg0 *lightsail.CreateDiskSnapshotInput) (*lightsail.CreateDiskSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiskSnapshot", arg0)
	ret0, _ := ret[0].(*lightsail.CreateDiskSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiskSnapshot indicates an expected call of CreateDiskSnapshot
func (mr *MockLightsailAPIMockRecorder) CreateDiskSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskSnapshot", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDiskSnapshot), arg0)
}

// CreateDiskSnapshotRequest mocks base method
func (m *MockLightsailAPI) CreateDiskSnapshotRequest(arg0 *lightsail.CreateDiskSnapshotInput) (*request.Request, *lightsail.CreateDiskSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiskSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateDiskSnapshotOutput)
	return ret0, ret1
}

// CreateDiskSnapshotRequest indicates an expected call of CreateDiskSnapshotRequest
func (mr *MockLightsailAPIMockRecorder) CreateDiskSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskSnapshotRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDiskSnapshotRequest), arg0)
}

// CreateDiskSnapshotWithContext mocks base method
func (m *MockLightsailAPI) CreateDiskSnapshotWithContext(arg0 aws.Context, arg1 *lightsail.CreateDiskSnapshotInput, arg2 ...request.Option) (*lightsail.CreateDiskSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDiskSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateDiskSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiskSnapshotWithContext indicates an expected call of CreateDiskSnapshotWithContext
func (mr *MockLightsailAPIMockRecorder) CreateDiskSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskSnapshotWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDiskSnapshotWithContext), varargs...)
}

// CreateDiskWithContext mocks base method
func (m *MockLightsailAPI) CreateDiskWithContext(arg0 aws.Context, arg1 *lightsail.CreateDiskInput, arg2 ...request.Option) (*lightsail.CreateDiskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDiskWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiskWithContext indicates an expected call of CreateDiskWithContext
func (mr *MockLightsailAPIMockRecorder) CreateDiskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDiskWithContext), varargs...)
}

// CreateDomain mocks base method
func (m *MockLightsailAPI) CreateDomain(arg0 *lightsail.CreateDomainInput) (*lightsail.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0)
	ret0, _ := ret[0].(*lightsail.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain
func (mr *MockLightsailAPIMockRecorder) CreateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDomain), arg0)
}

// CreateDomainEntry mocks base method
func (m *MockLightsailAPI) CreateDomainEntry(arg0 *lightsail.CreateDomainEntryInput) (*lightsail.CreateDomainEntryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainEntry", arg0)
	ret0, _ := ret[0].(*lightsail.CreateDomainEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainEntry indicates an expected call of CreateDomainEntry
func (mr *MockLightsailAPIMockRecorder) CreateDomainEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainEntry", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDomainEntry), arg0)
}

// CreateDomainEntryRequest mocks base method
func (m *MockLightsailAPI) CreateDomainEntryRequest(arg0 *lightsail.CreateDomainEntryInput) (*request.Request, *lightsail.CreateDomainEntryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainEntryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateDomainEntryOutput)
	return ret0, ret1
}

// CreateDomainEntryRequest indicates an expected call of CreateDomainEntryRequest
func (mr *MockLightsailAPIMockRecorder) CreateDomainEntryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainEntryRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDomainEntryRequest), arg0)
}

// CreateDomainEntryWithContext mocks base method
func (m *MockLightsailAPI) CreateDomainEntryWithContext(arg0 aws.Context, arg1 *lightsail.CreateDomainEntryInput, arg2 ...request.Option) (*lightsail.CreateDomainEntryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainEntryWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateDomainEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainEntryWithContext indicates an expected call of CreateDomainEntryWithContext
func (mr *MockLightsailAPIMockRecorder) CreateDomainEntryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainEntryWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDomainEntryWithContext), varargs...)
}

// CreateDomainRequest mocks base method
func (m *MockLightsailAPI) CreateDomainRequest(arg0 *lightsail.CreateDomainInput) (*request.Request, *lightsail.CreateDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateDomainOutput)
	return ret0, ret1
}

// CreateDomainRequest indicates an expected call of CreateDomainRequest
func (mr *MockLightsailAPIMockRecorder) CreateDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDomainRequest), arg0)
}

// CreateDomainWithContext mocks base method
func (m *MockLightsailAPI) CreateDomainWithContext(arg0 aws.Context, arg1 *lightsail.CreateDomainInput, arg2 ...request.Option) (*lightsail.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWithContext indicates an expected call of CreateDomainWithContext
func (mr *MockLightsailAPIMockRecorder) CreateDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateDomainWithContext), varargs...)
}

// CreateInstanceSnapshot mocks base method
func (m *MockLightsailAPI) CreateInstanceSnapshot(arg0 *lightsail.CreateInstanceSnapshotInput) (*lightsail.CreateInstanceSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceSnapshot", arg0)
	ret0, _ := ret[0].(*lightsail.CreateInstanceSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceSnapshot indicates an expected call of CreateInstanceSnapshot
func (mr *MockLightsailAPIMockRecorder) CreateInstanceSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceSnapshot", reflect.TypeOf((*MockLightsailAPI)(nil).CreateInstanceSnapshot), arg0)
}

// CreateInstanceSnapshotRequest mocks base method
func (m *MockLightsailAPI) CreateInstanceSnapshotRequest(arg0 *lightsail.CreateInstanceSnapshotInput) (*request.Request, *lightsail.CreateInstanceSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateInstanceSnapshotOutput)
	return ret0, ret1
}

// CreateInstanceSnapshotRequest indicates an expected call of CreateInstanceSnapshotRequest
func (mr *MockLightsailAPIMockRecorder) CreateInstanceSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceSnapshotRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateInstanceSnapshotRequest), arg0)
}

// CreateInstanceSnapshotWithContext mocks base method
func (m *MockLightsailAPI) CreateInstanceSnapshotWithContext(arg0 aws.Context, arg1 *lightsail.CreateInstanceSnapshotInput, arg2 ...request.Option) (*lightsail.CreateInstanceSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstanceSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateInstanceSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceSnapshotWithContext indicates an expected call of CreateInstanceSnapshotWithContext
func (mr *MockLightsailAPIMockRecorder) CreateInstanceSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceSnapshotWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateInstanceSnapshotWithContext), varargs...)
}

// CreateInstances mocks base method
func (m *MockLightsailAPI) CreateInstances(arg0 *lightsail.CreateInstancesInput) (*lightsail.CreateInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstances", arg0)
	ret0, _ := ret[0].(*lightsail.CreateInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstances indicates an expected call of CreateInstances
func (mr *MockLightsailAPIMockRecorder) CreateInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstances", reflect.TypeOf((*MockLightsailAPI)(nil).CreateInstances), arg0)
}

// CreateInstancesFromSnapshot mocks base method
func (m *MockLightsailAPI) CreateInstancesFromSnapshot(arg0 *lightsail.CreateInstancesFromSnapshotInput) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstancesFromSnapshot", arg0)
	ret0, _ := ret[0].(*lightsail.CreateInstancesFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstancesFromSnapshot indicates an expected call of CreateInstancesFromSnapshot
func (mr *MockLightsailAPIMockRecorder) CreateInstancesFromSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstancesFromSnapshot", reflect.TypeOf((*MockLightsailAPI)(nil).CreateInstancesFromSnapshot), arg0)
}

// CreateInstancesFromSnapshotRequest mocks base method
func (m *MockLightsailAPI) CreateInstancesFromSnapshotRequest(arg0 *lightsail.CreateInstancesFromSnapshotInput) (*request.Request, *lightsail.CreateInstancesFromSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstancesFromSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateInstancesFromSnapshotOutput)
	return ret0, ret1
}

// CreateInstancesFromSnapshotRequest indicates an expected call of CreateInstancesFromSnapshotRequest
func (mr *MockLightsailAPIMockRecorder) CreateInstancesFromSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstancesFromSnapshotRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateInstancesFromSnapshotRequest), arg0)
}

// CreateInstancesFromSnapshotWithContext mocks base method
func (m *MockLightsailAPI) CreateInstancesFromSnapshotWithContext(arg0 aws.Context, arg1 *lightsail.CreateInstancesFromSnapshotInput, arg2 ...request.Option) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstancesFromSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateInstancesFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstancesFromSnapshotWithContext indicates an expected call of CreateInstancesFromSnapshotWithContext
func (mr *MockLightsailAPIMockRecorder) CreateInstancesFromSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstancesFromSnapshotWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateInstancesFromSnapshotWithContext), varargs...)
}

// CreateInstancesRequest mocks base method
func (m *MockLightsailAPI) CreateInstancesRequest(arg0 *lightsail.CreateInstancesInput) (*request.Request, *lightsail.CreateInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateInstancesOutput)
	return ret0, ret1
}

// CreateInstancesRequest indicates an expected call of CreateInstancesRequest
func (mr *MockLightsailAPIMockRecorder) CreateInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstancesRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateInstancesRequest), arg0)
}

// CreateInstancesWithContext mocks base method
func (m *MockLightsailAPI) CreateInstancesWithContext(arg0 aws.Context, arg1 *lightsail.CreateInstancesInput, arg2 ...request.Option) (*lightsail.CreateInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstancesWithContext indicates an expected call of CreateInstancesWithContext
func (mr *MockLightsailAPIMockRecorder) CreateInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstancesWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateInstancesWithContext), varargs...)
}

// CreateKeyPair mocks base method
func (m *MockLightsailAPI) CreateKeyPair(arg0 *lightsail.CreateKeyPairInput) (*lightsail.CreateKeyPairOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyPair", arg0)
	ret0, _ := ret[0].(*lightsail.CreateKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyPair indicates an expected call of CreateKeyPair
func (mr *MockLightsailAPIMockRecorder) CreateKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyPair", reflect.TypeOf((*MockLightsailAPI)(nil).CreateKeyPair), arg0)
}

// CreateKeyPairRequest mocks base method
func (m *MockLightsailAPI) CreateKeyPairRequest(arg0 *lightsail.CreateKeyPairInput) (*request.Request, *lightsail.CreateKeyPairOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyPairRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateKeyPairOutput)
	return ret0, ret1
}

// CreateKeyPairRequest indicates an expected call of CreateKeyPairRequest
func (mr *MockLightsailAPIMockRecorder) CreateKeyPairRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyPairRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateKeyPairRequest), arg0)
}

// CreateKeyPairWithContext mocks base method
func (m *MockLightsailAPI) CreateKeyPairWithContext(arg0 aws.Context, arg1 *lightsail.CreateKeyPairInput, arg2 ...request.Option) (*lightsail.CreateKeyPairOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeyPairWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyPairWithContext indicates an expected call of CreateKeyPairWithContext
func (mr *MockLightsailAPIMockRecorder) CreateKeyPairWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyPairWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateKeyPairWithContext), varargs...)
}

// CreateLoadBalancer mocks base method
func (m *MockLightsailAPI) CreateLoadBalancer(arg0 *lightsail.CreateLoadBalancerInput) (*lightsail.CreateLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", arg0)
	ret0, _ := ret[0].(*lightsail.CreateLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer
func (mr *MockLightsailAPIMockRecorder) CreateLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockLightsailAPI)(nil).CreateLoadBalancer), arg0)
}

// CreateLoadBalancerRequest mocks base method
func (m *MockLightsailAPI) CreateLoadBalancerRequest(arg0 *lightsail.CreateLoadBalancerInput) (*request.Request, *lightsail.CreateLoadBalancerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateLoadBalancerOutput)
	return ret0, ret1
}

// CreateLoadBalancerRequest indicates an expected call of CreateLoadBalancerRequest
func (mr *MockLightsailAPIMockRecorder) CreateLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateLoadBalancerRequest), arg0)
}

// CreateLoadBalancerTlsCertificate mocks base method
func (m *MockLightsailAPI) CreateLoadBalancerTlsCertificate(arg0 *lightsail.CreateLoadBalancerTlsCertificateInput) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancerTlsCertificate", arg0)
	ret0, _ := ret[0].(*lightsail.CreateLoadBalancerTlsCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerTlsCertificate indicates an expected call of CreateLoadBalancerTlsCertificate
func (mr *MockLightsailAPIMockRecorder) CreateLoadBalancerTlsCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerTlsCertificate", reflect.TypeOf((*MockLightsailAPI)(nil).CreateLoadBalancerTlsCertificate), arg0)
}

// CreateLoadBalancerTlsCertificateRequest mocks base method
func (m *MockLightsailAPI) CreateLoadBalancerTlsCertificateRequest(arg0 *lightsail.CreateLoadBalancerTlsCertificateInput) (*request.Request, *lightsail.CreateLoadBalancerTlsCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancerTlsCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.CreateLoadBalancerTlsCertificateOutput)
	return ret0, ret1
}

// CreateLoadBalancerTlsCertificateRequest indicates an expected call of CreateLoadBalancerTlsCertificateRequest
func (mr *MockLightsailAPIMockRecorder) CreateLoadBalancerTlsCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerTlsCertificateRequest", reflect.TypeOf((*MockLightsailAPI)(nil).CreateLoadBalancerTlsCertificateRequest), arg0)
}

// CreateLoadBalancerTlsCertificateWithContext mocks base method
func (m *MockLightsailAPI) CreateLoadBalancerTlsCertificateWithContext(arg0 aws.Context, arg1 *lightsail.CreateLoadBalancerTlsCertificateInput, arg2 ...request.Option) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLoadBalancerTlsCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateLoadBalancerTlsCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerTlsCertificateWithContext indicates an expected call of CreateLoadBalancerTlsCertificateWithContext
func (mr *MockLightsailAPIMockRecorder) CreateLoadBalancerTlsCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerTlsCertificateWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateLoadBalancerTlsCertificateWithContext), varargs...)
}

// CreateLoadBalancerWithContext mocks base method
func (m *MockLightsailAPI) CreateLoadBalancerWithContext(arg0 aws.Context, arg1 *lightsail.CreateLoadBalancerInput, arg2 ...request.Option) (*lightsail.CreateLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLoadBalancerWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.CreateLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerWithContext indicates an expected call of CreateLoadBalancerWithContext
func (mr *MockLightsailAPIMockRecorder) CreateLoadBalancerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).CreateLoadBalancerWithContext), varargs...)
}

// DeleteDisk mocks base method
func (m *MockLightsailAPI) DeleteDisk(arg0 *lightsail.DeleteDiskInput) (*lightsail.DeleteDiskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisk", arg0)
	ret0, _ := ret[0].(*lightsail.DeleteDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDisk indicates an expected call of DeleteDisk
func (mr *MockLightsailAPIMockRecorder) DeleteDisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisk", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDisk), arg0)
}

// DeleteDiskRequest mocks base method
func (m *MockLightsailAPI) DeleteDiskRequest(arg0 *lightsail.DeleteDiskInput) (*request.Request, *lightsail.DeleteDiskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DeleteDiskOutput)
	return ret0, ret1
}

// DeleteDiskRequest indicates an expected call of DeleteDiskRequest
func (mr *MockLightsailAPIMockRecorder) DeleteDiskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiskRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDiskRequest), arg0)
}

// DeleteDiskSnapshot mocks base method
func (m *MockLightsailAPI) DeleteDiskSnapshot(arg0 *lightsail.DeleteDiskSnapshotInput) (*lightsail.DeleteDiskSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiskSnapshot", arg0)
	ret0, _ := ret[0].(*lightsail.DeleteDiskSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiskSnapshot indicates an expected call of DeleteDiskSnapshot
func (mr *MockLightsailAPIMockRecorder) DeleteDiskSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiskSnapshot", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDiskSnapshot), arg0)
}

// DeleteDiskSnapshotRequest mocks base method
func (m *MockLightsailAPI) DeleteDiskSnapshotRequest(arg0 *lightsail.DeleteDiskSnapshotInput) (*request.Request, *lightsail.DeleteDiskSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiskSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DeleteDiskSnapshotOutput)
	return ret0, ret1
}

// DeleteDiskSnapshotRequest indicates an expected call of DeleteDiskSnapshotRequest
func (mr *MockLightsailAPIMockRecorder) DeleteDiskSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiskSnapshotRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDiskSnapshotRequest), arg0)
}

// DeleteDiskSnapshotWithContext mocks base method
func (m *MockLightsailAPI) DeleteDiskSnapshotWithContext(arg0 aws.Context, arg1 *lightsail.DeleteDiskSnapshotInput, arg2 ...request.Option) (*lightsail.DeleteDiskSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDiskSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DeleteDiskSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiskSnapshotWithContext indicates an expected call of DeleteDiskSnapshotWithContext
func (mr *MockLightsailAPIMockRecorder) DeleteDiskSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiskSnapshotWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDiskSnapshotWithContext), varargs...)
}

// DeleteDiskWithContext mocks base method
func (m *MockLightsailAPI) DeleteDiskWithContext(arg0 aws.Context, arg1 *lightsail.DeleteDiskInput, arg2 ...request.Option) (*lightsail.DeleteDiskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDiskWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DeleteDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiskWithContext indicates an expected call of DeleteDiskWithContext
func (mr *MockLightsailAPIMockRecorder) DeleteDiskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiskWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDiskWithContext), varargs...)
}

// DeleteDomain mocks base method
func (m *MockLightsailAPI) DeleteDomain(arg0 *lightsail.DeleteDomainInput) (*lightsail.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomain", arg0)
	ret0, _ := ret[0].(*lightsail.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomain indicates an expected call of DeleteDomain
func (mr *MockLightsailAPIMockRecorder) DeleteDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomain", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDomain), arg0)
}

// DeleteDomainEntry mocks base method
func (m *MockLightsailAPI) DeleteDomainEntry(arg0 *lightsail.DeleteDomainEntryInput) (*lightsail.DeleteDomainEntryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainEntry", arg0)
	ret0, _ := ret[0].(*lightsail.DeleteDomainEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainEntry indicates an expected call of DeleteDomainEntry
func (mr *MockLightsailAPIMockRecorder) DeleteDomainEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainEntry", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDomainEntry), arg0)
}

// DeleteDomainEntryRequest mocks base method
func (m *MockLightsailAPI) DeleteDomainEntryRequest(arg0 *lightsail.DeleteDomainEntryInput) (*request.Request, *lightsail.DeleteDomainEntryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainEntryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DeleteDomainEntryOutput)
	return ret0, ret1
}

// DeleteDomainEntryRequest indicates an expected call of DeleteDomainEntryRequest
func (mr *MockLightsailAPIMockRecorder) DeleteDomainEntryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainEntryRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDomainEntryRequest), arg0)
}

// DeleteDomainEntryWithContext mocks base method
func (m *MockLightsailAPI) DeleteDomainEntryWithContext(arg0 aws.Context, arg1 *lightsail.DeleteDomainEntryInput, arg2 ...request.Option) (*lightsail.DeleteDomainEntryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainEntryWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DeleteDomainEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainEntryWithContext indicates an expected call of DeleteDomainEntryWithContext
func (mr *MockLightsailAPIMockRecorder) DeleteDomainEntryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainEntryWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDomainEntryWithContext), varargs...)
}

// DeleteDomainRequest mocks base method
func (m *MockLightsailAPI) DeleteDomainRequest(arg0 *lightsail.DeleteDomainInput) (*request.Request, *lightsail.DeleteDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DeleteDomainOutput)
	return ret0, ret1
}

// DeleteDomainRequest indicates an expected call of DeleteDomainRequest
func (mr *MockLightsailAPIMockRecorder) DeleteDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDomainRequest), arg0)
}

// DeleteDomainWithContext mocks base method
func (m *MockLightsailAPI) DeleteDomainWithContext(arg0 aws.Context, arg1 *lightsail.DeleteDomainInput, arg2 ...request.Option) (*lightsail.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainWithContext indicates an expected call of DeleteDomainWithContext
func (mr *MockLightsailAPIMockRecorder) DeleteDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteDomainWithContext), varargs...)
}

// DeleteInstance mocks base method
func (m *MockLightsailAPI) DeleteInstance(arg0 *lightsail.DeleteInstanceInput) (*lightsail.DeleteInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(*lightsail.DeleteInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockLightsailAPIMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteInstance), arg0)
}

// DeleteInstanceRequest mocks base method
func (m *MockLightsailAPI) DeleteInstanceRequest(arg0 *lightsail.DeleteInstanceInput) (*request.Request, *lightsail.DeleteInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DeleteInstanceOutput)
	return ret0, ret1
}

// DeleteInstanceRequest indicates an expected call of DeleteInstanceRequest
func (mr *MockLightsailAPIMockRecorder) DeleteInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteInstanceRequest), arg0)
}

// DeleteInstanceSnapshot mocks base method
func (m *MockLightsailAPI) DeleteInstanceSnapshot(arg0 *lightsail.DeleteInstanceSnapshotInput) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceSnapshot", arg0)
	ret0, _ := ret[0].(*lightsail.DeleteInstanceSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceSnapshot indicates an expected call of DeleteInstanceSnapshot
func (mr *MockLightsailAPIMockRecorder) DeleteInstanceSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceSnapshot", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteInstanceSnapshot), arg0)
}

// DeleteInstanceSnapshotRequest mocks base method
func (m *MockLightsailAPI) DeleteInstanceSnapshotRequest(arg0 *lightsail.DeleteInstanceSnapshotInput) (*request.Request, *lightsail.DeleteInstanceSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DeleteInstanceSnapshotOutput)
	return ret0, ret1
}

// DeleteInstanceSnapshotRequest indicates an expected call of DeleteInstanceSnapshotRequest
func (mr *MockLightsailAPIMockRecorder) DeleteInstanceSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceSnapshotRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteInstanceSnapshotRequest), arg0)
}

// DeleteInstanceSnapshotWithContext mocks base method
func (m *MockLightsailAPI) DeleteInstanceSnapshotWithContext(arg0 aws.Context, arg1 *lightsail.DeleteInstanceSnapshotInput, arg2 ...request.Option) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstanceSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DeleteInstanceSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceSnapshotWithContext indicates an expected call of DeleteInstanceSnapshotWithContext
func (mr *MockLightsailAPIMockRecorder) DeleteInstanceSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceSnapshotWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteInstanceSnapshotWithContext), varargs...)
}

// DeleteInstanceWithContext mocks base method
func (m *MockLightsailAPI) DeleteInstanceWithContext(arg0 aws.Context, arg1 *lightsail.DeleteInstanceInput, arg2 ...request.Option) (*lightsail.DeleteInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DeleteInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceWithContext indicates an expected call of DeleteInstanceWithContext
func (mr *MockLightsailAPIMockRecorder) DeleteInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteInstanceWithContext), varargs...)
}

// DeleteKeyPair mocks base method
func (m *MockLightsailAPI) DeleteKeyPair(arg0 *lightsail.DeleteKeyPairInput) (*lightsail.DeleteKeyPairOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyPair", arg0)
	ret0, _ := ret[0].(*lightsail.DeleteKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyPair indicates an expected call of DeleteKeyPair
func (mr *MockLightsailAPIMockRecorder) DeleteKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPair", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteKeyPair), arg0)
}

// DeleteKeyPairRequest mocks base method
func (m *MockLightsailAPI) DeleteKeyPairRequest(arg0 *lightsail.DeleteKeyPairInput) (*request.Request, *lightsail.DeleteKeyPairOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyPairRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DeleteKeyPairOutput)
	return ret0, ret1
}

// DeleteKeyPairRequest indicates an expected call of DeleteKeyPairRequest
func (mr *MockLightsailAPIMockRecorder) DeleteKeyPairRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPairRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteKeyPairRequest), arg0)
}

// DeleteKeyPairWithContext mocks base method
func (m *MockLightsailAPI) DeleteKeyPairWithContext(arg0 aws.Context, arg1 *lightsail.DeleteKeyPairInput, arg2 ...request.Option) (*lightsail.DeleteKeyPairOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKeyPairWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DeleteKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyPairWithContext indicates an expected call of DeleteKeyPairWithContext
func (mr *MockLightsailAPIMockRecorder) DeleteKeyPairWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPairWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteKeyPairWithContext), varargs...)
}

// DeleteLoadBalancer mocks base method
func (m *MockLightsailAPI) DeleteLoadBalancer(arg0 *lightsail.DeleteLoadBalancerInput) (*lightsail.DeleteLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", arg0)
	ret0, _ := ret[0].(*lightsail.DeleteLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer
func (mr *MockLightsailAPIMockRecorder) DeleteLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteLoadBalancer), arg0)
}

// DeleteLoadBalancerRequest mocks base method
func (m *MockLightsailAPI) DeleteLoadBalancerRequest(arg0 *lightsail.DeleteLoadBalancerInput) (*request.Request, *lightsail.DeleteLoadBalancerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DeleteLoadBalancerOutput)
	return ret0, ret1
}

// DeleteLoadBalancerRequest indicates an expected call of DeleteLoadBalancerRequest
func (mr *MockLightsailAPIMockRecorder) DeleteLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteLoadBalancerRequest), arg0)
}

// DeleteLoadBalancerTlsCertificate mocks base method
func (m *MockLightsailAPI) DeleteLoadBalancerTlsCertificate(arg0 *lightsail.DeleteLoadBalancerTlsCertificateInput) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancerTlsCertificate", arg0)
	ret0, _ := ret[0].(*lightsail.DeleteLoadBalancerTlsCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancerTlsCertificate indicates an expected call of DeleteLoadBalancerTlsCertificate
func (mr *MockLightsailAPIMockRecorder) DeleteLoadBalancerTlsCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerTlsCertificate", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteLoadBalancerTlsCertificate), arg0)
}

// DeleteLoadBalancerTlsCertificateRequest mocks base method
func (m *MockLightsailAPI) DeleteLoadBalancerTlsCertificateRequest(arg0 *lightsail.DeleteLoadBalancerTlsCertificateInput) (*request.Request, *lightsail.DeleteLoadBalancerTlsCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancerTlsCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DeleteLoadBalancerTlsCertificateOutput)
	return ret0, ret1
}

// DeleteLoadBalancerTlsCertificateRequest indicates an expected call of DeleteLoadBalancerTlsCertificateRequest
func (mr *MockLightsailAPIMockRecorder) DeleteLoadBalancerTlsCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerTlsCertificateRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteLoadBalancerTlsCertificateRequest), arg0)
}

// DeleteLoadBalancerTlsCertificateWithContext mocks base method
func (m *MockLightsailAPI) DeleteLoadBalancerTlsCertificateWithContext(arg0 aws.Context, arg1 *lightsail.DeleteLoadBalancerTlsCertificateInput, arg2 ...request.Option) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLoadBalancerTlsCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DeleteLoadBalancerTlsCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancerTlsCertificateWithContext indicates an expected call of DeleteLoadBalancerTlsCertificateWithContext
func (mr *MockLightsailAPIMockRecorder) DeleteLoadBalancerTlsCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerTlsCertificateWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteLoadBalancerTlsCertificateWithContext), varargs...)
}

// DeleteLoadBalancerWithContext mocks base method
func (m *MockLightsailAPI) DeleteLoadBalancerWithContext(arg0 aws.Context, arg1 *lightsail.DeleteLoadBalancerInput, arg2 ...request.Option) (*lightsail.DeleteLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLoadBalancerWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DeleteLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancerWithContext indicates an expected call of DeleteLoadBalancerWithContext
func (mr *MockLightsailAPIMockRecorder) DeleteLoadBalancerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DeleteLoadBalancerWithContext), varargs...)
}

// DetachDisk mocks base method
func (m *MockLightsailAPI) DetachDisk(arg0 *lightsail.DetachDiskInput) (*lightsail.DetachDiskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachDisk", arg0)
	ret0, _ := ret[0].(*lightsail.DetachDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachDisk indicates an expected call of DetachDisk
func (mr *MockLightsailAPIMockRecorder) DetachDisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDisk", reflect.TypeOf((*MockLightsailAPI)(nil).DetachDisk), arg0)
}

// DetachDiskRequest mocks base method
func (m *MockLightsailAPI) DetachDiskRequest(arg0 *lightsail.DetachDiskInput) (*request.Request, *lightsail.DetachDiskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachDiskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DetachDiskOutput)
	return ret0, ret1
}

// DetachDiskRequest indicates an expected call of DetachDiskRequest
func (mr *MockLightsailAPIMockRecorder) DetachDiskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDiskRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DetachDiskRequest), arg0)
}

// DetachDiskWithContext mocks base method
func (m *MockLightsailAPI) DetachDiskWithContext(arg0 aws.Context, arg1 *lightsail.DetachDiskInput, arg2 ...request.Option) (*lightsail.DetachDiskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachDiskWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DetachDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachDiskWithContext indicates an expected call of DetachDiskWithContext
func (mr *MockLightsailAPIMockRecorder) DetachDiskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDiskWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DetachDiskWithContext), varargs...)
}

// DetachInstancesFromLoadBalancer mocks base method
func (m *MockLightsailAPI) DetachInstancesFromLoadBalancer(arg0 *lightsail.DetachInstancesFromLoadBalancerInput) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachInstancesFromLoadBalancer", arg0)
	ret0, _ := ret[0].(*lightsail.DetachInstancesFromLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachInstancesFromLoadBalancer indicates an expected call of DetachInstancesFromLoadBalancer
func (mr *MockLightsailAPIMockRecorder) DetachInstancesFromLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachInstancesFromLoadBalancer", reflect.TypeOf((*MockLightsailAPI)(nil).DetachInstancesFromLoadBalancer), arg0)
}

// DetachInstancesFromLoadBalancerRequest mocks base method
func (m *MockLightsailAPI) DetachInstancesFromLoadBalancerRequest(arg0 *lightsail.DetachInstancesFromLoadBalancerInput) (*request.Request, *lightsail.DetachInstancesFromLoadBalancerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachInstancesFromLoadBalancerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DetachInstancesFromLoadBalancerOutput)
	return ret0, ret1
}

// DetachInstancesFromLoadBalancerRequest indicates an expected call of DetachInstancesFromLoadBalancerRequest
func (mr *MockLightsailAPIMockRecorder) DetachInstancesFromLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachInstancesFromLoadBalancerRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DetachInstancesFromLoadBalancerRequest), arg0)
}

// DetachInstancesFromLoadBalancerWithContext mocks base method
func (m *MockLightsailAPI) DetachInstancesFromLoadBalancerWithContext(arg0 aws.Context, arg1 *lightsail.DetachInstancesFromLoadBalancerInput, arg2 ...request.Option) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachInstancesFromLoadBalancerWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DetachInstancesFromLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachInstancesFromLoadBalancerWithContext indicates an expected call of DetachInstancesFromLoadBalancerWithContext
func (mr *MockLightsailAPIMockRecorder) DetachInstancesFromLoadBalancerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachInstancesFromLoadBalancerWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DetachInstancesFromLoadBalancerWithContext), varargs...)
}

// DetachStaticIp mocks base method
func (m *MockLightsailAPI) DetachStaticIp(arg0 *lightsail.DetachStaticIpInput) (*lightsail.DetachStaticIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachStaticIp", arg0)
	ret0, _ := ret[0].(*lightsail.DetachStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachStaticIp indicates an expected call of DetachStaticIp
func (mr *MockLightsailAPIMockRecorder) DetachStaticIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStaticIp", reflect.TypeOf((*MockLightsailAPI)(nil).DetachStaticIp), arg0)
}

// DetachStaticIpRequest mocks base method
func (m *MockLightsailAPI) DetachStaticIpRequest(arg0 *lightsail.DetachStaticIpInput) (*request.Request, *lightsail.DetachStaticIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachStaticIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DetachStaticIpOutput)
	return ret0, ret1
}

// DetachStaticIpRequest indicates an expected call of DetachStaticIpRequest
func (mr *MockLightsailAPIMockRecorder) DetachStaticIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStaticIpRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DetachStaticIpRequest), arg0)
}

// DetachStaticIpWithContext mocks base method
func (m *MockLightsailAPI) DetachStaticIpWithContext(arg0 aws.Context, arg1 *lightsail.DetachStaticIpInput, arg2 ...request.Option) (*lightsail.DetachStaticIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachStaticIpWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DetachStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachStaticIpWithContext indicates an expected call of DetachStaticIpWithContext
func (mr *MockLightsailAPIMockRecorder) DetachStaticIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStaticIpWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DetachStaticIpWithContext), varargs...)
}

// DownloadDefaultKeyPair mocks base method
func (m *MockLightsailAPI) DownloadDefaultKeyPair(arg0 *lightsail.DownloadDefaultKeyPairInput) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadDefaultKeyPair", arg0)
	ret0, _ := ret[0].(*lightsail.DownloadDefaultKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadDefaultKeyPair indicates an expected call of DownloadDefaultKeyPair
func (mr *MockLightsailAPIMockRecorder) DownloadDefaultKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadDefaultKeyPair", reflect.TypeOf((*MockLightsailAPI)(nil).DownloadDefaultKeyPair), arg0)
}

// DownloadDefaultKeyPairRequest mocks base method
func (m *MockLightsailAPI) DownloadDefaultKeyPairRequest(arg0 *lightsail.DownloadDefaultKeyPairInput) (*request.Request, *lightsail.DownloadDefaultKeyPairOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadDefaultKeyPairRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.DownloadDefaultKeyPairOutput)
	return ret0, ret1
}

// DownloadDefaultKeyPairRequest indicates an expected call of DownloadDefaultKeyPairRequest
func (mr *MockLightsailAPIMockRecorder) DownloadDefaultKeyPairRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadDefaultKeyPairRequest", reflect.TypeOf((*MockLightsailAPI)(nil).DownloadDefaultKeyPairRequest), arg0)
}

// DownloadDefaultKeyPairWithContext mocks base method
func (m *MockLightsailAPI) DownloadDefaultKeyPairWithContext(arg0 aws.Context, arg1 *lightsail.DownloadDefaultKeyPairInput, arg2 ...request.Option) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadDefaultKeyPairWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.DownloadDefaultKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadDefaultKeyPairWithContext indicates an expected call of DownloadDefaultKeyPairWithContext
func (mr *MockLightsailAPIMockRecorder) DownloadDefaultKeyPairWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadDefaultKeyPairWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).DownloadDefaultKeyPairWithContext), varargs...)
}

// GetActiveNames mocks base method
func (m *MockLightsailAPI) GetActiveNames(arg0 *lightsail.GetActiveNamesInput) (*lightsail.GetActiveNamesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveNames", arg0)
	ret0, _ := ret[0].(*lightsail.GetActiveNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveNames indicates an expected call of GetActiveNames
func (mr *MockLightsailAPIMockRecorder) GetActiveNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveNames", reflect.TypeOf((*MockLightsailAPI)(nil).GetActiveNames), arg0)
}

// GetActiveNamesRequest mocks base method
func (m *MockLightsailAPI) GetActiveNamesRequest(arg0 *lightsail.GetActiveNamesInput) (*request.Request, *lightsail.GetActiveNamesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveNamesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetActiveNamesOutput)
	return ret0, ret1
}

// GetActiveNamesRequest indicates an expected call of GetActiveNamesRequest
func (mr *MockLightsailAPIMockRecorder) GetActiveNamesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveNamesRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetActiveNamesRequest), arg0)
}

// GetActiveNamesWithContext mocks base method
func (m *MockLightsailAPI) GetActiveNamesWithContext(arg0 aws.Context, arg1 *lightsail.GetActiveNamesInput, arg2 ...request.Option) (*lightsail.GetActiveNamesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActiveNamesWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetActiveNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveNamesWithContext indicates an expected call of GetActiveNamesWithContext
func (mr *MockLightsailAPIMockRecorder) GetActiveNamesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveNamesWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetActiveNamesWithContext), varargs...)
}

// GetBlueprints mocks base method
func (m *MockLightsailAPI) GetBlueprints(arg0 *lightsail.GetBlueprintsInput) (*lightsail.GetBlueprintsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlueprints", arg0)
	ret0, _ := ret[0].(*lightsail.GetBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlueprints indicates an expected call of GetBlueprints
func (mr *MockLightsailAPIMockRecorder) GetBlueprints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprints", reflect.TypeOf((*MockLightsailAPI)(nil).GetBlueprints), arg0)
}

// GetBlueprintsRequest mocks base method
func (m *MockLightsailAPI) GetBlueprintsRequest(arg0 *lightsail.GetBlueprintsInput) (*request.Request, *lightsail.GetBlueprintsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlueprintsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetBlueprintsOutput)
	return ret0, ret1
}

// GetBlueprintsRequest indicates an expected call of GetBlueprintsRequest
func (mr *MockLightsailAPIMockRecorder) GetBlueprintsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetBlueprintsRequest), arg0)
}

// GetBlueprintsWithContext mocks base method
func (m *MockLightsailAPI) GetBlueprintsWithContext(arg0 aws.Context, arg1 *lightsail.GetBlueprintsInput, arg2 ...request.Option) (*lightsail.GetBlueprintsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlueprintsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlueprintsWithContext indicates an expected call of GetBlueprintsWithContext
func (mr *MockLightsailAPIMockRecorder) GetBlueprintsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetBlueprintsWithContext), varargs...)
}

// GetBundles mocks base method
func (m *MockLightsailAPI) GetBundles(arg0 *lightsail.GetBundlesInput) (*lightsail.GetBundlesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundles", arg0)
	ret0, _ := ret[0].(*lightsail.GetBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundles indicates an expected call of GetBundles
func (mr *MockLightsailAPIMockRecorder) GetBundles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundles", reflect.TypeOf((*MockLightsailAPI)(nil).GetBundles), arg0)
}

// GetBundlesRequest mocks base method
func (m *MockLightsailAPI) GetBundlesRequest(arg0 *lightsail.GetBundlesInput) (*request.Request, *lightsail.GetBundlesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundlesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetBundlesOutput)
	return ret0, ret1
}

// GetBundlesRequest indicates an expected call of GetBundlesRequest
func (mr *MockLightsailAPIMockRecorder) GetBundlesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundlesRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetBundlesRequest), arg0)
}

// GetBundlesWithContext mocks base method
func (m *MockLightsailAPI) GetBundlesWithContext(arg0 aws.Context, arg1 *lightsail.GetBundlesInput, arg2 ...request.Option) (*lightsail.GetBundlesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBundlesWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundlesWithContext indicates an expected call of GetBundlesWithContext
func (mr *MockLightsailAPIMockRecorder) GetBundlesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundlesWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetBundlesWithContext), varargs...)
}

// GetDisk mocks base method
func (m *MockLightsailAPI) GetDisk(arg0 *lightsail.GetDiskInput) (*lightsail.GetDiskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisk", arg0)
	ret0, _ := ret[0].(*lightsail.GetDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisk indicates an expected call of GetDisk
func (mr *MockLightsailAPIMockRecorder) GetDisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisk", reflect.TypeOf((*MockLightsailAPI)(nil).GetDisk), arg0)
}

// GetDiskRequest mocks base method
func (m *MockLightsailAPI) GetDiskRequest(arg0 *lightsail.GetDiskInput) (*request.Request, *lightsail.GetDiskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetDiskOutput)
	return ret0, ret1
}

// GetDiskRequest indicates an expected call of GetDiskRequest
func (mr *MockLightsailAPIMockRecorder) GetDiskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetDiskRequest), arg0)
}

// GetDiskSnapshot mocks base method
func (m *MockLightsailAPI) GetDiskSnapshot(arg0 *lightsail.GetDiskSnapshotInput) (*lightsail.GetDiskSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskSnapshot", arg0)
	ret0, _ := ret[0].(*lightsail.GetDiskSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskSnapshot indicates an expected call of GetDiskSnapshot
func (mr *MockLightsailAPIMockRecorder) GetDiskSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskSnapshot", reflect.TypeOf((*MockLightsailAPI)(nil).GetDiskSnapshot), arg0)
}

// GetDiskSnapshotRequest mocks base method
func (m *MockLightsailAPI) GetDiskSnapshotRequest(arg0 *lightsail.GetDiskSnapshotInput) (*request.Request, *lightsail.GetDiskSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetDiskSnapshotOutput)
	return ret0, ret1
}

// GetDiskSnapshotRequest indicates an expected call of GetDiskSnapshotRequest
func (mr *MockLightsailAPIMockRecorder) GetDiskSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskSnapshotRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetDiskSnapshotRequest), arg0)
}

// GetDiskSnapshotWithContext mocks base method
func (m *MockLightsailAPI) GetDiskSnapshotWithContext(arg0 aws.Context, arg1 *lightsail.GetDiskSnapshotInput, arg2 ...request.Option) (*lightsail.GetDiskSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiskSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDiskSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskSnapshotWithContext indicates an expected call of GetDiskSnapshotWithContext
func (mr *MockLightsailAPIMockRecorder) GetDiskSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskSnapshotWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetDiskSnapshotWithContext), varargs...)
}

// GetDiskSnapshots mocks base method
func (m *MockLightsailAPI) GetDiskSnapshots(arg0 *lightsail.GetDiskSnapshotsInput) (*lightsail.GetDiskSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskSnapshots", arg0)
	ret0, _ := ret[0].(*lightsail.GetDiskSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskSnapshots indicates an expected call of GetDiskSnapshots
func (mr *MockLightsailAPIMockRecorder) GetDiskSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskSnapshots", reflect.TypeOf((*MockLightsailAPI)(nil).GetDiskSnapshots), arg0)
}

// GetDiskSnapshotsRequest mocks base method
func (m *MockLightsailAPI) GetDiskSnapshotsRequest(arg0 *lightsail.GetDiskSnapshotsInput) (*request.Request, *lightsail.GetDiskSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetDiskSnapshotsOutput)
	return ret0, ret1
}

// GetDiskSnapshotsRequest indicates an expected call of GetDiskSnapshotsRequest
func (mr *MockLightsailAPIMockRecorder) GetDiskSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskSnapshotsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetDiskSnapshotsRequest), arg0)
}

// GetDiskSnapshotsWithContext mocks base method
func (m *MockLightsailAPI) GetDiskSnapshotsWithContext(arg0 aws.Context, arg1 *lightsail.GetDiskSnapshotsInput, arg2 ...request.Option) (*lightsail.GetDiskSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiskSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDiskSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskSnapshotsWithContext indicates an expected call of GetDiskSnapshotsWithContext
func (mr *MockLightsailAPIMockRecorder) GetDiskSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskSnapshotsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetDiskSnapshotsWithContext), varargs...)
}

// GetDiskWithContext mocks base method
func (m *MockLightsailAPI) GetDiskWithContext(arg0 aws.Context, arg1 *lightsail.GetDiskInput, arg2 ...request.Option) (*lightsail.GetDiskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiskWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskWithContext indicates an expected call of GetDiskWithContext
func (mr *MockLightsailAPIMockRecorder) GetDiskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetDiskWithContext), varargs...)
}

// GetDisks mocks base method
func (m *MockLightsailAPI) GetDisks(arg0 *lightsail.GetDisksInput) (*lightsail.GetDisksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisks", arg0)
	ret0, _ := ret[0].(*lightsail.GetDisksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisks indicates an expected call of GetDisks
func (mr *MockLightsailAPIMockRecorder) GetDisks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisks", reflect.TypeOf((*MockLightsailAPI)(nil).GetDisks), arg0)
}

// GetDisksRequest mocks base method
func (m *MockLightsailAPI) GetDisksRequest(arg0 *lightsail.GetDisksInput) (*request.Request, *lightsail.GetDisksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetDisksOutput)
	return ret0, ret1
}

// GetDisksRequest indicates an expected call of GetDisksRequest
func (mr *MockLightsailAPIMockRecorder) GetDisksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisksRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetDisksRequest), arg0)
}

// GetDisksWithContext mocks base method
func (m *MockLightsailAPI) GetDisksWithContext(arg0 aws.Context, arg1 *lightsail.GetDisksInput, arg2 ...request.Option) (*lightsail.GetDisksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDisksWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDisksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisksWithContext indicates an expected call of GetDisksWithContext
func (mr *MockLightsailAPIMockRecorder) GetDisksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisksWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetDisksWithContext), varargs...)
}

// GetDomain mocks base method
func (m *MockLightsailAPI) GetDomain(arg0 *lightsail.GetDomainInput) (*lightsail.GetDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", arg0)
	ret0, _ := ret[0].(*lightsail.GetDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain
func (mr *MockLightsailAPIMockRecorder) GetDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockLightsailAPI)(nil).GetDomain), arg0)
}

// GetDomainRequest mocks base method
func (m *MockLightsailAPI) GetDomainRequest(arg0 *lightsail.GetDomainInput) (*request.Request, *lightsail.GetDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetDomainOutput)
	return ret0, ret1
}

// GetDomainRequest indicates an expected call of GetDomainRequest
func (mr *MockLightsailAPIMockRecorder) GetDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetDomainRequest), arg0)
}

// GetDomainWithContext mocks base method
func (m *MockLightsailAPI) GetDomainWithContext(arg0 aws.Context, arg1 *lightsail.GetDomainInput, arg2 ...request.Option) (*lightsail.GetDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWithContext indicates an expected call of GetDomainWithContext
func (mr *MockLightsailAPIMockRecorder) GetDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetDomainWithContext), varargs...)
}

// GetDomains mocks base method
func (m *MockLightsailAPI) GetDomains(arg0 *lightsail.GetDomainsInput) (*lightsail.GetDomainsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomains", arg0)
	ret0, _ := ret[0].(*lightsail.GetDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomains indicates an expected call of GetDomains
func (mr *MockLightsailAPIMockRecorder) GetDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomains", reflect.TypeOf((*MockLightsailAPI)(nil).GetDomains), arg0)
}

// GetDomainsRequest mocks base method
func (m *MockLightsailAPI) GetDomainsRequest(arg0 *lightsail.GetDomainsInput) (*request.Request, *lightsail.GetDomainsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetDomainsOutput)
	return ret0, ret1
}

// GetDomainsRequest indicates an expected call of GetDomainsRequest
func (mr *MockLightsailAPIMockRecorder) GetDomainsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetDomainsRequest), arg0)
}

// GetDomainsWithContext mocks base method
func (m *MockLightsailAPI) GetDomainsWithContext(arg0 aws.Context, arg1 *lightsail.GetDomainsInput, arg2 ...request.Option) (*lightsail.GetDomainsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainsWithContext indicates an expected call of GetDomainsWithContext
func (mr *MockLightsailAPIMockRecorder) GetDomainsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetDomainsWithContext), varargs...)
}

// GetInstance mocks base method
func (m *MockLightsailAPI) GetInstance(arg0 *lightsail.GetInstanceInput) (*lightsail.GetInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0)
	ret0, _ := ret[0].(*lightsail.GetInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance
func (mr *MockLightsailAPIMockRecorder) GetInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstance), arg0)
}

// GetInstanceAccessDetails mocks base method
func (m *MockLightsailAPI) GetInstanceAccessDetails(arg0 *lightsail.GetInstanceAccessDetailsInput) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceAccessDetails", arg0)
	ret0, _ := ret[0].(*lightsail.GetInstanceAccessDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceAccessDetails indicates an expected call of GetInstanceAccessDetails
func (mr *MockLightsailAPIMockRecorder) GetInstanceAccessDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceAccessDetails", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceAccessDetails), arg0)
}

// GetInstanceAccessDetailsRequest mocks base method
func (m *MockLightsailAPI) GetInstanceAccessDetailsRequest(arg0 *lightsail.GetInstanceAccessDetailsInput) (*request.Request, *lightsail.GetInstanceAccessDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceAccessDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetInstanceAccessDetailsOutput)
	return ret0, ret1
}

// GetInstanceAccessDetailsRequest indicates an expected call of GetInstanceAccessDetailsRequest
func (mr *MockLightsailAPIMockRecorder) GetInstanceAccessDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceAccessDetailsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceAccessDetailsRequest), arg0)
}

// GetInstanceAccessDetailsWithContext mocks base method
func (m *MockLightsailAPI) GetInstanceAccessDetailsWithContext(arg0 aws.Context, arg1 *lightsail.GetInstanceAccessDetailsInput, arg2 ...request.Option) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceAccessDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceAccessDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceAccessDetailsWithContext indicates an expected call of GetInstanceAccessDetailsWithContext
func (mr *MockLightsailAPIMockRecorder) GetInstanceAccessDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceAccessDetailsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceAccessDetailsWithContext), varargs...)
}

// GetInstanceMetricData mocks base method
func (m *MockLightsailAPI) GetInstanceMetricData(arg0 *lightsail.GetInstanceMetricDataInput) (*lightsail.GetInstanceMetricDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMetricData", arg0)
	ret0, _ := ret[0].(*lightsail.GetInstanceMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceMetricData indicates an expected call of GetInstanceMetricData
func (mr *MockLightsailAPIMockRecorder) GetInstanceMetricData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetricData", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceMetricData), arg0)
}

// GetInstanceMetricDataRequest mocks base method
func (m *MockLightsailAPI) GetInstanceMetricDataRequest(arg0 *lightsail.GetInstanceMetricDataInput) (*request.Request, *lightsail.GetInstanceMetricDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMetricDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetInstanceMetricDataOutput)
	return ret0, ret1
}

// GetInstanceMetricDataRequest indicates an expected call of GetInstanceMetricDataRequest
func (mr *MockLightsailAPIMockRecorder) GetInstanceMetricDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetricDataRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceMetricDataRequest), arg0)
}

// GetInstanceMetricDataWithContext mocks base method
func (m *MockLightsailAPI) GetInstanceMetricDataWithContext(arg0 aws.Context, arg1 *lightsail.GetInstanceMetricDataInput, arg2 ...request.Option) (*lightsail.GetInstanceMetricDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceMetricDataWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceMetricDataWithContext indicates an expected call of GetInstanceMetricDataWithContext
func (mr *MockLightsailAPIMockRecorder) GetInstanceMetricDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetricDataWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceMetricDataWithContext), varargs...)
}

// GetInstancePortStates mocks base method
func (m *MockLightsailAPI) GetInstancePortStates(arg0 *lightsail.GetInstancePortStatesInput) (*lightsail.GetInstancePortStatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancePortStates", arg0)
	ret0, _ := ret[0].(*lightsail.GetInstancePortStatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancePortStates indicates an expected call of GetInstancePortStates
func (mr *MockLightsailAPIMockRecorder) GetInstancePortStates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancePortStates", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstancePortStates), arg0)
}

// GetInstancePortStatesRequest mocks base method
func (m *MockLightsailAPI) GetInstancePortStatesRequest(arg0 *lightsail.GetInstancePortStatesInput) (*request.Request, *lightsail.GetInstancePortStatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancePortStatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetInstancePortStatesOutput)
	return ret0, ret1
}

// GetInstancePortStatesRequest indicates an expected call of GetInstancePortStatesRequest
func (mr *MockLightsailAPIMockRecorder) GetInstancePortStatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancePortStatesRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstancePortStatesRequest), arg0)
}

// GetInstancePortStatesWithContext mocks base method
func (m *MockLightsailAPI) GetInstancePortStatesWithContext(arg0 aws.Context, arg1 *lightsail.GetInstancePortStatesInput, arg2 ...request.Option) (*lightsail.GetInstancePortStatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstancePortStatesWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstancePortStatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancePortStatesWithContext indicates an expected call of GetInstancePortStatesWithContext
func (mr *MockLightsailAPIMockRecorder) GetInstancePortStatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancePortStatesWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstancePortStatesWithContext), varargs...)
}

// GetInstanceRequest mocks base method
func (m *MockLightsailAPI) GetInstanceRequest(arg0 *lightsail.GetInstanceInput) (*request.Request, *lightsail.GetInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetInstanceOutput)
	return ret0, ret1
}

// GetInstanceRequest indicates an expected call of GetInstanceRequest
func (mr *MockLightsailAPIMockRecorder) GetInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceRequest), arg0)
}

// GetInstanceSnapshot mocks base method
func (m *MockLightsailAPI) GetInstanceSnapshot(arg0 *lightsail.GetInstanceSnapshotInput) (*lightsail.GetInstanceSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshot", arg0)
	ret0, _ := ret[0].(*lightsail.GetInstanceSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshot indicates an expected call of GetInstanceSnapshot
func (mr *MockLightsailAPIMockRecorder) GetInstanceSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshot", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceSnapshot), arg0)
}

// GetInstanceSnapshotRequest mocks base method
func (m *MockLightsailAPI) GetInstanceSnapshotRequest(arg0 *lightsail.GetInstanceSnapshotInput) (*request.Request, *lightsail.GetInstanceSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetInstanceSnapshotOutput)
	return ret0, ret1
}

// GetInstanceSnapshotRequest indicates an expected call of GetInstanceSnapshotRequest
func (mr *MockLightsailAPIMockRecorder) GetInstanceSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshotRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceSnapshotRequest), arg0)
}

// GetInstanceSnapshotWithContext mocks base method
func (m *MockLightsailAPI) GetInstanceSnapshotWithContext(arg0 aws.Context, arg1 *lightsail.GetInstanceSnapshotInput, arg2 ...request.Option) (*lightsail.GetInstanceSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshotWithContext indicates an expected call of GetInstanceSnapshotWithContext
func (mr *MockLightsailAPIMockRecorder) GetInstanceSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshotWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceSnapshotWithContext), varargs...)
}

// GetInstanceSnapshots mocks base method
func (m *MockLightsailAPI) GetInstanceSnapshots(arg0 *lightsail.GetInstanceSnapshotsInput) (*lightsail.GetInstanceSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshots", arg0)
	ret0, _ := ret[0].(*lightsail.GetInstanceSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshots indicates an expected call of GetInstanceSnapshots
func (mr *MockLightsailAPIMockRecorder) GetInstanceSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshots", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceSnapshots), arg0)
}

// GetInstanceSnapshotsRequest mocks base method
func (m *MockLightsailAPI) GetInstanceSnapshotsRequest(arg0 *lightsail.GetInstanceSnapshotsInput) (*request.Request, *lightsail.GetInstanceSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetInstanceSnapshotsOutput)
	return ret0, ret1
}

// GetInstanceSnapshotsRequest indicates an expected call of GetInstanceSnapshotsRequest
func (mr *MockLightsailAPIMockRecorder) GetInstanceSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshotsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceSnapshotsRequest), arg0)
}

// GetInstanceSnapshotsWithContext mocks base method
func (m *MockLightsailAPI) GetInstanceSnapshotsWithContext(arg0 aws.Context, arg1 *lightsail.GetInstanceSnapshotsInput, arg2 ...request.Option) (*lightsail.GetInstanceSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshotsWithContext indicates an expected call of GetInstanceSnapshotsWithContext
func (mr *MockLightsailAPIMockRecorder) GetInstanceSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshotsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceSnapshotsWithContext), varargs...)
}

// GetInstanceState mocks base method
func (m *MockLightsailAPI) GetInstanceState(arg0 *lightsail.GetInstanceStateInput) (*lightsail.GetInstanceStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceState", arg0)
	ret0, _ := ret[0].(*lightsail.GetInstanceStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceState indicates an expected call of GetInstanceState
func (mr *MockLightsailAPIMockRecorder) GetInstanceState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceState", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceState), arg0)
}

// GetInstanceStateRequest mocks base method
func (m *MockLightsailAPI) GetInstanceStateRequest(arg0 *lightsail.GetInstanceStateInput) (*request.Request, *lightsail.GetInstanceStateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetInstanceStateOutput)
	return ret0, ret1
}

// GetInstanceStateRequest indicates an expected call of GetInstanceStateRequest
func (mr *MockLightsailAPIMockRecorder) GetInstanceStateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceStateRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceStateRequest), arg0)
}

// GetInstanceStateWithContext mocks base method
func (m *MockLightsailAPI) GetInstanceStateWithContext(arg0 aws.Context, arg1 *lightsail.GetInstanceStateInput, arg2 ...request.Option) (*lightsail.GetInstanceStateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceStateWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceStateWithContext indicates an expected call of GetInstanceStateWithContext
func (mr *MockLightsailAPIMockRecorder) GetInstanceStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceStateWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceStateWithContext), varargs...)
}

// GetInstanceWithContext mocks base method
func (m *MockLightsailAPI) GetInstanceWithContext(arg0 aws.Context, arg1 *lightsail.GetInstanceInput, arg2 ...request.Option) (*lightsail.GetInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceWithContext indicates an expected call of GetInstanceWithContext
func (mr *MockLightsailAPIMockRecorder) GetInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstanceWithContext), varargs...)
}

// GetInstances mocks base method
func (m *MockLightsailAPI) GetInstances(arg0 *lightsail.GetInstancesInput) (*lightsail.GetInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", arg0)
	ret0, _ := ret[0].(*lightsail.GetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances
func (mr *MockLightsailAPIMockRecorder) GetInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstances), arg0)
}

// GetInstancesRequest mocks base method
func (m *MockLightsailAPI) GetInstancesRequest(arg0 *lightsail.GetInstancesInput) (*request.Request, *lightsail.GetInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetInstancesOutput)
	return ret0, ret1
}

// GetInstancesRequest indicates an expected call of GetInstancesRequest
func (mr *MockLightsailAPIMockRecorder) GetInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstancesRequest), arg0)
}

// GetInstancesWithContext mocks base method
func (m *MockLightsailAPI) GetInstancesWithContext(arg0 aws.Context, arg1 *lightsail.GetInstancesInput, arg2 ...request.Option) (*lightsail.GetInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesWithContext indicates an expected call of GetInstancesWithContext
func (mr *MockLightsailAPIMockRecorder) GetInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetInstancesWithContext), varargs...)
}

// GetKeyPair mocks base method
func (m *MockLightsailAPI) GetKeyPair(arg0 *lightsail.GetKeyPairInput) (*lightsail.GetKeyPairOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyPair", arg0)
	ret0, _ := ret[0].(*lightsail.GetKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyPair indicates an expected call of GetKeyPair
func (mr *MockLightsailAPIMockRecorder) GetKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPair", reflect.TypeOf((*MockLightsailAPI)(nil).GetKeyPair), arg0)
}

// GetKeyPairRequest mocks base method
func (m *MockLightsailAPI) GetKeyPairRequest(arg0 *lightsail.GetKeyPairInput) (*request.Request, *lightsail.GetKeyPairOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyPairRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetKeyPairOutput)
	return ret0, ret1
}

// GetKeyPairRequest indicates an expected call of GetKeyPairRequest
func (mr *MockLightsailAPIMockRecorder) GetKeyPairRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPairRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetKeyPairRequest), arg0)
}

// GetKeyPairWithContext mocks base method
func (m *MockLightsailAPI) GetKeyPairWithContext(arg0 aws.Context, arg1 *lightsail.GetKeyPairInput, arg2 ...request.Option) (*lightsail.GetKeyPairOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyPairWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyPairWithContext indicates an expected call of GetKeyPairWithContext
func (mr *MockLightsailAPIMockRecorder) GetKeyPairWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPairWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetKeyPairWithContext), varargs...)
}

// GetKeyPairs mocks base method
func (m *MockLightsailAPI) GetKeyPairs(arg0 *lightsail.GetKeyPairsInput) (*lightsail.GetKeyPairsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyPairs", arg0)
	ret0, _ := ret[0].(*lightsail.GetKeyPairsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyPairs indicates an expected call of GetKeyPairs
func (mr *MockLightsailAPIMockRecorder) GetKeyPairs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPairs", reflect.TypeOf((*MockLightsailAPI)(nil).GetKeyPairs), arg0)
}

// GetKeyPairsRequest mocks base method
func (m *MockLightsailAPI) GetKeyPairsRequest(arg0 *lightsail.GetKeyPairsInput) (*request.Request, *lightsail.GetKeyPairsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyPairsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetKeyPairsOutput)
	return ret0, ret1
}

// GetKeyPairsRequest indicates an expected call of GetKeyPairsRequest
func (mr *MockLightsailAPIMockRecorder) GetKeyPairsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPairsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetKeyPairsRequest), arg0)
}

// GetKeyPairsWithContext mocks base method
func (m *MockLightsailAPI) GetKeyPairsWithContext(arg0 aws.Context, arg1 *lightsail.GetKeyPairsInput, arg2 ...request.Option) (*lightsail.GetKeyPairsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyPairsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetKeyPairsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyPairsWithContext indicates an expected call of GetKeyPairsWithContext
func (mr *MockLightsailAPIMockRecorder) GetKeyPairsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPairsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetKeyPairsWithContext), varargs...)
}

// GetLoadBalancer mocks base method
func (m *MockLightsailAPI) GetLoadBalancer(arg0 *lightsail.GetLoadBalancerInput) (*lightsail.GetLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", arg0)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancer), arg0)
}

// GetLoadBalancerMetricData mocks base method
func (m *MockLightsailAPI) GetLoadBalancerMetricData(arg0 *lightsail.GetLoadBalancerMetricDataInput) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerMetricData", arg0)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancerMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerMetricData indicates an expected call of GetLoadBalancerMetricData
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancerMetricData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerMetricData", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancerMetricData), arg0)
}

// GetLoadBalancerMetricDataRequest mocks base method
func (m *MockLightsailAPI) GetLoadBalancerMetricDataRequest(arg0 *lightsail.GetLoadBalancerMetricDataInput) (*request.Request, *lightsail.GetLoadBalancerMetricDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerMetricDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetLoadBalancerMetricDataOutput)
	return ret0, ret1
}

// GetLoadBalancerMetricDataRequest indicates an expected call of GetLoadBalancerMetricDataRequest
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancerMetricDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerMetricDataRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancerMetricDataRequest), arg0)
}

// GetLoadBalancerMetricDataWithContext mocks base method
func (m *MockLightsailAPI) GetLoadBalancerMetricDataWithContext(arg0 aws.Context, arg1 *lightsail.GetLoadBalancerMetricDataInput, arg2 ...request.Option) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoadBalancerMetricDataWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancerMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerMetricDataWithContext indicates an expected call of GetLoadBalancerMetricDataWithContext
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancerMetricDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerMetricDataWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancerMetricDataWithContext), varargs...)
}

// GetLoadBalancerRequest mocks base method
func (m *MockLightsailAPI) GetLoadBalancerRequest(arg0 *lightsail.GetLoadBalancerInput) (*request.Request, *lightsail.GetLoadBalancerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetLoadBalancerOutput)
	return ret0, ret1
}

// GetLoadBalancerRequest indicates an expected call of GetLoadBalancerRequest
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancerRequest), arg0)
}

// GetLoadBalancerTlsCertificates mocks base method
func (m *MockLightsailAPI) GetLoadBalancerTlsCertificates(arg0 *lightsail.GetLoadBalancerTlsCertificatesInput) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerTlsCertificates", arg0)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancerTlsCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerTlsCertificates indicates an expected call of GetLoadBalancerTlsCertificates
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancerTlsCertificates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerTlsCertificates", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancerTlsCertificates), arg0)
}

// GetLoadBalancerTlsCertificatesRequest mocks base method
func (m *MockLightsailAPI) GetLoadBalancerTlsCertificatesRequest(arg0 *lightsail.GetLoadBalancerTlsCertificatesInput) (*request.Request, *lightsail.GetLoadBalancerTlsCertificatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerTlsCertificatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetLoadBalancerTlsCertificatesOutput)
	return ret0, ret1
}

// GetLoadBalancerTlsCertificatesRequest indicates an expected call of GetLoadBalancerTlsCertificatesRequest
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancerTlsCertificatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerTlsCertificatesRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancerTlsCertificatesRequest), arg0)
}

// GetLoadBalancerTlsCertificatesWithContext mocks base method
func (m *MockLightsailAPI) GetLoadBalancerTlsCertificatesWithContext(arg0 aws.Context, arg1 *lightsail.GetLoadBalancerTlsCertificatesInput, arg2 ...request.Option) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoadBalancerTlsCertificatesWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancerTlsCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerTlsCertificatesWithContext indicates an expected call of GetLoadBalancerTlsCertificatesWithContext
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancerTlsCertificatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerTlsCertificatesWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancerTlsCertificatesWithContext), varargs...)
}

// GetLoadBalancerWithContext mocks base method
func (m *MockLightsailAPI) GetLoadBalancerWithContext(arg0 aws.Context, arg1 *lightsail.GetLoadBalancerInput, arg2 ...request.Option) (*lightsail.GetLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoadBalancerWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerWithContext indicates an expected call of GetLoadBalancerWithContext
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancerWithContext), varargs...)
}

// GetLoadBalancers mocks base method
func (m *MockLightsailAPI) GetLoadBalancers(arg0 *lightsail.GetLoadBalancersInput) (*lightsail.GetLoadBalancersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancers", arg0)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancers indicates an expected call of GetLoadBalancers
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancers", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancers), arg0)
}

// GetLoadBalancersRequest mocks base method
func (m *MockLightsailAPI) GetLoadBalancersRequest(arg0 *lightsail.GetLoadBalancersInput) (*request.Request, *lightsail.GetLoadBalancersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetLoadBalancersOutput)
	return ret0, ret1
}

// GetLoadBalancersRequest indicates an expected call of GetLoadBalancersRequest
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancersRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancersRequest), arg0)
}

// GetLoadBalancersWithContext mocks base method
func (m *MockLightsailAPI) GetLoadBalancersWithContext(arg0 aws.Context, arg1 *lightsail.GetLoadBalancersInput, arg2 ...request.Option) (*lightsail.GetLoadBalancersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoadBalancersWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancersWithContext indicates an expected call of GetLoadBalancersWithContext
func (mr *MockLightsailAPIMockRecorder) GetLoadBalancersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancersWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetLoadBalancersWithContext), varargs...)
}

// GetOperation mocks base method
func (m *MockLightsailAPI) GetOperation(arg0 *lightsail.GetOperationInput) (*lightsail.GetOperationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", arg0)
	ret0, _ := ret[0].(*lightsail.GetOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation
func (mr *MockLightsailAPIMockRecorder) GetOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockLightsailAPI)(nil).GetOperation), arg0)
}

// GetOperationRequest mocks base method
func (m *MockLightsailAPI) GetOperationRequest(arg0 *lightsail.GetOperationInput) (*request.Request, *lightsail.GetOperationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetOperationOutput)
	return ret0, ret1
}

// GetOperationRequest indicates an expected call of GetOperationRequest
func (mr *MockLightsailAPIMockRecorder) GetOperationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetOperationRequest), arg0)
}

// GetOperationWithContext mocks base method
func (m *MockLightsailAPI) GetOperationWithContext(arg0 aws.Context, arg1 *lightsail.GetOperationInput, arg2 ...request.Option) (*lightsail.GetOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperationWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationWithContext indicates an expected call of GetOperationWithContext
func (mr *MockLightsailAPIMockRecorder) GetOperationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetOperationWithContext), varargs...)
}

// GetOperations mocks base method
func (m *MockLightsailAPI) GetOperations(arg0 *lightsail.GetOperationsInput) (*lightsail.GetOperationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", arg0)
	ret0, _ := ret[0].(*lightsail.GetOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations
func (mr *MockLightsailAPIMockRecorder) GetOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockLightsailAPI)(nil).GetOperations), arg0)
}

// GetOperationsForResource mocks base method
func (m *MockLightsailAPI) GetOperationsForResource(arg0 *lightsail.GetOperationsForResourceInput) (*lightsail.GetOperationsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsForResource", arg0)
	ret0, _ := ret[0].(*lightsail.GetOperationsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsForResource indicates an expected call of GetOperationsForResource
func (mr *MockLightsailAPIMockRecorder) GetOperationsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsForResource", reflect.TypeOf((*MockLightsailAPI)(nil).GetOperationsForResource), arg0)
}

// GetOperationsForResourceRequest mocks base method
func (m *MockLightsailAPI) GetOperationsForResourceRequest(arg0 *lightsail.GetOperationsForResourceInput) (*request.Request, *lightsail.GetOperationsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetOperationsForResourceOutput)
	return ret0, ret1
}

// GetOperationsForResourceRequest indicates an expected call of GetOperationsForResourceRequest
func (mr *MockLightsailAPIMockRecorder) GetOperationsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsForResourceRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetOperationsForResourceRequest), arg0)
}

// GetOperationsForResourceWithContext mocks base method
func (m *MockLightsailAPI) GetOperationsForResourceWithContext(arg0 aws.Context, arg1 *lightsail.GetOperationsForResourceInput, arg2 ...request.Option) (*lightsail.GetOperationsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperationsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetOperationsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsForResourceWithContext indicates an expected call of GetOperationsForResourceWithContext
func (mr *MockLightsailAPIMockRecorder) GetOperationsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsForResourceWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetOperationsForResourceWithContext), varargs...)
}

// GetOperationsRequest mocks base method
func (m *MockLightsailAPI) GetOperationsRequest(arg0 *lightsail.GetOperationsInput) (*request.Request, *lightsail.GetOperationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetOperationsOutput)
	return ret0, ret1
}

// GetOperationsRequest indicates an expected call of GetOperationsRequest
func (mr *MockLightsailAPIMockRecorder) GetOperationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetOperationsRequest), arg0)
}

// GetOperationsWithContext mocks base method
func (m *MockLightsailAPI) GetOperationsWithContext(arg0 aws.Context, arg1 *lightsail.GetOperationsInput, arg2 ...request.Option) (*lightsail.GetOperationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperationsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsWithContext indicates an expected call of GetOperationsWithContext
func (mr *MockLightsailAPIMockRecorder) GetOperationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetOperationsWithContext), varargs...)
}

// GetRegions mocks base method
func (m *MockLightsailAPI) GetRegions(arg0 *lightsail.GetRegionsInput) (*lightsail.GetRegionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegions", arg0)
	ret0, _ := ret[0].(*lightsail.GetRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions
func (mr *MockLightsailAPIMockRecorder) GetRegions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockLightsailAPI)(nil).GetRegions), arg0)
}

// GetRegionsRequest mocks base method
func (m *MockLightsailAPI) GetRegionsRequest(arg0 *lightsail.GetRegionsInput) (*request.Request, *lightsail.GetRegionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetRegionsOutput)
	return ret0, ret1
}

// GetRegionsRequest indicates an expected call of GetRegionsRequest
func (mr *MockLightsailAPIMockRecorder) GetRegionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetRegionsRequest), arg0)
}

// GetRegionsWithContext mocks base method
func (m *MockLightsailAPI) GetRegionsWithContext(arg0 aws.Context, arg1 *lightsail.GetRegionsInput, arg2 ...request.Option) (*lightsail.GetRegionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegionsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionsWithContext indicates an expected call of GetRegionsWithContext
func (mr *MockLightsailAPIMockRecorder) GetRegionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetRegionsWithContext), varargs...)
}

// GetStaticIp mocks base method
func (m *MockLightsailAPI) GetStaticIp(arg0 *lightsail.GetStaticIpInput) (*lightsail.GetStaticIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticIp", arg0)
	ret0, _ := ret[0].(*lightsail.GetStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticIp indicates an expected call of GetStaticIp
func (mr *MockLightsailAPIMockRecorder) GetStaticIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticIp", reflect.TypeOf((*MockLightsailAPI)(nil).GetStaticIp), arg0)
}

// GetStaticIpRequest mocks base method
func (m *MockLightsailAPI) GetStaticIpRequest(arg0 *lightsail.GetStaticIpInput) (*request.Request, *lightsail.GetStaticIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetStaticIpOutput)
	return ret0, ret1
}

// GetStaticIpRequest indicates an expected call of GetStaticIpRequest
func (mr *MockLightsailAPIMockRecorder) GetStaticIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticIpRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetStaticIpRequest), arg0)
}

// GetStaticIpWithContext mocks base method
func (m *MockLightsailAPI) GetStaticIpWithContext(arg0 aws.Context, arg1 *lightsail.GetStaticIpInput, arg2 ...request.Option) (*lightsail.GetStaticIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStaticIpWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticIpWithContext indicates an expected call of GetStaticIpWithContext
func (mr *MockLightsailAPIMockRecorder) GetStaticIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticIpWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetStaticIpWithContext), varargs...)
}

// GetStaticIps mocks base method
func (m *MockLightsailAPI) GetStaticIps(arg0 *lightsail.GetStaticIpsInput) (*lightsail.GetStaticIpsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticIps", arg0)
	ret0, _ := ret[0].(*lightsail.GetStaticIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticIps indicates an expected call of GetStaticIps
func (mr *MockLightsailAPIMockRecorder) GetStaticIps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticIps", reflect.TypeOf((*MockLightsailAPI)(nil).GetStaticIps), arg0)
}

// GetStaticIpsRequest mocks base method
func (m *MockLightsailAPI) GetStaticIpsRequest(arg0 *lightsail.GetStaticIpsInput) (*request.Request, *lightsail.GetStaticIpsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticIpsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.GetStaticIpsOutput)
	return ret0, ret1
}

// GetStaticIpsRequest indicates an expected call of GetStaticIpsRequest
func (mr *MockLightsailAPIMockRecorder) GetStaticIpsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticIpsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).GetStaticIpsRequest), arg0)
}

// GetStaticIpsWithContext mocks base method
func (m *MockLightsailAPI) GetStaticIpsWithContext(arg0 aws.Context, arg1 *lightsail.GetStaticIpsInput, arg2 ...request.Option) (*lightsail.GetStaticIpsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStaticIpsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.GetStaticIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticIpsWithContext indicates an expected call of GetStaticIpsWithContext
func (mr *MockLightsailAPIMockRecorder) GetStaticIpsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticIpsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).GetStaticIpsWithContext), varargs...)
}

// ImportKeyPair mocks base method
func (m *MockLightsailAPI) ImportKeyPair(arg0 *lightsail.ImportKeyPairInput) (*lightsail.ImportKeyPairOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportKeyPair", arg0)
	ret0, _ := ret[0].(*lightsail.ImportKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportKeyPair indicates an expected call of ImportKeyPair
func (mr *MockLightsailAPIMockRecorder) ImportKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportKeyPair", reflect.TypeOf((*MockLightsailAPI)(nil).ImportKeyPair), arg0)
}

// ImportKeyPairRequest mocks base method
func (m *MockLightsailAPI) ImportKeyPairRequest(arg0 *lightsail.ImportKeyPairInput) (*request.Request, *lightsail.ImportKeyPairOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportKeyPairRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.ImportKeyPairOutput)
	return ret0, ret1
}

// ImportKeyPairRequest indicates an expected call of ImportKeyPairRequest
func (mr *MockLightsailAPIMockRecorder) ImportKeyPairRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportKeyPairRequest", reflect.TypeOf((*MockLightsailAPI)(nil).ImportKeyPairRequest), arg0)
}

// ImportKeyPairWithContext mocks base method
func (m *MockLightsailAPI) ImportKeyPairWithContext(arg0 aws.Context, arg1 *lightsail.ImportKeyPairInput, arg2 ...request.Option) (*lightsail.ImportKeyPairOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportKeyPairWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.ImportKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportKeyPairWithContext indicates an expected call of ImportKeyPairWithContext
func (mr *MockLightsailAPIMockRecorder) ImportKeyPairWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportKeyPairWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).ImportKeyPairWithContext), varargs...)
}

// IsVpcPeered mocks base method
func (m *MockLightsailAPI) IsVpcPeered(arg0 *lightsail.IsVpcPeeredInput) (*lightsail.IsVpcPeeredOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVpcPeered", arg0)
	ret0, _ := ret[0].(*lightsail.IsVpcPeeredOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVpcPeered indicates an expected call of IsVpcPeered
func (mr *MockLightsailAPIMockRecorder) IsVpcPeered(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVpcPeered", reflect.TypeOf((*MockLightsailAPI)(nil).IsVpcPeered), arg0)
}

// IsVpcPeeredRequest mocks base method
func (m *MockLightsailAPI) IsVpcPeeredRequest(arg0 *lightsail.IsVpcPeeredInput) (*request.Request, *lightsail.IsVpcPeeredOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVpcPeeredRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.IsVpcPeeredOutput)
	return ret0, ret1
}

// IsVpcPeeredRequest indicates an expected call of IsVpcPeeredRequest
func (mr *MockLightsailAPIMockRecorder) IsVpcPeeredRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVpcPeeredRequest", reflect.TypeOf((*MockLightsailAPI)(nil).IsVpcPeeredRequest), arg0)
}

// IsVpcPeeredWithContext mocks base method
func (m *MockLightsailAPI) IsVpcPeeredWithContext(arg0 aws.Context, arg1 *lightsail.IsVpcPeeredInput, arg2 ...request.Option) (*lightsail.IsVpcPeeredOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsVpcPeeredWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.IsVpcPeeredOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVpcPeeredWithContext indicates an expected call of IsVpcPeeredWithContext
func (mr *MockLightsailAPIMockRecorder) IsVpcPeeredWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVpcPeeredWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).IsVpcPeeredWithContext), varargs...)
}

// OpenInstancePublicPorts mocks base method
func (m *MockLightsailAPI) OpenInstancePublicPorts(arg0 *lightsail.OpenInstancePublicPortsInput) (*lightsail.OpenInstancePublicPortsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenInstancePublicPorts", arg0)
	ret0, _ := ret[0].(*lightsail.OpenInstancePublicPortsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenInstancePublicPorts indicates an expected call of OpenInstancePublicPorts
func (mr *MockLightsailAPIMockRecorder) OpenInstancePublicPorts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenInstancePublicPorts", reflect.TypeOf((*MockLightsailAPI)(nil).OpenInstancePublicPorts), arg0)
}

// OpenInstancePublicPortsRequest mocks base method
func (m *MockLightsailAPI) OpenInstancePublicPortsRequest(arg0 *lightsail.OpenInstancePublicPortsInput) (*request.Request, *lightsail.OpenInstancePublicPortsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenInstancePublicPortsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.OpenInstancePublicPortsOutput)
	return ret0, ret1
}

// OpenInstancePublicPortsRequest indicates an expected call of OpenInstancePublicPortsRequest
func (mr *MockLightsailAPIMockRecorder) OpenInstancePublicPortsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenInstancePublicPortsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).OpenInstancePublicPortsRequest), arg0)
}

// OpenInstancePublicPortsWithContext mocks base method
func (m *MockLightsailAPI) OpenInstancePublicPortsWithContext(arg0 aws.Context, arg1 *lightsail.OpenInstancePublicPortsInput, arg2 ...request.Option) (*lightsail.OpenInstancePublicPortsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenInstancePublicPortsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.OpenInstancePublicPortsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenInstancePublicPortsWithContext indicates an expected call of OpenInstancePublicPortsWithContext
func (mr *MockLightsailAPIMockRecorder) OpenInstancePublicPortsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenInstancePublicPortsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).OpenInstancePublicPortsWithContext), varargs...)
}

// PeerVpc mocks base method
func (m *MockLightsailAPI) PeerVpc(arg0 *lightsail.PeerVpcInput) (*lightsail.PeerVpcOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerVpc", arg0)
	ret0, _ := ret[0].(*lightsail.PeerVpcOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerVpc indicates an expected call of PeerVpc
func (mr *MockLightsailAPIMockRecorder) PeerVpc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerVpc", reflect.TypeOf((*MockLightsailAPI)(nil).PeerVpc), arg0)
}

// PeerVpcRequest mocks base method
func (m *MockLightsailAPI) PeerVpcRequest(arg0 *lightsail.PeerVpcInput) (*request.Request, *lightsail.PeerVpcOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerVpcRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.PeerVpcOutput)
	return ret0, ret1
}

// PeerVpcRequest indicates an expected call of PeerVpcRequest
func (mr *MockLightsailAPIMockRecorder) PeerVpcRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerVpcRequest", reflect.TypeOf((*MockLightsailAPI)(nil).PeerVpcRequest), arg0)
}

// PeerVpcWithContext mocks base method
func (m *MockLightsailAPI) PeerVpcWithContext(arg0 aws.Context, arg1 *lightsail.PeerVpcInput, arg2 ...request.Option) (*lightsail.PeerVpcOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PeerVpcWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.PeerVpcOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerVpcWithContext indicates an expected call of PeerVpcWithContext
func (mr *MockLightsailAPIMockRecorder) PeerVpcWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerVpcWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).PeerVpcWithContext), varargs...)
}

// PutInstancePublicPorts mocks base method
func (m *MockLightsailAPI) PutInstancePublicPorts(arg0 *lightsail.PutInstancePublicPortsInput) (*lightsail.PutInstancePublicPortsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInstancePublicPorts", arg0)
	ret0, _ := ret[0].(*lightsail.PutInstancePublicPortsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutInstancePublicPorts indicates an expected call of PutInstancePublicPorts
func (mr *MockLightsailAPIMockRecorder) PutInstancePublicPorts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInstancePublicPorts", reflect.TypeOf((*MockLightsailAPI)(nil).PutInstancePublicPorts), arg0)
}

// PutInstancePublicPortsRequest mocks base method
func (m *MockLightsailAPI) PutInstancePublicPortsRequest(arg0 *lightsail.PutInstancePublicPortsInput) (*request.Request, *lightsail.PutInstancePublicPortsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInstancePublicPortsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.PutInstancePublicPortsOutput)
	return ret0, ret1
}

// PutInstancePublicPortsRequest indicates an expected call of PutInstancePublicPortsRequest
func (mr *MockLightsailAPIMockRecorder) PutInstancePublicPortsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInstancePublicPortsRequest", reflect.TypeOf((*MockLightsailAPI)(nil).PutInstancePublicPortsRequest), arg0)
}

// PutInstancePublicPortsWithContext mocks base method
func (m *MockLightsailAPI) PutInstancePublicPortsWithContext(arg0 aws.Context, arg1 *lightsail.PutInstancePublicPortsInput, arg2 ...request.Option) (*lightsail.PutInstancePublicPortsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutInstancePublicPortsWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.PutInstancePublicPortsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutInstancePublicPortsWithContext indicates an expected call of PutInstancePublicPortsWithContext
func (mr *MockLightsailAPIMockRecorder) PutInstancePublicPortsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInstancePublicPortsWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).PutInstancePublicPortsWithContext), varargs...)
}

// RebootInstance mocks base method
func (m *MockLightsailAPI) RebootInstance(arg0 *lightsail.RebootInstanceInput) (*lightsail.RebootInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootInstance", arg0)
	ret0, _ := ret[0].(*lightsail.RebootInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootInstance indicates an expected call of RebootInstance
func (mr *MockLightsailAPIMockRecorder) RebootInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootInstance", reflect.TypeOf((*MockLightsailAPI)(nil).RebootInstance), arg0)
}

// RebootInstanceRequest mocks base method
func (m *MockLightsailAPI) RebootInstanceRequest(arg0 *lightsail.RebootInstanceInput) (*request.Request, *lightsail.RebootInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.RebootInstanceOutput)
	return ret0, ret1
}

// RebootInstanceRequest indicates an expected call of RebootInstanceRequest
func (mr *MockLightsailAPIMockRecorder) RebootInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootInstanceRequest", reflect.TypeOf((*MockLightsailAPI)(nil).RebootInstanceRequest), arg0)
}

// RebootInstanceWithContext mocks base method
func (m *MockLightsailAPI) RebootInstanceWithContext(arg0 aws.Context, arg1 *lightsail.RebootInstanceInput, arg2 ...request.Option) (*lightsail.RebootInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebootInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.RebootInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootInstanceWithContext indicates an expected call of RebootInstanceWithContext
func (mr *MockLightsailAPIMockRecorder) RebootInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootInstanceWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).RebootInstanceWithContext), varargs...)
}

// ReleaseStaticIp mocks base method
func (m *MockLightsailAPI) ReleaseStaticIp(arg0 *lightsail.ReleaseStaticIpInput) (*lightsail.ReleaseStaticIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseStaticIp", arg0)
	ret0, _ := ret[0].(*lightsail.ReleaseStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseStaticIp indicates an expected call of ReleaseStaticIp
func (mr *MockLightsailAPIMockRecorder) ReleaseStaticIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseStaticIp", reflect.TypeOf((*MockLightsailAPI)(nil).ReleaseStaticIp), arg0)
}

// ReleaseStaticIpRequest mocks base method
func (m *MockLightsailAPI) ReleaseStaticIpRequest(arg0 *lightsail.ReleaseStaticIpInput) (*request.Request, *lightsail.ReleaseStaticIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseStaticIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.ReleaseStaticIpOutput)
	return ret0, ret1
}

// ReleaseStaticIpRequest indicates an expected call of ReleaseStaticIpRequest
func (mr *MockLightsailAPIMockRecorder) ReleaseStaticIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseStaticIpRequest", reflect.TypeOf((*MockLightsailAPI)(nil).ReleaseStaticIpRequest), arg0)
}

// ReleaseStaticIpWithContext mocks base method
func (m *MockLightsailAPI) ReleaseStaticIpWithContext(arg0 aws.Context, arg1 *lightsail.ReleaseStaticIpInput, arg2 ...request.Option) (*lightsail.ReleaseStaticIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseStaticIpWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.ReleaseStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseStaticIpWithContext indicates an expected call of ReleaseStaticIpWithContext
func (mr *MockLightsailAPIMockRecorder) ReleaseStaticIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseStaticIpWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).ReleaseStaticIpWithContext), varargs...)
}

// StartInstance mocks base method
func (m *MockLightsailAPI) StartInstance(arg0 *lightsail.StartInstanceInput) (*lightsail.StartInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", arg0)
	ret0, _ := ret[0].(*lightsail.StartInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance
func (mr *MockLightsailAPIMockRecorder) StartInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockLightsailAPI)(nil).StartInstance), arg0)
}

// StartInstanceRequest mocks base method
func (m *MockLightsailAPI) StartInstanceRequest(arg0 *lightsail.StartInstanceInput) (*request.Request, *lightsail.StartInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.StartInstanceOutput)
	return ret0, ret1
}

// StartInstanceRequest indicates an expected call of StartInstanceRequest
func (mr *MockLightsailAPIMockRecorder) StartInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstanceRequest", reflect.TypeOf((*MockLightsailAPI)(nil).StartInstanceRequest), arg0)
}

// StartInstanceWithContext mocks base method
func (m *MockLightsailAPI) StartInstanceWithContext(arg0 aws.Context, arg1 *lightsail.StartInstanceInput, arg2 ...request.Option) (*lightsail.StartInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.StartInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstanceWithContext indicates an expected call of StartInstanceWithContext
func (mr *MockLightsailAPIMockRecorder) StartInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstanceWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).StartInstanceWithContext), varargs...)
}

// StopInstance mocks base method
func (m *MockLightsailAPI) StopInstance(arg0 *lightsail.StopInstanceInput) (*lightsail.StopInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstance", arg0)
	ret0, _ := ret[0].(*lightsail.StopInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInstance indicates an expected call of StopInstance
func (mr *MockLightsailAPIMockRecorder) StopInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstance", reflect.TypeOf((*MockLightsailAPI)(nil).StopInstance), arg0)
}

// StopInstanceRequest mocks base method
func (m *MockLightsailAPI) StopInstanceRequest(arg0 *lightsail.StopInstanceInput) (*request.Request, *lightsail.StopInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.StopInstanceOutput)
	return ret0, ret1
}

// StopInstanceRequest indicates an expected call of StopInstanceRequest
func (mr *MockLightsailAPIMockRecorder) StopInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstanceRequest", reflect.TypeOf((*MockLightsailAPI)(nil).StopInstanceRequest), arg0)
}

// StopInstanceWithContext mocks base method
func (m *MockLightsailAPI) StopInstanceWithContext(arg0 aws.Context, arg1 *lightsail.StopInstanceInput, arg2 ...request.Option) (*lightsail.StopInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.StopInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInstanceWithContext indicates an expected call of StopInstanceWithContext
func (mr *MockLightsailAPIMockRecorder) StopInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstanceWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).StopInstanceWithContext), varargs...)
}

// UnpeerVpc mocks base method
func (m *MockLightsailAPI) UnpeerVpc(arg0 *lightsail.UnpeerVpcInput) (*lightsail.UnpeerVpcOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpeerVpc", arg0)
	ret0, _ := ret[0].(*lightsail.UnpeerVpcOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpeerVpc indicates an expected call of UnpeerVpc
func (mr *MockLightsailAPIMockRecorder) UnpeerVpc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpeerVpc", reflect.TypeOf((*MockLightsailAPI)(nil).UnpeerVpc), arg0)
}

// UnpeerVpcRequest mocks base method
func (m *MockLightsailAPI) UnpeerVpcRequest(arg0 *lightsail.UnpeerVpcInput) (*request.Request, *lightsail.UnpeerVpcOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpeerVpcRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.UnpeerVpcOutput)
	return ret0, ret1
}

// UnpeerVpcRequest indicates an expected call of UnpeerVpcRequest
func (mr *MockLightsailAPIMockRecorder) UnpeerVpcRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpeerVpcRequest", reflect.TypeOf((*MockLightsailAPI)(nil).UnpeerVpcRequest), arg0)
}

// UnpeerVpcWithContext mocks base method
func (m *MockLightsailAPI) UnpeerVpcWithContext(arg0 aws.Context, arg1 *lightsail.UnpeerVpcInput, arg2 ...request.Option) (*lightsail.UnpeerVpcOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnpeerVpcWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.UnpeerVpcOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpeerVpcWithContext indicates an expected call of UnpeerVpcWithContext
func (mr *MockLightsailAPIMockRecorder) UnpeerVpcWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpeerVpcWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).UnpeerVpcWithContext), varargs...)
}

// UpdateDomainEntry mocks base method
func (m *MockLightsailAPI) UpdateDomainEntry(arg0 *lightsail.UpdateDomainEntryInput) (*lightsail.UpdateDomainEntryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainEntry", arg0)
	ret0, _ := ret[0].(*lightsail.UpdateDomainEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainEntry indicates an expected call of UpdateDomainEntry
func (mr *MockLightsailAPIMockRecorder) UpdateDomainEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainEntry", reflect.TypeOf((*MockLightsailAPI)(nil).UpdateDomainEntry), arg0)
}

// UpdateDomainEntryRequest mocks base method
func (m *MockLightsailAPI) UpdateDomainEntryRequest(arg0 *lightsail.UpdateDomainEntryInput) (*request.Request, *lightsail.UpdateDomainEntryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainEntryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.UpdateDomainEntryOutput)
	return ret0, ret1
}

// UpdateDomainEntryRequest indicates an expected call of UpdateDomainEntryRequest
func (mr *MockLightsailAPIMockRecorder) UpdateDomainEntryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainEntryRequest", reflect.TypeOf((*MockLightsailAPI)(nil).UpdateDomainEntryRequest), arg0)
}

// UpdateDomainEntryWithContext mocks base method
func (m *MockLightsailAPI) UpdateDomainEntryWithContext(arg0 aws.Context, arg1 *lightsail.UpdateDomainEntryInput, arg2 ...request.Option) (*lightsail.UpdateDomainEntryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainEntryWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.UpdateDomainEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainEntryWithContext indicates an expected call of UpdateDomainEntryWithContext
func (mr *MockLightsailAPIMockRecorder) UpdateDomainEntryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainEntryWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).UpdateDomainEntryWithContext), varargs...)
}

// UpdateLoadBalancerAttribute mocks base method
func (m *MockLightsailAPI) UpdateLoadBalancerAttribute(arg0 *lightsail.UpdateLoadBalancerAttributeInput) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerAttribute", arg0)
	ret0, _ := ret[0].(*lightsail.UpdateLoadBalancerAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancerAttribute indicates an expected call of UpdateLoadBalancerAttribute
func (mr *MockLightsailAPIMockRecorder) UpdateLoadBalancerAttribute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerAttribute", reflect.TypeOf((*MockLightsailAPI)(nil).UpdateLoadBalancerAttribute), arg0)
}

// UpdateLoadBalancerAttributeRequest mocks base method
func (m *MockLightsailAPI) UpdateLoadBalancerAttributeRequest(arg0 *lightsail.UpdateLoadBalancerAttributeInput) (*request.Request, *lightsail.UpdateLoadBalancerAttributeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerAttributeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lightsail.UpdateLoadBalancerAttributeOutput)
	return ret0, ret1
}

// UpdateLoadBalancerAttributeRequest indicates an expected call of UpdateLoadBalancerAttributeRequest
func (mr *MockLightsailAPIMockRecorder) UpdateLoadBalancerAttributeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerAttributeRequest", reflect.TypeOf((*MockLightsailAPI)(nil).UpdateLoadBalancerAttributeRequest), arg0)
}

// UpdateLoadBalancerAttributeWithContext mocks base method
func (m *MockLightsailAPI) UpdateLoadBalancerAttributeWithContext(arg0 aws.Context, arg1 *lightsail.UpdateLoadBalancerAttributeInput, arg2 ...request.Option) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLoadBalancerAttributeWithContext", varargs...)
	ret0, _ := ret[0].(*lightsail.UpdateLoadBalancerAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancerAttributeWithContext indicates an expected call of UpdateLoadBalancerAttributeWithContext
func (mr *MockLightsailAPIMockRecorder) UpdateLoadBalancerAttributeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerAttributeWithContext", reflect.TypeOf((*MockLightsailAPI)(nil).UpdateLoadBalancerAttributeWithContext), varargs...)
}
