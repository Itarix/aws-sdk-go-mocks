// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/chatbot/chatbotiface (interfaces: ChatbotAPI)

// Package chatbotmock is a generated GoMock package.
package chatbotmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	chatbot "github.com/aws/aws-sdk-go/service/chatbot"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChatbotAPI is a mock of ChatbotAPI interface
type MockChatbotAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChatbotAPIMockRecorder
}

// MockChatbotAPIMockRecorder is the mock recorder for MockChatbotAPI
type MockChatbotAPIMockRecorder struct {
	mock *MockChatbotAPI
}

// NewMockChatbotAPI creates a new mock instance
func NewMockChatbotAPI(ctrl *gomock.Controller) *MockChatbotAPI {
	mock := &MockChatbotAPI{ctrl: ctrl}
	mock.recorder = &MockChatbotAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatbotAPI) EXPECT() *MockChatbotAPIMockRecorder {
	return m.recorder
}

// CreateChimeWebhookConfiguration mocks base method
func (m *MockChatbotAPI) CreateChimeWebhookConfiguration(arg0 *chatbot.CreateChimeWebhookConfigurationInput) (*chatbot.CreateChimeWebhookConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChimeWebhookConfiguration", arg0)
	ret0, _ := ret[0].(*chatbot.CreateChimeWebhookConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChimeWebhookConfiguration indicates an expected call of CreateChimeWebhookConfiguration
func (mr *MockChatbotAPIMockRecorder) CreateChimeWebhookConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChimeWebhookConfiguration", reflect.TypeOf((*MockChatbotAPI)(nil).CreateChimeWebhookConfiguration), arg0)
}

// CreateChimeWebhookConfigurationRequest mocks base method
func (m *MockChatbotAPI) CreateChimeWebhookConfigurationRequest(arg0 *chatbot.CreateChimeWebhookConfigurationInput) (*request.Request, *chatbot.CreateChimeWebhookConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChimeWebhookConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.CreateChimeWebhookConfigurationOutput)
	return ret0, ret1
}

// CreateChimeWebhookConfigurationRequest indicates an expected call of CreateChimeWebhookConfigurationRequest
func (mr *MockChatbotAPIMockRecorder) CreateChimeWebhookConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChimeWebhookConfigurationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).CreateChimeWebhookConfigurationRequest), arg0)
}

// CreateChimeWebhookConfigurationWithContext mocks base method
func (m *MockChatbotAPI) CreateChimeWebhookConfigurationWithContext(arg0 context.Context, arg1 *chatbot.CreateChimeWebhookConfigurationInput, arg2 ...request.Option) (*chatbot.CreateChimeWebhookConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChimeWebhookConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.CreateChimeWebhookConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChimeWebhookConfigurationWithContext indicates an expected call of CreateChimeWebhookConfigurationWithContext
func (mr *MockChatbotAPIMockRecorder) CreateChimeWebhookConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChimeWebhookConfigurationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).CreateChimeWebhookConfigurationWithContext), varargs...)
}

// CreateMicrosoftTeamsChannelConfiguration mocks base method
func (m *MockChatbotAPI) CreateMicrosoftTeamsChannelConfiguration(arg0 *chatbot.CreateMicrosoftTeamsChannelConfigurationInput) (*chatbot.CreateMicrosoftTeamsChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMicrosoftTeamsChannelConfiguration", arg0)
	ret0, _ := ret[0].(*chatbot.CreateMicrosoftTeamsChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMicrosoftTeamsChannelConfiguration indicates an expected call of CreateMicrosoftTeamsChannelConfiguration
func (mr *MockChatbotAPIMockRecorder) CreateMicrosoftTeamsChannelConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMicrosoftTeamsChannelConfiguration", reflect.TypeOf((*MockChatbotAPI)(nil).CreateMicrosoftTeamsChannelConfiguration), arg0)
}

// CreateMicrosoftTeamsChannelConfigurationRequest mocks base method
func (m *MockChatbotAPI) CreateMicrosoftTeamsChannelConfigurationRequest(arg0 *chatbot.CreateMicrosoftTeamsChannelConfigurationInput) (*request.Request, *chatbot.CreateMicrosoftTeamsChannelConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMicrosoftTeamsChannelConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.CreateMicrosoftTeamsChannelConfigurationOutput)
	return ret0, ret1
}

// CreateMicrosoftTeamsChannelConfigurationRequest indicates an expected call of CreateMicrosoftTeamsChannelConfigurationRequest
func (mr *MockChatbotAPIMockRecorder) CreateMicrosoftTeamsChannelConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMicrosoftTeamsChannelConfigurationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).CreateMicrosoftTeamsChannelConfigurationRequest), arg0)
}

// CreateMicrosoftTeamsChannelConfigurationWithContext mocks base method
func (m *MockChatbotAPI) CreateMicrosoftTeamsChannelConfigurationWithContext(arg0 context.Context, arg1 *chatbot.CreateMicrosoftTeamsChannelConfigurationInput, arg2 ...request.Option) (*chatbot.CreateMicrosoftTeamsChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMicrosoftTeamsChannelConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.CreateMicrosoftTeamsChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMicrosoftTeamsChannelConfigurationWithContext indicates an expected call of CreateMicrosoftTeamsChannelConfigurationWithContext
func (mr *MockChatbotAPIMockRecorder) CreateMicrosoftTeamsChannelConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMicrosoftTeamsChannelConfigurationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).CreateMicrosoftTeamsChannelConfigurationWithContext), varargs...)
}

// CreateSlackChannelConfiguration mocks base method
func (m *MockChatbotAPI) CreateSlackChannelConfiguration(arg0 *chatbot.CreateSlackChannelConfigurationInput) (*chatbot.CreateSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlackChannelConfiguration", arg0)
	ret0, _ := ret[0].(*chatbot.CreateSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlackChannelConfiguration indicates an expected call of CreateSlackChannelConfiguration
func (mr *MockChatbotAPIMockRecorder) CreateSlackChannelConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlackChannelConfiguration", reflect.TypeOf((*MockChatbotAPI)(nil).CreateSlackChannelConfiguration), arg0)
}

// CreateSlackChannelConfigurationRequest mocks base method
func (m *MockChatbotAPI) CreateSlackChannelConfigurationRequest(arg0 *chatbot.CreateSlackChannelConfigurationInput) (*request.Request, *chatbot.CreateSlackChannelConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlackChannelConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.CreateSlackChannelConfigurationOutput)
	return ret0, ret1
}

// CreateSlackChannelConfigurationRequest indicates an expected call of CreateSlackChannelConfigurationRequest
func (mr *MockChatbotAPIMockRecorder) CreateSlackChannelConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlackChannelConfigurationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).CreateSlackChannelConfigurationRequest), arg0)
}

// CreateSlackChannelConfigurationWithContext mocks base method
func (m *MockChatbotAPI) CreateSlackChannelConfigurationWithContext(arg0 context.Context, arg1 *chatbot.CreateSlackChannelConfigurationInput, arg2 ...request.Option) (*chatbot.CreateSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSlackChannelConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.CreateSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlackChannelConfigurationWithContext indicates an expected call of CreateSlackChannelConfigurationWithContext
func (mr *MockChatbotAPIMockRecorder) CreateSlackChannelConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlackChannelConfigurationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).CreateSlackChannelConfigurationWithContext), varargs...)
}

// DeleteChimeWebhookConfiguration mocks base method
func (m *MockChatbotAPI) DeleteChimeWebhookConfiguration(arg0 *chatbot.DeleteChimeWebhookConfigurationInput) (*chatbot.DeleteChimeWebhookConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChimeWebhookConfiguration", arg0)
	ret0, _ := ret[0].(*chatbot.DeleteChimeWebhookConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChimeWebhookConfiguration indicates an expected call of DeleteChimeWebhookConfiguration
func (mr *MockChatbotAPIMockRecorder) DeleteChimeWebhookConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChimeWebhookConfiguration", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteChimeWebhookConfiguration), arg0)
}

// DeleteChimeWebhookConfigurationRequest mocks base method
func (m *MockChatbotAPI) DeleteChimeWebhookConfigurationRequest(arg0 *chatbot.DeleteChimeWebhookConfigurationInput) (*request.Request, *chatbot.DeleteChimeWebhookConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChimeWebhookConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DeleteChimeWebhookConfigurationOutput)
	return ret0, ret1
}

// DeleteChimeWebhookConfigurationRequest indicates an expected call of DeleteChimeWebhookConfigurationRequest
func (mr *MockChatbotAPIMockRecorder) DeleteChimeWebhookConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChimeWebhookConfigurationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteChimeWebhookConfigurationRequest), arg0)
}

// DeleteChimeWebhookConfigurationWithContext mocks base method
func (m *MockChatbotAPI) DeleteChimeWebhookConfigurationWithContext(arg0 context.Context, arg1 *chatbot.DeleteChimeWebhookConfigurationInput, arg2 ...request.Option) (*chatbot.DeleteChimeWebhookConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChimeWebhookConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DeleteChimeWebhookConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChimeWebhookConfigurationWithContext indicates an expected call of DeleteChimeWebhookConfigurationWithContext
func (mr *MockChatbotAPIMockRecorder) DeleteChimeWebhookConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChimeWebhookConfigurationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteChimeWebhookConfigurationWithContext), varargs...)
}

// DeleteMicrosoftTeamsChannelConfiguration mocks base method
func (m *MockChatbotAPI) DeleteMicrosoftTeamsChannelConfiguration(arg0 *chatbot.DeleteMicrosoftTeamsChannelConfigurationInput) (*chatbot.DeleteMicrosoftTeamsChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMicrosoftTeamsChannelConfiguration", arg0)
	ret0, _ := ret[0].(*chatbot.DeleteMicrosoftTeamsChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMicrosoftTeamsChannelConfiguration indicates an expected call of DeleteMicrosoftTeamsChannelConfiguration
func (mr *MockChatbotAPIMockRecorder) DeleteMicrosoftTeamsChannelConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicrosoftTeamsChannelConfiguration", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteMicrosoftTeamsChannelConfiguration), arg0)
}

// DeleteMicrosoftTeamsChannelConfigurationRequest mocks base method
func (m *MockChatbotAPI) DeleteMicrosoftTeamsChannelConfigurationRequest(arg0 *chatbot.DeleteMicrosoftTeamsChannelConfigurationInput) (*request.Request, *chatbot.DeleteMicrosoftTeamsChannelConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMicrosoftTeamsChannelConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DeleteMicrosoftTeamsChannelConfigurationOutput)
	return ret0, ret1
}

// DeleteMicrosoftTeamsChannelConfigurationRequest indicates an expected call of DeleteMicrosoftTeamsChannelConfigurationRequest
func (mr *MockChatbotAPIMockRecorder) DeleteMicrosoftTeamsChannelConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicrosoftTeamsChannelConfigurationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteMicrosoftTeamsChannelConfigurationRequest), arg0)
}

// DeleteMicrosoftTeamsChannelConfigurationWithContext mocks base method
func (m *MockChatbotAPI) DeleteMicrosoftTeamsChannelConfigurationWithContext(arg0 context.Context, arg1 *chatbot.DeleteMicrosoftTeamsChannelConfigurationInput, arg2 ...request.Option) (*chatbot.DeleteMicrosoftTeamsChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMicrosoftTeamsChannelConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DeleteMicrosoftTeamsChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMicrosoftTeamsChannelConfigurationWithContext indicates an expected call of DeleteMicrosoftTeamsChannelConfigurationWithContext
func (mr *MockChatbotAPIMockRecorder) DeleteMicrosoftTeamsChannelConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicrosoftTeamsChannelConfigurationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteMicrosoftTeamsChannelConfigurationWithContext), varargs...)
}

// DeleteMicrosoftTeamsConfiguredTeam mocks base method
func (m *MockChatbotAPI) DeleteMicrosoftTeamsConfiguredTeam(arg0 *chatbot.DeleteMicrosoftTeamsConfiguredTeamInput) (*chatbot.DeleteMicrosoftTeamsConfiguredTeamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMicrosoftTeamsConfiguredTeam", arg0)
	ret0, _ := ret[0].(*chatbot.DeleteMicrosoftTeamsConfiguredTeamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMicrosoftTeamsConfiguredTeam indicates an expected call of DeleteMicrosoftTeamsConfiguredTeam
func (mr *MockChatbotAPIMockRecorder) DeleteMicrosoftTeamsConfiguredTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicrosoftTeamsConfiguredTeam", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteMicrosoftTeamsConfiguredTeam), arg0)
}

// DeleteMicrosoftTeamsConfiguredTeamRequest mocks base method
func (m *MockChatbotAPI) DeleteMicrosoftTeamsConfiguredTeamRequest(arg0 *chatbot.DeleteMicrosoftTeamsConfiguredTeamInput) (*request.Request, *chatbot.DeleteMicrosoftTeamsConfiguredTeamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMicrosoftTeamsConfiguredTeamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DeleteMicrosoftTeamsConfiguredTeamOutput)
	return ret0, ret1
}

// DeleteMicrosoftTeamsConfiguredTeamRequest indicates an expected call of DeleteMicrosoftTeamsConfiguredTeamRequest
func (mr *MockChatbotAPIMockRecorder) DeleteMicrosoftTeamsConfiguredTeamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicrosoftTeamsConfiguredTeamRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteMicrosoftTeamsConfiguredTeamRequest), arg0)
}

// DeleteMicrosoftTeamsConfiguredTeamWithContext mocks base method
func (m *MockChatbotAPI) DeleteMicrosoftTeamsConfiguredTeamWithContext(arg0 context.Context, arg1 *chatbot.DeleteMicrosoftTeamsConfiguredTeamInput, arg2 ...request.Option) (*chatbot.DeleteMicrosoftTeamsConfiguredTeamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMicrosoftTeamsConfiguredTeamWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DeleteMicrosoftTeamsConfiguredTeamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMicrosoftTeamsConfiguredTeamWithContext indicates an expected call of DeleteMicrosoftTeamsConfiguredTeamWithContext
func (mr *MockChatbotAPIMockRecorder) DeleteMicrosoftTeamsConfiguredTeamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicrosoftTeamsConfiguredTeamWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteMicrosoftTeamsConfiguredTeamWithContext), varargs...)
}

// DeleteMicrosoftTeamsUserIdentity mocks base method
func (m *MockChatbotAPI) DeleteMicrosoftTeamsUserIdentity(arg0 *chatbot.DeleteMicrosoftTeamsUserIdentityInput) (*chatbot.DeleteMicrosoftTeamsUserIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMicrosoftTeamsUserIdentity", arg0)
	ret0, _ := ret[0].(*chatbot.DeleteMicrosoftTeamsUserIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMicrosoftTeamsUserIdentity indicates an expected call of DeleteMicrosoftTeamsUserIdentity
func (mr *MockChatbotAPIMockRecorder) DeleteMicrosoftTeamsUserIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicrosoftTeamsUserIdentity", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteMicrosoftTeamsUserIdentity), arg0)
}

// DeleteMicrosoftTeamsUserIdentityRequest mocks base method
func (m *MockChatbotAPI) DeleteMicrosoftTeamsUserIdentityRequest(arg0 *chatbot.DeleteMicrosoftTeamsUserIdentityInput) (*request.Request, *chatbot.DeleteMicrosoftTeamsUserIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMicrosoftTeamsUserIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DeleteMicrosoftTeamsUserIdentityOutput)
	return ret0, ret1
}

// DeleteMicrosoftTeamsUserIdentityRequest indicates an expected call of DeleteMicrosoftTeamsUserIdentityRequest
func (mr *MockChatbotAPIMockRecorder) DeleteMicrosoftTeamsUserIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicrosoftTeamsUserIdentityRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteMicrosoftTeamsUserIdentityRequest), arg0)
}

// DeleteMicrosoftTeamsUserIdentityWithContext mocks base method
func (m *MockChatbotAPI) DeleteMicrosoftTeamsUserIdentityWithContext(arg0 context.Context, arg1 *chatbot.DeleteMicrosoftTeamsUserIdentityInput, arg2 ...request.Option) (*chatbot.DeleteMicrosoftTeamsUserIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMicrosoftTeamsUserIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DeleteMicrosoftTeamsUserIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMicrosoftTeamsUserIdentityWithContext indicates an expected call of DeleteMicrosoftTeamsUserIdentityWithContext
func (mr *MockChatbotAPIMockRecorder) DeleteMicrosoftTeamsUserIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMicrosoftTeamsUserIdentityWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteMicrosoftTeamsUserIdentityWithContext), varargs...)
}

// DeleteSlackChannelConfiguration mocks base method
func (m *MockChatbotAPI) DeleteSlackChannelConfiguration(arg0 *chatbot.DeleteSlackChannelConfigurationInput) (*chatbot.DeleteSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackChannelConfiguration", arg0)
	ret0, _ := ret[0].(*chatbot.DeleteSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackChannelConfiguration indicates an expected call of DeleteSlackChannelConfiguration
func (mr *MockChatbotAPIMockRecorder) DeleteSlackChannelConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackChannelConfiguration", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteSlackChannelConfiguration), arg0)
}

// DeleteSlackChannelConfigurationRequest mocks base method
func (m *MockChatbotAPI) DeleteSlackChannelConfigurationRequest(arg0 *chatbot.DeleteSlackChannelConfigurationInput) (*request.Request, *chatbot.DeleteSlackChannelConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackChannelConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DeleteSlackChannelConfigurationOutput)
	return ret0, ret1
}

// DeleteSlackChannelConfigurationRequest indicates an expected call of DeleteSlackChannelConfigurationRequest
func (mr *MockChatbotAPIMockRecorder) DeleteSlackChannelConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackChannelConfigurationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteSlackChannelConfigurationRequest), arg0)
}

// DeleteSlackChannelConfigurationWithContext mocks base method
func (m *MockChatbotAPI) DeleteSlackChannelConfigurationWithContext(arg0 context.Context, arg1 *chatbot.DeleteSlackChannelConfigurationInput, arg2 ...request.Option) (*chatbot.DeleteSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSlackChannelConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DeleteSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackChannelConfigurationWithContext indicates an expected call of DeleteSlackChannelConfigurationWithContext
func (mr *MockChatbotAPIMockRecorder) DeleteSlackChannelConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackChannelConfigurationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteSlackChannelConfigurationWithContext), varargs...)
}

// DeleteSlackUserIdentity mocks base method
func (m *MockChatbotAPI) DeleteSlackUserIdentity(arg0 *chatbot.DeleteSlackUserIdentityInput) (*chatbot.DeleteSlackUserIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackUserIdentity", arg0)
	ret0, _ := ret[0].(*chatbot.DeleteSlackUserIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackUserIdentity indicates an expected call of DeleteSlackUserIdentity
func (mr *MockChatbotAPIMockRecorder) DeleteSlackUserIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackUserIdentity", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteSlackUserIdentity), arg0)
}

// DeleteSlackUserIdentityRequest mocks base method
func (m *MockChatbotAPI) DeleteSlackUserIdentityRequest(arg0 *chatbot.DeleteSlackUserIdentityInput) (*request.Request, *chatbot.DeleteSlackUserIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackUserIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DeleteSlackUserIdentityOutput)
	return ret0, ret1
}

// DeleteSlackUserIdentityRequest indicates an expected call of DeleteSlackUserIdentityRequest
func (mr *MockChatbotAPIMockRecorder) DeleteSlackUserIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackUserIdentityRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteSlackUserIdentityRequest), arg0)
}

// DeleteSlackUserIdentityWithContext mocks base method
func (m *MockChatbotAPI) DeleteSlackUserIdentityWithContext(arg0 context.Context, arg1 *chatbot.DeleteSlackUserIdentityInput, arg2 ...request.Option) (*chatbot.DeleteSlackUserIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSlackUserIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DeleteSlackUserIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackUserIdentityWithContext indicates an expected call of DeleteSlackUserIdentityWithContext
func (mr *MockChatbotAPIMockRecorder) DeleteSlackUserIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackUserIdentityWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteSlackUserIdentityWithContext), varargs...)
}

// DeleteSlackWorkspaceAuthorization mocks base method
func (m *MockChatbotAPI) DeleteSlackWorkspaceAuthorization(arg0 *chatbot.DeleteSlackWorkspaceAuthorizationInput) (*chatbot.DeleteSlackWorkspaceAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackWorkspaceAuthorization", arg0)
	ret0, _ := ret[0].(*chatbot.DeleteSlackWorkspaceAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackWorkspaceAuthorization indicates an expected call of DeleteSlackWorkspaceAuthorization
func (mr *MockChatbotAPIMockRecorder) DeleteSlackWorkspaceAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackWorkspaceAuthorization", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteSlackWorkspaceAuthorization), arg0)
}

// DeleteSlackWorkspaceAuthorizationRequest mocks base method
func (m *MockChatbotAPI) DeleteSlackWorkspaceAuthorizationRequest(arg0 *chatbot.DeleteSlackWorkspaceAuthorizationInput) (*request.Request, *chatbot.DeleteSlackWorkspaceAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackWorkspaceAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DeleteSlackWorkspaceAuthorizationOutput)
	return ret0, ret1
}

// DeleteSlackWorkspaceAuthorizationRequest indicates an expected call of DeleteSlackWorkspaceAuthorizationRequest
func (mr *MockChatbotAPIMockRecorder) DeleteSlackWorkspaceAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackWorkspaceAuthorizationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteSlackWorkspaceAuthorizationRequest), arg0)
}

// DeleteSlackWorkspaceAuthorizationWithContext mocks base method
func (m *MockChatbotAPI) DeleteSlackWorkspaceAuthorizationWithContext(arg0 context.Context, arg1 *chatbot.DeleteSlackWorkspaceAuthorizationInput, arg2 ...request.Option) (*chatbot.DeleteSlackWorkspaceAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSlackWorkspaceAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DeleteSlackWorkspaceAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackWorkspaceAuthorizationWithContext indicates an expected call of DeleteSlackWorkspaceAuthorizationWithContext
func (mr *MockChatbotAPIMockRecorder) DeleteSlackWorkspaceAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackWorkspaceAuthorizationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DeleteSlackWorkspaceAuthorizationWithContext), varargs...)
}

// DescribeChimeWebhookConfigurations mocks base method
func (m *MockChatbotAPI) DescribeChimeWebhookConfigurations(arg0 *chatbot.DescribeChimeWebhookConfigurationsInput) (*chatbot.DescribeChimeWebhookConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChimeWebhookConfigurations", arg0)
	ret0, _ := ret[0].(*chatbot.DescribeChimeWebhookConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChimeWebhookConfigurations indicates an expected call of DescribeChimeWebhookConfigurations
func (mr *MockChatbotAPIMockRecorder) DescribeChimeWebhookConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChimeWebhookConfigurations", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeChimeWebhookConfigurations), arg0)
}

// DescribeChimeWebhookConfigurationsPages mocks base method
func (m *MockChatbotAPI) DescribeChimeWebhookConfigurationsPages(arg0 *chatbot.DescribeChimeWebhookConfigurationsInput, arg1 func(*chatbot.DescribeChimeWebhookConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChimeWebhookConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeChimeWebhookConfigurationsPages indicates an expected call of DescribeChimeWebhookConfigurationsPages
func (mr *MockChatbotAPIMockRecorder) DescribeChimeWebhookConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChimeWebhookConfigurationsPages", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeChimeWebhookConfigurationsPages), arg0, arg1)
}

// DescribeChimeWebhookConfigurationsPagesWithContext mocks base method
func (m *MockChatbotAPI) DescribeChimeWebhookConfigurationsPagesWithContext(arg0 context.Context, arg1 *chatbot.DescribeChimeWebhookConfigurationsInput, arg2 func(*chatbot.DescribeChimeWebhookConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChimeWebhookConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeChimeWebhookConfigurationsPagesWithContext indicates an expected call of DescribeChimeWebhookConfigurationsPagesWithContext
func (mr *MockChatbotAPIMockRecorder) DescribeChimeWebhookConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChimeWebhookConfigurationsPagesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeChimeWebhookConfigurationsPagesWithContext), varargs...)
}

// DescribeChimeWebhookConfigurationsRequest mocks base method
func (m *MockChatbotAPI) DescribeChimeWebhookConfigurationsRequest(arg0 *chatbot.DescribeChimeWebhookConfigurationsInput) (*request.Request, *chatbot.DescribeChimeWebhookConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChimeWebhookConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DescribeChimeWebhookConfigurationsOutput)
	return ret0, ret1
}

// DescribeChimeWebhookConfigurationsRequest indicates an expected call of DescribeChimeWebhookConfigurationsRequest
func (mr *MockChatbotAPIMockRecorder) DescribeChimeWebhookConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChimeWebhookConfigurationsRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeChimeWebhookConfigurationsRequest), arg0)
}

// DescribeChimeWebhookConfigurationsWithContext mocks base method
func (m *MockChatbotAPI) DescribeChimeWebhookConfigurationsWithContext(arg0 context.Context, arg1 *chatbot.DescribeChimeWebhookConfigurationsInput, arg2 ...request.Option) (*chatbot.DescribeChimeWebhookConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChimeWebhookConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DescribeChimeWebhookConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChimeWebhookConfigurationsWithContext indicates an expected call of DescribeChimeWebhookConfigurationsWithContext
func (mr *MockChatbotAPIMockRecorder) DescribeChimeWebhookConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChimeWebhookConfigurationsWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeChimeWebhookConfigurationsWithContext), varargs...)
}

// DescribeSlackChannelConfigurations mocks base method
func (m *MockChatbotAPI) DescribeSlackChannelConfigurations(arg0 *chatbot.DescribeSlackChannelConfigurationsInput) (*chatbot.DescribeSlackChannelConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlackChannelConfigurations", arg0)
	ret0, _ := ret[0].(*chatbot.DescribeSlackChannelConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSlackChannelConfigurations indicates an expected call of DescribeSlackChannelConfigurations
func (mr *MockChatbotAPIMockRecorder) DescribeSlackChannelConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackChannelConfigurations", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackChannelConfigurations), arg0)
}

// DescribeSlackChannelConfigurationsPages mocks base method
func (m *MockChatbotAPI) DescribeSlackChannelConfigurationsPages(arg0 *chatbot.DescribeSlackChannelConfigurationsInput, arg1 func(*chatbot.DescribeSlackChannelConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlackChannelConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSlackChannelConfigurationsPages indicates an expected call of DescribeSlackChannelConfigurationsPages
func (mr *MockChatbotAPIMockRecorder) DescribeSlackChannelConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackChannelConfigurationsPages", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackChannelConfigurationsPages), arg0, arg1)
}

// DescribeSlackChannelConfigurationsPagesWithContext mocks base method
func (m *MockChatbotAPI) DescribeSlackChannelConfigurationsPagesWithContext(arg0 context.Context, arg1 *chatbot.DescribeSlackChannelConfigurationsInput, arg2 func(*chatbot.DescribeSlackChannelConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSlackChannelConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSlackChannelConfigurationsPagesWithContext indicates an expected call of DescribeSlackChannelConfigurationsPagesWithContext
func (mr *MockChatbotAPIMockRecorder) DescribeSlackChannelConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackChannelConfigurationsPagesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackChannelConfigurationsPagesWithContext), varargs...)
}

// DescribeSlackChannelConfigurationsRequest mocks base method
func (m *MockChatbotAPI) DescribeSlackChannelConfigurationsRequest(arg0 *chatbot.DescribeSlackChannelConfigurationsInput) (*request.Request, *chatbot.DescribeSlackChannelConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlackChannelConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DescribeSlackChannelConfigurationsOutput)
	return ret0, ret1
}

// DescribeSlackChannelConfigurationsRequest indicates an expected call of DescribeSlackChannelConfigurationsRequest
func (mr *MockChatbotAPIMockRecorder) DescribeSlackChannelConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackChannelConfigurationsRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackChannelConfigurationsRequest), arg0)
}

// DescribeSlackChannelConfigurationsWithContext mocks base method
func (m *MockChatbotAPI) DescribeSlackChannelConfigurationsWithContext(arg0 context.Context, arg1 *chatbot.DescribeSlackChannelConfigurationsInput, arg2 ...request.Option) (*chatbot.DescribeSlackChannelConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSlackChannelConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DescribeSlackChannelConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSlackChannelConfigurationsWithContext indicates an expected call of DescribeSlackChannelConfigurationsWithContext
func (mr *MockChatbotAPIMockRecorder) DescribeSlackChannelConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackChannelConfigurationsWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackChannelConfigurationsWithContext), varargs...)
}

// DescribeSlackUserIdentities mocks base method
func (m *MockChatbotAPI) DescribeSlackUserIdentities(arg0 *chatbot.DescribeSlackUserIdentitiesInput) (*chatbot.DescribeSlackUserIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlackUserIdentities", arg0)
	ret0, _ := ret[0].(*chatbot.DescribeSlackUserIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSlackUserIdentities indicates an expected call of DescribeSlackUserIdentities
func (mr *MockChatbotAPIMockRecorder) DescribeSlackUserIdentities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackUserIdentities", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackUserIdentities), arg0)
}

// DescribeSlackUserIdentitiesPages mocks base method
func (m *MockChatbotAPI) DescribeSlackUserIdentitiesPages(arg0 *chatbot.DescribeSlackUserIdentitiesInput, arg1 func(*chatbot.DescribeSlackUserIdentitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlackUserIdentitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSlackUserIdentitiesPages indicates an expected call of DescribeSlackUserIdentitiesPages
func (mr *MockChatbotAPIMockRecorder) DescribeSlackUserIdentitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackUserIdentitiesPages", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackUserIdentitiesPages), arg0, arg1)
}

// DescribeSlackUserIdentitiesPagesWithContext mocks base method
func (m *MockChatbotAPI) DescribeSlackUserIdentitiesPagesWithContext(arg0 context.Context, arg1 *chatbot.DescribeSlackUserIdentitiesInput, arg2 func(*chatbot.DescribeSlackUserIdentitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSlackUserIdentitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSlackUserIdentitiesPagesWithContext indicates an expected call of DescribeSlackUserIdentitiesPagesWithContext
func (mr *MockChatbotAPIMockRecorder) DescribeSlackUserIdentitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackUserIdentitiesPagesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackUserIdentitiesPagesWithContext), varargs...)
}

// DescribeSlackUserIdentitiesRequest mocks base method
func (m *MockChatbotAPI) DescribeSlackUserIdentitiesRequest(arg0 *chatbot.DescribeSlackUserIdentitiesInput) (*request.Request, *chatbot.DescribeSlackUserIdentitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlackUserIdentitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DescribeSlackUserIdentitiesOutput)
	return ret0, ret1
}

// DescribeSlackUserIdentitiesRequest indicates an expected call of DescribeSlackUserIdentitiesRequest
func (mr *MockChatbotAPIMockRecorder) DescribeSlackUserIdentitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackUserIdentitiesRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackUserIdentitiesRequest), arg0)
}

// DescribeSlackUserIdentitiesWithContext mocks base method
func (m *MockChatbotAPI) DescribeSlackUserIdentitiesWithContext(arg0 context.Context, arg1 *chatbot.DescribeSlackUserIdentitiesInput, arg2 ...request.Option) (*chatbot.DescribeSlackUserIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSlackUserIdentitiesWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DescribeSlackUserIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSlackUserIdentitiesWithContext indicates an expected call of DescribeSlackUserIdentitiesWithContext
func (mr *MockChatbotAPIMockRecorder) DescribeSlackUserIdentitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackUserIdentitiesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackUserIdentitiesWithContext), varargs...)
}

// DescribeSlackWorkspaces mocks base method
func (m *MockChatbotAPI) DescribeSlackWorkspaces(arg0 *chatbot.DescribeSlackWorkspacesInput) (*chatbot.DescribeSlackWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlackWorkspaces", arg0)
	ret0, _ := ret[0].(*chatbot.DescribeSlackWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSlackWorkspaces indicates an expected call of DescribeSlackWorkspaces
func (mr *MockChatbotAPIMockRecorder) DescribeSlackWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackWorkspaces", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackWorkspaces), arg0)
}

// DescribeSlackWorkspacesPages mocks base method
func (m *MockChatbotAPI) DescribeSlackWorkspacesPages(arg0 *chatbot.DescribeSlackWorkspacesInput, arg1 func(*chatbot.DescribeSlackWorkspacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlackWorkspacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSlackWorkspacesPages indicates an expected call of DescribeSlackWorkspacesPages
func (mr *MockChatbotAPIMockRecorder) DescribeSlackWorkspacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackWorkspacesPages", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackWorkspacesPages), arg0, arg1)
}

// DescribeSlackWorkspacesPagesWithContext mocks base method
func (m *MockChatbotAPI) DescribeSlackWorkspacesPagesWithContext(arg0 context.Context, arg1 *chatbot.DescribeSlackWorkspacesInput, arg2 func(*chatbot.DescribeSlackWorkspacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSlackWorkspacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSlackWorkspacesPagesWithContext indicates an expected call of DescribeSlackWorkspacesPagesWithContext
func (mr *MockChatbotAPIMockRecorder) DescribeSlackWorkspacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackWorkspacesPagesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackWorkspacesPagesWithContext), varargs...)
}

// DescribeSlackWorkspacesRequest mocks base method
func (m *MockChatbotAPI) DescribeSlackWorkspacesRequest(arg0 *chatbot.DescribeSlackWorkspacesInput) (*request.Request, *chatbot.DescribeSlackWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlackWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.DescribeSlackWorkspacesOutput)
	return ret0, ret1
}

// DescribeSlackWorkspacesRequest indicates an expected call of DescribeSlackWorkspacesRequest
func (mr *MockChatbotAPIMockRecorder) DescribeSlackWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackWorkspacesRequest", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackWorkspacesRequest), arg0)
}

// DescribeSlackWorkspacesWithContext mocks base method
func (m *MockChatbotAPI) DescribeSlackWorkspacesWithContext(arg0 context.Context, arg1 *chatbot.DescribeSlackWorkspacesInput, arg2 ...request.Option) (*chatbot.DescribeSlackWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSlackWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.DescribeSlackWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSlackWorkspacesWithContext indicates an expected call of DescribeSlackWorkspacesWithContext
func (mr *MockChatbotAPIMockRecorder) DescribeSlackWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlackWorkspacesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).DescribeSlackWorkspacesWithContext), varargs...)
}

// GetAccountPreferences mocks base method
func (m *MockChatbotAPI) GetAccountPreferences(arg0 *chatbot.GetAccountPreferencesInput) (*chatbot.GetAccountPreferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountPreferences", arg0)
	ret0, _ := ret[0].(*chatbot.GetAccountPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountPreferences indicates an expected call of GetAccountPreferences
func (mr *MockChatbotAPIMockRecorder) GetAccountPreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountPreferences", reflect.TypeOf((*MockChatbotAPI)(nil).GetAccountPreferences), arg0)
}

// GetAccountPreferencesRequest mocks base method
func (m *MockChatbotAPI) GetAccountPreferencesRequest(arg0 *chatbot.GetAccountPreferencesInput) (*request.Request, *chatbot.GetAccountPreferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountPreferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.GetAccountPreferencesOutput)
	return ret0, ret1
}

// GetAccountPreferencesRequest indicates an expected call of GetAccountPreferencesRequest
func (mr *MockChatbotAPIMockRecorder) GetAccountPreferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountPreferencesRequest", reflect.TypeOf((*MockChatbotAPI)(nil).GetAccountPreferencesRequest), arg0)
}

// GetAccountPreferencesWithContext mocks base method
func (m *MockChatbotAPI) GetAccountPreferencesWithContext(arg0 context.Context, arg1 *chatbot.GetAccountPreferencesInput, arg2 ...request.Option) (*chatbot.GetAccountPreferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountPreferencesWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.GetAccountPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountPreferencesWithContext indicates an expected call of GetAccountPreferencesWithContext
func (mr *MockChatbotAPIMockRecorder) GetAccountPreferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountPreferencesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).GetAccountPreferencesWithContext), varargs...)
}

// GetMicrosoftTeamsChannelConfiguration mocks base method
func (m *MockChatbotAPI) GetMicrosoftTeamsChannelConfiguration(arg0 *chatbot.GetMicrosoftTeamsChannelConfigurationInput) (*chatbot.GetMicrosoftTeamsChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMicrosoftTeamsChannelConfiguration", arg0)
	ret0, _ := ret[0].(*chatbot.GetMicrosoftTeamsChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMicrosoftTeamsChannelConfiguration indicates an expected call of GetMicrosoftTeamsChannelConfiguration
func (mr *MockChatbotAPIMockRecorder) GetMicrosoftTeamsChannelConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMicrosoftTeamsChannelConfiguration", reflect.TypeOf((*MockChatbotAPI)(nil).GetMicrosoftTeamsChannelConfiguration), arg0)
}

// GetMicrosoftTeamsChannelConfigurationRequest mocks base method
func (m *MockChatbotAPI) GetMicrosoftTeamsChannelConfigurationRequest(arg0 *chatbot.GetMicrosoftTeamsChannelConfigurationInput) (*request.Request, *chatbot.GetMicrosoftTeamsChannelConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMicrosoftTeamsChannelConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.GetMicrosoftTeamsChannelConfigurationOutput)
	return ret0, ret1
}

// GetMicrosoftTeamsChannelConfigurationRequest indicates an expected call of GetMicrosoftTeamsChannelConfigurationRequest
func (mr *MockChatbotAPIMockRecorder) GetMicrosoftTeamsChannelConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMicrosoftTeamsChannelConfigurationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).GetMicrosoftTeamsChannelConfigurationRequest), arg0)
}

// GetMicrosoftTeamsChannelConfigurationWithContext mocks base method
func (m *MockChatbotAPI) GetMicrosoftTeamsChannelConfigurationWithContext(arg0 context.Context, arg1 *chatbot.GetMicrosoftTeamsChannelConfigurationInput, arg2 ...request.Option) (*chatbot.GetMicrosoftTeamsChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMicrosoftTeamsChannelConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.GetMicrosoftTeamsChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMicrosoftTeamsChannelConfigurationWithContext indicates an expected call of GetMicrosoftTeamsChannelConfigurationWithContext
func (mr *MockChatbotAPIMockRecorder) GetMicrosoftTeamsChannelConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMicrosoftTeamsChannelConfigurationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).GetMicrosoftTeamsChannelConfigurationWithContext), varargs...)
}

// ListMicrosoftTeamsChannelConfigurations mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsChannelConfigurations(arg0 *chatbot.ListMicrosoftTeamsChannelConfigurationsInput) (*chatbot.ListMicrosoftTeamsChannelConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsChannelConfigurations", arg0)
	ret0, _ := ret[0].(*chatbot.ListMicrosoftTeamsChannelConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMicrosoftTeamsChannelConfigurations indicates an expected call of ListMicrosoftTeamsChannelConfigurations
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsChannelConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsChannelConfigurations", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsChannelConfigurations), arg0)
}

// ListMicrosoftTeamsChannelConfigurationsPages mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsChannelConfigurationsPages(arg0 *chatbot.ListMicrosoftTeamsChannelConfigurationsInput, arg1 func(*chatbot.ListMicrosoftTeamsChannelConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsChannelConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMicrosoftTeamsChannelConfigurationsPages indicates an expected call of ListMicrosoftTeamsChannelConfigurationsPages
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsChannelConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsChannelConfigurationsPages", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsChannelConfigurationsPages), arg0, arg1)
}

// ListMicrosoftTeamsChannelConfigurationsPagesWithContext mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsChannelConfigurationsPagesWithContext(arg0 context.Context, arg1 *chatbot.ListMicrosoftTeamsChannelConfigurationsInput, arg2 func(*chatbot.ListMicrosoftTeamsChannelConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsChannelConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMicrosoftTeamsChannelConfigurationsPagesWithContext indicates an expected call of ListMicrosoftTeamsChannelConfigurationsPagesWithContext
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsChannelConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsChannelConfigurationsPagesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsChannelConfigurationsPagesWithContext), varargs...)
}

// ListMicrosoftTeamsChannelConfigurationsRequest mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsChannelConfigurationsRequest(arg0 *chatbot.ListMicrosoftTeamsChannelConfigurationsInput) (*request.Request, *chatbot.ListMicrosoftTeamsChannelConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsChannelConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.ListMicrosoftTeamsChannelConfigurationsOutput)
	return ret0, ret1
}

// ListMicrosoftTeamsChannelConfigurationsRequest indicates an expected call of ListMicrosoftTeamsChannelConfigurationsRequest
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsChannelConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsChannelConfigurationsRequest", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsChannelConfigurationsRequest), arg0)
}

// ListMicrosoftTeamsChannelConfigurationsWithContext mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsChannelConfigurationsWithContext(arg0 context.Context, arg1 *chatbot.ListMicrosoftTeamsChannelConfigurationsInput, arg2 ...request.Option) (*chatbot.ListMicrosoftTeamsChannelConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsChannelConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.ListMicrosoftTeamsChannelConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMicrosoftTeamsChannelConfigurationsWithContext indicates an expected call of ListMicrosoftTeamsChannelConfigurationsWithContext
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsChannelConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsChannelConfigurationsWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsChannelConfigurationsWithContext), varargs...)
}

// ListMicrosoftTeamsConfiguredTeams mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsConfiguredTeams(arg0 *chatbot.ListMicrosoftTeamsConfiguredTeamsInput) (*chatbot.ListMicrosoftTeamsConfiguredTeamsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsConfiguredTeams", arg0)
	ret0, _ := ret[0].(*chatbot.ListMicrosoftTeamsConfiguredTeamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMicrosoftTeamsConfiguredTeams indicates an expected call of ListMicrosoftTeamsConfiguredTeams
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsConfiguredTeams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsConfiguredTeams", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsConfiguredTeams), arg0)
}

// ListMicrosoftTeamsConfiguredTeamsPages mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsConfiguredTeamsPages(arg0 *chatbot.ListMicrosoftTeamsConfiguredTeamsInput, arg1 func(*chatbot.ListMicrosoftTeamsConfiguredTeamsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsConfiguredTeamsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMicrosoftTeamsConfiguredTeamsPages indicates an expected call of ListMicrosoftTeamsConfiguredTeamsPages
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsConfiguredTeamsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsConfiguredTeamsPages", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsConfiguredTeamsPages), arg0, arg1)
}

// ListMicrosoftTeamsConfiguredTeamsPagesWithContext mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsConfiguredTeamsPagesWithContext(arg0 context.Context, arg1 *chatbot.ListMicrosoftTeamsConfiguredTeamsInput, arg2 func(*chatbot.ListMicrosoftTeamsConfiguredTeamsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsConfiguredTeamsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMicrosoftTeamsConfiguredTeamsPagesWithContext indicates an expected call of ListMicrosoftTeamsConfiguredTeamsPagesWithContext
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsConfiguredTeamsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsConfiguredTeamsPagesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsConfiguredTeamsPagesWithContext), varargs...)
}

// ListMicrosoftTeamsConfiguredTeamsRequest mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsConfiguredTeamsRequest(arg0 *chatbot.ListMicrosoftTeamsConfiguredTeamsInput) (*request.Request, *chatbot.ListMicrosoftTeamsConfiguredTeamsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsConfiguredTeamsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.ListMicrosoftTeamsConfiguredTeamsOutput)
	return ret0, ret1
}

// ListMicrosoftTeamsConfiguredTeamsRequest indicates an expected call of ListMicrosoftTeamsConfiguredTeamsRequest
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsConfiguredTeamsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsConfiguredTeamsRequest", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsConfiguredTeamsRequest), arg0)
}

// ListMicrosoftTeamsConfiguredTeamsWithContext mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsConfiguredTeamsWithContext(arg0 context.Context, arg1 *chatbot.ListMicrosoftTeamsConfiguredTeamsInput, arg2 ...request.Option) (*chatbot.ListMicrosoftTeamsConfiguredTeamsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsConfiguredTeamsWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.ListMicrosoftTeamsConfiguredTeamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMicrosoftTeamsConfiguredTeamsWithContext indicates an expected call of ListMicrosoftTeamsConfiguredTeamsWithContext
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsConfiguredTeamsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsConfiguredTeamsWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsConfiguredTeamsWithContext), varargs...)
}

// ListMicrosoftTeamsUserIdentities mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsUserIdentities(arg0 *chatbot.ListMicrosoftTeamsUserIdentitiesInput) (*chatbot.ListMicrosoftTeamsUserIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsUserIdentities", arg0)
	ret0, _ := ret[0].(*chatbot.ListMicrosoftTeamsUserIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMicrosoftTeamsUserIdentities indicates an expected call of ListMicrosoftTeamsUserIdentities
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsUserIdentities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsUserIdentities", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsUserIdentities), arg0)
}

// ListMicrosoftTeamsUserIdentitiesPages mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsUserIdentitiesPages(arg0 *chatbot.ListMicrosoftTeamsUserIdentitiesInput, arg1 func(*chatbot.ListMicrosoftTeamsUserIdentitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsUserIdentitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMicrosoftTeamsUserIdentitiesPages indicates an expected call of ListMicrosoftTeamsUserIdentitiesPages
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsUserIdentitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsUserIdentitiesPages", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsUserIdentitiesPages), arg0, arg1)
}

// ListMicrosoftTeamsUserIdentitiesPagesWithContext mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsUserIdentitiesPagesWithContext(arg0 context.Context, arg1 *chatbot.ListMicrosoftTeamsUserIdentitiesInput, arg2 func(*chatbot.ListMicrosoftTeamsUserIdentitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsUserIdentitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMicrosoftTeamsUserIdentitiesPagesWithContext indicates an expected call of ListMicrosoftTeamsUserIdentitiesPagesWithContext
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsUserIdentitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsUserIdentitiesPagesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsUserIdentitiesPagesWithContext), varargs...)
}

// ListMicrosoftTeamsUserIdentitiesRequest mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsUserIdentitiesRequest(arg0 *chatbot.ListMicrosoftTeamsUserIdentitiesInput) (*request.Request, *chatbot.ListMicrosoftTeamsUserIdentitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsUserIdentitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.ListMicrosoftTeamsUserIdentitiesOutput)
	return ret0, ret1
}

// ListMicrosoftTeamsUserIdentitiesRequest indicates an expected call of ListMicrosoftTeamsUserIdentitiesRequest
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsUserIdentitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsUserIdentitiesRequest", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsUserIdentitiesRequest), arg0)
}

// ListMicrosoftTeamsUserIdentitiesWithContext mocks base method
func (m *MockChatbotAPI) ListMicrosoftTeamsUserIdentitiesWithContext(arg0 context.Context, arg1 *chatbot.ListMicrosoftTeamsUserIdentitiesInput, arg2 ...request.Option) (*chatbot.ListMicrosoftTeamsUserIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMicrosoftTeamsUserIdentitiesWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.ListMicrosoftTeamsUserIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMicrosoftTeamsUserIdentitiesWithContext indicates an expected call of ListMicrosoftTeamsUserIdentitiesWithContext
func (mr *MockChatbotAPIMockRecorder) ListMicrosoftTeamsUserIdentitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicrosoftTeamsUserIdentitiesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).ListMicrosoftTeamsUserIdentitiesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockChatbotAPI) ListTagsForResource(arg0 *chatbot.ListTagsForResourceInput) (*chatbot.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*chatbot.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockChatbotAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockChatbotAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockChatbotAPI) ListTagsForResourceRequest(arg0 *chatbot.ListTagsForResourceInput) (*request.Request, *chatbot.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockChatbotAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockChatbotAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockChatbotAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *chatbot.ListTagsForResourceInput, arg2 ...request.Option) (*chatbot.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockChatbotAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockChatbotAPI) TagResource(arg0 *chatbot.TagResourceInput) (*chatbot.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*chatbot.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockChatbotAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockChatbotAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockChatbotAPI) TagResourceRequest(arg0 *chatbot.TagResourceInput) (*request.Request, *chatbot.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockChatbotAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockChatbotAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockChatbotAPI) TagResourceWithContext(arg0 context.Context, arg1 *chatbot.TagResourceInput, arg2 ...request.Option) (*chatbot.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockChatbotAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockChatbotAPI) UntagResource(arg0 *chatbot.UntagResourceInput) (*chatbot.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*chatbot.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockChatbotAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockChatbotAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockChatbotAPI) UntagResourceRequest(arg0 *chatbot.UntagResourceInput) (*request.Request, *chatbot.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockChatbotAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockChatbotAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockChatbotAPI) UntagResourceWithContext(arg0 context.Context, arg1 *chatbot.UntagResourceInput, arg2 ...request.Option) (*chatbot.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockChatbotAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAccountPreferences mocks base method
func (m *MockChatbotAPI) UpdateAccountPreferences(arg0 *chatbot.UpdateAccountPreferencesInput) (*chatbot.UpdateAccountPreferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountPreferences", arg0)
	ret0, _ := ret[0].(*chatbot.UpdateAccountPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountPreferences indicates an expected call of UpdateAccountPreferences
func (mr *MockChatbotAPIMockRecorder) UpdateAccountPreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountPreferences", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateAccountPreferences), arg0)
}

// UpdateAccountPreferencesRequest mocks base method
func (m *MockChatbotAPI) UpdateAccountPreferencesRequest(arg0 *chatbot.UpdateAccountPreferencesInput) (*request.Request, *chatbot.UpdateAccountPreferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountPreferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.UpdateAccountPreferencesOutput)
	return ret0, ret1
}

// UpdateAccountPreferencesRequest indicates an expected call of UpdateAccountPreferencesRequest
func (mr *MockChatbotAPIMockRecorder) UpdateAccountPreferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountPreferencesRequest", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateAccountPreferencesRequest), arg0)
}

// UpdateAccountPreferencesWithContext mocks base method
func (m *MockChatbotAPI) UpdateAccountPreferencesWithContext(arg0 context.Context, arg1 *chatbot.UpdateAccountPreferencesInput, arg2 ...request.Option) (*chatbot.UpdateAccountPreferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccountPreferencesWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.UpdateAccountPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountPreferencesWithContext indicates an expected call of UpdateAccountPreferencesWithContext
func (mr *MockChatbotAPIMockRecorder) UpdateAccountPreferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountPreferencesWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateAccountPreferencesWithContext), varargs...)
}

// UpdateChimeWebhookConfiguration mocks base method
func (m *MockChatbotAPI) UpdateChimeWebhookConfiguration(arg0 *chatbot.UpdateChimeWebhookConfigurationInput) (*chatbot.UpdateChimeWebhookConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChimeWebhookConfiguration", arg0)
	ret0, _ := ret[0].(*chatbot.UpdateChimeWebhookConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChimeWebhookConfiguration indicates an expected call of UpdateChimeWebhookConfiguration
func (mr *MockChatbotAPIMockRecorder) UpdateChimeWebhookConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChimeWebhookConfiguration", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateChimeWebhookConfiguration), arg0)
}

// UpdateChimeWebhookConfigurationRequest mocks base method
func (m *MockChatbotAPI) UpdateChimeWebhookConfigurationRequest(arg0 *chatbot.UpdateChimeWebhookConfigurationInput) (*request.Request, *chatbot.UpdateChimeWebhookConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChimeWebhookConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.UpdateChimeWebhookConfigurationOutput)
	return ret0, ret1
}

// UpdateChimeWebhookConfigurationRequest indicates an expected call of UpdateChimeWebhookConfigurationRequest
func (mr *MockChatbotAPIMockRecorder) UpdateChimeWebhookConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChimeWebhookConfigurationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateChimeWebhookConfigurationRequest), arg0)
}

// UpdateChimeWebhookConfigurationWithContext mocks base method
func (m *MockChatbotAPI) UpdateChimeWebhookConfigurationWithContext(arg0 context.Context, arg1 *chatbot.UpdateChimeWebhookConfigurationInput, arg2 ...request.Option) (*chatbot.UpdateChimeWebhookConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChimeWebhookConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.UpdateChimeWebhookConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChimeWebhookConfigurationWithContext indicates an expected call of UpdateChimeWebhookConfigurationWithContext
func (mr *MockChatbotAPIMockRecorder) UpdateChimeWebhookConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChimeWebhookConfigurationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateChimeWebhookConfigurationWithContext), varargs...)
}

// UpdateMicrosoftTeamsChannelConfiguration mocks base method
func (m *MockChatbotAPI) UpdateMicrosoftTeamsChannelConfiguration(arg0 *chatbot.UpdateMicrosoftTeamsChannelConfigurationInput) (*chatbot.UpdateMicrosoftTeamsChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMicrosoftTeamsChannelConfiguration", arg0)
	ret0, _ := ret[0].(*chatbot.UpdateMicrosoftTeamsChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMicrosoftTeamsChannelConfiguration indicates an expected call of UpdateMicrosoftTeamsChannelConfiguration
func (mr *MockChatbotAPIMockRecorder) UpdateMicrosoftTeamsChannelConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMicrosoftTeamsChannelConfiguration", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateMicrosoftTeamsChannelConfiguration), arg0)
}

// UpdateMicrosoftTeamsChannelConfigurationRequest mocks base method
func (m *MockChatbotAPI) UpdateMicrosoftTeamsChannelConfigurationRequest(arg0 *chatbot.UpdateMicrosoftTeamsChannelConfigurationInput) (*request.Request, *chatbot.UpdateMicrosoftTeamsChannelConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMicrosoftTeamsChannelConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.UpdateMicrosoftTeamsChannelConfigurationOutput)
	return ret0, ret1
}

// UpdateMicrosoftTeamsChannelConfigurationRequest indicates an expected call of UpdateMicrosoftTeamsChannelConfigurationRequest
func (mr *MockChatbotAPIMockRecorder) UpdateMicrosoftTeamsChannelConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMicrosoftTeamsChannelConfigurationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateMicrosoftTeamsChannelConfigurationRequest), arg0)
}

// UpdateMicrosoftTeamsChannelConfigurationWithContext mocks base method
func (m *MockChatbotAPI) UpdateMicrosoftTeamsChannelConfigurationWithContext(arg0 context.Context, arg1 *chatbot.UpdateMicrosoftTeamsChannelConfigurationInput, arg2 ...request.Option) (*chatbot.UpdateMicrosoftTeamsChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMicrosoftTeamsChannelConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.UpdateMicrosoftTeamsChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMicrosoftTeamsChannelConfigurationWithContext indicates an expected call of UpdateMicrosoftTeamsChannelConfigurationWithContext
func (mr *MockChatbotAPIMockRecorder) UpdateMicrosoftTeamsChannelConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMicrosoftTeamsChannelConfigurationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateMicrosoftTeamsChannelConfigurationWithContext), varargs...)
}

// UpdateSlackChannelConfiguration mocks base method
func (m *MockChatbotAPI) UpdateSlackChannelConfiguration(arg0 *chatbot.UpdateSlackChannelConfigurationInput) (*chatbot.UpdateSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlackChannelConfiguration", arg0)
	ret0, _ := ret[0].(*chatbot.UpdateSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlackChannelConfiguration indicates an expected call of UpdateSlackChannelConfiguration
func (mr *MockChatbotAPIMockRecorder) UpdateSlackChannelConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlackChannelConfiguration", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateSlackChannelConfiguration), arg0)
}

// UpdateSlackChannelConfigurationRequest mocks base method
func (m *MockChatbotAPI) UpdateSlackChannelConfigurationRequest(arg0 *chatbot.UpdateSlackChannelConfigurationInput) (*request.Request, *chatbot.UpdateSlackChannelConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlackChannelConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chatbot.UpdateSlackChannelConfigurationOutput)
	return ret0, ret1
}

// UpdateSlackChannelConfigurationRequest indicates an expected call of UpdateSlackChannelConfigurationRequest
func (mr *MockChatbotAPIMockRecorder) UpdateSlackChannelConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlackChannelConfigurationRequest", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateSlackChannelConfigurationRequest), arg0)
}

// UpdateSlackChannelConfigurationWithContext mocks base method
func (m *MockChatbotAPI) UpdateSlackChannelConfigurationWithContext(arg0 context.Context, arg1 *chatbot.UpdateSlackChannelConfigurationInput, arg2 ...request.Option) (*chatbot.UpdateSlackChannelConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSlackChannelConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*chatbot.UpdateSlackChannelConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlackChannelConfigurationWithContext indicates an expected call of UpdateSlackChannelConfigurationWithContext
func (mr *MockChatbotAPIMockRecorder) UpdateSlackChannelConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlackChannelConfigurationWithContext", reflect.TypeOf((*MockChatbotAPI)(nil).UpdateSlackChannelConfigurationWithContext), varargs...)
}
