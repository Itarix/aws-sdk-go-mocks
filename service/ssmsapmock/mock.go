// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ssmsap/ssmsapiface (interfaces: SsmSapAPI)

// Package ssmsapmock is a generated GoMock package.
package ssmsapmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	ssmsap "github.com/aws/aws-sdk-go/service/ssmsap"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSsmSapAPI is a mock of SsmSapAPI interface
type MockSsmSapAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSsmSapAPIMockRecorder
}

// MockSsmSapAPIMockRecorder is the mock recorder for MockSsmSapAPI
type MockSsmSapAPIMockRecorder struct {
	mock *MockSsmSapAPI
}

// NewMockSsmSapAPI creates a new mock instance
func NewMockSsmSapAPI(ctrl *gomock.Controller) *MockSsmSapAPI {
	mock := &MockSsmSapAPI{ctrl: ctrl}
	mock.recorder = &MockSsmSapAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSsmSapAPI) EXPECT() *MockSsmSapAPIMockRecorder {
	return m.recorder
}

// DeleteResourcePermission mocks base method
func (m *MockSsmSapAPI) DeleteResourcePermission(arg0 *ssmsap.DeleteResourcePermissionInput) (*ssmsap.DeleteResourcePermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePermission", arg0)
	ret0, _ := ret[0].(*ssmsap.DeleteResourcePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePermission indicates an expected call of DeleteResourcePermission
func (mr *MockSsmSapAPIMockRecorder) DeleteResourcePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePermission", reflect.TypeOf((*MockSsmSapAPI)(nil).DeleteResourcePermission), arg0)
}

// DeleteResourcePermissionRequest mocks base method
func (m *MockSsmSapAPI) DeleteResourcePermissionRequest(arg0 *ssmsap.DeleteResourcePermissionInput) (*request.Request, *ssmsap.DeleteResourcePermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.DeleteResourcePermissionOutput)
	return ret0, ret1
}

// DeleteResourcePermissionRequest indicates an expected call of DeleteResourcePermissionRequest
func (mr *MockSsmSapAPIMockRecorder) DeleteResourcePermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePermissionRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).DeleteResourcePermissionRequest), arg0)
}

// DeleteResourcePermissionWithContext mocks base method
func (m *MockSsmSapAPI) DeleteResourcePermissionWithContext(arg0 context.Context, arg1 *ssmsap.DeleteResourcePermissionInput, arg2 ...request.Option) (*ssmsap.DeleteResourcePermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePermissionWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.DeleteResourcePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePermissionWithContext indicates an expected call of DeleteResourcePermissionWithContext
func (mr *MockSsmSapAPIMockRecorder) DeleteResourcePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePermissionWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).DeleteResourcePermissionWithContext), varargs...)
}

// DeregisterApplication mocks base method
func (m *MockSsmSapAPI) DeregisterApplication(arg0 *ssmsap.DeregisterApplicationInput) (*ssmsap.DeregisterApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterApplication", arg0)
	ret0, _ := ret[0].(*ssmsap.DeregisterApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterApplication indicates an expected call of DeregisterApplication
func (mr *MockSsmSapAPIMockRecorder) DeregisterApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterApplication", reflect.TypeOf((*MockSsmSapAPI)(nil).DeregisterApplication), arg0)
}

// DeregisterApplicationRequest mocks base method
func (m *MockSsmSapAPI) DeregisterApplicationRequest(arg0 *ssmsap.DeregisterApplicationInput) (*request.Request, *ssmsap.DeregisterApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.DeregisterApplicationOutput)
	return ret0, ret1
}

// DeregisterApplicationRequest indicates an expected call of DeregisterApplicationRequest
func (mr *MockSsmSapAPIMockRecorder) DeregisterApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterApplicationRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).DeregisterApplicationRequest), arg0)
}

// DeregisterApplicationWithContext mocks base method
func (m *MockSsmSapAPI) DeregisterApplicationWithContext(arg0 context.Context, arg1 *ssmsap.DeregisterApplicationInput, arg2 ...request.Option) (*ssmsap.DeregisterApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.DeregisterApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterApplicationWithContext indicates an expected call of DeregisterApplicationWithContext
func (mr *MockSsmSapAPIMockRecorder) DeregisterApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterApplicationWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).DeregisterApplicationWithContext), varargs...)
}

// GetApplication mocks base method
func (m *MockSsmSapAPI) GetApplication(arg0 *ssmsap.GetApplicationInput) (*ssmsap.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*ssmsap.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockSsmSapAPIMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockSsmSapAPI)(nil).GetApplication), arg0)
}

// GetApplicationRequest mocks base method
func (m *MockSsmSapAPI) GetApplicationRequest(arg0 *ssmsap.GetApplicationInput) (*request.Request, *ssmsap.GetApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.GetApplicationOutput)
	return ret0, ret1
}

// GetApplicationRequest indicates an expected call of GetApplicationRequest
func (mr *MockSsmSapAPIMockRecorder) GetApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).GetApplicationRequest), arg0)
}

// GetApplicationWithContext mocks base method
func (m *MockSsmSapAPI) GetApplicationWithContext(arg0 context.Context, arg1 *ssmsap.GetApplicationInput, arg2 ...request.Option) (*ssmsap.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationWithContext indicates an expected call of GetApplicationWithContext
func (mr *MockSsmSapAPIMockRecorder) GetApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).GetApplicationWithContext), varargs...)
}

// GetComponent mocks base method
func (m *MockSsmSapAPI) GetComponent(arg0 *ssmsap.GetComponentInput) (*ssmsap.GetComponentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponent", arg0)
	ret0, _ := ret[0].(*ssmsap.GetComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponent indicates an expected call of GetComponent
func (mr *MockSsmSapAPIMockRecorder) GetComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponent", reflect.TypeOf((*MockSsmSapAPI)(nil).GetComponent), arg0)
}

// GetComponentRequest mocks base method
func (m *MockSsmSapAPI) GetComponentRequest(arg0 *ssmsap.GetComponentInput) (*request.Request, *ssmsap.GetComponentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.GetComponentOutput)
	return ret0, ret1
}

// GetComponentRequest indicates an expected call of GetComponentRequest
func (mr *MockSsmSapAPIMockRecorder) GetComponentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).GetComponentRequest), arg0)
}

// GetComponentWithContext mocks base method
func (m *MockSsmSapAPI) GetComponentWithContext(arg0 context.Context, arg1 *ssmsap.GetComponentInput, arg2 ...request.Option) (*ssmsap.GetComponentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComponentWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.GetComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentWithContext indicates an expected call of GetComponentWithContext
func (mr *MockSsmSapAPIMockRecorder) GetComponentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).GetComponentWithContext), varargs...)
}

// GetDatabase mocks base method
func (m *MockSsmSapAPI) GetDatabase(arg0 *ssmsap.GetDatabaseInput) (*ssmsap.GetDatabaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabase", arg0)
	ret0, _ := ret[0].(*ssmsap.GetDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabase indicates an expected call of GetDatabase
func (mr *MockSsmSapAPIMockRecorder) GetDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockSsmSapAPI)(nil).GetDatabase), arg0)
}

// GetDatabaseRequest mocks base method
func (m *MockSsmSapAPI) GetDatabaseRequest(arg0 *ssmsap.GetDatabaseInput) (*request.Request, *ssmsap.GetDatabaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.GetDatabaseOutput)
	return ret0, ret1
}

// GetDatabaseRequest indicates an expected call of GetDatabaseRequest
func (mr *MockSsmSapAPIMockRecorder) GetDatabaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).GetDatabaseRequest), arg0)
}

// GetDatabaseWithContext mocks base method
func (m *MockSsmSapAPI) GetDatabaseWithContext(arg0 context.Context, arg1 *ssmsap.GetDatabaseInput, arg2 ...request.Option) (*ssmsap.GetDatabaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatabaseWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.GetDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabaseWithContext indicates an expected call of GetDatabaseWithContext
func (mr *MockSsmSapAPIMockRecorder) GetDatabaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).GetDatabaseWithContext), varargs...)
}

// GetOperation mocks base method
func (m *MockSsmSapAPI) GetOperation(arg0 *ssmsap.GetOperationInput) (*ssmsap.GetOperationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", arg0)
	ret0, _ := ret[0].(*ssmsap.GetOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation
func (mr *MockSsmSapAPIMockRecorder) GetOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockSsmSapAPI)(nil).GetOperation), arg0)
}

// GetOperationRequest mocks base method
func (m *MockSsmSapAPI) GetOperationRequest(arg0 *ssmsap.GetOperationInput) (*request.Request, *ssmsap.GetOperationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.GetOperationOutput)
	return ret0, ret1
}

// GetOperationRequest indicates an expected call of GetOperationRequest
func (mr *MockSsmSapAPIMockRecorder) GetOperationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).GetOperationRequest), arg0)
}

// GetOperationWithContext mocks base method
func (m *MockSsmSapAPI) GetOperationWithContext(arg0 context.Context, arg1 *ssmsap.GetOperationInput, arg2 ...request.Option) (*ssmsap.GetOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperationWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.GetOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationWithContext indicates an expected call of GetOperationWithContext
func (mr *MockSsmSapAPIMockRecorder) GetOperationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).GetOperationWithContext), varargs...)
}

// GetResourcePermission mocks base method
func (m *MockSsmSapAPI) GetResourcePermission(arg0 *ssmsap.GetResourcePermissionInput) (*ssmsap.GetResourcePermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePermission", arg0)
	ret0, _ := ret[0].(*ssmsap.GetResourcePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePermission indicates an expected call of GetResourcePermission
func (mr *MockSsmSapAPIMockRecorder) GetResourcePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePermission", reflect.TypeOf((*MockSsmSapAPI)(nil).GetResourcePermission), arg0)
}

// GetResourcePermissionRequest mocks base method
func (m *MockSsmSapAPI) GetResourcePermissionRequest(arg0 *ssmsap.GetResourcePermissionInput) (*request.Request, *ssmsap.GetResourcePermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.GetResourcePermissionOutput)
	return ret0, ret1
}

// GetResourcePermissionRequest indicates an expected call of GetResourcePermissionRequest
func (mr *MockSsmSapAPIMockRecorder) GetResourcePermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePermissionRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).GetResourcePermissionRequest), arg0)
}

// GetResourcePermissionWithContext mocks base method
func (m *MockSsmSapAPI) GetResourcePermissionWithContext(arg0 context.Context, arg1 *ssmsap.GetResourcePermissionInput, arg2 ...request.Option) (*ssmsap.GetResourcePermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePermissionWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.GetResourcePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePermissionWithContext indicates an expected call of GetResourcePermissionWithContext
func (mr *MockSsmSapAPIMockRecorder) GetResourcePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePermissionWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).GetResourcePermissionWithContext), varargs...)
}

// ListApplications mocks base method
func (m *MockSsmSapAPI) ListApplications(arg0 *ssmsap.ListApplicationsInput) (*ssmsap.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*ssmsap.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockSsmSapAPIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockSsmSapAPI)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method
func (m *MockSsmSapAPI) ListApplicationsPages(arg0 *ssmsap.ListApplicationsInput, arg1 func(*ssmsap.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages
func (mr *MockSsmSapAPIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockSsmSapAPI)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method
func (m *MockSsmSapAPI) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *ssmsap.ListApplicationsInput, arg2 func(*ssmsap.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext
func (mr *MockSsmSapAPIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method
func (m *MockSsmSapAPI) ListApplicationsRequest(arg0 *ssmsap.ListApplicationsInput) (*request.Request, *ssmsap.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest
func (mr *MockSsmSapAPIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method
func (m *MockSsmSapAPI) ListApplicationsWithContext(arg0 context.Context, arg1 *ssmsap.ListApplicationsInput, arg2 ...request.Option) (*ssmsap.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext
func (mr *MockSsmSapAPIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).ListApplicationsWithContext), varargs...)
}

// ListComponents mocks base method
func (m *MockSsmSapAPI) ListComponents(arg0 *ssmsap.ListComponentsInput) (*ssmsap.ListComponentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponents", arg0)
	ret0, _ := ret[0].(*ssmsap.ListComponentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComponents indicates an expected call of ListComponents
func (mr *MockSsmSapAPIMockRecorder) ListComponents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponents", reflect.TypeOf((*MockSsmSapAPI)(nil).ListComponents), arg0)
}

// ListComponentsPages mocks base method
func (m *MockSsmSapAPI) ListComponentsPages(arg0 *ssmsap.ListComponentsInput, arg1 func(*ssmsap.ListComponentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListComponentsPages indicates an expected call of ListComponentsPages
func (mr *MockSsmSapAPIMockRecorder) ListComponentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentsPages", reflect.TypeOf((*MockSsmSapAPI)(nil).ListComponentsPages), arg0, arg1)
}

// ListComponentsPagesWithContext mocks base method
func (m *MockSsmSapAPI) ListComponentsPagesWithContext(arg0 context.Context, arg1 *ssmsap.ListComponentsInput, arg2 func(*ssmsap.ListComponentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComponentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListComponentsPagesWithContext indicates an expected call of ListComponentsPagesWithContext
func (mr *MockSsmSapAPIMockRecorder) ListComponentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentsPagesWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).ListComponentsPagesWithContext), varargs...)
}

// ListComponentsRequest mocks base method
func (m *MockSsmSapAPI) ListComponentsRequest(arg0 *ssmsap.ListComponentsInput) (*request.Request, *ssmsap.ListComponentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.ListComponentsOutput)
	return ret0, ret1
}

// ListComponentsRequest indicates an expected call of ListComponentsRequest
func (mr *MockSsmSapAPIMockRecorder) ListComponentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentsRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).ListComponentsRequest), arg0)
}

// ListComponentsWithContext mocks base method
func (m *MockSsmSapAPI) ListComponentsWithContext(arg0 context.Context, arg1 *ssmsap.ListComponentsInput, arg2 ...request.Option) (*ssmsap.ListComponentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComponentsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.ListComponentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComponentsWithContext indicates an expected call of ListComponentsWithContext
func (mr *MockSsmSapAPIMockRecorder) ListComponentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentsWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).ListComponentsWithContext), varargs...)
}

// ListDatabases mocks base method
func (m *MockSsmSapAPI) ListDatabases(arg0 *ssmsap.ListDatabasesInput) (*ssmsap.ListDatabasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases", arg0)
	ret0, _ := ret[0].(*ssmsap.ListDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases
func (mr *MockSsmSapAPIMockRecorder) ListDatabases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockSsmSapAPI)(nil).ListDatabases), arg0)
}

// ListDatabasesPages mocks base method
func (m *MockSsmSapAPI) ListDatabasesPages(arg0 *ssmsap.ListDatabasesInput, arg1 func(*ssmsap.ListDatabasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatabasesPages indicates an expected call of ListDatabasesPages
func (mr *MockSsmSapAPIMockRecorder) ListDatabasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabasesPages", reflect.TypeOf((*MockSsmSapAPI)(nil).ListDatabasesPages), arg0, arg1)
}

// ListDatabasesPagesWithContext mocks base method
func (m *MockSsmSapAPI) ListDatabasesPagesWithContext(arg0 context.Context, arg1 *ssmsap.ListDatabasesInput, arg2 func(*ssmsap.ListDatabasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatabasesPagesWithContext indicates an expected call of ListDatabasesPagesWithContext
func (mr *MockSsmSapAPIMockRecorder) ListDatabasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabasesPagesWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).ListDatabasesPagesWithContext), varargs...)
}

// ListDatabasesRequest mocks base method
func (m *MockSsmSapAPI) ListDatabasesRequest(arg0 *ssmsap.ListDatabasesInput) (*request.Request, *ssmsap.ListDatabasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.ListDatabasesOutput)
	return ret0, ret1
}

// ListDatabasesRequest indicates an expected call of ListDatabasesRequest
func (mr *MockSsmSapAPIMockRecorder) ListDatabasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabasesRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).ListDatabasesRequest), arg0)
}

// ListDatabasesWithContext mocks base method
func (m *MockSsmSapAPI) ListDatabasesWithContext(arg0 context.Context, arg1 *ssmsap.ListDatabasesInput, arg2 ...request.Option) (*ssmsap.ListDatabasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabasesWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.ListDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabasesWithContext indicates an expected call of ListDatabasesWithContext
func (mr *MockSsmSapAPIMockRecorder) ListDatabasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabasesWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).ListDatabasesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockSsmSapAPI) ListTagsForResource(arg0 *ssmsap.ListTagsForResourceInput) (*ssmsap.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*ssmsap.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockSsmSapAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSsmSapAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockSsmSapAPI) ListTagsForResourceRequest(arg0 *ssmsap.ListTagsForResourceInput) (*request.Request, *ssmsap.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockSsmSapAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockSsmSapAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *ssmsap.ListTagsForResourceInput, arg2 ...request.Option) (*ssmsap.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockSsmSapAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutResourcePermission mocks base method
func (m *MockSsmSapAPI) PutResourcePermission(arg0 *ssmsap.PutResourcePermissionInput) (*ssmsap.PutResourcePermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePermission", arg0)
	ret0, _ := ret[0].(*ssmsap.PutResourcePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePermission indicates an expected call of PutResourcePermission
func (mr *MockSsmSapAPIMockRecorder) PutResourcePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePermission", reflect.TypeOf((*MockSsmSapAPI)(nil).PutResourcePermission), arg0)
}

// PutResourcePermissionRequest mocks base method
func (m *MockSsmSapAPI) PutResourcePermissionRequest(arg0 *ssmsap.PutResourcePermissionInput) (*request.Request, *ssmsap.PutResourcePermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.PutResourcePermissionOutput)
	return ret0, ret1
}

// PutResourcePermissionRequest indicates an expected call of PutResourcePermissionRequest
func (mr *MockSsmSapAPIMockRecorder) PutResourcePermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePermissionRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).PutResourcePermissionRequest), arg0)
}

// PutResourcePermissionWithContext mocks base method
func (m *MockSsmSapAPI) PutResourcePermissionWithContext(arg0 context.Context, arg1 *ssmsap.PutResourcePermissionInput, arg2 ...request.Option) (*ssmsap.PutResourcePermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePermissionWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.PutResourcePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePermissionWithContext indicates an expected call of PutResourcePermissionWithContext
func (mr *MockSsmSapAPIMockRecorder) PutResourcePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePermissionWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).PutResourcePermissionWithContext), varargs...)
}

// RegisterApplication mocks base method
func (m *MockSsmSapAPI) RegisterApplication(arg0 *ssmsap.RegisterApplicationInput) (*ssmsap.RegisterApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterApplication", arg0)
	ret0, _ := ret[0].(*ssmsap.RegisterApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterApplication indicates an expected call of RegisterApplication
func (mr *MockSsmSapAPIMockRecorder) RegisterApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterApplication", reflect.TypeOf((*MockSsmSapAPI)(nil).RegisterApplication), arg0)
}

// RegisterApplicationRequest mocks base method
func (m *MockSsmSapAPI) RegisterApplicationRequest(arg0 *ssmsap.RegisterApplicationInput) (*request.Request, *ssmsap.RegisterApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.RegisterApplicationOutput)
	return ret0, ret1
}

// RegisterApplicationRequest indicates an expected call of RegisterApplicationRequest
func (mr *MockSsmSapAPIMockRecorder) RegisterApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterApplicationRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).RegisterApplicationRequest), arg0)
}

// RegisterApplicationWithContext mocks base method
func (m *MockSsmSapAPI) RegisterApplicationWithContext(arg0 context.Context, arg1 *ssmsap.RegisterApplicationInput, arg2 ...request.Option) (*ssmsap.RegisterApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.RegisterApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterApplicationWithContext indicates an expected call of RegisterApplicationWithContext
func (mr *MockSsmSapAPIMockRecorder) RegisterApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterApplicationWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).RegisterApplicationWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockSsmSapAPI) TagResource(arg0 *ssmsap.TagResourceInput) (*ssmsap.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*ssmsap.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockSsmSapAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSsmSapAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockSsmSapAPI) TagResourceRequest(arg0 *ssmsap.TagResourceInput) (*request.Request, *ssmsap.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockSsmSapAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockSsmSapAPI) TagResourceWithContext(arg0 context.Context, arg1 *ssmsap.TagResourceInput, arg2 ...request.Option) (*ssmsap.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockSsmSapAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockSsmSapAPI) UntagResource(arg0 *ssmsap.UntagResourceInput) (*ssmsap.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*ssmsap.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockSsmSapAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSsmSapAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockSsmSapAPI) UntagResourceRequest(arg0 *ssmsap.UntagResourceInput) (*request.Request, *ssmsap.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockSsmSapAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockSsmSapAPI) UntagResourceWithContext(arg0 context.Context, arg1 *ssmsap.UntagResourceInput, arg2 ...request.Option) (*ssmsap.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockSsmSapAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApplicationSettings mocks base method
func (m *MockSsmSapAPI) UpdateApplicationSettings(arg0 *ssmsap.UpdateApplicationSettingsInput) (*ssmsap.UpdateApplicationSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationSettings", arg0)
	ret0, _ := ret[0].(*ssmsap.UpdateApplicationSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationSettings indicates an expected call of UpdateApplicationSettings
func (mr *MockSsmSapAPIMockRecorder) UpdateApplicationSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationSettings", reflect.TypeOf((*MockSsmSapAPI)(nil).UpdateApplicationSettings), arg0)
}

// UpdateApplicationSettingsRequest mocks base method
func (m *MockSsmSapAPI) UpdateApplicationSettingsRequest(arg0 *ssmsap.UpdateApplicationSettingsInput) (*request.Request, *ssmsap.UpdateApplicationSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmsap.UpdateApplicationSettingsOutput)
	return ret0, ret1
}

// UpdateApplicationSettingsRequest indicates an expected call of UpdateApplicationSettingsRequest
func (mr *MockSsmSapAPIMockRecorder) UpdateApplicationSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationSettingsRequest", reflect.TypeOf((*MockSsmSapAPI)(nil).UpdateApplicationSettingsRequest), arg0)
}

// UpdateApplicationSettingsWithContext mocks base method
func (m *MockSsmSapAPI) UpdateApplicationSettingsWithContext(arg0 context.Context, arg1 *ssmsap.UpdateApplicationSettingsInput, arg2 ...request.Option) (*ssmsap.UpdateApplicationSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmsap.UpdateApplicationSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationSettingsWithContext indicates an expected call of UpdateApplicationSettingsWithContext
func (mr *MockSsmSapAPIMockRecorder) UpdateApplicationSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationSettingsWithContext", reflect.TypeOf((*MockSsmSapAPI)(nil).UpdateApplicationSettingsWithContext), varargs...)
}
