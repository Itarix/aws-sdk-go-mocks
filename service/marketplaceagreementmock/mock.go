// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/marketplaceagreement/marketplaceagreementiface (interfaces: MarketplaceAgreementAPI)

// Package marketplaceagreementmock is a generated GoMock package.
package marketplaceagreementmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	marketplaceagreement "github.com/aws/aws-sdk-go/service/marketplaceagreement"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMarketplaceAgreementAPI is a mock of MarketplaceAgreementAPI interface
type MockMarketplaceAgreementAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMarketplaceAgreementAPIMockRecorder
}

// MockMarketplaceAgreementAPIMockRecorder is the mock recorder for MockMarketplaceAgreementAPI
type MockMarketplaceAgreementAPIMockRecorder struct {
	mock *MockMarketplaceAgreementAPI
}

// NewMockMarketplaceAgreementAPI creates a new mock instance
func NewMockMarketplaceAgreementAPI(ctrl *gomock.Controller) *MockMarketplaceAgreementAPI {
	mock := &MockMarketplaceAgreementAPI{ctrl: ctrl}
	mock.recorder = &MockMarketplaceAgreementAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketplaceAgreementAPI) EXPECT() *MockMarketplaceAgreementAPIMockRecorder {
	return m.recorder
}

// DescribeAgreement mocks base method
func (m *MockMarketplaceAgreementAPI) DescribeAgreement(arg0 *marketplaceagreement.DescribeAgreementInput) (*marketplaceagreement.DescribeAgreementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAgreement", arg0)
	ret0, _ := ret[0].(*marketplaceagreement.DescribeAgreementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAgreement indicates an expected call of DescribeAgreement
func (mr *MockMarketplaceAgreementAPIMockRecorder) DescribeAgreement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAgreement", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).DescribeAgreement), arg0)
}

// DescribeAgreementRequest mocks base method
func (m *MockMarketplaceAgreementAPI) DescribeAgreementRequest(arg0 *marketplaceagreement.DescribeAgreementInput) (*request.Request, *marketplaceagreement.DescribeAgreementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAgreementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*marketplaceagreement.DescribeAgreementOutput)
	return ret0, ret1
}

// DescribeAgreementRequest indicates an expected call of DescribeAgreementRequest
func (mr *MockMarketplaceAgreementAPIMockRecorder) DescribeAgreementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAgreementRequest", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).DescribeAgreementRequest), arg0)
}

// DescribeAgreementWithContext mocks base method
func (m *MockMarketplaceAgreementAPI) DescribeAgreementWithContext(arg0 context.Context, arg1 *marketplaceagreement.DescribeAgreementInput, arg2 ...request.Option) (*marketplaceagreement.DescribeAgreementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAgreementWithContext", varargs...)
	ret0, _ := ret[0].(*marketplaceagreement.DescribeAgreementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAgreementWithContext indicates an expected call of DescribeAgreementWithContext
func (mr *MockMarketplaceAgreementAPIMockRecorder) DescribeAgreementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAgreementWithContext", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).DescribeAgreementWithContext), varargs...)
}

// GetAgreementTerms mocks base method
func (m *MockMarketplaceAgreementAPI) GetAgreementTerms(arg0 *marketplaceagreement.GetAgreementTermsInput) (*marketplaceagreement.GetAgreementTermsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgreementTerms", arg0)
	ret0, _ := ret[0].(*marketplaceagreement.GetAgreementTermsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgreementTerms indicates an expected call of GetAgreementTerms
func (mr *MockMarketplaceAgreementAPIMockRecorder) GetAgreementTerms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementTerms", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).GetAgreementTerms), arg0)
}

// GetAgreementTermsPages mocks base method
func (m *MockMarketplaceAgreementAPI) GetAgreementTermsPages(arg0 *marketplaceagreement.GetAgreementTermsInput, arg1 func(*marketplaceagreement.GetAgreementTermsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgreementTermsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAgreementTermsPages indicates an expected call of GetAgreementTermsPages
func (mr *MockMarketplaceAgreementAPIMockRecorder) GetAgreementTermsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementTermsPages", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).GetAgreementTermsPages), arg0, arg1)
}

// GetAgreementTermsPagesWithContext mocks base method
func (m *MockMarketplaceAgreementAPI) GetAgreementTermsPagesWithContext(arg0 context.Context, arg1 *marketplaceagreement.GetAgreementTermsInput, arg2 func(*marketplaceagreement.GetAgreementTermsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgreementTermsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAgreementTermsPagesWithContext indicates an expected call of GetAgreementTermsPagesWithContext
func (mr *MockMarketplaceAgreementAPIMockRecorder) GetAgreementTermsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementTermsPagesWithContext", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).GetAgreementTermsPagesWithContext), varargs...)
}

// GetAgreementTermsRequest mocks base method
func (m *MockMarketplaceAgreementAPI) GetAgreementTermsRequest(arg0 *marketplaceagreement.GetAgreementTermsInput) (*request.Request, *marketplaceagreement.GetAgreementTermsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgreementTermsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*marketplaceagreement.GetAgreementTermsOutput)
	return ret0, ret1
}

// GetAgreementTermsRequest indicates an expected call of GetAgreementTermsRequest
func (mr *MockMarketplaceAgreementAPIMockRecorder) GetAgreementTermsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementTermsRequest", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).GetAgreementTermsRequest), arg0)
}

// GetAgreementTermsWithContext mocks base method
func (m *MockMarketplaceAgreementAPI) GetAgreementTermsWithContext(arg0 context.Context, arg1 *marketplaceagreement.GetAgreementTermsInput, arg2 ...request.Option) (*marketplaceagreement.GetAgreementTermsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgreementTermsWithContext", varargs...)
	ret0, _ := ret[0].(*marketplaceagreement.GetAgreementTermsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgreementTermsWithContext indicates an expected call of GetAgreementTermsWithContext
func (mr *MockMarketplaceAgreementAPIMockRecorder) GetAgreementTermsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementTermsWithContext", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).GetAgreementTermsWithContext), varargs...)
}

// SearchAgreements mocks base method
func (m *MockMarketplaceAgreementAPI) SearchAgreements(arg0 *marketplaceagreement.SearchAgreementsInput) (*marketplaceagreement.SearchAgreementsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAgreements", arg0)
	ret0, _ := ret[0].(*marketplaceagreement.SearchAgreementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAgreements indicates an expected call of SearchAgreements
func (mr *MockMarketplaceAgreementAPIMockRecorder) SearchAgreements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAgreements", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).SearchAgreements), arg0)
}

// SearchAgreementsPages mocks base method
func (m *MockMarketplaceAgreementAPI) SearchAgreementsPages(arg0 *marketplaceagreement.SearchAgreementsInput, arg1 func(*marketplaceagreement.SearchAgreementsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAgreementsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchAgreementsPages indicates an expected call of SearchAgreementsPages
func (mr *MockMarketplaceAgreementAPIMockRecorder) SearchAgreementsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAgreementsPages", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).SearchAgreementsPages), arg0, arg1)
}

// SearchAgreementsPagesWithContext mocks base method
func (m *MockMarketplaceAgreementAPI) SearchAgreementsPagesWithContext(arg0 context.Context, arg1 *marketplaceagreement.SearchAgreementsInput, arg2 func(*marketplaceagreement.SearchAgreementsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAgreementsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchAgreementsPagesWithContext indicates an expected call of SearchAgreementsPagesWithContext
func (mr *MockMarketplaceAgreementAPIMockRecorder) SearchAgreementsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAgreementsPagesWithContext", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).SearchAgreementsPagesWithContext), varargs...)
}

// SearchAgreementsRequest mocks base method
func (m *MockMarketplaceAgreementAPI) SearchAgreementsRequest(arg0 *marketplaceagreement.SearchAgreementsInput) (*request.Request, *marketplaceagreement.SearchAgreementsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAgreementsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*marketplaceagreement.SearchAgreementsOutput)
	return ret0, ret1
}

// SearchAgreementsRequest indicates an expected call of SearchAgreementsRequest
func (mr *MockMarketplaceAgreementAPIMockRecorder) SearchAgreementsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAgreementsRequest", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).SearchAgreementsRequest), arg0)
}

// SearchAgreementsWithContext mocks base method
func (m *MockMarketplaceAgreementAPI) SearchAgreementsWithContext(arg0 context.Context, arg1 *marketplaceagreement.SearchAgreementsInput, arg2 ...request.Option) (*marketplaceagreement.SearchAgreementsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAgreementsWithContext", varargs...)
	ret0, _ := ret[0].(*marketplaceagreement.SearchAgreementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAgreementsWithContext indicates an expected call of SearchAgreementsWithContext
func (mr *MockMarketplaceAgreementAPIMockRecorder) SearchAgreementsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAgreementsWithContext", reflect.TypeOf((*MockMarketplaceAgreementAPI)(nil).SearchAgreementsWithContext), varargs...)
}
