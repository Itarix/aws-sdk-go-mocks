// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/fms/fmsiface (interfaces: FMSAPI)

// Package fmsmock is a generated GoMock package.
package fmsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	fms "github.com/aws/aws-sdk-go/service/fms"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFMSAPI is a mock of FMSAPI interface
type MockFMSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFMSAPIMockRecorder
}

// MockFMSAPIMockRecorder is the mock recorder for MockFMSAPI
type MockFMSAPIMockRecorder struct {
	mock *MockFMSAPI
}

// NewMockFMSAPI creates a new mock instance
func NewMockFMSAPI(ctrl *gomock.Controller) *MockFMSAPI {
	mock := &MockFMSAPI{ctrl: ctrl}
	mock.recorder = &MockFMSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFMSAPI) EXPECT() *MockFMSAPIMockRecorder {
	return m.recorder
}

// AssociateAdminAccount mocks base method
func (m *MockFMSAPI) AssociateAdminAccount(arg0 *fms.AssociateAdminAccountInput) (*fms.AssociateAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAdminAccount", arg0)
	ret0, _ := ret[0].(*fms.AssociateAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAdminAccount indicates an expected call of AssociateAdminAccount
func (mr *MockFMSAPIMockRecorder) AssociateAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAdminAccount", reflect.TypeOf((*MockFMSAPI)(nil).AssociateAdminAccount), arg0)
}

// AssociateAdminAccountRequest mocks base method
func (m *MockFMSAPI) AssociateAdminAccountRequest(arg0 *fms.AssociateAdminAccountInput) (*request.Request, *fms.AssociateAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.AssociateAdminAccountOutput)
	return ret0, ret1
}

// AssociateAdminAccountRequest indicates an expected call of AssociateAdminAccountRequest
func (mr *MockFMSAPIMockRecorder) AssociateAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAdminAccountRequest", reflect.TypeOf((*MockFMSAPI)(nil).AssociateAdminAccountRequest), arg0)
}

// AssociateAdminAccountWithContext mocks base method
func (m *MockFMSAPI) AssociateAdminAccountWithContext(arg0 context.Context, arg1 *fms.AssociateAdminAccountInput, arg2 ...request.Option) (*fms.AssociateAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*fms.AssociateAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAdminAccountWithContext indicates an expected call of AssociateAdminAccountWithContext
func (mr *MockFMSAPIMockRecorder) AssociateAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAdminAccountWithContext", reflect.TypeOf((*MockFMSAPI)(nil).AssociateAdminAccountWithContext), varargs...)
}

// DeleteNotificationChannel mocks base method
func (m *MockFMSAPI) DeleteNotificationChannel(arg0 *fms.DeleteNotificationChannelInput) (*fms.DeleteNotificationChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotificationChannel", arg0)
	ret0, _ := ret[0].(*fms.DeleteNotificationChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotificationChannel indicates an expected call of DeleteNotificationChannel
func (mr *MockFMSAPIMockRecorder) DeleteNotificationChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotificationChannel", reflect.TypeOf((*MockFMSAPI)(nil).DeleteNotificationChannel), arg0)
}

// DeleteNotificationChannelRequest mocks base method
func (m *MockFMSAPI) DeleteNotificationChannelRequest(arg0 *fms.DeleteNotificationChannelInput) (*request.Request, *fms.DeleteNotificationChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotificationChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.DeleteNotificationChannelOutput)
	return ret0, ret1
}

// DeleteNotificationChannelRequest indicates an expected call of DeleteNotificationChannelRequest
func (mr *MockFMSAPIMockRecorder) DeleteNotificationChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotificationChannelRequest", reflect.TypeOf((*MockFMSAPI)(nil).DeleteNotificationChannelRequest), arg0)
}

// DeleteNotificationChannelWithContext mocks base method
func (m *MockFMSAPI) DeleteNotificationChannelWithContext(arg0 context.Context, arg1 *fms.DeleteNotificationChannelInput, arg2 ...request.Option) (*fms.DeleteNotificationChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNotificationChannelWithContext", varargs...)
	ret0, _ := ret[0].(*fms.DeleteNotificationChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotificationChannelWithContext indicates an expected call of DeleteNotificationChannelWithContext
func (mr *MockFMSAPIMockRecorder) DeleteNotificationChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotificationChannelWithContext", reflect.TypeOf((*MockFMSAPI)(nil).DeleteNotificationChannelWithContext), varargs...)
}

// DeletePolicy mocks base method
func (m *MockFMSAPI) DeletePolicy(arg0 *fms.DeletePolicyInput) (*fms.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0)
	ret0, _ := ret[0].(*fms.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockFMSAPIMockRecorder) DeletePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockFMSAPI)(nil).DeletePolicy), arg0)
}

// DeletePolicyRequest mocks base method
func (m *MockFMSAPI) DeletePolicyRequest(arg0 *fms.DeletePolicyInput) (*request.Request, *fms.DeletePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.DeletePolicyOutput)
	return ret0, ret1
}

// DeletePolicyRequest indicates an expected call of DeletePolicyRequest
func (mr *MockFMSAPIMockRecorder) DeletePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyRequest", reflect.TypeOf((*MockFMSAPI)(nil).DeletePolicyRequest), arg0)
}

// DeletePolicyWithContext mocks base method
func (m *MockFMSAPI) DeletePolicyWithContext(arg0 context.Context, arg1 *fms.DeletePolicyInput, arg2 ...request.Option) (*fms.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*fms.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyWithContext indicates an expected call of DeletePolicyWithContext
func (mr *MockFMSAPIMockRecorder) DeletePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyWithContext", reflect.TypeOf((*MockFMSAPI)(nil).DeletePolicyWithContext), varargs...)
}

// DisassociateAdminAccount mocks base method
func (m *MockFMSAPI) DisassociateAdminAccount(arg0 *fms.DisassociateAdminAccountInput) (*fms.DisassociateAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAdminAccount", arg0)
	ret0, _ := ret[0].(*fms.DisassociateAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAdminAccount indicates an expected call of DisassociateAdminAccount
func (mr *MockFMSAPIMockRecorder) DisassociateAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAdminAccount", reflect.TypeOf((*MockFMSAPI)(nil).DisassociateAdminAccount), arg0)
}

// DisassociateAdminAccountRequest mocks base method
func (m *MockFMSAPI) DisassociateAdminAccountRequest(arg0 *fms.DisassociateAdminAccountInput) (*request.Request, *fms.DisassociateAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.DisassociateAdminAccountOutput)
	return ret0, ret1
}

// DisassociateAdminAccountRequest indicates an expected call of DisassociateAdminAccountRequest
func (mr *MockFMSAPIMockRecorder) DisassociateAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAdminAccountRequest", reflect.TypeOf((*MockFMSAPI)(nil).DisassociateAdminAccountRequest), arg0)
}

// DisassociateAdminAccountWithContext mocks base method
func (m *MockFMSAPI) DisassociateAdminAccountWithContext(arg0 context.Context, arg1 *fms.DisassociateAdminAccountInput, arg2 ...request.Option) (*fms.DisassociateAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*fms.DisassociateAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAdminAccountWithContext indicates an expected call of DisassociateAdminAccountWithContext
func (mr *MockFMSAPIMockRecorder) DisassociateAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAdminAccountWithContext", reflect.TypeOf((*MockFMSAPI)(nil).DisassociateAdminAccountWithContext), varargs...)
}

// GetAdminAccount mocks base method
func (m *MockFMSAPI) GetAdminAccount(arg0 *fms.GetAdminAccountInput) (*fms.GetAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminAccount", arg0)
	ret0, _ := ret[0].(*fms.GetAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminAccount indicates an expected call of GetAdminAccount
func (mr *MockFMSAPIMockRecorder) GetAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminAccount", reflect.TypeOf((*MockFMSAPI)(nil).GetAdminAccount), arg0)
}

// GetAdminAccountRequest mocks base method
func (m *MockFMSAPI) GetAdminAccountRequest(arg0 *fms.GetAdminAccountInput) (*request.Request, *fms.GetAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.GetAdminAccountOutput)
	return ret0, ret1
}

// GetAdminAccountRequest indicates an expected call of GetAdminAccountRequest
func (mr *MockFMSAPIMockRecorder) GetAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminAccountRequest", reflect.TypeOf((*MockFMSAPI)(nil).GetAdminAccountRequest), arg0)
}

// GetAdminAccountWithContext mocks base method
func (m *MockFMSAPI) GetAdminAccountWithContext(arg0 context.Context, arg1 *fms.GetAdminAccountInput, arg2 ...request.Option) (*fms.GetAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*fms.GetAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminAccountWithContext indicates an expected call of GetAdminAccountWithContext
func (mr *MockFMSAPIMockRecorder) GetAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminAccountWithContext", reflect.TypeOf((*MockFMSAPI)(nil).GetAdminAccountWithContext), varargs...)
}

// GetComplianceDetail mocks base method
func (m *MockFMSAPI) GetComplianceDetail(arg0 *fms.GetComplianceDetailInput) (*fms.GetComplianceDetailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceDetail", arg0)
	ret0, _ := ret[0].(*fms.GetComplianceDetailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceDetail indicates an expected call of GetComplianceDetail
func (mr *MockFMSAPIMockRecorder) GetComplianceDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetail", reflect.TypeOf((*MockFMSAPI)(nil).GetComplianceDetail), arg0)
}

// GetComplianceDetailRequest mocks base method
func (m *MockFMSAPI) GetComplianceDetailRequest(arg0 *fms.GetComplianceDetailInput) (*request.Request, *fms.GetComplianceDetailOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplianceDetailRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.GetComplianceDetailOutput)
	return ret0, ret1
}

// GetComplianceDetailRequest indicates an expected call of GetComplianceDetailRequest
func (mr *MockFMSAPIMockRecorder) GetComplianceDetailRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetailRequest", reflect.TypeOf((*MockFMSAPI)(nil).GetComplianceDetailRequest), arg0)
}

// GetComplianceDetailWithContext mocks base method
func (m *MockFMSAPI) GetComplianceDetailWithContext(arg0 context.Context, arg1 *fms.GetComplianceDetailInput, arg2 ...request.Option) (*fms.GetComplianceDetailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplianceDetailWithContext", varargs...)
	ret0, _ := ret[0].(*fms.GetComplianceDetailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceDetailWithContext indicates an expected call of GetComplianceDetailWithContext
func (mr *MockFMSAPIMockRecorder) GetComplianceDetailWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetailWithContext", reflect.TypeOf((*MockFMSAPI)(nil).GetComplianceDetailWithContext), varargs...)
}

// GetNotificationChannel mocks base method
func (m *MockFMSAPI) GetNotificationChannel(arg0 *fms.GetNotificationChannelInput) (*fms.GetNotificationChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationChannel", arg0)
	ret0, _ := ret[0].(*fms.GetNotificationChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationChannel indicates an expected call of GetNotificationChannel
func (mr *MockFMSAPIMockRecorder) GetNotificationChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationChannel", reflect.TypeOf((*MockFMSAPI)(nil).GetNotificationChannel), arg0)
}

// GetNotificationChannelRequest mocks base method
func (m *MockFMSAPI) GetNotificationChannelRequest(arg0 *fms.GetNotificationChannelInput) (*request.Request, *fms.GetNotificationChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.GetNotificationChannelOutput)
	return ret0, ret1
}

// GetNotificationChannelRequest indicates an expected call of GetNotificationChannelRequest
func (mr *MockFMSAPIMockRecorder) GetNotificationChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationChannelRequest", reflect.TypeOf((*MockFMSAPI)(nil).GetNotificationChannelRequest), arg0)
}

// GetNotificationChannelWithContext mocks base method
func (m *MockFMSAPI) GetNotificationChannelWithContext(arg0 context.Context, arg1 *fms.GetNotificationChannelInput, arg2 ...request.Option) (*fms.GetNotificationChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNotificationChannelWithContext", varargs...)
	ret0, _ := ret[0].(*fms.GetNotificationChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationChannelWithContext indicates an expected call of GetNotificationChannelWithContext
func (mr *MockFMSAPIMockRecorder) GetNotificationChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationChannelWithContext", reflect.TypeOf((*MockFMSAPI)(nil).GetNotificationChannelWithContext), varargs...)
}

// GetPolicy mocks base method
func (m *MockFMSAPI) GetPolicy(arg0 *fms.GetPolicyInput) (*fms.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0)
	ret0, _ := ret[0].(*fms.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockFMSAPIMockRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockFMSAPI)(nil).GetPolicy), arg0)
}

// GetPolicyRequest mocks base method
func (m *MockFMSAPI) GetPolicyRequest(arg0 *fms.GetPolicyInput) (*request.Request, *fms.GetPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.GetPolicyOutput)
	return ret0, ret1
}

// GetPolicyRequest indicates an expected call of GetPolicyRequest
func (mr *MockFMSAPIMockRecorder) GetPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyRequest", reflect.TypeOf((*MockFMSAPI)(nil).GetPolicyRequest), arg0)
}

// GetPolicyWithContext mocks base method
func (m *MockFMSAPI) GetPolicyWithContext(arg0 context.Context, arg1 *fms.GetPolicyInput, arg2 ...request.Option) (*fms.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*fms.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyWithContext indicates an expected call of GetPolicyWithContext
func (mr *MockFMSAPIMockRecorder) GetPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyWithContext", reflect.TypeOf((*MockFMSAPI)(nil).GetPolicyWithContext), varargs...)
}

// ListComplianceStatus mocks base method
func (m *MockFMSAPI) ListComplianceStatus(arg0 *fms.ListComplianceStatusInput) (*fms.ListComplianceStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplianceStatus", arg0)
	ret0, _ := ret[0].(*fms.ListComplianceStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplianceStatus indicates an expected call of ListComplianceStatus
func (mr *MockFMSAPIMockRecorder) ListComplianceStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplianceStatus", reflect.TypeOf((*MockFMSAPI)(nil).ListComplianceStatus), arg0)
}

// ListComplianceStatusRequest mocks base method
func (m *MockFMSAPI) ListComplianceStatusRequest(arg0 *fms.ListComplianceStatusInput) (*request.Request, *fms.ListComplianceStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplianceStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.ListComplianceStatusOutput)
	return ret0, ret1
}

// ListComplianceStatusRequest indicates an expected call of ListComplianceStatusRequest
func (mr *MockFMSAPIMockRecorder) ListComplianceStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplianceStatusRequest", reflect.TypeOf((*MockFMSAPI)(nil).ListComplianceStatusRequest), arg0)
}

// ListComplianceStatusWithContext mocks base method
func (m *MockFMSAPI) ListComplianceStatusWithContext(arg0 context.Context, arg1 *fms.ListComplianceStatusInput, arg2 ...request.Option) (*fms.ListComplianceStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComplianceStatusWithContext", varargs...)
	ret0, _ := ret[0].(*fms.ListComplianceStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplianceStatusWithContext indicates an expected call of ListComplianceStatusWithContext
func (mr *MockFMSAPIMockRecorder) ListComplianceStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplianceStatusWithContext", reflect.TypeOf((*MockFMSAPI)(nil).ListComplianceStatusWithContext), varargs...)
}

// ListMemberAccounts mocks base method
func (m *MockFMSAPI) ListMemberAccounts(arg0 *fms.ListMemberAccountsInput) (*fms.ListMemberAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMemberAccounts", arg0)
	ret0, _ := ret[0].(*fms.ListMemberAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMemberAccounts indicates an expected call of ListMemberAccounts
func (mr *MockFMSAPIMockRecorder) ListMemberAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMemberAccounts", reflect.TypeOf((*MockFMSAPI)(nil).ListMemberAccounts), arg0)
}

// ListMemberAccountsRequest mocks base method
func (m *MockFMSAPI) ListMemberAccountsRequest(arg0 *fms.ListMemberAccountsInput) (*request.Request, *fms.ListMemberAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMemberAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.ListMemberAccountsOutput)
	return ret0, ret1
}

// ListMemberAccountsRequest indicates an expected call of ListMemberAccountsRequest
func (mr *MockFMSAPIMockRecorder) ListMemberAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMemberAccountsRequest", reflect.TypeOf((*MockFMSAPI)(nil).ListMemberAccountsRequest), arg0)
}

// ListMemberAccountsWithContext mocks base method
func (m *MockFMSAPI) ListMemberAccountsWithContext(arg0 context.Context, arg1 *fms.ListMemberAccountsInput, arg2 ...request.Option) (*fms.ListMemberAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMemberAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*fms.ListMemberAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMemberAccountsWithContext indicates an expected call of ListMemberAccountsWithContext
func (mr *MockFMSAPIMockRecorder) ListMemberAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMemberAccountsWithContext", reflect.TypeOf((*MockFMSAPI)(nil).ListMemberAccountsWithContext), varargs...)
}

// ListPolicies mocks base method
func (m *MockFMSAPI) ListPolicies(arg0 *fms.ListPoliciesInput) (*fms.ListPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicies", arg0)
	ret0, _ := ret[0].(*fms.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies
func (mr *MockFMSAPIMockRecorder) ListPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockFMSAPI)(nil).ListPolicies), arg0)
}

// ListPoliciesRequest mocks base method
func (m *MockFMSAPI) ListPoliciesRequest(arg0 *fms.ListPoliciesInput) (*request.Request, *fms.ListPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.ListPoliciesOutput)
	return ret0, ret1
}

// ListPoliciesRequest indicates an expected call of ListPoliciesRequest
func (mr *MockFMSAPIMockRecorder) ListPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesRequest", reflect.TypeOf((*MockFMSAPI)(nil).ListPoliciesRequest), arg0)
}

// ListPoliciesWithContext mocks base method
func (m *MockFMSAPI) ListPoliciesWithContext(arg0 context.Context, arg1 *fms.ListPoliciesInput, arg2 ...request.Option) (*fms.ListPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*fms.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoliciesWithContext indicates an expected call of ListPoliciesWithContext
func (mr *MockFMSAPIMockRecorder) ListPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesWithContext", reflect.TypeOf((*MockFMSAPI)(nil).ListPoliciesWithContext), varargs...)
}

// PutNotificationChannel mocks base method
func (m *MockFMSAPI) PutNotificationChannel(arg0 *fms.PutNotificationChannelInput) (*fms.PutNotificationChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutNotificationChannel", arg0)
	ret0, _ := ret[0].(*fms.PutNotificationChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutNotificationChannel indicates an expected call of PutNotificationChannel
func (mr *MockFMSAPIMockRecorder) PutNotificationChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutNotificationChannel", reflect.TypeOf((*MockFMSAPI)(nil).PutNotificationChannel), arg0)
}

// PutNotificationChannelRequest mocks base method
func (m *MockFMSAPI) PutNotificationChannelRequest(arg0 *fms.PutNotificationChannelInput) (*request.Request, *fms.PutNotificationChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutNotificationChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.PutNotificationChannelOutput)
	return ret0, ret1
}

// PutNotificationChannelRequest indicates an expected call of PutNotificationChannelRequest
func (mr *MockFMSAPIMockRecorder) PutNotificationChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutNotificationChannelRequest", reflect.TypeOf((*MockFMSAPI)(nil).PutNotificationChannelRequest), arg0)
}

// PutNotificationChannelWithContext mocks base method
func (m *MockFMSAPI) PutNotificationChannelWithContext(arg0 context.Context, arg1 *fms.PutNotificationChannelInput, arg2 ...request.Option) (*fms.PutNotificationChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutNotificationChannelWithContext", varargs...)
	ret0, _ := ret[0].(*fms.PutNotificationChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutNotificationChannelWithContext indicates an expected call of PutNotificationChannelWithContext
func (mr *MockFMSAPIMockRecorder) PutNotificationChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutNotificationChannelWithContext", reflect.TypeOf((*MockFMSAPI)(nil).PutNotificationChannelWithContext), varargs...)
}

// PutPolicy mocks base method
func (m *MockFMSAPI) PutPolicy(arg0 *fms.PutPolicyInput) (*fms.PutPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPolicy", arg0)
	ret0, _ := ret[0].(*fms.PutPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPolicy indicates an expected call of PutPolicy
func (mr *MockFMSAPIMockRecorder) PutPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPolicy", reflect.TypeOf((*MockFMSAPI)(nil).PutPolicy), arg0)
}

// PutPolicyRequest mocks base method
func (m *MockFMSAPI) PutPolicyRequest(arg0 *fms.PutPolicyInput) (*request.Request, *fms.PutPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*fms.PutPolicyOutput)
	return ret0, ret1
}

// PutPolicyRequest indicates an expected call of PutPolicyRequest
func (mr *MockFMSAPIMockRecorder) PutPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPolicyRequest", reflect.TypeOf((*MockFMSAPI)(nil).PutPolicyRequest), arg0)
}

// PutPolicyWithContext mocks base method
func (m *MockFMSAPI) PutPolicyWithContext(arg0 context.Context, arg1 *fms.PutPolicyInput, arg2 ...request.Option) (*fms.PutPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*fms.PutPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPolicyWithContext indicates an expected call of PutPolicyWithContext
func (mr *MockFMSAPIMockRecorder) PutPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPolicyWithContext", reflect.TypeOf((*MockFMSAPI)(nil).PutPolicyWithContext), varargs...)
}
