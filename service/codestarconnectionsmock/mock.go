// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/codestarconnections/codestarconnectionsiface (interfaces: CodeStarConnectionsAPI)

// Package codestarconnectionsmock is a generated GoMock package.
package codestarconnectionsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	codestarconnections "github.com/aws/aws-sdk-go/service/codestarconnections"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCodeStarConnectionsAPI is a mock of CodeStarConnectionsAPI interface
type MockCodeStarConnectionsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCodeStarConnectionsAPIMockRecorder
}

// MockCodeStarConnectionsAPIMockRecorder is the mock recorder for MockCodeStarConnectionsAPI
type MockCodeStarConnectionsAPIMockRecorder struct {
	mock *MockCodeStarConnectionsAPI
}

// NewMockCodeStarConnectionsAPI creates a new mock instance
func NewMockCodeStarConnectionsAPI(ctrl *gomock.Controller) *MockCodeStarConnectionsAPI {
	mock := &MockCodeStarConnectionsAPI{ctrl: ctrl}
	mock.recorder = &MockCodeStarConnectionsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeStarConnectionsAPI) EXPECT() *MockCodeStarConnectionsAPIMockRecorder {
	return m.recorder
}

// CreateConnection mocks base method
func (m *MockCodeStarConnectionsAPI) CreateConnection(arg0 *codestarconnections.CreateConnectionInput) (*codestarconnections.CreateConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", arg0)
	ret0, _ := ret[0].(*codestarconnections.CreateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnection indicates an expected call of CreateConnection
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateConnection), arg0)
}

// CreateConnectionRequest mocks base method
func (m *MockCodeStarConnectionsAPI) CreateConnectionRequest(arg0 *codestarconnections.CreateConnectionInput) (*request.Request, *codestarconnections.CreateConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.CreateConnectionOutput)
	return ret0, ret1
}

// CreateConnectionRequest indicates an expected call of CreateConnectionRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateConnectionRequest), arg0)
}

// CreateConnectionWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) CreateConnectionWithContext(arg0 context.Context, arg1 *codestarconnections.CreateConnectionInput, arg2 ...request.Option) (*codestarconnections.CreateConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.CreateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectionWithContext indicates an expected call of CreateConnectionWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateConnectionWithContext), varargs...)
}

// CreateHost mocks base method
func (m *MockCodeStarConnectionsAPI) CreateHost(arg0 *codestarconnections.CreateHostInput) (*codestarconnections.CreateHostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHost", arg0)
	ret0, _ := ret[0].(*codestarconnections.CreateHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHost indicates an expected call of CreateHost
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHost", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateHost), arg0)
}

// CreateHostRequest mocks base method
func (m *MockCodeStarConnectionsAPI) CreateHostRequest(arg0 *codestarconnections.CreateHostInput) (*request.Request, *codestarconnections.CreateHostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.CreateHostOutput)
	return ret0, ret1
}

// CreateHostRequest indicates an expected call of CreateHostRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateHostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateHostRequest), arg0)
}

// CreateHostWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) CreateHostWithContext(arg0 context.Context, arg1 *codestarconnections.CreateHostInput, arg2 ...request.Option) (*codestarconnections.CreateHostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHostWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.CreateHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostWithContext indicates an expected call of CreateHostWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateHostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateHostWithContext), varargs...)
}

// CreateRepositoryLink mocks base method
func (m *MockCodeStarConnectionsAPI) CreateRepositoryLink(arg0 *codestarconnections.CreateRepositoryLinkInput) (*codestarconnections.CreateRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepositoryLink", arg0)
	ret0, _ := ret[0].(*codestarconnections.CreateRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepositoryLink indicates an expected call of CreateRepositoryLink
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateRepositoryLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryLink", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateRepositoryLink), arg0)
}

// CreateRepositoryLinkRequest mocks base method
func (m *MockCodeStarConnectionsAPI) CreateRepositoryLinkRequest(arg0 *codestarconnections.CreateRepositoryLinkInput) (*request.Request, *codestarconnections.CreateRepositoryLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepositoryLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.CreateRepositoryLinkOutput)
	return ret0, ret1
}

// CreateRepositoryLinkRequest indicates an expected call of CreateRepositoryLinkRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateRepositoryLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryLinkRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateRepositoryLinkRequest), arg0)
}

// CreateRepositoryLinkWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) CreateRepositoryLinkWithContext(arg0 context.Context, arg1 *codestarconnections.CreateRepositoryLinkInput, arg2 ...request.Option) (*codestarconnections.CreateRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRepositoryLinkWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.CreateRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepositoryLinkWithContext indicates an expected call of CreateRepositoryLinkWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateRepositoryLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryLinkWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateRepositoryLinkWithContext), varargs...)
}

// CreateSyncConfiguration mocks base method
func (m *MockCodeStarConnectionsAPI) CreateSyncConfiguration(arg0 *codestarconnections.CreateSyncConfigurationInput) (*codestarconnections.CreateSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncConfiguration", arg0)
	ret0, _ := ret[0].(*codestarconnections.CreateSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSyncConfiguration indicates an expected call of CreateSyncConfiguration
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateSyncConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncConfiguration", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateSyncConfiguration), arg0)
}

// CreateSyncConfigurationRequest mocks base method
func (m *MockCodeStarConnectionsAPI) CreateSyncConfigurationRequest(arg0 *codestarconnections.CreateSyncConfigurationInput) (*request.Request, *codestarconnections.CreateSyncConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.CreateSyncConfigurationOutput)
	return ret0, ret1
}

// CreateSyncConfigurationRequest indicates an expected call of CreateSyncConfigurationRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateSyncConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncConfigurationRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateSyncConfigurationRequest), arg0)
}

// CreateSyncConfigurationWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) CreateSyncConfigurationWithContext(arg0 context.Context, arg1 *codestarconnections.CreateSyncConfigurationInput, arg2 ...request.Option) (*codestarconnections.CreateSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSyncConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.CreateSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSyncConfigurationWithContext indicates an expected call of CreateSyncConfigurationWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) CreateSyncConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncConfigurationWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).CreateSyncConfigurationWithContext), varargs...)
}

// DeleteConnection mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteConnection(arg0 *codestarconnections.DeleteConnectionInput) (*codestarconnections.DeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnection", arg0)
	ret0, _ := ret[0].(*codestarconnections.DeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnection indicates an expected call of DeleteConnection
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnection", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteConnection), arg0)
}

// DeleteConnectionRequest mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteConnectionRequest(arg0 *codestarconnections.DeleteConnectionInput) (*request.Request, *codestarconnections.DeleteConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.DeleteConnectionOutput)
	return ret0, ret1
}

// DeleteConnectionRequest indicates an expected call of DeleteConnectionRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteConnectionRequest), arg0)
}

// DeleteConnectionWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteConnectionWithContext(arg0 context.Context, arg1 *codestarconnections.DeleteConnectionInput, arg2 ...request.Option) (*codestarconnections.DeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.DeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectionWithContext indicates an expected call of DeleteConnectionWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteConnectionWithContext), varargs...)
}

// DeleteHost mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteHost(arg0 *codestarconnections.DeleteHostInput) (*codestarconnections.DeleteHostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", arg0)
	ret0, _ := ret[0].(*codestarconnections.DeleteHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHost indicates an expected call of DeleteHost
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteHost), arg0)
}

// DeleteHostRequest mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteHostRequest(arg0 *codestarconnections.DeleteHostInput) (*request.Request, *codestarconnections.DeleteHostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.DeleteHostOutput)
	return ret0, ret1
}

// DeleteHostRequest indicates an expected call of DeleteHostRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteHostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteHostRequest), arg0)
}

// DeleteHostWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteHostWithContext(arg0 context.Context, arg1 *codestarconnections.DeleteHostInput, arg2 ...request.Option) (*codestarconnections.DeleteHostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHostWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.DeleteHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHostWithContext indicates an expected call of DeleteHostWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteHostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteHostWithContext), varargs...)
}

// DeleteRepositoryLink mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteRepositoryLink(arg0 *codestarconnections.DeleteRepositoryLinkInput) (*codestarconnections.DeleteRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryLink", arg0)
	ret0, _ := ret[0].(*codestarconnections.DeleteRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositoryLink indicates an expected call of DeleteRepositoryLink
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteRepositoryLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryLink", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteRepositoryLink), arg0)
}

// DeleteRepositoryLinkRequest mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteRepositoryLinkRequest(arg0 *codestarconnections.DeleteRepositoryLinkInput) (*request.Request, *codestarconnections.DeleteRepositoryLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.DeleteRepositoryLinkOutput)
	return ret0, ret1
}

// DeleteRepositoryLinkRequest indicates an expected call of DeleteRepositoryLinkRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteRepositoryLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryLinkRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteRepositoryLinkRequest), arg0)
}

// DeleteRepositoryLinkWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteRepositoryLinkWithContext(arg0 context.Context, arg1 *codestarconnections.DeleteRepositoryLinkInput, arg2 ...request.Option) (*codestarconnections.DeleteRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRepositoryLinkWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.DeleteRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositoryLinkWithContext indicates an expected call of DeleteRepositoryLinkWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteRepositoryLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryLinkWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteRepositoryLinkWithContext), varargs...)
}

// DeleteSyncConfiguration mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteSyncConfiguration(arg0 *codestarconnections.DeleteSyncConfigurationInput) (*codestarconnections.DeleteSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSyncConfiguration", arg0)
	ret0, _ := ret[0].(*codestarconnections.DeleteSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSyncConfiguration indicates an expected call of DeleteSyncConfiguration
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteSyncConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSyncConfiguration", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteSyncConfiguration), arg0)
}

// DeleteSyncConfigurationRequest mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteSyncConfigurationRequest(arg0 *codestarconnections.DeleteSyncConfigurationInput) (*request.Request, *codestarconnections.DeleteSyncConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSyncConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.DeleteSyncConfigurationOutput)
	return ret0, ret1
}

// DeleteSyncConfigurationRequest indicates an expected call of DeleteSyncConfigurationRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteSyncConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSyncConfigurationRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteSyncConfigurationRequest), arg0)
}

// DeleteSyncConfigurationWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) DeleteSyncConfigurationWithContext(arg0 context.Context, arg1 *codestarconnections.DeleteSyncConfigurationInput, arg2 ...request.Option) (*codestarconnections.DeleteSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSyncConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.DeleteSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSyncConfigurationWithContext indicates an expected call of DeleteSyncConfigurationWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) DeleteSyncConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSyncConfigurationWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).DeleteSyncConfigurationWithContext), varargs...)
}

// GetConnection mocks base method
func (m *MockCodeStarConnectionsAPI) GetConnection(arg0 *codestarconnections.GetConnectionInput) (*codestarconnections.GetConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", arg0)
	ret0, _ := ret[0].(*codestarconnections.GetConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetConnection), arg0)
}

// GetConnectionRequest mocks base method
func (m *MockCodeStarConnectionsAPI) GetConnectionRequest(arg0 *codestarconnections.GetConnectionInput) (*request.Request, *codestarconnections.GetConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.GetConnectionOutput)
	return ret0, ret1
}

// GetConnectionRequest indicates an expected call of GetConnectionRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetConnectionRequest), arg0)
}

// GetConnectionWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) GetConnectionWithContext(arg0 context.Context, arg1 *codestarconnections.GetConnectionInput, arg2 ...request.Option) (*codestarconnections.GetConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.GetConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionWithContext indicates an expected call of GetConnectionWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetConnectionWithContext), varargs...)
}

// GetHost mocks base method
func (m *MockCodeStarConnectionsAPI) GetHost(arg0 *codestarconnections.GetHostInput) (*codestarconnections.GetHostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", arg0)
	ret0, _ := ret[0].(*codestarconnections.GetHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetHost), arg0)
}

// GetHostRequest mocks base method
func (m *MockCodeStarConnectionsAPI) GetHostRequest(arg0 *codestarconnections.GetHostInput) (*request.Request, *codestarconnections.GetHostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.GetHostOutput)
	return ret0, ret1
}

// GetHostRequest indicates an expected call of GetHostRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetHostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetHostRequest), arg0)
}

// GetHostWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) GetHostWithContext(arg0 context.Context, arg1 *codestarconnections.GetHostInput, arg2 ...request.Option) (*codestarconnections.GetHostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.GetHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostWithContext indicates an expected call of GetHostWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetHostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetHostWithContext), varargs...)
}

// GetRepositoryLink mocks base method
func (m *MockCodeStarConnectionsAPI) GetRepositoryLink(arg0 *codestarconnections.GetRepositoryLinkInput) (*codestarconnections.GetRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryLink", arg0)
	ret0, _ := ret[0].(*codestarconnections.GetRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryLink indicates an expected call of GetRepositoryLink
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetRepositoryLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryLink", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetRepositoryLink), arg0)
}

// GetRepositoryLinkRequest mocks base method
func (m *MockCodeStarConnectionsAPI) GetRepositoryLinkRequest(arg0 *codestarconnections.GetRepositoryLinkInput) (*request.Request, *codestarconnections.GetRepositoryLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.GetRepositoryLinkOutput)
	return ret0, ret1
}

// GetRepositoryLinkRequest indicates an expected call of GetRepositoryLinkRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetRepositoryLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryLinkRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetRepositoryLinkRequest), arg0)
}

// GetRepositoryLinkWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) GetRepositoryLinkWithContext(arg0 context.Context, arg1 *codestarconnections.GetRepositoryLinkInput, arg2 ...request.Option) (*codestarconnections.GetRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepositoryLinkWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.GetRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryLinkWithContext indicates an expected call of GetRepositoryLinkWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetRepositoryLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryLinkWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetRepositoryLinkWithContext), varargs...)
}

// GetRepositorySyncStatus mocks base method
func (m *MockCodeStarConnectionsAPI) GetRepositorySyncStatus(arg0 *codestarconnections.GetRepositorySyncStatusInput) (*codestarconnections.GetRepositorySyncStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositorySyncStatus", arg0)
	ret0, _ := ret[0].(*codestarconnections.GetRepositorySyncStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositorySyncStatus indicates an expected call of GetRepositorySyncStatus
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetRepositorySyncStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositorySyncStatus", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetRepositorySyncStatus), arg0)
}

// GetRepositorySyncStatusRequest mocks base method
func (m *MockCodeStarConnectionsAPI) GetRepositorySyncStatusRequest(arg0 *codestarconnections.GetRepositorySyncStatusInput) (*request.Request, *codestarconnections.GetRepositorySyncStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositorySyncStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.GetRepositorySyncStatusOutput)
	return ret0, ret1
}

// GetRepositorySyncStatusRequest indicates an expected call of GetRepositorySyncStatusRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetRepositorySyncStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositorySyncStatusRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetRepositorySyncStatusRequest), arg0)
}

// GetRepositorySyncStatusWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) GetRepositorySyncStatusWithContext(arg0 context.Context, arg1 *codestarconnections.GetRepositorySyncStatusInput, arg2 ...request.Option) (*codestarconnections.GetRepositorySyncStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepositorySyncStatusWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.GetRepositorySyncStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositorySyncStatusWithContext indicates an expected call of GetRepositorySyncStatusWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetRepositorySyncStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositorySyncStatusWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetRepositorySyncStatusWithContext), varargs...)
}

// GetResourceSyncStatus mocks base method
func (m *MockCodeStarConnectionsAPI) GetResourceSyncStatus(arg0 *codestarconnections.GetResourceSyncStatusInput) (*codestarconnections.GetResourceSyncStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceSyncStatus", arg0)
	ret0, _ := ret[0].(*codestarconnections.GetResourceSyncStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceSyncStatus indicates an expected call of GetResourceSyncStatus
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetResourceSyncStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSyncStatus", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetResourceSyncStatus), arg0)
}

// GetResourceSyncStatusRequest mocks base method
func (m *MockCodeStarConnectionsAPI) GetResourceSyncStatusRequest(arg0 *codestarconnections.GetResourceSyncStatusInput) (*request.Request, *codestarconnections.GetResourceSyncStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceSyncStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.GetResourceSyncStatusOutput)
	return ret0, ret1
}

// GetResourceSyncStatusRequest indicates an expected call of GetResourceSyncStatusRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetResourceSyncStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSyncStatusRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetResourceSyncStatusRequest), arg0)
}

// GetResourceSyncStatusWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) GetResourceSyncStatusWithContext(arg0 context.Context, arg1 *codestarconnections.GetResourceSyncStatusInput, arg2 ...request.Option) (*codestarconnections.GetResourceSyncStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceSyncStatusWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.GetResourceSyncStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceSyncStatusWithContext indicates an expected call of GetResourceSyncStatusWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetResourceSyncStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSyncStatusWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetResourceSyncStatusWithContext), varargs...)
}

// GetSyncBlockerSummary mocks base method
func (m *MockCodeStarConnectionsAPI) GetSyncBlockerSummary(arg0 *codestarconnections.GetSyncBlockerSummaryInput) (*codestarconnections.GetSyncBlockerSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncBlockerSummary", arg0)
	ret0, _ := ret[0].(*codestarconnections.GetSyncBlockerSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncBlockerSummary indicates an expected call of GetSyncBlockerSummary
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetSyncBlockerSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncBlockerSummary", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetSyncBlockerSummary), arg0)
}

// GetSyncBlockerSummaryRequest mocks base method
func (m *MockCodeStarConnectionsAPI) GetSyncBlockerSummaryRequest(arg0 *codestarconnections.GetSyncBlockerSummaryInput) (*request.Request, *codestarconnections.GetSyncBlockerSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncBlockerSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.GetSyncBlockerSummaryOutput)
	return ret0, ret1
}

// GetSyncBlockerSummaryRequest indicates an expected call of GetSyncBlockerSummaryRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetSyncBlockerSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncBlockerSummaryRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetSyncBlockerSummaryRequest), arg0)
}

// GetSyncBlockerSummaryWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) GetSyncBlockerSummaryWithContext(arg0 context.Context, arg1 *codestarconnections.GetSyncBlockerSummaryInput, arg2 ...request.Option) (*codestarconnections.GetSyncBlockerSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSyncBlockerSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.GetSyncBlockerSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncBlockerSummaryWithContext indicates an expected call of GetSyncBlockerSummaryWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetSyncBlockerSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncBlockerSummaryWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetSyncBlockerSummaryWithContext), varargs...)
}

// GetSyncConfiguration mocks base method
func (m *MockCodeStarConnectionsAPI) GetSyncConfiguration(arg0 *codestarconnections.GetSyncConfigurationInput) (*codestarconnections.GetSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncConfiguration", arg0)
	ret0, _ := ret[0].(*codestarconnections.GetSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncConfiguration indicates an expected call of GetSyncConfiguration
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetSyncConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncConfiguration", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetSyncConfiguration), arg0)
}

// GetSyncConfigurationRequest mocks base method
func (m *MockCodeStarConnectionsAPI) GetSyncConfigurationRequest(arg0 *codestarconnections.GetSyncConfigurationInput) (*request.Request, *codestarconnections.GetSyncConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.GetSyncConfigurationOutput)
	return ret0, ret1
}

// GetSyncConfigurationRequest indicates an expected call of GetSyncConfigurationRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetSyncConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncConfigurationRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetSyncConfigurationRequest), arg0)
}

// GetSyncConfigurationWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) GetSyncConfigurationWithContext(arg0 context.Context, arg1 *codestarconnections.GetSyncConfigurationInput, arg2 ...request.Option) (*codestarconnections.GetSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSyncConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.GetSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncConfigurationWithContext indicates an expected call of GetSyncConfigurationWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) GetSyncConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncConfigurationWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).GetSyncConfigurationWithContext), varargs...)
}

// ListConnections mocks base method
func (m *MockCodeStarConnectionsAPI) ListConnections(arg0 *codestarconnections.ListConnectionsInput) (*codestarconnections.ListConnectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnections", arg0)
	ret0, _ := ret[0].(*codestarconnections.ListConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnections indicates an expected call of ListConnections
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnections", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListConnections), arg0)
}

// ListConnectionsPages mocks base method
func (m *MockCodeStarConnectionsAPI) ListConnectionsPages(arg0 *codestarconnections.ListConnectionsInput, arg1 func(*codestarconnections.ListConnectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectionsPages indicates an expected call of ListConnectionsPages
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListConnectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsPages", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListConnectionsPages), arg0, arg1)
}

// ListConnectionsPagesWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) ListConnectionsPagesWithContext(arg0 context.Context, arg1 *codestarconnections.ListConnectionsInput, arg2 func(*codestarconnections.ListConnectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectionsPagesWithContext indicates an expected call of ListConnectionsPagesWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListConnectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsPagesWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListConnectionsPagesWithContext), varargs...)
}

// ListConnectionsRequest mocks base method
func (m *MockCodeStarConnectionsAPI) ListConnectionsRequest(arg0 *codestarconnections.ListConnectionsInput) (*request.Request, *codestarconnections.ListConnectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.ListConnectionsOutput)
	return ret0, ret1
}

// ListConnectionsRequest indicates an expected call of ListConnectionsRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListConnectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListConnectionsRequest), arg0)
}

// ListConnectionsWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) ListConnectionsWithContext(arg0 context.Context, arg1 *codestarconnections.ListConnectionsInput, arg2 ...request.Option) (*codestarconnections.ListConnectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectionsWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.ListConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectionsWithContext indicates an expected call of ListConnectionsWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListConnectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListConnectionsWithContext), varargs...)
}

// ListHosts mocks base method
func (m *MockCodeStarConnectionsAPI) ListHosts(arg0 *codestarconnections.ListHostsInput) (*codestarconnections.ListHostsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHosts", arg0)
	ret0, _ := ret[0].(*codestarconnections.ListHostsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHosts indicates an expected call of ListHosts
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListHosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHosts", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListHosts), arg0)
}

// ListHostsPages mocks base method
func (m *MockCodeStarConnectionsAPI) ListHostsPages(arg0 *codestarconnections.ListHostsInput, arg1 func(*codestarconnections.ListHostsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHostsPages indicates an expected call of ListHostsPages
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListHostsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostsPages", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListHostsPages), arg0, arg1)
}

// ListHostsPagesWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) ListHostsPagesWithContext(arg0 context.Context, arg1 *codestarconnections.ListHostsInput, arg2 func(*codestarconnections.ListHostsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHostsPagesWithContext indicates an expected call of ListHostsPagesWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListHostsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostsPagesWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListHostsPagesWithContext), varargs...)
}

// ListHostsRequest mocks base method
func (m *MockCodeStarConnectionsAPI) ListHostsRequest(arg0 *codestarconnections.ListHostsInput) (*request.Request, *codestarconnections.ListHostsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.ListHostsOutput)
	return ret0, ret1
}

// ListHostsRequest indicates an expected call of ListHostsRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListHostsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostsRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListHostsRequest), arg0)
}

// ListHostsWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) ListHostsWithContext(arg0 context.Context, arg1 *codestarconnections.ListHostsInput, arg2 ...request.Option) (*codestarconnections.ListHostsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostsWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.ListHostsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostsWithContext indicates an expected call of ListHostsWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListHostsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostsWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListHostsWithContext), varargs...)
}

// ListRepositoryLinks mocks base method
func (m *MockCodeStarConnectionsAPI) ListRepositoryLinks(arg0 *codestarconnections.ListRepositoryLinksInput) (*codestarconnections.ListRepositoryLinksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryLinks", arg0)
	ret0, _ := ret[0].(*codestarconnections.ListRepositoryLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryLinks indicates an expected call of ListRepositoryLinks
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListRepositoryLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryLinks", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListRepositoryLinks), arg0)
}

// ListRepositoryLinksPages mocks base method
func (m *MockCodeStarConnectionsAPI) ListRepositoryLinksPages(arg0 *codestarconnections.ListRepositoryLinksInput, arg1 func(*codestarconnections.ListRepositoryLinksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryLinksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRepositoryLinksPages indicates an expected call of ListRepositoryLinksPages
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListRepositoryLinksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryLinksPages", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListRepositoryLinksPages), arg0, arg1)
}

// ListRepositoryLinksPagesWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) ListRepositoryLinksPagesWithContext(arg0 context.Context, arg1 *codestarconnections.ListRepositoryLinksInput, arg2 func(*codestarconnections.ListRepositoryLinksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositoryLinksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRepositoryLinksPagesWithContext indicates an expected call of ListRepositoryLinksPagesWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListRepositoryLinksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryLinksPagesWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListRepositoryLinksPagesWithContext), varargs...)
}

// ListRepositoryLinksRequest mocks base method
func (m *MockCodeStarConnectionsAPI) ListRepositoryLinksRequest(arg0 *codestarconnections.ListRepositoryLinksInput) (*request.Request, *codestarconnections.ListRepositoryLinksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryLinksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.ListRepositoryLinksOutput)
	return ret0, ret1
}

// ListRepositoryLinksRequest indicates an expected call of ListRepositoryLinksRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListRepositoryLinksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryLinksRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListRepositoryLinksRequest), arg0)
}

// ListRepositoryLinksWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) ListRepositoryLinksWithContext(arg0 context.Context, arg1 *codestarconnections.ListRepositoryLinksInput, arg2 ...request.Option) (*codestarconnections.ListRepositoryLinksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositoryLinksWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.ListRepositoryLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryLinksWithContext indicates an expected call of ListRepositoryLinksWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListRepositoryLinksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryLinksWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListRepositoryLinksWithContext), varargs...)
}

// ListRepositorySyncDefinitions mocks base method
func (m *MockCodeStarConnectionsAPI) ListRepositorySyncDefinitions(arg0 *codestarconnections.ListRepositorySyncDefinitionsInput) (*codestarconnections.ListRepositorySyncDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositorySyncDefinitions", arg0)
	ret0, _ := ret[0].(*codestarconnections.ListRepositorySyncDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositorySyncDefinitions indicates an expected call of ListRepositorySyncDefinitions
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListRepositorySyncDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositorySyncDefinitions", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListRepositorySyncDefinitions), arg0)
}

// ListRepositorySyncDefinitionsRequest mocks base method
func (m *MockCodeStarConnectionsAPI) ListRepositorySyncDefinitionsRequest(arg0 *codestarconnections.ListRepositorySyncDefinitionsInput) (*request.Request, *codestarconnections.ListRepositorySyncDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositorySyncDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.ListRepositorySyncDefinitionsOutput)
	return ret0, ret1
}

// ListRepositorySyncDefinitionsRequest indicates an expected call of ListRepositorySyncDefinitionsRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListRepositorySyncDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositorySyncDefinitionsRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListRepositorySyncDefinitionsRequest), arg0)
}

// ListRepositorySyncDefinitionsWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) ListRepositorySyncDefinitionsWithContext(arg0 context.Context, arg1 *codestarconnections.ListRepositorySyncDefinitionsInput, arg2 ...request.Option) (*codestarconnections.ListRepositorySyncDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositorySyncDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.ListRepositorySyncDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositorySyncDefinitionsWithContext indicates an expected call of ListRepositorySyncDefinitionsWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListRepositorySyncDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositorySyncDefinitionsWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListRepositorySyncDefinitionsWithContext), varargs...)
}

// ListSyncConfigurations mocks base method
func (m *MockCodeStarConnectionsAPI) ListSyncConfigurations(arg0 *codestarconnections.ListSyncConfigurationsInput) (*codestarconnections.ListSyncConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncConfigurations", arg0)
	ret0, _ := ret[0].(*codestarconnections.ListSyncConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncConfigurations indicates an expected call of ListSyncConfigurations
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListSyncConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncConfigurations", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListSyncConfigurations), arg0)
}

// ListSyncConfigurationsPages mocks base method
func (m *MockCodeStarConnectionsAPI) ListSyncConfigurationsPages(arg0 *codestarconnections.ListSyncConfigurationsInput, arg1 func(*codestarconnections.ListSyncConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSyncConfigurationsPages indicates an expected call of ListSyncConfigurationsPages
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListSyncConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncConfigurationsPages", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListSyncConfigurationsPages), arg0, arg1)
}

// ListSyncConfigurationsPagesWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) ListSyncConfigurationsPagesWithContext(arg0 context.Context, arg1 *codestarconnections.ListSyncConfigurationsInput, arg2 func(*codestarconnections.ListSyncConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSyncConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSyncConfigurationsPagesWithContext indicates an expected call of ListSyncConfigurationsPagesWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListSyncConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncConfigurationsPagesWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListSyncConfigurationsPagesWithContext), varargs...)
}

// ListSyncConfigurationsRequest mocks base method
func (m *MockCodeStarConnectionsAPI) ListSyncConfigurationsRequest(arg0 *codestarconnections.ListSyncConfigurationsInput) (*request.Request, *codestarconnections.ListSyncConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.ListSyncConfigurationsOutput)
	return ret0, ret1
}

// ListSyncConfigurationsRequest indicates an expected call of ListSyncConfigurationsRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListSyncConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncConfigurationsRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListSyncConfigurationsRequest), arg0)
}

// ListSyncConfigurationsWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) ListSyncConfigurationsWithContext(arg0 context.Context, arg1 *codestarconnections.ListSyncConfigurationsInput, arg2 ...request.Option) (*codestarconnections.ListSyncConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSyncConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.ListSyncConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncConfigurationsWithContext indicates an expected call of ListSyncConfigurationsWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListSyncConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncConfigurationsWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListSyncConfigurationsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCodeStarConnectionsAPI) ListTagsForResource(arg0 *codestarconnections.ListTagsForResourceInput) (*codestarconnections.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*codestarconnections.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCodeStarConnectionsAPI) ListTagsForResourceRequest(arg0 *codestarconnections.ListTagsForResourceInput) (*request.Request, *codestarconnections.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *codestarconnections.ListTagsForResourceInput, arg2 ...request.Option) (*codestarconnections.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCodeStarConnectionsAPI) TagResource(arg0 *codestarconnections.TagResourceInput) (*codestarconnections.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*codestarconnections.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCodeStarConnectionsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCodeStarConnectionsAPI) TagResourceRequest(arg0 *codestarconnections.TagResourceInput) (*request.Request, *codestarconnections.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) TagResourceWithContext(arg0 context.Context, arg1 *codestarconnections.TagResourceInput, arg2 ...request.Option) (*codestarconnections.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCodeStarConnectionsAPI) UntagResource(arg0 *codestarconnections.UntagResourceInput) (*codestarconnections.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*codestarconnections.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCodeStarConnectionsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCodeStarConnectionsAPI) UntagResourceRequest(arg0 *codestarconnections.UntagResourceInput) (*request.Request, *codestarconnections.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *codestarconnections.UntagResourceInput, arg2 ...request.Option) (*codestarconnections.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateHost mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateHost(arg0 *codestarconnections.UpdateHostInput) (*codestarconnections.UpdateHostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHost", arg0)
	ret0, _ := ret[0].(*codestarconnections.UpdateHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHost indicates an expected call of UpdateHost
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHost", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateHost), arg0)
}

// UpdateHostRequest mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateHostRequest(arg0 *codestarconnections.UpdateHostInput) (*request.Request, *codestarconnections.UpdateHostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.UpdateHostOutput)
	return ret0, ret1
}

// UpdateHostRequest indicates an expected call of UpdateHostRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateHostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateHostRequest), arg0)
}

// UpdateHostWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateHostWithContext(arg0 context.Context, arg1 *codestarconnections.UpdateHostInput, arg2 ...request.Option) (*codestarconnections.UpdateHostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHostWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.UpdateHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostWithContext indicates an expected call of UpdateHostWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateHostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateHostWithContext), varargs...)
}

// UpdateRepositoryLink mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateRepositoryLink(arg0 *codestarconnections.UpdateRepositoryLinkInput) (*codestarconnections.UpdateRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryLink", arg0)
	ret0, _ := ret[0].(*codestarconnections.UpdateRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepositoryLink indicates an expected call of UpdateRepositoryLink
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateRepositoryLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryLink", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateRepositoryLink), arg0)
}

// UpdateRepositoryLinkRequest mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateRepositoryLinkRequest(arg0 *codestarconnections.UpdateRepositoryLinkInput) (*request.Request, *codestarconnections.UpdateRepositoryLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.UpdateRepositoryLinkOutput)
	return ret0, ret1
}

// UpdateRepositoryLinkRequest indicates an expected call of UpdateRepositoryLinkRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateRepositoryLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryLinkRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateRepositoryLinkRequest), arg0)
}

// UpdateRepositoryLinkWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateRepositoryLinkWithContext(arg0 context.Context, arg1 *codestarconnections.UpdateRepositoryLinkInput, arg2 ...request.Option) (*codestarconnections.UpdateRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRepositoryLinkWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.UpdateRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepositoryLinkWithContext indicates an expected call of UpdateRepositoryLinkWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateRepositoryLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryLinkWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateRepositoryLinkWithContext), varargs...)
}

// UpdateSyncBlocker mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateSyncBlocker(arg0 *codestarconnections.UpdateSyncBlockerInput) (*codestarconnections.UpdateSyncBlockerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncBlocker", arg0)
	ret0, _ := ret[0].(*codestarconnections.UpdateSyncBlockerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncBlocker indicates an expected call of UpdateSyncBlocker
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateSyncBlocker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncBlocker", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateSyncBlocker), arg0)
}

// UpdateSyncBlockerRequest mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateSyncBlockerRequest(arg0 *codestarconnections.UpdateSyncBlockerInput) (*request.Request, *codestarconnections.UpdateSyncBlockerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncBlockerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.UpdateSyncBlockerOutput)
	return ret0, ret1
}

// UpdateSyncBlockerRequest indicates an expected call of UpdateSyncBlockerRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateSyncBlockerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncBlockerRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateSyncBlockerRequest), arg0)
}

// UpdateSyncBlockerWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateSyncBlockerWithContext(arg0 context.Context, arg1 *codestarconnections.UpdateSyncBlockerInput, arg2 ...request.Option) (*codestarconnections.UpdateSyncBlockerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSyncBlockerWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.UpdateSyncBlockerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncBlockerWithContext indicates an expected call of UpdateSyncBlockerWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateSyncBlockerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncBlockerWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateSyncBlockerWithContext), varargs...)
}

// UpdateSyncConfiguration mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateSyncConfiguration(arg0 *codestarconnections.UpdateSyncConfigurationInput) (*codestarconnections.UpdateSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncConfiguration", arg0)
	ret0, _ := ret[0].(*codestarconnections.UpdateSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncConfiguration indicates an expected call of UpdateSyncConfiguration
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateSyncConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncConfiguration", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateSyncConfiguration), arg0)
}

// UpdateSyncConfigurationRequest mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateSyncConfigurationRequest(arg0 *codestarconnections.UpdateSyncConfigurationInput) (*request.Request, *codestarconnections.UpdateSyncConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codestarconnections.UpdateSyncConfigurationOutput)
	return ret0, ret1
}

// UpdateSyncConfigurationRequest indicates an expected call of UpdateSyncConfigurationRequest
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateSyncConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncConfigurationRequest", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateSyncConfigurationRequest), arg0)
}

// UpdateSyncConfigurationWithContext mocks base method
func (m *MockCodeStarConnectionsAPI) UpdateSyncConfigurationWithContext(arg0 context.Context, arg1 *codestarconnections.UpdateSyncConfigurationInput, arg2 ...request.Option) (*codestarconnections.UpdateSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSyncConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codestarconnections.UpdateSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncConfigurationWithContext indicates an expected call of UpdateSyncConfigurationWithContext
func (mr *MockCodeStarConnectionsAPIMockRecorder) UpdateSyncConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncConfigurationWithContext", reflect.TypeOf((*MockCodeStarConnectionsAPI)(nil).UpdateSyncConfigurationWithContext), varargs...)
}
