// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/licensemanager/licensemanageriface (interfaces: LicenseManagerAPI)

// Package licensemanagermock is a generated GoMock package.
package licensemanagermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	licensemanager "github.com/aws/aws-sdk-go/service/licensemanager"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLicenseManagerAPI is a mock of LicenseManagerAPI interface
type MockLicenseManagerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseManagerAPIMockRecorder
}

// MockLicenseManagerAPIMockRecorder is the mock recorder for MockLicenseManagerAPI
type MockLicenseManagerAPIMockRecorder struct {
	mock *MockLicenseManagerAPI
}

// NewMockLicenseManagerAPI creates a new mock instance
func NewMockLicenseManagerAPI(ctrl *gomock.Controller) *MockLicenseManagerAPI {
	mock := &MockLicenseManagerAPI{ctrl: ctrl}
	mock.recorder = &MockLicenseManagerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLicenseManagerAPI) EXPECT() *MockLicenseManagerAPIMockRecorder {
	return m.recorder
}

// CreateLicenseConfiguration mocks base method
func (m *MockLicenseManagerAPI) CreateLicenseConfiguration(arg0 *licensemanager.CreateLicenseConfigurationInput) (*licensemanager.CreateLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLicenseConfiguration", arg0)
	ret0, _ := ret[0].(*licensemanager.CreateLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLicenseConfiguration indicates an expected call of CreateLicenseConfiguration
func (mr *MockLicenseManagerAPIMockRecorder) CreateLicenseConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLicenseConfiguration", reflect.TypeOf((*MockLicenseManagerAPI)(nil).CreateLicenseConfiguration), arg0)
}

// CreateLicenseConfigurationRequest mocks base method
func (m *MockLicenseManagerAPI) CreateLicenseConfigurationRequest(arg0 *licensemanager.CreateLicenseConfigurationInput) (*request.Request, *licensemanager.CreateLicenseConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLicenseConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.CreateLicenseConfigurationOutput)
	return ret0, ret1
}

// CreateLicenseConfigurationRequest indicates an expected call of CreateLicenseConfigurationRequest
func (mr *MockLicenseManagerAPIMockRecorder) CreateLicenseConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLicenseConfigurationRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).CreateLicenseConfigurationRequest), arg0)
}

// CreateLicenseConfigurationWithContext mocks base method
func (m *MockLicenseManagerAPI) CreateLicenseConfigurationWithContext(arg0 context.Context, arg1 *licensemanager.CreateLicenseConfigurationInput, arg2 ...request.Option) (*licensemanager.CreateLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLicenseConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.CreateLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLicenseConfigurationWithContext indicates an expected call of CreateLicenseConfigurationWithContext
func (mr *MockLicenseManagerAPIMockRecorder) CreateLicenseConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLicenseConfigurationWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).CreateLicenseConfigurationWithContext), varargs...)
}

// DeleteLicenseConfiguration mocks base method
func (m *MockLicenseManagerAPI) DeleteLicenseConfiguration(arg0 *licensemanager.DeleteLicenseConfigurationInput) (*licensemanager.DeleteLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLicenseConfiguration", arg0)
	ret0, _ := ret[0].(*licensemanager.DeleteLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLicenseConfiguration indicates an expected call of DeleteLicenseConfiguration
func (mr *MockLicenseManagerAPIMockRecorder) DeleteLicenseConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLicenseConfiguration", reflect.TypeOf((*MockLicenseManagerAPI)(nil).DeleteLicenseConfiguration), arg0)
}

// DeleteLicenseConfigurationRequest mocks base method
func (m *MockLicenseManagerAPI) DeleteLicenseConfigurationRequest(arg0 *licensemanager.DeleteLicenseConfigurationInput) (*request.Request, *licensemanager.DeleteLicenseConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLicenseConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.DeleteLicenseConfigurationOutput)
	return ret0, ret1
}

// DeleteLicenseConfigurationRequest indicates an expected call of DeleteLicenseConfigurationRequest
func (mr *MockLicenseManagerAPIMockRecorder) DeleteLicenseConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLicenseConfigurationRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).DeleteLicenseConfigurationRequest), arg0)
}

// DeleteLicenseConfigurationWithContext mocks base method
func (m *MockLicenseManagerAPI) DeleteLicenseConfigurationWithContext(arg0 context.Context, arg1 *licensemanager.DeleteLicenseConfigurationInput, arg2 ...request.Option) (*licensemanager.DeleteLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLicenseConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.DeleteLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLicenseConfigurationWithContext indicates an expected call of DeleteLicenseConfigurationWithContext
func (mr *MockLicenseManagerAPIMockRecorder) DeleteLicenseConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLicenseConfigurationWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).DeleteLicenseConfigurationWithContext), varargs...)
}

// GetLicenseConfiguration mocks base method
func (m *MockLicenseManagerAPI) GetLicenseConfiguration(arg0 *licensemanager.GetLicenseConfigurationInput) (*licensemanager.GetLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseConfiguration", arg0)
	ret0, _ := ret[0].(*licensemanager.GetLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseConfiguration indicates an expected call of GetLicenseConfiguration
func (mr *MockLicenseManagerAPIMockRecorder) GetLicenseConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseConfiguration", reflect.TypeOf((*MockLicenseManagerAPI)(nil).GetLicenseConfiguration), arg0)
}

// GetLicenseConfigurationRequest mocks base method
func (m *MockLicenseManagerAPI) GetLicenseConfigurationRequest(arg0 *licensemanager.GetLicenseConfigurationInput) (*request.Request, *licensemanager.GetLicenseConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.GetLicenseConfigurationOutput)
	return ret0, ret1
}

// GetLicenseConfigurationRequest indicates an expected call of GetLicenseConfigurationRequest
func (mr *MockLicenseManagerAPIMockRecorder) GetLicenseConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseConfigurationRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).GetLicenseConfigurationRequest), arg0)
}

// GetLicenseConfigurationWithContext mocks base method
func (m *MockLicenseManagerAPI) GetLicenseConfigurationWithContext(arg0 context.Context, arg1 *licensemanager.GetLicenseConfigurationInput, arg2 ...request.Option) (*licensemanager.GetLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLicenseConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.GetLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseConfigurationWithContext indicates an expected call of GetLicenseConfigurationWithContext
func (mr *MockLicenseManagerAPIMockRecorder) GetLicenseConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseConfigurationWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).GetLicenseConfigurationWithContext), varargs...)
}

// GetServiceSettings mocks base method
func (m *MockLicenseManagerAPI) GetServiceSettings(arg0 *licensemanager.GetServiceSettingsInput) (*licensemanager.GetServiceSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceSettings", arg0)
	ret0, _ := ret[0].(*licensemanager.GetServiceSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceSettings indicates an expected call of GetServiceSettings
func (mr *MockLicenseManagerAPIMockRecorder) GetServiceSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSettings", reflect.TypeOf((*MockLicenseManagerAPI)(nil).GetServiceSettings), arg0)
}

// GetServiceSettingsRequest mocks base method
func (m *MockLicenseManagerAPI) GetServiceSettingsRequest(arg0 *licensemanager.GetServiceSettingsInput) (*request.Request, *licensemanager.GetServiceSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.GetServiceSettingsOutput)
	return ret0, ret1
}

// GetServiceSettingsRequest indicates an expected call of GetServiceSettingsRequest
func (mr *MockLicenseManagerAPIMockRecorder) GetServiceSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSettingsRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).GetServiceSettingsRequest), arg0)
}

// GetServiceSettingsWithContext mocks base method
func (m *MockLicenseManagerAPI) GetServiceSettingsWithContext(arg0 context.Context, arg1 *licensemanager.GetServiceSettingsInput, arg2 ...request.Option) (*licensemanager.GetServiceSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.GetServiceSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceSettingsWithContext indicates an expected call of GetServiceSettingsWithContext
func (mr *MockLicenseManagerAPIMockRecorder) GetServiceSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSettingsWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).GetServiceSettingsWithContext), varargs...)
}

// ListAssociationsForLicenseConfiguration mocks base method
func (m *MockLicenseManagerAPI) ListAssociationsForLicenseConfiguration(arg0 *licensemanager.ListAssociationsForLicenseConfigurationInput) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociationsForLicenseConfiguration", arg0)
	ret0, _ := ret[0].(*licensemanager.ListAssociationsForLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociationsForLicenseConfiguration indicates an expected call of ListAssociationsForLicenseConfiguration
func (mr *MockLicenseManagerAPIMockRecorder) ListAssociationsForLicenseConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociationsForLicenseConfiguration", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListAssociationsForLicenseConfiguration), arg0)
}

// ListAssociationsForLicenseConfigurationRequest mocks base method
func (m *MockLicenseManagerAPI) ListAssociationsForLicenseConfigurationRequest(arg0 *licensemanager.ListAssociationsForLicenseConfigurationInput) (*request.Request, *licensemanager.ListAssociationsForLicenseConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociationsForLicenseConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.ListAssociationsForLicenseConfigurationOutput)
	return ret0, ret1
}

// ListAssociationsForLicenseConfigurationRequest indicates an expected call of ListAssociationsForLicenseConfigurationRequest
func (mr *MockLicenseManagerAPIMockRecorder) ListAssociationsForLicenseConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociationsForLicenseConfigurationRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListAssociationsForLicenseConfigurationRequest), arg0)
}

// ListAssociationsForLicenseConfigurationWithContext mocks base method
func (m *MockLicenseManagerAPI) ListAssociationsForLicenseConfigurationWithContext(arg0 context.Context, arg1 *licensemanager.ListAssociationsForLicenseConfigurationInput, arg2 ...request.Option) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociationsForLicenseConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.ListAssociationsForLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociationsForLicenseConfigurationWithContext indicates an expected call of ListAssociationsForLicenseConfigurationWithContext
func (mr *MockLicenseManagerAPIMockRecorder) ListAssociationsForLicenseConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociationsForLicenseConfigurationWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListAssociationsForLicenseConfigurationWithContext), varargs...)
}

// ListLicenseConfigurations mocks base method
func (m *MockLicenseManagerAPI) ListLicenseConfigurations(arg0 *licensemanager.ListLicenseConfigurationsInput) (*licensemanager.ListLicenseConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLicenseConfigurations", arg0)
	ret0, _ := ret[0].(*licensemanager.ListLicenseConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLicenseConfigurations indicates an expected call of ListLicenseConfigurations
func (mr *MockLicenseManagerAPIMockRecorder) ListLicenseConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseConfigurations", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListLicenseConfigurations), arg0)
}

// ListLicenseConfigurationsRequest mocks base method
func (m *MockLicenseManagerAPI) ListLicenseConfigurationsRequest(arg0 *licensemanager.ListLicenseConfigurationsInput) (*request.Request, *licensemanager.ListLicenseConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLicenseConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.ListLicenseConfigurationsOutput)
	return ret0, ret1
}

// ListLicenseConfigurationsRequest indicates an expected call of ListLicenseConfigurationsRequest
func (mr *MockLicenseManagerAPIMockRecorder) ListLicenseConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseConfigurationsRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListLicenseConfigurationsRequest), arg0)
}

// ListLicenseConfigurationsWithContext mocks base method
func (m *MockLicenseManagerAPI) ListLicenseConfigurationsWithContext(arg0 context.Context, arg1 *licensemanager.ListLicenseConfigurationsInput, arg2 ...request.Option) (*licensemanager.ListLicenseConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLicenseConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.ListLicenseConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLicenseConfigurationsWithContext indicates an expected call of ListLicenseConfigurationsWithContext
func (mr *MockLicenseManagerAPIMockRecorder) ListLicenseConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseConfigurationsWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListLicenseConfigurationsWithContext), varargs...)
}

// ListLicenseSpecificationsForResource mocks base method
func (m *MockLicenseManagerAPI) ListLicenseSpecificationsForResource(arg0 *licensemanager.ListLicenseSpecificationsForResourceInput) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLicenseSpecificationsForResource", arg0)
	ret0, _ := ret[0].(*licensemanager.ListLicenseSpecificationsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLicenseSpecificationsForResource indicates an expected call of ListLicenseSpecificationsForResource
func (mr *MockLicenseManagerAPIMockRecorder) ListLicenseSpecificationsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseSpecificationsForResource", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListLicenseSpecificationsForResource), arg0)
}

// ListLicenseSpecificationsForResourceRequest mocks base method
func (m *MockLicenseManagerAPI) ListLicenseSpecificationsForResourceRequest(arg0 *licensemanager.ListLicenseSpecificationsForResourceInput) (*request.Request, *licensemanager.ListLicenseSpecificationsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLicenseSpecificationsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.ListLicenseSpecificationsForResourceOutput)
	return ret0, ret1
}

// ListLicenseSpecificationsForResourceRequest indicates an expected call of ListLicenseSpecificationsForResourceRequest
func (mr *MockLicenseManagerAPIMockRecorder) ListLicenseSpecificationsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseSpecificationsForResourceRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListLicenseSpecificationsForResourceRequest), arg0)
}

// ListLicenseSpecificationsForResourceWithContext mocks base method
func (m *MockLicenseManagerAPI) ListLicenseSpecificationsForResourceWithContext(arg0 context.Context, arg1 *licensemanager.ListLicenseSpecificationsForResourceInput, arg2 ...request.Option) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLicenseSpecificationsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.ListLicenseSpecificationsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLicenseSpecificationsForResourceWithContext indicates an expected call of ListLicenseSpecificationsForResourceWithContext
func (mr *MockLicenseManagerAPIMockRecorder) ListLicenseSpecificationsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseSpecificationsForResourceWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListLicenseSpecificationsForResourceWithContext), varargs...)
}

// ListResourceInventory mocks base method
func (m *MockLicenseManagerAPI) ListResourceInventory(arg0 *licensemanager.ListResourceInventoryInput) (*licensemanager.ListResourceInventoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceInventory", arg0)
	ret0, _ := ret[0].(*licensemanager.ListResourceInventoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceInventory indicates an expected call of ListResourceInventory
func (mr *MockLicenseManagerAPIMockRecorder) ListResourceInventory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceInventory", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListResourceInventory), arg0)
}

// ListResourceInventoryRequest mocks base method
func (m *MockLicenseManagerAPI) ListResourceInventoryRequest(arg0 *licensemanager.ListResourceInventoryInput) (*request.Request, *licensemanager.ListResourceInventoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceInventoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.ListResourceInventoryOutput)
	return ret0, ret1
}

// ListResourceInventoryRequest indicates an expected call of ListResourceInventoryRequest
func (mr *MockLicenseManagerAPIMockRecorder) ListResourceInventoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceInventoryRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListResourceInventoryRequest), arg0)
}

// ListResourceInventoryWithContext mocks base method
func (m *MockLicenseManagerAPI) ListResourceInventoryWithContext(arg0 context.Context, arg1 *licensemanager.ListResourceInventoryInput, arg2 ...request.Option) (*licensemanager.ListResourceInventoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceInventoryWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.ListResourceInventoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceInventoryWithContext indicates an expected call of ListResourceInventoryWithContext
func (mr *MockLicenseManagerAPIMockRecorder) ListResourceInventoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceInventoryWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListResourceInventoryWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockLicenseManagerAPI) ListTagsForResource(arg0 *licensemanager.ListTagsForResourceInput) (*licensemanager.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*licensemanager.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockLicenseManagerAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockLicenseManagerAPI) ListTagsForResourceRequest(arg0 *licensemanager.ListTagsForResourceInput) (*request.Request, *licensemanager.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockLicenseManagerAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockLicenseManagerAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *licensemanager.ListTagsForResourceInput, arg2 ...request.Option) (*licensemanager.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockLicenseManagerAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListUsageForLicenseConfiguration mocks base method
func (m *MockLicenseManagerAPI) ListUsageForLicenseConfiguration(arg0 *licensemanager.ListUsageForLicenseConfigurationInput) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageForLicenseConfiguration", arg0)
	ret0, _ := ret[0].(*licensemanager.ListUsageForLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageForLicenseConfiguration indicates an expected call of ListUsageForLicenseConfiguration
func (mr *MockLicenseManagerAPIMockRecorder) ListUsageForLicenseConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageForLicenseConfiguration", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListUsageForLicenseConfiguration), arg0)
}

// ListUsageForLicenseConfigurationRequest mocks base method
func (m *MockLicenseManagerAPI) ListUsageForLicenseConfigurationRequest(arg0 *licensemanager.ListUsageForLicenseConfigurationInput) (*request.Request, *licensemanager.ListUsageForLicenseConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageForLicenseConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.ListUsageForLicenseConfigurationOutput)
	return ret0, ret1
}

// ListUsageForLicenseConfigurationRequest indicates an expected call of ListUsageForLicenseConfigurationRequest
func (mr *MockLicenseManagerAPIMockRecorder) ListUsageForLicenseConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageForLicenseConfigurationRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListUsageForLicenseConfigurationRequest), arg0)
}

// ListUsageForLicenseConfigurationWithContext mocks base method
func (m *MockLicenseManagerAPI) ListUsageForLicenseConfigurationWithContext(arg0 context.Context, arg1 *licensemanager.ListUsageForLicenseConfigurationInput, arg2 ...request.Option) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsageForLicenseConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.ListUsageForLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageForLicenseConfigurationWithContext indicates an expected call of ListUsageForLicenseConfigurationWithContext
func (mr *MockLicenseManagerAPIMockRecorder) ListUsageForLicenseConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageForLicenseConfigurationWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).ListUsageForLicenseConfigurationWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockLicenseManagerAPI) TagResource(arg0 *licensemanager.TagResourceInput) (*licensemanager.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*licensemanager.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockLicenseManagerAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockLicenseManagerAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockLicenseManagerAPI) TagResourceRequest(arg0 *licensemanager.TagResourceInput) (*request.Request, *licensemanager.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockLicenseManagerAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockLicenseManagerAPI) TagResourceWithContext(arg0 context.Context, arg1 *licensemanager.TagResourceInput, arg2 ...request.Option) (*licensemanager.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockLicenseManagerAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockLicenseManagerAPI) UntagResource(arg0 *licensemanager.UntagResourceInput) (*licensemanager.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*licensemanager.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockLicenseManagerAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockLicenseManagerAPI) UntagResourceRequest(arg0 *licensemanager.UntagResourceInput) (*request.Request, *licensemanager.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockLicenseManagerAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockLicenseManagerAPI) UntagResourceWithContext(arg0 context.Context, arg1 *licensemanager.UntagResourceInput, arg2 ...request.Option) (*licensemanager.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockLicenseManagerAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateLicenseConfiguration mocks base method
func (m *MockLicenseManagerAPI) UpdateLicenseConfiguration(arg0 *licensemanager.UpdateLicenseConfigurationInput) (*licensemanager.UpdateLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLicenseConfiguration", arg0)
	ret0, _ := ret[0].(*licensemanager.UpdateLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLicenseConfiguration indicates an expected call of UpdateLicenseConfiguration
func (mr *MockLicenseManagerAPIMockRecorder) UpdateLicenseConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLicenseConfiguration", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UpdateLicenseConfiguration), arg0)
}

// UpdateLicenseConfigurationRequest mocks base method
func (m *MockLicenseManagerAPI) UpdateLicenseConfigurationRequest(arg0 *licensemanager.UpdateLicenseConfigurationInput) (*request.Request, *licensemanager.UpdateLicenseConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLicenseConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.UpdateLicenseConfigurationOutput)
	return ret0, ret1
}

// UpdateLicenseConfigurationRequest indicates an expected call of UpdateLicenseConfigurationRequest
func (mr *MockLicenseManagerAPIMockRecorder) UpdateLicenseConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLicenseConfigurationRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UpdateLicenseConfigurationRequest), arg0)
}

// UpdateLicenseConfigurationWithContext mocks base method
func (m *MockLicenseManagerAPI) UpdateLicenseConfigurationWithContext(arg0 context.Context, arg1 *licensemanager.UpdateLicenseConfigurationInput, arg2 ...request.Option) (*licensemanager.UpdateLicenseConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLicenseConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.UpdateLicenseConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLicenseConfigurationWithContext indicates an expected call of UpdateLicenseConfigurationWithContext
func (mr *MockLicenseManagerAPIMockRecorder) UpdateLicenseConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLicenseConfigurationWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UpdateLicenseConfigurationWithContext), varargs...)
}

// UpdateLicenseSpecificationsForResource mocks base method
func (m *MockLicenseManagerAPI) UpdateLicenseSpecificationsForResource(arg0 *licensemanager.UpdateLicenseSpecificationsForResourceInput) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLicenseSpecificationsForResource", arg0)
	ret0, _ := ret[0].(*licensemanager.UpdateLicenseSpecificationsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLicenseSpecificationsForResource indicates an expected call of UpdateLicenseSpecificationsForResource
func (mr *MockLicenseManagerAPIMockRecorder) UpdateLicenseSpecificationsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLicenseSpecificationsForResource", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UpdateLicenseSpecificationsForResource), arg0)
}

// UpdateLicenseSpecificationsForResourceRequest mocks base method
func (m *MockLicenseManagerAPI) UpdateLicenseSpecificationsForResourceRequest(arg0 *licensemanager.UpdateLicenseSpecificationsForResourceInput) (*request.Request, *licensemanager.UpdateLicenseSpecificationsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLicenseSpecificationsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.UpdateLicenseSpecificationsForResourceOutput)
	return ret0, ret1
}

// UpdateLicenseSpecificationsForResourceRequest indicates an expected call of UpdateLicenseSpecificationsForResourceRequest
func (mr *MockLicenseManagerAPIMockRecorder) UpdateLicenseSpecificationsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLicenseSpecificationsForResourceRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UpdateLicenseSpecificationsForResourceRequest), arg0)
}

// UpdateLicenseSpecificationsForResourceWithContext mocks base method
func (m *MockLicenseManagerAPI) UpdateLicenseSpecificationsForResourceWithContext(arg0 context.Context, arg1 *licensemanager.UpdateLicenseSpecificationsForResourceInput, arg2 ...request.Option) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLicenseSpecificationsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.UpdateLicenseSpecificationsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLicenseSpecificationsForResourceWithContext indicates an expected call of UpdateLicenseSpecificationsForResourceWithContext
func (mr *MockLicenseManagerAPIMockRecorder) UpdateLicenseSpecificationsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLicenseSpecificationsForResourceWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UpdateLicenseSpecificationsForResourceWithContext), varargs...)
}

// UpdateServiceSettings mocks base method
func (m *MockLicenseManagerAPI) UpdateServiceSettings(arg0 *licensemanager.UpdateServiceSettingsInput) (*licensemanager.UpdateServiceSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceSettings", arg0)
	ret0, _ := ret[0].(*licensemanager.UpdateServiceSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceSettings indicates an expected call of UpdateServiceSettings
func (mr *MockLicenseManagerAPIMockRecorder) UpdateServiceSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceSettings", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UpdateServiceSettings), arg0)
}

// UpdateServiceSettingsRequest mocks base method
func (m *MockLicenseManagerAPI) UpdateServiceSettingsRequest(arg0 *licensemanager.UpdateServiceSettingsInput) (*request.Request, *licensemanager.UpdateServiceSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanager.UpdateServiceSettingsOutput)
	return ret0, ret1
}

// UpdateServiceSettingsRequest indicates an expected call of UpdateServiceSettingsRequest
func (mr *MockLicenseManagerAPIMockRecorder) UpdateServiceSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceSettingsRequest", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UpdateServiceSettingsRequest), arg0)
}

// UpdateServiceSettingsWithContext mocks base method
func (m *MockLicenseManagerAPI) UpdateServiceSettingsWithContext(arg0 context.Context, arg1 *licensemanager.UpdateServiceSettingsInput, arg2 ...request.Option) (*licensemanager.UpdateServiceSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanager.UpdateServiceSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceSettingsWithContext indicates an expected call of UpdateServiceSettingsWithContext
func (mr *MockLicenseManagerAPIMockRecorder) UpdateServiceSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceSettingsWithContext", reflect.TypeOf((*MockLicenseManagerAPI)(nil).UpdateServiceSettingsWithContext), varargs...)
}
