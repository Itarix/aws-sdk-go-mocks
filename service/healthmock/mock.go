// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/health/healthiface (interfaces: HealthAPI)

// Package healthmock is a generated GoMock package.
package healthmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	health "github.com/aws/aws-sdk-go/service/health"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHealthAPI is a mock of HealthAPI interface
type MockHealthAPI struct {
	ctrl     *gomock.Controller
	recorder *MockHealthAPIMockRecorder
}

// MockHealthAPIMockRecorder is the mock recorder for MockHealthAPI
type MockHealthAPIMockRecorder struct {
	mock *MockHealthAPI
}

// NewMockHealthAPI creates a new mock instance
func NewMockHealthAPI(ctrl *gomock.Controller) *MockHealthAPI {
	mock := &MockHealthAPI{ctrl: ctrl}
	mock.recorder = &MockHealthAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHealthAPI) EXPECT() *MockHealthAPIMockRecorder {
	return m.recorder
}

// DescribeAffectedEntities mocks base method
func (m *MockHealthAPI) DescribeAffectedEntities(arg0 *health.DescribeAffectedEntitiesInput) (*health.DescribeAffectedEntitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAffectedEntities", arg0)
	ret0, _ := ret[0].(*health.DescribeAffectedEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAffectedEntities indicates an expected call of DescribeAffectedEntities
func (mr *MockHealthAPIMockRecorder) DescribeAffectedEntities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAffectedEntities", reflect.TypeOf((*MockHealthAPI)(nil).DescribeAffectedEntities), arg0)
}

// DescribeAffectedEntitiesPages mocks base method
func (m *MockHealthAPI) DescribeAffectedEntitiesPages(arg0 *health.DescribeAffectedEntitiesInput, arg1 func(*health.DescribeAffectedEntitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAffectedEntitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAffectedEntitiesPages indicates an expected call of DescribeAffectedEntitiesPages
func (mr *MockHealthAPIMockRecorder) DescribeAffectedEntitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAffectedEntitiesPages", reflect.TypeOf((*MockHealthAPI)(nil).DescribeAffectedEntitiesPages), arg0, arg1)
}

// DescribeAffectedEntitiesPagesWithContext mocks base method
func (m *MockHealthAPI) DescribeAffectedEntitiesPagesWithContext(arg0 context.Context, arg1 *health.DescribeAffectedEntitiesInput, arg2 func(*health.DescribeAffectedEntitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAffectedEntitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAffectedEntitiesPagesWithContext indicates an expected call of DescribeAffectedEntitiesPagesWithContext
func (mr *MockHealthAPIMockRecorder) DescribeAffectedEntitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAffectedEntitiesPagesWithContext", reflect.TypeOf((*MockHealthAPI)(nil).DescribeAffectedEntitiesPagesWithContext), varargs...)
}

// DescribeAffectedEntitiesRequest mocks base method
func (m *MockHealthAPI) DescribeAffectedEntitiesRequest(arg0 *health.DescribeAffectedEntitiesInput) (*request.Request, *health.DescribeAffectedEntitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAffectedEntitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*health.DescribeAffectedEntitiesOutput)
	return ret0, ret1
}

// DescribeAffectedEntitiesRequest indicates an expected call of DescribeAffectedEntitiesRequest
func (mr *MockHealthAPIMockRecorder) DescribeAffectedEntitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAffectedEntitiesRequest", reflect.TypeOf((*MockHealthAPI)(nil).DescribeAffectedEntitiesRequest), arg0)
}

// DescribeAffectedEntitiesWithContext mocks base method
func (m *MockHealthAPI) DescribeAffectedEntitiesWithContext(arg0 context.Context, arg1 *health.DescribeAffectedEntitiesInput, arg2 ...request.Option) (*health.DescribeAffectedEntitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAffectedEntitiesWithContext", varargs...)
	ret0, _ := ret[0].(*health.DescribeAffectedEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAffectedEntitiesWithContext indicates an expected call of DescribeAffectedEntitiesWithContext
func (mr *MockHealthAPIMockRecorder) DescribeAffectedEntitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAffectedEntitiesWithContext", reflect.TypeOf((*MockHealthAPI)(nil).DescribeAffectedEntitiesWithContext), varargs...)
}

// DescribeEntityAggregates mocks base method
func (m *MockHealthAPI) DescribeEntityAggregates(arg0 *health.DescribeEntityAggregatesInput) (*health.DescribeEntityAggregatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEntityAggregates", arg0)
	ret0, _ := ret[0].(*health.DescribeEntityAggregatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEntityAggregates indicates an expected call of DescribeEntityAggregates
func (mr *MockHealthAPIMockRecorder) DescribeEntityAggregates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEntityAggregates", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEntityAggregates), arg0)
}

// DescribeEntityAggregatesRequest mocks base method
func (m *MockHealthAPI) DescribeEntityAggregatesRequest(arg0 *health.DescribeEntityAggregatesInput) (*request.Request, *health.DescribeEntityAggregatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEntityAggregatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*health.DescribeEntityAggregatesOutput)
	return ret0, ret1
}

// DescribeEntityAggregatesRequest indicates an expected call of DescribeEntityAggregatesRequest
func (mr *MockHealthAPIMockRecorder) DescribeEntityAggregatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEntityAggregatesRequest", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEntityAggregatesRequest), arg0)
}

// DescribeEntityAggregatesWithContext mocks base method
func (m *MockHealthAPI) DescribeEntityAggregatesWithContext(arg0 context.Context, arg1 *health.DescribeEntityAggregatesInput, arg2 ...request.Option) (*health.DescribeEntityAggregatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEntityAggregatesWithContext", varargs...)
	ret0, _ := ret[0].(*health.DescribeEntityAggregatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEntityAggregatesWithContext indicates an expected call of DescribeEntityAggregatesWithContext
func (mr *MockHealthAPIMockRecorder) DescribeEntityAggregatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEntityAggregatesWithContext", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEntityAggregatesWithContext), varargs...)
}

// DescribeEventAggregates mocks base method
func (m *MockHealthAPI) DescribeEventAggregates(arg0 *health.DescribeEventAggregatesInput) (*health.DescribeEventAggregatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventAggregates", arg0)
	ret0, _ := ret[0].(*health.DescribeEventAggregatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventAggregates indicates an expected call of DescribeEventAggregates
func (mr *MockHealthAPIMockRecorder) DescribeEventAggregates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventAggregates", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventAggregates), arg0)
}

// DescribeEventAggregatesPages mocks base method
func (m *MockHealthAPI) DescribeEventAggregatesPages(arg0 *health.DescribeEventAggregatesInput, arg1 func(*health.DescribeEventAggregatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventAggregatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventAggregatesPages indicates an expected call of DescribeEventAggregatesPages
func (mr *MockHealthAPIMockRecorder) DescribeEventAggregatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventAggregatesPages", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventAggregatesPages), arg0, arg1)
}

// DescribeEventAggregatesPagesWithContext mocks base method
func (m *MockHealthAPI) DescribeEventAggregatesPagesWithContext(arg0 context.Context, arg1 *health.DescribeEventAggregatesInput, arg2 func(*health.DescribeEventAggregatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventAggregatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventAggregatesPagesWithContext indicates an expected call of DescribeEventAggregatesPagesWithContext
func (mr *MockHealthAPIMockRecorder) DescribeEventAggregatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventAggregatesPagesWithContext", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventAggregatesPagesWithContext), varargs...)
}

// DescribeEventAggregatesRequest mocks base method
func (m *MockHealthAPI) DescribeEventAggregatesRequest(arg0 *health.DescribeEventAggregatesInput) (*request.Request, *health.DescribeEventAggregatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventAggregatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*health.DescribeEventAggregatesOutput)
	return ret0, ret1
}

// DescribeEventAggregatesRequest indicates an expected call of DescribeEventAggregatesRequest
func (mr *MockHealthAPIMockRecorder) DescribeEventAggregatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventAggregatesRequest", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventAggregatesRequest), arg0)
}

// DescribeEventAggregatesWithContext mocks base method
func (m *MockHealthAPI) DescribeEventAggregatesWithContext(arg0 context.Context, arg1 *health.DescribeEventAggregatesInput, arg2 ...request.Option) (*health.DescribeEventAggregatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventAggregatesWithContext", varargs...)
	ret0, _ := ret[0].(*health.DescribeEventAggregatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventAggregatesWithContext indicates an expected call of DescribeEventAggregatesWithContext
func (mr *MockHealthAPIMockRecorder) DescribeEventAggregatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventAggregatesWithContext", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventAggregatesWithContext), varargs...)
}

// DescribeEventDetails mocks base method
func (m *MockHealthAPI) DescribeEventDetails(arg0 *health.DescribeEventDetailsInput) (*health.DescribeEventDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventDetails", arg0)
	ret0, _ := ret[0].(*health.DescribeEventDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventDetails indicates an expected call of DescribeEventDetails
func (mr *MockHealthAPIMockRecorder) DescribeEventDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventDetails", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventDetails), arg0)
}

// DescribeEventDetailsRequest mocks base method
func (m *MockHealthAPI) DescribeEventDetailsRequest(arg0 *health.DescribeEventDetailsInput) (*request.Request, *health.DescribeEventDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*health.DescribeEventDetailsOutput)
	return ret0, ret1
}

// DescribeEventDetailsRequest indicates an expected call of DescribeEventDetailsRequest
func (mr *MockHealthAPIMockRecorder) DescribeEventDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventDetailsRequest", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventDetailsRequest), arg0)
}

// DescribeEventDetailsWithContext mocks base method
func (m *MockHealthAPI) DescribeEventDetailsWithContext(arg0 context.Context, arg1 *health.DescribeEventDetailsInput, arg2 ...request.Option) (*health.DescribeEventDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*health.DescribeEventDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventDetailsWithContext indicates an expected call of DescribeEventDetailsWithContext
func (mr *MockHealthAPIMockRecorder) DescribeEventDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventDetailsWithContext", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventDetailsWithContext), varargs...)
}

// DescribeEventTypes mocks base method
func (m *MockHealthAPI) DescribeEventTypes(arg0 *health.DescribeEventTypesInput) (*health.DescribeEventTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventTypes", arg0)
	ret0, _ := ret[0].(*health.DescribeEventTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventTypes indicates an expected call of DescribeEventTypes
func (mr *MockHealthAPIMockRecorder) DescribeEventTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTypes", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventTypes), arg0)
}

// DescribeEventTypesPages mocks base method
func (m *MockHealthAPI) DescribeEventTypesPages(arg0 *health.DescribeEventTypesInput, arg1 func(*health.DescribeEventTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventTypesPages indicates an expected call of DescribeEventTypesPages
func (mr *MockHealthAPIMockRecorder) DescribeEventTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTypesPages", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventTypesPages), arg0, arg1)
}

// DescribeEventTypesPagesWithContext mocks base method
func (m *MockHealthAPI) DescribeEventTypesPagesWithContext(arg0 context.Context, arg1 *health.DescribeEventTypesInput, arg2 func(*health.DescribeEventTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventTypesPagesWithContext indicates an expected call of DescribeEventTypesPagesWithContext
func (mr *MockHealthAPIMockRecorder) DescribeEventTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTypesPagesWithContext", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventTypesPagesWithContext), varargs...)
}

// DescribeEventTypesRequest mocks base method
func (m *MockHealthAPI) DescribeEventTypesRequest(arg0 *health.DescribeEventTypesInput) (*request.Request, *health.DescribeEventTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*health.DescribeEventTypesOutput)
	return ret0, ret1
}

// DescribeEventTypesRequest indicates an expected call of DescribeEventTypesRequest
func (mr *MockHealthAPIMockRecorder) DescribeEventTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTypesRequest", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventTypesRequest), arg0)
}

// DescribeEventTypesWithContext mocks base method
func (m *MockHealthAPI) DescribeEventTypesWithContext(arg0 context.Context, arg1 *health.DescribeEventTypesInput, arg2 ...request.Option) (*health.DescribeEventTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventTypesWithContext", varargs...)
	ret0, _ := ret[0].(*health.DescribeEventTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventTypesWithContext indicates an expected call of DescribeEventTypesWithContext
func (mr *MockHealthAPIMockRecorder) DescribeEventTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTypesWithContext", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventTypesWithContext), varargs...)
}

// DescribeEvents mocks base method
func (m *MockHealthAPI) DescribeEvents(arg0 *health.DescribeEventsInput) (*health.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEvents", arg0)
	ret0, _ := ret[0].(*health.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents
func (mr *MockHealthAPIMockRecorder) DescribeEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEvents), arg0)
}

// DescribeEventsPages mocks base method
func (m *MockHealthAPI) DescribeEventsPages(arg0 *health.DescribeEventsInput, arg1 func(*health.DescribeEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventsPages indicates an expected call of DescribeEventsPages
func (mr *MockHealthAPIMockRecorder) DescribeEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsPages", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventsPages), arg0, arg1)
}

// DescribeEventsPagesWithContext mocks base method
func (m *MockHealthAPI) DescribeEventsPagesWithContext(arg0 context.Context, arg1 *health.DescribeEventsInput, arg2 func(*health.DescribeEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventsPagesWithContext indicates an expected call of DescribeEventsPagesWithContext
func (mr *MockHealthAPIMockRecorder) DescribeEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsPagesWithContext", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventsPagesWithContext), varargs...)
}

// DescribeEventsRequest mocks base method
func (m *MockHealthAPI) DescribeEventsRequest(arg0 *health.DescribeEventsInput) (*request.Request, *health.DescribeEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*health.DescribeEventsOutput)
	return ret0, ret1
}

// DescribeEventsRequest indicates an expected call of DescribeEventsRequest
func (mr *MockHealthAPIMockRecorder) DescribeEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsRequest", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventsRequest), arg0)
}

// DescribeEventsWithContext mocks base method
func (m *MockHealthAPI) DescribeEventsWithContext(arg0 context.Context, arg1 *health.DescribeEventsInput, arg2 ...request.Option) (*health.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventsWithContext", varargs...)
	ret0, _ := ret[0].(*health.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventsWithContext indicates an expected call of DescribeEventsWithContext
func (mr *MockHealthAPIMockRecorder) DescribeEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsWithContext", reflect.TypeOf((*MockHealthAPI)(nil).DescribeEventsWithContext), varargs...)
}
