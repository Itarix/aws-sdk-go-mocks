// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/costexplorer/costexploreriface (interfaces: CostExplorerAPI)

// Package costexplorermock is a generated GoMock package.
package costexplorermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	costexplorer "github.com/aws/aws-sdk-go/service/costexplorer"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCostExplorerAPI is a mock of CostExplorerAPI interface
type MockCostExplorerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCostExplorerAPIMockRecorder
}

// MockCostExplorerAPIMockRecorder is the mock recorder for MockCostExplorerAPI
type MockCostExplorerAPIMockRecorder struct {
	mock *MockCostExplorerAPI
}

// NewMockCostExplorerAPI creates a new mock instance
func NewMockCostExplorerAPI(ctrl *gomock.Controller) *MockCostExplorerAPI {
	mock := &MockCostExplorerAPI{ctrl: ctrl}
	mock.recorder = &MockCostExplorerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCostExplorerAPI) EXPECT() *MockCostExplorerAPIMockRecorder {
	return m.recorder
}

// CreateCostCategoryDefinition mocks base method
func (m *MockCostExplorerAPI) CreateCostCategoryDefinition(arg0 *costexplorer.CreateCostCategoryDefinitionInput) (*costexplorer.CreateCostCategoryDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCostCategoryDefinition", arg0)
	ret0, _ := ret[0].(*costexplorer.CreateCostCategoryDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCostCategoryDefinition indicates an expected call of CreateCostCategoryDefinition
func (mr *MockCostExplorerAPIMockRecorder) CreateCostCategoryDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCostCategoryDefinition", reflect.TypeOf((*MockCostExplorerAPI)(nil).CreateCostCategoryDefinition), arg0)
}

// CreateCostCategoryDefinitionRequest mocks base method
func (m *MockCostExplorerAPI) CreateCostCategoryDefinitionRequest(arg0 *costexplorer.CreateCostCategoryDefinitionInput) (*request.Request, *costexplorer.CreateCostCategoryDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCostCategoryDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.CreateCostCategoryDefinitionOutput)
	return ret0, ret1
}

// CreateCostCategoryDefinitionRequest indicates an expected call of CreateCostCategoryDefinitionRequest
func (mr *MockCostExplorerAPIMockRecorder) CreateCostCategoryDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCostCategoryDefinitionRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).CreateCostCategoryDefinitionRequest), arg0)
}

// CreateCostCategoryDefinitionWithContext mocks base method
func (m *MockCostExplorerAPI) CreateCostCategoryDefinitionWithContext(arg0 context.Context, arg1 *costexplorer.CreateCostCategoryDefinitionInput, arg2 ...request.Option) (*costexplorer.CreateCostCategoryDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCostCategoryDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.CreateCostCategoryDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCostCategoryDefinitionWithContext indicates an expected call of CreateCostCategoryDefinitionWithContext
func (mr *MockCostExplorerAPIMockRecorder) CreateCostCategoryDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCostCategoryDefinitionWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).CreateCostCategoryDefinitionWithContext), varargs...)
}

// DeleteCostCategoryDefinition mocks base method
func (m *MockCostExplorerAPI) DeleteCostCategoryDefinition(arg0 *costexplorer.DeleteCostCategoryDefinitionInput) (*costexplorer.DeleteCostCategoryDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCostCategoryDefinition", arg0)
	ret0, _ := ret[0].(*costexplorer.DeleteCostCategoryDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCostCategoryDefinition indicates an expected call of DeleteCostCategoryDefinition
func (mr *MockCostExplorerAPIMockRecorder) DeleteCostCategoryDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCostCategoryDefinition", reflect.TypeOf((*MockCostExplorerAPI)(nil).DeleteCostCategoryDefinition), arg0)
}

// DeleteCostCategoryDefinitionRequest mocks base method
func (m *MockCostExplorerAPI) DeleteCostCategoryDefinitionRequest(arg0 *costexplorer.DeleteCostCategoryDefinitionInput) (*request.Request, *costexplorer.DeleteCostCategoryDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCostCategoryDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.DeleteCostCategoryDefinitionOutput)
	return ret0, ret1
}

// DeleteCostCategoryDefinitionRequest indicates an expected call of DeleteCostCategoryDefinitionRequest
func (mr *MockCostExplorerAPIMockRecorder) DeleteCostCategoryDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCostCategoryDefinitionRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).DeleteCostCategoryDefinitionRequest), arg0)
}

// DeleteCostCategoryDefinitionWithContext mocks base method
func (m *MockCostExplorerAPI) DeleteCostCategoryDefinitionWithContext(arg0 context.Context, arg1 *costexplorer.DeleteCostCategoryDefinitionInput, arg2 ...request.Option) (*costexplorer.DeleteCostCategoryDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCostCategoryDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.DeleteCostCategoryDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCostCategoryDefinitionWithContext indicates an expected call of DeleteCostCategoryDefinitionWithContext
func (mr *MockCostExplorerAPIMockRecorder) DeleteCostCategoryDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCostCategoryDefinitionWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).DeleteCostCategoryDefinitionWithContext), varargs...)
}

// DescribeCostCategoryDefinition mocks base method
func (m *MockCostExplorerAPI) DescribeCostCategoryDefinition(arg0 *costexplorer.DescribeCostCategoryDefinitionInput) (*costexplorer.DescribeCostCategoryDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCostCategoryDefinition", arg0)
	ret0, _ := ret[0].(*costexplorer.DescribeCostCategoryDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCostCategoryDefinition indicates an expected call of DescribeCostCategoryDefinition
func (mr *MockCostExplorerAPIMockRecorder) DescribeCostCategoryDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCostCategoryDefinition", reflect.TypeOf((*MockCostExplorerAPI)(nil).DescribeCostCategoryDefinition), arg0)
}

// DescribeCostCategoryDefinitionRequest mocks base method
func (m *MockCostExplorerAPI) DescribeCostCategoryDefinitionRequest(arg0 *costexplorer.DescribeCostCategoryDefinitionInput) (*request.Request, *costexplorer.DescribeCostCategoryDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCostCategoryDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.DescribeCostCategoryDefinitionOutput)
	return ret0, ret1
}

// DescribeCostCategoryDefinitionRequest indicates an expected call of DescribeCostCategoryDefinitionRequest
func (mr *MockCostExplorerAPIMockRecorder) DescribeCostCategoryDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCostCategoryDefinitionRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).DescribeCostCategoryDefinitionRequest), arg0)
}

// DescribeCostCategoryDefinitionWithContext mocks base method
func (m *MockCostExplorerAPI) DescribeCostCategoryDefinitionWithContext(arg0 context.Context, arg1 *costexplorer.DescribeCostCategoryDefinitionInput, arg2 ...request.Option) (*costexplorer.DescribeCostCategoryDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCostCategoryDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.DescribeCostCategoryDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCostCategoryDefinitionWithContext indicates an expected call of DescribeCostCategoryDefinitionWithContext
func (mr *MockCostExplorerAPIMockRecorder) DescribeCostCategoryDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCostCategoryDefinitionWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).DescribeCostCategoryDefinitionWithContext), varargs...)
}

// GetCostAndUsage mocks base method
func (m *MockCostExplorerAPI) GetCostAndUsage(arg0 *costexplorer.GetCostAndUsageInput) (*costexplorer.GetCostAndUsageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCostAndUsage", arg0)
	ret0, _ := ret[0].(*costexplorer.GetCostAndUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostAndUsage indicates an expected call of GetCostAndUsage
func (mr *MockCostExplorerAPIMockRecorder) GetCostAndUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostAndUsage", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetCostAndUsage), arg0)
}

// GetCostAndUsageRequest mocks base method
func (m *MockCostExplorerAPI) GetCostAndUsageRequest(arg0 *costexplorer.GetCostAndUsageInput) (*request.Request, *costexplorer.GetCostAndUsageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCostAndUsageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetCostAndUsageOutput)
	return ret0, ret1
}

// GetCostAndUsageRequest indicates an expected call of GetCostAndUsageRequest
func (mr *MockCostExplorerAPIMockRecorder) GetCostAndUsageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostAndUsageRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetCostAndUsageRequest), arg0)
}

// GetCostAndUsageWithContext mocks base method
func (m *MockCostExplorerAPI) GetCostAndUsageWithContext(arg0 context.Context, arg1 *costexplorer.GetCostAndUsageInput, arg2 ...request.Option) (*costexplorer.GetCostAndUsageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCostAndUsageWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetCostAndUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostAndUsageWithContext indicates an expected call of GetCostAndUsageWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetCostAndUsageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostAndUsageWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetCostAndUsageWithContext), varargs...)
}

// GetCostAndUsageWithResources mocks base method
func (m *MockCostExplorerAPI) GetCostAndUsageWithResources(arg0 *costexplorer.GetCostAndUsageWithResourcesInput) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCostAndUsageWithResources", arg0)
	ret0, _ := ret[0].(*costexplorer.GetCostAndUsageWithResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostAndUsageWithResources indicates an expected call of GetCostAndUsageWithResources
func (mr *MockCostExplorerAPIMockRecorder) GetCostAndUsageWithResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostAndUsageWithResources", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetCostAndUsageWithResources), arg0)
}

// GetCostAndUsageWithResourcesRequest mocks base method
func (m *MockCostExplorerAPI) GetCostAndUsageWithResourcesRequest(arg0 *costexplorer.GetCostAndUsageWithResourcesInput) (*request.Request, *costexplorer.GetCostAndUsageWithResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCostAndUsageWithResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetCostAndUsageWithResourcesOutput)
	return ret0, ret1
}

// GetCostAndUsageWithResourcesRequest indicates an expected call of GetCostAndUsageWithResourcesRequest
func (mr *MockCostExplorerAPIMockRecorder) GetCostAndUsageWithResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostAndUsageWithResourcesRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetCostAndUsageWithResourcesRequest), arg0)
}

// GetCostAndUsageWithResourcesWithContext mocks base method
func (m *MockCostExplorerAPI) GetCostAndUsageWithResourcesWithContext(arg0 context.Context, arg1 *costexplorer.GetCostAndUsageWithResourcesInput, arg2 ...request.Option) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCostAndUsageWithResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetCostAndUsageWithResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostAndUsageWithResourcesWithContext indicates an expected call of GetCostAndUsageWithResourcesWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetCostAndUsageWithResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostAndUsageWithResourcesWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetCostAndUsageWithResourcesWithContext), varargs...)
}

// GetCostForecast mocks base method
func (m *MockCostExplorerAPI) GetCostForecast(arg0 *costexplorer.GetCostForecastInput) (*costexplorer.GetCostForecastOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCostForecast", arg0)
	ret0, _ := ret[0].(*costexplorer.GetCostForecastOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostForecast indicates an expected call of GetCostForecast
func (mr *MockCostExplorerAPIMockRecorder) GetCostForecast(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostForecast", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetCostForecast), arg0)
}

// GetCostForecastRequest mocks base method
func (m *MockCostExplorerAPI) GetCostForecastRequest(arg0 *costexplorer.GetCostForecastInput) (*request.Request, *costexplorer.GetCostForecastOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCostForecastRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetCostForecastOutput)
	return ret0, ret1
}

// GetCostForecastRequest indicates an expected call of GetCostForecastRequest
func (mr *MockCostExplorerAPIMockRecorder) GetCostForecastRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostForecastRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetCostForecastRequest), arg0)
}

// GetCostForecastWithContext mocks base method
func (m *MockCostExplorerAPI) GetCostForecastWithContext(arg0 context.Context, arg1 *costexplorer.GetCostForecastInput, arg2 ...request.Option) (*costexplorer.GetCostForecastOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCostForecastWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetCostForecastOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostForecastWithContext indicates an expected call of GetCostForecastWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetCostForecastWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostForecastWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetCostForecastWithContext), varargs...)
}

// GetDimensionValues mocks base method
func (m *MockCostExplorerAPI) GetDimensionValues(arg0 *costexplorer.GetDimensionValuesInput) (*costexplorer.GetDimensionValuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDimensionValues", arg0)
	ret0, _ := ret[0].(*costexplorer.GetDimensionValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDimensionValues indicates an expected call of GetDimensionValues
func (mr *MockCostExplorerAPIMockRecorder) GetDimensionValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDimensionValues", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetDimensionValues), arg0)
}

// GetDimensionValuesRequest mocks base method
func (m *MockCostExplorerAPI) GetDimensionValuesRequest(arg0 *costexplorer.GetDimensionValuesInput) (*request.Request, *costexplorer.GetDimensionValuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDimensionValuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetDimensionValuesOutput)
	return ret0, ret1
}

// GetDimensionValuesRequest indicates an expected call of GetDimensionValuesRequest
func (mr *MockCostExplorerAPIMockRecorder) GetDimensionValuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDimensionValuesRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetDimensionValuesRequest), arg0)
}

// GetDimensionValuesWithContext mocks base method
func (m *MockCostExplorerAPI) GetDimensionValuesWithContext(arg0 context.Context, arg1 *costexplorer.GetDimensionValuesInput, arg2 ...request.Option) (*costexplorer.GetDimensionValuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDimensionValuesWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetDimensionValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDimensionValuesWithContext indicates an expected call of GetDimensionValuesWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetDimensionValuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDimensionValuesWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetDimensionValuesWithContext), varargs...)
}

// GetReservationCoverage mocks base method
func (m *MockCostExplorerAPI) GetReservationCoverage(arg0 *costexplorer.GetReservationCoverageInput) (*costexplorer.GetReservationCoverageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationCoverage", arg0)
	ret0, _ := ret[0].(*costexplorer.GetReservationCoverageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationCoverage indicates an expected call of GetReservationCoverage
func (mr *MockCostExplorerAPIMockRecorder) GetReservationCoverage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationCoverage", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetReservationCoverage), arg0)
}

// GetReservationCoverageRequest mocks base method
func (m *MockCostExplorerAPI) GetReservationCoverageRequest(arg0 *costexplorer.GetReservationCoverageInput) (*request.Request, *costexplorer.GetReservationCoverageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationCoverageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetReservationCoverageOutput)
	return ret0, ret1
}

// GetReservationCoverageRequest indicates an expected call of GetReservationCoverageRequest
func (mr *MockCostExplorerAPIMockRecorder) GetReservationCoverageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationCoverageRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetReservationCoverageRequest), arg0)
}

// GetReservationCoverageWithContext mocks base method
func (m *MockCostExplorerAPI) GetReservationCoverageWithContext(arg0 context.Context, arg1 *costexplorer.GetReservationCoverageInput, arg2 ...request.Option) (*costexplorer.GetReservationCoverageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReservationCoverageWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetReservationCoverageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationCoverageWithContext indicates an expected call of GetReservationCoverageWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetReservationCoverageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationCoverageWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetReservationCoverageWithContext), varargs...)
}

// GetReservationPurchaseRecommendation mocks base method
func (m *MockCostExplorerAPI) GetReservationPurchaseRecommendation(arg0 *costexplorer.GetReservationPurchaseRecommendationInput) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationPurchaseRecommendation", arg0)
	ret0, _ := ret[0].(*costexplorer.GetReservationPurchaseRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationPurchaseRecommendation indicates an expected call of GetReservationPurchaseRecommendation
func (mr *MockCostExplorerAPIMockRecorder) GetReservationPurchaseRecommendation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationPurchaseRecommendation", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetReservationPurchaseRecommendation), arg0)
}

// GetReservationPurchaseRecommendationRequest mocks base method
func (m *MockCostExplorerAPI) GetReservationPurchaseRecommendationRequest(arg0 *costexplorer.GetReservationPurchaseRecommendationInput) (*request.Request, *costexplorer.GetReservationPurchaseRecommendationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationPurchaseRecommendationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetReservationPurchaseRecommendationOutput)
	return ret0, ret1
}

// GetReservationPurchaseRecommendationRequest indicates an expected call of GetReservationPurchaseRecommendationRequest
func (mr *MockCostExplorerAPIMockRecorder) GetReservationPurchaseRecommendationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationPurchaseRecommendationRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetReservationPurchaseRecommendationRequest), arg0)
}

// GetReservationPurchaseRecommendationWithContext mocks base method
func (m *MockCostExplorerAPI) GetReservationPurchaseRecommendationWithContext(arg0 context.Context, arg1 *costexplorer.GetReservationPurchaseRecommendationInput, arg2 ...request.Option) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReservationPurchaseRecommendationWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetReservationPurchaseRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationPurchaseRecommendationWithContext indicates an expected call of GetReservationPurchaseRecommendationWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetReservationPurchaseRecommendationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationPurchaseRecommendationWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetReservationPurchaseRecommendationWithContext), varargs...)
}

// GetReservationUtilization mocks base method
func (m *MockCostExplorerAPI) GetReservationUtilization(arg0 *costexplorer.GetReservationUtilizationInput) (*costexplorer.GetReservationUtilizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationUtilization", arg0)
	ret0, _ := ret[0].(*costexplorer.GetReservationUtilizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationUtilization indicates an expected call of GetReservationUtilization
func (mr *MockCostExplorerAPIMockRecorder) GetReservationUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationUtilization", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetReservationUtilization), arg0)
}

// GetReservationUtilizationRequest mocks base method
func (m *MockCostExplorerAPI) GetReservationUtilizationRequest(arg0 *costexplorer.GetReservationUtilizationInput) (*request.Request, *costexplorer.GetReservationUtilizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationUtilizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetReservationUtilizationOutput)
	return ret0, ret1
}

// GetReservationUtilizationRequest indicates an expected call of GetReservationUtilizationRequest
func (mr *MockCostExplorerAPIMockRecorder) GetReservationUtilizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationUtilizationRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetReservationUtilizationRequest), arg0)
}

// GetReservationUtilizationWithContext mocks base method
func (m *MockCostExplorerAPI) GetReservationUtilizationWithContext(arg0 context.Context, arg1 *costexplorer.GetReservationUtilizationInput, arg2 ...request.Option) (*costexplorer.GetReservationUtilizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReservationUtilizationWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetReservationUtilizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationUtilizationWithContext indicates an expected call of GetReservationUtilizationWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetReservationUtilizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationUtilizationWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetReservationUtilizationWithContext), varargs...)
}

// GetRightsizingRecommendation mocks base method
func (m *MockCostExplorerAPI) GetRightsizingRecommendation(arg0 *costexplorer.GetRightsizingRecommendationInput) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRightsizingRecommendation", arg0)
	ret0, _ := ret[0].(*costexplorer.GetRightsizingRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRightsizingRecommendation indicates an expected call of GetRightsizingRecommendation
func (mr *MockCostExplorerAPIMockRecorder) GetRightsizingRecommendation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRightsizingRecommendation", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetRightsizingRecommendation), arg0)
}

// GetRightsizingRecommendationRequest mocks base method
func (m *MockCostExplorerAPI) GetRightsizingRecommendationRequest(arg0 *costexplorer.GetRightsizingRecommendationInput) (*request.Request, *costexplorer.GetRightsizingRecommendationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRightsizingRecommendationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetRightsizingRecommendationOutput)
	return ret0, ret1
}

// GetRightsizingRecommendationRequest indicates an expected call of GetRightsizingRecommendationRequest
func (mr *MockCostExplorerAPIMockRecorder) GetRightsizingRecommendationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRightsizingRecommendationRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetRightsizingRecommendationRequest), arg0)
}

// GetRightsizingRecommendationWithContext mocks base method
func (m *MockCostExplorerAPI) GetRightsizingRecommendationWithContext(arg0 context.Context, arg1 *costexplorer.GetRightsizingRecommendationInput, arg2 ...request.Option) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRightsizingRecommendationWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetRightsizingRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRightsizingRecommendationWithContext indicates an expected call of GetRightsizingRecommendationWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetRightsizingRecommendationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRightsizingRecommendationWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetRightsizingRecommendationWithContext), varargs...)
}

// GetSavingsPlansCoverage mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansCoverage(arg0 *costexplorer.GetSavingsPlansCoverageInput) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavingsPlansCoverage", arg0)
	ret0, _ := ret[0].(*costexplorer.GetSavingsPlansCoverageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavingsPlansCoverage indicates an expected call of GetSavingsPlansCoverage
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansCoverage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansCoverage", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansCoverage), arg0)
}

// GetSavingsPlansCoveragePages mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansCoveragePages(arg0 *costexplorer.GetSavingsPlansCoverageInput, arg1 func(*costexplorer.GetSavingsPlansCoverageOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavingsPlansCoveragePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSavingsPlansCoveragePages indicates an expected call of GetSavingsPlansCoveragePages
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansCoveragePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansCoveragePages", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansCoveragePages), arg0, arg1)
}

// GetSavingsPlansCoveragePagesWithContext mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansCoveragePagesWithContext(arg0 context.Context, arg1 *costexplorer.GetSavingsPlansCoverageInput, arg2 func(*costexplorer.GetSavingsPlansCoverageOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavingsPlansCoveragePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSavingsPlansCoveragePagesWithContext indicates an expected call of GetSavingsPlansCoveragePagesWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansCoveragePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansCoveragePagesWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansCoveragePagesWithContext), varargs...)
}

// GetSavingsPlansCoverageRequest mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansCoverageRequest(arg0 *costexplorer.GetSavingsPlansCoverageInput) (*request.Request, *costexplorer.GetSavingsPlansCoverageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavingsPlansCoverageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetSavingsPlansCoverageOutput)
	return ret0, ret1
}

// GetSavingsPlansCoverageRequest indicates an expected call of GetSavingsPlansCoverageRequest
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansCoverageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansCoverageRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansCoverageRequest), arg0)
}

// GetSavingsPlansCoverageWithContext mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansCoverageWithContext(arg0 context.Context, arg1 *costexplorer.GetSavingsPlansCoverageInput, arg2 ...request.Option) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavingsPlansCoverageWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetSavingsPlansCoverageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavingsPlansCoverageWithContext indicates an expected call of GetSavingsPlansCoverageWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansCoverageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansCoverageWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansCoverageWithContext), varargs...)
}

// GetSavingsPlansPurchaseRecommendation mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansPurchaseRecommendation(arg0 *costexplorer.GetSavingsPlansPurchaseRecommendationInput) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavingsPlansPurchaseRecommendation", arg0)
	ret0, _ := ret[0].(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavingsPlansPurchaseRecommendation indicates an expected call of GetSavingsPlansPurchaseRecommendation
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansPurchaseRecommendation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansPurchaseRecommendation", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansPurchaseRecommendation), arg0)
}

// GetSavingsPlansPurchaseRecommendationRequest mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansPurchaseRecommendationRequest(arg0 *costexplorer.GetSavingsPlansPurchaseRecommendationInput) (*request.Request, *costexplorer.GetSavingsPlansPurchaseRecommendationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavingsPlansPurchaseRecommendationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
	return ret0, ret1
}

// GetSavingsPlansPurchaseRecommendationRequest indicates an expected call of GetSavingsPlansPurchaseRecommendationRequest
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansPurchaseRecommendationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansPurchaseRecommendationRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansPurchaseRecommendationRequest), arg0)
}

// GetSavingsPlansPurchaseRecommendationWithContext mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansPurchaseRecommendationWithContext(arg0 context.Context, arg1 *costexplorer.GetSavingsPlansPurchaseRecommendationInput, arg2 ...request.Option) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavingsPlansPurchaseRecommendationWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavingsPlansPurchaseRecommendationWithContext indicates an expected call of GetSavingsPlansPurchaseRecommendationWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansPurchaseRecommendationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansPurchaseRecommendationWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansPurchaseRecommendationWithContext), varargs...)
}

// GetSavingsPlansUtilization mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansUtilization(arg0 *costexplorer.GetSavingsPlansUtilizationInput) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavingsPlansUtilization", arg0)
	ret0, _ := ret[0].(*costexplorer.GetSavingsPlansUtilizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavingsPlansUtilization indicates an expected call of GetSavingsPlansUtilization
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansUtilization", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansUtilization), arg0)
}

// GetSavingsPlansUtilizationDetails mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansUtilizationDetails(arg0 *costexplorer.GetSavingsPlansUtilizationDetailsInput) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavingsPlansUtilizationDetails", arg0)
	ret0, _ := ret[0].(*costexplorer.GetSavingsPlansUtilizationDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavingsPlansUtilizationDetails indicates an expected call of GetSavingsPlansUtilizationDetails
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansUtilizationDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansUtilizationDetails", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansUtilizationDetails), arg0)
}

// GetSavingsPlansUtilizationDetailsPages mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansUtilizationDetailsPages(arg0 *costexplorer.GetSavingsPlansUtilizationDetailsInput, arg1 func(*costexplorer.GetSavingsPlansUtilizationDetailsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavingsPlansUtilizationDetailsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSavingsPlansUtilizationDetailsPages indicates an expected call of GetSavingsPlansUtilizationDetailsPages
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansUtilizationDetailsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansUtilizationDetailsPages", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansUtilizationDetailsPages), arg0, arg1)
}

// GetSavingsPlansUtilizationDetailsPagesWithContext mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansUtilizationDetailsPagesWithContext(arg0 context.Context, arg1 *costexplorer.GetSavingsPlansUtilizationDetailsInput, arg2 func(*costexplorer.GetSavingsPlansUtilizationDetailsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavingsPlansUtilizationDetailsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSavingsPlansUtilizationDetailsPagesWithContext indicates an expected call of GetSavingsPlansUtilizationDetailsPagesWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansUtilizationDetailsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansUtilizationDetailsPagesWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansUtilizationDetailsPagesWithContext), varargs...)
}

// GetSavingsPlansUtilizationDetailsRequest mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansUtilizationDetailsRequest(arg0 *costexplorer.GetSavingsPlansUtilizationDetailsInput) (*request.Request, *costexplorer.GetSavingsPlansUtilizationDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavingsPlansUtilizationDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetSavingsPlansUtilizationDetailsOutput)
	return ret0, ret1
}

// GetSavingsPlansUtilizationDetailsRequest indicates an expected call of GetSavingsPlansUtilizationDetailsRequest
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansUtilizationDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansUtilizationDetailsRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansUtilizationDetailsRequest), arg0)
}

// GetSavingsPlansUtilizationDetailsWithContext mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansUtilizationDetailsWithContext(arg0 context.Context, arg1 *costexplorer.GetSavingsPlansUtilizationDetailsInput, arg2 ...request.Option) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavingsPlansUtilizationDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetSavingsPlansUtilizationDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavingsPlansUtilizationDetailsWithContext indicates an expected call of GetSavingsPlansUtilizationDetailsWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansUtilizationDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansUtilizationDetailsWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansUtilizationDetailsWithContext), varargs...)
}

// GetSavingsPlansUtilizationRequest mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansUtilizationRequest(arg0 *costexplorer.GetSavingsPlansUtilizationInput) (*request.Request, *costexplorer.GetSavingsPlansUtilizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavingsPlansUtilizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetSavingsPlansUtilizationOutput)
	return ret0, ret1
}

// GetSavingsPlansUtilizationRequest indicates an expected call of GetSavingsPlansUtilizationRequest
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansUtilizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansUtilizationRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansUtilizationRequest), arg0)
}

// GetSavingsPlansUtilizationWithContext mocks base method
func (m *MockCostExplorerAPI) GetSavingsPlansUtilizationWithContext(arg0 context.Context, arg1 *costexplorer.GetSavingsPlansUtilizationInput, arg2 ...request.Option) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavingsPlansUtilizationWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetSavingsPlansUtilizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavingsPlansUtilizationWithContext indicates an expected call of GetSavingsPlansUtilizationWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetSavingsPlansUtilizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavingsPlansUtilizationWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetSavingsPlansUtilizationWithContext), varargs...)
}

// GetTags mocks base method
func (m *MockCostExplorerAPI) GetTags(arg0 *costexplorer.GetTagsInput) (*costexplorer.GetTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0)
	ret0, _ := ret[0].(*costexplorer.GetTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags
func (mr *MockCostExplorerAPIMockRecorder) GetTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetTags), arg0)
}

// GetTagsRequest mocks base method
func (m *MockCostExplorerAPI) GetTagsRequest(arg0 *costexplorer.GetTagsInput) (*request.Request, *costexplorer.GetTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetTagsOutput)
	return ret0, ret1
}

// GetTagsRequest indicates an expected call of GetTagsRequest
func (mr *MockCostExplorerAPIMockRecorder) GetTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetTagsRequest), arg0)
}

// GetTagsWithContext mocks base method
func (m *MockCostExplorerAPI) GetTagsWithContext(arg0 context.Context, arg1 *costexplorer.GetTagsInput, arg2 ...request.Option) (*costexplorer.GetTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagsWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsWithContext indicates an expected call of GetTagsWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetTagsWithContext), varargs...)
}

// GetUsageForecast mocks base method
func (m *MockCostExplorerAPI) GetUsageForecast(arg0 *costexplorer.GetUsageForecastInput) (*costexplorer.GetUsageForecastOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsageForecast", arg0)
	ret0, _ := ret[0].(*costexplorer.GetUsageForecastOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsageForecast indicates an expected call of GetUsageForecast
func (mr *MockCostExplorerAPIMockRecorder) GetUsageForecast(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageForecast", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetUsageForecast), arg0)
}

// GetUsageForecastRequest mocks base method
func (m *MockCostExplorerAPI) GetUsageForecastRequest(arg0 *costexplorer.GetUsageForecastInput) (*request.Request, *costexplorer.GetUsageForecastOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsageForecastRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.GetUsageForecastOutput)
	return ret0, ret1
}

// GetUsageForecastRequest indicates an expected call of GetUsageForecastRequest
func (mr *MockCostExplorerAPIMockRecorder) GetUsageForecastRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageForecastRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetUsageForecastRequest), arg0)
}

// GetUsageForecastWithContext mocks base method
func (m *MockCostExplorerAPI) GetUsageForecastWithContext(arg0 context.Context, arg1 *costexplorer.GetUsageForecastInput, arg2 ...request.Option) (*costexplorer.GetUsageForecastOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsageForecastWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetUsageForecastOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsageForecastWithContext indicates an expected call of GetUsageForecastWithContext
func (mr *MockCostExplorerAPIMockRecorder) GetUsageForecastWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageForecastWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).GetUsageForecastWithContext), varargs...)
}

// ListCostCategoryDefinitions mocks base method
func (m *MockCostExplorerAPI) ListCostCategoryDefinitions(arg0 *costexplorer.ListCostCategoryDefinitionsInput) (*costexplorer.ListCostCategoryDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCostCategoryDefinitions", arg0)
	ret0, _ := ret[0].(*costexplorer.ListCostCategoryDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCostCategoryDefinitions indicates an expected call of ListCostCategoryDefinitions
func (mr *MockCostExplorerAPIMockRecorder) ListCostCategoryDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCostCategoryDefinitions", reflect.TypeOf((*MockCostExplorerAPI)(nil).ListCostCategoryDefinitions), arg0)
}

// ListCostCategoryDefinitionsPages mocks base method
func (m *MockCostExplorerAPI) ListCostCategoryDefinitionsPages(arg0 *costexplorer.ListCostCategoryDefinitionsInput, arg1 func(*costexplorer.ListCostCategoryDefinitionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCostCategoryDefinitionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCostCategoryDefinitionsPages indicates an expected call of ListCostCategoryDefinitionsPages
func (mr *MockCostExplorerAPIMockRecorder) ListCostCategoryDefinitionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCostCategoryDefinitionsPages", reflect.TypeOf((*MockCostExplorerAPI)(nil).ListCostCategoryDefinitionsPages), arg0, arg1)
}

// ListCostCategoryDefinitionsPagesWithContext mocks base method
func (m *MockCostExplorerAPI) ListCostCategoryDefinitionsPagesWithContext(arg0 context.Context, arg1 *costexplorer.ListCostCategoryDefinitionsInput, arg2 func(*costexplorer.ListCostCategoryDefinitionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCostCategoryDefinitionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCostCategoryDefinitionsPagesWithContext indicates an expected call of ListCostCategoryDefinitionsPagesWithContext
func (mr *MockCostExplorerAPIMockRecorder) ListCostCategoryDefinitionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCostCategoryDefinitionsPagesWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).ListCostCategoryDefinitionsPagesWithContext), varargs...)
}

// ListCostCategoryDefinitionsRequest mocks base method
func (m *MockCostExplorerAPI) ListCostCategoryDefinitionsRequest(arg0 *costexplorer.ListCostCategoryDefinitionsInput) (*request.Request, *costexplorer.ListCostCategoryDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCostCategoryDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.ListCostCategoryDefinitionsOutput)
	return ret0, ret1
}

// ListCostCategoryDefinitionsRequest indicates an expected call of ListCostCategoryDefinitionsRequest
func (mr *MockCostExplorerAPIMockRecorder) ListCostCategoryDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCostCategoryDefinitionsRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).ListCostCategoryDefinitionsRequest), arg0)
}

// ListCostCategoryDefinitionsWithContext mocks base method
func (m *MockCostExplorerAPI) ListCostCategoryDefinitionsWithContext(arg0 context.Context, arg1 *costexplorer.ListCostCategoryDefinitionsInput, arg2 ...request.Option) (*costexplorer.ListCostCategoryDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCostCategoryDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.ListCostCategoryDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCostCategoryDefinitionsWithContext indicates an expected call of ListCostCategoryDefinitionsWithContext
func (mr *MockCostExplorerAPIMockRecorder) ListCostCategoryDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCostCategoryDefinitionsWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).ListCostCategoryDefinitionsWithContext), varargs...)
}

// UpdateCostCategoryDefinition mocks base method
func (m *MockCostExplorerAPI) UpdateCostCategoryDefinition(arg0 *costexplorer.UpdateCostCategoryDefinitionInput) (*costexplorer.UpdateCostCategoryDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCostCategoryDefinition", arg0)
	ret0, _ := ret[0].(*costexplorer.UpdateCostCategoryDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCostCategoryDefinition indicates an expected call of UpdateCostCategoryDefinition
func (mr *MockCostExplorerAPIMockRecorder) UpdateCostCategoryDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCostCategoryDefinition", reflect.TypeOf((*MockCostExplorerAPI)(nil).UpdateCostCategoryDefinition), arg0)
}

// UpdateCostCategoryDefinitionRequest mocks base method
func (m *MockCostExplorerAPI) UpdateCostCategoryDefinitionRequest(arg0 *costexplorer.UpdateCostCategoryDefinitionInput) (*request.Request, *costexplorer.UpdateCostCategoryDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCostCategoryDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*costexplorer.UpdateCostCategoryDefinitionOutput)
	return ret0, ret1
}

// UpdateCostCategoryDefinitionRequest indicates an expected call of UpdateCostCategoryDefinitionRequest
func (mr *MockCostExplorerAPIMockRecorder) UpdateCostCategoryDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCostCategoryDefinitionRequest", reflect.TypeOf((*MockCostExplorerAPI)(nil).UpdateCostCategoryDefinitionRequest), arg0)
}

// UpdateCostCategoryDefinitionWithContext mocks base method
func (m *MockCostExplorerAPI) UpdateCostCategoryDefinitionWithContext(arg0 context.Context, arg1 *costexplorer.UpdateCostCategoryDefinitionInput, arg2 ...request.Option) (*costexplorer.UpdateCostCategoryDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCostCategoryDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*costexplorer.UpdateCostCategoryDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCostCategoryDefinitionWithContext indicates an expected call of UpdateCostCategoryDefinitionWithContext
func (mr *MockCostExplorerAPIMockRecorder) UpdateCostCategoryDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCostCategoryDefinitionWithContext", reflect.TypeOf((*MockCostExplorerAPI)(nil).UpdateCostCategoryDefinitionWithContext), varargs...)
}
